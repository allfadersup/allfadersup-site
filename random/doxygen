<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html><head><title></title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</head>
<body>
<div style="page-break-before:always; page-break-after:always"><div><p>AAX SDK<br/>2.8.1<br/></p>
<p>Generated by Doxygen 1.9.1</p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div>
</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>i<br/></b></p>
<p><b>1 Main Page 1<br/></b>1.1 Welcome to AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1<br/></p>
<p>1.1.1 The Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1<br/>1.1.2 More Topics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2<br/>1.1.3 Test Tools &amp; Utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2<br/>1.1.4 Supplemental Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2<br/></p>
<p>1.2 SDK Folder Hierarchy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2<br/>1.3 Contacting Avid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3<br/>1.4 Licensing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3<br/></p>
<p><b>2 Todo List 5<br/></b></p>
<p><b>3 Host Compatibility Notes 9<br/></b></p>
<p><b>4 Legacy Porting Notes 15<br/></b></p>
<p><b>5 Deprecated List 19<br/></b></p>
<p><b>6 Not Used by AAX Plug-Ins 21<br/></b></p>
<p><b>7 Module Index 23<br/></b>7.1 Manual . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23<br/></p>
<p><b>8 Namespace Index 25<br/></b>8.1 Namespace List . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25<br/></p>
<p><b>9 Hierarchical Index 27<br/></b>9.1 Class Hierarchy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27<br/></p>
<p><b>10 Class Index 31<br/></b>10.1 Class List . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31<br/></p>
<p><b>11 File Index 39<br/></b>11.1 File List . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39<br/></p>
<p><b>12 Module Documentation 47<br/></b>12.1 AAX SDK Manual . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47<br/></p>
<p>12.1.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47<br/>12.1.2 Welcome to AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47<br/></p>
<p>12.1.2.1 The Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47<br/>12.1.2.2 More Topics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48<br/>12.1.2.3 Test Tools &amp; Utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48<br/>12.1.2.4 Supplemental Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48<br/></p>
<p>12.1.3 SDK Folder Hierarchy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48<br/>12.1.4 Contacting Avid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49<br/>12.1.5 Licensing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>ii<br/></b></p>
<p>12.2 Getting Started with AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50<br/>12.2.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50<br/>12.2.2 Welcome . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50<br/>12.2.3 Quick Start . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51<br/>12.2.4 AAX Design Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52<br/></p>
<p>12.2.4.1 Architecture Philosophy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52<br/>12.2.4.2 Design Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52<br/>12.2.4.3 Component Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52<br/>12.2.4.4 Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53<br/>12.2.4.5 Data Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53<br/>12.2.4.6 GUI Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53<br/>12.2.4.7 Describe . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54<br/>12.2.4.8 Controller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54<br/></p>
<p>12.2.5 DemoGain Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54<br/>12.2.5.1 AAX Plug-In Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54<br/>12.2.5.2 Data Model: Create Your Parameter . . . . . . . . . . . . . . . . . . . . . . . . 55<br/>12.2.5.3 Algorithm: Add coefficients to the algorithm's context structure . . . . . . . . . . . 55<br/>12.2.5.4 Describe: Connect the parameter throughout the plug-in . . . . . . . . . . . . . . 57<br/>12.2.5.5 GUI: Add a control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57<br/></p>
<p>12.2.6 Next Steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58<br/>12.3 Core AAX Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58<br/></p>
<p>12.3.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58<br/>12.4 Description callback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59<br/></p>
<p>12.4.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59<br/>12.4.2 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59<br/>12.4.3 About the Describe callback and AAX descriptor interfaces . . . . . . . . . . . . . . . . . . 60<br/>12.4.4 Top level: Collection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61<br/>12.4.5 Middle level: Effects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62<br/></p>
<p>12.4.5.1 Registering multiple Effects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62<br/>12.4.6 Lowest level: Algorithm components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63<br/></p>
<p>12.4.6.1 Algorithm callback properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63<br/>12.4.7 Host feature and environment checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64<br/>12.4.8 Checking Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64<br/></p>
<p>12.4.8.1 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64<br/>12.4.8.2 The Problem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64<br/>12.4.8.3 The Solution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65<br/>12.4.8.4 Handling Errors and Managing Control Flow . . . . . . . . . . . . . . . . . . . . 65<br/></p>
<p>12.4.9 Describe Validation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66<br/>12.4.9.1 Validation with DSH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66<br/>12.4.9.2 Validation with Pro Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67<br/></p>
<p>12.4.10 Additional Topics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67<br/>12.4.11 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>iii<br/></b></p>
<p>12.4.11.1 AAXRegisterPlugin() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68<br/>12.4.11.2 GetEffectDescriptions() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68<br/></p>
<p>12.5 Real-time algorithm callback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68<br/>12.5.1 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68<br/>12.5.2 Algorithm definition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69<br/>12.5.3 Algorithm memory management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69<br/>12.5.4 Communicating with the algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70<br/>12.5.5 Algorithm initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70<br/></p>
<p>12.5.5.1 Private data initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71<br/>12.5.5.2 Optional initialization callback . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71<br/></p>
<p>12.5.6 Algorithm processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71<br/>12.5.7 Persistent algorithm memory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72<br/></p>
<p>12.5.7.1 Private memory characteristics . . . . . . . . . . . . . . . . . . . . . . . . . . . 72<br/>12.5.7.2 Private data port registration . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72<br/>12.5.7.3 Private data initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72<br/>12.5.7.4 Private data communication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72<br/></p>
<p>12.5.8 Example algorithm callback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73<br/>12.5.9 Port Types and Behavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73<br/></p>
<p>12.5.9.1 Standard message input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73<br/>12.5.9.2 Internal state storage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74<br/>12.5.9.3 Metering output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74<br/>12.5.9.4 Environment variable retrieval . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74<br/>12.5.9.5 Other functionality enhancement . . . . . . . . . . . . . . . . . . . . . . . . . . 74<br/></p>
<p>12.5.10 Additional Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74<br/>12.6 Data model interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75<br/></p>
<p>12.6.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75<br/>12.6.2 Related classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76<br/></p>
<p>12.7 Data model overrides interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77<br/>12.7.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77<br/>12.7.2 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77<br/></p>
<p>12.7.2.1 GetNumberOfChanges() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77<br/>12.8 GUI interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78<br/></p>
<p>12.8.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78<br/>12.9 AAX communication protocols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79<br/></p>
<p>12.9.1 Communication with the C++ interface objects . . . . . . . . . . . . . . . . . . . . . . . . 79<br/>12.9.1.1 Direct host communication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79<br/>12.9.1.2 Custom data blocks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79<br/>12.9.1.3 Notifications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80<br/>12.9.1.4 Direct pointer sharing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80<br/></p>
<p>12.9.2 Communication with the real-time algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . 80<br/>12.9.2.1 Data packets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80<br/>12.9.2.2 Host-managed context fields . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>iv<br/></b></p>
<p>12.9.2.3 Direct data transfers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81<br/>12.10 AAX Format Specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81<br/></p>
<p>12.10.1 .aaxplugin Directory Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81<br/>12.10.2 Required Symbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82<br/></p>
<p>12.11 Additional AAX features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82<br/>12.11.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82<br/></p>
<p>12.12 Auxiliary Output Stems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83<br/>12.12.1 Overview of Auxiliary Output Stems in AAX . . . . . . . . . . . . . . . . . . . . . . . . . 83<br/>12.12.2 Implementing Auxiliary Output Stems . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84<br/></p>
<p>12.13 Background processing callback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84<br/>12.13.1 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84<br/>12.13.2 Background thread description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84<br/>12.13.3 Restrictions and limitations of background threads . . . . . . . . . . . . . . . . . . . . . . 85<br/>12.13.4 Background thread performance characteristics on DSP systems . . . . . . . . . . . . . . 85<br/>12.13.5 Background thread memory management . . . . . . . . . . . . . . . . . . . . . . . . . . 85<br/>12.13.6 Additional information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85<br/></p>
<p>12.14 Direct Memory Access . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86<br/>12.14.1 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86<br/>12.14.2 DMA facility overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86<br/>12.14.3 DMA transfer modes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86<br/>12.14.4 Registering for DMA transfers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86<br/>12.14.5 DMA restrictions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87<br/>12.14.6 Additional information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87<br/></p>
<p>12.15 Direct data access interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87<br/>12.15.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87<br/>12.15.2 Convenience class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88<br/>12.15.3 Private data access interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88<br/>12.15.4 Communicating with other modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88<br/></p>
<p>12.16 EQ and Dynamics Curve Displays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89<br/>12.16.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89<br/>12.16.2 Enumeration Type Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91<br/></p>
<p>12.16.2.1 AAX_ECurveType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91<br/>12.16.3 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92<br/></p>
<p>12.16.3.1 GetCurveData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92<br/>12.16.3.2 GetCurveDataMeterIds() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93<br/>12.16.3.3 GetCurveDataDisplayRange() . . . . . . . . . . . . . . . . . . . . . . . . . . . 93<br/></p>
<p>12.17 Hybrid Processing architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94<br/>12.17.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94<br/>12.17.2 Overview of Hybrid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94<br/>12.17.3 Implementing Hybrid processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95<br/>12.17.4 Additional information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95<br/></p>
<p>12.17.4.1 Parameter update timing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>v<br/></b></p>
<p>12.17.4.2 Host support and alternatives . . . . . . . . . . . . . . . . . . . . . . . . . . . 95<br/>12.17.5 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96<br/></p>
<p>12.17.5.1 RenderAudio_Hybrid() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96<br/>12.17.5.2 GetHybridSignalLatency() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96<br/></p>
<p>12.18 Plug-in meters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97<br/>12.18.1 Overview of metering in AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97<br/>12.18.2 Adding meters to an Effect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97<br/></p>
<p>12.18.2.1 Customizing meter behavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97<br/>12.18.3 Reporting meter values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98<br/>12.18.4 Displaying meter values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98<br/>12.18.5 Alternatives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99<br/></p>
<p>12.19 MIDI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99<br/>12.19.1 MIDI Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99<br/>12.19.2 MIDI node types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99<br/>12.19.3 Adding MIDI functionality to a plug-in . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99<br/>12.19.4 Using MIDI in a plug-in algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100<br/>12.19.5 Accessing MIDI in the plug-in data model . . . . . . . . . . . . . . . . . . . . . . . . . . 101<br/>12.19.6 Support functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101<br/></p>
<p>12.20 Offline processing interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102<br/>12.20.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102<br/></p>
<p>12.21 Properties File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102<br/>12.22 Sidechain Inputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103<br/></p>
<p>12.22.1 Overview of Sidechain Inputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103<br/>12.22.2 Adding a Sidechain Input to an Effect . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103<br/></p>
<p>12.23 Task agent interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104<br/>12.23.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104<br/>12.23.2 Communicating with other modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105<br/>12.23.3 Enumeration Type Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105<br/></p>
<p>12.23.3.1 AAX_TaskCompletionStatus . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105<br/>12.24 AAX Library features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106<br/></p>
<p>12.24.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106<br/>12.25 Parameter Manager . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106<br/></p>
<p>12.25.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106<br/>12.25.2 Parameter concepts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107<br/></p>
<p>12.25.2.1 Parameter value domains . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107<br/>12.25.2.2 Taper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108<br/>12.25.2.3 Delegates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108<br/>12.25.2.4 Model-View-Controller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108<br/></p>
<p>12.26 Taper delegates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109<br/>12.26.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109<br/></p>
<p>12.27 Display delegates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109<br/>12.27.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>vi<br/></b></p>
<p>12.27.2 Display delegate decorators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110<br/>12.27.2.1 Display delegate decorator implementation . . . . . . . . . . . . . . . . . . . . 110<br/>12.27.2.2 Decibel decorator example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110<br/></p>
<p>12.28 Display delegate decorators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111<br/>12.28.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111<br/></p>
<p>12.29 Monolithic parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112<br/>12.29.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112<br/></p>
<p>12.30 Additional Topics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112<br/>12.30.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112<br/></p>
<p>12.31 Real-time performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112<br/>12.31.1 Things NOT To Do In An Audio Plug-In Render Callback . . . . . . . . . . . . . . . . . . 113<br/>12.31.2 Things To Do In An Audio Plug-In Render Callback . . . . . . . . . . . . . . . . . . . . . 113<br/>12.31.3 Good Resources And Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114<br/></p>
<p>12.32 Parameter automation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114<br/>12.32.1 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114<br/>12.32.2 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114<br/>12.32.3 Plug-in elements used for automation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115<br/></p>
<p>12.32.3.1 Defining automatable parameters . . . . . . . . . . . . . . . . . . . . . . . . . 115<br/>12.32.4 Advanced automation topics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116<br/></p>
<p>12.33 Parameter updates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116<br/>12.33.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116<br/></p>
<p>12.34 Parameter update timing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116<br/>12.34.1 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116<br/>12.34.2 Timeline Locations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117<br/>12.34.3 Coordinating the data model and algorithm . . . . . . . . . . . . . . . . . . . . . . . . . 117<br/></p>
<p>12.34.3.1 A closer look at the AAX packet delivery system . . . . . . . . . . . . . . . . . 117<br/>12.34.4 Fixing timing issues due to shared data . . . . . . . . . . . . . . . . . . . . . . . . . . . 118<br/></p>
<p>12.34.4.1 Monolithic plug-ins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118<br/>12.34.4.2 How to resolve timing errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119<br/>12.34.4.3 Additional considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120<br/></p>
<p>12.34.5 Determining the absolute timestamp for a parameter update . . . . . . . . . . . . . . . . 121<br/>12.34.5.1 Obtaining timeline information . . . . . . . . . . . . . . . . . . . . . . . . . . . 121<br/>12.34.5.2 Determining the timeline position of a parameter update . . . . . . . . . . . . . 121<br/></p>
<p>12.35 Token protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123<br/>12.35.1 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123<br/>12.35.2 An Introduction to Tokens . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123<br/></p>
<p>12.35.2.1 Touch . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124<br/>12.35.2.2 Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124<br/>12.35.2.3 Update . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125<br/></p>
<p>12.35.3 Basic Token Operation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126<br/>12.35.3.1 User Editing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126<br/>12.35.3.2 Automation Playback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>vii<br/></b></p>
<p>12.35.3.3 Chunk Restoring . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127<br/>12.36 Basic parameter update sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127<br/></p>
<p>12.36.1 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127<br/>12.36.1.1 Notes on threading for these sequences . . . . . . . . . . . . . . . . . . . . . . 127<br/></p>
<p>12.36.2 User-generated update . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127<br/>12.36.2.1 High-level interface calls and events . . . . . . . . . . . . . . . . . . . . . . . . 128<br/>12.36.2.2 Detailed sequence for default implementation . . . . . . . . . . . . . . . . . . . 128<br/>12.36.2.3 Updates from control surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . 129<br/></p>
<p>12.36.3 Automation playback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130<br/>12.36.4 Initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130<br/></p>
<p>12.37 Linked parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131<br/>12.37.1 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131<br/>12.37.2 Basics of Linked Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131<br/></p>
<p>12.37.2.1 Basic considerations for parameter linking . . . . . . . . . . . . . . . . . . . . . 132<br/>12.37.2.2 Defining proper linked parameter behavior . . . . . . . . . . . . . . . . . . . . 132<br/></p>
<p>12.37.3 Linked Parameter Operation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134<br/>12.37.3.1 User Editing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134<br/>12.37.3.2 Automation Playback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135<br/>12.37.3.3 Chunk Restoring . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135<br/></p>
<p>12.37.4 Changing Tapers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135<br/>12.38 Linked parameter update sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136<br/></p>
<p>12.38.1 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136<br/>12.38.1.1 Notes on threading for these sequences . . . . . . . . . . . . . . . . . . . . . . 136<br/></p>
<p>12.38.2 User-generated update . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137<br/>12.38.2.1 High-level interface calls and events . . . . . . . . . . . . . . . . . . . . . . . . 138<br/>12.38.2.2 Detailed interface calls and events . . . . . . . . . . . . . . . . . . . . . . . . . 138<br/></p>
<p>12.38.3 Update from automation playback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139<br/>12.39 Plug-in type conversion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140<br/></p>
<p>12.39.1 About this specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140<br/>12.39.2 Terminology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141<br/>12.39.3 Scope of this specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141<br/>12.39.4 Topological constraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142<br/>12.39.5 Implicit conversions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142<br/>12.39.6 Explicit conversions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143<br/>12.39.7 Type deprecation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143<br/></p>
<p>12.40 The Avid Component Framework (ACF) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144<br/>12.40.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144<br/>12.40.2 More details . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144<br/>12.40.3 ACF interfaces in AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145<br/>12.40.4 Using ACF interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146<br/></p>
<p>12.40.4.1 Host-provided interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146<br/>12.40.4.2 Plug-in interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>viii<br/></b></p>
<p>12.40.5 Interface versioning in AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147<br/>12.41 ACF Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149<br/></p>
<p>12.41.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149<br/>12.42 AAX Host Guides . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150<br/></p>
<p>12.42.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150<br/>12.43 Pro Tools Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150<br/></p>
<p>12.43.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150<br/>12.43.2 About this document . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151<br/>12.43.3 Processing modes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151<br/></p>
<p>12.43.3.1 Real-time processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151<br/>12.43.3.2 Non-real-time processing (AudioSuite) . . . . . . . . . . . . . . . . . . . . . . . 152<br/>12.43.3.3 Multichannel and Multi-Mono . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152<br/></p>
<p>12.43.4 Requirements for AAX plug-in compatibility with Pro Tools . . . . . . . . . . . . . . . . . . 153<br/>12.43.4.1 Install directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153<br/>12.43.4.2 Plug-in name and file structure . . . . . . . . . . . . . . . . . . . . . . . . . . . 153<br/>12.43.4.3 Digital signature . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153<br/></p>
<p>12.43.5 Audio Engine Behavior and Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155<br/>12.43.5.1 Plug-in loading and AAE initialization . . . . . . . . . . . . . . . . . . . . . . . 155<br/>12.43.5.2 Plug-in initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156<br/>12.43.5.3 Run-time processing behavior . . . . . . . . . . . . . . . . . . . . . . . . . . . 157<br/></p>
<p>12.43.6 Basic plug-in operation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158<br/>12.43.6.1 Configuration management . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158<br/>12.43.6.2 Plug-in activation and deactivation . . . . . . . . . . . . . . . . . . . . . . . . . 158<br/>12.43.6.3 Plug-in bypass . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158<br/>12.43.6.4 Presets and settings management . . . . . . . . . . . . . . . . . . . . . . . . . 159<br/>12.43.6.5 Modifier key behavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161<br/></p>
<p>12.43.7 Optional plug-in features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161<br/>12.43.7.1 Audio management features . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161<br/>12.43.7.2 Plug-in categories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164<br/>12.43.7.3 Advanced non-real-time processing . . . . . . . . . . . . . . . . . . . . . . . . 164<br/>12.43.7.4 Clip drag and drop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165<br/></p>
<p>12.43.8 Using the Pro Tools Scripting SDK with AAX . . . . . . . . . . . . . . . . . . . . . . . . . 166<br/>12.43.9 Plug-ins with MIDI support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166<br/></p>
<p>12.43.9.1 Instrument tracks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167<br/>12.43.9.2 MIDI effects and MIDI insert chains . . . . . . . . . . . . . . . . . . . . . . . . 167<br/></p>
<p>12.43.10 Debugging AAX plug-ins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167<br/>12.43.10.1 Debugging within Pro Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167<br/>12.43.10.2 DigiShell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168<br/>12.43.10.3 DigiTrace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168<br/></p>
<p>12.43.11 Troubleshooting common AAX plug-in failures . . . . . . . . . . . . . . . . . . . . . . . 168<br/>12.43.12 Using DigiOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169<br/></p>
<p>12.43.12.1 Useful DigiOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>ix<br/></b></p>
<p>12.43.13 Compatibility Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171<br/>12.44 Media Composer Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171<br/></p>
<p>12.44.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171<br/>12.44.2 About this document . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172<br/>12.44.3 Processing modes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172<br/></p>
<p>12.44.3.1 Non-real-time processing (AudioSuite) . . . . . . . . . . . . . . . . . . . . . . . 172<br/>12.44.3.2 Real-time processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174<br/></p>
<p>12.44.4 Compatibility requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176<br/>12.44.4.1 Install directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176<br/>12.44.4.2 Plug-in name and file structure . . . . . . . . . . . . . . . . . . . . . . . . . . . 176<br/></p>
<p>12.44.5 AAX feature support in Media Composer . . . . . . . . . . . . . . . . . . . . . . . . . . . 176<br/>12.44.5.1 Processing configurations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177<br/>12.44.5.2 Preset management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177<br/>12.44.5.3 Unsupported features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179<br/>12.44.5.4 Additional feature support notes . . . . . . . . . . . . . . . . . . . . . . . . . . 179<br/></p>
<p>12.44.6 Additional Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179<br/>12.44.6.1 Audio Engine features and behavior . . . . . . . . . . . . . . . . . . . . . . . . 179<br/>12.44.6.2 Debugging AAX plug-ins in Media Composer . . . . . . . . . . . . . . . . . . . 180<br/></p>
<p>12.45 HDX DSP Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180<br/>12.45.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180<br/>12.45.2 Overview of TI DSP Algorithms in AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180<br/>12.45.3 Getting Started with HDX DSP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181<br/>12.45.4 The HDX DSP Platform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181<br/></p>
<p>12.45.4.1 DSP characteristics: instruction processing . . . . . . . . . . . . . . . . . . . . 181<br/>12.45.4.2 DSP characteristics: audio buffers . . . . . . . . . . . . . . . . . . . . . . . . . 181<br/>12.45.4.3 DSP characteristics: memory . . . . . . . . . . . . . . . . . . . . . . . . . . . 182<br/>12.45.4.4 System characteristics: DSP/host data transfers . . . . . . . . . . . . . . . . . 182<br/>12.45.4.5 TI Shell characteristics: Memory allocation . . . . . . . . . . . . . . . . . . . . 183<br/>12.45.4.6 TI Shell characteristics: Data packet services . . . . . . . . . . . . . . . . . . . 184<br/>12.45.4.7 TI Shell characteristics: Instance allocation . . . . . . . . . . . . . . . . . . . . 185<br/>12.45.4.8 Additional TI Shell services . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186<br/></p>
<p>12.45.5 Requirements for HDX DSP Plug-Ins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186<br/>12.45.5.1 Plug-in description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186<br/>12.45.5.2 Performance measurement and reporting . . . . . . . . . . . . . . . . . . . . . 187<br/>12.45.5.3 Plug-in compilation and packaging . . . . . . . . . . . . . . . . . . . . . . . . . 188<br/></p>
<p>12.45.6 TI Development Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189<br/>12.45.6.1 Code Composer Studio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189<br/>12.45.6.2 The TMS320C6000 C++ compiler . . . . . . . . . . . . . . . . . . . . . . . . . 193<br/>12.45.6.3 DigiShell test tool (DSH) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194<br/>12.45.6.4 Hardware Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195<br/>12.45.6.5 Tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197<br/>12.45.6.6 Testing in Pro Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>x<br/></b></p>
<p>12.45.7 Common Issues with TI Development . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198<br/>12.45.7.1 Data structure compatibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198<br/></p>
<p>12.45.8 TI Optimization Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202<br/>12.45.8.1 Optimization quick start . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202<br/>12.45.8.2 Compiler and linker options . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203<br/>12.45.8.3 The load-update-store pattern . . . . . . . . . . . . . . . . . . . . . . . . . . . 205<br/>12.45.8.4 Case study: IIR filter implemenation on TI 672x DSPs . . . . . . . . . . . . . . 206<br/>12.45.8.5 Understanding CGTools-generated ASM files . . . . . . . . . . . . . . . . . . . 207<br/>12.45.8.6 C keywords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209<br/>12.45.8.7 Data types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211<br/>12.45.8.8 Case study: Efficient parameter smoothing at single and double precision . . . . 213<br/>12.45.8.9 Refactoring conditionals and branches . . . . . . . . . . . . . . . . . . . . . . 214<br/>12.45.8.10 Case study: pipeline refactoring in Avid's EQ3 and Dyn3 plug-ins . . . . . . . . 216<br/>12.45.8.11 Case study: Additional optimization lessons from EQ3 and Dyn3 . . . . . . . . 218<br/>12.45.8.12 Optimization on the HDX platform . . . . . . . . . . . . . . . . . . . . . . . . 220<br/>12.45.8.13 Code Composer Studio optimization tools . . . . . . . . . . . . . . . . . . . . 221<br/></p>
<p>12.45.9 Error Codes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221<br/>12.45.9.1 -138xx: DHM Core DSP errors . . . . . . . . . . . . . . . . . . . . . . . . . . . 221<br/>12.45.9.2 -140xx: AAX Host errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222<br/>12.45.9.3 -141xx: TI System errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222<br/>12.45.9.4 -142xx: DIDL errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223<br/>12.45.9.5 -144xx: HDX hardware errors . . . . . . . . . . . . . . . . . . . . . . . . . . . 224<br/>12.45.9.6 -145xx: DHM isochronous audio engine errors . . . . . . . . . . . . . . . . . . 224<br/>12.45.9.7 -30xxx: Dynamically-generated error codes . . . . . . . . . . . . . . . . . . . . 225<br/></p>
<p>12.46 Page Table Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225<br/>12.46.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225<br/>12.46.2 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226<br/></p>
<p>12.46.2.1 Control Surfaces Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226<br/>12.46.2.2 Page Tables Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226<br/></p>
<p>12.46.3 Avid Control Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226<br/>12.46.3.1 EUCON . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226<br/>12.46.3.2 VENUE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227<br/></p>
<p>12.46.4 Plug-In Page Table Guidelines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227<br/>12.46.4.1 General Guidelines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228<br/></p>
<p>12.46.5 Avid Center Section Page Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228<br/>12.46.5.1 Center Section Page Table Guidelines . . . . . . . . . . . . . . . . . . . . . . . 229<br/>12.46.5.2 Center Section Parameter Mapping to Single-Column/Row Layouts . . . . . . . 233<br/>12.46.5.3 Center Section Parameter Mapping in S6 Expand Mode . . . . . . . . . . . . . 244<br/>12.46.5.4 Center Section Parameter Mapping on VENUE | S3L-X . . . . . . . . . . . . . . 244<br/></p>
<p>12.46.6 EUCON Page Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245<br/>12.46.6.1 Specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245<br/>12.46.6.2 Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xi<br/></b></p>
<p>12.46.6.3 Conventions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246<br/>12.46.6.4 Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246<br/></p>
<p>12.46.7 Implementing Page Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246<br/>12.46.7.1 Page table XML specification . . . . . . . . . . . . . . . . . . . . . . . . . . . 246<br/>12.46.7.2 Parameter identifiers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249<br/>12.46.7.3 Creating page tables using the AAX Plug-In Page Table Editor . . . . . . . . . . 250<br/>12.46.7.4 Verifying Page Table Layouts: The Hidden Pop-Up Menu . . . . . . . . . . . . . 251<br/>12.46.7.5 Control Highlighting Scheme . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252<br/>12.46.7.6 Control Numbering Layouts . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252<br/>12.46.7.7 Alphanumeric Displays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253<br/>12.46.7.8 ProControl Display . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254<br/></p>
<p>12.46.8 Appendix A. Get Parameter Value Info . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255<br/>12.46.8.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255<br/>12.46.8.2 Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255<br/></p>
<p>12.47 DigiTrace Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257<br/>12.47.1 On this page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257<br/>12.47.2 What is DigiTrace? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258<br/></p>
<p>12.47.2.1 What does DigiTrace do? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258<br/>12.47.3 DigiTrace quick start guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258<br/></p>
<p>12.47.3.1 Find and decrypt DigiTrace log files . . . . . . . . . . . . . . . . . . . . . . . . 259<br/>12.47.3.2 Configure DigiTrace for AAX plug-in logging . . . . . . . . . . . . . . . . . . . . 259<br/>12.47.3.3 Configure DigiTrace for plain-text output . . . . . . . . . . . . . . . . . . . . . . 259<br/>12.47.3.4 Add tracing to a plug-in . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260<br/></p>
<p>12.47.4 DigiTrace log files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260<br/>12.47.4.1 Where are DigiTrace log files stored? . . . . . . . . . . . . . . . . . . . . . . . 260<br/>12.47.4.2 Monitoring DigiTrace logs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260<br/>12.47.4.3 Log file formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261<br/></p>
<p>12.47.5 Configuring DigiTrace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261<br/>12.47.5.1 Trace facilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262<br/>12.47.5.2 Trace priorities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262<br/>12.47.5.3 Useful DigiTrace facilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262<br/></p>
<p>12.47.6 Bonus features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263<br/>12.47.6.1 Real-time AAE performance logging with DigiTrace . . . . . . . . . . . . . . . . 263<br/>12.47.6.2 Adding signposts to the DigiTrace log at run-time . . . . . . . . . . . . . . . . . 264<br/></p>
<p>12.47.7 Adding traces to an AAX plug-in . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264<br/>12.47.7.1 Basic AAX logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264<br/>12.47.7.2 Advanced DigiTrace logging features . . . . . . . . . . . . . . . . . . . . . . . 264<br/>12.47.7.3 Security concerns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266<br/></p>
<p>12.47.8 Advanced DigiTrace configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266<br/>12.47.8.1 Configuration command format . . . . . . . . . . . . . . . . . . . . . . . . . . 266<br/>12.47.8.2 Advanced configuration commands . . . . . . . . . . . . . . . . . . . . . . . . 267<br/>12.47.8.3 Dynamically changing the DigiTrace configuration . . . . . . . . . . . . . . . . . 268<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xii<br/></b></p>
<p>12.47.9 Compatibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268<br/>12.47.10 Additional Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268<br/></p>
<p>12.47.10.1 Confidentiality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268<br/>12.48 DSH Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268<br/></p>
<p>12.48.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269<br/>12.48.2 What is DSH and how it works . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269<br/>12.48.3 Basic set of commands of the DAE dish . . . . . . . . . . . . . . . . . . . . . . . . . . . 269<br/></p>
<p>12.48.3.1 Loading plug-ins in DSH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270<br/>12.48.3.2 Working with HDX card from DSH . . . . . . . . . . . . . . . . . . . . . . . . . 271<br/>12.48.3.3 DAE dish tips . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271<br/></p>
<p>12.48.4 Basic plug-in tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271<br/>12.48.4.1 Cycle count performance test . . . . . . . . . . . . . . . . . . . . . . . . . . . 271<br/>12.48.4.2 Cancellation test . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273<br/></p>
<p>12.48.5 Debugging and tracing in DSH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274<br/>12.48.6 Scripting interface and batch profiling . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274<br/></p>
<p>12.49 DTT Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274<br/>12.49.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275<br/>12.49.2 What is DTT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275<br/>12.49.3 How to run tests and suites in DTT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275<br/>12.49.4 Writing DTT scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276<br/></p>
<p>12.49.4.1 Describing and using input arguments of the script . . . . . . . . . . . . . . . . 276<br/>12.49.4.2 Writing body of the script . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276<br/></p>
<p>12.49.5 Logging in DTT and debugging DTT scripts . . . . . . . . . . . . . . . . . . . . . . . . . 277<br/>12.49.5.1 Interactive mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277<br/></p>
<p>12.49.6 Working with DTT test suites . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277<br/>12.49.6.1 Autogeneration of the suites . . . . . . . . . . . . . . . . . . . . . . . . . . . . 278<br/></p>
<p>12.50 Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279<br/>12.50.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279<br/></p>
<p>12.51 GUI Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279<br/>12.51.1 About the SDK's GUI Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279<br/>12.51.2 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279<br/></p>
<p>12.52 Monolithic VIs and Effects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280<br/>12.53 Other Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280<br/></p>
<p>12.53.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280<br/>12.53.2 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280<br/></p>
<p>12.53.2.1 AsStringMIDIStream_Debug() . . . . . . . . . . . . . . . . . . . . . . . . . . . 281<br/>12.53.2.2 GetPathToPlugInBundle() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281<br/></p>
<p>12.54 Supplemental Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281<br/>12.54.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281<br/></p>
<p>12.55 Troubleshooting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282<br/>12.55.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282<br/>12.55.2 Plug-In Fails to Load in Shipping Pro Tools . . . . . . . . . . . . . . . . . . . . . . . . . . 282<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xiii<br/></b></p>
<p>12.55.3 Plug-In Causes Audio Streaming Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . 283<br/>12.56 Distributing Your AAX Plug-In . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285<br/></p>
<p>12.56.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285<br/>12.56.2 The finishing touches . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285<br/></p>
<p>12.56.2.1 Check and finalize page tables . . . . . . . . . . . . . . . . . . . . . . . . . . . 286<br/>12.56.2.2 Create factory presets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286<br/>12.56.2.3 Sign your plug-in . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287<br/></p>
<p>12.56.3 Building your plug-in installer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287<br/>12.56.3.1 Installing Track Presets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287<br/></p>
<p>12.56.4 Testing your plug-in . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288<br/>12.56.5 Selling your plug-in . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288<br/></p>
<p>12.56.5.1 Avid Marketplace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288<br/>12.56.5.2 In-App Purchase . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289<br/></p>
<p>12.57 AAX Interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289<br/>12.57.0.1 Interfaces Implemented by the AAX Host . . . . . . . . . . . . . . . . . . . . . 289<br/>12.57.0.2 Interfaces Implemented by the AAX Plug-In . . . . . . . . . . . . . . . . . . . . 290<br/>12.57.0.3 Interfaces internal to the AAX SDK . . . . . . . . . . . . . . . . . . . . . . . . 290<br/></p>
<p>12.58 Host Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291<br/>12.58.1 Host Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291<br/></p>
<p>12.58.1.1 Platform Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291<br/>12.58.1.2 Describe Interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291<br/>12.58.1.3 Run-Time Interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292<br/>12.58.1.4 Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292<br/></p>
<p>12.58.2 Host Compatibility Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293<br/>12.59 Known Issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297<br/></p>
<p>12.59.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297<br/>12.59.2 Known Issues in the AAX SDK . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297<br/></p>
<p>12.59.2.1 AAXSDK-1052 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297<br/>12.59.2.2 AAXSDK-1036 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297<br/>12.59.2.3 AAXSDK-897 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298<br/>12.59.2.4 AAXSDK-851 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298<br/>12.59.2.5 AAXSDK-832 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298<br/>12.59.2.6 AAXSDK-708 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298<br/>12.59.2.7 AAXSDK-705 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298<br/>12.59.2.8 AAXSDK-663 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298<br/>12.59.2.9 AAXSDK-599 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299<br/>12.59.2.10 AAX-578 / PTSW-158310 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299<br/>12.59.2.11 AAX-585 / PTSW-157451 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299<br/>12.59.2.12 AAX-582 / PTSW-157726 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299<br/>12.59.2.13 AAXSDK-561 / PT-232159 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299<br/>12.59.2.14 AAXSDK-533 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299<br/>12.59.2.15 AAXSDK-514 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xiv<br/></b></p>
<p>12.59.2.16 AAXSDK-321 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300<br/>12.59.2.17 AAXSDK-271 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300<br/>12.59.2.18 AAXSDK-186 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300<br/>12.59.2.19 AAXSDK-162 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300<br/>12.59.2.20 AAXSDK-16 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300<br/>12.59.2.21 AAXSDK-14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301<br/>12.59.2.22 AAXSDK-13 / AAX-579 / PTSW-158381 . . . . . . . . . . . . . . . . . . . . . 301<br/>12.59.2.23 AAXSDK-11 / AAX-581 / PTSW-158348 . . . . . . . . . . . . . . . . . . . . . 301<br/>12.59.2.24 AAXSDK-10 / AAX-580 / PTSW-154083 . . . . . . . . . . . . . . . . . . . . . 301<br/>12.59.2.25 AAXSDK-6 / AAX-646 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301<br/>12.59.2.26 AAXSDK-5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302<br/>12.59.2.27 AAXSDK-2 / AAX-648 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302<br/></p>
<p>12.59.3 Known Issues in Pro Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302<br/>12.59.3.1 PT-325781 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302<br/>12.59.3.2 PT-323936 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302<br/>12.59.3.3 PT-322604 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302<br/>12.59.3.4 PT-322526 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303<br/>12.59.3.5 PT-317648 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303<br/>12.59.3.6 PT-316101 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303<br/>12.59.3.7 PT-307986 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303<br/>12.59.3.8 PT-307746 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303<br/>12.59.3.9 PT-307193 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303<br/>12.59.3.10 PT-306863 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303<br/>12.59.3.11 PT-305352 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304<br/>12.59.3.12 PT-303482 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304<br/>12.59.3.13 PT-299906 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304<br/>12.59.3.14 PT-297802 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304<br/>12.59.3.15 PT-290588 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304<br/>12.59.3.16 PT-284916 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304<br/>12.59.3.17 PT-282946 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304<br/>12.59.3.18 PT-278282 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305<br/>12.59.3.19 PT-276280 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305<br/>12.59.3.20 PT-274717 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305<br/>12.59.3.21 PT-271830 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305<br/>12.59.3.22 PT-265539 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305<br/>12.59.3.23 PT-263909 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305<br/>12.59.3.24 PT-263859 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305<br/>12.59.3.25 PT-261394 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306<br/>12.59.3.26 PT-258560 / PT-256919 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306<br/>12.59.3.27 PT-258394 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306<br/>12.59.3.28 PT-257213 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306<br/>12.59.3.29 PT-256704 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xv<br/></b></p>
<p>12.59.3.30 PT-255800 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306<br/>12.59.3.31 PT-255408 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306<br/>12.59.3.32 PT-254203 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307<br/>12.59.3.33 PT-254118 / PT-275441 / PT-279941 . . . . . . . . . . . . . . . . . . . . . . . 307<br/>12.59.3.34 PT-254103 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307<br/>12.59.3.35 PT-250751 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307<br/>12.59.3.36 PT-249791 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307<br/>12.59.3.37 PT-249790 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307<br/>12.59.3.38 PT-248000 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307<br/>12.59.3.39 PT-245693 / PT-200756 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308<br/>12.59.3.40 PT-243211 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308<br/>12.59.3.41 PT-237857 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308<br/>12.59.3.42 PT-236755 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308<br/>12.59.3.43 PT-235831 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308<br/>12.59.3.44 PT-235333 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308<br/>12.59.3.45 PT-234681 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308<br/>12.59.3.46 PT-233726 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309<br/>12.59.3.47 PT-233176 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309<br/>12.59.3.48 PT-232678 / PT-236755 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309<br/>12.59.3.49 PT-232403 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309<br/>12.59.3.50 PT-232159 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309<br/>12.59.3.51 PT-230327 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309<br/>12.59.3.52 PT-230290 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309<br/>12.59.3.53 PT-230288 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310<br/>12.59.3.54 PT-229026 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310<br/>12.59.3.55 PT-227655 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310<br/>12.59.3.56 PT-227173 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310<br/>12.59.3.57 PT-226959 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310<br/>12.59.3.58 PT-226559 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310<br/>12.59.3.59 PT-225763 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310<br/>12.59.3.60 PT-225637 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311<br/>12.59.3.61 PT-223581 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311<br/>12.59.3.62 PT-218545 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311<br/>12.59.3.63 PT-218486 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311<br/>12.59.3.64 PT-210904 / VSW-14216 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311<br/>12.59.3.65 PT-206995 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311<br/>12.59.3.66 PT-206541 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312<br/>12.59.3.67 PT-206161 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312<br/>12.59.3.68 PT-205610 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312<br/>12.59.3.69 PT-203420 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312<br/>12.59.3.70 PT-202345 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312<br/>12.59.3.71 PTSW-200437 / PTSW-197598 . . . . . . . . . . . . . . . . . . . . . . . . . . 312<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xvi<br/></b></p>
<p>12.59.3.72 PTSW-197651 / PT-218405 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312<br/>12.59.3.73 PTSW-197601 / PT-218459 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313<br/>12.59.3.74 PTSW-197593 / PT-218480 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313<br/>12.59.3.75 PTSW-197540 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313<br/>12.59.3.76 PTSW-197472 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313<br/>12.59.3.77 PTSW-197471 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313<br/>12.59.3.78 PTSW-197468 / PT-218460 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313<br/>12.59.3.79 PTSW-197431 / PT-218414 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313<br/>12.59.3.80 PTSW-197075 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314<br/>12.59.3.81 PTSW-196772 / PT-218423 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314<br/>12.59.3.82 PTSW-196604 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314<br/>12.59.3.83 PTSW-196428 / PT-218488 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314<br/>12.59.3.84 PTSW-195316 / PT-218485 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314<br/>12.59.3.85 PTSW-195257 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314<br/>12.59.3.86 PTSW-195256 / PT-218429 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314<br/>12.59.3.87 PTSW-195209 / PT-218474 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315<br/>12.59.3.88 PTSW-195113 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315<br/>12.59.3.89 PTSW-194698 / PT-218478 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315<br/>12.59.3.90 PTSW-194231 / PT-218434 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315<br/>12.59.3.91 PTSW-193646 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315<br/>12.59.3.92 PTSW-193400 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315<br/>12.59.3.93 PTSW-193345 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 316<br/>12.59.3.94 PTSW-193339 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 316<br/>12.59.3.95 PTSW-193051 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 316<br/>12.59.3.96 PTSW-192863 / PT-218498 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 316<br/>12.59.3.97 PTSW-192755 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 316<br/>12.59.3.98 PTSW-192720 / PT-218467 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 316<br/>12.59.3.99 PTSW-192635 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317<br/>12.59.3.100 PTSW-192456 / PT-218490 . . . . . . . . . . . . . . . . . . . . . . . . . . . 317<br/>12.59.3.101 PTSW-192251 / PT-218394 . . . . . . . . . . . . . . . . . . . . . . . . . . . 317<br/>12.59.3.102 PTSW-192086 / PT-218465 . . . . . . . . . . . . . . . . . . . . . . . . . . . 317<br/>12.59.3.103 PTSW-191875 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317<br/>12.59.3.104 PTSW-191446 / PT-218600 . . . . . . . . . . . . . . . . . . . . . . . . . . . 317<br/>12.59.3.105 PTSW-191317 / PT-218425 . . . . . . . . . . . . . . . . . . . . . . . . . . . 317<br/>12.59.3.106 PTSW-191139 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318<br/>12.59.3.107 PTSW-190722 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318<br/>12.59.3.108 PTSW-190719 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318<br/>12.59.3.109 PTSW-190340 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318<br/>12.59.3.110 PTSW-189928 / PT-218456 . . . . . . . . . . . . . . . . . . . . . . . . . . . 318<br/>12.59.3.111 PTSW-189738 / PT-218494 . . . . . . . . . . . . . . . . . . . . . . . . . . . 318<br/>12.59.3.112 PTSW-189725 / PT-218397 . . . . . . . . . . . . . . . . . . . . . . . . . . . 318<br/>12.59.3.113 PTSW-189439 / PT-218427 . . . . . . . . . . . . . . . . . . . . . . . . . . . 319<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xvii<br/></b></p>
<p>12.59.3.114 PTSW-189279 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319<br/>12.59.3.115 PTSW-188836 / PT-218428 . . . . . . . . . . . . . . . . . . . . . . . . . . . 319<br/>12.59.3.116 PTSW-188830 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319<br/>12.59.3.117 PTSW-188653 / PT-218451 . . . . . . . . . . . . . . . . . . . . . . . . . . . 319<br/>12.59.3.118 PTSW-188161 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319<br/>12.59.3.119 PTSW-187670 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319<br/>12.59.3.120 PTSW-187220 / PT-218584 . . . . . . . . . . . . . . . . . . . . . . . . . . . 320<br/>12.59.3.121 PTSW-187216 / PT-218491 . . . . . . . . . . . . . . . . . . . . . . . . . . . 320<br/>12.59.3.122 PTSW-187159 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320<br/>12.59.3.123 PTSW-187066 / PT-218391 . . . . . . . . . . . . . . . . . . . . . . . . . . . 320<br/>12.59.3.124 PTSW-186864 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320<br/>12.59.3.125 PTSW-186725 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320<br/>12.59.3.126 PTSW-186627 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320<br/>12.59.3.127 PTSW-186253 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321<br/>12.59.3.128 PTSW-186189 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321<br/>12.59.3.129 PTSW-186182 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321<br/>12.59.3.130 PTSW-185868 / PT-218439 . . . . . . . . . . . . . . . . . . . . . . . . . . . 321<br/>12.59.3.131 PTSW-185867 / PT-218470 . . . . . . . . . . . . . . . . . . . . . . . . . . . 321<br/>12.59.3.132 PTSW-185866 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321<br/>12.59.3.133 PTSW-185825 / PT-218464 . . . . . . . . . . . . . . . . . . . . . . . . . . . 321<br/>12.59.3.134 PTSW-185537 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322<br/>12.59.3.135 PTSW-185484 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322<br/>12.59.3.136 PTSW-185483 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322<br/>12.59.3.137 PTSW-185462 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322<br/>12.59.3.138 PTSW-185343 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322<br/>12.59.3.139 PTSW-185341 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322<br/>12.59.3.140 PTSW-184777 / PT-218483 . . . . . . . . . . . . . . . . . . . . . . . . . . . 322<br/>12.59.3.141 PTSW-184770 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323<br/>12.59.3.142 PTSW-184682 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323<br/>12.59.3.143 PTSW-184642 / PT-218627 . . . . . . . . . . . . . . . . . . . . . . . . . . . 323<br/>12.59.3.144 PTSW-184619 / PT-218473 / AAX-600 . . . . . . . . . . . . . . . . . . . . . 323<br/>12.59.3.145 PTSW-184541 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323<br/>12.59.3.146 PTSW-183902 / PT-218479 . . . . . . . . . . . . . . . . . . . . . . . . . . . 323<br/>12.59.3.147 PTSW-183848 / PT-218390 . . . . . . . . . . . . . . . . . . . . . . . . . . . 323<br/>12.59.3.148 PTSW-183841 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324<br/>12.59.3.149 PTSW-183731 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324<br/>12.59.3.150 PTSW-183708 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324<br/>12.59.3.151 PTSW-168222 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324<br/>12.59.3.152 PTSW-165992 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324<br/>12.59.3.153 PTSW-163739 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324<br/>12.59.3.154 PTSW-161674 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325<br/>12.59.3.155 PTSW-160778 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xviii<br/></b></p>
<p>12.59.3.156 PTSW-160620 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325<br/>12.59.3.157 PTSW-159702 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325<br/>12.59.3.158 PTSW-159700 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325<br/>12.59.3.159 PTSW-159524 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325<br/>12.59.3.160 PTSW-158119 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325<br/>12.59.3.161 PTSW-157745 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326<br/>12.59.3.162 PTSW-157518 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326<br/>12.59.3.163 PTSW-157012 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326<br/>12.59.3.164 PTSW-156310 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326<br/>12.59.3.165 PTSW-156286 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326<br/>12.59.3.166 PTSW-156216 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326<br/>12.59.3.167 PTSW-156195 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326<br/>12.59.3.168 PTSW-156035 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327<br/>12.59.3.169 PTSW-155300 / PT-218458 . . . . . . . . . . . . . . . . . . . . . . . . . . . 327<br/>12.59.3.170 PTSW-155177 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327<br/>12.59.3.171 PTSW-154361 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327<br/>12.59.3.172 PTSW-153140 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327<br/>12.59.3.173 PTSW-150047 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327<br/>12.59.3.174 PTSW-149880 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 328<br/>12.59.3.175 PTSW-149819 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 328<br/>12.59.3.176 PTSW-135536 / PT-218412 . . . . . . . . . . . . . . . . . . . . . . . . . . . 328<br/>12.59.3.177 PTSW-3020 / PT-218463 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 328<br/>12.59.3.178 AAX-686 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 328<br/>12.59.3.179 AAX-583 / PTSW-157743 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 328<br/></p>
<p>12.59.4 Known Issues in Venue Live Sound Systems . . . . . . . . . . . . . . . . . . . . . . . . 329<br/>12.59.4.1 VSW-13857 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329<br/>12.59.4.2 VSW-13292 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329<br/>12.59.4.3 Other Known Issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329<br/></p>
<p>12.59.5 Known Issues in Media Composer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329<br/>12.59.5.1 MCDEV-2904 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329<br/></p>
<p>12.59.6 Known Issues in Control Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330<br/>12.59.6.1 PT-285383 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330<br/>12.59.6.2 PT-226228 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330<br/>12.59.6.3 PT-226227 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330<br/>12.59.6.4 GWSW-16656 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330<br/>12.59.6.5 GWSW-8470 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330<br/>12.59.6.6 GWSW-6694 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330<br/></p>
<p>12.59.7 Known Issues in Other Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330<br/>12.59.7.1 XPACE-23 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330<br/></p>
<p>12.59.8 Known Issues in AAX Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331<br/>12.59.8.1 AAXTOOL-1344 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331<br/>12.59.8.2 PT-218597 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xix<br/></b></p>
<p>12.59.8.3 Additional Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331<br/>12.60 Change Log . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331<br/></p>
<p>12.60.1 Change Log . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331<br/>12.60.1.1 AAX SDK 2.8.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331<br/>12.60.1.2 AAX SDK 2.8.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 332<br/>12.60.1.3 AAX SDK 2.7.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 332<br/>12.60.1.4 AAX SDK 2.6.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 333<br/>12.60.1.5 AAX SDK 2.6.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334<br/>12.60.1.6 AAX SDK 2.5.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334<br/>12.60.1.7 AAX SDK 2.5.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335<br/>12.60.1.8 AAX SDK 2.4.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335<br/>12.60.1.9 AAX SDK 2.4.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 336<br/>12.60.1.10 AAX SDK 2.3.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337<br/>12.60.1.11 AAX SDK 2.3.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338<br/>12.60.1.12 AAX SDK 2.3.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339<br/>12.60.1.13 AAX SDK 2.2.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341<br/>12.60.1.14 AAX SDK 2.2.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342<br/>12.60.1.15 AAX SDK 2.2.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343<br/>12.60.1.16 AAX SDK 2.1.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345<br/>12.60.1.17 AAX SDK 2.1.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346<br/>12.60.1.18 AAX SDK 2.0.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347<br/>12.60.1.19 AAX SDK 2.0.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347<br/>12.60.1.20 AAX SDK 1.5.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348<br/>12.60.1.21 AAX SDK 1.0.6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348<br/>12.60.1.22 AAX SDK 1.0.5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348<br/>12.60.1.23 AAX SDK 1.0.4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 349<br/>12.60.1.24 AAX SDK 1.0.3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350<br/>12.60.1.25 AAX SDK 1.0.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351<br/></p>
<p>12.61 Example Plug-Ins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351<br/>12.61.1 SDK Example plug-ins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351<br/></p>
<p>12.61.1.1 Basic examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351<br/>12.61.1.2 Feature examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352<br/>12.61.1.3 Deprecated Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354<br/></p>
<p>12.62 VENUE Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354<br/>12.62.1 Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354<br/>12.62.2 About this document . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355<br/>12.62.3 Overview of VENUE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355<br/>12.62.4 VENUE systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355<br/></p>
<p>12.62.4.1 VENUE | S6L . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355<br/>12.62.4.2 VENUE | S3L-X . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356<br/></p>
<p>12.62.5 Host environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356<br/>12.62.5.1 Audio engine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xx<br/></b></p>
<p>12.62.5.2 Available DSP resources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357<br/>12.62.5.3 Operating system . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357<br/>12.62.5.4 Display . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357<br/>12.62.5.5 Page tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358<br/>12.62.5.6 Network communications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358<br/>12.62.5.7 Host environment summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358<br/></p>
<p>12.62.6 AAX feature support and compatibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . 359<br/>12.62.6.1 Processing configurations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 359<br/>12.62.6.2 Presets and automation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 359<br/>12.62.6.3 Unsupported features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 360<br/></p>
<p>12.62.7 VENUE Plug-in installer specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . 360<br/>12.62.7.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361<br/>12.62.7.2 Directory structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361<br/>12.62.7.3 Optional installer files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 362<br/>12.62.7.4 Using a VENUE plug-in installer . . . . . . . . . . . . . . . . . . . . . . . . . . 364<br/></p>
<p>12.62.8 Additional plug-in guidelines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 364<br/>12.62.8.1 General Reliability and Fault Tolerance . . . . . . . . . . . . . . . . . . . . . . 364<br/>12.62.8.2 Plug-In Dialogs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 364<br/>12.62.8.3 Online Help . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 364<br/></p>
<p>12.62.9 System details . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 365<br/>12.62.9.1 External dependencies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 365<br/>12.62.9.2 Environment variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 365<br/>12.62.9.3 Plug-in file locations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 366<br/>12.62.9.4 Installation process . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 367<br/></p>
<p>12.62.10 Additional Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369<br/>12.62.10.1 Metering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369<br/></p>
<p><b>13 Namespace Documentation 371<br/></b>13.1 AAX Namespace Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371<br/></p>
<p>13.1.1 Enumeration Type Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375<br/>13.1.1.1 EStatusNibble . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375<br/>13.1.1.2 EStatusByte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375<br/>13.1.1.3 EChannelModeData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 376<br/>13.1.1.4 ESpecialData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 376<br/>13.1.1.5 ESampleRates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377<br/></p>
<p>13.1.2 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377<br/>13.1.2.1 AsString() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377<br/>13.1.2.2 AsString() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377<br/>13.1.2.3 AsString() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377<br/>13.1.2.4 IsNoteOn() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 378<br/>13.1.2.5 IsNoteOff() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 378<br/>13.1.2.6 IsAllNotesOff() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 378<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxi<br/></b></p>
<p>13.1.2.7 IsAccentedClick() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 378<br/>13.1.2.8 IsUnaccentedClick() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 379<br/>13.1.2.9 IsClick() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 379<br/>13.1.2.10 PageTableParameterMappingsAreEqual() . . . . . . . . . . . . . . . . . . . . . 379<br/>13.1.2.11 PageTableParameterNameVariationsAreEqual() . . . . . . . . . . . . . . . . . . 379<br/>13.1.2.12 PageTablesAreEqual() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 380<br/>13.1.2.13 CopyPageTable() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 380<br/>13.1.2.14 FindParameterMappingsInPageTable() . . . . . . . . . . . . . . . . . . . . . . 380<br/>13.1.2.15 ClearMappedParameterByID() . . . . . . . . . . . . . . . . . . . . . . . . . . . 381<br/>13.1.2.16 GetCStringOfLength() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 381<br/>13.1.2.17 Caseless_strcmp() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 381<br/>13.1.2.18 Binary2String() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 381<br/>13.1.2.19 String2Binary() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 381<br/>13.1.2.20 IsASCII() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382<br/>13.1.2.21 IsFourCharASCII() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382<br/>13.1.2.22 AsStringFourChar() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382<br/>13.1.2.23 AsStringPropertyValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382<br/>13.1.2.24 AsStringInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382<br/>13.1.2.25 AsStringUInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 383<br/>13.1.2.26 AsStringIDTriad() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 383<br/>13.1.2.27 AsStringStemFormat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 383<br/>13.1.2.28 AsStringStemChannel() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 383<br/>13.1.2.29 AsStringResult() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384<br/>13.1.2.30 AsStringSupportLevel() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384<br/>13.1.2.31 SafeLog() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384<br/>13.1.2.32 SafeLogf() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 385<br/>13.1.2.33 IsParameterIDEqual() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 385<br/>13.1.2.34 IsEffectIDEqual() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 385<br/>13.1.2.35 IsAvidNotification() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 385<br/>13.1.2.36 alignFree() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 385<br/>13.1.2.37 alignMalloc() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 386<br/>13.1.2.38 DeDenormal() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 386<br/>13.1.2.39 DeDenormal() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 386<br/>13.1.2.40 DeDenormalFine() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 386<br/>13.1.2.41 FilterDenormals() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 386<br/>13.1.2.42 ClampToZero() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387<br/>13.1.2.43 ZeroMemorySW() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387<br/>13.1.2.44 ZeroMemoryDW() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387<br/>13.1.2.45 Fill() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387<br/>13.1.2.46 Fill() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388<br/>13.1.2.47 Fill() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388<br/>13.1.2.48 fabs() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxii<br/></b></p>
<p>13.1.2.49 fabs() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388<br/>13.1.2.50 fabsf() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388<br/>13.1.2.51 AbsMax() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389<br/>13.1.2.52 MinMax() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389<br/>13.1.2.53 Max() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389<br/>13.1.2.54 Min() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389<br/>13.1.2.55 Sign() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 389<br/>13.1.2.56 PolyEval() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390<br/>13.1.2.57 CeilLog2() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390<br/>13.1.2.58 SinCosMix() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390<br/>13.1.2.59 FastRound2Int32() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390<br/>13.1.2.60 FastRound2Int32() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390<br/>13.1.2.61 FastRndDbl2Int32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 391<br/>13.1.2.62 FastTrunc2Int32() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 391<br/>13.1.2.63 FastTrunc2Int32() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 391<br/>13.1.2.64 FastRound2Int64() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392<br/>13.1.2.65 GetInt32RPDF() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392<br/>13.1.2.66 GetFastInt32RPDF() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392<br/>13.1.2.67 GetRPDFWithAmplitudeOneHalf() . . . . . . . . . . . . . . . . . . . . . . . . . 393<br/>13.1.2.68 GetRPDFWithAmplitudeOne() . . . . . . . . . . . . . . . . . . . . . . . . . . . 393<br/>13.1.2.69 GetFastRPDFWithAmplitudeOne() . . . . . . . . . . . . . . . . . . . . . . . . . 393<br/>13.1.2.70 GetTPDFWithAmplitudeOne() . . . . . . . . . . . . . . . . . . . . . . . . . . . 393<br/></p>
<p>13.1.3 Variable Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 393<br/>13.1.3.1 cBigEndian . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 393<br/>13.1.3.2 cLittleEndian . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394<br/>13.1.3.3 cPi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394<br/>13.1.3.4 cTwoPi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394<br/>13.1.3.5 cHalfPi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394<br/>13.1.3.6 cQuarterPi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394<br/>13.1.3.7 cRootTwo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394<br/>13.1.3.8 cOneOverRootTwo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394<br/>13.1.3.9 cPos3dB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395<br/>13.1.3.10 cNeg3dB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395<br/>13.1.3.11 cPos6dB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395<br/>13.1.3.12 cNeg6dB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395<br/>13.1.3.13 cNormalizeLongToAmplitudeOneHalf . . . . . . . . . . . . . . . . . . . . . . . 395<br/>13.1.3.14 cNormalizeLongToAmplitudeOne . . . . . . . . . . . . . . . . . . . . . . . . . 395<br/>13.1.3.15 cMilli . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395<br/>13.1.3.16 cMicro . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396<br/>13.1.3.17 cNano . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396<br/>13.1.3.18 cPico . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396<br/>13.1.3.19 cKilo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxiii<br/></b></p>
<p>13.1.3.20 cMega . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396<br/>13.1.3.21 cGiga . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396<br/>13.1.3.22 cDenormalAvoidanceOffset . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396<br/>13.1.3.23 cFloatDenormalAvoidanceOffset . . . . . . . . . . . . . . . . . . . . . . . . . . 397<br/>13.1.3.24 kPowExtent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397<br/>13.1.3.25 kPowTableSize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397<br/>13.1.3.26 cSeedDivisor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397<br/>13.1.3.27 cInitialSeedValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397<br/></p>
<p>13.2 AAX::Exception Namespace Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397<br/>13.2.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397<br/></p>
<p>13.3 AAX::internal Namespace Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398<br/>13.3.1 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398<br/></p>
<p>13.3.1.1 ToHexadecimal() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398<br/>13.4 AAX_ChunkDataParserDefs Namespace Reference . . . . . . . . . . . . . . . . . . . . . . . . . 398<br/></p>
<p>13.4.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398<br/>13.4.2 Variable Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399<br/></p>
<p>13.4.2.1 FLOAT_TYPE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399<br/>13.4.2.2 FLOAT_STRING_IDENTIFIER . . . . . . . . . . . . . . . . . . . . . . . . . . . 399<br/>13.4.2.3 LONG_TYPE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399<br/>13.4.2.4 LONG_STRING_IDENTIFIER . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399<br/>13.4.2.5 DOUBLE_TYPE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399<br/>13.4.2.6 DOUBLE_STRING_IDENTIFIER . . . . . . . . . . . . . . . . . . . . . . . . . . 399<br/>13.4.2.7 DOUBLE_TYPE_SIZE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399<br/>13.4.2.8 DOUBLE_TYPE_INCR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400<br/>13.4.2.9 SHORT_TYPE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400<br/>13.4.2.10 SHORT_STRING_IDENTIFIER . . . . . . . . . . . . . . . . . . . . . . . . . . 400<br/>13.4.2.11 SHORT_TYPE_SIZE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400<br/>13.4.2.12 SHORT_TYPE_INCR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400<br/>13.4.2.13 STRING_TYPE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400<br/>13.4.2.14 STRING_STRING_IDENTIFIER . . . . . . . . . . . . . . . . . . . . . . . . . . 400<br/>13.4.2.15 MAX_STRINGDATA_LENGTH . . . . . . . . . . . . . . . . . . . . . . . . . . . 400<br/>13.4.2.16 DEFAULT32BIT_TYPE_SIZE . . . . . . . . . . . . . . . . . . . . . . . . . . . 401<br/>13.4.2.17 DEFAULT32BIT_TYPE_INCR . . . . . . . . . . . . . . . . . . . . . . . . . . . 401<br/>13.4.2.18 STRING_IDENTIFIER_SIZE . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401<br/>13.4.2.19 NAME_NOT_FOUND . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401<br/>13.4.2.20 MAX_NAME_LENGTH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401<br/>13.4.2.21 BUILD_DATA_FAILED . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401<br/>13.4.2.22 HEADER_SIZE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401<br/>13.4.2.23 VERSION_ID_1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401<br/></p>
<p><b>14 Class Documentation 403<br/></b>14.1 _acfUID Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxiv<br/></b></p>
<p>14.1.1 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403<br/>14.1.1.1 Data1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403<br/>14.1.1.2 Data2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403<br/>14.1.1.3 Data3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403<br/>14.1.1.4 Data4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 404<br/></p>
<p>14.2 AAX_AggregateResult Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 404<br/>14.2.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 404<br/>14.2.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . 405<br/></p>
<p>14.2.2.1 AAX_AggregateResult() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 405<br/>14.2.2.2 &#8764;AAX_AggregateResult() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 405<br/></p>
<p>14.2.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 405<br/>14.2.3.1 operator=() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 405<br/>14.2.3.2 operator AAX_Result() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 405<br/>14.2.3.3 Check() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 405<br/>14.2.3.4 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406<br/>14.2.3.5 LastFailure() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406<br/>14.2.3.6 NumFailed() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406<br/>14.2.3.7 NumSucceeded() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406<br/>14.2.3.8 NumAttempted() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406<br/></p>
<p>14.3 AAX_CArrayDataBuffer&lt; D &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . . . . 406<br/>14.3.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407<br/>14.3.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . 407<br/></p>
<p>14.3.2.1 AAX_CArrayDataBuffer() [1/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . 407<br/>14.3.2.2 AAX_CArrayDataBuffer() [2/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . 407<br/>14.3.2.3 AAX_CArrayDataBuffer() [3/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . 408<br/>14.3.2.4 AAX_CArrayDataBuffer() [4/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . 408<br/>14.3.2.5 &#8764;AAX_CArrayDataBuffer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 408<br/></p>
<p>14.3.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 408<br/>14.3.3.1 operator=() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 408<br/>14.3.3.2 operator=() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 408<br/>14.3.3.3 Type() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409<br/>14.3.3.4 Size() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409<br/>14.3.3.5 Data() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409<br/></p>
<p>14.4 AAX_CArrayDataBufferOfType&lt; T, D &gt; Class Template Reference . . . . . . . . . . . . . . . . . 409<br/>14.4.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 410<br/>14.4.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . 410<br/></p>
<p>14.4.2.1 AAX_CArrayDataBufferOfType() [1/4] . . . . . . . . . . . . . . . . . . . . . . . 410<br/>14.4.2.2 AAX_CArrayDataBufferOfType() [2/4] . . . . . . . . . . . . . . . . . . . . . . . 410<br/>14.4.2.3 AAX_CArrayDataBufferOfType() [3/4] . . . . . . . . . . . . . . . . . . . . . . . 411<br/>14.4.2.4 AAX_CArrayDataBufferOfType() [4/4] . . . . . . . . . . . . . . . . . . . . . . . 411<br/>14.4.2.5 &#8764;AAX_CArrayDataBufferOfType() . . . . . . . . . . . . . . . . . . . . . . . . . 411<br/></p>
<p>14.4.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxv<br/></b></p>
<p>14.4.3.1 operator=() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411<br/>14.4.3.2 operator=() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411<br/>14.4.3.3 Type() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 412<br/>14.4.3.4 Size() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 412<br/>14.4.3.5 Data() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 412<br/></p>
<p>14.5 AAX_CAtomicQueue&lt; T, S &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . . . . 412<br/>14.5.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 413<br/>14.5.2 Member Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 413<br/></p>
<p>14.5.2.1 template_type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414<br/>14.5.2.2 value_type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414<br/></p>
<p>14.5.3 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . 414<br/>14.5.3.1 &#8764;AAX_CAtomicQueue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414<br/>14.5.3.2 AAX_CAtomicQueue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414<br/></p>
<p>14.5.4 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414<br/>14.5.4.1 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414<br/>14.5.4.2 Push() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415<br/>14.5.4.3 Pop() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415<br/>14.5.4.4 Peek() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415<br/></p>
<p>14.5.5 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416<br/>14.5.5.1 template_size . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416<br/></p>
<p>14.6 AAX_CAutoreleasePool Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416<br/>14.6.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . 416<br/></p>
<p>14.6.1.1 AAX_CAutoreleasePool() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416<br/>14.6.1.2 &#8764;AAX_CAutoreleasePool() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416<br/></p>
<p>14.7 AAX_CBinaryDisplayDelegate&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . 417<br/>14.7.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 417<br/>14.7.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . 417<br/></p>
<p>14.7.2.1 AAX_CBinaryDisplayDelegate() [1/2] . . . . . . . . . . . . . . . . . . . . . . . 417<br/>14.7.2.2 AAX_CBinaryDisplayDelegate() [2/2] . . . . . . . . . . . . . . . . . . . . . . . 418<br/></p>
<p>14.7.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 418<br/>14.7.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 418<br/>14.7.3.2 ValueToString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 418<br/>14.7.3.3 ValueToString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419<br/>14.7.3.4 StringToValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419<br/>14.7.3.5 AddShortenedStrings() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420<br/></p>
<p>14.8 AAX_CBinaryTaperDelegate&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . . 420<br/>14.8.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420<br/>14.8.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . 421<br/></p>
<p>14.8.2.1 AAX_CBinaryTaperDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421<br/>14.8.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421<br/></p>
<p>14.8.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421<br/>14.8.3.2 GetMaximumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxvi<br/></b></p>
<p>14.8.3.3 GetMinimumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422<br/>14.8.3.4 ConstrainRealValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422<br/>14.8.3.5 NormalizedToReal() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422<br/>14.8.3.6 RealToNormalized() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 423<br/></p>
<p>14.9 AAX_CChunkDataParser Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 423<br/>14.9.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424<br/>14.9.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . 425<br/></p>
<p>14.9.2.1 AAX_CChunkDataParser() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426<br/>14.9.2.2 &#8764;AAX_CChunkDataParser() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426<br/></p>
<p>14.9.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426<br/>14.9.3.1 AddFloat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426<br/>14.9.3.2 AddDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426<br/>14.9.3.3 AddInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426<br/>14.9.3.4 AddInt16() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427<br/>14.9.3.5 AddString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427<br/>14.9.3.6 FindFloat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427<br/>14.9.3.7 FindDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427<br/>14.9.3.8 FindInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427<br/>14.9.3.9 FindInt16() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428<br/>14.9.3.10 FindString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428<br/>14.9.3.11 ReplaceDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428<br/>14.9.3.12 GetChunkData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428<br/>14.9.3.13 GetChunkDataSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428<br/>14.9.3.14 GetChunkVersion() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428<br/>14.9.3.15 IsEmpty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429<br/>14.9.3.16 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429<br/>14.9.3.17 LoadChunk() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429<br/>14.9.3.18 WordAlign() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429<br/>14.9.3.19 WordAlign() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429<br/>14.9.3.20 FindName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429<br/></p>
<p>14.9.4 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430<br/>14.9.4.1 mLastFoundIndex . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430<br/>14.9.4.2 mChunkData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430<br/>14.9.4.3 mChunkVersion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430<br/>14.9.4.4 mDataValues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430<br/></p>
<p>14.10 AAX_CDecibelDisplayDelegateDecorator&lt; T &gt; Class Template Reference . . . . . . . . . . . . 430<br/>14.10.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 431<br/>14.10.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 431<br/></p>
<p>14.10.2.1 AAX_CDecibelDisplayDelegateDecorator() . . . . . . . . . . . . . . . . . . . . 431<br/>14.10.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 431<br/></p>
<p>14.10.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432<br/>14.10.3.2 ValueToString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxvii<br/></b></p>
<p>14.10.3.3 ValueToString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432<br/>14.10.3.4 StringToValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 433<br/></p>
<p>14.11 AAX_CEffectDirectData Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 434<br/>14.11.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 434<br/>14.11.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 435<br/></p>
<p>14.11.2.1 AAX_CEffectDirectData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435<br/>14.11.2.2 &#8764;AAX_CEffectDirectData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435<br/></p>
<p>14.11.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435<br/>14.11.3.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435<br/>14.11.3.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435<br/>14.11.3.3 TimerWakeup() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436<br/>14.11.3.4 NotificationReceived() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436<br/>14.11.3.5 Controller() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437<br/>14.11.3.6 EffectParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437<br/>14.11.3.7 Initialize_PrivateDataAccess() . . . . . . . . . . . . . . . . . . . . . . . . . . . 437<br/>14.11.3.8 TimerWakeup_PrivateDataAccess() . . . . . . . . . . . . . . . . . . . . . . . . 437<br/></p>
<p>14.12 AAX_CEffectGUI Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 438<br/>14.12.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 438<br/>14.12.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 440<br/></p>
<p>14.12.2.1 AAX_CEffectGUI() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440<br/>14.12.2.2 &#8764;AAX_CEffectGUI() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440<br/></p>
<p>14.12.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440<br/>14.12.3.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440<br/>14.12.3.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440<br/>14.12.3.3 NotificationReceived() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 441<br/>14.12.3.4 SetViewContainer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 441<br/>14.12.3.5 GetViewSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442<br/>14.12.3.6 Draw() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442<br/>14.12.3.7 TimerWakeup() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443<br/>14.12.3.8 ParameterUpdated() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443<br/>14.12.3.9 GetCustomLabel() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443<br/>14.12.3.10 SetControlHighlightInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 444<br/>14.12.3.11 CreateViewContents() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 444<br/>14.12.3.12 CreateViewContainer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 444<br/>14.12.3.13 DeleteViewContainer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445<br/>14.12.3.14 UpdateAllParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445<br/>14.12.3.15 GetController() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445<br/>14.12.3.16 GetController() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445<br/>14.12.3.17 GetEffectParameters() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 445<br/>14.12.3.18 GetEffectParameters() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 446<br/>14.12.3.19 GetViewContainer() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446<br/>14.12.3.20 GetViewContainer() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxviii<br/></b></p>
<p>14.12.3.21 Transport() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446<br/>14.12.3.22 Transport() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446<br/>14.12.3.23 GetViewContainerType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446<br/>14.12.3.24 GetViewContainerPtr() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447<br/></p>
<p>14.13 AAX_CEffectParameters Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447<br/>14.13.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447<br/>14.13.2 Related classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447<br/>14.13.3 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 453<br/></p>
<p>14.13.3.1 AAX_CEffectParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 453<br/>14.13.3.2 &#8764;AAX_CEffectParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 453<br/></p>
<p>14.13.4 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 453<br/>14.13.4.1 operator=() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 453<br/>14.13.4.2 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 453<br/>14.13.4.3 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 454<br/>14.13.4.4 NotificationReceived() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 454<br/>14.13.4.5 GetNumberOfParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 455<br/>14.13.4.6 GetMasterBypassParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . 455<br/>14.13.4.7 GetParameterIsAutomatable() . . . . . . . . . . . . . . . . . . . . . . . . . . . 455<br/>14.13.4.8 GetParameterNumberOfSteps() . . . . . . . . . . . . . . . . . . . . . . . . . . 456<br/>14.13.4.9 GetParameterName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 456<br/>14.13.4.10 GetParameterNameOfLength() . . . . . . . . . . . . . . . . . . . . . . . . . . 456<br/>14.13.4.11 GetParameterDefaultNormalizedValue() . . . . . . . . . . . . . . . . . . . . . 457<br/>14.13.4.12 SetParameterDefaultNormalizedValue() . . . . . . . . . . . . . . . . . . . . . 457<br/>14.13.4.13 GetParameterType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 458<br/>14.13.4.14 GetParameterOrientation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 458<br/>14.13.4.15 GetParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 459<br/>14.13.4.16 GetParameterIndex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 459<br/>14.13.4.17 GetParameterIDFromIndex() . . . . . . . . . . . . . . . . . . . . . . . . . . . 461<br/>14.13.4.18 GetParameterValueInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 461<br/>14.13.4.19 GetParameterValueFromString() . . . . . . . . . . . . . . . . . . . . . . . . . 462<br/>14.13.4.20 GetParameterStringFromValue() . . . . . . . . . . . . . . . . . . . . . . . . . 462<br/>14.13.4.21 GetParameterValueString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 463<br/>14.13.4.22 GetParameterNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . 463<br/>14.13.4.23 SetParameterNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . 463<br/>14.13.4.24 SetParameterNormalizedRelative() . . . . . . . . . . . . . . . . . . . . . . . . 464<br/>14.13.4.25 TouchParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 465<br/>14.13.4.26 ReleaseParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 465<br/>14.13.4.27 UpdateParameterTouch() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 465<br/>14.13.4.28 UpdateParameterNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . 466<br/>14.13.4.29 UpdateParameterNormalizedRelative() . . . . . . . . . . . . . . . . . . . . . . 466<br/>14.13.4.30 GenerateCoefficients() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 467<br/>14.13.4.31 ResetFieldData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 468<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxix<br/></b></p>
<p>14.13.4.32 GetNumberOfChunks() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 468<br/>14.13.4.33 GetChunkIDFromIndex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 469<br/>14.13.4.34 GetChunkSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 469<br/>14.13.4.35 GetChunk() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 469<br/>14.13.4.36 SetChunk() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 470<br/>14.13.4.37 CompareActiveChunk() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 471<br/>14.13.4.38 GetNumberOfChanges() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 471<br/>14.13.4.39 TimerWakeup() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 471<br/>14.13.4.40 GetCurveData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 472<br/>14.13.4.41 GetCurveDataMeterIds() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 473<br/>14.13.4.42 GetCurveDataDisplayRange() . . . . . . . . . . . . . . . . . . . . . . . . . . 473<br/>14.13.4.43 UpdatePageTable() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 474<br/>14.13.4.44 GetCustomData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 475<br/>14.13.4.45 SetCustomData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 475<br/>14.13.4.46 DoMIDITransfers() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 476<br/>14.13.4.47 UpdateMIDINodes() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 476<br/>14.13.4.48 UpdateControlMIDINodes() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 477<br/>14.13.4.49 RenderAudio_Hybrid() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 477<br/>14.13.4.50 Controller() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 477<br/>14.13.4.51 Controller() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 478<br/>14.13.4.52 Transport() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 478<br/>14.13.4.53 Transport() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 478<br/>14.13.4.54 AutomationDelegate() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 478<br/>14.13.4.55 AutomationDelegate() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 478<br/>14.13.4.56 SetTaperDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 478<br/>14.13.4.57 SetDisplayDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 479<br/>14.13.4.58 IsParameterTouched() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 479<br/>14.13.4.59 IsParameterLinkReady() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 479<br/>14.13.4.60 EffectInit() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 479<br/>14.13.4.61 UpdatePageTable() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 480<br/>14.13.4.62 FilterParameterIDOnSave() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 480<br/>14.13.4.63 BuildChunkData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 480<br/></p>
<p>14.13.5 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 480<br/>14.13.5.1 mNumPlugInChanges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481<br/>14.13.5.2 mChunkSize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481<br/>14.13.5.3 mChunkParser . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481<br/>14.13.5.4 mNumChunkedParameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481<br/>14.13.5.5 mPacketDispatcher . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481<br/>14.13.5.6 mParameterManager . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481<br/>14.13.5.7 mFilteredParameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481<br/></p>
<p>14.14 AAX_CheckedResult Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 482<br/>14.14.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 482<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxx<br/></b></p>
<p>14.14.2 Member Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 484<br/>14.14.2.1 Exception . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 484<br/></p>
<p>14.14.3 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 484<br/>14.14.3.1 &#8764;AAX_CheckedResult() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 484<br/>14.14.3.2 AAX_CheckedResult() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 484<br/>14.14.3.3 AAX_CheckedResult() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 484<br/></p>
<p>14.14.4 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 484<br/>14.14.4.1 AddAcceptedResult() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 484<br/>14.14.4.2 ResetAcceptedResults() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485<br/>14.14.4.3 operator=() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485<br/>14.14.4.4 operator&quot;|=() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485<br/>14.14.4.5 operator AAX_Result() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485<br/>14.14.4.6 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485<br/>14.14.4.7 LastError() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 486<br/></p>
<p>14.15 AAX_CHostProcessor Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 486<br/>14.15.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 486<br/>14.15.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 488<br/></p>
<p>14.15.2.1 AAX_CHostProcessor() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 488<br/>14.15.2.2 &#8764;AAX_CHostProcessor() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 488<br/></p>
<p>14.15.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 488<br/>14.15.3.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 488<br/>14.15.3.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 489<br/>14.15.3.3 InitOutputBounds() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 489<br/>14.15.3.4 SetLocation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 490<br/>14.15.3.5 RenderAudio() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 490<br/>14.15.3.6 PreRender() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 491<br/>14.15.3.7 PostRender() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 491<br/>14.15.3.8 AnalyzeAudio() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 492<br/>14.15.3.9 PreAnalyze() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 492<br/>14.15.3.10 PostAnalyze() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 493<br/>14.15.3.11 GetClipNameSuffix() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 493<br/>14.15.3.12 GetEffectParameters() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 493<br/>14.15.3.13 GetEffectParameters() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 493<br/>14.15.3.14 GetHostProcessorDelegate() [1/2] . . . . . . . . . . . . . . . . . . . . . . . 494<br/>14.15.3.15 GetHostProcessorDelegate() [2/2] . . . . . . . . . . . . . . . . . . . . . . . 494<br/>14.15.3.16 GetLocation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 494<br/>14.15.3.17 GetInputRange() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 494<br/>14.15.3.18 GetOutputRange() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 494<br/>14.15.3.19 GetSrcStart() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 494<br/>14.15.3.20 GetSrcEnd() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 495<br/>14.15.3.21 GetDstStart() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 495<br/>14.15.3.22 GetDstEnd() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 495<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxxi<br/></b></p>
<p>14.15.3.23 TranslateOutputBounds() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 495<br/>14.15.3.24 GetAudio() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496<br/>14.15.3.25 GetSideChainInputNum() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496<br/>14.15.3.26 Controller() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496<br/>14.15.3.27 Controller() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496<br/>14.15.3.28 HostProcessorDelegate() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . 497<br/>14.15.3.29 HostProcessorDelegate() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . 497<br/>14.15.3.30 EffectParameters() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 497<br/>14.15.3.31 EffectParameters() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 497<br/></p>
<p>14.16 AAX_CHostServices Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 497<br/>14.16.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 497<br/>14.16.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 498<br/></p>
<p>14.16.2.1 Set() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 498<br/>14.16.2.2 HandleAssertFailure() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 498<br/>14.16.2.3 Trace() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 498<br/>14.16.2.4 StackTrace() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 499<br/></p>
<p>14.17 AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt; Class Template Reference . . . . . . . . . . . 499<br/>14.17.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 499<br/>14.17.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 500<br/></p>
<p>14.17.2.1 AAX_CLinearTaperDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . 500<br/>14.17.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501<br/></p>
<p>14.17.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501<br/>14.17.3.2 GetMinimumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501<br/>14.17.3.3 GetMaximumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501<br/>14.17.3.4 ConstrainRealValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501<br/>14.17.3.5 NormalizedToReal() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 502<br/>14.17.3.6 RealToNormalized() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 502<br/>14.17.3.7 Round() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 503<br/></p>
<p>14.18 AAX_CLogTaperDelegate&lt; T, RealPrecision &gt; Class Template Reference . . . . . . . . . . . . . 503<br/>14.18.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 503<br/>14.18.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 504<br/></p>
<p>14.18.2.1 AAX_CLogTaperDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 504<br/>14.18.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 504<br/></p>
<p>14.18.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 505<br/>14.18.3.2 GetMinimumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 505<br/>14.18.3.3 GetMaximumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 505<br/>14.18.3.4 ConstrainRealValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 505<br/>14.18.3.5 NormalizedToReal() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 506<br/>14.18.3.6 RealToNormalized() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 506<br/>14.18.3.7 Round() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 507<br/></p>
<p>14.19 AAX_CMidiPacket Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 507<br/>14.19.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 507<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxxii<br/></b></p>
<p>14.19.2 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 507<br/>14.19.2.1 mTimestamp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 507<br/>14.19.2.2 mLength . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 508<br/>14.19.2.3 mData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 508<br/>14.19.2.4 mIsImmediate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 508<br/></p>
<p>14.20 AAX_CMidiStream Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 508<br/>14.20.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 508<br/>14.20.2 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 509<br/></p>
<p>14.20.2.1 mBufferSize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 509<br/>14.20.2.2 mBuffer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 509<br/></p>
<p>14.21 AAX_CMonolithicParameters Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 509<br/>14.21.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 510<br/>14.21.2 Member Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 511<br/></p>
<p>14.21.2.1 TParamValPair . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 511<br/>14.21.3 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 511<br/></p>
<p>14.21.3.1 AAX_CMonolithicParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . 511<br/>14.21.3.2 &#8764;AAX_CMonolithicParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . 511<br/></p>
<p>14.21.4 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 512<br/>14.21.4.1 RenderAudio() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 512<br/>14.21.4.2 AddSynchronizedParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . 512<br/>14.21.4.3 UpdateParameterNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . 513<br/>14.21.4.4 GenerateCoefficients() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513<br/>14.21.4.5 ResetFieldData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 514<br/>14.21.4.6 TimerWakeup() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515<br/>14.21.4.7 StaticDescribe() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515<br/>14.21.4.8 StaticRenderAudio() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516<br/></p>
<p>14.22 AAX_CMutex Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516<br/>14.22.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516<br/>14.22.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 517<br/></p>
<p>14.22.2.1 AAX_CMutex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517<br/>14.22.2.2 &#8764;AAX_CMutex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517<br/></p>
<p>14.22.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517<br/>14.22.3.1 Lock() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517<br/>14.22.3.2 Unlock() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517<br/>14.22.3.3 Try_Lock() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517<br/></p>
<p>14.23 AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt; Class Template Reference . . . . . 518<br/>14.23.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518<br/>14.23.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518<br/></p>
<p>14.23.2.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518<br/>14.23.2.2 ValueToString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 519<br/>14.23.2.3 ValueToString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520<br/>14.23.2.4 StringToValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxxiii<br/></b></p>
<p>14.24 AAX_Component&lt; aContextType &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . 521<br/>14.24.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 521<br/>14.24.2 Member Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522<br/></p>
<p>14.24.2.1 CProcessProc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522<br/>14.24.2.2 CPacketAllocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522<br/>14.24.2.3 CInstanceInitProc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522<br/>14.24.2.4 CBackgroundProc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522<br/>14.24.2.5 CInitPrivateDataProc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522<br/></p>
<p>14.25 AAX_CPacket Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 523<br/>14.25.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 523<br/>14.25.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 523<br/></p>
<p>14.25.2.1 AAX_CPacket() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 523<br/>14.25.2.2 &#8764;AAX_CPacket() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 523<br/></p>
<p>14.25.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 523<br/>14.25.3.1 GetPtr() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524<br/>14.25.3.2 SetDirty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524<br/>14.25.3.3 IsDirty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524<br/>14.25.3.4 GetID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524<br/>14.25.3.5 GetSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524<br/>14.25.3.6 GetPtr() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524<br/></p>
<p>14.26 AAX_CPacketDispatcher Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524<br/>14.26.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 525<br/>14.26.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 525<br/></p>
<p>14.26.2.1 AAX_CPacketDispatcher() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 525<br/>14.26.2.2 &#8764;AAX_CPacketDispatcher() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 525<br/></p>
<p>14.26.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 525<br/>14.26.3.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526<br/>14.26.3.2 RegisterPacket() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526<br/>14.26.3.3 RegisterPacket() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526<br/>14.26.3.4 RegisterPacket() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526<br/>14.26.3.5 SetDirty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 526<br/>14.26.3.6 Dispatch() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 527<br/>14.26.3.7 GenerateSingleValuePacket() . . . . . . . . . . . . . . . . . . . . . . . . . . . 527<br/></p>
<p>14.27 AAX_CPacketHandler&lt; TWorker &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . 527<br/>14.27.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 527<br/>14.27.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 528<br/></p>
<p>14.27.2.1 AAX_CPacketHandler() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 528<br/>14.27.2.2 AAX_CPacketHandler() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 528<br/></p>
<p>14.27.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 528<br/>14.27.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 528<br/>14.27.3.2 Call() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 528<br/></p>
<p>14.27.4 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 529<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxxiv<br/></b></p>
<p>14.27.4.1 pt2Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 529<br/>14.27.4.2 fpt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 529<br/>14.27.4.3 fptEx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 529<br/></p>
<p>14.28 AAX_CParameter&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . . . . . . . 529<br/>14.28.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 530<br/>14.28.2 Member Enumeration Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 534<br/></p>
<p>14.28.2.1 Type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 534<br/>14.28.2.2 Defaults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535<br/></p>
<p>14.28.3 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 535<br/>14.28.3.1 AAX_CParameter() [1/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535<br/>14.28.3.2 AAX_CParameter() [2/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 536<br/>14.28.3.3 AAX_CParameter() [3/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 536<br/>14.28.3.4 AAX_CParameter() [4/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 537<br/>14.28.3.5 &#8764;AAX_CParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 537<br/></p>
<p>14.28.4 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 537<br/>14.28.4.1 AAX_DEFAULT_MOVE_CTOR() . . . . . . . . . . . . . . . . . . . . . . . . . . 537<br/>14.28.4.2 AAX_DEFAULT_MOVE_OPER() . . . . . . . . . . . . . . . . . . . . . . . . . . 537<br/>14.28.4.3 AAX_DELETE() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 538<br/>14.28.4.4 AAX_DELETE() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 538<br/>14.28.4.5 AAX_DELETE() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 538<br/>14.28.4.6 CloneValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 538<br/>14.28.4.7 Identifier() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 538<br/>14.28.4.8 SetName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 538<br/>14.28.4.9 Name() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 539<br/>14.28.4.10 AddShortenedName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 539<br/>14.28.4.11 ShortenedName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 539<br/>14.28.4.12 ClearShortenedNames() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 540<br/>14.28.4.13 SetNormalizedDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . 540<br/>14.28.4.14 GetNormalizedDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . 540<br/>14.28.4.15 SetToDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 540<br/>14.28.4.16 SetNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 540<br/>14.28.4.17 GetNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 541<br/>14.28.4.18 SetNumberOfSteps() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 541<br/>14.28.4.19 GetNumberOfSteps() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 541<br/>14.28.4.20 GetStepValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 542<br/>14.28.4.21 GetNormalizedValueFromStep() . . . . . . . . . . . . . . . . . . . . . . . . . 542<br/>14.28.4.22 GetStepValueFromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . 542<br/>14.28.4.23 SetStepValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 543<br/>14.28.4.24 SetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 543<br/>14.28.4.25 GetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 543<br/>14.28.4.26 SetOrientation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 543<br/>14.28.4.27 GetOrientation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxxv<br/></b></p>
<p>14.28.4.28 SetTaperDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544<br/>14.28.4.29 SetDisplayDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 544<br/>14.28.4.30 GetValueString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 545<br/>14.28.4.31 GetValueString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 545<br/>14.28.4.32 GetNormalizedValueFromBool() [1/2] . . . . . . . . . . . . . . . . . . . . . . 546<br/>14.28.4.33 GetNormalizedValueFromInt32() [1/2] . . . . . . . . . . . . . . . . . . . . . 546<br/>14.28.4.34 GetNormalizedValueFromFloat() [1/2] . . . . . . . . . . . . . . . . . . . . . 547<br/>14.28.4.35 GetNormalizedValueFromDouble() [1/2] . . . . . . . . . . . . . . . . . . . . 547<br/>14.28.4.36 GetNormalizedValueFromString() . . . . . . . . . . . . . . . . . . . . . . . . 548<br/>14.28.4.37 GetBoolFromNormalizedValue() [1/2] . . . . . . . . . . . . . . . . . . . . . . 548<br/>14.28.4.38 GetInt32FromNormalizedValue() [1/2] . . . . . . . . . . . . . . . . . . . . . 549<br/>14.28.4.39 GetFloatFromNormalizedValue() [1/2] . . . . . . . . . . . . . . . . . . . . . 549<br/>14.28.4.40 GetDoubleFromNormalizedValue() [1/2] . . . . . . . . . . . . . . . . . . . . 549<br/>14.28.4.41 GetStringFromNormalizedValue() [1/2] . . . . . . . . . . . . . . . . . . . . . 550<br/>14.28.4.42 GetStringFromNormalizedValue() [2/2] . . . . . . . . . . . . . . . . . . . . . 550<br/>14.28.4.43 SetValueFromString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 551<br/>14.28.4.44 SetAutomationDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 551<br/>14.28.4.45 Automatable() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 552<br/>14.28.4.46 Touch() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 552<br/>14.28.4.47 Release() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 552<br/>14.28.4.48 GetValueAsBool() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 552<br/>14.28.4.49 GetValueAsInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553<br/>14.28.4.50 GetValueAsFloat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553<br/>14.28.4.51 GetValueAsDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 554<br/>14.28.4.52 GetValueAsString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 554<br/>14.28.4.53 SetValueWithBool() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 555<br/>14.28.4.54 SetValueWithInt32() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 555<br/>14.28.4.55 SetValueWithFloat() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 555<br/>14.28.4.56 SetValueWithDouble() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 556<br/>14.28.4.57 SetValueWithString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 556<br/>14.28.4.58 UpdateNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 557<br/>14.28.4.59 SetValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 557<br/>14.28.4.60 GetValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 557<br/>14.28.4.61 SetDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558<br/>14.28.4.62 GetDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558<br/>14.28.4.63 TaperDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558<br/>14.28.4.64 DisplayDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558<br/>14.28.4.65 GetValueAsString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558<br/>14.28.4.66 SetValueWithBool() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 559<br/>14.28.4.67 SetValueWithInt32() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 559<br/>14.28.4.68 SetValueWithFloat() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560<br/>14.28.4.69 SetValueWithDouble() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 560<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxxvi<br/></b></p>
<p>14.28.4.70 SetValueWithString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 560<br/>14.28.4.71 GetNormalizedValueFromBool() [2/2] . . . . . . . . . . . . . . . . . . . . . . 561<br/>14.28.4.72 GetNormalizedValueFromInt32() [2/2] . . . . . . . . . . . . . . . . . . . . . 561<br/>14.28.4.73 GetNormalizedValueFromFloat() [2/2] . . . . . . . . . . . . . . . . . . . . . 562<br/>14.28.4.74 GetNormalizedValueFromDouble() [2/2] . . . . . . . . . . . . . . . . . . . . 562<br/>14.28.4.75 GetBoolFromNormalizedValue() [2/2] . . . . . . . . . . . . . . . . . . . . . . 563<br/>14.28.4.76 GetInt32FromNormalizedValue() [2/2] . . . . . . . . . . . . . . . . . . . . . 563<br/>14.28.4.77 GetFloatFromNormalizedValue() [2/2] . . . . . . . . . . . . . . . . . . . . . 564<br/>14.28.4.78 GetDoubleFromNormalizedValue() [2/2] . . . . . . . . . . . . . . . . . . . . 564<br/></p>
<p>14.28.5 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 564<br/>14.28.5.1 mNames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565<br/>14.28.5.2 mAutomatable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565<br/>14.28.5.3 mNumSteps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565<br/>14.28.5.4 mControlType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565<br/>14.28.5.5 mOrientation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565<br/>14.28.5.6 mTaperDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565<br/>14.28.5.7 mDisplayDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565<br/>14.28.5.8 mAutomationDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 566<br/>14.28.5.9 mNeedNotify . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 566<br/>14.28.5.10 mValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 566<br/>14.28.5.11 mDefaultValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 566<br/></p>
<p>14.29 AAX_CParameterManager Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 566<br/>14.29.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 566<br/>14.29.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 567<br/></p>
<p>14.29.2.1 AAX_CParameterManager() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 567<br/>14.29.2.2 &#8764;AAX_CParameterManager() . . . . . . . . . . . . . . . . . . . . . . . . . . . 567<br/></p>
<p>14.29.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 568<br/>14.29.3.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 568<br/>14.29.3.2 NumParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 568<br/>14.29.3.3 RemoveParameterByID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 568<br/>14.29.3.4 RemoveAllParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 568<br/>14.29.3.5 GetParameterByID() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 569<br/>14.29.3.6 GetParameterByID() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 569<br/>14.29.3.7 GetParameterByName() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . 569<br/>14.29.3.8 GetParameterByName() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . 570<br/>14.29.3.9 GetParameter() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 570<br/>14.29.3.10 GetParameter() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 570<br/>14.29.3.11 GetParameterIndex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571<br/>14.29.3.12 AddParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571<br/>14.29.3.13 RemoveParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571<br/></p>
<p>14.29.4 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572<br/>14.29.4.1 mAutomationDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxxvii<br/></b></p>
<p>14.29.4.2 mParameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572<br/>14.29.4.3 mParametersMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572<br/></p>
<p>14.30 AAX_CParameterValue&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . . . . 572<br/>14.30.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572<br/>14.30.2 Member Enumeration Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 574<br/></p>
<p>14.30.2.1 Defaults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 574<br/>14.30.3 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 574<br/></p>
<p>14.30.3.1 AAX_CParameterValue() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . 574<br/>14.30.3.2 AAX_CParameterValue() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . 574<br/>14.30.3.3 AAX_CParameterValue() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . 575<br/></p>
<p>14.30.4 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 575<br/>14.30.4.1 AAX_DEFAULT_DTOR_OVERRIDE() . . . . . . . . . . . . . . . . . . . . . . . 575<br/>14.30.4.2 AAX_DEFAULT_MOVE_CTOR() . . . . . . . . . . . . . . . . . . . . . . . . . . 575<br/>14.30.4.3 AAX_DEFAULT_MOVE_OPER() . . . . . . . . . . . . . . . . . . . . . . . . . . 575<br/>14.30.4.4 AAX_DELETE() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 576<br/>14.30.4.5 Get() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 576<br/>14.30.4.6 Set() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 576<br/>14.30.4.7 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 576<br/>14.30.4.8 Identifier() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 576<br/>14.30.4.9 GetValueAsBool() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 576<br/>14.30.4.10 GetValueAsInt32() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 577<br/>14.30.4.11 GetValueAsFloat() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 577<br/>14.30.4.12 GetValueAsDouble() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 578<br/>14.30.4.13 GetValueAsString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 578<br/>14.30.4.14 GetValueAsBool() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 579<br/>14.30.4.15 GetValueAsInt32() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 579<br/>14.30.4.16 GetValueAsFloat() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 579<br/>14.30.4.17 GetValueAsDouble() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 580<br/>14.30.4.18 GetValueAsString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 580<br/></p>
<p>14.31 AAX_CPercentDisplayDelegateDecorator&lt; T &gt; Class Template Reference . . . . . . . . . . . . 581<br/>14.31.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 581<br/>14.31.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 582<br/></p>
<p>14.31.2.1 AAX_CPercentDisplayDelegateDecorator() . . . . . . . . . . . . . . . . . . . . 582<br/>14.31.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 582<br/></p>
<p>14.31.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 582<br/>14.31.3.2 ValueToString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 582<br/>14.31.3.3 ValueToString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 583<br/>14.31.3.4 StringToValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 583<br/></p>
<p>14.32 AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt; Class Template Reference . . . . . . 584<br/>14.32.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 584<br/>14.32.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 585<br/></p>
<p>14.32.2.1 AAX_CPieceWiseLinearTaperDelegate() [1/2] . . . . . . . . . . . . . . . . . . 585<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxxviii<br/></b></p>
<p>14.32.2.2 AAX_CPieceWiseLinearTaperDelegate() [2/2] . . . . . . . . . . . . . . . . . . 586<br/>14.32.2.3 &#8764;AAX_CPieceWiseLinearTaperDelegate() . . . . . . . . . . . . . . . . . . . . 586<br/></p>
<p>14.32.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 586<br/>14.32.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 586<br/>14.32.3.2 GetMinimumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 586<br/>14.32.3.3 GetMaximumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 587<br/>14.32.3.4 ConstrainRealValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 587<br/>14.32.3.5 NormalizedToReal() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 587<br/>14.32.3.6 RealToNormalized() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 588<br/>14.32.3.7 Round() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 588<br/></p>
<p>14.33 AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt; Class Template Reference . . . . . . . . . . . 588<br/>14.33.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 589<br/>14.33.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 590<br/></p>
<p>14.33.2.1 AAX_CRangeTaperDelegate() [1/2] . . . . . . . . . . . . . . . . . . . . . . . 590<br/>14.33.2.2 AAX_CRangeTaperDelegate() [2/2] . . . . . . . . . . . . . . . . . . . . . . . 590<br/></p>
<p>14.33.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 590<br/>14.33.3.1 operator=() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 591<br/>14.33.3.2 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 591<br/>14.33.3.3 GetMinimumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 591<br/>14.33.3.4 GetMaximumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 591<br/>14.33.3.5 ConstrainRealValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 591<br/>14.33.3.6 NormalizedToReal() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 592<br/>14.33.3.7 RealToNormalized() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 592<br/>14.33.3.8 Round() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 593<br/>14.33.3.9 SmartRound() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 593<br/></p>
<p>14.34 AAX_CSessionDocumentClient Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 593<br/>14.34.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 593<br/>14.34.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 594<br/></p>
<p>14.34.2.1 AAX_CSessionDocumentClient() . . . . . . . . . . . . . . . . . . . . . . . . . 594<br/>14.34.2.2 &#8764;AAX_CSessionDocumentClient() . . . . . . . . . . . . . . . . . . . . . . . . 594<br/></p>
<p>14.34.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 594<br/>14.34.3.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 595<br/>14.34.3.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 595<br/>14.34.3.3 SetSessionDocument() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 595<br/>14.34.3.4 NotificationReceived() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 595<br/>14.34.3.5 SessionDocumentWillChange() . . . . . . . . . . . . . . . . . . . . . . . . . . 596<br/>14.34.3.6 SessionDocumentChanged() . . . . . . . . . . . . . . . . . . . . . . . . . . . 596<br/>14.34.3.7 GetController() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 597<br/>14.34.3.8 GetController() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 597<br/>14.34.3.9 GetEffectParameters() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 597<br/>14.34.3.10 GetEffectParameters() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 597<br/>14.34.3.11 GetSessionDocument() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . 597<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xxxix<br/></b></p>
<p>14.34.3.12 GetSessionDocument() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . 598<br/>14.35 AAX_CStateDisplayDelegate&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . 598<br/></p>
<p>14.35.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 598<br/>14.35.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 599<br/></p>
<p>14.35.2.1 AAX_CStateDisplayDelegate() [1/4] . . . . . . . . . . . . . . . . . . . . . . . 599<br/>14.35.2.2 AAX_CStateDisplayDelegate() [2/4] . . . . . . . . . . . . . . . . . . . . . . . 599<br/>14.35.2.3 AAX_CStateDisplayDelegate() [3/4] . . . . . . . . . . . . . . . . . . . . . . . 599<br/>14.35.2.4 AAX_CStateDisplayDelegate() [4/4] . . . . . . . . . . . . . . . . . . . . . . . 600<br/></p>
<p>14.35.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 600<br/>14.35.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 600<br/>14.35.3.2 ValueToString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 600<br/>14.35.3.3 ValueToString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 601<br/>14.35.3.4 StringToValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 601<br/>14.35.3.5 AddShortenedStrings() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 602<br/>14.35.3.6 Compare() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 602<br/></p>
<p>14.36 AAX_CStatelessParameter Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 602<br/>14.36.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 602<br/>14.36.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 605<br/></p>
<p>14.36.2.1 AAX_CStatelessParameter() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . 605<br/>14.36.2.2 AAX_CStatelessParameter() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . 605<br/></p>
<p>14.36.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 605<br/>14.36.3.1 AAX_DEFAULT_DTOR_OVERRIDE() . . . . . . . . . . . . . . . . . . . . . . . 605<br/>14.36.3.2 CloneValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 605<br/>14.36.3.3 Identifier() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 606<br/>14.36.3.4 SetName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 606<br/>14.36.3.5 Name() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 606<br/>14.36.3.6 AddShortenedName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 607<br/>14.36.3.7 ShortenedName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 607<br/>14.36.3.8 ClearShortenedNames() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 607<br/>14.36.3.9 Automatable() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 608<br/>14.36.3.10 SetAutomationDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 608<br/>14.36.3.11 Touch() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 608<br/>14.36.3.12 Release() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 609<br/>14.36.3.13 SetNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 609<br/>14.36.3.14 GetNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 609<br/>14.36.3.15 SetNormalizedDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . 609<br/>14.36.3.16 GetNormalizedDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . 610<br/>14.36.3.17 SetToDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 610<br/>14.36.3.18 SetNumberOfSteps() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 610<br/>14.36.3.19 GetNumberOfSteps() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 610<br/>14.36.3.20 GetStepValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 611<br/>14.36.3.21 GetNormalizedValueFromStep() . . . . . . . . . . . . . . . . . . . . . . . . . 611<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xl<br/></b></p>
<p>14.36.3.22 GetStepValueFromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . 611<br/>14.36.3.23 SetStepValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 611<br/>14.36.3.24 GetValueString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 611<br/>14.36.3.25 GetValueString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 612<br/>14.36.3.26 GetNormalizedValueFromBool() . . . . . . . . . . . . . . . . . . . . . . . . . 612<br/>14.36.3.27 GetNormalizedValueFromInt32() . . . . . . . . . . . . . . . . . . . . . . . . . 613<br/>14.36.3.28 GetNormalizedValueFromFloat() . . . . . . . . . . . . . . . . . . . . . . . . . 613<br/>14.36.3.29 GetNormalizedValueFromDouble() . . . . . . . . . . . . . . . . . . . . . . . . 614<br/>14.36.3.30 GetNormalizedValueFromString() . . . . . . . . . . . . . . . . . . . . . . . . 614<br/>14.36.3.31 GetBoolFromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . 615<br/>14.36.3.32 GetInt32FromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . 615<br/>14.36.3.33 GetFloatFromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . 616<br/>14.36.3.34 GetDoubleFromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . 616<br/>14.36.3.35 GetStringFromNormalizedValue() [1/2] . . . . . . . . . . . . . . . . . . . . . 616<br/>14.36.3.36 GetStringFromNormalizedValue() [2/2] . . . . . . . . . . . . . . . . . . . . . 617<br/>14.36.3.37 SetValueFromString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 617<br/>14.36.3.38 GetValueAsBool() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 618<br/>14.36.3.39 GetValueAsInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 618<br/>14.36.3.40 GetValueAsFloat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 619<br/>14.36.3.41 GetValueAsDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 619<br/>14.36.3.42 GetValueAsString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 620<br/>14.36.3.43 SetValueWithBool() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 620<br/>14.36.3.44 SetValueWithInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 620<br/>14.36.3.45 SetValueWithFloat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 621<br/>14.36.3.46 SetValueWithDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 621<br/>14.36.3.47 SetValueWithString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 622<br/>14.36.3.48 SetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 622<br/>14.36.3.49 GetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 622<br/>14.36.3.50 SetOrientation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 623<br/>14.36.3.51 GetOrientation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 623<br/>14.36.3.52 SetTaperDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 623<br/>14.36.3.53 SetDisplayDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 624<br/>14.36.3.54 UpdateNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 624<br/></p>
<p>14.36.4 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 624<br/>14.36.4.1 mNames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 624<br/>14.36.4.2 mID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 625<br/>14.36.4.3 mAutomationDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 625<br/>14.36.4.4 mValueString . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 625<br/></p>
<p>14.37 AAX_CStateTaperDelegate&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . . 625<br/>14.37.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 625<br/>14.37.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 626<br/></p>
<p>14.37.2.1 AAX_CStateTaperDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 626<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xli<br/></b></p>
<p>14.37.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 626<br/>14.37.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 626<br/>14.37.3.2 GetMinimumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 627<br/>14.37.3.3 GetMaximumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 627<br/>14.37.3.4 ConstrainRealValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 627<br/>14.37.3.5 NormalizedToReal() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 628<br/>14.37.3.6 RealToNormalized() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 628<br/></p>
<p>14.38 AAX_CString Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 629<br/>14.38.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 629<br/>14.38.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 630<br/></p>
<p>14.38.2.1 AAX_CString() [1/5] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 630<br/>14.38.2.2 AAX_CString() [2/5] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 631<br/>14.38.2.3 AAX_CString() [3/5] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 631<br/>14.38.2.4 AAX_CString() [4/5] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 631<br/>14.38.2.5 AAX_CString() [5/5] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 631<br/></p>
<p>14.38.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 631<br/>14.38.3.1 Length() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 631<br/>14.38.3.2 MaxLength() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 632<br/>14.38.3.3 Get() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 632<br/>14.38.3.4 Set() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 632<br/>14.38.3.5 operator=() [1/5] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 632<br/>14.38.3.6 operator=() [2/5] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 632<br/>14.38.3.7 AAX_DEFAULT_MOVE_CTOR() . . . . . . . . . . . . . . . . . . . . . . . . . . 633<br/>14.38.3.8 StdString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 633<br/>14.38.3.9 StdString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 633<br/>14.38.3.10 operator=() [3/5] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 633<br/>14.38.3.11 operator=() [4/5] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 633<br/>14.38.3.12 operator=() [5/5] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 633<br/>14.38.3.13 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 633<br/>14.38.3.14 Empty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 634<br/>14.38.3.15 Erase() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 634<br/>14.38.3.16 Append() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 634<br/>14.38.3.17 Append() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 634<br/>14.38.3.18 AppendNumber() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 634<br/>14.38.3.19 AppendNumber() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 634<br/>14.38.3.20 AppendHex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 635<br/>14.38.3.21 Insert() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 635<br/>14.38.3.22 Insert() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 635<br/>14.38.3.23 InsertNumber() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 635<br/>14.38.3.24 InsertNumber() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 635<br/>14.38.3.25 InsertHex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 635<br/>14.38.3.26 Replace() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 636<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xlii<br/></b></p>
<p>14.38.3.27 Replace() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 636<br/>14.38.3.28 FindFirst() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 636<br/>14.38.3.29 FindFirst() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 636<br/>14.38.3.30 FindFirst() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 636<br/>14.38.3.31 FindLast() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 636<br/>14.38.3.32 FindLast() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 637<br/>14.38.3.33 FindLast() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 637<br/>14.38.3.34 CString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 637<br/>14.38.3.35 ToDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 637<br/>14.38.3.36 ToInteger() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 637<br/>14.38.3.37 SubString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 637<br/>14.38.3.38 Equals() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 638<br/>14.38.3.39 Equals() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 638<br/>14.38.3.40 Equals() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 638<br/>14.38.3.41 operator==() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 638<br/>14.38.3.42 operator==() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 638<br/>14.38.3.43 operator==() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 638<br/>14.38.3.44 operator&quot;!=() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 639<br/>14.38.3.45 operator&quot;!=() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 639<br/>14.38.3.46 operator&quot;!=() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 639<br/>14.38.3.47 operator&lt;() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 639<br/>14.38.3.48 operator&gt;() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 639<br/>14.38.3.49 operator[]() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 639<br/>14.38.3.50 operator[]() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 639<br/>14.38.3.51 operator+=() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 640<br/>14.38.3.52 operator+=() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 640<br/>14.38.3.53 operator+=() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 640<br/></p>
<p>14.38.4 Friends And Related Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . 640<br/>14.38.4.1 operator&lt;&lt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 640<br/>14.38.4.2 operator&gt;&gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 640<br/></p>
<p>14.38.5 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 640<br/>14.38.5.1 kInvalidIndex . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 641<br/>14.38.5.2 kMaxStringLength . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 641<br/>14.38.5.3 mString . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 641<br/></p>
<p>14.39 AAX_CStringAbbreviations Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 641<br/>14.39.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 641<br/>14.39.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 641<br/></p>
<p>14.39.2.1 AAX_CStringAbbreviations() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 641<br/>14.39.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 642<br/></p>
<p>14.39.3.1 SetPrimary() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 642<br/>14.39.3.2 Primary() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 642<br/>14.39.3.3 Add() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 642<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xliii<br/></b></p>
<p>14.39.3.4 Get() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 642<br/>14.39.3.5 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 642<br/></p>
<p>14.40 AAX_CStringDataBuffer Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 643<br/>14.40.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 643<br/>14.40.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 643<br/></p>
<p>14.40.2.1 AAX_CStringDataBuffer() [1/5] . . . . . . . . . . . . . . . . . . . . . . . . . . 643<br/>14.40.2.2 AAX_CStringDataBuffer() [2/5] . . . . . . . . . . . . . . . . . . . . . . . . . . 643<br/>14.40.2.3 AAX_CStringDataBuffer() [3/5] . . . . . . . . . . . . . . . . . . . . . . . . . . 644<br/>14.40.2.4 AAX_CStringDataBuffer() [4/5] . . . . . . . . . . . . . . . . . . . . . . . . . . 644<br/>14.40.2.5 AAX_CStringDataBuffer() [5/5] . . . . . . . . . . . . . . . . . . . . . . . . . . 644<br/>14.40.2.6 &#8764;AAX_CStringDataBuffer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 644<br/></p>
<p>14.40.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 644<br/>14.40.3.1 operator=() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 644<br/>14.40.3.2 operator=() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 644<br/>14.40.3.3 Type() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 645<br/>14.40.3.4 Size() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 645<br/>14.40.3.5 Data() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 645<br/></p>
<p>14.41 AAX_CStringDataBufferOfType&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . 645<br/>14.41.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 646<br/>14.41.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 646<br/></p>
<p>14.41.2.1 AAX_CStringDataBufferOfType() [1/5] . . . . . . . . . . . . . . . . . . . . . . 646<br/>14.41.2.2 AAX_CStringDataBufferOfType() [2/5] . . . . . . . . . . . . . . . . . . . . . . 646<br/>14.41.2.3 AAX_CStringDataBufferOfType() [3/5] . . . . . . . . . . . . . . . . . . . . . . 647<br/>14.41.2.4 AAX_CStringDataBufferOfType() [4/5] . . . . . . . . . . . . . . . . . . . . . . 647<br/>14.41.2.5 AAX_CStringDataBufferOfType() [5/5] . . . . . . . . . . . . . . . . . . . . . . 647<br/>14.41.2.6 &#8764;AAX_CStringDataBufferOfType() . . . . . . . . . . . . . . . . . . . . . . . . 647<br/></p>
<p>14.41.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 647<br/>14.41.3.1 operator=() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 647<br/>14.41.3.2 operator=() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 647<br/>14.41.3.3 Type() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 648<br/>14.41.3.4 Size() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 648<br/>14.41.3.5 Data() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 648<br/></p>
<p>14.42 AAX_CStringDisplayDelegate&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . 648<br/>14.42.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 649<br/>14.42.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 649<br/></p>
<p>14.42.2.1 AAX_CStringDisplayDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . 649<br/>14.42.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 650<br/></p>
<p>14.42.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 650<br/>14.42.3.2 ValueToString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 650<br/>14.42.3.3 ValueToString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 651<br/>14.42.3.4 StringToValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 651<br/></p>
<p>14.42.4 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 652<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xliv<br/></b></p>
<p>14.42.4.1 mStringMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 652<br/>14.42.4.2 mInverseStringMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 652<br/></p>
<p>14.43 AAX_CTask Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 652<br/>14.43.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 653<br/></p>
<p>14.43.1.1 AAX_CTask() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 653<br/>14.43.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 653<br/></p>
<p>14.43.2.1 ACF_DECLARE_STANDARD_UNKNOWN() . . . . . . . . . . . . . . . . . . . 653<br/>14.43.2.2 AAX_DELETE() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 653<br/>14.43.2.3 AAX_DEFAULT_DTOR_OVERRIDE() . . . . . . . . . . . . . . . . . . . . . . . 653<br/>14.43.2.4 GetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 653<br/>14.43.2.5 GetArgumentOfType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 654<br/>14.43.2.6 SetProgress() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 654<br/>14.43.2.7 GetProgress() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 654<br/>14.43.2.8 AddResult() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 655<br/>14.43.2.9 SetDone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 655<br/>14.43.2.10 Status() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 655<br/></p>
<p>14.43.3 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 656<br/>14.43.3.1 AAX_OVERRIDE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 656<br/></p>
<p>14.44 AAX_CTaskAgent Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 656<br/>14.44.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 656<br/>14.44.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 657<br/></p>
<p>14.44.2.1 AAX_CTaskAgent() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 657<br/>14.44.2.2 &#8764;AAX_CTaskAgent() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 657<br/></p>
<p>14.44.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 657<br/>14.44.3.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 657<br/>14.44.3.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 658<br/>14.44.3.3 AddTask() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 658<br/>14.44.3.4 CancelAllTasks() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 658<br/>14.44.3.5 AddTask() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 658<br/>14.44.3.6 ReceiveTask() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 659<br/>14.44.3.7 GetController() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 659<br/>14.44.3.8 GetEffectParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 659<br/></p>
<p>14.45 AAX_CTempoBreakpoint Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 659<br/>14.45.1 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 659<br/></p>
<p>14.45.1.1 mSampleLocation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 659<br/>14.45.1.2 mValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 660<br/></p>
<p>14.46 AAX_CUnitDisplayDelegateDecorator&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . 660<br/>14.46.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 660<br/>14.46.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 661<br/></p>
<p>14.46.2.1 AAX_CUnitDisplayDelegateDecorator() . . . . . . . . . . . . . . . . . . . . . . 661<br/>14.46.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 661<br/></p>
<p>14.46.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 661<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xlv<br/></b></p>
<p>14.46.3.2 ValueToString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 661<br/>14.46.3.3 ValueToString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 662<br/>14.46.3.4 StringToValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 662<br/></p>
<p>14.46.4 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 663<br/>14.46.4.1 mUnitString . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 663<br/></p>
<p>14.47 AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt; Class Template Reference . . . . . . . . . . . 663<br/>14.47.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 664<br/>14.47.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 664<br/></p>
<p>14.47.2.1 AAX_CUnitPrefixDisplayDelegateDecorator() . . . . . . . . . . . . . . . . . . . 665<br/>14.47.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 665<br/></p>
<p>14.47.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 665<br/>14.47.3.2 ValueToString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 665<br/>14.47.3.3 ValueToString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 666<br/>14.47.3.4 StringToValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 666<br/></p>
<p>14.48 AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt; Class Template Reference . . . . . . . 667<br/>14.48.1 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 667<br/></p>
<p>14.48.1.1 SetParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 667<br/>14.48.1.2 DoTableLookupExtraFast() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . 668<br/>14.48.1.3 DoTableLookupExtraFastMulti() . . . . . . . . . . . . . . . . . . . . . . . . . . 668<br/>14.48.1.4 DoTableLookupExtraFast() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . 668<br/>14.48.1.5 GetMin() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 669<br/>14.48.1.6 GetMaxMinusMin() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 669<br/></p>
<p>14.49 AAX_IACFAutomationDelegate Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 669<br/>14.49.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 669<br/>14.49.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 669<br/></p>
<p>14.49.2.1 RegisterParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 670<br/>14.49.2.2 UnregisterParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 670<br/>14.49.2.3 PostSetValueRequest() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 670<br/>14.49.2.4 PostCurrentValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 671<br/>14.49.2.5 PostTouchRequest() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 671<br/>14.49.2.6 PostReleaseRequest() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 671<br/>14.49.2.7 GetTouchState() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 672<br/></p>
<p>14.50 AAX_IACFCollection Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 672<br/>14.50.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 672<br/>14.50.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 672<br/></p>
<p>14.50.2.1 AddEffect() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 673<br/>14.50.2.2 SetManufacturerName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 673<br/>14.50.2.3 AddPackageName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 673<br/>14.50.2.4 SetPackageVersion() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 674<br/>14.50.2.5 SetProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 674<br/></p>
<p>14.51 AAX_IACFComponentDescriptor Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 674<br/>14.51.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 674<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xlvi<br/></b></p>
<p>14.51.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 675<br/>14.51.2.1 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 676<br/>14.51.2.2 AddReservedField() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 676<br/>14.51.2.3 AddAudioIn() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 676<br/>14.51.2.4 AddAudioOut() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 677<br/>14.51.2.5 AddAudioBufferLength() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 677<br/>14.51.2.6 AddSampleRate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 677<br/>14.51.2.7 AddClock() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 678<br/>14.51.2.8 AddSideChainIn() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 678<br/>14.51.2.9 AddDataInPort() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 679<br/>14.51.2.10 AddAuxOutputStem() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 679<br/>14.51.2.11 AddPrivateData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 680<br/>14.51.2.12 AddDmaInstance() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 680<br/>14.51.2.13 AddMIDINode() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 681<br/>14.51.2.14 AddProcessProc_Native() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 682<br/>14.51.2.15 AddProcessProc_TI() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 682<br/>14.51.2.16 AddMeters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 683<br/></p>
<p>14.52 AAX_IACFComponentDescriptor_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . 683<br/>14.52.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 683<br/>14.52.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 684<br/></p>
<p>14.52.2.1 AddTemporaryData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 684<br/>14.53 AAX_IACFComponentDescriptor_V3 Class Reference . . . . . . . . . . . . . . . . . . . . . . . 684<br/></p>
<p>14.53.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 684<br/>14.53.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 685<br/></p>
<p>14.53.2.1 AddProcessProc() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 685<br/>14.54 AAX_IACFController Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 686<br/></p>
<p>14.54.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 686<br/>14.54.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 687<br/></p>
<p>14.54.2.1 GetEffectID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 687<br/>14.54.2.2 GetSampleRate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 687<br/>14.54.2.3 GetInputStemFormat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 688<br/>14.54.2.4 GetOutputStemFormat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 688<br/>14.54.2.5 GetSignalLatency() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 688<br/>14.54.2.6 GetCycleCount() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 689<br/>14.54.2.7 GetTODLocation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 689<br/>14.54.2.8 SetSignalLatency() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 690<br/>14.54.2.9 SetCycleCount() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 690<br/>14.54.2.10 PostPacket() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 691<br/>14.54.2.11 GetCurrentMeterValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 692<br/>14.54.2.12 GetMeterPeakValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 692<br/>14.54.2.13 ClearMeterPeakValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 692<br/>14.54.2.14 GetMeterClipped() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 693<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xlvii<br/></b></p>
<p>14.54.2.15 ClearMeterClipped() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 693<br/>14.54.2.16 GetMeterCount() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 693<br/>14.54.2.17 GetNextMIDIPacket() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 694<br/></p>
<p>14.55 AAX_IACFController_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 694<br/>14.55.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 694<br/>14.55.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 694<br/></p>
<p>14.55.2.1 SendNotification() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 695<br/>14.55.2.2 GetHybridSignalLatency() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 695<br/>14.55.2.3 GetCurrentAutomationTimestamp() . . . . . . . . . . . . . . . . . . . . . . . . 696<br/>14.55.2.4 GetHostName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 696<br/></p>
<p>14.56 AAX_IACFController_V3 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 696<br/>14.56.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 697<br/>14.56.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 697<br/></p>
<p>14.56.2.1 GetPlugInTargetPlatform() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 697<br/>14.56.2.2 GetIsAudioSuite() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 697<br/></p>
<p>14.57 AAX_IACFDataBuffer Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 698<br/>14.57.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 698<br/>14.57.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 698<br/></p>
<p>14.57.2.1 Type() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 698<br/>14.57.2.2 Size() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 698<br/>14.57.2.3 Data() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 699<br/></p>
<p>14.58 AAX_IACFDescriptionHost Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 699<br/>14.58.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 699<br/>14.58.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 699<br/></p>
<p>14.58.2.1 AcquireFeatureProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 699<br/>14.59 AAX_IACFEffectDescriptor Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 700<br/></p>
<p>14.59.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 700<br/>14.59.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 700<br/></p>
<p>14.59.2.1 AddComponent() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 700<br/>14.59.2.2 AddName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 701<br/>14.59.2.3 AddCategory() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 701<br/>14.59.2.4 AddCategoryBypassParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . 701<br/>14.59.2.5 AddProcPtr() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 702<br/>14.59.2.6 SetProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 702<br/>14.59.2.7 AddResourceInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 702<br/>14.59.2.8 AddMeterDescription() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 703<br/></p>
<p>14.60 AAX_IACFEffectDescriptor_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 703<br/>14.60.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 703<br/>14.60.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 703<br/></p>
<p>14.60.2.1 AddControlMIDINode() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 704<br/>14.61 AAX_IACFEffectDirectData Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 704<br/></p>
<p>14.61.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 704<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xlviii<br/></b></p>
<p>14.61.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 705<br/>14.61.2.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 705<br/>14.61.2.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 705<br/>14.61.2.3 TimerWakeup() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 706<br/></p>
<p>14.62 AAX_IACFEffectDirectData_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 706<br/>14.62.1 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 706<br/></p>
<p>14.62.1.1 NotificationReceived() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 707<br/>14.63 AAX_IACFEffectGUI Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 707<br/></p>
<p>14.63.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 708<br/>14.63.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 709<br/></p>
<p>14.63.2.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 709<br/>14.63.2.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 709<br/>14.63.2.3 NotificationReceived() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 710<br/>14.63.2.4 SetViewContainer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 710<br/>14.63.2.5 GetViewSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 711<br/>14.63.2.6 Draw() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 711<br/>14.63.2.7 TimerWakeup() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 711<br/>14.63.2.8 ParameterUpdated() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 712<br/>14.63.2.9 GetCustomLabel() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 712<br/>14.63.2.10 SetControlHighlightInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 712<br/></p>
<p>14.64 AAX_IACFEffectParameters Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 713<br/>14.64.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 713<br/>14.64.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 717<br/></p>
<p>14.64.2.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 717<br/>14.64.2.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 717<br/>14.64.2.3 NotificationReceived() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 718<br/>14.64.2.4 GetNumberOfParameters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 718<br/>14.64.2.5 GetMasterBypassParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . 719<br/>14.64.2.6 GetParameterIsAutomatable() . . . . . . . . . . . . . . . . . . . . . . . . . . . 719<br/>14.64.2.7 GetParameterNumberOfSteps() . . . . . . . . . . . . . . . . . . . . . . . . . . 719<br/>14.64.2.8 GetParameterName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 720<br/>14.64.2.9 GetParameterNameOfLength() . . . . . . . . . . . . . . . . . . . . . . . . . . 720<br/>14.64.2.10 GetParameterDefaultNormalizedValue() . . . . . . . . . . . . . . . . . . . . . 721<br/>14.64.2.11 SetParameterDefaultNormalizedValue() . . . . . . . . . . . . . . . . . . . . . 721<br/>14.64.2.12 GetParameterType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 721<br/>14.64.2.13 GetParameterOrientation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 722<br/>14.64.2.14 GetParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 722<br/>14.64.2.15 GetParameterIndex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 723<br/>14.64.2.16 GetParameterIDFromIndex() . . . . . . . . . . . . . . . . . . . . . . . . . . . 723<br/>14.64.2.17 GetParameterValueInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 724<br/>14.64.2.18 GetParameterValueFromString() . . . . . . . . . . . . . . . . . . . . . . . . . 724<br/>14.64.2.19 GetParameterStringFromValue() . . . . . . . . . . . . . . . . . . . . . . . . . 725<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xlix<br/></b></p>
<p>14.64.2.20 GetParameterValueString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 725<br/>14.64.2.21 GetParameterNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . 726<br/>14.64.2.22 SetParameterNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . 726<br/>14.64.2.23 SetParameterNormalizedRelative() . . . . . . . . . . . . . . . . . . . . . . . . 727<br/>14.64.2.24 TouchParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 727<br/>14.64.2.25 ReleaseParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 728<br/>14.64.2.26 UpdateParameterTouch() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 728<br/>14.64.2.27 UpdateParameterNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . 729<br/>14.64.2.28 UpdateParameterNormalizedRelative() . . . . . . . . . . . . . . . . . . . . . . 729<br/>14.64.2.29 GenerateCoefficients() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 730<br/>14.64.2.30 ResetFieldData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 730<br/>14.64.2.31 GetNumberOfChunks() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 731<br/>14.64.2.32 GetChunkIDFromIndex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 731<br/>14.64.2.33 GetChunkSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 731<br/>14.64.2.34 GetChunk() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 732<br/>14.64.2.35 SetChunk() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 733<br/>14.64.2.36 CompareActiveChunk() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 733<br/>14.64.2.37 TimerWakeup() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 734<br/>14.64.2.38 GetCustomData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 734<br/>14.64.2.39 SetCustomData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 734<br/>14.64.2.40 DoMIDITransfers() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 735<br/></p>
<p>14.65 AAX_IACFEffectParameters_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 735<br/>14.65.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 735<br/>14.65.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 736<br/></p>
<p>14.65.2.1 UpdateMIDINodes() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 736<br/>14.65.2.2 UpdateControlMIDINodes() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 736<br/></p>
<p>14.66 AAX_IACFEffectParameters_V3 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 737<br/>14.66.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 737<br/></p>
<p>14.67 AAX_IACFEffectParameters_V4 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 738<br/>14.67.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 738<br/>14.67.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 738<br/></p>
<p>14.67.2.1 UpdatePageTable() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 739<br/>14.68 AAX_IACFFeatureInfo Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 739<br/></p>
<p>14.68.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 740<br/>14.68.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 740<br/></p>
<p>14.68.2.1 SupportLevel() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 740<br/>14.68.2.2 AcquireProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 741<br/></p>
<p>14.69 AAX_IACFHostProcessor Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 741<br/>14.69.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 741<br/>14.69.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 742<br/></p>
<p>14.69.2.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 742<br/>14.69.2.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 742<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>l<br/></b></p>
<p>14.69.2.3 InitOutputBounds() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 742<br/>14.69.2.4 SetLocation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 743<br/>14.69.2.5 RenderAudio() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 743<br/>14.69.2.6 PreRender() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 744<br/>14.69.2.7 PostRender() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 745<br/>14.69.2.8 AnalyzeAudio() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 745<br/>14.69.2.9 PreAnalyze() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 745<br/>14.69.2.10 PostAnalyze() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 746<br/></p>
<p>14.70 AAX_IACFHostProcessor_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 746<br/>14.70.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 747<br/>14.70.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 747<br/></p>
<p>14.70.2.1 GetClipNameSuffix() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 747<br/>14.71 AAX_IACFHostProcessorDelegate Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . 747<br/></p>
<p>14.71.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 748<br/>14.71.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 748<br/></p>
<p>14.71.2.1 GetAudio() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 748<br/>14.71.2.2 GetSideChainInputNum() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 749<br/></p>
<p>14.72 AAX_IACFHostProcessorDelegate_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . 749<br/>14.72.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 749<br/>14.72.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 749<br/></p>
<p>14.72.2.1 ForceAnalyze() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 749<br/>14.73 AAX_IACFHostProcessorDelegate_V3 Class Reference . . . . . . . . . . . . . . . . . . . . . . 750<br/></p>
<p>14.73.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 750<br/>14.73.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 750<br/></p>
<p>14.73.2.1 ForceProcess() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 750<br/>14.74 AAX_IACFHostServices Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 750<br/></p>
<p>14.74.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 750<br/>14.74.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 751<br/></p>
<p>14.74.2.1 Assert() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 751<br/>14.74.2.2 Trace() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 751<br/></p>
<p>14.75 AAX_IACFHostServices_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 752<br/>14.75.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 752<br/>14.75.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 752<br/></p>
<p>14.75.2.1 StackTrace() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 752<br/>14.76 AAX_IACFHostServices_V3 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 753<br/></p>
<p>14.76.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 753<br/>14.76.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 753<br/></p>
<p>14.76.2.1 HandleAssertFailure() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 753<br/>14.77 AAX_IACFPageTable Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 754<br/></p>
<p>14.77.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 754<br/>14.77.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 754<br/></p>
<p>14.77.2.1 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 754<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>li<br/></b></p>
<p>14.77.2.2 Empty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 755<br/>14.77.2.3 GetNumPages() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 755<br/>14.77.2.4 InsertPage() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 755<br/>14.77.2.5 RemovePage() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 756<br/>14.77.2.6 GetNumMappedParameterIDs() . . . . . . . . . . . . . . . . . . . . . . . . . . 756<br/>14.77.2.7 ClearMappedParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 756<br/>14.77.2.8 GetMappedParameterID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 757<br/>14.77.2.9 MapParameterID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 757<br/></p>
<p>14.78 AAX_IACFPageTable_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 758<br/>14.78.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 758<br/>14.78.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 758<br/></p>
<p>14.78.2.1 GetNumParametersWithNameVariations() . . . . . . . . . . . . . . . . . . . . . 759<br/>14.78.2.2 GetNameVariationParameterIDAtIndex() . . . . . . . . . . . . . . . . . . . . . . 759<br/>14.78.2.3 GetNumNameVariationsForParameter() . . . . . . . . . . . . . . . . . . . . . . 760<br/>14.78.2.4 GetParameterNameVariationAtIndex() . . . . . . . . . . . . . . . . . . . . . . . 760<br/>14.78.2.5 GetParameterNameVariationOfLength() . . . . . . . . . . . . . . . . . . . . . . 761<br/>14.78.2.6 ClearParameterNameVariations() . . . . . . . . . . . . . . . . . . . . . . . . . 762<br/>14.78.2.7 ClearNameVariationsForParameter() . . . . . . . . . . . . . . . . . . . . . . . 762<br/>14.78.2.8 SetParameterNameVariation() . . . . . . . . . . . . . . . . . . . . . . . . . . . 763<br/></p>
<p>14.79 AAX_IACFPageTableController Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 763<br/>14.79.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 764<br/>14.79.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 764<br/></p>
<p>14.79.2.1 CopyTableForEffect() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 764<br/>14.79.2.2 CopyTableOfLayoutForEffect() . . . . . . . . . . . . . . . . . . . . . . . . . . . 765<br/></p>
<p>14.80 AAX_IACFPageTableController_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . 766<br/>14.80.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 766<br/>14.80.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 766<br/></p>
<p>14.80.2.1 CopyTableForEffectFromFile() . . . . . . . . . . . . . . . . . . . . . . . . . . . 766<br/>14.80.2.2 CopyTableOfLayoutFromFile() . . . . . . . . . . . . . . . . . . . . . . . . . . . 767<br/></p>
<p>14.81 AAX_IACFPrivateDataAccess Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 768<br/>14.81.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 768<br/>14.81.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 768<br/></p>
<p>14.81.2.1 ReadPortDirect() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 768<br/>14.81.2.2 WritePortDirect() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 769<br/></p>
<p>14.82 AAX_IACFPropertyMap Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 769<br/>14.82.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 769<br/>14.82.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 770<br/></p>
<p>14.82.2.1 GetProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 770<br/>14.82.2.2 AddProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 770<br/>14.82.2.3 RemoveProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 771<br/></p>
<p>14.83 AAX_IACFPropertyMap_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 771<br/>14.83.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 771<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lii<br/></b></p>
<p>14.83.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 771<br/>14.83.2.1 AddPropertyWithIDArray() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 771<br/>14.83.2.2 GetPropertyWithIDArray() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 772<br/></p>
<p>14.84 AAX_IACFPropertyMap_V3 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 772<br/>14.84.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 772<br/>14.84.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 773<br/></p>
<p>14.84.2.1 GetProperty64() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 773<br/>14.84.2.2 AddProperty64() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 773<br/></p>
<p>14.85 AAX_IACFSessionDocument Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 773<br/>14.85.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 774<br/>14.85.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 774<br/></p>
<p>14.85.2.1 GetDocumentData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 774<br/>14.86 AAX_IACFSessionDocumentClient Class Reference . . . . . . . . . . . . . . . . . . . . . . . . 775<br/></p>
<p>14.86.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 775<br/>14.86.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 775<br/></p>
<p>14.86.2.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 775<br/>14.86.2.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 776<br/>14.86.2.3 SetSessionDocument() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 776<br/>14.86.2.4 NotificationReceived() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 776<br/></p>
<p>14.87 AAX_IACFTask Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 777<br/>14.87.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 777<br/>14.87.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 777<br/></p>
<p>14.87.2.1 GetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 777<br/>14.87.2.2 GetArgumentOfType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 778<br/>14.87.2.3 SetProgress() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 778<br/>14.87.2.4 GetProgress() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 778<br/>14.87.2.5 AddResult() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 779<br/>14.87.2.6 SetDone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 779<br/></p>
<p>14.88 AAX_IACFTaskAgent Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 780<br/>14.88.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 780<br/>14.88.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 780<br/></p>
<p>14.88.2.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 780<br/>14.88.2.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 781<br/>14.88.2.3 AddTask() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 781<br/>14.88.2.4 CancelAllTasks() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 781<br/></p>
<p>14.89 AAX_IACFTransport Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 781<br/>14.89.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 782<br/>14.89.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 782<br/></p>
<p>14.89.2.1 GetCurrentTempo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 782<br/>14.89.2.2 GetCurrentMeter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 783<br/>14.89.2.3 IsTransportPlaying() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 783<br/>14.89.2.4 GetCurrentTickPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 783<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>liii<br/></b></p>
<p>14.89.2.5 GetCurrentLoopPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 784<br/>14.89.2.6 GetCurrentNativeSampleLocation() . . . . . . . . . . . . . . . . . . . . . . . . 784<br/>14.89.2.7 GetCustomTickPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 785<br/>14.89.2.8 GetBarBeatPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 785<br/>14.89.2.9 GetTicksPerQuarter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 786<br/>14.89.2.10 GetCurrentTicksPerBeat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 786<br/></p>
<p>14.90 AAX_IACFTransport_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 786<br/>14.90.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 786<br/>14.90.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 787<br/></p>
<p>14.90.2.1 GetTimelineSelectionStartPosition() . . . . . . . . . . . . . . . . . . . . . . . . 787<br/>14.90.2.2 GetTimeCodeInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 787<br/>14.90.2.3 GetFeetFramesInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 787<br/>14.90.2.4 IsMetronomeEnabled() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 788<br/></p>
<p>14.91 AAX_IACFTransport_V3 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 788<br/>14.91.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 788<br/>14.91.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 789<br/></p>
<p>14.91.2.1 GetHDTimeCodeInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 789<br/>14.92 AAX_IACFTransport_V4 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 789<br/></p>
<p>14.92.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 789<br/>14.92.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 789<br/></p>
<p>14.92.2.1 GetTimelineSelectionEndPosition() . . . . . . . . . . . . . . . . . . . . . . . . 790<br/>14.93 AAX_IACFTransport_V5 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 790<br/></p>
<p>14.93.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 790<br/>14.93.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 790<br/></p>
<p>14.93.2.1 GetKeySignature() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 791<br/>14.94 AAX_IACFTransportControl Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 791<br/></p>
<p>14.94.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 791<br/>14.94.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 792<br/></p>
<p>14.94.2.1 RequestTransportStart() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 792<br/>14.94.2.2 RequestTransportStop() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 792<br/></p>
<p>14.95 AAX_IACFViewContainer Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 792<br/>14.95.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 792<br/>14.95.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 793<br/></p>
<p>14.95.2.1 GetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 793<br/>14.95.2.2 GetPtr() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 793<br/>14.95.2.3 GetModifiers() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 793<br/>14.95.2.4 SetViewSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 794<br/>14.95.2.5 HandleParameterMouseDown() . . . . . . . . . . . . . . . . . . . . . . . . . . 794<br/>14.95.2.6 HandleParameterMouseDrag() . . . . . . . . . . . . . . . . . . . . . . . . . . . 794<br/>14.95.2.7 HandleParameterMouseUp() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 795<br/></p>
<p>14.96 AAX_IACFViewContainer_V2 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 795<br/>14.96.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 795<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>liv<br/></b></p>
<p>14.96.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 796<br/>14.96.2.1 HandleMultipleParametersMouseDown() . . . . . . . . . . . . . . . . . . . . . 796<br/>14.96.2.2 HandleMultipleParametersMouseDrag() . . . . . . . . . . . . . . . . . . . . . . 796<br/>14.96.2.3 HandleMultipleParametersMouseUp() . . . . . . . . . . . . . . . . . . . . . . . 797<br/></p>
<p>14.97 AAX_IACFViewContainer_V3 Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 797<br/>14.97.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 797<br/>14.97.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 798<br/></p>
<p>14.97.2.1 HandleParameterMouseEnter() . . . . . . . . . . . . . . . . . . . . . . . . . . 798<br/>14.97.2.2 HandleParameterMouseExit() . . . . . . . . . . . . . . . . . . . . . . . . . . . 798<br/></p>
<p>14.98 AAX_IAutomationDelegate Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 799<br/>14.98.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 799<br/>14.98.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 799<br/></p>
<p>14.98.2.1 &#8764;AAX_IAutomationDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . 799<br/>14.98.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 799<br/></p>
<p>14.98.3.1 RegisterParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 800<br/>14.98.3.2 UnregisterParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 800<br/>14.98.3.3 PostSetValueRequest() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 801<br/>14.98.3.4 PostCurrentValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 801<br/>14.98.3.5 PostTouchRequest() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 801<br/>14.98.3.6 PostReleaseRequest() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 802<br/>14.98.3.7 GetTouchState() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 802<br/>14.98.3.8 ParameterNameChanged() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 802<br/></p>
<p>14.99 AAX_ICollection Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 803<br/>14.99.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 803<br/>14.99.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 804<br/></p>
<p>14.99.2.1 &#8764;AAX_ICollection() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 804<br/>14.99.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 804<br/></p>
<p>14.99.3.1 NewDescriptor() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 804<br/>14.99.3.2 AddEffect() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 804<br/>14.99.3.3 SetManufacturerName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 805<br/>14.99.3.4 AddPackageName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 805<br/>14.99.3.5 SetPackageVersion() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 805<br/>14.99.3.6 NewPropertyMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 806<br/>14.99.3.7 SetProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 806<br/>14.99.3.8 GetHostVersion() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 806<br/>14.99.3.9 DescriptionHost() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 807<br/>14.99.3.10 DescriptionHost() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 807<br/>14.99.3.11 HostDefinition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 808<br/></p>
<p>14.100 AAX_IComponentDescriptor Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 808<br/>14.100.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 808<br/>14.100.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 810<br/></p>
<p>14.100.2.1 &#8764;AAX_IComponentDescriptor() . . . . . . . . . . . . . . . . . . . . . . . . . 810<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lv<br/></b></p>
<p>14.100.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 810<br/>14.100.3.1 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 810<br/>14.100.3.2 AddAudioIn() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 810<br/>14.100.3.3 AddAudioOut() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 811<br/>14.100.3.4 AddAudioBufferLength() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 811<br/>14.100.3.5 AddSampleRate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 812<br/>14.100.3.6 AddClock() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 812<br/>14.100.3.7 AddSideChainIn() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 813<br/>14.100.3.8 AddDataInPort() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 813<br/>14.100.3.9 AddAuxOutputStem() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 814<br/>14.100.3.10 AddPrivateData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 815<br/>14.100.3.11 AddTemporaryData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 815<br/>14.100.3.12 AddDmaInstance() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 816<br/>14.100.3.13 AddMeters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 816<br/>14.100.3.14 AddMIDINode() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 817<br/>14.100.3.15 AddReservedField() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 817<br/>14.100.3.16 NewPropertyMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 818<br/>14.100.3.17 DuplicatePropertyMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 818<br/>14.100.3.18 AddProcessProc_Native() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . 818<br/>14.100.3.19 AddProcessProc_TI() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 820<br/>14.100.3.20 AddProcessProc() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 821<br/>14.100.3.21 AddProcessProc_Native() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . 822<br/></p>
<p>14.101 AAX_IContainer Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 823<br/>14.101.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 823<br/>14.101.2 Member Enumeration Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 823<br/></p>
<p>14.101.2.1 EStatus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 823<br/>14.101.3 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 823<br/></p>
<p>14.101.3.1 &#8764;AAX_IContainer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 824<br/>14.101.4 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 824<br/></p>
<p>14.101.4.1 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 824<br/>14.102 AAX_IController Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 824<br/></p>
<p>14.102.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 824<br/>14.102.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 826<br/></p>
<p>14.102.2.1 &#8764;AAX_IController() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 826<br/>14.102.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 827<br/></p>
<p>14.102.3.1 GetEffectID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 827<br/>14.102.3.2 GetSampleRate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 827<br/>14.102.3.3 GetInputStemFormat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 827<br/>14.102.3.4 GetOutputStemFormat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 827<br/>14.102.3.5 GetSignalLatency() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 828<br/>14.102.3.6 GetCycleCount() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 828<br/>14.102.3.7 GetTODLocation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 829<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lvi<br/></b></p>
<p>14.102.3.8 SetSignalLatency() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 829<br/>14.102.3.9 SetCycleCount() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 830<br/>14.102.3.10 PostPacket() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 831<br/>14.102.3.11 SendNotification() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 832<br/>14.102.3.12 SendNotification() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 832<br/>14.102.3.13 GetCurrentMeterValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 833<br/>14.102.3.14 GetMeterPeakValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 833<br/>14.102.3.15 ClearMeterPeakValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 833<br/>14.102.3.16 GetMeterCount() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 834<br/>14.102.3.17 GetMeterClipped() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 834<br/>14.102.3.18 ClearMeterClipped() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 834<br/>14.102.3.19 GetNextMIDIPacket() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 835<br/>14.102.3.20 GetCurrentAutomationTimestamp() . . . . . . . . . . . . . . . . . . . . . . . 835<br/>14.102.3.21 GetHostName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 836<br/>14.102.3.22 GetPlugInTargetPlatform() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 836<br/>14.102.3.23 GetIsAudioSuite() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 836<br/>14.102.3.24 CreateTableCopyForEffect() . . . . . . . . . . . . . . . . . . . . . . . . . . . 837<br/>14.102.3.25 CreateTableCopyForLayout() . . . . . . . . . . . . . . . . . . . . . . . . . . 837<br/>14.102.3.26 CreateTableCopyForEffectFromFile() . . . . . . . . . . . . . . . . . . . . . . 839<br/>14.102.3.27 CreateTableCopyForLayoutFromFile() . . . . . . . . . . . . . . . . . . . . . . 839<br/></p>
<p>14.103 AAX_IDataBuffer Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 840<br/>14.103.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 840<br/>14.103.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 841<br/></p>
<p>14.103.2.1 ACF_DECLARE_STANDARD_UNKNOWN() . . . . . . . . . . . . . . . . . . . 841<br/>14.103.2.2 AAX_DELETE() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 841<br/></p>
<p>14.103.3 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 841<br/>14.103.3.1 AAX_OVERRIDE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 841<br/></p>
<p>14.104 AAX_IDataBufferWrapper Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 841<br/>14.104.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 842<br/>14.104.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 842<br/></p>
<p>14.104.2.1 &#8764;AAX_IDataBufferWrapper() . . . . . . . . . . . . . . . . . . . . . . . . . . . 842<br/>14.104.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 842<br/></p>
<p>14.104.3.1 Type() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 842<br/>14.104.3.2 Size() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 842<br/>14.104.3.3 Data() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 843<br/></p>
<p>14.105 AAX_IDescriptionHost Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 843<br/>14.105.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 843<br/>14.105.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 843<br/></p>
<p>14.105.2.1 &#8764;AAX_IDescriptionHost() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 843<br/>14.105.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 843<br/></p>
<p>14.105.3.1 AcquireFeatureProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 844<br/>14.106 AAX_IDisplayDelegate&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . . . . 844<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lvii<br/></b></p>
<p>14.106.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 845<br/>14.106.2 Display delegate decorators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 845<br/></p>
<p>14.106.2.1 Display delegate decorator implementation . . . . . . . . . . . . . . . . . . . 845<br/>14.106.2.2 Decibel decorator example . . . . . . . . . . . . . . . . . . . . . . . . . . . . 846<br/></p>
<p>14.106.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 846<br/>14.106.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 846<br/>14.106.3.2 ValueToString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 847<br/>14.106.3.3 ValueToString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 847<br/>14.106.3.4 StringToValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 848<br/></p>
<p>14.107 AAX_IDisplayDelegateBase Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 848<br/>14.107.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 848<br/>14.107.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 849<br/></p>
<p>14.107.2.1 &#8764;AAX_IDisplayDelegateBase() . . . . . . . . . . . . . . . . . . . . . . . . . 849<br/>14.108 AAX_IDisplayDelegateDecorator&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . 849<br/></p>
<p>14.108.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 849<br/>14.108.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 850<br/></p>
<p>14.108.2.1 AAX_IDisplayDelegateDecorator() [1/2] . . . . . . . . . . . . . . . . . . . . 850<br/>14.108.2.2 AAX_IDisplayDelegateDecorator() [2/2] . . . . . . . . . . . . . . . . . . . . 850<br/>14.108.2.3 &#8764;AAX_IDisplayDelegateDecorator() . . . . . . . . . . . . . . . . . . . . . . . 851<br/></p>
<p>14.108.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 851<br/>14.108.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 851<br/>14.108.3.2 ValueToString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 852<br/>14.108.3.3 ValueToString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 852<br/>14.108.3.4 StringToValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 853<br/></p>
<p>14.109 AAX_IDma Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 853<br/>14.109.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 854<br/>14.109.2 Member Enumeration Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 855<br/></p>
<p>14.109.2.1 EState . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 855<br/>14.109.2.2 EMode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 856<br/></p>
<p>14.109.3 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 856<br/>14.109.3.1 &#8764;AAX_IDma() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 856<br/></p>
<p>14.109.4 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 856<br/>14.109.4.1 PostRequest() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 856<br/>14.109.4.2 IsTransferComplete() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 857<br/>14.109.4.3 SetDmaState() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 857<br/>14.109.4.4 GetDmaState() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 858<br/>14.109.4.5 GetDmaMode() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 858<br/>14.109.4.6 SetSrc() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 858<br/>14.109.4.7 GetSrc() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 858<br/>14.109.4.8 SetDst() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 858<br/>14.109.4.9 GetDst() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 859<br/>14.109.4.10 SetBurstLength() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 859<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lviii<br/></b></p>
<p>14.109.4.11 GetBurstLength() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 859<br/>14.109.4.12 SetNumBursts() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 859<br/>14.109.4.13 GetNumBursts() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 860<br/>14.109.4.14 SetTransferSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 860<br/>14.109.4.15 GetTransferSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 860<br/>14.109.4.16 SetFifoBuffer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 861<br/>14.109.4.17 GetFifoBuffer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 861<br/>14.109.4.18 SetLinearBuffer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 861<br/>14.109.4.19 GetLinearBuffer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 861<br/>14.109.4.20 SetOffsetTable() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 862<br/>14.109.4.21 GetOffsetTable() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 862<br/>14.109.4.22 SetNumOffsets() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 862<br/>14.109.4.23 GetNumOffsets() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 863<br/>14.109.4.24 SetBaseOffset() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 863<br/>14.109.4.25 GetBaseOffset() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 863<br/>14.109.4.26 SetFifoSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 863<br/>14.109.4.27 GetFifoSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 864<br/></p>
<p>14.110 AAX_IEffectDescriptor Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 864<br/>14.110.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 864<br/>14.110.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 865<br/></p>
<p>14.110.2.1 &#8764;AAX_IEffectDescriptor() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 865<br/>14.110.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 865<br/></p>
<p>14.110.3.1 NewComponentDescriptor() . . . . . . . . . . . . . . . . . . . . . . . . . . . 865<br/>14.110.3.2 AddComponent() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 865<br/>14.110.3.3 AddName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 866<br/>14.110.3.4 AddCategory() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 866<br/>14.110.3.5 AddCategoryBypassParameter() . . . . . . . . . . . . . . . . . . . . . . . . . 866<br/>14.110.3.6 AddProcPtr() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 867<br/>14.110.3.7 NewPropertyMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 867<br/>14.110.3.8 SetProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 867<br/>14.110.3.9 AddResourceInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 867<br/>14.110.3.10 AddMeterDescription() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 868<br/>14.110.3.11 AddControlMIDINode() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 868<br/></p>
<p>14.111 AAX_IEffectDirectData Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 869<br/>14.111.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 869<br/>14.111.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 870<br/></p>
<p>14.111.2.1 ACF_DECLARE_STANDARD_UNKNOWN() . . . . . . . . . . . . . . . . . . . 870<br/>14.111.2.2 AAX_DELETE() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 870<br/></p>
<p>14.111.3 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 870<br/>14.111.3.1 override . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 870<br/></p>
<p>14.112 AAX_IEffectGUI Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 870<br/>14.112.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 871<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lix<br/></b></p>
<p>14.112.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 871<br/>14.112.2.1 ACF_DECLARE_STANDARD_UNKNOWN() . . . . . . . . . . . . . . . . . . . 871<br/>14.112.2.2 AAX_DELETE() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 871<br/></p>
<p>14.112.3 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 871<br/>14.112.3.1 override . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 872<br/></p>
<p>14.113 AAX_IEffectParameters Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 872<br/>14.113.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 872<br/>14.113.2 Related classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 873<br/>14.113.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 873<br/></p>
<p>14.113.3.1 ACF_DECLARE_STANDARD_UNKNOWN() . . . . . . . . . . . . . . . . . . . 874<br/>14.113.3.2 AAX_DELETE() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 874<br/></p>
<p>14.113.4 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 874<br/>14.113.4.1 override . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 874<br/></p>
<p>14.114 AAX_IFeatureInfo Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 874<br/>14.114.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 874<br/></p>
<p>14.114.1.1 &#8764;AAX_IFeatureInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 874<br/>14.114.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 875<br/></p>
<p>14.114.2.1 SupportLevel() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 875<br/>14.114.2.2 AcquireProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 875<br/>14.114.2.3 ID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 876<br/></p>
<p>14.115 AAX_IHostProcessor Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 876<br/>14.115.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 876<br/>14.115.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 876<br/></p>
<p>14.115.2.1 ACF_DECLARE_STANDARD_UNKNOWN() . . . . . . . . . . . . . . . . . . . 877<br/>14.115.2.2 AAX_DELETE() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 877<br/></p>
<p>14.115.3 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 877<br/>14.115.3.1 override . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 877<br/></p>
<p>14.116 AAX_IHostProcessorDelegate Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 877<br/>14.116.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 877<br/>14.116.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 878<br/></p>
<p>14.116.2.1 &#8764;AAX_IHostProcessorDelegate() . . . . . . . . . . . . . . . . . . . . . . . . 878<br/>14.116.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 878<br/></p>
<p>14.116.3.1 GetAudio() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 878<br/>14.116.3.2 GetSideChainInputNum() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 879<br/>14.116.3.3 ForceAnalyze() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 879<br/>14.116.3.4 ForceProcess() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 880<br/></p>
<p>14.117 AAX_IHostServices Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 880<br/>14.117.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 880<br/>14.117.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 880<br/></p>
<p>14.117.2.1 &#8764;AAX_IHostServices() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 881<br/>14.117.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 881<br/></p>
<p>14.117.3.1 HandleAssertFailure() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 881<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lx<br/></b></p>
<p>14.117.3.2 Trace() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 881<br/>14.117.3.3 StackTrace() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 882<br/></p>
<p>14.118 AAX_IHostTaskAgent Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 882<br/>14.118.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 882<br/>14.118.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 883<br/></p>
<p>14.118.2.1 &#8764;AAX_IHostTaskAgent() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 883<br/>14.118.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 883<br/></p>
<p>14.118.3.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 883<br/>14.118.3.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 883<br/>14.118.3.3 AddTask() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 883<br/>14.118.3.4 CancelAllTasks() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 884<br/></p>
<p>14.119 AAX_IMIDIMessageInfoDelegate Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . 884<br/>14.119.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 884<br/></p>
<p>14.119.1.1 &#8764;AAX_IMIDIMessageInfoDelegate() . . . . . . . . . . . . . . . . . . . . . . . 884<br/>14.119.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 884<br/></p>
<p>14.119.2.1 Mask() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 885<br/>14.119.2.2 Length() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 885<br/>14.119.2.3 ToString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 885<br/>14.119.2.4 Accepts() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 885<br/>14.119.2.5 Accepts_ExactStatus() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 885<br/>14.119.2.6 ToString_AppendNumber() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 886<br/>14.119.2.7 ToString_AppendCStr() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 886<br/>14.119.2.8 ToString_AppendByteRange() . . . . . . . . . . . . . . . . . . . . . . . . . . 886<br/>14.119.2.9 ToString_AppendValid() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 886<br/></p>
<p>14.120 AAX_IMIDINode Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 887<br/>14.120.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 887<br/>14.120.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 887<br/></p>
<p>14.120.2.1 &#8764;AAX_IMIDINode() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 887<br/>14.120.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 887<br/></p>
<p>14.120.3.1 GetNodeBuffer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 887<br/>14.120.3.2 PostMIDIPacket() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 888<br/>14.120.3.3 GetTransport() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 888<br/></p>
<p>14.121 AAX_IPacketHandler Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 888<br/>14.121.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 889<br/>14.121.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 889<br/></p>
<p>14.121.2.1 &#8764;AAX_IPacketHandler() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 889<br/>14.121.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 889<br/></p>
<p>14.121.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 889<br/>14.121.3.2 Call() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 889<br/></p>
<p>14.122 AAX_IPageTable Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 890<br/>14.122.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 890<br/>14.122.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 891<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxi<br/></b></p>
<p>14.122.2.1 &#8764;AAX_IPageTable() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 891<br/>14.122.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 891<br/></p>
<p>14.122.3.1 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 891<br/>14.122.3.2 Empty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 891<br/>14.122.3.3 GetNumPages() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 892<br/>14.122.3.4 InsertPage() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 892<br/>14.122.3.5 RemovePage() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 892<br/>14.122.3.6 GetNumMappedParameterIDs() . . . . . . . . . . . . . . . . . . . . . . . . . 893<br/>14.122.3.7 ClearMappedParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 893<br/>14.122.3.8 GetMappedParameterID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 894<br/>14.122.3.9 MapParameterID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 894<br/>14.122.3.10 GetNumParametersWithNameVariations() . . . . . . . . . . . . . . . . . . . 895<br/>14.122.3.11 GetNameVariationParameterIDAtIndex() . . . . . . . . . . . . . . . . . . . . 895<br/>14.122.3.12 GetNumNameVariationsForParameter() . . . . . . . . . . . . . . . . . . . . 896<br/>14.122.3.13 GetParameterNameVariationAtIndex() . . . . . . . . . . . . . . . . . . . . . 896<br/>14.122.3.14 GetParameterNameVariationOfLength() . . . . . . . . . . . . . . . . . . . . 897<br/>14.122.3.15 ClearParameterNameVariations() . . . . . . . . . . . . . . . . . . . . . . . . 898<br/>14.122.3.16 ClearNameVariationsForParameter() . . . . . . . . . . . . . . . . . . . . . . 898<br/>14.122.3.17 SetParameterNameVariation() . . . . . . . . . . . . . . . . . . . . . . . . . 899<br/></p>
<p>14.123 AAX_IParameter Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 900<br/>14.123.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 900<br/>14.123.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 902<br/></p>
<p>14.123.2.1 &#8764;AAX_IParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 902<br/>14.123.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 903<br/></p>
<p>14.123.3.1 CloneValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 903<br/>14.123.3.2 Identifier() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 903<br/>14.123.3.3 SetName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 903<br/>14.123.3.4 Name() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 904<br/>14.123.3.5 AddShortenedName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 904<br/>14.123.3.6 ShortenedName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 904<br/>14.123.3.7 ClearShortenedNames() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 905<br/>14.123.3.8 Automatable() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 905<br/>14.123.3.9 SetAutomationDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 905<br/>14.123.3.10 Touch() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 905<br/>14.123.3.11 Release() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 906<br/>14.123.3.12 SetNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 906<br/>14.123.3.13 GetNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 906<br/>14.123.3.14 SetNormalizedDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . 906<br/>14.123.3.15 GetNormalizedDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . 907<br/>14.123.3.16 SetToDefaultValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 907<br/>14.123.3.17 SetNumberOfSteps() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 907<br/>14.123.3.18 GetNumberOfSteps() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 907<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxii<br/></b></p>
<p>14.123.3.19 GetStepValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 908<br/>14.123.3.20 GetNormalizedValueFromStep() . . . . . . . . . . . . . . . . . . . . . . . . 908<br/>14.123.3.21 GetStepValueFromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . 908<br/>14.123.3.22 SetStepValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 908<br/>14.123.3.23 GetValueString() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 908<br/>14.123.3.24 GetValueString() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 909<br/>14.123.3.25 GetNormalizedValueFromBool() . . . . . . . . . . . . . . . . . . . . . . . . . 909<br/>14.123.3.26 GetNormalizedValueFromInt32() . . . . . . . . . . . . . . . . . . . . . . . . 910<br/>14.123.3.27 GetNormalizedValueFromFloat() . . . . . . . . . . . . . . . . . . . . . . . . 910<br/>14.123.3.28 GetNormalizedValueFromDouble() . . . . . . . . . . . . . . . . . . . . . . . 911<br/>14.123.3.29 GetNormalizedValueFromString() . . . . . . . . . . . . . . . . . . . . . . . . 911<br/>14.123.3.30 GetBoolFromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . 912<br/>14.123.3.31 GetInt32FromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . 912<br/>14.123.3.32 GetFloatFromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . 912<br/>14.123.3.33 GetDoubleFromNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . 913<br/>14.123.3.34 GetStringFromNormalizedValue() [1/2] . . . . . . . . . . . . . . . . . . . . 913<br/>14.123.3.35 GetStringFromNormalizedValue() [2/2] . . . . . . . . . . . . . . . . . . . . 914<br/>14.123.3.36 SetValueFromString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 914<br/>14.123.3.37 GetValueAsBool() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 915<br/>14.123.3.38 GetValueAsInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 915<br/>14.123.3.39 GetValueAsFloat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 916<br/>14.123.3.40 GetValueAsDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 916<br/>14.123.3.41 GetValueAsString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 916<br/>14.123.3.42 SetValueWithBool() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 917<br/>14.123.3.43 SetValueWithInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 917<br/>14.123.3.44 SetValueWithFloat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 918<br/>14.123.3.45 SetValueWithDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 918<br/>14.123.3.46 SetValueWithString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 918<br/>14.123.3.47 SetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 919<br/>14.123.3.48 GetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 919<br/>14.123.3.49 SetOrientation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 919<br/>14.123.3.50 GetOrientation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 920<br/>14.123.3.51 SetTaperDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 920<br/>14.123.3.52 SetDisplayDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 920<br/>14.123.3.53 UpdateNormalizedValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 921<br/></p>
<p>14.124 AAX_IParameterValue Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 921<br/>14.124.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 921<br/>14.124.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 922<br/></p>
<p>14.124.2.1 &#8764;AAX_IParameterValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 922<br/>14.124.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 922<br/></p>
<p>14.124.3.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 922<br/>14.124.3.2 Identifier() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 923<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxiii<br/></b></p>
<p>14.124.3.3 GetValueAsBool() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 923<br/>14.124.3.4 GetValueAsInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 923<br/>14.124.3.5 GetValueAsFloat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 924<br/>14.124.3.6 GetValueAsDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 924<br/>14.124.3.7 GetValueAsString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 924<br/></p>
<p>14.125 AAX_IPointerQueue&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . . . . . 925<br/>14.125.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 925<br/>14.125.2 Member Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 926<br/></p>
<p>14.125.2.1 template_type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 926<br/>14.125.2.2 value_type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 926<br/></p>
<p>14.125.3 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 926<br/>14.125.3.1 &#8764;AAX_IPointerQueue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 926<br/></p>
<p>14.125.4 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 926<br/>14.125.4.1 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 926<br/>14.125.4.2 Push() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 927<br/>14.125.4.3 Pop() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 927<br/>14.125.4.4 Peek() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 927<br/></p>
<p>14.126 AAX_IPrivateDataAccess Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 928<br/>14.126.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 928<br/>14.126.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 928<br/></p>
<p>14.126.2.1 &#8764;AAX_IPrivateDataAccess() . . . . . . . . . . . . . . . . . . . . . . . . . . . 928<br/>14.126.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 928<br/></p>
<p>14.126.3.1 ReadPortDirect() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 928<br/>14.126.3.2 WritePortDirect() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 929<br/></p>
<p>14.127 AAX_IPropertyMap Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 929<br/>14.127.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 930<br/>14.127.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 930<br/></p>
<p>14.127.2.1 &#8764;AAX_IPropertyMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 930<br/>14.127.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 931<br/></p>
<p>14.127.3.1 GetProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 931<br/>14.127.3.2 GetPointerProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 931<br/>14.127.3.3 AddProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 931<br/>14.127.3.4 AddPointerProperty() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 932<br/>14.127.3.5 AddPointerProperty() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 932<br/>14.127.3.6 RemoveProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 933<br/>14.127.3.7 AddPropertyWithIDArray() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 933<br/>14.127.3.8 GetPropertyWithIDArray() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 934<br/>14.127.3.9 GetIUnknown() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 934<br/></p>
<p>14.128 AAX_ISessionDocument Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 934<br/>14.128.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 934<br/>14.128.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 935<br/></p>
<p>14.128.2.1 &#8764;AAX_ISessionDocument() . . . . . . . . . . . . . . . . . . . . . . . . . . . 935<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxiv<br/></b></p>
<p>14.128.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 935<br/>14.128.3.1 Valid() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 935<br/>14.128.3.2 GetTempoMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 935<br/>14.128.3.3 GetDocumentData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 936<br/></p>
<p>14.129 AAX_ISessionDocumentClient Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 936<br/>14.129.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 936<br/>14.129.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 937<br/></p>
<p>14.129.2.1 ACF_DECLARE_STANDARD_UNKNOWN() . . . . . . . . . . . . . . . . . . . 937<br/>14.129.2.2 AAX_DELETE() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 937<br/></p>
<p>14.129.3 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 937<br/>14.129.3.1 override . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 937<br/></p>
<p>14.130 AAX_IString Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 937<br/>14.130.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 937<br/>14.130.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 938<br/></p>
<p>14.130.2.1 &#8764;AAX_IString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 938<br/>14.130.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 938<br/></p>
<p>14.130.3.1 Length() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 938<br/>14.130.3.2 MaxLength() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 938<br/>14.130.3.3 Get() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 939<br/>14.130.3.4 Set() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 939<br/>14.130.3.5 operator=() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 939<br/>14.130.3.6 operator=() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 939<br/></p>
<p>14.131 AAX_ITaperDelegate&lt; T &gt; Class Template Reference . . . . . . . . . . . . . . . . . . . . . . 939<br/>14.131.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 940<br/>14.131.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 940<br/></p>
<p>14.131.2.1 Clone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 940<br/>14.131.2.2 GetMaximumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 941<br/>14.131.2.3 GetMinimumValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 941<br/>14.131.2.4 ConstrainRealValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 941<br/>14.131.2.5 NormalizedToReal() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 941<br/>14.131.2.6 RealToNormalized() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 942<br/></p>
<p>14.132 AAX_ITaperDelegateBase Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 942<br/>14.132.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 943<br/>14.132.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 943<br/></p>
<p>14.132.2.1 &#8764;AAX_ITaperDelegateBase() . . . . . . . . . . . . . . . . . . . . . . . . . . 944<br/>14.133 AAX_ITask Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 944<br/></p>
<p>14.133.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 944<br/>14.133.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 945<br/></p>
<p>14.133.2.1 &#8764;AAX_ITask() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 945<br/>14.133.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 945<br/></p>
<p>14.133.3.1 GetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 945<br/>14.133.3.2 GetArgumentOfType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 945<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxv<br/></b></p>
<p>14.133.3.3 SetProgress() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 946<br/>14.133.3.4 GetProgress() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 946<br/>14.133.3.5 AddResult() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 946<br/>14.133.3.6 SetDone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 946<br/></p>
<p>14.134 AAX_ITaskAgent Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 947<br/>14.134.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 947<br/>14.134.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 948<br/></p>
<p>14.134.2.1 ACF_DECLARE_STANDARD_UNKNOWN() . . . . . . . . . . . . . . . . . . . 948<br/>14.134.2.2 AAX_DELETE() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 948<br/></p>
<p>14.134.3 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 948<br/>14.134.3.1 AAX_OVERRIDE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 948<br/></p>
<p>14.135 AAX_ITransport Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 948<br/>14.135.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 948<br/>14.135.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 949<br/></p>
<p>14.135.2.1 &#8764;AAX_ITransport() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 950<br/>14.135.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 950<br/></p>
<p>14.135.3.1 GetCurrentTempo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 950<br/>14.135.3.2 GetCurrentMeter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 950<br/>14.135.3.3 IsTransportPlaying() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 951<br/>14.135.3.4 GetCurrentTickPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 951<br/>14.135.3.5 GetCurrentLoopPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 951<br/>14.135.3.6 GetCurrentNativeSampleLocation() . . . . . . . . . . . . . . . . . . . . . . . 952<br/>14.135.3.7 GetCustomTickPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 952<br/>14.135.3.8 GetBarBeatPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 953<br/>14.135.3.9 GetTicksPerQuarter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 953<br/>14.135.3.10 GetCurrentTicksPerBeat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 954<br/>14.135.3.11 GetTimelineSelectionStartPosition() . . . . . . . . . . . . . . . . . . . . . . . 954<br/>14.135.3.12 GetTimeCodeInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 954<br/>14.135.3.13 GetFeetFramesInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 955<br/>14.135.3.14 IsMetronomeEnabled() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 955<br/>14.135.3.15 GetHDTimeCodeInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 956<br/>14.135.3.16 RequestTransportStart() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 956<br/>14.135.3.17 RequestTransportStop() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 956<br/>14.135.3.18 GetTimelineSelectionEndPosition() . . . . . . . . . . . . . . . . . . . . . . . 956<br/>14.135.3.19 GetKeySignature() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 957<br/></p>
<p>14.136 AAX_IViewContainer Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 957<br/>14.136.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 958<br/>14.136.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 959<br/></p>
<p>14.136.2.1 &#8764;AAX_IViewContainer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 959<br/>14.136.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 959<br/></p>
<p>14.136.3.1 GetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 959<br/>14.136.3.2 GetPtr() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 959<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxvi<br/></b></p>
<p>14.136.3.3 GetModifiers() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 959<br/>14.136.3.4 SetViewSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 960<br/>14.136.3.5 HandleParameterMouseDown() . . . . . . . . . . . . . . . . . . . . . . . . . 960<br/>14.136.3.6 HandleParameterMouseDrag() . . . . . . . . . . . . . . . . . . . . . . . . . . 960<br/>14.136.3.7 HandleParameterMouseUp() . . . . . . . . . . . . . . . . . . . . . . . . . . . 961<br/>14.136.3.8 HandleParameterMouseEnter() . . . . . . . . . . . . . . . . . . . . . . . . . . 961<br/>14.136.3.9 HandleParameterMouseExit() . . . . . . . . . . . . . . . . . . . . . . . . . . 962<br/>14.136.3.10 HandleMultipleParametersMouseDown() . . . . . . . . . . . . . . . . . . . . 962<br/>14.136.3.11 HandleMultipleParametersMouseDrag() . . . . . . . . . . . . . . . . . . . . 963<br/>14.136.3.12 HandleMultipleParametersMouseUp() . . . . . . . . . . . . . . . . . . . . . 963<br/></p>
<p>14.137 AAX_Map Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 964<br/>14.137.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 964<br/></p>
<p>14.137.1.1 AAX_Map() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 964<br/>14.137.1.2 &#8764;AAX_Map() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 964<br/></p>
<p>14.137.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 964<br/>14.137.2.1 SetCoefficients() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 964<br/>14.137.2.2 GetCoefficient() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 965<br/>14.137.2.3 GetUpperBoundIndex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 965<br/>14.137.2.4 GetX() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 965<br/>14.137.2.5 GetY() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 965<br/>14.137.2.6 GetFirstX() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 965<br/>14.137.2.7 GetFirstY() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 965<br/>14.137.2.8 GetLastX() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 965<br/>14.137.2.9 GetLastY() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 966<br/>14.137.2.10 GetSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 966<br/></p>
<p>14.138 AAX_Point Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 966<br/>14.138.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 966<br/>14.138.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 966<br/></p>
<p>14.138.2.1 AAX_Point() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 966<br/>14.138.2.2 AAX_Point() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 967<br/></p>
<p>14.138.3 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 967<br/>14.138.3.1 vert . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 967<br/>14.138.3.2 horz . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 967<br/></p>
<p>14.139 AAX_Rect Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 967<br/>14.139.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 967<br/>14.139.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 968<br/></p>
<p>14.139.2.1 AAX_Rect() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 968<br/>14.139.2.2 AAX_Rect() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 968<br/></p>
<p>14.139.3 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 968<br/>14.139.3.1 top . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 968<br/>14.139.3.2 left . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 968<br/>14.139.3.3 width . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 968<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxvii<br/></b></p>
<p>14.139.3.4 height . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 969<br/>14.140 AAX_SHybridRenderInfo Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 969<br/></p>
<p>14.140.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 969<br/>14.140.2 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 969<br/></p>
<p>14.140.2.1 mAudioInputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 969<br/>14.140.2.2 mNumAudioInputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 969<br/>14.140.2.3 mAudioOutputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 970<br/>14.140.2.4 mNumAudioOutputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 970<br/>14.140.2.5 mNumSamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 970<br/>14.140.2.6 mClock . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 970<br/></p>
<p>14.141 AAX_SInstrumentPrivateData Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 970<br/>14.141.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 970<br/>14.141.2 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 971<br/></p>
<p>14.141.2.1 mMonolithicParametersPtr . . . . . . . . . . . . . . . . . . . . . . . . . . . . 971<br/>14.142 AAX_SInstrumentRenderInfo Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 971<br/></p>
<p>14.142.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 971<br/>14.142.2 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 972<br/></p>
<p>14.142.2.1 mAudioInputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 972<br/>14.142.2.2 mAudioOutputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 972<br/>14.142.2.3 mNumSamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 972<br/>14.142.2.4 mClock . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 972<br/>14.142.2.5 mInputNode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 972<br/>14.142.2.6 mGlobalNode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 973<br/>14.142.2.7 mTransportNode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 973<br/>14.142.2.8 mAdditionalInputMIDINodes . . . . . . . . . . . . . . . . . . . . . . . . . . . 973<br/>14.142.2.9 mPrivateData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 973<br/>14.142.2.10 mMeters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 973<br/>14.142.2.11 mCurrentStateNum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 973<br/></p>
<p>14.143 AAX_SInstrumentSetupInfo Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 974<br/>14.143.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 974<br/>14.143.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 975<br/></p>
<p>14.143.2.1 AAX_SInstrumentSetupInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . 975<br/>14.143.3 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975<br/></p>
<p>14.143.3.1 mNeedsGlobalMIDI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 976<br/>14.143.3.2 mGlobalMIDINodeName . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 976<br/>14.143.3.3 mGlobalMIDIEventMask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 976<br/>14.143.3.4 mNeedsInputMIDI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 976<br/>14.143.3.5 mInputMIDINodeName . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 977<br/>14.143.3.6 mInputMIDIChannelMask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 977<br/>14.143.3.7 mNumAdditionalInputMIDINodes . . . . . . . . . . . . . . . . . . . . . . . . . 977<br/>14.143.3.8 mNeedsTransport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 977<br/>14.143.3.9 mTransportMIDINodeName . . . . . . . . . . . . . . . . . . . . . . . . . . . . 978<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxviii<br/></b></p>
<p>14.143.3.10 mNumMeters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 978<br/>14.143.3.11 mMeterIDs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 978<br/>14.143.3.12 mNumAuxOutputStems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 978<br/>14.143.3.13 mAuxOutputStemNames . . . . . . . . . . . . . . . . . . . . . . . . . . . . 979<br/>14.143.3.14 mAuxOutputStemFormats . . . . . . . . . . . . . . . . . . . . . . . . . . . . 979<br/>14.143.3.15 mHybridInputStemFormat . . . . . . . . . . . . . . . . . . . . . . . . . . . . 979<br/>14.143.3.16 mHybridOutputStemFormat . . . . . . . . . . . . . . . . . . . . . . . . . . . 980<br/>14.143.3.17 mInputStemFormat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 980<br/>14.143.3.18 mOutputStemFormat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 980<br/>14.143.3.19 mUseHostGeneratedGUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . 980<br/>14.143.3.20 mCanBypass . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 981<br/>14.143.3.21 mManufacturerID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 981<br/>14.143.3.22 mProductID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 981<br/>14.143.3.23 mPluginID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 981<br/>14.143.3.24 mAudiosuiteID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 981<br/>14.143.3.25 mMultiMonoSupport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 982<br/></p>
<p>14.144 AAX_SPlugInChunk Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 982<br/>14.144.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 982<br/>14.144.2 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 983<br/></p>
<p>14.144.2.1 fSize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 983<br/>14.144.2.2 fVersion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 983<br/>14.144.2.3 fManufacturerID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 983<br/>14.144.2.4 fProductID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 983<br/>14.144.2.5 fPlugInID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 983<br/>14.144.2.6 fChunkID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 984<br/>14.144.2.7 fName . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 984<br/>14.144.2.8 fData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 984<br/></p>
<p>14.145 AAX_SPlugInChunkHeader Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 984<br/>14.145.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 985<br/>14.145.2 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 985<br/></p>
<p>14.145.2.1 fSize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 986<br/>14.145.2.2 fVersion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 986<br/>14.145.2.3 fManufacturerID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 986<br/>14.145.2.4 fProductID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 986<br/>14.145.2.5 fPlugInID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 986<br/>14.145.2.6 fChunkID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 986<br/>14.145.2.7 fName . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 987<br/></p>
<p>14.146 AAX_SPlugInIdentifierTriad Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 987<br/>14.146.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 987<br/>14.146.2 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 987<br/></p>
<p>14.146.2.1 mManufacturerID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 987<br/>14.146.2.2 mProductID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 988<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxix<br/></b></p>
<p>14.146.2.3 mPlugInID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 988<br/>14.147 AAX_StLock_Guard Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 988<br/></p>
<p>14.147.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 988<br/>14.147.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 988<br/></p>
<p>14.147.2.1 AAX_StLock_Guard() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 988<br/>14.147.2.2 &#8764;AAX_StLock_Guard() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 989<br/></p>
<p>14.148 AAX_TransportStateInfo_V1 Struct Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 989<br/>14.148.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 989<br/>14.148.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 989<br/></p>
<p>14.148.2.1 AAX_TransportStateInfo_V1() . . . . . . . . . . . . . . . . . . . . . . . . . . 989<br/>14.148.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 989<br/></p>
<p>14.148.3.1 ToString() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 990<br/>14.148.4 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 990<br/></p>
<p>14.148.4.1 mTransportState . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 990<br/>14.148.4.2 mRecordMode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 990<br/>14.148.4.3 mIsRecordEnabled . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 990<br/>14.148.4.4 mIsRecording . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 990<br/>14.148.4.5 mIsLoopEnabled . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 990<br/></p>
<p>14.149 AAX_VAutomationDelegate Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 991<br/>14.149.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 991<br/>14.149.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 991<br/></p>
<p>14.149.2.1 AAX_VAutomationDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . . 991<br/>14.149.2.2 &#8764;AAX_VAutomationDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . . 991<br/></p>
<p>14.149.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 991<br/>14.149.3.1 GetUnknown() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 992<br/>14.149.3.2 RegisterParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 992<br/>14.149.3.3 UnregisterParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 992<br/>14.149.3.4 PostSetValueRequest() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 993<br/>14.149.3.5 PostCurrentValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 993<br/>14.149.3.6 PostTouchRequest() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 993<br/>14.149.3.7 PostReleaseRequest() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 994<br/>14.149.3.8 GetTouchState() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 994<br/>14.149.3.9 ParameterNameChanged() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 994<br/></p>
<p>14.150 AAX_VCollection Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995<br/>14.150.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995<br/>14.150.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 995<br/></p>
<p>14.150.2.1 AAX_VCollection() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 996<br/>14.150.2.2 &#8764;AAX_VCollection() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 996<br/></p>
<p>14.150.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 996<br/>14.150.3.1 NewDescriptor() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 996<br/>14.150.3.2 AddEffect() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 996<br/>14.150.3.3 SetManufacturerName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 997<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxx<br/></b></p>
<p>14.150.3.4 AddPackageName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 997<br/>14.150.3.5 SetPackageVersion() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 997<br/>14.150.3.6 NewPropertyMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 998<br/>14.150.3.7 SetProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 998<br/>14.150.3.8 GetHostVersion() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 998<br/>14.150.3.9 DescriptionHost() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 999<br/>14.150.3.10 DescriptionHost() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 999<br/>14.150.3.11 HostDefinition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1000<br/>14.150.3.12 GetIUnknown() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1000<br/></p>
<p>14.151 AAX_VComponentDescriptor Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1000<br/>14.151.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1000<br/>14.151.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1002<br/></p>
<p>14.151.2.1 AAX_VComponentDescriptor() . . . . . . . . . . . . . . . . . . . . . . . . . . 1002<br/>14.151.2.2 &#8764;AAX_VComponentDescriptor() . . . . . . . . . . . . . . . . . . . . . . . . . 1002<br/></p>
<p>14.151.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1002<br/>14.151.3.1 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1002<br/>14.151.3.2 AddReservedField() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1002<br/>14.151.3.3 AddAudioIn() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1003<br/>14.151.3.4 AddAudioOut() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1003<br/>14.151.3.5 AddAudioBufferLength() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1004<br/>14.151.3.6 AddSampleRate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1004<br/>14.151.3.7 AddClock() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1004<br/>14.151.3.8 AddSideChainIn() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1005<br/>14.151.3.9 AddDataInPort() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1005<br/>14.151.3.10 AddAuxOutputStem() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1006<br/>14.151.3.11 AddPrivateData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1007<br/>14.151.3.12 AddTemporaryData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1007<br/>14.151.3.13 AddDmaInstance() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1008<br/>14.151.3.14 AddMeters() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1008<br/>14.151.3.15 AddMIDINode() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1010<br/>14.151.3.16 NewPropertyMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1010<br/>14.151.3.17 DuplicatePropertyMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1011<br/>14.151.3.18 AddProcessProc_Native() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1011<br/>14.151.3.19 AddProcessProc_TI() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1012<br/>14.151.3.20 AddProcessProc() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1012<br/>14.151.3.21 GetIUnknown() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1014<br/></p>
<p>14.151.4 Friends And Related Function Documentation . . . . . . . . . . . . . . . . . . . . . . . 1014<br/>14.151.4.1 AAX_VPropertyMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1014<br/></p>
<p>14.152 AAX_VController Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1014<br/>14.152.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1014<br/>14.152.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1016<br/></p>
<p>14.152.2.1 AAX_VController() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1016<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxi<br/></b></p>
<p>14.152.2.2 &#8764;AAX_VController() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1016<br/>14.152.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1016<br/></p>
<p>14.152.3.1 GetEffectID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1017<br/>14.152.3.2 GetSampleRate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1017<br/>14.152.3.3 GetInputStemFormat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1017<br/>14.152.3.4 GetOutputStemFormat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1017<br/>14.152.3.5 GetSignalLatency() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1018<br/>14.152.3.6 GetHybridSignalLatency() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1018<br/>14.152.3.7 GetPlugInTargetPlatform() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1019<br/>14.152.3.8 GetIsAudioSuite() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1019<br/>14.152.3.9 GetCycleCount() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1019<br/>14.152.3.10 GetTODLocation() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1020<br/>14.152.3.11 GetCurrentAutomationTimestamp() . . . . . . . . . . . . . . . . . . . . . . . 1020<br/>14.152.3.12 GetHostName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1021<br/>14.152.3.13 SetSignalLatency() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1021<br/>14.152.3.14 SetCycleCount() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1022<br/>14.152.3.15 PostPacket() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1023<br/>14.152.3.16 SendNotification() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1023<br/>14.152.3.17 SendNotification() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1024<br/>14.152.3.18 GetCurrentMeterValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1024<br/>14.152.3.19 GetMeterPeakValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1025<br/>14.152.3.20 ClearMeterPeakValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1025<br/>14.152.3.21 GetMeterClipped() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1025<br/>14.152.3.22 ClearMeterClipped() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1026<br/>14.152.3.23 GetMeterCount() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1026<br/>14.152.3.24 GetNextMIDIPacket() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1026<br/>14.152.3.25 CreateTableCopyForEffect() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1027<br/>14.152.3.26 CreateTableCopyForLayout() . . . . . . . . . . . . . . . . . . . . . . . . . . 1027<br/>14.152.3.27 CreateTableCopyForEffectFromFile() . . . . . . . . . . . . . . . . . . . . . . 1028<br/>14.152.3.28 CreateTableCopyForLayoutFromFile() . . . . . . . . . . . . . . . . . . . . . . 1029<br/></p>
<p>14.153 AAX_VDataBufferWrapper Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1029<br/>14.153.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1029<br/>14.153.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1030<br/></p>
<p>14.153.2.1 AAX_VDataBufferWrapper() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1030<br/>14.153.2.2 &#8764;AAX_VDataBufferWrapper() . . . . . . . . . . . . . . . . . . . . . . . . . . 1030<br/></p>
<p>14.153.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1030<br/>14.153.3.1 Type() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1030<br/>14.153.3.2 Size() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1030<br/>14.153.3.3 Data() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1031<br/></p>
<p>14.154 AAX_VDescriptionHost Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1031<br/>14.154.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1031<br/>14.154.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1031<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxii<br/></b></p>
<p>14.154.2.1 AAX_VDescriptionHost() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1031<br/>14.154.2.2 &#8764;AAX_VDescriptionHost() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032<br/></p>
<p>14.154.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032<br/>14.154.3.1 AcquireFeatureProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032<br/>14.154.3.2 Supported() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032<br/>14.154.3.3 DescriptionHost() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1033<br/>14.154.3.4 DescriptionHost() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1033<br/>14.154.3.5 HostDefinition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1033<br/></p>
<p>14.155 AAX_VEffectDescriptor Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1033<br/>14.155.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1033<br/>14.155.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1034<br/></p>
<p>14.155.2.1 AAX_VEffectDescriptor() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1034<br/>14.155.2.2 &#8764;AAX_VEffectDescriptor() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1034<br/></p>
<p>14.155.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1034<br/>14.155.3.1 NewComponentDescriptor() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1035<br/>14.155.3.2 AddComponent() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1035<br/>14.155.3.3 AddName() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1035<br/>14.155.3.4 AddCategory() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1036<br/>14.155.3.5 AddCategoryBypassParameter() . . . . . . . . . . . . . . . . . . . . . . . . . 1036<br/>14.155.3.6 AddProcPtr() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1036<br/>14.155.3.7 NewPropertyMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1037<br/>14.155.3.8 SetProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1037<br/>14.155.3.9 AddResourceInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1037<br/>14.155.3.10 AddMeterDescription() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1038<br/>14.155.3.11 AddControlMIDINode() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1038<br/>14.155.3.12 GetIUnknown() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1039<br/></p>
<p>14.156 AAX_VFeatureInfo Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1039<br/>14.156.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1039<br/>14.156.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1039<br/></p>
<p>14.156.2.1 AAX_VFeatureInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1039<br/>14.156.2.2 &#8764;AAX_VFeatureInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1039<br/></p>
<p>14.156.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1040<br/>14.156.3.1 SupportLevel() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1040<br/>14.156.3.2 AcquireProperties() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1040<br/>14.156.3.3 ID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1041<br/></p>
<p>14.157 AAX_VHostProcessorDelegate Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1041<br/>14.157.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1041<br/>14.157.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1041<br/></p>
<p>14.157.2.1 AAX_VHostProcessorDelegate() . . . . . . . . . . . . . . . . . . . . . . . . . 1041<br/>14.157.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1042<br/></p>
<p>14.157.3.1 GetAudio() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1042<br/>14.157.3.2 GetSideChainInputNum() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1042<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxiii<br/></b></p>
<p>14.157.3.3 ForceAnalyze() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1043<br/>14.157.3.4 ForceProcess() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1043<br/></p>
<p>14.158 AAX_VHostServices Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1043<br/>14.158.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1043<br/>14.158.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1044<br/></p>
<p>14.158.2.1 AAX_VHostServices() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1044<br/>14.158.2.2 &#8764;AAX_VHostServices() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1044<br/></p>
<p>14.158.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1044<br/>14.158.3.1 HandleAssertFailure() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1044<br/>14.158.3.2 Trace() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1045<br/>14.158.3.3 StackTrace() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1045<br/></p>
<p>14.159 AAX_VHostTaskAgent Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1045<br/>14.159.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1046<br/></p>
<p>14.159.1.1 AAX_VHostTaskAgent() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1046<br/>14.159.1.2 &#8764;AAX_VHostTaskAgent() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1046<br/></p>
<p>14.159.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1046<br/>14.159.2.1 Initialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1046<br/>14.159.2.2 Uninitialize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1046<br/>14.159.2.3 AddTask() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1047<br/>14.159.2.4 CancelAllTasks() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1047<br/></p>
<p>14.160 AAX_VPageTable Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1047<br/>14.160.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1047<br/>14.160.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1048<br/></p>
<p>14.160.2.1 AAX_VPageTable() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1048<br/>14.160.2.2 &#8764;AAX_VPageTable() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1048<br/></p>
<p>14.160.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1048<br/>14.160.3.1 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1049<br/>14.160.3.2 Empty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1049<br/>14.160.3.3 GetNumPages() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1049<br/>14.160.3.4 InsertPage() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1049<br/>14.160.3.5 RemovePage() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1050<br/>14.160.3.6 GetNumMappedParameterIDs() . . . . . . . . . . . . . . . . . . . . . . . . . 1050<br/>14.160.3.7 ClearMappedParameter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1051<br/>14.160.3.8 GetMappedParameterID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1051<br/>14.160.3.9 MapParameterID() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1052<br/>14.160.3.10 GetNumParametersWithNameVariations() . . . . . . . . . . . . . . . . . . . 1052<br/>14.160.3.11 GetNameVariationParameterIDAtIndex() . . . . . . . . . . . . . . . . . . . . 1053<br/>14.160.3.12 GetNumNameVariationsForParameter() . . . . . . . . . . . . . . . . . . . . 1053<br/>14.160.3.13 GetParameterNameVariationAtIndex() . . . . . . . . . . . . . . . . . . . . . 1054<br/>14.160.3.14 GetParameterNameVariationOfLength() . . . . . . . . . . . . . . . . . . . . 1055<br/>14.160.3.15 ClearParameterNameVariations() . . . . . . . . . . . . . . . . . . . . . . . . 1056<br/>14.160.3.16 ClearNameVariationsForParameter() . . . . . . . . . . . . . . . . . . . . . . 1056<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxiv<br/></b></p>
<p>14.160.3.17 SetParameterNameVariation() . . . . . . . . . . . . . . . . . . . . . . . . . 1057<br/>14.160.3.18 AsUnknown() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1057<br/>14.160.3.19 AsUnknown() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1058<br/>14.160.3.20 IsSupported() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1058<br/></p>
<p>14.161 AAX_VPrivateDataAccess Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1058<br/>14.161.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1058<br/>14.161.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1058<br/></p>
<p>14.161.2.1 AAX_VPrivateDataAccess() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1058<br/>14.161.2.2 &#8764;AAX_VPrivateDataAccess() . . . . . . . . . . . . . . . . . . . . . . . . . . 1059<br/></p>
<p>14.161.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1059<br/>14.161.3.1 ReadPortDirect() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1059<br/>14.161.3.2 WritePortDirect() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1059<br/></p>
<p>14.162 AAX_VPropertyMap Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1060<br/>14.162.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1060<br/>14.162.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1061<br/></p>
<p>14.162.2.1 &#8764;AAX_VPropertyMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1061<br/>14.162.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1061<br/></p>
<p>14.162.3.1 Create() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1061<br/>14.162.3.2 Acquire() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1061<br/>14.162.3.3 GetProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1061<br/>14.162.3.4 GetPointerProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1062<br/>14.162.3.5 AddProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1062<br/>14.162.3.6 AddPointerProperty() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 1063<br/>14.162.3.7 AddPointerProperty() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . 1063<br/>14.162.3.8 RemoveProperty() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1064<br/>14.162.3.9 AddPropertyWithIDArray() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1064<br/>14.162.3.10 GetPropertyWithIDArray() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1064<br/>14.162.3.11 GetIUnknown() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1065<br/></p>
<p>14.163 AAX_VSessionDocument Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1065<br/>14.163.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1065<br/></p>
<p>14.163.1.1 AAX_VSessionDocument() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1066<br/>14.163.1.2 &#8764;AAX_VSessionDocument() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1066<br/></p>
<p>14.163.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1066<br/>14.163.2.1 Clear() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1066<br/>14.163.2.2 Valid() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1066<br/>14.163.2.3 GetTempoMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1066<br/>14.163.2.4 GetDocumentData() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1067<br/></p>
<p>14.164 AAX_VTask Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1068<br/>14.164.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1068<br/>14.164.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1068<br/></p>
<p>14.164.2.1 AAX_VTask() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1069<br/>14.164.2.2 &#8764;AAX_VTask() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1069<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxv<br/></b></p>
<p>14.164.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1069<br/>14.164.3.1 GetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1069<br/>14.164.3.2 GetArgumentOfType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1069<br/>14.164.3.3 SetProgress() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1070<br/>14.164.3.4 GetProgress() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1070<br/>14.164.3.5 AddResult() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1070<br/>14.164.3.6 SetDone() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1071<br/></p>
<p>14.165 AAX_VTransport Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1071<br/>14.165.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1071<br/>14.165.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1072<br/></p>
<p>14.165.2.1 AAX_VTransport() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1072<br/>14.165.2.2 &#8764;AAX_VTransport() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1072<br/></p>
<p>14.165.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1073<br/>14.165.3.1 GetCurrentTempo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1073<br/>14.165.3.2 GetCurrentMeter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1073<br/>14.165.3.3 IsTransportPlaying() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1073<br/>14.165.3.4 GetCurrentTickPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1075<br/>14.165.3.5 GetCurrentLoopPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1075<br/>14.165.3.6 GetCurrentNativeSampleLocation() . . . . . . . . . . . . . . . . . . . . . . . 1076<br/>14.165.3.7 GetCustomTickPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1076<br/>14.165.3.8 GetBarBeatPosition() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1077<br/>14.165.3.9 GetTicksPerQuarter() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1077<br/>14.165.3.10 GetCurrentTicksPerBeat() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1077<br/>14.165.3.11 GetTimelineSelectionStartPosition() . . . . . . . . . . . . . . . . . . . . . . . 1078<br/>14.165.3.12 GetTimeCodeInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1078<br/>14.165.3.13 GetFeetFramesInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1079<br/>14.165.3.14 IsMetronomeEnabled() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1079<br/>14.165.3.15 GetHDTimeCodeInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1079<br/>14.165.3.16 GetTimelineSelectionEndPosition() . . . . . . . . . . . . . . . . . . . . . . . 1080<br/>14.165.3.17 GetKeySignature() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1080<br/>14.165.3.18 RequestTransportStart() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1081<br/>14.165.3.19 RequestTransportStop() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1081<br/></p>
<p>14.166 AAX_VViewContainer Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1081<br/>14.166.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1082<br/>14.166.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1082<br/></p>
<p>14.166.2.1 AAX_VViewContainer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1082<br/>14.166.2.2 &#8764;AAX_VViewContainer() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1083<br/></p>
<p>14.166.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1083<br/>14.166.3.1 GetType() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1083<br/>14.166.3.2 GetPtr() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1083<br/>14.166.3.3 GetModifiers() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1083<br/>14.166.3.4 SetViewSize() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1084<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxvi<br/></b></p>
<p>14.166.3.5 HandleParameterMouseDown() . . . . . . . . . . . . . . . . . . . . . . . . . 1084<br/>14.166.3.6 HandleParameterMouseDrag() . . . . . . . . . . . . . . . . . . . . . . . . . . 1084<br/>14.166.3.7 HandleParameterMouseUp() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1086<br/>14.166.3.8 HandleParameterMouseEnter() . . . . . . . . . . . . . . . . . . . . . . . . . . 1086<br/>14.166.3.9 HandleParameterMouseExit() . . . . . . . . . . . . . . . . . . . . . . . . . . 1087<br/>14.166.3.10 HandleMultipleParametersMouseDown() . . . . . . . . . . . . . . . . . . . . 1087<br/>14.166.3.11 HandleMultipleParametersMouseDrag() . . . . . . . . . . . . . . . . . . . . 1087<br/>14.166.3.12 HandleMultipleParametersMouseUp() . . . . . . . . . . . . . . . . . . . . . 1088<br/></p>
<p>14.167 AAX::Exception::Any Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1088<br/>14.167.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1089<br/>14.167.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1089<br/></p>
<p>14.167.2.1 &#8764;Any() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1089<br/>14.167.2.2 Any() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1089<br/>14.167.2.3 Any() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1090<br/>14.167.2.4 Any() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1090<br/></p>
<p>14.167.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1090<br/>14.167.3.1 operator=() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1090<br/>14.167.3.2 AAX_DEFAULT_MOVE_CTOR() . . . . . . . . . . . . . . . . . . . . . . . . . 1090<br/>14.167.3.3 AAX_DEFAULT_MOVE_OPER() . . . . . . . . . . . . . . . . . . . . . . . . . 1090<br/>14.167.3.4 What() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1090<br/>14.167.3.5 Desc() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1091<br/>14.167.3.6 Function() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1091<br/>14.167.3.7 Line() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1091<br/></p>
<p>14.168 AAX_CChunkDataParser::DataValue Struct Reference . . . . . . . . . . . . . . . . . . . . . . . 1091<br/>14.168.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1091<br/></p>
<p>14.168.1.1 DataValue() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1092<br/>14.168.2 Member Data Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1092<br/></p>
<p>14.168.2.1 mDataType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1092<br/>14.168.2.2 mDataName . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1092<br/>14.168.2.3 mIntValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1092<br/>14.168.2.4 mStringValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1092<br/></p>
<p>14.169 IACFDefinition Interface Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1092<br/>14.169.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1093<br/>14.169.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1093<br/></p>
<p>14.169.2.1 DefineAttribute() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1093<br/>14.169.2.2 GetAttributeInfo() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1094<br/>14.169.2.3 CopyAttribute() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1094<br/></p>
<p>14.170 IACFUnknown Interface Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1095<br/>14.170.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1095<br/>14.170.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1095<br/></p>
<p>14.170.2.1 QueryInterface() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1095<br/>14.170.2.2 AddRef() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1096<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxvii<br/></b></p>
<p>14.170.2.3 Release() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1096<br/>14.171 AAX::Exception::ResultError Class Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1096<br/></p>
<p>14.171.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1096<br/>14.171.2 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1097<br/></p>
<p>14.171.2.1 ResultError() [1/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1097<br/>14.171.2.2 ResultError() [2/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1097<br/>14.171.2.3 ResultError() [3/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1097<br/>14.171.2.4 ResultError() [4/4] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1097<br/></p>
<p>14.171.3 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1098<br/>14.171.3.1 FormatResult() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1098<br/>14.171.3.2 Result() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1098<br/></p>
<p>14.172 SAutoArray&lt; T &gt; Struct Template Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1098<br/>14.172.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1098<br/></p>
<p>14.172.1.1 SAutoArray() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1098<br/>14.172.1.2 &#8764;SAutoArray() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1099<br/></p>
<p>14.172.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1099<br/>14.172.2.1 Reset() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1099<br/>14.172.2.2 Get() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1099<br/></p>
<p>14.173 AAX_ISessionDocument::TempoMap Class Reference . . . . . . . . . . . . . . . . . . . . . . . 1099<br/>14.173.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1099<br/></p>
<p>14.173.1.1 &#8764;TempoMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1100<br/>14.173.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1100<br/></p>
<p>14.173.2.1 Size() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1100<br/>14.173.2.2 Data() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1100<br/></p>
<p>14.174 AAX_VSessionDocument::VTempoMap Class Reference . . . . . . . . . . . . . . . . . . . . . 1100<br/>14.174.1 Constructor &amp; Destructor Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 1100<br/></p>
<p>14.174.1.1 &#8764;VTempoMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1101<br/>14.174.1.2 VTempoMap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1101<br/></p>
<p>14.174.2 Member Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1101<br/>14.174.2.1 Size() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1101<br/>14.174.2.2 Data() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1101<br/></p>
<p><b>15 File Documentation 1103<br/></b>15.1 AAX.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1103<br/></p>
<p>15.1.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1103<br/>15.1.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1106<br/></p>
<p>15.1.2.1 TI_VERSION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1106<br/>15.1.2.2 AAX_CPP11_SUPPORT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1106<br/>15.1.2.3 AAX_OVERRIDE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1107<br/>15.1.2.4 AAX_FINAL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1107<br/>15.1.2.5 AAX_DEFAULT_DTOR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1107<br/>15.1.2.6 AAX_DEFAULT_DTOR_OVERRIDE . . . . . . . . . . . . . . . . . . . . . . . . 1107<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxviii<br/></b></p>
<p>15.1.2.7 AAX_DEFAULT_CTOR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1107<br/>15.1.2.8 AAX_DEFAULT_COPY_CTOR . . . . . . . . . . . . . . . . . . . . . . . . . . . 1107<br/>15.1.2.9 AAX_DEFAULT_ASGN_OPER . . . . . . . . . . . . . . . . . . . . . . . . . . . 1108<br/>15.1.2.10 AAX_DELETE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1108<br/>15.1.2.11 AAX_DEFAULT_MOVE_CTOR . . . . . . . . . . . . . . . . . . . . . . . . . . 1108<br/>15.1.2.12 AAX_DEFAULT_MOVE_OPER . . . . . . . . . . . . . . . . . . . . . . . . . . 1108<br/>15.1.2.13 AAX_CONSTEXPR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1108<br/>15.1.2.14 AAX_UNIQUE_PTR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1109<br/>15.1.2.15 AAXPointer_32bit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1109<br/>15.1.2.16 AAXPointer_64bit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1109<br/>15.1.2.17 AAX_PointerSize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1109<br/>15.1.2.18 AAX_ALIGN_FILE_HOST . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1109<br/>15.1.2.19 AAX_ALIGN_FILE_ALG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1110<br/>15.1.2.20 AAX_ALIGN_FILE_RESET . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1110<br/>15.1.2.21 AAX_ALIGN_FILE_BEGIN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1110<br/>15.1.2.22 AAX_ALIGN_FILE_END . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1110<br/>15.1.2.23 AAX_CALLBACK . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1111<br/>15.1.2.24 AAX_PREPROCESSOR_CONCAT_HELPER . . . . . . . . . . . . . . . . . . . 1111<br/>15.1.2.25 AAX_PREPROCESSOR_CONCAT . . . . . . . . . . . . . . . . . . . . . . . . 1111<br/>15.1.2.26 AAX_FIELD_INDEX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1111<br/></p>
<p>15.1.3 Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1111<br/>15.1.3.1 AAX_CIndex . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1111<br/>15.1.3.2 AAX_CCount . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1112<br/>15.1.3.3 AAX_CBoolean . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1112<br/>15.1.3.4 AAX_CSelector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1112<br/>15.1.3.5 AAX_CTimestamp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1112<br/>15.1.3.6 AAX_CTimeOfDay . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1112<br/>15.1.3.7 AAX_CTransportCounter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1113<br/>15.1.3.8 AAX_CSampleRate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1113<br/>15.1.3.9 AAX_CTypeID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1113<br/>15.1.3.10 AAX_Result . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1113<br/>15.1.3.11 AAX_CPropertyValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1113<br/>15.1.3.12 AAX_CPropertyValue64 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1113<br/>15.1.3.13 AAX_CPointerPropertyValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1114<br/>15.1.3.14 AAX_CTargetPlatform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1114<br/>15.1.3.15 AAX_CFieldIndex . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1114<br/>15.1.3.16 AAX_CComponentID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1114<br/>15.1.3.17 AAX_CMeterID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1114<br/>15.1.3.18 AAX_CParamID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1115<br/>15.1.3.19 AAX_CPageTableParamID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1115<br/>15.1.3.20 AAX_CEffectID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1115<br/>15.1.3.21 acfUID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1115<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxix<br/></b></p>
<p>15.1.3.22 AAX_Feature_UID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1116<br/>15.1.3.23 AAX_CAudioInPort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1116<br/>15.1.3.24 AAX_CAudioOutPort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1116<br/>15.1.3.25 AAX_CMeterPort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1116<br/>15.1.3.26 AAX_SPlugInChunkHeader . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1117<br/>15.1.3.27 AAX_SPlugInChunk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1117<br/>15.1.3.28 AAX_SPlugInChunkPtr . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1117<br/>15.1.3.29 AAX_SPlugInIdentifierTriad . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1117<br/>15.1.3.30 AAX_SPlugInIdentifierTriadPtr . . . . . . . . . . . . . . . . . . . . . . . . . . . 1117<br/></p>
<p>15.1.4 Variable Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1117<br/>15.1.4.1 kAAX_ParameterIdentifierMaxSize . . . . . . . . . . . . . . . . . . . . . . . . . 1117<br/></p>
<p>15.2 AAX_ACFInterface.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1117<br/>15.2.1 Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/></p>
<p>15.2.1.1 acfUID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>15.2.1.2 acfIID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/></p>
<p>15.3 AAX_AdditionalFeatures_Algorithm.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . 1118<br/>15.4 AAX_AdditionalFeatures_AOSandSidechain.doxygen File Reference . . . . . . . . . . . . . . . . 1118<br/>15.5 AAX_AdditionalFeatures_CurveDisplays.doxygen File Reference . . . . . . . . . . . . . . . . . . . 1118<br/>15.6 AAX_AdditionalFeatures_Hybrid.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>15.7 AAX_AdditionalFeatures_Meters.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>15.8 AAX_AdditionalFeatures_MIDI.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>15.9 AAX_AdditionalFeatures_PropertiesFile.doxygen File Reference . . . . . . . . . . . . . . . . . . . 1118<br/>15.10 AAX_Alignment.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/></p>
<p>15.10.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1119<br/>15.11 AAX_Assert.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1119<br/></p>
<p>15.11.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1119<br/>15.11.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1120<br/></p>
<p>15.11.2.1 kAAX_Trace_Priority_None . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1121<br/>15.11.2.2 kAAX_Trace_Priority_Critical . . . . . . . . . . . . . . . . . . . . . . . . . . . 1121<br/>15.11.2.3 kAAX_Trace_Priority_High . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1121<br/>15.11.2.4 kAAX_Trace_Priority_Normal . . . . . . . . . . . . . . . . . . . . . . . . . . . 1121<br/>15.11.2.5 kAAX_Trace_Priority_Low . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1121<br/>15.11.2.6 kAAX_Trace_Priority_Lowest . . . . . . . . . . . . . . . . . . . . . . . . . . . 1121<br/>15.11.2.7 AAX_TRACE_RELEASE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1122<br/>15.11.2.8 AAX_STACKTRACE_RELEASE . . . . . . . . . . . . . . . . . . . . . . . . . . 1122<br/>15.11.2.9 AAX_TRACEORSTACKTRACE_RELEASE . . . . . . . . . . . . . . . . . . . . 1123<br/>15.11.2.10 AAX_ASSERT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1123<br/>15.11.2.11 AAX_DEBUGASSERT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1124<br/>15.11.2.12 AAX_TRACE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1124<br/>15.11.2.13 AAX_STACKTRACE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1124<br/>15.11.2.14 AAX_TRACEORSTACKTRACE . . . . . . . . . . . . . . . . . . . . . . . . . 1124<br/></p>
<p>15.11.3 Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1125<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxx<br/></b></p>
<p>15.11.3.1 AAX_ETracePriority . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1125<br/>15.12 AAX_Atomic.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1125<br/></p>
<p>15.12.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1125<br/>15.12.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1126<br/></p>
<p>15.12.2.1 AAX_ATOMIC_H_ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1126<br/>15.12.3 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1126<br/></p>
<p>15.12.3.1 AAX_Atomic_IncThenGet_32() . . . . . . . . . . . . . . . . . . . . . . . . . . 1126<br/>15.12.3.2 AAX_Atomic_DecThenGet_32() . . . . . . . . . . . . . . . . . . . . . . . . . . 1126<br/>15.12.3.3 AAX_Atomic_Exchange_32() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1127<br/></p>
<p>15.13 AAX_AuxInterface_DirectData.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . 1127<br/>15.14 AAX_AuxInterface_HostProcessor.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . 1127<br/>15.15 AAX_AuxInterface_TaskAgent.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . 1127<br/>15.16 AAX_BugList.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1127<br/>15.17 AAX_Callbacks.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1127<br/></p>
<p>15.17.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1127<br/>15.17.2 Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1128<br/></p>
<p>15.17.2.1 AAXCreateObjectProc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1128<br/>15.17.2.2 AAX_CProcessProc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1128<br/>15.17.2.3 AAX_CPacketAllocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1128<br/>15.17.2.4 AAX_CInstanceInitProc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1129<br/>15.17.2.5 AAX_CBackgroundProc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1129<br/>15.17.2.6 AAX_CInitPrivateDataProc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1129<br/></p>
<p>15.17.3 Enumeration Type Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1130<br/>15.17.3.1 AAX_CProcPtrID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1130<br/></p>
<p>15.18 AAX_CArrayDataBuffer.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1131<br/>15.18.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1131<br/></p>
<p>15.18.1.1 AAX_CArrayDataBuffer_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1131<br/>15.19 AAX_CAtomicQueue.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1131<br/></p>
<p>15.19.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1132<br/>15.20 AAX_CAutoreleasePool.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1132<br/></p>
<p>15.20.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1132<br/>15.20.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1132<br/></p>
<p>15.20.2.1 _AAX_CAUTORELEASEPOOL_H_ . . . . . . . . . . . . . . . . . . . . . . . . 1132<br/>15.21 AAX_CBinaryDisplayDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1132<br/></p>
<p>15.21.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1132<br/>15.22 AAX_CBinaryTaperDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1133<br/></p>
<p>15.22.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1133<br/>15.23 AAX_CChunkDataParser.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1133<br/></p>
<p>15.23.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1133<br/>15.23.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1134<br/></p>
<p>15.23.2.1 AAX_CHUNKDATAPARSER_H . . . . . . . . . . . . . . . . . . . . . . . . . . 1134<br/>15.24 AAX_CDecibelDisplayDelegateDecorator.h File Reference . . . . . . . . . . . . . . . . . . . . . 1134<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxxi<br/></b></p>
<p>15.24.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1134<br/>15.25 AAX_CEffectDirectData.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1135<br/></p>
<p>15.25.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1135<br/>15.25.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1135<br/></p>
<p>15.25.2.1 AAX_CEFFECTDIRECTDATA_H . . . . . . . . . . . . . . . . . . . . . . . . . 1135<br/>15.26 AAX_CEffectGUI.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1135<br/></p>
<p>15.26.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1135<br/>15.27 AAX_CEffectParameters.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1136<br/></p>
<p>15.27.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1136<br/>15.27.2 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1136<br/></p>
<p>15.27.2.1 NormalizedToInt32() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1136<br/>15.27.2.2 Int32ToNormalized() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1137<br/>15.27.2.3 BoolToNormalized() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1137<br/></p>
<p>15.27.3 Variable Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1137<br/>15.27.3.1 cPreviewID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1137<br/>15.27.3.2 cDefaultMasterBypassID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1137<br/></p>
<p>15.28 AAX_CHostProcessor.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1137<br/>15.28.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1137<br/></p>
<p>15.29 AAX_CHostServices.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1138<br/>15.29.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1138<br/></p>
<p>15.30 AAX_CLinearTaperDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1138<br/>15.30.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1138<br/></p>
<p>15.31 AAX_CLogTaperDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1138<br/>15.31.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1138<br/></p>
<p>15.32 AAX_CMonolithicParameters.cpp File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1139<br/>15.33 AAX_CMonolithicParameters.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1139<br/></p>
<p>15.33.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1139<br/>15.33.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1140<br/></p>
<p>15.33.2.1 kMaxAdditionalMIDINodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1140<br/>15.33.2.2 kMaxAuxOutputStems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1140<br/>15.33.2.3 kSynchronizedParameterQueueSize . . . . . . . . . . . . . . . . . . . . . . . . 1140<br/></p>
<p>15.34 AAX_CMutex.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1140<br/>15.34.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1140<br/></p>
<p>15.35 AAX_CNumberDisplayDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1140<br/>15.35.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1140<br/></p>
<p>15.36 AAX_CommonConversions.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1141<br/>15.36.1 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1142<br/></p>
<p>15.36.1.1 GainToDB() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1142<br/>15.36.1.2 DBToGain() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1142<br/>15.36.1.3 LongToDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1142<br/>15.36.1.4 DoubleToLong() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1142<br/>15.36.1.5 DoubleToDSPCoef() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1143<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxxii<br/></b></p>
<p>15.36.1.6 DSPCoefToDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1143<br/>15.36.1.7 ThirtyTwoBitDSPCoefToDouble() . . . . . . . . . . . . . . . . . . . . . . . . . 1143<br/>15.36.1.8 DoubleTo32BitDSPCoefRnd() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1143<br/>15.36.1.9 DoubleTo32BitDSPCoef() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1144<br/>15.36.1.10 DoubleToDSPCoefRnd() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1144<br/></p>
<p>15.36.2 Variable Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1144<br/>15.36.2.1 k32BitPosMax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1144<br/>15.36.2.2 k32BitAbsMax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1144<br/>15.36.2.3 k32BitNegMax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1144<br/>15.36.2.4 k56kFracPosMax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1144<br/>15.36.2.5 k56kFracAbsMax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1145<br/>15.36.2.6 k56kFracHalf . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1145<br/>15.36.2.7 k56kFracNegOne . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1145<br/>15.36.2.8 k56kFracNegMax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1145<br/>15.36.2.9 k56kFracZero . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1145<br/>15.36.2.10 kOneOver56kFracAbsMax . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1145<br/>15.36.2.11 k56kFloatPosMax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1145<br/>15.36.2.12 k56kFloatNegMax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/>15.36.2.13 kNeg144DB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/>15.36.2.14 kNeg144Gain . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/></p>
<p>15.37 AAX_CommonInterface_Algorithm.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . 1146<br/>15.38 AAX_CommonInterface_Communication.doxygen File Reference . . . . . . . . . . . . . . . . . . 1146<br/>15.39 AAX_CommonInterface_DataModel.doxygen File Reference . . . . . . . . . . . . . . . . . . . . 1146<br/>15.40 AAX_CommonInterface_Describe.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . 1146<br/>15.41 AAX_CommonInterface_FormatSpecification.doxygen File Reference . . . . . . . . . . . . . . . 1146<br/>15.42 AAX_CommonInterface_GUI.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/>15.43 AAX_Constants.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/></p>
<p>15.43.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1147<br/>15.43.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1147<br/></p>
<p>15.43.2.1 AAX_CONSTANTS_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1148<br/>15.44 AAX_CPacketDispatcher.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1148<br/></p>
<p>15.44.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1148<br/>15.45 AAX_CParameter.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1148<br/></p>
<p>15.45.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1148<br/>15.46 AAX_CParameterManager.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1149<br/></p>
<p>15.46.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1149<br/>15.47 AAX_CPercentDisplayDelegateDecorator.h File Reference . . . . . . . . . . . . . . . . . . . . . 1149<br/></p>
<p>15.47.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1149<br/>15.47.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1150<br/></p>
<p>15.47.2.1 AAX_CPERCENTDISPLAYDELEGATEDECORATOR_H . . . . . . . . . . . . . 1150<br/>15.48 AAX_CPieceWiseLinearTaperDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . 1150<br/></p>
<p>15.48.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1150<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxxiii<br/></b></p>
<p>15.49 AAX_CRangeTaperDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1150<br/>15.49.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1150<br/></p>
<p>15.50 AAX_CSessionDocumentClient.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1151<br/>15.50.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1151<br/></p>
<p>15.50.1.1 AAX_CSessionDocumentClient_H . . . . . . . . . . . . . . . . . . . . . . . . . 1151<br/>15.51 AAX_CStateDisplayDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1151<br/></p>
<p>15.51.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1151<br/>15.52 AAX_CStateTaperDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1151<br/></p>
<p>15.52.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1152<br/>15.53 AAX_CString.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1152<br/></p>
<p>15.53.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1152<br/>15.53.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1152<br/></p>
<p>15.53.2.1 AAX_CSTRING_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1153<br/>15.53.3 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1153<br/></p>
<p>15.53.3.1 operator+() [1/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1153<br/>15.53.3.2 operator+() [2/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1153<br/>15.53.3.3 operator+() [3/3] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1153<br/></p>
<p>15.54 AAX_CStringDataBuffer.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1153<br/>15.54.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1154<br/></p>
<p>15.54.1.1 AAX_CStringDataBuffer_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1154<br/>15.55 AAX_CStringDisplayDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1154<br/></p>
<p>15.55.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1154<br/>15.56 AAX_CTask.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1154<br/></p>
<p>15.56.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1154<br/>15.56.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1155<br/></p>
<p>15.56.2.1 AAX_CTask_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1155<br/>15.57 AAX_CTaskAgent.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1155<br/></p>
<p>15.57.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1155<br/>15.58 AAX_CUnitDisplayDelegateDecorator.h File Reference . . . . . . . . . . . . . . . . . . . . . . . 1155<br/></p>
<p>15.58.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1155<br/>15.59 AAX_CUnitPrefixDisplayDelegateDecorator.h File Reference . . . . . . . . . . . . . . . . . . . . 1156<br/></p>
<p>15.59.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1156<br/>15.60 AAX_Denormal.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1156<br/></p>
<p>15.60.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1156<br/>15.60.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1157<br/></p>
<p>15.60.2.1 AAX_DENORMAL_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1157<br/>15.60.2.2 AAX_SCOPE_COMPUTE_DENORMALS . . . . . . . . . . . . . . . . . . . . . 1157<br/>15.60.2.3 AAX_SCOPE_DENORMALS_AS_ZERO . . . . . . . . . . . . . . . . . . . . . 1157<br/></p>
<p>15.61 AAX_DigiTrace_Guide.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1157<br/>15.62 AAX_DistributingYourPlugIn.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . 1157<br/>15.63 AAX_DocsDirectory.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1157<br/>15.64 AAX_EndianSwap.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1157<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxxiv<br/></b></p>
<p>15.64.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1158<br/>15.64.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1158<br/></p>
<p>15.64.2.1 ENDIANSWAP_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1158<br/>15.64.3 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1159<br/></p>
<p>15.64.3.1 AAX_EndianSwapInPlace() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1159<br/>15.64.3.2 AAX_EndianSwap() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1159<br/>15.64.3.3 AAX_BigEndianNativeSwapInPlace() . . . . . . . . . . . . . . . . . . . . . . . 1159<br/>15.64.3.4 AAX_BigEndianNativeSwap() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1159<br/>15.64.3.5 AAX_LittleEndianNativeSwapInPlace() . . . . . . . . . . . . . . . . . . . . . . 1160<br/>15.64.3.6 AAX_LittleEndianNativeSwap() . . . . . . . . . . . . . . . . . . . . . . . . . . 1160<br/>15.64.3.7 AAX_EndianSwapSequenceInPlace() . . . . . . . . . . . . . . . . . . . . . . . 1160<br/>15.64.3.8 AAX_BigEndianNativeSwapSequenceInPlace() . . . . . . . . . . . . . . . . . . 1160<br/>15.64.3.9 AAX_LittleEndianNativeSwapSequenceInPlace() . . . . . . . . . . . . . . . . . 1161<br/></p>
<p>15.65 AAX_Enums.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1161<br/>15.65.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1161<br/>15.65.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1170<br/></p>
<p>15.65.2.1 AAX_INT32_MIN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1170<br/>15.65.2.2 AAX_INT32_MAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1170<br/>15.65.2.3 AAX_UINT32_MIN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1170<br/>15.65.2.4 AAX_UINT32_MAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1170<br/>15.65.2.5 AAX_INT16_MIN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1170<br/>15.65.2.6 AAX_INT16_MAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1170<br/>15.65.2.7 AAX_UINT16_MIN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1170<br/>15.65.2.8 AAX_UINT16_MAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1171<br/>15.65.2.9 AAX_ENUM_SIZE_CHECK . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1171<br/>15.65.2.10 AAX_STEM_FORMAT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1171<br/>15.65.2.11 AAX_STEM_FORMAT_CHANNEL_COUNT . . . . . . . . . . . . . . . . . . . 1171<br/>15.65.2.12 AAX_STEM_FORMAT_INDEX . . . . . . . . . . . . . . . . . . . . . . . . . . 1171<br/></p>
<p>15.65.3 Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1171<br/>15.65.3.1 AAX_EParameterType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1171<br/>15.65.3.2 AAX_EParameterOrientation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1172<br/></p>
<p>15.65.4 Enumeration Type Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1172<br/>15.65.4.1 AAX_EHighlightColor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1172<br/>15.65.4.2 AAX_ETracePriorityHost . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1172<br/>15.65.4.3 AAX_ETracePriorityDSP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1173<br/>15.65.4.4 AAX_EModifiers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1173<br/>15.65.4.5 AAX_EAudioBufferLength . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1173<br/>15.65.4.6 AAX_EAudioBufferLengthDSP . . . . . . . . . . . . . . . . . . . . . . . . . . . 1174<br/>15.65.4.7 AAE_EAudioBufferLengthNative . . . . . . . . . . . . . . . . . . . . . . . . . . 1175<br/>15.65.4.8 AAX_EMaxAudioSuiteTracks . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1175<br/>15.65.4.9 AAX_EStemFormat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1175<br/>15.65.4.10 AAX_EPlugInCategory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1177<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxxv<br/></b></p>
<p>15.65.4.11 AAX_EPlugInStrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1178<br/>15.65.4.12 AAX_EMeterOrientation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1179<br/>15.65.4.13 AAX_EMeterBallisticType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1180<br/>15.65.4.14 AAX_EMeterType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1180<br/>15.65.4.15 AAX_EResourceType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1180<br/>15.65.4.16 AAX_ENotificationEvent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1181<br/>15.65.4.17 AAX_EHostModeBits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1186<br/>15.65.4.18 AAX_EHostMode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1187<br/>15.65.4.19 AAX_EPrivateDataOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1187<br/>15.65.4.20 AAX_EConstraintLocationMask . . . . . . . . . . . . . . . . . . . . . . . . . 1188<br/>15.65.4.21 AAX_EConstraintTopology . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1188<br/>15.65.4.22 AAX_EComponentInstanceInitAction . . . . . . . . . . . . . . . . . . . . . . . 1189<br/>15.65.4.23 AAX_ESampleRateMask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1189<br/>15.65.4.24 AAX_EParameterType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1190<br/>15.65.4.25 AAX_EParameterOrientationBits . . . . . . . . . . . . . . . . . . . . . . . . . 1190<br/>15.65.4.26 AAX_EParameterValueInfoSelector . . . . . . . . . . . . . . . . . . . . . . . 1191<br/>15.65.4.27 AAX_EEQBandTypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1191<br/>15.65.4.28 AAX_EEQInCircuitPolarity . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1192<br/>15.65.4.29 AAX_EUseAlternateControl . . . . . . . . . . . . . . . . . . . . . . . . . . . 1192<br/>15.65.4.30 AAX_EMIDINodeType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1192<br/>15.65.4.31 AAX_EUpdateSource . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1194<br/>15.65.4.32 AAX_EDataInPortType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1194<br/>15.65.4.33 AAX_EFrameRate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1195<br/>15.65.4.34 AAX_EFeetFramesRate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1196<br/>15.65.4.35 AAX_EMidiGlobalNodeSelectors . . . . . . . . . . . . . . . . . . . . . . . . . 1196<br/>15.65.4.36 AAX_EPreviewState . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1197<br/>15.65.4.37 AAX_EProcessingState . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1197<br/>15.65.4.38 AAX_ETargetPlatform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1198<br/>15.65.4.39 AAX_ESupportLevel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1198<br/>15.65.4.40 AAX_EHostLevel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1199<br/>15.65.4.41 AAX_ETextEncoding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1199<br/>15.65.4.42 AAX_EAssertFlags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1200<br/>15.65.4.43 AAX_ETransportState . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1200<br/>15.65.4.44 AAX_ERecordMode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1200<br/></p>
<p>15.65.5 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1201<br/>15.65.5.1 AAX_ENUM_SIZE_CHECK() [1/45] . . . . . . . . . . . . . . . . . . . . . . . 1201<br/>15.65.5.2 AAX_ENUM_SIZE_CHECK() [2/45] . . . . . . . . . . . . . . . . . . . . . . . 1201<br/>15.65.5.3 AAX_ENUM_SIZE_CHECK() [3/45] . . . . . . . . . . . . . . . . . . . . . . . 1201<br/>15.65.5.4 AAX_ENUM_SIZE_CHECK() [4/45] . . . . . . . . . . . . . . . . . . . . . . . 1201<br/>15.65.5.5 AAX_ENUM_SIZE_CHECK() [5/45] . . . . . . . . . . . . . . . . . . . . . . . 1202<br/>15.65.5.6 AAX_ENUM_SIZE_CHECK() [6/45] . . . . . . . . . . . . . . . . . . . . . . . 1202<br/>15.65.5.7 AAX_ENUM_SIZE_CHECK() [7/45] . . . . . . . . . . . . . . . . . . . . . . . 1202<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxxvi<br/></b></p>
<p>15.65.5.8 AAX_ENUM_SIZE_CHECK() [8/45] . . . . . . . . . . . . . . . . . . . . . . . 1202<br/>15.65.5.9 AAX_ENUM_SIZE_CHECK() [9/45] . . . . . . . . . . . . . . . . . . . . . . . 1202<br/>15.65.5.10 AAX_ENUM_SIZE_CHECK() [10/45] . . . . . . . . . . . . . . . . . . . . . . 1202<br/>15.65.5.11 AAX_ENUM_SIZE_CHECK() [11/45] . . . . . . . . . . . . . . . . . . . . . . 1202<br/>15.65.5.12 AAX_ENUM_SIZE_CHECK() [12/45] . . . . . . . . . . . . . . . . . . . . . . 1203<br/>15.65.5.13 AAX_ENUM_SIZE_CHECK() [13/45] . . . . . . . . . . . . . . . . . . . . . . 1203<br/>15.65.5.14 AAX_ENUM_SIZE_CHECK() [14/45] . . . . . . . . . . . . . . . . . . . . . . 1203<br/>15.65.5.15 AAX_ENUM_SIZE_CHECK() [15/45] . . . . . . . . . . . . . . . . . . . . . . 1203<br/>15.65.5.16 AAX_ENUM_SIZE_CHECK() [16/45] . . . . . . . . . . . . . . . . . . . . . . 1203<br/>15.65.5.17 AAX_ENUM_SIZE_CHECK() [17/45] . . . . . . . . . . . . . . . . . . . . . . 1203<br/>15.65.5.18 AAX_ENUM_SIZE_CHECK() [18/45] . . . . . . . . . . . . . . . . . . . . . . 1203<br/>15.65.5.19 AAX_ENUM_SIZE_CHECK() [19/45] . . . . . . . . . . . . . . . . . . . . . . 1204<br/>15.65.5.20 AAX_ENUM_SIZE_CHECK() [20/45] . . . . . . . . . . . . . . . . . . . . . . 1204<br/>15.65.5.21 AAX_ENUM_SIZE_CHECK() [21/45] . . . . . . . . . . . . . . . . . . . . . . 1204<br/>15.65.5.22 AAX_ENUM_SIZE_CHECK() [22/45] . . . . . . . . . . . . . . . . . . . . . . 1204<br/>15.65.5.23 AAX_ENUM_SIZE_CHECK() [23/45] . . . . . . . . . . . . . . . . . . . . . . 1204<br/>15.65.5.24 AAX_ENUM_SIZE_CHECK() [24/45] . . . . . . . . . . . . . . . . . . . . . . 1204<br/>15.65.5.25 sampleRateInMask() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1205<br/>15.65.5.26 getLowestSampleRateInMask() . . . . . . . . . . . . . . . . . . . . . . . . . 1205<br/>15.65.5.27 getMaskForSampleRate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1205<br/>15.65.5.28 AAX_ENUM_SIZE_CHECK() [25/45] . . . . . . . . . . . . . . . . . . . . . . 1205<br/>15.65.5.29 AAX_ENUM_SIZE_CHECK() [26/45] . . . . . . . . . . . . . . . . . . . . . . 1206<br/>15.65.5.30 AAX_ENUM_SIZE_CHECK() [27/45] . . . . . . . . . . . . . . . . . . . . . . 1206<br/>15.65.5.31 AAX_ENUM_SIZE_CHECK() [28/45] . . . . . . . . . . . . . . . . . . . . . . 1206<br/>15.65.5.32 AAX_ENUM_SIZE_CHECK() [29/45] . . . . . . . . . . . . . . . . . . . . . . 1206<br/>15.65.5.33 AAX_ENUM_SIZE_CHECK() [30/45] . . . . . . . . . . . . . . . . . . . . . . 1206<br/>15.65.5.34 AAX_ENUM_SIZE_CHECK() [31/45] . . . . . . . . . . . . . . . . . . . . . . 1206<br/>15.65.5.35 AAX_ENUM_SIZE_CHECK() [32/45] . . . . . . . . . . . . . . . . . . . . . . 1206<br/>15.65.5.36 AAX_ENUM_SIZE_CHECK() [33/45] . . . . . . . . . . . . . . . . . . . . . . 1207<br/>15.65.5.37 AAX_ENUM_SIZE_CHECK() [34/45] . . . . . . . . . . . . . . . . . . . . . . 1207<br/>15.65.5.38 AAX_ENUM_SIZE_CHECK() [35/45] . . . . . . . . . . . . . . . . . . . . . . 1207<br/>15.65.5.39 AAX_ENUM_SIZE_CHECK() [36/45] . . . . . . . . . . . . . . . . . . . . . . 1207<br/>15.65.5.40 AAX_ENUM_SIZE_CHECK() [37/45] . . . . . . . . . . . . . . . . . . . . . . 1207<br/>15.65.5.41 AAX_ENUM_SIZE_CHECK() [38/45] . . . . . . . . . . . . . . . . . . . . . . 1207<br/>15.65.5.42 AAX_ENUM_SIZE_CHECK() [39/45] . . . . . . . . . . . . . . . . . . . . . . 1207<br/>15.65.5.43 AAX_ENUM_SIZE_CHECK() [40/45] . . . . . . . . . . . . . . . . . . . . . . 1208<br/>15.65.5.44 AAX_ENUM_SIZE_CHECK() [41/45] . . . . . . . . . . . . . . . . . . . . . . 1208<br/>15.65.5.45 AAX_ENUM_SIZE_CHECK() [42/45] . . . . . . . . . . . . . . . . . . . . . . 1208<br/>15.65.5.46 AAX_ENUM_SIZE_CHECK() [43/45] . . . . . . . . . . . . . . . . . . . . . . 1208<br/>15.65.5.47 AAX_ENUM_SIZE_CHECK() [44/45] . . . . . . . . . . . . . . . . . . . . . . 1208<br/>15.65.5.48 AAX_ENUM_SIZE_CHECK() [45/45] . . . . . . . . . . . . . . . . . . . . . . 1208<br/></p>
<p>15.66 AAX_EnvironmentUtilities.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1208<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxxvii<br/></b></p>
<p>15.66.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1209<br/>15.67 AAX_Errors.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1209<br/></p>
<p>15.67.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1209<br/>15.67.2 Enumeration Type Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1210<br/></p>
<p>15.67.2.1 AAX_EError . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1210<br/>15.67.3 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1212<br/></p>
<p>15.67.3.1 AAX_ENUM_SIZE_CHECK() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1212<br/>15.68 AAX_Exception.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1212<br/></p>
<p>15.68.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1212<br/>15.68.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1213<br/></p>
<p>15.68.2.1 AAX_SWALLOW . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1213<br/>15.68.2.2 AAX_SWALLOW_MULT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1214<br/>15.68.2.3 AAX_CAPTURE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1214<br/>15.68.2.4 AAX_CAPTURE_MULT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1215<br/></p>
<p>15.69 AAX_Exports.cpp File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1215<br/>15.69.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1216<br/></p>
<p>15.69.1.1 AAX_EXPORT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1216<br/>15.69.2 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1216<br/></p>
<p>15.69.2.1 ACFRegisterPlugin() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1216<br/>15.69.2.2 ACFRegisterComponent() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1216<br/>15.69.2.3 ACFGetClassFactory() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1217<br/>15.69.2.4 ACFCanUnloadNow() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1217<br/>15.69.2.5 ACFStartup() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1217<br/>15.69.2.6 ACFShutdown() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1217<br/>15.69.2.7 ACFGetSDKVersion() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1218<br/></p>
<p>15.70 AAX_FastInterpolatedTableLookup.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . 1218<br/>15.70.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1218<br/>15.70.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1218<br/></p>
<p>15.70.2.1 AAX_FASTINTERPOLATEDTABLELOOKUP_H . . . . . . . . . . . . . . . . . . 1218<br/>15.71 AAX_FastInterpolatedTableLookup.hpp File Reference . . . . . . . . . . . . . . . . . . . . . . . 1218<br/>15.72 AAX_FastPow.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1219<br/></p>
<p>15.72.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1219<br/>15.72.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1219<br/></p>
<p>15.72.2.1 _AAX_FASTPOW_H_ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1219<br/>15.73 AAX_Getting_Started_Guide.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . 1219<br/>15.74 AAX_GUITypes.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1219<br/></p>
<p>15.74.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1220<br/>15.74.2 Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1220<br/></p>
<p>15.74.2.1 AAX_Point . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1221<br/>15.74.2.2 AAX_Rect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1221<br/>15.74.2.3 AAX_EViewContainer_Type . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1221<br/></p>
<p>15.74.3 Enumeration Type Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1221<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxxviii<br/></b></p>
<p>15.74.3.1 AAX_EViewContainer_Type . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1221<br/>15.74.4 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1222<br/></p>
<p>15.74.4.1 operator==() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1222<br/>15.74.4.2 operator&quot;!=() [1/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1222<br/>15.74.4.3 operator&lt;() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1222<br/>15.74.4.4 operator&lt;=() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1222<br/>15.74.4.5 operator&gt;() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1222<br/>15.74.4.6 operator&gt;=() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1223<br/>15.74.4.7 operator==() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1223<br/>15.74.4.8 operator&quot;!=() [2/2] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1223<br/>15.74.4.9 AAX_ENUM_SIZE_CHECK() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1223<br/></p>
<p>15.75 AAX_HostSupport.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1223<br/>15.76 AAX_IACFAutomationDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1223<br/></p>
<p>15.76.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1223<br/>15.77 AAX_IACFCollection.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1224<br/></p>
<p>15.77.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1224<br/>15.78 AAX_IACFComponentDescriptor.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1224<br/></p>
<p>15.78.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1224<br/>15.79 AAX_IACFController.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1224<br/></p>
<p>15.79.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1225<br/>15.80 AAX_IACFDataBuffer.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1225<br/></p>
<p>15.80.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1225<br/>15.80.1.1 AAX_IACFDataBuffer_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1225<br/></p>
<p>15.81 AAX_IACFDescriptionHost.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1225<br/>15.82 AAX_IACFEffectDescriptor.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1226<br/></p>
<p>15.82.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1226<br/>15.83 AAX_IACFEffectDirectData.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1226<br/></p>
<p>15.83.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1226<br/>15.84 AAX_IACFEffectGUI.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1226<br/></p>
<p>15.84.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1227<br/>15.85 AAX_IACFEffectParameters.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1227<br/></p>
<p>15.85.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1227<br/>15.86 AAX_IACFFeatureInfo.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1227<br/>15.87 AAX_IACFHostProcessor.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1228<br/></p>
<p>15.87.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1228<br/>15.88 AAX_IACFHostProcessorDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . 1228<br/>15.89 AAX_IACFHostServices.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1228<br/>15.90 AAX_IACFPageTable.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1229<br/>15.91 AAX_IACFPageTableController.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1229<br/>15.92 AAX_IACFPrivateDataAccess.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1229<br/></p>
<p>15.92.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1229<br/>15.93 AAX_IACFPropertyMap.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1230<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>lxxxix<br/></b></p>
<p>15.93.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1230<br/>15.94 AAX_IACFSessionDocument.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1230<br/></p>
<p>15.94.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1230<br/>15.94.1.1 AAX_IACFSessionDocument_H . . . . . . . . . . . . . . . . . . . . . . . . . . 1230<br/></p>
<p>15.95 AAX_IACFSessionDocumentClient.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . 1231<br/>15.95.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1231<br/></p>
<p>15.95.1.1 AAX_IACFSessionDocumentClient_H . . . . . . . . . . . . . . . . . . . . . . . 1231<br/>15.96 AAX_IACFTask.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1231<br/></p>
<p>15.96.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1231<br/>15.96.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1232<br/></p>
<p>15.96.2.1 AAX_IACFTask_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1232<br/>15.97 AAX_IACFTaskAgent.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1232<br/></p>
<p>15.97.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1232<br/>15.97.1.1 AAX_IACFTaskAgent_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1232<br/></p>
<p>15.98 AAX_IACFTransport.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1232<br/>15.98.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1233<br/></p>
<p>15.99 AAX_IACFTransportControl.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1233<br/>15.99.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1233<br/></p>
<p>15.100 AAX_IACFViewContainer.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1233<br/>15.100.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1233<br/></p>
<p>15.101 AAX_IAutomationDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1234<br/>15.101.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1234<br/></p>
<p>15.102 AAX_ICollection.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1234<br/>15.102.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1234<br/></p>
<p>15.103 AAX_IComponentDescriptor.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1234<br/>15.103.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1235<br/></p>
<p>15.104 AAX_IContainer.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1235<br/>15.104.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1235<br/></p>
<p>15.105 AAX_IController.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1235<br/>15.105.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1235<br/></p>
<p>15.106 AAX_IDataBuffer.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1235<br/>15.106.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1236<br/></p>
<p>15.106.1.1 AAX_IDataBuffer_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1236<br/>15.107 AAX_IDataBufferWrapper.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1236<br/></p>
<p>15.107.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1236<br/>15.107.1.1 AAX_IDATABUFFERWRAPPER_H . . . . . . . . . . . . . . . . . . . . . . . . 1236<br/></p>
<p>15.108 AAX_IDescriptionHost.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1236<br/>15.109 AAX_IDisplayDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1237<br/></p>
<p>15.109.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1237<br/>15.110 AAX_IDisplayDelegateDecorator.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . 1237<br/></p>
<p>15.110.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1237<br/>15.111 AAX_IDma.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1237<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xc<br/></b></p>
<p>15.111.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1237<br/>15.111.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1238<br/></p>
<p>15.111.2.1 AAX_IDMA_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1238<br/>15.111.2.2 AAX_DMA_API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1238<br/></p>
<p>15.112 AAX_IEffectDescriptor.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1238<br/>15.112.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1238<br/></p>
<p>15.113 AAX_IEffectDirectData.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1238<br/>15.113.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1239<br/></p>
<p>15.114 AAX_IEffectGUI.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1239<br/>15.114.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1239<br/></p>
<p>15.115 AAX_IEffectParameters.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1239<br/>15.115.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1239<br/></p>
<p>15.116 AAX_IFeatureInfo.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1240<br/>15.117 AAX_IHostProcessor.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1240<br/></p>
<p>15.117.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1240<br/>15.118 AAX_IHostProcessorDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1240<br/></p>
<p>15.118.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1240<br/>15.119 AAX_IHostServices.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1240<br/></p>
<p>15.119.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1241<br/>15.120 AAX_IHostTaskAgent.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1241<br/></p>
<p>15.120.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1241<br/>15.120.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1241<br/></p>
<p>15.120.2.1 AAX_IHostTaskAgent_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1241<br/>15.121 AAX_IMIDINode.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1241<br/></p>
<p>15.121.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1242<br/>15.122 AAX_Init.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1242<br/></p>
<p>15.122.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1242<br/>15.122.2 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1242<br/></p>
<p>15.122.2.1 AAXRegisterComponent() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1243<br/>15.122.2.2 AAXGetClassFactory() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1243<br/>15.122.2.3 AAXCanUnloadNow() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1243<br/>15.122.2.4 AAXStartup() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1244<br/>15.122.2.5 AAXShutdown() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1244<br/>15.122.2.6 AAXGetSDKVersion() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1244<br/></p>
<p>15.123 AAX_InstrumentParameters.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . 1245<br/>15.124 AAX_InterfaceList.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1245<br/>15.125 AAX_IPageTable.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1245<br/>15.126 AAX_IParameter.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1245<br/></p>
<p>15.126.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1245<br/>15.127 AAX_IPointerQueue.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1245<br/></p>
<p>15.127.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1245<br/>15.128 AAX_IPrivateDataAccess.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1246<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xci<br/></b></p>
<p>15.128.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1246<br/>15.129 AAX_IPropertyMap.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1246<br/></p>
<p>15.129.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1246<br/>15.130 AAX_ISessionDocument.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1246<br/></p>
<p>15.130.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1247<br/>15.130.1.1 AAX_ISessionDocument_H . . . . . . . . . . . . . . . . . . . . . . . . . . . 1247<br/></p>
<p>15.131 AAX_ISessionDocumentClient.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1247<br/>15.131.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1247<br/></p>
<p>15.131.1.1 AAX_ISessionDocumentClient_H . . . . . . . . . . . . . . . . . . . . . . . . 1247<br/>15.132 AAX_IString.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1248<br/></p>
<p>15.132.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1248<br/>15.133 AAX_ITaperDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1248<br/></p>
<p>15.133.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1248<br/>15.134 AAX_ITask.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1248<br/></p>
<p>15.134.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1249<br/>15.134.1.1 AAX_ITask_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1249<br/></p>
<p>15.135 AAX_ITaskAgent.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1249<br/>15.136 AAX_ITransport.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1249<br/></p>
<p>15.136.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1249<br/>15.137 AAX_IViewContainer.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1249<br/></p>
<p>15.137.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1250<br/>15.138 AAX_LinkedParameters.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1250<br/>15.139 AAX_Map.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1250<br/></p>
<p>15.139.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1250<br/>15.139.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1250<br/></p>
<p>15.139.2.1 AAX_MAP_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1250<br/>15.140 AAX_Media_Composer_Guide.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . 1251<br/>15.141 AAX_MIDILogging.cpp File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1251<br/>15.142 AAX_MIDILogging.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1251<br/></p>
<p>15.142.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1251<br/>15.143 AAX_MIDIUtilities.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1251<br/></p>
<p>15.143.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1252<br/>15.144 AAX_MiscUtils.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1253<br/></p>
<p>15.144.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1253<br/>15.144.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1254<br/></p>
<p>15.144.2.1 AAX_MISCUTILS_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1254<br/>15.144.2.2 AAX_ALIGNMENT_HINT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1254<br/>15.144.2.3 AAX_WORD_ALIGNED_HINT . . . . . . . . . . . . . . . . . . . . . . . . . . 1255<br/>15.144.2.4 AAX_DWORD_ALIGNED_HINT . . . . . . . . . . . . . . . . . . . . . . . . . 1255<br/>15.144.2.5 AAX_LO . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1255<br/>15.144.2.6 AAX_HI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1255<br/>15.144.2.7 AAX_INT_LO . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1255<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xcii<br/></b></p>
<p>15.144.2.8 AAX_INT_HI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1255<br/>15.145 AAX_OtherExtensions.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>15.146 AAX_Page_Table_Guide.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>15.147 AAX_PageTableUtilities.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>15.148 AAX_ParameterAutomation.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>15.149 AAX_ParameterManager.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>15.150 AAX_ParameterUpdateProtocol.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . 1256<br/>15.151 AAX_ParameterUpdateTiming.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . 1256<br/>15.152 AAX_PlatformOptimizationConstants.h File Reference . . . . . . . . . . . . . . . . . . . . . . . 1256<br/></p>
<p>15.152.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>15.152.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1257<br/></p>
<p>15.152.2.1 AAX_PLATFORMOPTIMIZATIONCONSTANTS_H . . . . . . . . . . . . . . . . 1257<br/>15.153 AAX_PlugInBundleLocation.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1257<br/></p>
<p>15.153.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1257<br/>15.154 AAX_PopStructAlignment.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1257<br/></p>
<p>15.154.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1257<br/>15.155 AAX_PostStructAlignmentHelper.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . 1258<br/></p>
<p>15.155.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1258<br/>15.156 AAX_PreStructAlignmentHelper.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1258<br/></p>
<p>15.156.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1258<br/>15.157 AAX_Pro_Tools_Guide.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1258<br/>15.158 AAX_Properties.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1258<br/></p>
<p>15.158.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1258<br/>15.158.2 Enumeration Type Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1260<br/></p>
<p>15.158.2.1 AAX_EProperty . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1260<br/>15.158.3 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1278<br/></p>
<p>15.158.3.1 AAX_ENUM_SIZE_CHECK() . . . . . . . . . . . . . . . . . . . . . . . . . . . 1278<br/>15.159 AAX_Push2ByteStructAlignment.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . 1278<br/></p>
<p>15.159.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1278<br/>15.159.2 Usage notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1279<br/></p>
<p>15.160 AAX_Push4ByteStructAlignment.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . 1279<br/>15.160.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1279<br/>15.160.2 Usage notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1279<br/></p>
<p>15.161 AAX_Push8ByteStructAlignment.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . 1280<br/>15.161.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1280<br/>15.161.2 Usage notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1280<br/></p>
<p>15.162 AAX_Quantize.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1280<br/>15.162.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1281<br/>15.162.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1281<br/></p>
<p>15.162.2.1 AAX_QUANTIZE_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1281<br/>15.163 AAX_RandomGen.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1281<br/></p>
<p>15.163.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1282<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xciii<br/></b></p>
<p>15.163.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1282<br/>15.163.2.1 AAX_RANDOMGEN_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1282<br/></p>
<p>15.164 AAX_RealTimePerformance.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . 1282<br/>15.165 AAX_RelatedTypes.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1282<br/>15.166 AAX_SampleRateUtils.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1282<br/></p>
<p>15.166.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1282<br/>15.166.2 Enumeration Type Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1283<br/></p>
<p>15.166.2.1 ESRUtils . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1283<br/>15.166.3 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1283<br/></p>
<p>15.166.3.1 CoarseSampleRate() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/>15.166.3.2 CoarseSampleRateFactor() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/>15.166.3.3 CoarseSampleRateIndex() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/></p>
<p>15.167 AAX_SDK_ChangeLog.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/>15.168 AAX_SDK_ExamplePlugIns.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/>15.169 AAX_SDK_GUIExtensions.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/>15.170 AAX_SessionDocumentTypes.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/></p>
<p>15.170.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1285<br/>15.170.1.1 AAX_SessionDocumentTypes_H . . . . . . . . . . . . . . . . . . . . . . . . . 1285<br/></p>
<p>15.170.2 Variable Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1285<br/>15.170.2.1 kAAX_DataBufferType_TempoBreakpointArray . . . . . . . . . . . . . . . . . 1285<br/></p>
<p>15.171 AAX_SliderConversions.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1285<br/>15.171.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1285<br/>15.171.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1286<br/></p>
<p>15.171.2.1 AAX_SLIDERCONVERSIONS_H . . . . . . . . . . . . . . . . . . . . . . . . 1286<br/>15.171.2.2 AAX_LIMIT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1286<br/></p>
<p>15.171.3 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1286<br/>15.171.3.1 LongControlToNewRange() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1287<br/>15.171.3.2 LongToLongControl() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1287<br/>15.171.3.3 LongControlToDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1287<br/>15.171.3.4 DoubleToLongControl() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1287<br/>15.171.3.5 DoubleToLongControlNonlinear() . . . . . . . . . . . . . . . . . . . . . . . . . 1287<br/>15.171.3.6 LongControlToDoubleNonlinear() . . . . . . . . . . . . . . . . . . . . . . . . . 1288<br/>15.171.3.7 LongControlToLogDouble() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1288<br/>15.171.3.8 LogDoubleToLongControl() . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1288<br/></p>
<p>15.172 AAX_StringUtilities.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1288<br/>15.172.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1289<br/>15.172.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1289<br/></p>
<p>15.172.2.1 AAXLibrary_AAX_StringUtilities_h . . . . . . . . . . . . . . . . . . . . . . . . 1289<br/>15.173 AAX_StringUtilities.hpp File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1289<br/></p>
<p>15.173.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1290<br/>15.173.1.1 DEFINE_AAX_ERROR_STRING . . . . . . . . . . . . . . . . . . . . . . . . . 1290<br/></p>
<p>15.174 AAX_TI_Guide.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1290<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xciv<br/></b></p>
<p>15.175 AAX_TransportTypes.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1290<br/>15.175.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1290<br/>15.175.2 Function Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1291<br/></p>
<p>15.175.2.1 operator==() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1291<br/>15.175.2.2 operator&quot;!=() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1291<br/></p>
<p>15.176 AAX_Troubleshooting.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1291<br/>15.177 AAX_UIDs.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1291<br/></p>
<p>15.177.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1291<br/>15.177.2 Typedef Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1295<br/></p>
<p>15.177.2.1 AAX_Feature_UID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1295<br/>15.177.2.2 AAX_DocumentData_UID . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1295<br/></p>
<p>15.177.3 Variable Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1295<br/>15.177.3.1 AAXCompID_HostServices . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1295<br/>15.177.3.2 IID_IAAXHostServicesV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1295<br/>15.177.3.3 IID_IAAXHostServicesV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1296<br/>15.177.3.4 IID_IAAXHostServicesV3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1296<br/>15.177.3.5 AAXCompID_AAXCollection . . . . . . . . . . . . . . . . . . . . . . . . . . . 1296<br/>15.177.3.6 IID_IAAXCollectionV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1296<br/>15.177.3.7 AAXCompID_AAXEffectDescriptor . . . . . . . . . . . . . . . . . . . . . . . . 1296<br/>15.177.3.8 IID_IAAXEffectDescriptorV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1296<br/>15.177.3.9 IID_IAAXEffectDescriptorV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1297<br/>15.177.3.10 AAXCompID_AAXComponentDescriptor . . . . . . . . . . . . . . . . . . . . 1297<br/>15.177.3.11 IID_IAAXComponentDescriptorV1 . . . . . . . . . . . . . . . . . . . . . . . 1297<br/>15.177.3.12 IID_IAAXComponentDescriptorV2 . . . . . . . . . . . . . . . . . . . . . . . 1297<br/>15.177.3.13 IID_IAAXComponentDescriptorV3 . . . . . . . . . . . . . . . . . . . . . . . 1297<br/>15.177.3.14 AAXCompID_AAXPropertyMap . . . . . . . . . . . . . . . . . . . . . . . . . 1297<br/>15.177.3.15 IID_IAAXPropertyMapV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1298<br/>15.177.3.16 IID_IAAXPropertyMapV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1298<br/>15.177.3.17 IID_IAAXPropertyMapV3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1298<br/>15.177.3.18 AAXCompID_HostProcessorDelegate . . . . . . . . . . . . . . . . . . . . . 1298<br/>15.177.3.19 IID_IAAXHostProcessorDelegateV1 . . . . . . . . . . . . . . . . . . . . . . 1298<br/>15.177.3.20 IID_IAAXHostProcessorDelegateV2 . . . . . . . . . . . . . . . . . . . . . . 1298<br/>15.177.3.21 IID_IAAXHostProcessorDelegateV3 . . . . . . . . . . . . . . . . . . . . . . 1299<br/>15.177.3.22 AAXCompID_AutomationDelegate . . . . . . . . . . . . . . . . . . . . . . . 1299<br/>15.177.3.23 IID_IAAXAutomationDelegateV1 . . . . . . . . . . . . . . . . . . . . . . . . 1299<br/>15.177.3.24 AAXCompID_Controller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1299<br/>15.177.3.25 IID_IAAXControllerV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1299<br/>15.177.3.26 IID_IAAXControllerV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1299<br/>15.177.3.27 IID_IAAXControllerV3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1300<br/>15.177.3.28 AAXCompID_PageTableController . . . . . . . . . . . . . . . . . . . . . . . 1300<br/>15.177.3.29 IID_IAAXPageTableController . . . . . . . . . . . . . . . . . . . . . . . . . . 1300<br/>15.177.3.30 IID_IAAXPageTableControllerV2 . . . . . . . . . . . . . . . . . . . . . . . . 1300<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xcv<br/></b></p>
<p>15.177.3.31 AAXCompID_PrivateDataAccess . . . . . . . . . . . . . . . . . . . . . . . . 1300<br/>15.177.3.32 IID_IAAXPrivateDataAccessV1 . . . . . . . . . . . . . . . . . . . . . . . . . 1300<br/>15.177.3.33 AAXCompID_ViewContainer . . . . . . . . . . . . . . . . . . . . . . . . . . 1301<br/>15.177.3.34 IID_IAAXViewContainerV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1301<br/>15.177.3.35 IID_IAAXViewContainerV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1301<br/>15.177.3.36 IID_IAAXViewContainerV3 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1301<br/>15.177.3.37 AAXCompID_Transport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1301<br/>15.177.3.38 IID_IAAXTransportV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1301<br/>15.177.3.39 IID_IAAXTransportV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1302<br/>15.177.3.40 IID_IAAXTransportV3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1302<br/>15.177.3.41 IID_IAAXTransportV4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1302<br/>15.177.3.42 IID_IAAXTransportV5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1302<br/>15.177.3.43 AAXCompID_TransportControl . . . . . . . . . . . . . . . . . . . . . . . . . 1302<br/>15.177.3.44 IID_IAAXTransportControlV1 . . . . . . . . . . . . . . . . . . . . . . . . . . 1302<br/>15.177.3.45 AAXCompID_PageTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1303<br/>15.177.3.46 IID_IAAXPageTableV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1303<br/>15.177.3.47 IID_IAAXPageTableV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1303<br/>15.177.3.48 AAX_CompID_DescriptionHost . . . . . . . . . . . . . . . . . . . . . . . . . 1303<br/>15.177.3.49 IID_IAAXDescriptionHostV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1303<br/>15.177.3.50 AAX_CompID_FeatureInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . 1303<br/>15.177.3.51 IID_IAAXFeatureInfoV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1304<br/>15.177.3.52 AAXCompID_Task . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1304<br/>15.177.3.53 IID_IAAXTaskV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1304<br/>15.177.3.54 AAXCompID_SessionDocument . . . . . . . . . . . . . . . . . . . . . . . . 1304<br/>15.177.3.55 IID_IAAXSessionDocumentV1 . . . . . . . . . . . . . . . . . . . . . . . . . 1304<br/>15.177.3.56 AAXCompID_EffectParameters . . . . . . . . . . . . . . . . . . . . . . . . . 1304<br/>15.177.3.57 IID_IAAXEffectParametersV1 . . . . . . . . . . . . . . . . . . . . . . . . . . 1305<br/>15.177.3.58 IID_IAAXEffectParametersV2 . . . . . . . . . . . . . . . . . . . . . . . . . . 1305<br/>15.177.3.59 IID_IAAXEffectParametersV3 . . . . . . . . . . . . . . . . . . . . . . . . . . 1305<br/>15.177.3.60 IID_IAAXEffectParametersV4 . . . . . . . . . . . . . . . . . . . . . . . . . . 1305<br/>15.177.3.61 AAXCompID_HostProcessor . . . . . . . . . . . . . . . . . . . . . . . . . . 1305<br/>15.177.3.62 IID_IAAXHostProcessorV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1305<br/>15.177.3.63 IID_IAAXHostProcessorV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1306<br/>15.177.3.64 AAXCompID_EffectGUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1306<br/>15.177.3.65 IID_IAAXEffectGUIV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1306<br/>15.177.3.66 AAXCompID_EffectDirectData . . . . . . . . . . . . . . . . . . . . . . . . . 1306<br/>15.177.3.67 IID_IAAXEffectDirectDataV1 . . . . . . . . . . . . . . . . . . . . . . . . . . 1306<br/>15.177.3.68 IID_IAAXEffectDirectDataV2 . . . . . . . . . . . . . . . . . . . . . . . . . . 1306<br/>15.177.3.69 AAXCompID_TaskAgent . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1307<br/>15.177.3.70 IID_IAAXTaskAgentV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1307<br/>15.177.3.71 AAXCompID_SessionDocumentClient . . . . . . . . . . . . . . . . . . . . . 1307<br/>15.177.3.72 IID_IAAXSessionDocumentClientV1 . . . . . . . . . . . . . . . . . . . . . . 1307<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xcvi<br/></b></p>
<p>15.177.3.73 AAXCompID_DataBuffer . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1307<br/>15.177.3.74 IID_IAAXDataBufferV1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1307<br/>15.177.3.75 AAXATTR_ClientFeature_StemFormat . . . . . . . . . . . . . . . . . . . . . 1308<br/>15.177.3.76 AAXATTR_ClientFeature_AuxOutputStem . . . . . . . . . . . . . . . . . . . 1308<br/>15.177.3.77 AAXATTR_ClientFeature_SideChainInput . . . . . . . . . . . . . . . . . . . 1308<br/>15.177.3.78 AAXATTR_ClientFeature_MIDI . . . . . . . . . . . . . . . . . . . . . . . . . 1308<br/>15.177.3.79 AAXATTR_Client_Level . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1308<br/>15.177.3.80 AAXATTR_Client_Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1309<br/>15.177.3.81 AAX_DocumentDataType_TempoMap . . . . . . . . . . . . . . . . . . . . . 1309<br/></p>
<p>15.178 AAX_UtilsNative.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1309<br/>15.178.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1309<br/>15.178.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1310<br/></p>
<p>15.178.2.1 _AAX_UTILSNATIVE_H_ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1310<br/>15.179 AAX_VAutomationDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1310<br/></p>
<p>15.179.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1310<br/>15.180 AAX_VCollection.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1311<br/></p>
<p>15.180.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1311<br/>15.181 AAX_VComponentDescriptor.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . 1311<br/></p>
<p>15.181.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1311<br/>15.182 AAX_VController.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1311<br/></p>
<p>15.182.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1312<br/>15.183 AAX_VDataBufferWrapper.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1312<br/></p>
<p>15.183.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1312<br/>15.183.1.1 AAX_VDATABUFFERWRAPPER_H . . . . . . . . . . . . . . . . . . . . . . . 1312<br/></p>
<p>15.184 AAX_VDescriptionHost.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1312<br/>15.185 AAX_VEffectDescriptor.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1313<br/></p>
<p>15.185.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1313<br/>15.186 AAX_VENUE_Guide.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1313<br/>15.187 AAX_Version.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1313<br/></p>
<p>15.187.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1313<br/>15.187.2 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1314<br/></p>
<p>15.187.2.1 _AAX_VERSION_H_ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1314<br/>15.187.2.2 AAX_SDK_VERSION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1314<br/>15.187.2.3 AAX_SDK_CURRENT_REVISION . . . . . . . . . . . . . . . . . . . . . . . . 1315<br/>15.187.2.4 AAX_SDK_1p0p1_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1315<br/>15.187.2.5 AAX_SDK_1p0p2_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1315<br/>15.187.2.6 AAX_SDK_1p0p3_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1315<br/>15.187.2.7 AAX_SDK_1p0p4_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1315<br/>15.187.2.8 AAX_SDK_1p0p5_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1315<br/>15.187.2.9 AAX_SDK_1p0p6_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1315<br/>15.187.2.10 AAX_SDK_1p5p0_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1316<br/>15.187.2.11 AAX_SDK_2p0b1_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1316<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xcvii<br/></b></p>
<p>15.187.2.12 AAX_SDK_2p0p0_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1316<br/>15.187.2.13 AAX_SDK_2p0p1_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1316<br/>15.187.2.14 AAX_SDK_2p1p0_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1316<br/>15.187.2.15 AAX_SDK_2p1p1_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1316<br/>15.187.2.16 AAX_SDK_2p2p0_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1316<br/>15.187.2.17 AAX_SDK_2p2p1_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1316<br/>15.187.2.18 AAX_SDK_2p2p2_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1317<br/>15.187.2.19 AAX_SDK_2p3p0_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1317<br/>15.187.2.20 AAX_SDK_2p3p1_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1317<br/>15.187.2.21 AAX_SDK_2p3p2_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1317<br/>15.187.2.22 AAX_SDK_2p4p0_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1317<br/>15.187.2.23 AAX_SDK_2p4p1_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1317<br/>15.187.2.24 AAX_SDK_2p5p0_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1317<br/>15.187.2.25 AAX_SDK_2p6p0_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1317<br/>15.187.2.26 AAX_SDK_2p6p1_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1318<br/>15.187.2.27 AAX_SDK_2p7p0_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1318<br/>15.187.2.28 AAX_SDK_2p8p0_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1318<br/>15.187.2.29 AAX_SDK_2p8p1_REVISION . . . . . . . . . . . . . . . . . . . . . . . . . . 1318<br/></p>
<p>15.188 AAX_VFeatureInfo.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1318<br/>15.189 AAX_VHostProcessorDelegate.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . 1318<br/></p>
<p>15.189.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1318<br/>15.190 AAX_VHostServices.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1319<br/></p>
<p>15.190.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1319<br/>15.191 AAX_VHostTaskAgent.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1319<br/></p>
<p>15.191.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1319<br/>15.191.1.1 AAX_VHostTaskAgent_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1319<br/></p>
<p>15.192 AAX_VPageTable.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1320<br/>15.193 AAX_VPrivateDataAccess.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1320<br/></p>
<p>15.193.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1320<br/>15.194 AAX_VPropertyMap.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1320<br/></p>
<p>15.194.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1320<br/>15.195 AAX_VSessionDocument.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1321<br/></p>
<p>15.195.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1321<br/>15.195.1.1 AAX_VSessionDocument_H . . . . . . . . . . . . . . . . . . . . . . . . . . . 1321<br/></p>
<p>15.196 AAX_VTask.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1321<br/>15.196.1 Macro Definition Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/></p>
<p>15.196.1.1 AAX_VTask_H . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/>15.197 AAX_VTransport.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/></p>
<p>15.197.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/>15.198 AAX_VViewContainer.h File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/></p>
<p>15.198.1 Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/>15.199 DSH_Guide.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>xcviii<br/></b></p>
<p>15.200 DTT_Guide.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/>15.201 ReadMe.doxygen File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/></p>
<p><b>Index 1323<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 1<br/></b></p>
<p><b>Main Page<br/></b></p>
<p>AAX SDK Manual<br/></p>
<p><b>1.1 Welcome to AAX<br/></b></p>
<p>Select the &quot;Manual&quot; tab to see a full list of documentation pages, or choose from the topics below.<br/></p>
<p><b>Note<br/></b>Looking for something? The search function only includes indexing of code symbols and page titles. To search<br/>for specific text strings in the AAX SDK manual it is best to use a text search tool such as grep or FINDSTR on<br/>the AAX SDK directory or search for the desired text within the PDF version of the AAX SDK documentation.<br/></p>
<p><b>1.1.1 The Basics<br/></b></p>
<p>New to AAX? Read through the documentation pages listed below to get started!<br/></p>
<p>&#8226; See Getting Started with AAX for a general overview of AAX and a walk-through of the DemoGain example<br/>plug-in<br/></p>
<p>&#8226; Read through the first few sections of the Pro Tools Guide if you are new to Pro Tools<br/>&#8226; Read the Digital signature section of the Pro Tools Guide to review the digital signing requirements for com-<br/></p>
<p>patibility with Pro Tools<br/>&#8226; Review the sample plug-ins for examples of both basic and advanced AAX features<br/>&#8226; See Core AAX Interface to find out more about the basic structure of AAX plug-ins<br/>&#8226; See Real-time algorithm callback to learn more about audio processing in AAX<br/>&#8226; See Data model interface to learn about adding parameters and controls to your plug-in,<br/>&#8226; See Description callback for more information about plug-in configuration and initial set-up<br/>&#8226; See the HDX DSP Guide to find out how to add AAX DSP support to your plug-in for Avid's HDX and Pro<br/></p>
<p>Tools | Carbon products<br/>&#8226; Ready to ship your new plug-in? See Distributing Your AAX Plug-In for information about finalizing and dis-<br/></p>
<p>tributing your AAX products<br/>&#8226; Check out the Troubleshooting page if you're having problems, or post a question to the developer<br/>forums and an Avid engineer will be happy to assist you.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>2 Main Page<br/></b></p>
<p><b>1.1.2 More Topics<br/></b></p>
<p>Have a more specific question? Review the pages below or view the full list of documentation pages under the<br/>&quot;Manual&quot; tab above.<br/></p>
<p>&#8226; See AAX_IController to see the interface that an AAX plug-in's host-based modules use to interact with the<br/>host<br/></p>
<p>&#8226; See AAX communication protocols to find out more about how different modules in an AAX plug-in commu-<br/>nicate with one another<br/></p>
<p>&#8226; See Offline processing interface for information about creating advanced non-real-time AAX plug-ins<br/></p>
<p>&#8226; See Taper delegates and Display delegates for more information about implementing custom parameter and<br/>control behavior<br/></p>
<p>&#8226; Look in the /TI/SignalProcessing folder for signal processing utility classes and functions available for optimiz-<br/>ing on Native and DSP<br/></p>
<p><b>1.1.3 Test Tools &amp; Utilities<br/></b></p>
<p>&#8226; The DSH Guide has information about the tool for testing basic functionality of your plug-in<br/></p>
<p>&#8226; See DTT Guide to learn how to automate different test scenarios for DSH<br/></p>
<p><b>1.1.4 Supplemental Information<br/></b></p>
<p>&#8226; Example Plug-Ins<br/></p>
<p>&#8226; Change Log<br/></p>
<p>&#8226; Host Support<br/></p>
<p>&#8226; Known Issues<br/></p>
<p><b>1.2 SDK Folder Hierarchy<br/></b></p>
<p><b>Documentation<br/></b>SDK documentation<br/></p>
<p><b>ExamplePlugIns<br/></b>Example plug-in projects More information<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1.3 Contacting Avid 3<br/></b></p>
<p><b>Extensions<br/></b>Demonstrations of how to extend the AAX SDK, for example by incorporating third-party GUI frameworks into<br/>AAX plug-ins. More information<br/></p>
<p><b>Interfaces<br/></b>Interface headers and other resources required for use of the AAX SDK library<br/></p>
<p><b>Libs<br/></b>Source code for the AAX SDK library, a collection of default implementations and utility classes for use in all<br/>AAX plug-ins<br/></p>
<p><b>TI<br/></b>Various resources for use with TI's Code Composer Studio IDE and Avid's TI testing toolset<br/></p>
<p><b>Utilities<br/></b>Common SDK utilities and resources<br/></p>
<p><b>1.3 Contacting Avid<br/></b></p>
<p>Your personal avid user account is your hub for AAX Toolkit services and developer support.<br/></p>
<p>Log in at avid.com for access to the full range of tools and services provided to AAX developers, including the<br/>AAX developer forum. If you have any questions on the AAX SDK documentation or require support with<br/>AAX development, we encourage you to post them to the forum as your first line of inquiry.<br/></p>
<p>If you have time-sensitive or critical support inquiries, contact the AAX development team directly at avid.&#8592;&#8617;<br/>developer.services@avid.com. Any AAX questions sent to this alias will be promptly addressed by the<br/>most appropriate contact here at Avid.<br/></p>
<p>If you require NFR (Not For Resale) licenses to Avid software for AAX development please send an e-mail to<br/>devauth@avid.com with &quot;License Request&quot; in the subject.<br/></p>
<p>If you require access to the digital signing toolkit from PACE Anti-Piracy, Inc. for compatibility with Pro Tools then<br/>please follow the instructions here.<br/></p>
<p>The following chart describes these and other ways of connecting with Avid to take advantage of the services<br/>provided to AAX developers:<br/></p>
<p><b>1.4 Licensing<br/></b></p>
<p>Unless you have entered into a commercial agreement with Avid, you are using this SDK under an evaluation<br/>agreement. To review this agreement, see the AAX Toolkit downloads section under your my.avid.&#8592;&#8617;<br/>com account.<br/></p>
<p>As an Avid Developer, you are invited to offer your products on Avid Marketplace and via Avid Link.<br/>If you wish to sell them independently or through other commercial outlets, an authorized representative from your<br/>organization is required to sign our Commercial License, which you can read and click through here.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>4 Main Page<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 2<br/></b></p>
<p><b>Todo List<br/></b></p>
<p><b>Member AAX_CAudioInPort<br/></b>Not used directly by AAX plug-ins<br/></p>
<p><b>Member AAX_CAudioOutPort<br/></b>Not used directly by AAX plug-ins<br/></p>
<p><b>Class AAX_CChunkDataParser<br/></b>Update this documentation for AAX<br/></p>
<p><b>Member AAX_CComponentID<br/></b>Not used by AAX plug-ins<br/></p>
<p><b>Member AAX_CCount<br/></b>Not used by AAX plug-ins<br/></p>
<p><b>Member AAX_CEffectDirectData::Controller (void)<br/></b>Change to GetController to match other AAX_CEffect modules<br/></p>
<p><b>Member AAX_CEffectDirectData::EffectParameters (void)<br/></b>Change to GetController to match other AAX_CEffect modules<br/></p>
<p><b>Member AAX_CEffectGUI::UpdateAllParameters (void)<br/></b>Rename to UpdateAllParameterViews() or another name that does not lead to confusion regarding<br/>what exactly this method should be doing.<br/></p>
<p><b>Member AAX_CIndex<br/></b>Not used by AAX plug-ins (except as AAX_CFieldIndex)<br/></p>
<p><b>Member AAX_CMeterID<br/></b>Not used by AAX plug-ins<br/></p>
<p><b>Member AAX_CMeterPort<br/></b>Not used directly by AAX plug-ins<br/></p>
<p><b>Class AAX_CParameterManager<br/></b>Should the Parameter Manager return error codes?<br/></p>
<p><b>Member AAX_CParameterManager::AddParameter (AAX_IParameter </b>&#8727;<b>param)<br/></b>Should this method return success/failure code?<br/></p>
<p><b>Member AAX_CParameterManager::RemoveAllParameters ()<br/></b>Should this method return success/failure code?<br/></p>
<p><b>Member AAX_CParameterManager::RemoveParameter (AAX_IParameter </b>&#8727;<b>param)<br/></b>Should this method return success/failure code?<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>6 Todo List<br/></b></p>
<p><b>Member AAX_CParameterManager::RemoveParameterByID (AAX_CParamID identifier)<br/></b>Should this method return success/failure code?<br/></p>
<p><b>Member AAX_CRangeTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt;<b>::AAX_CRangeTaperDelegate (T </b>&#8727;<b>range, double<br/></b>&#8727;<b>rangesSteps, unsigned long numRanges, bool useSmartRounding=true)<br/></b>Document useSmartRounding parameter<br/></p>
<p><b>Member AAX_CRangeTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt;<b>::SmartRound (double value) const<br/></b>Document<br/></p>
<p><b>Member AAX_CSelector<br/></b>Clean up usage; currently used for a variety of ID-related values<br/></p>
<p><b>Member AAX_EParameterOrientationBits<br/></b>FLAGGED FOR REVISION<br/></p>
<p><b>Member AAX_EParameterType<br/></b>FLAGGED FOR REMOVAL<br/></p>
<p><b>Member AAX_IACFEffectGUI::SetControlHighlightInfo (AAX_CParamID iParameterID, AAX_CBoolean iIs</b>&#8592;&#8617;<br/><b>Highlighted, AAX_EHighlightColor iColor)=0<br/></b>Document this method<br/></p>
<p><b>Class AAX_IACFEffectParameters<br/></b>Add documentation for expected error state return values<br/></p>
<p><b>Member AAX_IACFEffectParameters::GetParameterOrientation (AAX_CParamID iParameterID, AAX_</b>&#8592;&#8617;<br/><b>EParameterOrientation </b>&#8727;<b>oParameterOrientation) const =0<br/></b>update this documentation<br/></p>
<p><b>Member AAX_IACFEffectParameters::GetParameterType (AAX_CParamID iParameterID, AAX_</b>&#8592;&#8617;<br/><b>EParameterType </b>&#8727;<b>oParameterType) const =0<br/></b>The concept of parameter type needs more documentation<br/></p>
<p><b>Member AAX_IACFEffectParameters::SetParameterDefaultNormalizedValue (AAX_CParamID iParameterID,<br/>double iValue)=0<br/></b>THIS IS NOT CALLED FROM HOST. USEFUL FOR INTERNAL USE ONLY?<br/></p>
<p><b>Member AAX_IACFEffectParameters::SetParameterNormalizedRelative (AAX_CParamID iParameterID, dou-<br/>ble iValue)=0<br/></b>NOT CURRENTLY CALLED FROM THE HOST. USEFUL FOR INTERNAL USE ONLY?<br/>REMOVE THIS METHOD (?)<br/></p>
<p><b>Member AAX_IACFEffectParameters::Uninitialize ()=0<br/></b>Docs: When exactly is AAX_IACFEffectParameters::Uninitialize() called, and under what conditions?<br/></p>
<p><b>Member AAX_IACFEffectParameters::UpdateParameterNormalizedValue (AAX_CParamID iParameterID,<br/>double iValue, AAX_EUpdateSource iSource)=0<br/></b>FLAGGED FOR CONSIDERATION OF REVISION<br/></p>
<p><b>Class AAX_IACFEffectParameters_V2<br/></b>Add documentation for expected error state return values<br/></p>
<p><b>Class AAX_IACFEffectParameters_V3<br/></b>Add documentation for expected error state return values<br/></p>
<p><b>Class AAX_IACFEffectParameters_V4<br/></b>Add documentation for expected error state return values<br/></p>
<p><b>Member AAX_IComponentDescriptor::AddDmaInstance (AAX_CFieldIndex inFieldIndex,<br/>AAX_IDma::EMode inDmaMode)=0<br/></b>Update the DMA system management such that operation priority can be set arbitrarily<br/></p>
<p><b>Member AAX_IComponentDescriptor::AddProcessProc (AAX_IPropertyMap </b>&#8727;<b>inProperties, AAX_CSelector<br/></b>&#8727;<b>outProcIDs=NULL, int32_t inProcIDsSize=0)=0<br/></b>document this parameter Returned array will be NULL-terminated<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>7<br/></b></p>
<p><b>Member AAX_IComponentDescriptor::AddProcessProc_Native (AAX_CProcessProc inProcessProc,<br/>AAX_IPropertyMap </b>&#8727;<b>inProperties=NULL, AAX_CInstanceInitProc inInstanceInitProc=NULL, AAX_</b>&#8592;&#8617;<br/><b>CBackgroundProc inBackgroundProc=NULL, AAX_CSelector </b>&#8727;<b>outProcID=NULL)=0<br/></b>document this parameter<br/></p>
<p><b>Member AAX_IComponentDescriptor::AddProcessProc_TI (const char inDLLFileNameUTF8[], const<br/>char inProcessProcSymbol[], AAX_IPropertyMap </b>&#8727;<b>inProperties, const char inInstanceInitProc</b>&#8592;&#8617;<br/><b>Symbol[]=NULL, const char inBackgroundProcSymbol[]=NULL, AAX_CSelector </b>&#8727;<b>outProcID=NULL)=0<br/></b>document this parameter<br/></p>
<p><b>Member AAX_IController::GetCycleCount (AAX_EProperty inWhichCycleCount, AAX_CPropertyValue<br/></b>&#8727;<b>outNumCycles) const =0<br/></b>PLACEHOLDER - NOT CURRENTLY IMPLEMENTED IN HOST<br/></p>
<p><b>Member AAX_IController::SetCycleCount (AAX_EProperty </b>&#8727;<b>inWhichCycleCounts, AAX_CPropertyValue<br/></b>&#8727;<b>iValues, int32_t numValues)=0<br/></b>PLACEHOLDER - NOT CURRENTLY IMPLEMENTED IN HOST<br/></p>
<p><b>Member AAX_IDma::IsTransferComplete ()=0<br/></b>Clarify return value meaning &#8211; ambiguity in documentation<br/></p>
<p><b>Member AAX_IParameter::GetType () const =0<br/></b>Document use cases for control type<br/></p>
<p><b>Member AAX_IParameter::SetTaperDelegate (AAX_ITaperDelegateBase &amp;inTaperDelegate, bool in</b>&#8592;&#8617;<br/><b>PreserveValue)=0<br/></b>Document this parameter<br/></p>
<p><b>Module additionalFeatures_Sidechain<br/></b>Is properties-&gt;AddProperty ( AAX_eProperty_SupportsSideChainInput, true ) even necessary?!?! I believe I<br/>saw a p.i. that does not declare this...<br/></p>
<p><b>Module advancedTopics_parameterUpdates_sequences<br/></b>Update this section with information about default chunk setting, which is a separate step following the procedure<br/>described below.<br/></p>
<p><b>Member DBToGain (double dB)<br/></b>This should be incorporated into parameters' tapers and not called separately<br/></p>
<p><b>Member GainToDB (double aGain)<br/></b>This should be incorporated into parameters' tapers and not called separately<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>8 Todo List<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 3<br/></b></p>
<p><b>Host Compatibility Notes<br/></b></p>
<p><b>Member AAX_CMidiPacket::mIsImmediate<br/></b>This value is not currently set. Use mTimestamp == 0 to detect immediate packets<br/></p>
<p><b>Member AAX_CParameter</b>&lt; <b>T </b>&gt;<b>::AAX_CParameter (AAX_CParamID identifier, const AAX_IString &amp;name,<br/>T defaultValue, const AAX_ITaperDelegate</b>&lt; <b>T </b>&gt; <b>&amp;taperDelegate, const AAX_IDisplayDelegate</b>&lt; <b>T </b>&gt;<br/><b>&amp;displayDelegate, bool automatable=false)<br/></b>As of Pro Tools 10.2, DAE will check for a matching parameter NAME and not an ID when reading in automation<br/>data from a session saved with an AAX plug-ins RTAS/TDM counter part.<br/>As of Pro Tools 11.1, AAE will first try to match ID. If that fails, AAE will fall back to matching by Name.<br/></p>
<p><b>Module AAX_DigiTrace_Guide<br/></b>This feature is available in Pro Tools 12.6 and higher<br/></p>
<p><b>Member AAX_eConstraintLocationMask_DLLChipAffinity<br/></b>This constraint is supported in Pro Tools 10.2 and higher<br/></p>
<p><b>Member AAX_eCurveType_Dynamics<br/></b>Pro Tools requests this curve type for Dynamics plug-ins only<br/></p>
<p><b>Member AAX_eCurveType_EQ<br/></b>Pro Tools requests this curve type for EQ plug-ins only<br/></p>
<p><b>Member AAX_eCurveType_Reduction<br/></b>Pro Tools requests this curve type for Dynamics plug-ins only<br/></p>
<p><b>Member AAX_eDataInPortType_Incremental<br/></b>Supported in Pro Tools 12.5 and higher; when AAX_eDataInPortType_Incremental is not supported the port will<br/>be treated as AAX_eDataInPortType_Unbuffered<br/></p>
<p><b>Member AAX_EHostModeBits<br/></b>Supported in Venue 5.6 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_ASPreviewState<br/></b>Supported in Pro Tools 11 and higher<br/>Not supported by Media Composer<br/></p>
<p><b>Member AAX_eNotificationEvent_ASProcessingState<br/></b>Supported in Pro Tools 11 and higher<br/>Not supported by Media Composer<br/></p>
<p><b>Member AAX_eNotificationEvent_DelayCompensationState<br/></b>Supported in Pro Tools 12.6 and higher<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>10 Host Compatibility Notes<br/></b></p>
<p><b>Member AAX_eNotificationEvent_EnteringOfflineMode<br/></b>Supported in Pro Tools 11 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_ExitingOfflineMode<br/></b>Supported in Pro Tools 11 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_HostLocale<br/></b>Supported in Pro Tools 2024.3 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_HostModeChanged<br/></b>Supported in Venue 5.6 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_LogState<br/></b>Pro Tools currently only sends this notification to the Direct Data object in the plug-in<br/></p>
<p><b>Member AAX_eNotificationEvent_MaxViewSizeChanged<br/></b>Supported in Pro Tools 11.1 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_ParameterNameChanged<br/></b>Supported in Pro Tools 2023.3 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_PresetOpened<br/></b>Supported in Pro Tools 11 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_PriorSettingsInvalid<br/></b>Supported in Venue 5.6 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_SessionBeingOpened<br/></b>Supported in Pro Tools 11 and higher<br/>Not supported by Media Composer<br/></p>
<p><b>Member AAX_eNotificationEvent_SessionPathChanged<br/></b>Supported in Pro Tools 11.1 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_SideChainBeingConnected<br/></b>Supported in Pro Tools 11.1 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_SideChainBeingDisconnected<br/></b>Supported in Pro Tools 11.1 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_SignalLatencyChanged<br/></b>Supported in Pro Tools 11.1 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_TrackNameChanged<br/></b>Supported in Pro Tools 11.2 and higher<br/>Not supported by Media Composer<br/></p>
<p><b>Member AAX_eNotificationEvent_TransportStateChanged<br/></b>Supported in Pro Tools 2021.10 and higher<br/></p>
<p><b>Member AAX_ePlugInStrings_Progress<br/></b>Not currently supported by Pro Tools<br/></p>
<p><b>Member AAX_eProcessingState_BeginPassGroup<br/></b>AudioSuite pass group notifications are supported starting in Pro Tools 12.0<br/></p>
<p><b>Member AAX_eProcessingState_EndPassGroup<br/></b>AudioSuite pass group notifications are supported starting in Pro Tools 12.0<br/></p>
<p><b>Member AAX_eProperty_Constraint_NeverUnload<br/></b>AAX_eProperty_Constraint_NeverUnload is not currently implemented in DAE or AAE<br/></p>
<p><b>Member AAX_eProperty_DestinationTrack<br/></b>This property is not supported on Media Composer<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>11<br/></b></p>
<p><b>Member AAX_eProperty_LatencyContribution<br/></b>Maximum delay compensation limits will vary from host to host. If your plug-in exceeds the delay compensation<br/>sample limit for a given AAX host then you should note this limitation in your user documentation. Example<br/>limits:<br/></p>
<p>&#8226; Pro Tools 9 and higher: 16,383 samples at 44.1/48 kHz, 32,767 samples at 88.2/96 kHz, or 65,534 samples<br/>at 176.4/192 kHz<br/></p>
<p>&#8226; Media Composer 8.1 and higher: 16,383 samples at 44.1/48 kHz, 32,767 samples at 88.2/96 kHz<br/><b>Member AAX_eProperty_OptionalAnalysis<br/></b></p>
<p>In Media Composer, optional analysis will also be performed automatically before each channel is rendered.<br/>See MCDEV-2904<br/></p>
<p><b>Member AAX_eProperty_SideChainStemFormat<br/></b>Currently Pro Tools supports only AAX_eStemFormat_Mono side chain inputs<br/>AAX_eProperty_SideChainStemFormat is not currently implemented in DAE or AAE<br/></p>
<p><b>Member AAX_eProperty_UsesClientGUI<br/></b>Currently supported by Pro Tools only<br/></p>
<p><b>Member AAX_IACFEffectParameters::CompareActiveChunk (const AAX_SPlugInChunk </b>&#8727;<b>iChunkP, AAX_</b>&#8592;&#8617;<br/><b>CBoolean </b>&#8727;<b>oIsEqual) const =0<br/></b>In Pro Tools, this method will only be called if a prior call to GetNumberOfChanges() has indicated that the<br/>plug-in's state has changed. If the plug-in's current settings are different from the settings in aChunkP then the<br/>plug-in's Compare Light will be illuminated in the plug-in header, allowing users to toggle between the plug-in's<br/>custom state and its saved state.<br/></p>
<p><b>Member AAX_IACFEffectParameters::GetCurveData (AAX_CTypeID iCurveType, const float </b>&#8727;<b>iValues,<br/>uint32_t iNumValues, float </b>&#8727;<b>oValues) const =0<br/></b>Versions of S6 software which support the GetCurveDataDisplayRange() method will not display a plug-in's<br/>curve data unless both GetCurveData() and GetCurveDataDisplayRange() are supported by the plug-in.<br/></p>
<p><b>Member AAX_IACFEffectParameters::GetParameterNameOfLength (AAX_CParamID iParameterID,<br/>AAX_IString </b>&#8727;<b>oName, int32_t iNameLength) const =0<br/></b>In most cases, the AAX host will call GetParameterName() or GetParameterNameOfLength() to retrieve param-<br/>eter names for display. However, when Pro Tools is retrieving a plug-in name for display on a control surface the<br/>XML data stored in the plug-in's page tables will be used in preference to values retrieved from these methods.<br/></p>
<p><b>Member AAX_IComponentDescriptor::AddAuxOutputStem (AAX_CFieldIndex inFieldIndex, int32_t in</b>&#8592;&#8617;<br/><b>StemFormat, const char inNameUTF8[])=0<br/></b>There is a hard limit to the number of outputs that Pro Tools supports for a single plug-in instance. This limit is<br/>currently set at 256 channels, which includes all of the plug-in's output channels in addition to the sum total of<br/>all of its aux output stem channels.<br/>Pro Tools supports only mono and stereo auxiliary output stem formats<br/></p>
<p><b>Member AAX_IComponentDescriptor::AddClock (AAX_CFieldIndex inFieldIndex)=0<br/></b>As of Pro Tools 11.1, this field may be used in both Native and DSP plug-ins. The DSP clock data is a 16-bit<br/>cycling counter. This field was only available for Native plug-ins in previous Pro Tools versions.<br/></p>
<p><b>Member AAX_IComponentDescriptor::AddMIDINode (AAX_CFieldIndex inFieldIndex, AAX_EMIDINodeType<br/>inNodeType, const char inNodeName[], uint32_t channelMask)=0<br/></b>Due to current restrictions MIDI data won't be delivered to DSP algorithms, only to AAX Native.<br/></p>
<p><b>Member AAX_IController::GetHostName (AAX_IString </b>&#8727;<b>outHostNameString) const =0<br/></b>Pro Tools versions from Pro Tools 11.0 to Pro Tools 12.3.1 will return a generic version string to this call. This<br/>issue is resolved beginning in Pro Tools 12.4.<br/></p>
<p><b>Member AAX_IMIDINode::PostMIDIPacket (AAX_CMidiPacket </b>&#8727;<b>packet)=0<br/></b>Pro Tools supports the following MIDI events from plug-ins:<br/></p>
<p>&#8226; NoteOn<br/>&#8226; NoteOff<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12 Host Compatibility Notes<br/></b></p>
<p>&#8226; Pitch bend<br/>&#8226; Polyphonic key pressure<br/>&#8226; Bank select (controller #0)<br/>&#8226; Program change (no bank)<br/>&#8226; Channel pressure<br/></p>
<p><b>Member AAX_ITransport::GetBarBeatPosition (int32_t </b>&#8727;<b>Bars, int32_t </b>&#8727;<b>Beats, int64_t </b>&#8727;<b>DisplayTicks, int64</b>&#8592;&#8617;<br/><b>_t SampleLocation) const =0<br/></b>There is a minor performance cost associated with using this API in Pro Tools. It should not be used excessively<br/>without need.<br/></p>
<p><b>Member AAX_ITransport::GetCurrentLoopPosition (bool </b>&#8727;<b>bLooping, int64_t </b>&#8727;<b>LoopStartTick, int64_t </b>&#8727;&#8592;&#8617;<br/><b>LoopEndTick) const =0<br/></b>This does not indicate anything about the status of the &quot;Loop Record&quot; option. Even when the host is configured<br/>to loop playback, looping may not occur if certain conditions are not met (i.e. the length of the selection is too<br/>short)<br/></p>
<p><b>Member AAX_ITransport::GetCurrentTickPosition (int64_t </b>&#8727;<b>TickPosition) const =0<br/></b>The tick resolution here is different than that of the tick displayed in Pro Tools. &quot;Display ticks&quot; (as they are called)<br/>are 1/960 of a quarter note.<br/></p>
<p><b>Member AAX_ITransport::GetCustomTickPosition (int64_t </b>&#8727;<b>oTickPosition, int64_t iSampleLocation) const<br/>=0<br/></b>There is a minor performance cost associated with using this API in Pro Tools. It should not be used excessively<br/>without need.<br/></p>
<p><b>Member AAX_IViewContainer::GetModifiers (uint32_t </b>&#8727;outModifiers)=0<br/>Although this method allows plug-ins to acquire the current state of the Windows key (normally blocked by Pro<br/>Tools), plug-ins should not use key combinations that require this key.<br/></p>
<p><b>Module AAX_Media_Composer_Guide<br/></b>Some early versions of Media Composer 8 do not search the system plug-ins directory recursively. If your plug-<br/>ins are installed into a sub-directory beneath this main directory then they will not be loaded by the affected<br/>versions of Media Composer.<br/></p>
<p><b>Module AAX_Page_Table_Guide<br/></b>Pro Tools versions prior to Pro Tools 11.1 use plug-ins' ProControl and ICON page tables (Dynamics, EQ, Chan-<br/>nel Strip, Custom Fader, etc.) to map plug-in parameters to EUCON-enabled surfaces, so be sure that your<br/>plug-ins also implement these page tables correctly so that users with earlier versions of Pro Tools can have<br/>the best possible experience when using your plug-ins.<br/></p>
<p><b>Module AAX_Pro_Tools_Guide<br/></b>Pro Tools requires PACE Eden digital signatures for AAX plug-ins.<br/>Supported in Pro Tools 2019.XX and higher. Also supported (and enabled by default) in Pro Tools developer<br/>builds beginning with Pro Tools 2019.6.<br/></p>
<p><b>Module AAX_TI_Guide<br/></b>32 and 64-sample quantum is available in Pro Tools 10.2 and higher<br/>Beginning in Pro Tools 11, AAX DSP algorithms also support optional temporary data spaces that can be<br/>described in the Describe module and are shared among all instances on a DSP. This is an alternative to<br/>declaring large data blocks on the stack for better memory management and to prevent stack overflows. Please<br/>refer to AAX_IComponentDescriptor::AddTemporaryData() for usage instructions.<br/></p>
<p><b>Module AdditionalFeatures_CurveDisplays<br/></b>For S6 control surface displays, see PT-226228 and PT-226227 in the Known Issues page for more information<br/>about the requirements listed in this section.<br/></p>
<p><b>Module advancedTopics_relatedTypes<br/></b>Pro Tools versions prior to Pro Tools 12.3 do not allow explicit type conversion between types with different<br/>product ID values. Beginning in Pro Tools 12.3 both the product ID and the plug-in ID may differ between<br/>explicitly related types.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13<br/></b></p>
<p><b>Module AuxInterface_TaskAgent<br/></b>This interface is not yet used in any AAX hosts<br/></p>
<p><b>Module CommonInterface_Algorithm<br/></b>As of Pro Tools 10.2.1 an algorithm's initialization calllback routine will have up to 5 seconds to execute.<br/></p>
<p><b>Module CommonInterface_FormatSpecification<br/></b>&#8727;_ACFGetSDKVersion is required for 64-bit AAX plug-ins only<br/></p>
<p><b>Module ExamplePlugIns<br/></b>The DemoDelay_DynamicLatencyComp example is compatible with Pro Tools 11.1 and higher.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14 Host Compatibility Notes<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 4<br/></b></p>
<p><b>Legacy Porting Notes<br/></b></p>
<p><b>Class AAX_CEffectGUI<br/></b>The default implementations in this class are mostly derived from their equivalent implementations in CProcess<br/>and CEffectProcess. For additional CProcess-derived implementations, see AAX_CEffectParameters.<br/></p>
<p><b>Class AAX_CEffectParameters<br/></b>The default implementations in this class are mostly derived from their equivalent implementations in CProcess<br/>and CEffectProcess. For additional CProcess-derived implementations, see AAX_CEffectGUI.<br/></p>
<p><b>Member AAX_CHostProcessor::AnalyzeAudio (const float </b>&#8727;<b>const inAudioIns[], int32_t inAudioInCount,<br/>int32_t </b>&#8727;<b>ioWindowSize) AAX_OVERRIDE<br/></b>Ported from AudioSuite's AnalyzeAudio(bool isMasterBypassed) method<br/></p>
<p><b>Member AAX_CHostProcessor::InitOutputBounds (int64_t iSrcStart, int64_t iSrcEnd, int64_t </b>&#8727;<b>oDstStart,<br/>int64_t </b>&#8727;<b>oDstEnd) AAX_OVERRIDE<br/></b>DAE no longer makes use of the mStartBound and mEndBounds member variables that existed in the legacy<br/>RTAS/TDM SDK. Use oDstStart and oDstEnd instead (preferably by overriding TranslateOutputBounds().)<br/></p>
<p><b>Member AAX_CHostProcessor::RenderAudio (const float </b>&#8727;<b>const inAudioIns[], int32_t inAudioInCount, float<br/></b>&#8727;<b>const iAudioOuts[], int32_t iAudioOutCount, int32_t </b>&#8727;<b>ioWindowSize) AAX_OVERRIDE<br/></b>This method is a replacement for the AudioSuite ProcessAudio method<br/></p>
<p><b>Class AAX_CMidiPacket<br/></b>Corresponds to DirectMidiPacket in the legacy SDK<br/></p>
<p><b>Class AAX_CMidiStream<br/></b>Corresponds to DirectMidiNode in the legacy SDK<br/></p>
<p><b>Member AAX_eMIDINodeType_Global<br/></b>Corresponds to RTAS Shared Buffer global nodes in the legacy SDK<br/></p>
<p><b>Member AAX_eMIDINodeType_LocalInput<br/></b>Corresponds to RTAS Buffered MIDI input nodes in the legacy SDK<br/></p>
<p><b>Member AAX_eMIDINodeType_LocalOutput<br/></b>Corresponds to RTAS Buffered MIDI output nodes in the legacy SDK<br/></p>
<p><b>Member AAX_eNotificationEvent_ASPreviewState<br/></b>Replacement for SetPreviewState()<br/></p>
<p><b>Member AAX_ePageTable_EQ_Band_Type<br/></b>converted from eDigi_PageTable_EQ_Band_Type in the legacy SDK<br/></p>
<p><b>Member AAX_ePageTable_EQ_InCircuitPolarity<br/></b>converted from eDigi_PageTable_EQ_InCircuitPolarity in the legacy SDK<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>16 Legacy Porting Notes<br/></b></p>
<p><b>Member AAX_ePageTable_UseAlternateControl<br/></b>converted from eDigi_PageTable_UseAlternateControl in the legacy SDK<br/></p>
<p><b>Member AAX_EParameterType<br/></b>Values must match unnamed type enum in FicTDMControl.h<br/></p>
<p><b>Member AAX_eParameterType_Continuous<br/></b>Matches kDAE_ContinuousValues<br/></p>
<p><b>Member AAX_eParameterType_Discrete<br/></b>Matches kDAE_DiscreteValues<br/></p>
<p><b>Member AAX_EParameterValueInfoSelector<br/></b>converted from EControlValueInfo in the legacy SDK<br/></p>
<p><b>Member AAX_ePlugInStrings_AllSelectedRegionsAnalysis<br/></b>Was pluginStrings_AllSelectedRegionsAnalysis in the RTAS/TDM SDK<br/></p>
<p><b>Member AAX_ePlugInStrings_Analysis<br/></b>Was pluginStrings_Analysis in the RTAS/TDM SDK<br/></p>
<p><b>Member AAX_ePlugInStrings_Bypass<br/></b>Was pluginStrings_Bypass in the RTAS/TDM SDK<br/></p>
<p><b>Member AAX_ePlugInStrings_ClipName<br/></b>Was pluginStrings_RegionName in the RTAS/TDM SDK<br/></p>
<p><b>Member AAX_ePlugInStrings_MonoMode<br/></b>Was pluginStrings_MonoMode in the RTAS/TDM SDK<br/></p>
<p><b>Member AAX_ePlugInStrings_MultiInputMode<br/></b>Was pluginStrings_MultiInputMode in the RTAS/TDM SDK<br/></p>
<p><b>Member AAX_ePlugInStrings_Process<br/></b>Was pluginStrings_Process in the RTAS/TDM SDK<br/></p>
<p><b>Member AAX_ePlugInStrings_Progress<br/></b>Was pluginStrings_Progress in the RTAS/TDM SDK<br/></p>
<p><b>Member AAX_ePlugInStrings_RegionByRegionAnalysis<br/></b>Was pluginStrings_RegionByRegionAnalysis in the RTAS/TDM SDK<br/></p>
<p><b>Member AAX_EProperty<br/></b>These property IDs are somewhat analogous to the pluginGestalt system in the legacy SDK, and several<br/>AAX_EProperty values correlate directly with a corresponding legacy plug-in gestalt.<br/>To ensure session interchange compatibility, make sure the 4 character IDs for AAX_eProperty_ManufacturerID,<br/>AAX_eProperty_ProductID, AAX_eProperty_PlugInID_Native, and AAX_eProperty_PlugInID_AudioSuite are<br/>identical to the legacy SDK's counterpart.<br/></p>
<p><b>Member AAX_eProperty_AllowPreviewWithoutAnalysis<br/></b>Was pluginGestalt_AnalyzeOnTheFly<br/></p>
<p><b>Member AAX_eProperty_CanBypass<br/></b>Was pluginGestalt_CanBypass.<br/></p>
<p><b>Member AAX_eProperty_ContinuousOnly<br/></b>Was pluginGestalt_ContinuousOnly<br/></p>
<p><b>Member AAX_eProperty_DestinationTrack<br/></b>Was pluginGestalt_DestinationTrack<br/></p>
<p><b>Member AAX_eProperty_DisablePreview<br/></b>Was pluginGestalt_DisablePreview<br/></p>
<p><b>Member AAX_eProperty_DoesntIncrOutputSample<br/></b>Was pluginGestalt_DoesntIncrOutputSample<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>17<br/></b></p>
<p><b>Member AAX_eProperty_ManufacturerID<br/></b>For legacy plug-in session compatibility, this ID should match the Manufacturer ID used in the corresponding<br/>legacy plug-ins.<br/></p>
<p><b>Member AAX_eProperty_MultiInputModeOnly<br/></b>Was pluginGestalt_MultiInputModeOnly<br/></p>
<p><b>Member AAX_eProperty_NeedsOutputDithered<br/></b>Was pluginGestalt_NeedsOutputDithered<br/></p>
<p><b>Member AAX_eProperty_OptionalAnalysis<br/></b>Was pluginGestalt_OptionalAnalysis<br/></p>
<p><b>Member AAX_eProperty_PlugInID_AudioSuite<br/></b>For legacy plug-in session compatibility, this ID should match the Type ID used in the corresponding legacy<br/>AudioSuite plug-in Types.<br/></p>
<p><b>Member AAX_eProperty_PlugInID_Native<br/></b>For legacy plug-in session compatibility, this ID should match the Type ID used in the corresponding legacy<br/>RTAS plug-in Types.<br/></p>
<p><b>Member AAX_eProperty_PlugInID_TI<br/></b>For legacy plug-in session compatibility, this ID should match the Type ID used in the corresponding legacy<br/>TDM plug-in Types.<br/></p>
<p><b>Member AAX_eProperty_ProductID<br/></b>For legacy plug-in session compatibility, this ID should match the Product ID used in the corresponding legacy<br/>plug-in.<br/></p>
<p><b>Member AAX_eProperty_RequestsAllTrackData<br/></b>Was pluginGestalt_RequestsAllTrackData<br/></p>
<p><b>Member AAX_eProperty_RequiresAnalysis<br/></b>Was pluginGestalt_RequiresAnalysis<br/></p>
<p><b>Member AAX_eProperty_SupportsSaveRestore<br/></b>Was pluginGestalt_SupportsSaveRestore<br/></p>
<p><b>Member AAX_eProperty_UsesRandomAccess<br/></b>Was pluginGestalt_UsesRandomAccess<br/></p>
<p><b>Class AAX_IACFEffectGUI<br/></b>In the legacy plug-in SDK, these methods were found in CProcess and CEffectProcess. For additional CProcess<br/>methods, see AAX_IEffectParameters.<br/></p>
<p><b>Member AAX_IACFEffectGUI::SetControlHighlightInfo (AAX_CParamID iParameterID, AAX_CBoolean iIs</b>&#8592;&#8617;<br/><b>Highlighted, AAX_EHighlightColor iColor)=0<br/></b>This method was re-named from SetControlHighliteInfo(), its name in the legacy plug-in SDK.<br/></p>
<p><b>Member AAX_IACFEffectParameters::GetChunkSize (AAX_CTypeID iChunkID, uint32_t </b>&#8727;<b>oSize) const =0<br/></b>In AAX, the value provided by GetChunkSize() should NOT include the size of the chunk header. The value<br/>should ONLY reflect the size of the chunk's data.<br/></p>
<p><b>Member AAX_IACFEffectParameters::GetParameterOrientation (AAX_CParamID iParameterID, AAX_</b>&#8592;&#8617;<br/><b>EParameterOrientation </b>&#8727;<b>oParameterOrientation) const =0<br/></b>AAX_IEffectParameters::GetParameterOrientation() corresponds to the GetControlOrientation() method in the<br/>legacy RTAS/TDM SDK.<br/></p>
<p><b>Member AAX_IACFEffectParameters::GetParameterStringFromValue (AAX_CParamID iParameterID, double<br/>iValue, AAX_IString </b>&#8727;<b>oValueString, int32_t iMaxLength) const =0<br/></b>This method corresponds to CProcess::MapControlValToString() in the RTAS/TDM SDK<br/></p>
<p><b>Member AAX_IACFEffectParameters::GetParameterValueFromString (AAX_CParamID iParameterID, double<br/></b>&#8727;<b>oValue, const AAX_IString &amp;iValueString) const =0<br/></b>This method corresponds to CProcess::MapControlStringToVal() in the RTAS/TDM SDK<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>18 Legacy Porting Notes<br/></b></p>
<p><b>Class AAX_IACFHostProcessor<br/></b>This interface provides offline processing features analogous to the legacy AudioSuite plug-in architecture<br/></p>
<p><b>Class AAX_ICollection<br/></b>The information in AAX_ICollection is roughly analogous to the information provided by CProcessGroup in the<br/>legacy plug-in library<br/></p>
<p><b>Class AAX_IEffectParameters<br/></b>In the legacy plug-in SDK, these methods were found in CProcess and CEffectProcess. For additional<br/>CProcess methods, see AAX_IEffectGUI.<br/></p>
<p><b>File AAX_SliderConversions.h<br/></b>These utilities may be required in order to maintain settings chunk compatibility with plug-ins that were ported<br/>from the legacy RTAS/TDM format.<br/></p>
<p><b>Class AAX_SPlugInChunkHeader<br/></b>To ensure compatibility with TDM/RTAS plug-ins whose implementation requires fSize to be equal to the size<br/>of the chunk's header plus its data, AAE performs some behind-the-scenes record keeping.<br/></p>
<p>The following actions are only taken for AAX plug-ins, so, e.g., if a chunk is stored by an RTAS or TDM<br/>plug-in that reports data+header size in fSize and this chunk is then loaded by the AAX version of the plug-in,<br/>the header size will be cached as-is from the legacy plug-in and will be subtracted out before the chunk data is<br/>passed to the AAX plug-in. If a chunk is stored by an AAX plug-in and is then loaded by a legacy plug-in, the<br/>legacy plug-in will receive the cached plug-in header with fSize equal to the data+header size.<br/></p>
<p>These are the special actions that AAE takes to ensure backwards-compatibility when handling AAX chunk<br/>data:<br/></p>
<p>&#8226; When AAE retrieves the size of a chunk from an AAX plug-in using GetChunkSize(), it adds the chunk<br/>header size to the amount of memory that it allocates for the chunk<br/></p>
<p>&#8226; When AAE retrieves a chunk from an AAX plug-in using GetChunk(), it adds the chunk header size to<br/>fChunkSize before caching the chunk<br/></p>
<p>&#8226; Before calling SetChunk() or CompareActiveChunk(), AAE subtracts the chunk header size from the<br/>cached chunk's header's fChunkSize member<br/></p>
<p><b>Module AdditionalFeatures_Meters<br/></b>The gain-reduction meter handling for AAX plug-ins is different from that for RTAS/TDM plug-ins. AAX plug-ins<br/>must invert their gain-reduction meter values manually before reporting these values from the audio processing<br/>callback. The AAX host will always thin reported meter data using a &quot;max&quot; operation, and will later invert<br/>gain-reduction meter values before they are available to the plug-in GUI or to control surfaces.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 5<br/></b></p>
<p><b>Deprecated List<br/></b></p>
<p><b>Member AAX::FastRndDbl2Int32 (double iVal)<br/></b></p>
<p><b>Member AAX_CInitPrivateDataProc<br/></b></p>
<p><b>Member AAX_CPacketAllocator<br/></b></p>
<p><b>Member AAX_CTaskAgent::AddTask (std::unique_ptr</b>&lt; <b>AAX_ITask </b>&gt; <b>iTask)<br/></b>Use ReceiveTask() instead<br/></p>
<p><b>Member AAX_EHostMode<br/></b>This enum is deprecated and will be removed in a future release.<br/></p>
<p><b>Member AAX_eHostMode_Config<br/></b>Use AAX_eHostModeBits_None<br/></p>
<p><b>Member AAX_eHostMode_Show<br/></b>Use AAX_eHostModeBits_Live<br/></p>
<p><b>Member AAX_ePlugInStrings_PlugInFileName<br/></b></p>
<p><b>Member AAX_ePlugInStrings_Preview<br/></b></p>
<p><b>Member AAX_ePlugInStrings_RegionName<br/></b></p>
<p><b>Member AAX_eProcessingState_Start<br/></b></p>
<p><b>Member AAX_eProcessingState_Stop<br/></b></p>
<p><b>Member AAX_eProperty_AudioBufferLength<br/></b>Use AAX_eProperty_DSP_AudioBufferLength<br/></p>
<p><b>Member AAX_eProperty_Deprecated_Plugin_List<br/></b>Use AAX_eProperty_Deprecated_Native_Plugin_List and AAX_eProperty_Deprecated_DSP_Plugin_List See<br/>AAX_eProperty_PlugInID_RTAS for an example.<br/></p>
<p><b>Member AAX_eProperty_PlugInID_RTAS<br/></b>Use AAX_eProperty_PlugInID_Native<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>20 Deprecated List<br/></b></p>
<p><b>Member AAX_eProperty_StoreXMLPageTablesByType<br/></b>Use AAX_eProperty_StoreXMLPageTablesByEffect<br/></p>
<p><b>Member AAX_IACFEffectParameters::UpdateParameterNormalizedRelative (AAX_CParamID iParameterID,<br/>double iValue)=0<br/></b>This is not called from the host. It may still be useful for internal calls within the plug-in, though it should only<br/>ever be used to update non-automatable parameters. Automatable parameters should always be updated<br/>through the AAX_IParameter interface, which will ensure proper coordination with other automation clients.<br/></p>
<p><b>Member AAX_IACFHostServices::Assert (const char </b>&#8727;<b>iFile, int32_t iLine, const char </b>&#8727;<b>iNote)=0<br/></b>Legacy version of AAX_IACFHostServices_V3::HandleAssertFailure() implemented by older hosts<br/></p>
<p><b>Module ExamplePlugIns<br/></b>The DemoGain_Delay example is deprecated. See DemoDelay_HostProcessor<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 6<br/></b></p>
<p><b>Not Used by AAX Plug-Ins<br/></b></p>
<p><b>Member AAX_eUpdateSource_Delay<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>22 Not Used by AAX Plug-Ins<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 7<br/></b></p>
<p><b>Module Index<br/></b></p>
<p><b>7.1 Manual<br/></b></p>
<p>These pages provide further information about various aspects of AAX.<br/></p>
<p>AAX SDK Manual . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47<br/>Getting Started with AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50<br/>Core AAX Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58<br/></p>
<p>Description callback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59<br/>Real-time algorithm callback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68<br/>Data model interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75<br/>Data model overrides interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77<br/>GUI interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78<br/>AAX communication protocols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79<br/>AAX Format Specification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81<br/></p>
<p>Additional AAX features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82<br/>Auxiliary Output Stems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83<br/>Background processing callback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84<br/>Direct Memory Access . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86<br/>Direct data access interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87<br/>EQ and Dynamics Curve Displays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89<br/>Hybrid Processing architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94<br/>Plug-in meters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97<br/>MIDI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99<br/>Offline processing interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102<br/>Properties File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102<br/>Sidechain Inputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103<br/>Task agent interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104<br/></p>
<p>AAX Library features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106<br/>Parameter Manager . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106<br/></p>
<p>Taper delegates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109<br/>Display delegates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109<br/></p>
<p>Display delegate decorators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111<br/>Monolithic parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112<br/></p>
<p>Additional Topics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112<br/>Real-time performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112<br/>Parameter automation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114<br/>Parameter updates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116<br/></p>
<p>Parameter update timing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>24 Module Index<br/></b></p>
<p>Token protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123<br/>Basic parameter update sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127<br/>Linked parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131<br/>Linked parameter update sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136<br/></p>
<p>Plug-in type conversion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140<br/>The Avid Component Framework (ACF) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144<br/></p>
<p>ACF Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149<br/>AAX Host Guides . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150<br/></p>
<p>Pro Tools Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150<br/>Media Composer Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171<br/>HDX DSP Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180<br/>Page Table Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225<br/>DigiTrace Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257<br/>DSH Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268<br/>DTT Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274<br/>VENUE Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354<br/></p>
<p>Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279<br/>GUI Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279<br/>Monolithic VIs and Effects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280<br/>Other Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280<br/></p>
<p>Supplemental Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281<br/>Troubleshooting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282<br/>Distributing Your AAX Plug-In . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285<br/>AAX Interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289<br/>Host Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291<br/>Known Issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297<br/>Change Log . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331<br/>Example Plug-Ins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 8<br/></b></p>
<p><b>Namespace Index<br/></b></p>
<p><b>8.1 Namespace List<br/></b></p>
<p>Here is a list of all namespaces with brief descriptions:<br/></p>
<p>AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371<br/>AAX::Exception<br/></p>
<p>AAX exception classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397<br/>AAX::internal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398<br/>AAX_ChunkDataParserDefs<br/></p>
<p>Constants used by ChunkDataParser class . . . . . . . . . . . . . . . . . . . . . . . . . . . 398<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>26 Namespace Index<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 9<br/></b></p>
<p><b>Hierarchical Index<br/></b></p>
<p><b>9.1 Class Hierarchy<br/></b></p>
<p>This inheritance list is sorted roughly, but not completely, alphabetically:<br/></p>
<p>_acfUID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403<br/>AAX_AggregateResult . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 404<br/>AAX_CAutoreleasePool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416<br/>AAX_CChunkDataParser . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 423<br/>AAX_CheckedResult . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 482<br/>AAX_CHostServices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 497<br/>AAX_CMidiPacket . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 507<br/>AAX_CMidiStream . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 508<br/>AAX_CMutex . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516<br/>AAX_Component&lt; aContextType &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 521<br/>AAX_CPacket . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 523<br/>AAX_CPacketDispatcher . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524<br/>AAX_CParameterManager . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 566<br/>AAX_CStringAbbreviations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 641<br/>AAX_CTempoBreakpoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 659<br/>AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt; . . . . . . . . . . . . . . . . . . . . . . . . . 667<br/>AAX_IAutomationDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 799<br/></p>
<p>AAX_VAutomationDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 991<br/>AAX_ICollection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 803<br/></p>
<p>AAX_VCollection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995<br/>AAX_IComponentDescriptor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 808<br/></p>
<p>AAX_VComponentDescriptor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1000<br/>AAX_IContainer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 823<br/></p>
<p>AAX_IPointerQueue&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 925<br/>AAX_CAtomicQueue&lt; TNumberedParamStateList, 256 &gt; . . . . . . . . . . . . . . . . . . . . . 412<br/>AAX_CAtomicQueue&lt; const TParamValPair, 16 &#8727;kSynchronizedParameterQueueSize &gt; . . . . . 412<br/>AAX_CAtomicQueue&lt; T, S &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 412<br/></p>
<p>AAX_IController . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 824<br/>AAX_VController . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1014<br/></p>
<p>AAX_IDataBufferWrapper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 841<br/>AAX_VDataBufferWrapper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1029<br/></p>
<p>AAX_IDescriptionHost . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 843<br/>AAX_VDescriptionHost . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1031<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>28 Hierarchical Index<br/></b></p>
<p>AAX_IDisplayDelegateBase . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 848<br/>AAX_IDisplayDelegate&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 844<br/></p>
<p>AAX_CBinaryDisplayDelegate&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 417<br/>AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt; . . . . . . . . . . . . . . . . . . . . 518<br/>AAX_CStateDisplayDelegate&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 598<br/>AAX_CStringDisplayDelegate&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 648<br/>AAX_IDisplayDelegateDecorator&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 849<br/></p>
<p>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . 430<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . 581<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . 660<br/>AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . 663<br/></p>
<p>AAX_IDma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 853<br/>AAX_IEffectDescriptor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 864<br/></p>
<p>AAX_VEffectDescriptor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1033<br/>AAX_IFeatureInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 874<br/></p>
<p>AAX_VFeatureInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1039<br/>AAX_IHostProcessorDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 877<br/></p>
<p>AAX_VHostProcessorDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1041<br/>AAX_IHostServices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 880<br/></p>
<p>AAX_VHostServices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1043<br/>AAX_IHostTaskAgent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 882<br/></p>
<p>AAX_VHostTaskAgent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1045<br/>AAX_IMIDIMessageInfoDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 884<br/>AAX_IMIDINode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 887<br/>AAX_IPacketHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 888<br/></p>
<p>AAX_CPacketHandler&lt; TWorker &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 527<br/>AAX_IPageTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 890<br/></p>
<p>AAX_VPageTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1047<br/>AAX_IParameter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 900<br/></p>
<p>AAX_CParameter&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 529<br/>AAX_CStatelessParameter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 602<br/></p>
<p>AAX_IParameterValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 921<br/>AAX_CParameterValue&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572<br/></p>
<p>AAX_IPrivateDataAccess . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 928<br/>AAX_VPrivateDataAccess . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1058<br/></p>
<p>AAX_IPropertyMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 929<br/>AAX_VPropertyMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1060<br/></p>
<p>AAX_ISessionDocument . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 934<br/>AAX_VSessionDocument . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1065<br/></p>
<p>AAX_IString . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 937<br/>AAX_CString . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 629<br/></p>
<p>AAX_ITaperDelegateBase . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 942<br/>AAX_ITaperDelegate&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 939<br/></p>
<p>AAX_CBinaryTaperDelegate&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . 499<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . 503<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt; . . . . . . . . . . . . . . . . . . . . 584<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . 588<br/>AAX_CStateTaperDelegate&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 625<br/></p>
<p>AAX_ITask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 944<br/>AAX_VTask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1068<br/></p>
<p>AAX_ITransport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 948<br/>AAX_VTransport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1071<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>9.1 Class Hierarchy 29<br/></b></p>
<p>AAX_IViewContainer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 957<br/>AAX_VViewContainer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1081<br/></p>
<p>AAX_Map . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 964<br/>AAX_Point . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 966<br/>AAX_Rect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 967<br/>AAX_SHybridRenderInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 969<br/>AAX_SInstrumentPrivateData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 970<br/>AAX_SInstrumentRenderInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 971<br/>AAX_SInstrumentSetupInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 974<br/>AAX_SPlugInChunk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 982<br/>AAX_SPlugInChunkHeader . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 984<br/>AAX_SPlugInIdentifierTriad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 987<br/>AAX_StLock_Guard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 988<br/>AAX_TransportStateInfo_V1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 989<br/>AAX::Exception::Any . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1088<br/></p>
<p>AAX::Exception::ResultError . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1096<br/>CACFUnknown<br/></p>
<p>AAX_CTask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 652<br/>AAX_IDataBuffer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 840<br/></p>
<p>AAX_CArrayDataBuffer&lt; D &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409<br/>AAX_CStringDataBuffer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 643<br/>AAX_CStringDataBufferOfType&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 645<br/></p>
<p>AAX_IEffectDirectData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 869<br/>AAX_CEffectDirectData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 434<br/></p>
<p>AAX_IEffectGUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 870<br/>AAX_CEffectGUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 438<br/></p>
<p>AAX_IEffectParameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 872<br/>AAX_CEffectParameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447<br/></p>
<p>AAX_CMonolithicParameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 509<br/>AAX_IHostProcessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 876<br/></p>
<p>AAX_CHostProcessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 486<br/>AAX_ISessionDocumentClient . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 936<br/></p>
<p>AAX_CSessionDocumentClient . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 593<br/>AAX_ITaskAgent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 947<br/></p>
<p>AAX_CTaskAgent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 656<br/>AAX_CChunkDataParser::DataValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1091<br/>IACFPluginDefinition<br/></p>
<p>AAX_IACFCollection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 672<br/>IACFUnknown . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1095<br/></p>
<p>AAX_IACFAutomationDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 669<br/>AAX_IACFComponentDescriptor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 674<br/></p>
<p>AAX_IACFComponentDescriptor_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 683<br/>AAX_IACFComponentDescriptor_V3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 684<br/></p>
<p>AAX_IACFController . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 686<br/>AAX_IACFController_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 694<br/></p>
<p>AAX_IACFController_V3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 696<br/>AAX_IACFDataBuffer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 698<br/></p>
<p>AAX_IDataBuffer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 840<br/>AAX_IACFDescriptionHost . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 699<br/>AAX_IACFEffectDescriptor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 700<br/></p>
<p>AAX_IACFEffectDescriptor_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 703<br/>AAX_IACFEffectDirectData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 704<br/></p>
<p>AAX_IACFEffectDirectData_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 706<br/>AAX_IEffectDirectData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 869<br/></p>
<p>AAX_IACFEffectGUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 707<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>30 Hierarchical Index<br/></b></p>
<p>AAX_IEffectGUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 870<br/>AAX_IACFEffectParameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 713<br/></p>
<p>AAX_IACFEffectParameters_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 735<br/>AAX_IACFEffectParameters_V3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 737<br/></p>
<p>AAX_IACFEffectParameters_V4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 738<br/>AAX_IEffectParameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 872<br/></p>
<p>AAX_IACFFeatureInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 739<br/>AAX_IACFHostProcessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 741<br/></p>
<p>AAX_IACFHostProcessor_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 746<br/>AAX_IHostProcessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 876<br/></p>
<p>AAX_IACFHostProcessorDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 747<br/>AAX_IACFHostProcessorDelegate_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 749<br/></p>
<p>AAX_IACFHostProcessorDelegate_V3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 750<br/>AAX_IACFHostServices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 750<br/></p>
<p>AAX_IACFHostServices_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 752<br/>AAX_IACFHostServices_V3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 753<br/></p>
<p>AAX_IACFPageTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 754<br/>AAX_IACFPageTable_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 758<br/></p>
<p>AAX_IACFPageTableController . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 763<br/>AAX_IACFPageTableController_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 766<br/></p>
<p>AAX_IACFPrivateDataAccess . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 768<br/>AAX_IACFPropertyMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 769<br/></p>
<p>AAX_IACFPropertyMap_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 771<br/>AAX_IACFPropertyMap_V3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 772<br/></p>
<p>AAX_IACFSessionDocument . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 773<br/>AAX_IACFSessionDocumentClient . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 775<br/></p>
<p>AAX_ISessionDocumentClient . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 936<br/>AAX_IACFTask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 777<br/></p>
<p>AAX_CTask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 652<br/>AAX_IACFTaskAgent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 780<br/></p>
<p>AAX_ITaskAgent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 947<br/>AAX_IACFTransport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 781<br/></p>
<p>AAX_IACFTransport_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 786<br/>AAX_IACFTransport_V3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 788<br/></p>
<p>AAX_IACFTransport_V4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 789<br/>AAX_IACFTransport_V5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 790<br/></p>
<p>AAX_IACFTransportControl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 791<br/>AAX_IACFViewContainer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 792<br/></p>
<p>AAX_IACFViewContainer_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 795<br/>AAX_IACFViewContainer_V3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 797<br/></p>
<p>IACFDefinition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1092<br/>SAutoArray&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1098<br/>AAX_ISessionDocument::TempoMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1099<br/></p>
<p>AAX_VSessionDocument::VTempoMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1100<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 10<br/></b></p>
<p><b>Class Index<br/></b></p>
<p><b>10.1 Class List<br/></b></p>
<p>Here are the classes, structs, unions and interfaces with brief descriptions:<br/></p>
<p>_acfUID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403<br/>AAX_AggregateResult . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 404<br/>AAX_CArrayDataBuffer&lt; D &gt;<br/></p>
<p>A convenience class for array data buffers. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;<br/></p>
<p>A convenience class for array data buffers . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409<br/>AAX_CAtomicQueue&lt; T, S &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 412<br/>AAX_CAutoreleasePool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416<br/>AAX_CBinaryDisplayDelegate&lt; T &gt;<br/></p>
<p>A binary display format conforming to AAX_IDisplayDelegate . . . . . . . . . . . . . . . . . . 417<br/>AAX_CBinaryTaperDelegate&lt; T &gt;<br/></p>
<p>A binary taper conforming to AAX_ITaperDelegate . . . . . . . . . . . . . . . . . . . . . . . 420<br/>AAX_CChunkDataParser<br/></p>
<p>Parser utility for plugin chunks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 423<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>A percent decorator conforming to AAX_IDisplayDelegateDecorator . . . . . . . . . . . . . . 430<br/>AAX_CEffectDirectData<br/></p>
<p>Default implementation of the AAX_IEffectDirectData interface . . . . . . . . . . . . . . . . . 434<br/>AAX_CEffectGUI<br/></p>
<p>Default implementation of the AAX_IEffectGUI interface . . . . . . . . . . . . . . . . . . . . . 438<br/>AAX_CEffectParameters<br/></p>
<p>Default implementation of the AAX_IEffectParameters interface . . . . . . . . . . . . . . . . . 447<br/>AAX_CheckedResult . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 482<br/>AAX_CHostProcessor<br/></p>
<p>Concrete implementation of the AAX_IHostProcessor interface for non-real-time processing . . 486<br/>AAX_CHostServices<br/></p>
<p>Method access to a singleton implementation of the AAX_IHostServices interface . . . . . . . 497<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;<br/></p>
<p>A linear taper conforming to AAX_ITaperDelegate . . . . . . . . . . . . . . . . . . . . . . . . 499<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;<br/></p>
<p>A logarithmic taper conforming to AAX_ITaperDelegate . . . . . . . . . . . . . . . . . . . . . 503<br/>AAX_CMidiPacket<br/></p>
<p>Packet structure for MIDI data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 507<br/>AAX_CMidiStream<br/></p>
<p>MIDI stream data structure used by AAX_IMIDINode . . . . . . . . . . . . . . . . . . . . . . 508<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>32 Class Index<br/></b></p>
<p>AAX_CMonolithicParameters<br/>Extension of the AAX_CEffectParameters class for monolithic VIs and effects . . . . . . . . . 509<br/></p>
<p>AAX_CMutex<br/>Mutex with try lock functionality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516<br/></p>
<p>AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;<br/>A numeric display format conforming to AAX_IDisplayDelegate . . . . . . . . . . . . . . . . . 518<br/></p>
<p>AAX_Component&lt; aContextType &gt;<br/>Empty class containing type declarations for the AAX algorithm and associated callbacks . . . 521<br/></p>
<p>AAX_CPacket<br/>Container for packet-related data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 523<br/></p>
<p>AAX_CPacketDispatcher<br/>Helper class for managing AAX packet posting . . . . . . . . . . . . . . . . . . . . . . . . . 524<br/></p>
<p>AAX_CPacketHandler&lt; TWorker &gt;<br/>Callback container used by AAX_CPacketDispatcher . . . . . . . . . . . . . . . . . . . . . . 527<br/></p>
<p>AAX_CParameter&lt; T &gt;<br/>Generic implementation of an AAX_IParameter . . . . . . . . . . . . . . . . . . . . . . . . . 529<br/></p>
<p>AAX_CParameterManager<br/>A container object for plug-in parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . 566<br/></p>
<p>AAX_CParameterValue&lt; T &gt;<br/>Concrete implementation of AAX_IParameterValue . . . . . . . . . . . . . . . . . . . . . . . 572<br/></p>
<p>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;<br/>A percent decorator conforming to AAX_IDisplayDelegateDecorator . . . . . . . . . . . . . . 581<br/></p>
<p>AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;<br/>A piece-wise linear taper conforming to AAX_ITaperDelegate . . . . . . . . . . . . . . . . . . 584<br/></p>
<p>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;<br/>A piecewise-linear taper conforming to AAX_ITaperDelegate . . . . . . . . . . . . . . . . . . 588<br/></p>
<p>AAX_CSessionDocumentClient<br/>Default implementation of the AAX_ISessionDocumentClient interface . . . . . . . . . . . . . 593<br/></p>
<p>AAX_CStateDisplayDelegate&lt; T &gt;<br/>A generic display format conforming to AAX_IDisplayDelegate . . . . . . . . . . . . . . . . . 598<br/></p>
<p>AAX_CStatelessParameter<br/>A stateless parameter implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 602<br/></p>
<p>AAX_CStateTaperDelegate&lt; T &gt;<br/>A linear taper conforming to AAX_ITaperDelegate . . . . . . . . . . . . . . . . . . . . . . . . 625<br/></p>
<p>AAX_CString<br/>A generic AAX string class with similar functionality to std::string . . . . . . . . . . . . . 629<br/></p>
<p>AAX_CStringAbbreviations<br/>Helper class to store a collection of name abbreviations . . . . . . . . . . . . . . . . . . . . . 641<br/></p>
<p>AAX_CStringDataBuffer<br/>A convenience class for string data buffers. . . . . . . . . . . . . . . . . . . . . . . . . . . . 643<br/></p>
<p>AAX_CStringDataBufferOfType&lt; T &gt;<br/>A convenience class for string data buffers . . . . . . . . . . . . . . . . . . . . . . . . . . . . 645<br/></p>
<p>AAX_CStringDisplayDelegate&lt; T &gt;<br/>A string, or list, display format conforming to AAX_IDisplayDelegate . . . . . . . . . . . . . . 648<br/></p>
<p>AAX_CTask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 652<br/>AAX_CTaskAgent<br/></p>
<p>Default implementation of the AAX_ITaskAgent interface . . . . . . . . . . . . . . . . . . . . 656<br/>AAX_CTempoBreakpoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 659<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>A unit type decorator conforming to AAX_IDisplayDelegateDecorator . . . . . . . . . . . . . . 660<br/>AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>A unit prefix decorator conforming to AAX_IDisplayDelegateDecorator . . . . . . . . . . . . . 663<br/>AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt; . . . . . . . . . . . . . . . . . . . . . . . . 667<br/>AAX_IACFAutomationDelegate<br/></p>
<p>Versioned interface allowing an AAX plug-in to interact with the host's automation system . . . 669<br/>AAX_IACFCollection<br/></p>
<p>Versioned interface to represent a plug-in binary's static description . . . . . . . . . . . . . . 672<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>10.1 Class List 33<br/></b></p>
<p>AAX_IACFComponentDescriptor<br/>Versioned description interface for an AAX plug-in algorithm callback . . . . . . . . . . . . . . 674<br/></p>
<p>AAX_IACFComponentDescriptor_V2<br/>Versioned description interface for an AAX plug-in algorithm callback . . . . . . . . . . . . . . 683<br/></p>
<p>AAX_IACFComponentDescriptor_V3<br/>Versioned description interface for an AAX plug-in algorithm callback . . . . . . . . . . . . . . 684<br/></p>
<p>AAX_IACFController<br/>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the<br/>AAXHost and by effect components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 686<br/></p>
<p>AAX_IACFController_V2<br/>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the<br/>AAXHost and by effect components. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 694<br/></p>
<p>AAX_IACFController_V3<br/>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the<br/>AAXHost and by effect components. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 696<br/></p>
<p>AAX_IACFDataBuffer<br/>Versioned interface for reference counted data buffers . . . . . . . . . . . . . . . . . . . . . . 698<br/></p>
<p>AAX_IACFDescriptionHost . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 699<br/>AAX_IACFEffectDescriptor<br/></p>
<p>Versioned interface for an AAX_IEffectDescriptor . . . . . . . . . . . . . . . . . . . . . . . . 700<br/>AAX_IACFEffectDescriptor_V2<br/></p>
<p>Versioned interface for an AAX_IEffectDescriptor . . . . . . . . . . . . . . . . . . . . . . . . 703<br/>AAX_IACFEffectDirectData<br/></p>
<p>Optional interface for direct access to a plug-in's alg memory . . . . . . . . . . . . . . . . . . 704<br/>AAX_IACFEffectDirectData_V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 706<br/>AAX_IACFEffectGUI<br/></p>
<p>The interface for a AAX Plug-in's GUI (graphical user interface) . . . . . . . . . . . . . . . . . 707<br/>AAX_IACFEffectParameters<br/></p>
<p>The interface for an AAX Plug-in's data model . . . . . . . . . . . . . . . . . . . . . . . . . . 713<br/>AAX_IACFEffectParameters_V2<br/></p>
<p>Supplemental interface for an AAX Plug-in's data model . . . . . . . . . . . . . . . . . . . . . 735<br/>AAX_IACFEffectParameters_V3<br/></p>
<p>Supplemental interface for an AAX Plug-in's data model . . . . . . . . . . . . . . . . . . . . . 737<br/>AAX_IACFEffectParameters_V4<br/></p>
<p>Supplemental interface for an AAX Plug-in's data model . . . . . . . . . . . . . . . . . . . . . 738<br/>AAX_IACFFeatureInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 739<br/>AAX_IACFHostProcessor<br/></p>
<p>Versioned interface for an AAX host processing component . . . . . . . . . . . . . . . . . . . 741<br/>AAX_IACFHostProcessor_V2<br/></p>
<p>Supplemental interface for an AAX host processing component . . . . . . . . . . . . . . . . . 746<br/>AAX_IACFHostProcessorDelegate<br/></p>
<p>Versioned interface for host methods specific to offline processing . . . . . . . . . . . . . . . 747<br/>AAX_IACFHostProcessorDelegate_V2<br/></p>
<p>Versioned interface for host methods specific to offline processing . . . . . . . . . . . . . . . 749<br/>AAX_IACFHostProcessorDelegate_V3<br/></p>
<p>Versioned interface for host methods specific to offline processing . . . . . . . . . . . . . . . 750<br/>AAX_IACFHostServices<br/></p>
<p>Versioned interface to diagnostic and debugging services provided by the AAX host . . . . . . 750<br/>AAX_IACFHostServices_V2<br/></p>
<p>V2 of versioned interface to diagnostic and debugging services provided by the AAX host . . . 752<br/>AAX_IACFHostServices_V3<br/></p>
<p>V3 of versioned interface to diagnostic and debugging services provided by the AAX host . . . 753<br/>AAX_IACFPageTable<br/></p>
<p>Versioned interface to the host's representation of a plug-in instance's page table . . . . . . . 754<br/>AAX_IACFPageTable_V2<br/></p>
<p>Versioned interface to the host's representation of a plug-in instance's page table . . . . . . . 758<br/>AAX_IACFPageTableController<br/></p>
<p>Interface for host operations related to the page tables for this plug-in . . . . . . . . . . . . . . 763<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>34 Class Index<br/></b></p>
<p>AAX_IACFPageTableController_V2<br/>Interface for host operations related to the page tables for this plug-in. . . . . . . . . . . . . . 766<br/></p>
<p>AAX_IACFPrivateDataAccess<br/>Interface for the AAX host's data access functionality . . . . . . . . . . . . . . . . . . . . . . 768<br/></p>
<p>AAX_IACFPropertyMap<br/>Versioned interface for an AAX_IPropertyMap . . . . . . . . . . . . . . . . . . . . . . . . . . 769<br/></p>
<p>AAX_IACFPropertyMap_V2<br/>Versioned interface for an AAX_IPropertyMap . . . . . . . . . . . . . . . . . . . . . . . . . . 771<br/></p>
<p>AAX_IACFPropertyMap_V3<br/>Versioned interface for an AAX_IPropertyMap . . . . . . . . . . . . . . . . . . . . . . . . . . 772<br/></p>
<p>AAX_IACFSessionDocument<br/>Interface representing information in a host session document . . . . . . . . . . . . . . . . . 773<br/></p>
<p>AAX_IACFSessionDocumentClient<br/>Interface representing a client of the session document interface . . . . . . . . . . . . . . . . 775<br/></p>
<p>AAX_IACFTask<br/>Versioned interface for an asynchronous task . . . . . . . . . . . . . . . . . . . . . . . . . . 777<br/></p>
<p>AAX_IACFTaskAgent<br/>Versioned interface for a component that accepts task requests . . . . . . . . . . . . . . . . . 780<br/></p>
<p>AAX_IACFTransport<br/>Versioned interface to get information about the host's transport state . . . . . . . . . . . . . 781<br/></p>
<p>AAX_IACFTransport_V2<br/>Versioned interface to get information about the host's transport state . . . . . . . . . . . . . 786<br/></p>
<p>AAX_IACFTransport_V3<br/>Versioned interface to get information about the host's transport state . . . . . . . . . . . . . 788<br/></p>
<p>AAX_IACFTransport_V4<br/>Versioned interface to get information about the host's transport state . . . . . . . . . . . . . 789<br/></p>
<p>AAX_IACFTransport_V5<br/>Versioned interface to get information about the host's transport state . . . . . . . . . . . . . 790<br/></p>
<p>AAX_IACFTransportControl<br/>Versioned interface to control the host's transport state . . . . . . . . . . . . . . . . . . . . . 791<br/></p>
<p>AAX_IACFViewContainer<br/>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the<br/>host app and by effect components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 792<br/></p>
<p>AAX_IACFViewContainer_V2<br/>Supplemental interface for the AAX host's view of a single instance of an effect. Used by both<br/>clients of the host app and by effect components . . . . . . . . . . . . . . . . . . . . . . . . 795<br/></p>
<p>AAX_IACFViewContainer_V3<br/>Additional methods to track mouse as it moves over controls . . . . . . . . . . . . . . . . . . 797<br/></p>
<p>AAX_IAutomationDelegate<br/>Interface allowing an AAX plug-in to interact with the host's event system . . . . . . . . . . . . 799<br/></p>
<p>AAX_ICollection<br/>Interface to represent a plug-in binary's static description . . . . . . . . . . . . . . . . . . . . 803<br/></p>
<p>AAX_IComponentDescriptor<br/>Description interface for an AAX plug-in component . . . . . . . . . . . . . . . . . . . . . . . 808<br/></p>
<p>AAX_IContainer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 823<br/>AAX_IController<br/></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the<br/>AAX host and by effect components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 824<br/></p>
<p>AAX_IDataBuffer<br/>Interface for reference counted data buffers . . . . . . . . . . . . . . . . . . . . . . . . . . . 840<br/></p>
<p>AAX_IDataBufferWrapper<br/>Wrapper for an AAX_IDataBuffer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 841<br/></p>
<p>AAX_IDescriptionHost . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 843<br/>AAX_IDisplayDelegate&lt; T &gt;<br/></p>
<p>Classes for parameter value string conversion. . . . . . . . . . . . . . . . . . . . . . . . . . 844<br/>AAX_IDisplayDelegateBase<br/></p>
<p>Defines the display behavior for a parameter . . . . . . . . . . . . . . . . . . . . . . . . . . . 848<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>10.1 Class List 35<br/></b></p>
<p>AAX_IDisplayDelegateDecorator&lt; T &gt;<br/>The base class for all concrete display delegate decorators . . . . . . . . . . . . . . . . . . . 849<br/></p>
<p>AAX_IDma<br/>Cross-platform interface for access to the host's direct memory access (DMA) facilities . . . . 853<br/></p>
<p>AAX_IEffectDescriptor<br/>Description interface for an effect's (plug-in type's) components . . . . . . . . . . . . . . . . . 864<br/></p>
<p>AAX_IEffectDirectData<br/>The interface for a AAX Plug-in's direct data interface . . . . . . . . . . . . . . . . . . . . . . 869<br/></p>
<p>AAX_IEffectGUI<br/>The interface for a AAX Plug-in's user interface . . . . . . . . . . . . . . . . . . . . . . . . . 870<br/></p>
<p>AAX_IEffectParameters<br/>The interface for an AAX Plug-in's data model . . . . . . . . . . . . . . . . . . . . . . . . . . 872<br/></p>
<p>AAX_IFeatureInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 874<br/>AAX_IHostProcessor<br/></p>
<p>Base class for the host processor interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . 876<br/>AAX_IHostProcessorDelegate<br/></p>
<p>Versioned interface for host methods specific to offline processing . . . . . . . . . . . . . . . 877<br/>AAX_IHostServices<br/></p>
<p>Interface to diagnostic and debugging services provided by the AAX host . . . . . . . . . . . . 880<br/>AAX_IHostTaskAgent<br/></p>
<p>Interface to access an AAX_IACFTaskAgent object implemented by the host . . . . . . . . . . 882<br/>AAX_IMIDIMessageInfoDelegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 884<br/>AAX_IMIDINode<br/></p>
<p>Interface for accessing information in a MIDI node . . . . . . . . . . . . . . . . . . . . . . . . 887<br/>AAX_IPacketHandler<br/></p>
<p>Callback container used by AAX_CPacketDispatcher . . . . . . . . . . . . . . . . . . . . . . 888<br/>AAX_IPageTable<br/></p>
<p>Interface to the host's representation of a plug-in instance's page table . . . . . . . . . . . . . 890<br/>AAX_IParameter<br/></p>
<p>The base interface for all normalizable plug-in parameters . . . . . . . . . . . . . . . . . . . . 900<br/>AAX_IParameterValue<br/></p>
<p>An abstract interface representing a parameter value of arbitrary type . . . . . . . . . . . . . 921<br/>AAX_IPointerQueue&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 925<br/>AAX_IPrivateDataAccess<br/></p>
<p>Interface to data access provided by host to plug-in . . . . . . . . . . . . . . . . . . . . . . . 928<br/>AAX_IPropertyMap<br/></p>
<p>Generic plug-in description property map . . . . . . . . . . . . . . . . . . . . . . . . . . . . 929<br/>AAX_ISessionDocument<br/></p>
<p>Interface representing information in a host session document . . . . . . . . . . . . . . . . . 934<br/>AAX_ISessionDocumentClient<br/></p>
<p>Interface representing a client of the session document interface . . . . . . . . . . . . . . . . 936<br/>AAX_IString<br/></p>
<p>A simple string container that can be passed across a binary boundary. This class, for simplicity,<br/>is not versioned and thus can never change . . . . . . . . . . . . . . . . . . . . . . . . . . . 937<br/></p>
<p>AAX_ITaperDelegate&lt; T &gt;<br/>Classes for conversion to and from normalized parameter values. . . . . . . . . . . . . . . . 939<br/></p>
<p>AAX_ITaperDelegateBase<br/>Defines the taper conversion behavior for a parameter . . . . . . . . . . . . . . . . . . . . . 942<br/></p>
<p>AAX_ITask<br/>Interface representing a request to perform a task . . . . . . . . . . . . . . . . . . . . . . . . 944<br/></p>
<p>AAX_ITaskAgent<br/>Interface for a component that accepts task requests . . . . . . . . . . . . . . . . . . . . . . 947<br/></p>
<p>AAX_ITransport<br/>Interface to information about the host's transport state . . . . . . . . . . . . . . . . . . . . . 948<br/></p>
<p>AAX_IViewContainer<br/>Interface for the AAX host's view of a single instance of an effect. Used both by clients of the<br/>AAX host and by effect components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 957<br/></p>
<p>AAX_Map . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 964<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>36 Class Index<br/></b></p>
<p>AAX_Point<br/>Data structure representing a two-dimensional coordinate point . . . . . . . . . . . . . . . . . 966<br/></p>
<p>AAX_Rect<br/>Data structure representing a rectangle in a two-dimensional coordinate plane . . . . . . . . . 967<br/></p>
<p>AAX_SHybridRenderInfo<br/>Hybrid render processing context . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 969<br/></p>
<p>AAX_SInstrumentPrivateData<br/>Utility struct for AAX_CMonolithicParameters . . . . . . . . . . . . . . . . . . . . . . . . . . 970<br/></p>
<p>AAX_SInstrumentRenderInfo<br/>Information used to parameterize AAX_CMonolithicParameters::RenderAudio() . . . . . . . . 971<br/></p>
<p>AAX_SInstrumentSetupInfo<br/>Information used to describe the instrument . . . . . . . . . . . . . . . . . . . . . . . . . . . 974<br/></p>
<p>AAX_SPlugInChunk<br/>Plug-in chunk header + data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 982<br/></p>
<p>AAX_SPlugInChunkHeader<br/>Plug-in chunk header . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 984<br/></p>
<p>AAX_SPlugInIdentifierTriad<br/>Plug-in Identifier Triad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 987<br/></p>
<p>AAX_StLock_Guard<br/>Helper class for working with mutex . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 988<br/></p>
<p>AAX_TransportStateInfo_V1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 989<br/>AAX_VAutomationDelegate<br/></p>
<p>Version-managed concrete automation delegate class . . . . . . . . . . . . . . . . . . . . . . 991<br/>AAX_VCollection<br/></p>
<p>Version-managed concrete AAX_ICollection class . . . . . . . . . . . . . . . . . . . . . . . . 995<br/>AAX_VComponentDescriptor<br/></p>
<p>Version-managed concrete AAX_IComponentDescriptor class . . . . . . . . . . . . . . . . . 1000<br/>AAX_VController<br/></p>
<p>Version-managed concrete Controller class . . . . . . . . . . . . . . . . . . . . . . . . . . . 1014<br/>AAX_VDataBufferWrapper<br/></p>
<p>Wrapper for an AAX_IDataBuffer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1029<br/>AAX_VDescriptionHost . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1031<br/>AAX_VEffectDescriptor<br/></p>
<p>Version-managed concrete AAX_IEffectDescriptor class . . . . . . . . . . . . . . . . . . . . 1033<br/>AAX_VFeatureInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1039<br/>AAX_VHostProcessorDelegate<br/></p>
<p>Version-managed concrete Host Processor delegate class . . . . . . . . . . . . . . . . . . . 1041<br/>AAX_VHostServices<br/></p>
<p>Version-managed concrete AAX_IHostServices class . . . . . . . . . . . . . . . . . . . . . . 1043<br/>AAX_VHostTaskAgent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1045<br/>AAX_VPageTable<br/></p>
<p>Version-managed concrete AAX_IPageTable class . . . . . . . . . . . . . . . . . . . . . . . 1047<br/>AAX_VPrivateDataAccess<br/></p>
<p>Version-managed concrete AAX_IPrivateDataAccess class . . . . . . . . . . . . . . . . . . . 1058<br/>AAX_VPropertyMap<br/></p>
<p>Version-managed concrete AAX_IPropertyMap class . . . . . . . . . . . . . . . . . . . . . . 1060<br/>AAX_VSessionDocument . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1065<br/>AAX_VTask<br/></p>
<p>Version-managed concrete AAX_ITask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1068<br/>AAX_VTransport<br/></p>
<p>Version-managed concrete AAX_ITransport class . . . . . . . . . . . . . . . . . . . . . . . . 1071<br/>AAX_VViewContainer<br/></p>
<p>Version-managed concrete AAX_IViewContainer class . . . . . . . . . . . . . . . . . . . . . 1081<br/>AAX::Exception::Any . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1088<br/>AAX_CChunkDataParser::DataValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1091<br/>IACFDefinition<br/></p>
<p>Publicly inherits from IACFUnknown.This abstract interface is used to indentify all of the plug-in<br/>components in the host . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1092<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>10.1 Class List 37<br/></b></p>
<p>IACFUnknown<br/>COM compatible IUnknown C++ interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1095<br/></p>
<p>AAX::Exception::ResultError . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1096<br/>SAutoArray&lt; T &gt; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1098<br/>AAX_ISessionDocument::TempoMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1099<br/>AAX_VSessionDocument::VTempoMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1100<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>38 Class Index<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 11<br/></b></p>
<p><b>File Index<br/></b></p>
<p><b>11.1 File List<br/></b></p>
<p>Here is a list of all files with brief descriptions:<br/></p>
<p>AAX.h<br/>Various utility definitions for AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1103<br/></p>
<p>AAX_ACFInterface.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1117<br/>AAX_AdditionalFeatures_Algorithm.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>AAX_AdditionalFeatures_AOSandSidechain.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>AAX_AdditionalFeatures_CurveDisplays.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>AAX_AdditionalFeatures_Hybrid.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>AAX_AdditionalFeatures_Meters.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>AAX_AdditionalFeatures_MIDI.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>AAX_AdditionalFeatures_PropertiesFile.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>AAX_Alignment.h<br/></p>
<p>Alignment malloc and free methods for optimization . . . . . . . . . . . . . . . . . . . . . . . 1118<br/>AAX_Assert.h<br/></p>
<p>Declarations for cross-platform AAX_ASSERT, AAX_TRACE and related facilities . . . . . . . 1119<br/>AAX_Atomic.h<br/></p>
<p>Atomic operation utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1125<br/>AAX_AuxInterface_DirectData.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1127<br/>AAX_AuxInterface_HostProcessor.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1127<br/>AAX_AuxInterface_TaskAgent.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1127<br/>AAX_BugList.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1127<br/>AAX_Callbacks.h<br/></p>
<p>AAX callback prototypes and ProcPtr definitions . . . . . . . . . . . . . . . . . . . . . . . . . 1127<br/>AAX_CArrayDataBuffer.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1131<br/>AAX_CAtomicQueue.h<br/></p>
<p>Atomic, non-blocking queue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1131<br/>AAX_CAutoreleasePool.h<br/></p>
<p>Autorelease pool helper utility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1132<br/>AAX_CBinaryDisplayDelegate.h<br/></p>
<p>A binary display delegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1132<br/>AAX_CBinaryTaperDelegate.h<br/></p>
<p>A binary taper delegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1133<br/>AAX_CChunkDataParser.h<br/></p>
<p>Parser utility for plugin chunks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1133<br/>AAX_CDecibelDisplayDelegateDecorator.h<br/></p>
<p>A decibel display delegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1134<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>40 File Index<br/></b></p>
<p>AAX_CEffectDirectData.h<br/>A default implementation of the AAX_IEffectDirectData interface . . . . . . . . . . . . . . . . 1135<br/></p>
<p>AAX_CEffectGUI.h<br/>A default implementation of the AAX_IEffectGUI interface . . . . . . . . . . . . . . . . . . . . 1135<br/></p>
<p>AAX_CEffectParameters.h<br/>A default implementation of the AAX_IeffectParameters interface . . . . . . . . . . . . . . . . 1136<br/></p>
<p>AAX_CHostProcessor.h<br/>Concrete implementation of the AAX_IHostProcessor interface for non-real-time processing . . 1137<br/></p>
<p>AAX_CHostServices.h<br/>Concrete implementation of the AAX_IHostServices interface . . . . . . . . . . . . . . . . . . 1138<br/></p>
<p>AAX_CLinearTaperDelegate.h<br/>A linear taper delegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1138<br/></p>
<p>AAX_CLogTaperDelegate.h<br/>A log taper delegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1138<br/></p>
<p>AAX_CMonolithicParameters.cpp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1139<br/>AAX_CMonolithicParameters.h<br/></p>
<p>A convenience class extending AAX_CEffectParameters for monolithic instruments . . . . . . 1139<br/>AAX_CMutex.h<br/></p>
<p>Mutex . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1140<br/>AAX_CNumberDisplayDelegate.h<br/></p>
<p>A number display delegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1140<br/>AAX_CommonConversions.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1141<br/>AAX_CommonInterface_Algorithm.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/>AAX_CommonInterface_Communication.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/>AAX_CommonInterface_DataModel.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/>AAX_CommonInterface_Describe.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/>AAX_CommonInterface_FormatSpecification.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/>AAX_CommonInterface_GUI.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/>AAX_Constants.h<br/></p>
<p>Signal processing constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146<br/>AAX_CPacketDispatcher.h<br/></p>
<p>Helper classes related to posting AAX packets and handling parameter update events . . . . . 1148<br/>AAX_CParameter.h<br/></p>
<p>Generic implementation of an AAX_IParameter . . . . . . . . . . . . . . . . . . . . . . . . . 1148<br/>AAX_CParameterManager.h<br/></p>
<p>A container object for plug-in parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1149<br/>AAX_CPercentDisplayDelegateDecorator.h<br/></p>
<p>A percent display delegate decorator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1149<br/>AAX_CPieceWiseLinearTaperDelegate.h<br/></p>
<p>A piece-wise linear taper delegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1150<br/>AAX_CRangeTaperDelegate.h<br/></p>
<p>A range taper delegate decorator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1150<br/>AAX_CSessionDocumentClient.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1151<br/>AAX_CStateDisplayDelegate.h<br/></p>
<p>A state display delegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1151<br/>AAX_CStateTaperDelegate.h<br/></p>
<p>A state taper delegate (similar to a linear taper delegate.) . . . . . . . . . . . . . . . . . . . . 1151<br/>AAX_CString.h<br/></p>
<p>A generic AAX string class with similar functionality to std::string . . . . . . . . . . . . . . . . 1152<br/>AAX_CStringDataBuffer.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1153<br/>AAX_CStringDisplayDelegate.h<br/></p>
<p>A string display delegate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1154<br/>AAX_CTask.h<br/></p>
<p>A default implementation of the AAX_IACFTask interface . . . . . . . . . . . . . . . . . . . . 1154<br/>AAX_CTaskAgent.h<br/></p>
<p>A default implementation of the AAX_ITaskAgent interface . . . . . . . . . . . . . . . . . . . 1155<br/>AAX_CUnitDisplayDelegateDecorator.h<br/></p>
<p>A unit display delgate decorator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1155<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>11.1 File List 41<br/></b></p>
<p>AAX_CUnitPrefixDisplayDelegateDecorator.h<br/>A unit prefix display delegate decorator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1156<br/></p>
<p>AAX_Denormal.h<br/>Signal processing utilities for denormal/subnormal floating point numbers . . . . . . . . . . . 1156<br/></p>
<p>AAX_DigiTrace_Guide.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1157<br/>AAX_DistributingYourPlugIn.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1157<br/>AAX_DocsDirectory.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1157<br/>AAX_EndianSwap.h<br/></p>
<p>Utility functions for byte-swapping. Used by AAX_CChunkDataParser . . . . . . . . . . . . . 1157<br/>AAX_Enums.h<br/></p>
<p>Utility functions for byte-swapping. Used by AAX_CChunkDataParser . . . . . . . . . . . . . 1161<br/>AAX_EnvironmentUtilities.h<br/></p>
<p>Useful environment definitions for AAX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1208<br/>AAX_Errors.h<br/></p>
<p>Definitions of error codes used by AAX plug-ins . . . . . . . . . . . . . . . . . . . . . . . . . 1209<br/>AAX_Exception.h<br/></p>
<p>AAX SDK exception classes and utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1212<br/>AAX_Exports.cpp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1215<br/>AAX_FastInterpolatedTableLookup.h<br/></p>
<p>A set of functions that provide lookup table functionality. Not necessarily optimized for TI, but<br/>used internally . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1218<br/></p>
<p>AAX_FastInterpolatedTableLookup.hpp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1218<br/>AAX_FastPow.h<br/></p>
<p>Set of functions to optimize pow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1219<br/>AAX_Getting_Started_Guide.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1219<br/>AAX_GUITypes.h<br/></p>
<p>Constants and other definitions used by AAX plug-in GUIs . . . . . . . . . . . . . . . . . . . 1219<br/>AAX_HostSupport.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1223<br/>AAX_IACFAutomationDelegate.h<br/></p>
<p>Versioned interface allowing an AAX plug-in to interact with the host's automation system . . . 1223<br/>AAX_IACFCollection.h<br/></p>
<p>Versioned interface to represent a plug-in binary's static description . . . . . . . . . . . . . . 1224<br/>AAX_IACFComponentDescriptor.h<br/></p>
<p>Versioned description interface for an AAX plug-in algorithm callback . . . . . . . . . . . . . . 1224<br/>AAX_IACFController.h<br/></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the<br/>AAXHost and by effect components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1224<br/></p>
<p>AAX_IACFDataBuffer.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1225<br/>AAX_IACFDescriptionHost.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1225<br/>AAX_IACFEffectDescriptor.h<br/></p>
<p>Versioned interface for an AAX_IEffectDescriptor . . . . . . . . . . . . . . . . . . . . . . . . 1226<br/>AAX_IACFEffectDirectData.h<br/></p>
<p>The direct data access interface that gets exposed to the host application . . . . . . . . . . . 1226<br/>AAX_IACFEffectGUI.h<br/></p>
<p>The GUI interface that gets exposed to the host application . . . . . . . . . . . . . . . . . . . 1226<br/>AAX_IACFEffectParameters.h<br/></p>
<p>The data model interface that is exposed to the host application . . . . . . . . . . . . . . . . 1227<br/>AAX_IACFFeatureInfo.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1227<br/>AAX_IACFHostProcessor.h<br/></p>
<p>The host processor interface that is exposed to the host application . . . . . . . . . . . . . . . 1228<br/>AAX_IACFHostProcessorDelegate.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1228<br/>AAX_IACFHostServices.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1228<br/>AAX_IACFPageTable.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1229<br/>AAX_IACFPageTableController.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1229<br/>AAX_IACFPrivateDataAccess.h<br/></p>
<p>Interface for the AAX host's data access functionality . . . . . . . . . . . . . . . . . . . . . . 1229<br/>AAX_IACFPropertyMap.h<br/></p>
<p>Versioned interface for an AAX_IPropertyMap . . . . . . . . . . . . . . . . . . . . . . . . . . 1230<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>42 File Index<br/></b></p>
<p>AAX_IACFSessionDocument.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1230<br/>AAX_IACFSessionDocumentClient.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1231<br/>AAX_IACFTask.h<br/></p>
<p>Defines the interface representing an asynchronous task . . . . . . . . . . . . . . . . . . . . 1231<br/>AAX_IACFTaskAgent.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1232<br/>AAX_IACFTransport.h<br/></p>
<p>Interface for accessing the host's transport state . . . . . . . . . . . . . . . . . . . . . . . . . 1232<br/>AAX_IACFTransportControl.h<br/></p>
<p>Interface for control over the host's transport state . . . . . . . . . . . . . . . . . . . . . . . . 1233<br/>AAX_IACFViewContainer.h<br/></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the<br/>AAXHost and by effect components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1233<br/></p>
<p>AAX_IAutomationDelegate.h<br/>Interface allowing an AAX plug-in to interact with the host's automation system . . . . . . . . . 1234<br/></p>
<p>AAX_ICollection.h<br/>Interface to represent a plug-in binary's static description . . . . . . . . . . . . . . . . . . . . 1234<br/></p>
<p>AAX_IComponentDescriptor.h<br/>Description interface for an AAX plug-in algorithm . . . . . . . . . . . . . . . . . . . . . . . . 1234<br/></p>
<p>AAX_IContainer.h<br/>Abstract container interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1235<br/></p>
<p>AAX_IController.h<br/>Interface for the AAX host's view of a single instance of an effect . . . . . . . . . . . . . . . . 1235<br/></p>
<p>AAX_IDataBuffer.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1235<br/>AAX_IDataBufferWrapper.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1236<br/>AAX_IDescriptionHost.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1236<br/>AAX_IDisplayDelegate.h<br/></p>
<p>Defines the display behavior for a parameter . . . . . . . . . . . . . . . . . . . . . . . . . . . 1237<br/>AAX_IDisplayDelegateDecorator.h<br/></p>
<p>The base class for all concrete display delegate decorators . . . . . . . . . . . . . . . . . . . 1237<br/>AAX_IDma.h<br/></p>
<p>Cross-platform interface for access to the host's direct memory access (DMA) facilities . . . . 1237<br/>AAX_IEffectDescriptor.h<br/></p>
<p>Description interface for an effect's (plug-in type's) components . . . . . . . . . . . . . . . . . 1238<br/>AAX_IEffectDirectData.h<br/></p>
<p>Optional interface for direct access to alg memory . . . . . . . . . . . . . . . . . . . . . . . . 1238<br/>AAX_IEffectGUI.h<br/></p>
<p>The interface for a AAX Plug-in's user interface . . . . . . . . . . . . . . . . . . . . . . . . . 1239<br/>AAX_IEffectParameters.h<br/></p>
<p>The interface for an AAX Plug-in's data model . . . . . . . . . . . . . . . . . . . . . . . . . . 1239<br/>AAX_IFeatureInfo.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1240<br/>AAX_IHostProcessor.h<br/></p>
<p>Base class for the host processor interface which is extended by plugin code . . . . . . . . . . 1240<br/>AAX_IHostProcessorDelegate.h<br/></p>
<p>Interface allowing plug-in's HostProcessor to interact with the host's side . . . . . . . . . . . . 1240<br/>AAX_IHostServices.h<br/></p>
<p>Various host services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1240<br/>AAX_IHostTaskAgent.h<br/></p>
<p>Interface to access an AAX_IACFTaskAgent object implemented by the host . . . . . . . . . . 1241<br/>AAX_IMIDINode.h<br/></p>
<p>Declaration of the base MIDI Node interface . . . . . . . . . . . . . . . . . . . . . . . . . . . 1241<br/>AAX_Init.h<br/></p>
<p>AAX library implementations of required plug-in initialization, registration, and tear-down meth-<br/>ods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1242<br/></p>
<p>AAX_InstrumentParameters.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1245<br/>AAX_InterfaceList.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1245<br/>AAX_IPageTable.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1245<br/>AAX_IParameter.h<br/></p>
<p>The base interface for all normalizable plug-in parameters . . . . . . . . . . . . . . . . . . . . 1245<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>11.1 File List 43<br/></b></p>
<p>AAX_IPointerQueue.h<br/>Abstract interface for a basic FIFO queue of pointers-to-objects . . . . . . . . . . . . . . . . . 1245<br/></p>
<p>AAX_IPrivateDataAccess.h<br/>Interface to data access provided by host to plug-in . . . . . . . . . . . . . . . . . . . . . . . 1246<br/></p>
<p>AAX_IPropertyMap.h<br/>Generic plug-in description property map . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1246<br/></p>
<p>AAX_ISessionDocument.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1246<br/>AAX_ISessionDocumentClient.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1247<br/>AAX_IString.h<br/></p>
<p>An AAX string interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1248<br/>AAX_ITaperDelegate.h<br/></p>
<p>Defines the taper conversion behavior for a parameter . . . . . . . . . . . . . . . . . . . . . 1248<br/>AAX_ITask.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1248<br/>AAX_ITaskAgent.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1249<br/>AAX_ITransport.h<br/></p>
<p>The interface for query ProTools transport information . . . . . . . . . . . . . . . . . . . . . . 1249<br/>AAX_IViewContainer.h<br/></p>
<p>Interface for the AAX host's view of a single instance of an effect . . . . . . . . . . . . . . . . 1249<br/>AAX_LinkedParameters.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1250<br/>AAX_Map.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1250<br/>AAX_Media_Composer_Guide.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1251<br/>AAX_MIDILogging.cpp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1251<br/>AAX_MIDILogging.h<br/></p>
<p>Utilities for logging MIDI data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1251<br/>AAX_MIDIUtilities.h<br/></p>
<p>Utilities for managing MIDI data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1251<br/>AAX_MiscUtils.h<br/></p>
<p>Miscellaneous signal processing utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1253<br/>AAX_OtherExtensions.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>AAX_Page_Table_Guide.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>AAX_PageTableUtilities.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>AAX_ParameterAutomation.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>AAX_ParameterManager.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>AAX_ParameterUpdateProtocol.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>AAX_ParameterUpdateTiming.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>AAX_PlatformOptimizationConstants.h<br/></p>
<p>Constants descriptor.. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256<br/>AAX_PlugInBundleLocation.h<br/></p>
<p>Utilities for interacting with the host OS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1257<br/>AAX_PopStructAlignment.h<br/></p>
<p>Resets (pops) the struct alignment to its previous value . . . . . . . . . . . . . . . . . . . . . 1257<br/>AAX_PostStructAlignmentHelper.h<br/></p>
<p>Helper file for data alignment macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1258<br/>AAX_PreStructAlignmentHelper.h<br/></p>
<p>Helper file for data alignment macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1258<br/>AAX_Pro_Tools_Guide.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1258<br/>AAX_Properties.h<br/></p>
<p>Contains IDs for properties that can be added to an AAX_IPropertyMap . . . . . . . . . . . . 1258<br/>AAX_Push2ByteStructAlignment.h<br/></p>
<p>Set the struct alignment to 2-byte. This file will throw an error on platforms that do not support<br/>2-byte alignment (i.e. TI DSPs) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1278<br/></p>
<p>AAX_Push4ByteStructAlignment.h<br/>Set the struct alignment to 4-byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1279<br/></p>
<p>AAX_Push8ByteStructAlignment.h<br/>Set the struct alignment to 8-byte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1280<br/></p>
<p>AAX_Quantize.h<br/>Quantization utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1280<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>44 File Index<br/></b></p>
<p>AAX_RandomGen.h<br/>Functions for calculating pseudo-random numbers . . . . . . . . . . . . . . . . . . . . . . . 1281<br/></p>
<p>AAX_RealTimePerformance.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1282<br/>AAX_RelatedTypes.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1282<br/>AAX_SampleRateUtils.h<br/></p>
<p>Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1282<br/>AAX_SDK_ChangeLog.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/>AAX_SDK_ExamplePlugIns.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/>AAX_SDK_GUIExtensions.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/>AAX_SessionDocumentTypes.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1284<br/>AAX_SliderConversions.h<br/></p>
<p>Legacy utilities for converting parameter values to and from the normalized full-scale 32-bit fixed<br/>domain that was used for RTAS/TDM plug-ins . . . . . . . . . . . . . . . . . . . . . . . . . . 1285<br/></p>
<p>AAX_StringUtilities.h<br/>Various string utility definitions for AAX Native . . . . . . . . . . . . . . . . . . . . . . . . . . 1288<br/></p>
<p>AAX_StringUtilities.hpp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1289<br/>AAX_TI_Guide.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1290<br/>AAX_TransportTypes.h<br/></p>
<p>Structures, enums and other definitions used in transport . . . . . . . . . . . . . . . . . . . . 1290<br/>AAX_Troubleshooting.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1291<br/>AAX_UIDs.h<br/></p>
<p>Unique identifiers for AAX/ACF interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1291<br/>AAX_UtilsNative.h<br/></p>
<p>Various utility definitions for AAX Native . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1309<br/>AAX_VAutomationDelegate.h<br/></p>
<p>Version-managed concrete AutomationDelegate class . . . . . . . . . . . . . . . . . . . . . . 1310<br/>AAX_VCollection.h<br/></p>
<p>Version-managed concrete Collection class . . . . . . . . . . . . . . . . . . . . . . . . . . . 1311<br/>AAX_VComponentDescriptor.h<br/></p>
<p>Version-managed concrete ComponentDescriptor class . . . . . . . . . . . . . . . . . . . . . 1311<br/>AAX_VController.h<br/></p>
<p>Version-managed concrete Controller class . . . . . . . . . . . . . . . . . . . . . . . . . . . 1311<br/>AAX_VDataBufferWrapper.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1312<br/>AAX_VDescriptionHost.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1312<br/>AAX_VEffectDescriptor.h<br/></p>
<p>Version-managed concrete EffectDescriptor class . . . . . . . . . . . . . . . . . . . . . . . . 1313<br/>AAX_VENUE_Guide.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1313<br/>AAX_Version.h<br/></p>
<p>Version stamp header for the AAX SDK . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1313<br/>AAX_VFeatureInfo.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1318<br/>AAX_VHostProcessorDelegate.h<br/></p>
<p>Version-managed concrete HostProcessorDelegate class . . . . . . . . . . . . . . . . . . . . 1318<br/>AAX_VHostServices.h<br/></p>
<p>Version-managed concrete HostServices class . . . . . . . . . . . . . . . . . . . . . . . . . 1319<br/>AAX_VHostTaskAgent.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1319<br/>AAX_VPageTable.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1320<br/>AAX_VPrivateDataAccess.h<br/></p>
<p>Version-managed concrete PrivateDataAccess class . . . . . . . . . . . . . . . . . . . . . . 1320<br/>AAX_VPropertyMap.h<br/></p>
<p>Version-managed concrete PropertyMap class . . . . . . . . . . . . . . . . . . . . . . . . . 1320<br/>AAX_VSessionDocument.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1321<br/>AAX_VTask.h . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1321<br/>AAX_VTransport.h<br/></p>
<p>Version-managed concrete Transport class . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/>AAX_VViewContainer.h<br/></p>
<p>Version-managed concrete ViewContainer class . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/>DSH_Guide.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/>DTT_Guide.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>11.1 File List 45<br/></b></p>
<p>ReadMe.doxygen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>46 File Index<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 12<br/></b></p>
<p><b>Module Documentation<br/></b></p>
<p><b>12.1 AAX SDK Manual<br/></b></p>
<p><b>12.1.1<br/></b></p>
<p><b>12.1.2 Welcome to AAX<br/></b></p>
<p>Select the &quot;Manual&quot; tab to see a full list of documentation pages, or choose from the topics below.<br/></p>
<p><b>Note<br/></b>Looking for something? The search function only includes indexing of code symbols and page titles. To search<br/>for specific text strings in the AAX SDK manual it is best to use a text search tool such as grep or FINDSTR on<br/>the AAX SDK directory or search for the desired text within the PDF version of the AAX SDK documentation.<br/></p>
<p><b>12.1.2.1 The Basics<br/></b></p>
<p>New to AAX? Read through the documentation pages listed below to get started!<br/></p>
<p>&#8226; See Getting Started with AAX for a general overview of AAX and a walk-through of the DemoGain example<br/>plug-in<br/></p>
<p>&#8226; Read through the first few sections of the Pro Tools Guide if you are new to Pro Tools<br/>&#8226; Read the Digital signature section of the Pro Tools Guide to review the digital signing requirements for com-<br/></p>
<p>patibility with Pro Tools<br/>&#8226; Review the sample plug-ins for examples of both basic and advanced AAX features<br/>&#8226; See Core AAX Interface to find out more about the basic structure of AAX plug-ins<br/>&#8226; See Real-time algorithm callback to learn more about audio processing in AAX<br/>&#8226; See Data model interface to learn about adding parameters and controls to your plug-in,<br/>&#8226; See Description callback for more information about plug-in configuration and initial set-up<br/>&#8226; See the HDX DSP Guide to find out how to add AAX DSP support to your plug-in for Avid's HDX and Pro<br/></p>
<p>Tools | Carbon products<br/>&#8226; Ready to ship your new plug-in? See Distributing Your AAX Plug-In for information about finalizing and dis-<br/></p>
<p>tributing your AAX products<br/>&#8226; Check out the Troubleshooting page if you're having problems, or post a question to the developer<br/>forums and an Avid engineer will be happy to assist you.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>48 Module Documentation<br/></b></p>
<p><b>12.1.2.2 More Topics<br/></b></p>
<p>Have a more specific question? Review the pages below or view the full list of documentation pages under the<br/>&quot;Manual&quot; tab above.<br/></p>
<p>&#8226; See AAX_IController to see the interface that an AAX plug-in's host-based modules use to interact with the<br/>host<br/></p>
<p>&#8226; See AAX communication protocols to find out more about how different modules in an AAX plug-in commu-<br/>nicate with one another<br/></p>
<p>&#8226; See Offline processing interface for information about creating advanced non-real-time AAX plug-ins<br/></p>
<p>&#8226; See Taper delegates and Display delegates for more information about implementing custom parameter and<br/>control behavior<br/></p>
<p>&#8226; Look in the /TI/SignalProcessing folder for signal processing utility classes and functions available for optimiz-<br/>ing on Native and DSP<br/></p>
<p><b>12.1.2.3 Test Tools &amp; Utilities<br/></b></p>
<p>&#8226; The DSH Guide has information about the tool for testing basic functionality of your plug-in<br/></p>
<p>&#8226; See DTT Guide to learn how to automate different test scenarios for DSH<br/></p>
<p><b>12.1.2.4 Supplemental Information<br/></b></p>
<p>&#8226; Example Plug-Ins<br/></p>
<p>&#8226; Change Log<br/></p>
<p>&#8226; Host Support<br/></p>
<p>&#8226; Known Issues<br/></p>
<p><b>12.1.3 SDK Folder Hierarchy<br/></b></p>
<p><b>Documentation<br/></b>SDK documentation<br/></p>
<p><b>ExamplePlugIns<br/></b>Example plug-in projects More information<br/></p>
<p><b>Extensions<br/></b>Demonstrations of how to extend the AAX SDK, for example by incorporating third-party GUI frameworks into<br/>AAX plug-ins. More information<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.1 AAX SDK Manual 49<br/></b></p>
<p><b>Interfaces<br/></b>Interface headers and other resources required for use of the AAX SDK library<br/></p>
<p><b>Libs<br/></b>Source code for the AAX SDK library, a collection of default implementations and utility classes for use in all<br/>AAX plug-ins<br/></p>
<p><b>TI<br/></b>Various resources for use with TI's Code Composer Studio IDE and Avid's TI testing toolset<br/></p>
<p><b>Utilities<br/></b>Common SDK utilities and resources<br/></p>
<p><b>12.1.4 Contacting Avid<br/></b></p>
<p>Your personal avid user account is your hub for AAX Toolkit services and developer support.<br/></p>
<p>Log in at avid.com for access to the full range of tools and services provided to AAX developers, including the<br/>AAX developer forum. If you have any questions on the AAX SDK documentation or require support with<br/>AAX development, we encourage you to post them to the forum as your first line of inquiry.<br/></p>
<p>If you have time-sensitive or critical support inquiries, contact the AAX development team directly at avid.&#8592;&#8617;<br/>developer.services@avid.com. Any AAX questions sent to this alias will be promptly addressed by the<br/>most appropriate contact here at Avid.<br/></p>
<p>If you require NFR (Not For Resale) licenses to Avid software for AAX development please send an e-mail to<br/>devauth@avid.com with &quot;License Request&quot; in the subject.<br/></p>
<p>If you require access to the digital signing toolkit from PACE Anti-Piracy, Inc. for compatibility with Pro Tools then<br/>please follow the instructions here.<br/></p>
<p>The following chart describes these and other ways of connecting with Avid to take advantage of the services<br/>provided to AAX developers:<br/></p>
<p><b>12.1.5 Licensing<br/></b></p>
<p>Unless you have entered into a commercial agreement with Avid, you are using this SDK under an evaluation<br/>agreement. To review this agreement, see the AAX Toolkit downloads section under your my.avid.&#8592;&#8617;<br/>com account.<br/></p>
<p>As an Avid Developer, you are invited to offer your products on Avid Marketplace and via Avid Link.<br/>If you wish to sell them independently or through other commercial outlets, an authorized representative from your<br/>organization is required to sign our Commercial License, which you can read and click through here.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>50 Module Documentation<br/></b></p>
<p><b>Documents<br/></b></p>
<p>&#8226; Getting Started with AAX<br/>A brief introduction to AAX.<br/></p>
<p>&#8226; Core AAX Interface<br/>Main classes, callbacks, and format specification details for a standard AAX plug-in.<br/></p>
<p>&#8226; Additional AAX features<br/>How to use additional features and functionality supported by AAX.<br/></p>
<p>&#8226; AAX Library features<br/>AAX Library core support for the AAX interface<br/></p>
<p>&#8226; Additional Topics<br/>Additional information about the AAX design.<br/></p>
<p>&#8226; AAX Host Guides<br/>Documentation for specific AAX host environments.<br/></p>
<p>&#8226; Extensions<br/>Extensions to the AAX SDK.<br/></p>
<p>&#8226; Supplemental Information<br/>Supplemental documents beyond the scope of the AAX SDK.<br/></p>
<p>Collaboration diagram for AAX SDK Manual:<br/></p>
<p><b>12.2 Getting Started with AAX<br/></b></p>
<p>A brief introduction to AAX.<br/></p>
<p><b>12.2.1 Contents<br/></b></p>
<p>&#8226; Welcome<br/></p>
<p>&#8226; Quick Start<br/></p>
<p>&#8226; AAX Design Overview<br/></p>
<p>&#8226; DemoGain Example<br/></p>
<p>&#8226; Next Steps<br/></p>
<p><b>12.2.2 Welcome<br/></b></p>
<p>Welcome to AAX! This guide is designed to introduce you to the fundamental concepts of AAX. By the end of this<br/>guide you will understand:<br/></p>
<p>&#8226; The purpose of AAX<br/></p>
<p>&#8226; The basic components of an AAX plug-in<br/></p>
<p>&#8226; The structure of the DemoGain example plug-in<br/></p>
<p>&#8226; What you need to do to successfully build and run your own AAX plug-ins<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.2 Getting Started with AAX 51<br/></b></p>
<p><b>12.2.3 Quick Start<br/></b></p>
<p>Use the steps below to get up and running quickly with an example plug-in from the AAX SDK.<br/></p>
<p>&#8226; Build the AAX Library<br/>If this is your first time opening the AAX SDK then your first step should be to build the AAX Library project.<br/>The AAX Library is a static library containing default implementations of the AAX interface and convenience<br/>classes designed to make AAX development easy. All of the SDK example plug-ins link to this library, and<br/>your plug-ins should too.<br/>Open the AAX Library project for your chosen IDE from the Libs/AAXLibrary directory and build the library.<br/>Now you are ready to build plug-ins!<br/></p>
<p>&#8226; Open and build the DemoGain example plug-in<br/>The DemoGain project is located in ExamplePlugIns/DemoGain. Once you have built the AAX Library project<br/>you will be able to successfully build DemoGain. To learn more about the DemoGain example plug-in, see<br/>the DemoGain Example section below.<br/></p>
<p>&#8226; Install a developer build of Pro Tools<br/>If you looking at AAX then you are most likely interested in developing plug-ins for Pro Tools. Publicly avail-<br/>able builds of Pro Tools require that AAX plug-ins be digitally signed. During development, you can use a<br/>&quot;developer build&quot; of Pro Tools to run unsigned test builds of your plug-ins, like the DemoGain plug-in that you<br/>just built.<br/>Download and install the latest Pro Tools developer build from the AAX developer downloads in your my.&#8592;&#8617;<br/>avid.com account.<br/></p>
<p>&#8226; Obtain a Pro Tools Developer iLok license (and an iLok)<br/>Pro Tools developer builds require a special license loaded on an iLok USB device. You can request this<br/>Pro Tools Developer license, as well as any other NFR (Not For Resale) licenses which you require for your<br/>AAX product development and testing, by writing to devauth@avid.com with &quot;License Request&quot; in the<br/>subject.<br/>If you don't have an iLok device you will also need to obtain one from PACE Anti-Piracy Inc. or a<br/>reseller, including most music shops which sell audio software.<br/></p>
<p>&#8226; Install DemoGain in the AAX Plug-Ins folder<br/>In order to be loaded into Pro Tools, a plug-in must be present in the system's AAX Plug-Ins directory. See<br/>Install directories in the Pro Tools Guide document for more information about where to install AAX plug-ins<br/>for Pro Tools.<br/></p>
<p>&#8226; Launch Pro Tools and run DemoGain<br/>You're now ready to run your very first AAX plug-in!<br/></p>
<p>1. Make sure that your iLok USB device is connected to the system and contains the Pro Tools Developer<br/>license, then launch the Pro Tools developer build.<br/></p>
<p>2. Once Pro Tools has launched, you will be prompted to create a new Session or Project. Choose Session<br/>(Local Storage) to create a local session file.<br/></p>
<p>3. Create a new mono audio track in your session using the &quot;New Track...&quot; menu item<br/>4. If it is not already visible, reveal the &quot;Inserts A-E&quot; view in the Edit window using the View &gt; Edit Window<br/></p>
<p>menu.<br/>5. Click on one of the insert slots for your audio track and choose DemoGain from the insert selection<br/></p>
<p>menu.<br/></p>
<p>You're now running an instance of the DemoGain AAX plug-in. If you have a debugger attached to Pro Tools<br/>you should now be able to break in the plug-in's methods and step through its code.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>52 Module Documentation<br/></b></p>
<p>&#8226; Get ready to release your own products<br/>Once you have created your own AAX plug-in you can follow the steps in Distributing Your AAX Plug-In to<br/>prepare your plug-in for public sale and distribution.<br/>In particular, for Pro Tools compatibility or to test your product with a public Pro Tools release you will need<br/>to digitally sign your plug-in using a toolkit from PACE Anti-Piracy Inc. See the digital signature section of the<br/>Pro Tools Guide for more information about this requirement.<br/></p>
<p><b>12.2.4 AAX Design Overview<br/></b></p>
<p><b>12.2.4.1 Architecture Philosophy<br/></b></p>
<p>The purpose of the AAX architecture is to provide an easy-to-use framework for the development of high-<br/>performance audio plug-ins that can run on a variety of platforms, both present and future, with a high level of<br/>code re-use.<br/></p>
<p><b>12.2.4.2 Design Attributes<br/></b></p>
<p>AAX incorporates a flexible, decoupled component hierarchy, including:<br/></p>
<p>1. A relocatable C-style callback that performs the plug-in's real-time audio processing algorithm<br/></p>
<p>2. A collection of supporting C++ objects that manage the plug-in's data, GUI, and any other non-real-time<br/>information<br/></p>
<p>3. A &quot;description&quot; method that statically describes the plug-in's layout and compatibility requirements to the host.<br/></p>
<p>This flexible design facilitates optimal performance and portability; AAX is 64-bit ready and is designed to work well<br/>in both host-based (Native), accelerated (DSP), and future (e.g. embedded) environments. Importantly, plug-ins<br/>running in each of these environments can use the same code base, and porting to new platforms should not require<br/>much more than a re-compile. To satisfy these portability requirements, AAX must be decoupled into three parts,<br/>the GUI, data model, and algorithm.<br/></p>
<p><b>12.2.4.3 Component Structure<br/></b></p>
<p>The core component structure of an AAX plug-in involves data model, GUI, description, and algorithm modules.<br/>The design involves a mixture of C++ objects (data model and GUI modules) and C-style callbacks (algorithm and<br/>description modules.)<br/></p>
<p>The figure below shows basic object ownership and composition in an AAX plug-in. The purple components are<br/>provided as part of the AAX SDK while the other components are written as needed by the plug-in developer.<br/>The classes above the dotted line are pure virtual interfaces, while the classes below the dotted line are concrete<br/>implementations.<br/></p>
<p>Figure 1: Core AAX interface design.<br/></p>
<p>As you can see, the plug-in's data model and GUI are written as C++ objects inherited from SDK interfaces, while<br/>its algorithm and Description methods are implemented as simple callbacks. This basic model may be expanded by<br/>attaching additional modules, such as the Host Processor module used by advanced non-real-time plug-ins. In this<br/>section, however, we will be considering only the four core interfaces and modules.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.2 Getting Started with AAX 53<br/></b></p>
<p><b>12.2.4.4 Algorithm<br/></b></p>
<p>The most fundamental, and most important, component of any audio plug-in is its processing algorithm. Due to the<br/>design requirements of an AAX plug-in, this component must meet several constraints in order to be compatible<br/>with accelerated platforms:<br/></p>
<p>1. It must be possible to build the algorithm as a compatible component on a variety of platforms<br/>2. It must be possible for the host to re-locate the algorithm in memory without affecting the algorithm's state<br/>3. The algorithm must be separable from the rest of its plug-in, e.g. into a different memory space<br/>4. The algorithm must be as efficient as possible to call.<br/></p>
<p>To satisfy these constraints, AAX uses a decoupled C-style callback function. State information within the function<br/>is obtained through the context, a custom data structure that contains everything from the &quot;outside world&quot; that is<br/>relevant to the algorithm. The context includes information such as audio buffers and coefficient packets, which are<br/>provided according to a static set of data routing definitions that we will describe further in the next chapter. The<br/>host is responsible for ensuring that this structure is up-to-date whenever the algorithm callback is entered.<br/></p>
<p><b>See also<br/></b>Real-time algorithm callback<br/></p>
<p><b>12.2.4.5 Data Model<br/></b></p>
<p>The AAX_IEffectParameters interface represents the data model portion of your plug-in. The AAX host interacts<br/>with your plug-in's data model via this interface, which includes methods that store and update of your plug-in's<br/>internal data.<br/>In your plug-in's data model implementation, you will be responsible for creating the plug-in's parameters and defin-<br/>ing how the plug-in will respond when these parameters are changed via control updates or preset loads. In order<br/>for information to be routed from the data model to the plug-in's algorithm, the parameters that are created here<br/>must be registered with the host in the plug-in's Description callback (see below).<br/>The data model is composed with AAX_IController, an interface that provides access to the host. This interface<br/>provides a means of querying information from the host such as stem format or sample rate, and is also responsible<br/>for communication between the data model and the (decoupled) algorithm.<br/>You will most likely inherit your custom data model's implementation from AAX_CEffectParameters, a default imple-<br/>mentation of the AAX_IEffectParameters interface. This class provides basic functionality such as adding custom<br/>parameters, setting control values, restoring state, generating coefficients, etc., which you can override and cus-<br/>tomize as needed.<br/><b>See also<br/></b></p>
<p>Data model interface<br/></p>
<p><b>12.2.4.6 GUI Interface<br/></b></p>
<p>The AAX_IEffectGUI interface contains the plug-in's GUI methods. This interface is decoupled from the plug-in's<br/>data model, allowing AAX to support distributed architectures that incorporate remote GUIs.<br/>The GUI is also composed with AAX_IController, from which references to the plug-in's other components, such as<br/>its data model interface, may be retrieved.<br/>The AAX SDK includes a set of GUI extensions to help you get started implementing your plug-ins' GUIs. These<br/>extensions include both native drawing formats and suggested integrations with third-party graphics frameworks.<br/>Although the SDK does not include any actual graphics frameworks, these extensions provide examples of how you<br/>can incorporate your chosen GUI framework with AAX.<br/></p>
<p><b>See also<br/></b>GUI interface<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>54 Module Documentation<br/></b></p>
<p><b>12.2.4.7 Describe<br/></b></p>
<p>A plug-in's Describe callback ties all the plug-in's components together and registers the plug-in with the host. In<br/>this callback, your plug-in defines a set of algorithm callbacks, data connections, and static plug-in properties<br/></p>
<p>In order to route data to the plug-in's algorithm, Describe includes a description of the algorithm's context structure.<br/>This description involves a set of port definitions, which can be &quot;hard-wired&quot; to receive data from the host (such<br/>as audio buffers,) from the plug-in's data model (such as packets of coefficients,) or even from past calls to the<br/>algorithm (private, persistent algorithm state.)<br/></p>
<p>Once these connections are made, Describe passes the host a populated description interface and returns. In the<br/>next section we will demonstrate how all these interfaces interact with one another by examining a sample plug-in.<br/></p>
<p><b>See also<br/></b>Description callback<br/></p>
<p><b>12.2.4.8 Controller<br/></b></p>
<p>There is one additional core component to any AAX plug-in, the Controller. The plug-in does not implement this<br/>component - rather, the Controller is an interface that provides access to various facilities provided by the host, as<br/>well as to the plug-in's other modules.<br/></p>
<p><b>12.2.5 DemoGain Example<br/></b></p>
<p>The AAX SDK includes a basic example plug-in named DemoGain. In this section we will examine this plug-in to<br/>show how the various core modules in an AAX plug-in interact with one another. We will focus in particular on<br/>how the DemoGain's &quot;gain&quot; parameter is defined, routed to the algorithm, and used to apply a gain effect to audio<br/>samples. In this way we will &quot;visit&quot; each of the core components in DemoGain.<br/></p>
<p>For a description of all the example plug-ins included in the SDK, see the Example Plug-Ins page.<br/></p>
<p><b>Note<br/></b>To run DemoGain or other example plug-ins in Pro Tools 10 you must change the AAX_ePlugIn&#8592;&#8617;<br/>Category_Example category to AAX_ePlugInCategory_Dynamics in the plug-in's Describe func-<br/>tion. The &quot;example&quot; category is not supported in Pro Tools 10.<br/></p>
<p><b>12.2.5.1 AAX Plug-In Parameters<br/></b></p>
<p>A good starting point for understanding a plug-in is to understand its parameters. In DemoGain, as in most AAX<br/>plug-ins, the plug-in's parameters define its data model state and the plug-in's parameters provide the fundamental<br/>connection between user interactions and audio processing.<br/></p>
<p>The sections below will guide you through each of the main steps of parameter creation and connection, making<br/>use of the default implementation in AAX_CEffectParameters:<br/></p>
<p>1. Data Model: Create Your Parameter<br/></p>
<p>(a) Create a new parameter object<br/>(b) Register the parameter with the Packet Dispatcher<br/>(c) Create an update callback that converts the raw parameter value into a packet of processed coefficients<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.2 Getting Started with AAX 55<br/></b></p>
<p>2. Algorithm: Add coefficients to the algorithm's context structure<br/></p>
<p>(a) Create a new field for incoming coefficient packets<br/>(b) Generate a field ID to reference the new member<br/>(c) Add the new coefficient to the plug-in's algorithm code<br/></p>
<p>3. Describe: Connect the parameter throughout the plug-in<br/></p>
<p>(a) Add a new Data Input Port to the algorithm via the component descriptor interface<br/>(b) Add a connection between the parameter's packet ID and its coefficients' field ID<br/></p>
<p>4. GUI: Add a control<br/></p>
<p>(a) Create a GUI widget that can update the parameter's state<br/>(b) Add logic to notify the data model when the GUI is edited<br/>(c) Add logic to update the GUI when the data model state changes<br/></p>
<p><b>12.2.5.2 Data Model: Create Your Parameter<br/></b></p>
<p>DemoGain's data model inherits its functionality from AAX_CEffectParameters (the default implementation of<br/>AAX_IEffectParameters). The DemoGain_Parameters.h and DemoGain_Parameters.cpp source files<br/>comprise the source code for DemoGain's data model.<br/></p>
<p>During plug-in initialization, DemoGain_Parameters::EffectInit() creates the plug-in's custom param-<br/>eters. A look inside of the .cpp file shows how this is done via the creation of a new AAX_CParameter for the<br/>gainParameter: the AAX_CParameter constructor is parametrized with a set of arguments that define the gain<br/>parameter's behavior, such as its default value (1.0f), name (&quot;Gain&quot;), taper behavior (linear), etc.<br/></p>
<p>After creating the parameter objects, a series of packets are registered with the host via the inherited<br/>Packet Dispatcher, mPacketDispatcher, which is a helper object used by AAX_CEffectParameters to as-<br/>sist with the plug-in's packet management tasks.<br/>mPacketDispatcher.RegisterPacket(<br/></p>
<p>DemoGain_GainID,<br/>eAlgPortID_CoefsGainIn,<br/>this,<br/>&amp;DemoGain_Parameters::UpdatePacket_Gain);<br/></p>
<p>Listing 1: Registration of DemoGain's &quot;gain&quot; packet handler<br/></p>
<p>The last parameter in AAX_CPacketDispatcher::RegisterPacket() takes a reference to a packet handler callback.<br/>This method will be called by the Packet Dispatcher whenever new parameter values need to be converted into<br/>coefficients that can be used by the algorithm. In DemoGain, a reference to DemoGain_Parameters::Update&#8592;&#8617;<br/>Packet_Gain() is used for the gain parameter's coefficient packet.<br/></p>
<p>As a developer, you will choose how this portion of your data model gets handled; you can choose to use the default<br/>handler method, which simply forwards the raw parameter values to the algorithm, or you can define a custom<br/>handler. You can also choose to bypass the Packet Dispatcher completely (see the DemoDist_GenCoef plug-in<br/>for an example of this.)<br/></p>
<p>Although the handling of DemoGain's gain parameter is trivial, for the sake of demonstration this plug-in uses both<br/>Packet Dispatcher approaches in the registration of its bypass and gain parameters.<br/></p>
<p><b>12.2.5.3 Algorithm: Add coefficients to the algorithm's context structure<br/></b></p>
<p>Your plug-in's context is nothing more than a data structure of pointers that is registered with the host during De-<br/>scribe. These pointers function as ports where host-managed data may be delivered or retrieved.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>56 Module Documentation<br/></b></p>
<p><b>12.2.5.3.1 Context definition </b>Looking under the &quot;Component context definitions&quot; section within DemoGain_&#8592;&#8617;<br/>Alg.h, you will find DemoGain's SDemoGain_Alg_Context context. This is DemoGain's context structure, and<br/>its sole purpose is to parametrize DemoGain's algorithm with a set of ports. Note the definition of a port for the<br/>gain coefficients that are created by DemoGain_Parameters::UpdatePacket_Gain() and another port<br/>for the bypass value that is forwarded via the default packet update handler.<br/>int32_t * mCtrlBypassP;<br/>SDemoGain_CoefsGain * mCoefsGainP;<br/></p>
<p>Listing 2: Gain and bypass ports in the DemoGain algorithm's context structure<br/></p>
<p>Once ports have been defined for the algorithm's coefficients and other algorithmic data, unique identifiers for each<br/>port in the context must be generated. This is accomplished through use of the AAX_FIELD_INDEX macro. The<br/>basic idea behind this macro is to generate IDs that the host can use to directly address the ports within their<br/>context:<br/>, eAlgPortID_CoefsGainIn = AAX_FIELD_INDEX ( SDemoGain_Alg_Context , mCoef ),<br/>, eAlgFieldID_AudioIn = AAX_FIELD_INDEX ( SDemoGain_Alg_Context , mInputPP ) )<br/></p>
<p>Listing 3: Some port ID definitions for the DemoGain algorithm's context structure<br/></p>
<p>Now the context's definition is complete. So far these are just fields in a struct; the host doesn't yet know how to<br/>route packets from the data model to these ports. That information will come later, in the plug-in's description. Once<br/>this context is described to the host, the host will know to populate it and pass it to the processing function located<br/>in DemoGain_AlgProc.cpp.<br/></p>
<p><b>12.2.5.3.2 Algorithm processing callback </b>void<br/>AAX_CALLBACK<br/>DemoGain_AlgorithmProcessFunction (<br/></p>
<p>SDemoGain_Alg_Context * const inInstancesBegin [],<br/>const void * inInstancesEnd )<br/></p>
<p>Listing 4: The DemoGain algorithm's callback prototype<br/></p>
<p>This is where the plug-in's audio buffer processing of the plug-in occurs. Note that this function is passed a pointer<br/>to an array of SDemoGain_Alg_Contexts. Each of these represents the state of a particular instance of<br/>DemoGain, and contains pointers to the applicable coefficient and audio buffer data.<br/></p>
<p>Using the SDemoGain_Alg_Context array, instance-specific information and audio buffers are easily retrieved<br/>for processing. DemoGain accomplishes this by first iterating over each plug-in instance, then over each channel,<br/>and finally over each sample, at which point the gain coefficient is applied to each sample in the input audio buffer<br/>and the sample data is copied to the output audio buffer:<br/>// --------- Iterate over plug -in instances ---------//<br/>for (SDemoGain_Alg_Context * const * walk = inInstancesBegin ; walk &amp;lt;<br/></p>
<p>inInstancesEnd ; ++ walk )<br/>{<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/>// --------- Run processing loop over each input channel ---------//<br/>//<br/>for (int ch = 0; ch &amp;lt; kNumChannelsIn ; ch ++)<br/>{<br/></p>
<p>// --------- Run processing loop over each sample ---------//<br/>//<br/>for (int t = 0; t &amp;lt; kAudioWindowSize ; t++)<br/>{<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/>pdO [t] = gain * pdI [t];<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/>} // Go to the next sample<br/></p>
<p>} // Go to next channel<br/>} // End instance-iteration loop<br/></p>
<p>Listing 5: Iterative loops in the DemoGain algorithm<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.2 Getting Started with AAX 57<br/></b></p>
<p><b>12.2.5.4 Describe: Connect the parameter throughout the plug-in<br/></b></p>
<p>As mentioned before, Describe provides a static description of all communication pathways between a plug-in's<br/>algorithm, host, and data model. In addition, various effect properties are defined that help the host determine how<br/>to handle the plug-in.<br/></p>
<p>Communication paths between the various plug-in components are described as connections between source and<br/>destination ports. In order for these communication paths to be created, the algorithm must first define some<br/>destination ports by actually registering its previously defined context fields as communication destinations. Demo&#8592;&#8617;<br/>Gain does this for its gain parameter through the following call to AAX_IComponentDescriptor::AddDataInPort() in<br/>DemoGain_Describe.cpp's DescribeAlgorithmComponent() method:<br/>AAX_IComponentDescriptor * compDesc;<br/>compDesc = outDescriptor-&gt;NewComponentDescriptor ();<br/>err = compDesc-&gt;AddDataInPort (<br/></p>
<p>eAlgPortID_CoefsGainIn ,<br/>sizeof (SDemoGain_CoefsGain) );<br/></p>
<p>Listing 6: Adding a data port to DemoGain's algorithm component descriptor<br/></p>
<p>This registration process is required for both custom coefficients (Gain) and for data that all plug-ins need such as<br/>audio input and output fields.<br/></p>
<p>That completes the connection, and now the plug-in is fully wired to receive parameter updates, convert raw param-<br/>eter values to algorithmic coefficients, pack these coefficients into a packet, post the packet to the host for routing,<br/>receive the updated packet in the list of context structures that the host provides when calling the algorithm callback,<br/>and apply the updated coefficient data in the appropriate context structure to the plug-in's audio data. Whew!<br/></p>
<p><b>12.2.5.5 GUI: Add a control<br/></b></p>
<p>Although the specific steps for adding a GUI control to edit a plug-in parameter will vary depending on the GUI<br/>framework you choose, there are a few basic design principles that should always be followed.<br/></p>
<p>The basic DemoGain plug-in does not include any GUI implementation. For practical GUI implementation examples,<br/>open the DemoGain_GUIExtensions sample plug-ins. DemoGain_Cocoa provides an example of a custom plug-in<br/>GUI using the native macOS SDK, while DemoGain_Win32 uses native Windows APIs. The other examples in this<br/>folder require common third-party libraries.<br/></p>
<p><b>12.2.5.5.1 Control edits vs. parameter updates </b>The most important principle for AAX GUI design is that an<br/>edit in a plug-in's GUI should never directly set the state of the associated parameter or parameters. This is because<br/>there may be other controller clients of the plug-in's data model which will need to be notified of the edit, or which<br/>may need to override edits from the GUI.<br/></p>
<p>&#8226; On control edit<br/>When a control is edited in the plug-in GUI, call AAX_IEffectParameters::SetParameterNormalizedValue().<br/>The implementation of this method should post a request to the host in order to trigger the parameter update.<br/>The GUI should not update its state until the corresponding parameter update notification is received.<br/></p>
<p>&#8226; On parameter update<br/>A parameter update can occur in response to a GUI edit, an edit from another attached controller, an update<br/>to a linked parameter, or any other event that affects the state of the data model. When the state of a<br/>parameter changes, AAX_IEffectGUI::ParameterUpdated() is called. The plug-in's GUI should be updated in<br/>this method in order to reflect the new state of the affected parameter.<br/></p>
<p>For detailed information about the sequence of events and GUI responsibilities during a parameter update, see<br/>Parameter updates<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>58 Module Documentation<br/></b></p>
<p><b>12.2.5.5.2 Notifying the host of GUI events </b>Some GUI events must be handled by the host rather than by<br/>the plug-in. For example, in Pro Tools a user should be able to display a pop-up menu for controlling automation<br/>information by command-option-control-clicking (Mac) or alt-ctl-right clicking (Windows) a control. These events,<br/>and other direct communication between the GUI and the &quot;container&quot; in which the host creates the plug-in view, is<br/>accomplished via the AAX_IViewContainer interface. Be sure to always call the handler methods in this interface<br/>before handling a mouse event within the plug-in GUI, in order to maintain the expected host behavior.<br/></p>
<p><b>12.2.6 Next Steps<br/></b></p>
<p>Now that you have a basic understanding of AAX, head back to the front page and continue reading through the<br/>suggested documentation. Or dig in to the sample plug-ins to see how specific features are supported in AAX.<br/></p>
<p><b>Warning<br/></b>Your AAX plug-ins will not be compatible with shipping versions of Pro Tools until they are digitally signed using<br/>tools provided by PACE Anti-Piracy, Inc. As an AAX developer you can receive these tools free of charge.<br/>Read the Digital signature section of the Pro Tools Guide to learn about the digital signing requirements for<br/>compatibility with Pro Tools.<br/></p>
<p>Collaboration diagram for Getting Started with AAX:<br/></p>
<p><b>12.3 Core AAX Interface<br/></b></p>
<p><b>12.3.1<br/></b></p>
<p>Main classes, callbacks, and format specification details for a standard AAX plug-in.<br/></p>
<p>Data Model Interface GUI Interface Description API Real-time algorithm<br/></p>
<p>AAX_IEffectParameters<br/></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_IController<br/></p>
<p>My Data Model<br/></p>
<p>AAX_IEffectGUI<br/></p>
<p>AAX_CEffectGUI<br/></p>
<p>My GUI GetEffectDescriptions() Algorithm callback<br/></p>
<p><b>Figure 12.1 Main classes and callbacks for a standard AAX plug-in<br/></b></p>
<p>These interfaces and components represent the standard interface between an AAX plug-in and the host. Default<br/>implementations for each interface are provided in the SDK. See the following modules for more information about<br/>each component.<br/></p>
<p><b>See also<br/></b>Component Structure in the Getting Started Guide<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.4 Description callback 59<br/></b></p>
<p><b>Documents<br/></b></p>
<p>&#8226; Description callback<br/>Static configuration for an AAX plug-in.<br/></p>
<p>&#8226; Real-time algorithm callback<br/>A plug-in's audio processing core.<br/></p>
<p>&#8226; Data model interface<br/>The interface for an AAX Plug-in's data model.<br/></p>
<p>&#8226; Data model overrides interface<br/>&#8226; GUI interface<br/></p>
<p>The interface for a AAX Plug-in's user interface.<br/>&#8226; AAX communication protocols<br/></p>
<p>How to transfer data between different parts of an AAX plug-in.<br/>&#8226; AAX Format Specification<br/></p>
<p>Additional requirements for AAX plug-ins.<br/></p>
<p>Collaboration diagram for Core AAX Interface:<br/></p>
<p><b>12.4 Description callback<br/></b></p>
<p><b>12.4.1<br/></b></p>
<p>Static configuration for an AAX plug-in.<br/></p>
<p><b>12.4.2 On this page<br/></b></p>
<p>&#8226; About the Describe callback and AAX descriptor interfaces<br/></p>
<p>&#8226; Top level: Collection<br/></p>
<p>&#8226; Middle level: Effects<br/></p>
<p>&#8226; Lowest level: Algorithm components<br/></p>
<p>&#8226; Host feature and environment checks<br/></p>
<p>&#8226; Checking Results<br/></p>
<p>&#8226; Describe Validation<br/></p>
<p>&#8226; Additional Topics<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>60 Module Documentation<br/></b></p>
<p><b>12.4.3 About the Describe callback and AAX descriptor interfaces<br/></b></p>
<p>GetEffectDescriptions()<br/></p>
<p>AAX_ICollection<br/></p>
<p>NewDescriptor()<br/></p>
<p>AddEffect() <b>AAX_IEffectDescriptor<br/></b></p>
<p>NewComponentDescriptor()<br/></p>
<p>AddComponent()<br/></p>
<p>NewPropertyMap()<br/></p>
<p>SetProperties()<br/></p>
<p>AddMeterDescription()<br/></p>
<p><b>AAX_IComponentDescriptor<br/></b></p>
<p>NewPropertyMap()<br/></p>
<p>AddProcessProc_Native()<br/></p>
<p>AddProcessProc_TI()<br/></p>
<p><b>AAX_IPropertyMap<br/></b></p>
<p><b>AAX_IPropertyMap<br/></b></p>
<p><b>AAX_IPropertyMap<br/></b></p>
<p><b>AAX_IPropertyMap<br/></b></p>
<p>In Describe, a plug-in declares its static (or default) configuration and any properties that the host will need in order<br/>to manage the plug-in.<br/></p>
<p>A plug-in's Describe callback ties the Algorithm, GUI, and Data Model together. In this callback, the plug-in provides<br/>a description of its algorithm callbacks, data connections, and other static plug-in properties using a set of host-<br/>provided description interfaces. The plug-in uses a tiered hierarchy of these description interfaces to complete its<br/>description:<br/></p>
<p>&#8226; At the top level, a single Collection interface represents properties that apply to the plug-in binary.<br/></p>
<p>&#8226; The Collection interface is populated with one or more Effect descriptors, each of which represents a single<br/>kind of effect. For example, a single dynamics plug-in binary may include both single-band and multi-band<br/>Effects. Each Effect represents a different plug-in &quot;product&quot; available to users.<br/></p>
<p>&#8226; Each Effect is registered with a set of one or more algorithm components that represent the specific pro-<br/>cessing configurations (e.g. stem formats, sample rates) that the plug-in supports. The set of components<br/>in a single Effect provide possible variations of the single plug-in &quot;product&quot;, and as such these variations are<br/>mostly transparent to users.<br/></p>
<p>The actual description callback entrypoint is ACFRegisterPlugin(), which is declared in AAX_Exports.cpp. This<br/>method is implemented inside of the AAX Library, where it calls the plug-in's custom implementation of the<br/>GetEffectDescriptions() callback.<br/>// ***************************************************************************<br/>// ROUTINE: GetEffectDescriptions<br/>// ***************************************************************************<br/>AAX_Result GetEffectDescriptions( AAX_ICollection * outCollection )<br/>{<br/></p>
<p>AAX_Result result = AAX_SUCCESS;<br/>AAX_IEffectDescriptor * plugInDescriptor = outCollection-&gt;NewDescriptor();<br/>if ( plugInDescriptor )<br/>{<br/></p>
<p>result = DemoGain_GetPlugInDescription( plugInDescriptor );<br/>if ( result == AAX_SUCCESS )<br/></p>
<p>outCollection-&gt;AddEffect( kEffectID_DemoGain, plugInDescriptor );<br/>}<br/>else result = AAX_ERROR_NULL_OBJECT;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.4 Description callback 61<br/></b></p>
<p>outCollection-&gt;SetManufacturerName( &quot;Avid, Inc.&quot; );<br/>outCollection-&gt;AddPackageName( &quot;DemoGain Plug-In&quot; );<br/>outCollection-&gt;AddPackageName( &quot;DemoGain&quot; );<br/>outCollection-&gt;AddPackageName( &quot;DmGi&quot; );<br/>outCollection-&gt;SetPackageVersion( 1 );<br/>return result;<br/></p>
<p>}<br/></p>
<p>GetEffectDescriptions() from the DemoGain example plug-in<br/>In general, the following procedure is used when describing an AAX plug-in:<br/></p>
<p>1. Create an Effect description interface from the Collection interface provided by the host<br/>2. Use the Effect description interface to create references to one or more component description interfaces.<br/>3. Describe each algorithm component by populating the component descriptions.<br/>4. Add the components to the Effect description<br/>5. Add additional modules and properties to the Effect description.<br/>6. Add the completed Effect to the Collection<br/>7. Repeat for any additional Effects included in the plug-in binary.<br/>8. Return the completed Collection interface to the host and exit.<br/></p>
<p><b>Note<br/></b>The host owns all memory associated with any descriptors that the plug-in returns via this callback.<br/></p>
<p><b>12.4.4 Top level: Collection<br/></b></p>
<p>The AAX_ICollection interface provides a creation function (AAX_ICollection::NewDescriptor()) for new plug-in de-<br/>scriptors, which in turn provides access to the various interfaces necessary for describing a plug-in (see the Demo&#8592;&#8617;<br/>Gain_GetPlugInDescription() and DescribeAlgorithmComponent() listings below).<br/>When a plug-in description is complete, it is added to the collection via the AAX_ICollection::AddEffect() method.<br/>The AAX_ICollection interface also provides some additional description methods that are used to describe the<br/>overall plug-in package. These methods can be used to describe the plug-in package's name, the name of the plug-<br/>in's manufacturer, and the plug-in package version. Once these have been described, the completed description<br/>interface is returned to the host and exits.<br/>// ***************************************************************************<br/>// ROUTINE: GetEffectDescriptions<br/>// ***************************************************************************<br/>AAX_Result GetEffectDescriptions( AAX_ICollection * outCollection )<br/>{<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/>AAX_IEffectDescriptor * plugInDescriptor = outCollection-&gt;NewDescriptor();<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/>result = DemoGain_GetPlugInDescription( plugInDescriptor );<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/>outCollection-&gt;AddEffect( kEffectID_DemoGain, plugInDescriptor );<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/>outCollection-&gt;SetManufacturerName( &quot;Avid, Inc.&quot; );<br/>outCollection-&gt;AddPackageName( &quot;DemoGain Plug-In&quot; );<br/>outCollection-&gt;AddPackageName( &quot;DemoGain&quot; );<br/>outCollection-&gt;AddPackageName( &quot;DmGi&quot; );<br/>outCollection-&gt;SetPackageVersion( 1 );<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/>return result;<br/></p>
<p>}<br/></p>
<p>Populating the AAX_ICollection interface<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>62 Module Documentation<br/></b></p>
<p><b>12.4.5 Middle level: Effects<br/></b>The AAX_IEffectDescriptor interface provides description methods that are used to describe the Effect, such as its<br/>name, category, associated page table, and, importantly, creation methods for its data model, GUI, and other AAX<br/>modules.<br/>// ***************************************************************************<br/>// ROUTINE: DemoGain_GetPlugInDescription<br/>// ***************************************************************************<br/>static AAX_Result DemoGain_GetPlugInDescription( AAX_IEffectDescriptor * outDescriptor )<br/>{<br/></p>
<p>int err;<br/>AAX_IComponentDescriptor * compDesc = outDescriptor-&gt;NewComponentDescriptor ();<br/>if ( !compDesc )<br/></p>
<p>return AAX_ERROR_NULL_OBJECT;<br/>// Add empty component descriptors to the host, register a processing<br/>// entrypoint for each, and populate with description information.<br/>//<br/>// Alg component<br/>DescribeAlgorithmComponent( compDesc );<br/>err = outDescriptor-&gt;AddComponent( compDesc ); AAX_ASSERT (err == 0);<br/>outDescriptor-&gt;AddPlugInName ( &quot;Demo Gain AAX&quot; );<br/>outDescriptor-&gt;AddPlugInName ( &quot;Demo Gain&quot; );<br/>outDescriptor-&gt;AddPlugInName ( &quot;DemoGain&quot; );<br/>outDescriptor-&gt;AddPlugInName ( &quot;DmGain&quot; );<br/>outDescriptor-&gt;AddPlugInName ( &quot;DGpr&quot; );<br/>outDescriptor-&gt;AddPlugInName ( &quot;Dn&quot; );<br/>outDescriptor-&gt;AddPlugInCategory ( AAX_ePlugInCategory_Dynamics );<br/>outDescriptor-&gt;AddProcPtr( (void *) DemoGain_Parameters::Create, kAAX_ProcPtrID_Create_EffectParameters<br/></p>
<p>);<br/>outDescriptor-&gt;AddResourceInfo ( AAX_eResourceType_PageTable, &quot;DemoGainPages.xml&quot; );<br/></p>
<p>#if PLUGGUI != 0<br/>outDescriptor-&gt;AddProcPtr( (void *) DemoGain_GUI::Create, kAAX_ProcPtrID_Create_EffectGUI );<br/></p>
<p>#endif<br/>return AAX_SUCCESS;<br/></p>
<p>}<br/></p>
<p>Populating an AAX_IEffectDescriptor interface<br/>All components in an Effect must share the same AAX modules; for example, it is not possible to use one data<br/>model definition for one sample rate and another data model definition for a different sample rate. Therefore, a<br/>plug-in's AAX modules are defined in its Effect description.<br/></p>
<p><b>12.4.5.1 Registering multiple Effects<br/></b></p>
<p>A single plug-in package may include multiple Effects, which are added in turn in the description method. Once<br/>these connections are made, Describe passes the host a populated description interface and returns.<br/>For example, consider an EQ plug-in that contains both one-band and four-band variations, each of which the user<br/>should see as a distinct plug-in. These Effects would be described and added separately to the collection object<br/>and would appear as separate products to the user.<br/>AAX_Result GetEffectsDescriptions ( AAX_ICollection * outCollection )<br/>{<br/></p>
<p>AAX_Result result = AAX_SUCCESS ;<br/>if ( result == AAX_SUCCESS )<br/>{<br/></p>
<p>AAX_IEffectDescriptor * aDesc1 = outCollection -&gt; NewDescriptor ();<br/>// ...<br/>// Populate aDesc1 with one - band EQ description<br/>// ...<br/>result = outCollection -&gt; AddEffect ( kEffectID_MyOneBandEQ , aDesc1 );<br/></p>
<p>}<br/>if ( result == AAX_SUCCESS )<br/>{<br/></p>
<p>AAX_IEffectDescriptor * aDesc4 = outCollection -&gt; NewDescriptor ();<br/>// ...<br/>// Populate aDesc4 with four - band EQ description<br/>// ...<br/>result = outCollection -&gt; AddEffect ( kEffectID_MyFourBandEQ , aDesc4 );<br/></p>
<p>}<br/>if ( result == AAX_SUCCESS )<br/>{<br/></p>
<p>outCollection -&gt; SetManufacturerName ( &quot;My Plug -Ins , Inc.&quot; );<br/>outCollection -&gt; AddPackageName ( &quot; MyEQ Plug -In&quot; );<br/>outCollection -&gt; AddPackageName ( &quot; MyQ&quot; ); // Short name<br/>outCollection -&gt; SetPackageVersion ( 1 );<br/></p>
<p>}<br/>return result ;<br/></p>
<p>}<br/></p>
<p>Registering multiple Effects in a single Collection<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.4 Description callback 63<br/></b></p>
<p><b>12.4.6 Lowest level: Algorithm components<br/></b></p>
<p>In order to register an algorithm component, a plug-in must describe the component's external interface. This<br/>includes each of the component's ports and any other fi elds in its context structure, a reference to its processing<br/>function entrypoint (its &quot;Process Procedure&quot;, or ProcessProc,) and any other special properties that the host should<br/>know about.<br/></p>
<p>The description of a context structure involves a set of port definitions, which can be &quot;hard-wired&quot; to receive data<br/>from the host (such as audio buffers), from the plug-in's data model (such as packets of coefficients), or even<br/>from past calls to the algorithm (private, persistent algorithm state). See Real-time algorithm callback for more<br/>information on an algorithm's context structure.<br/>static void DescribeAlgorithmComponent( AAX_IComponentDescriptor * outDesc )<br/>{<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/>AAX_Result err;<br/>// Subscribe context fields to host-provided services or information<br/>err = outDesc-&gt;AddField ( eAlgFieldID_AudioIn, kAAX_FieldTypeAudioIn ); AAX_ASSERT(err == 0);<br/>err = outDesc-&gt;AddField ( eAlgFieldID_AudioOut, kAAX_FieldTypeAudioOut ); AAX_ASSERT (err == 0);<br/>err = outDesc-&gt;AddField ( eAlgFieldID_BufferSize, kAAX_FieldTypeAudioBufferLength ); AAX_ASSERT (err ==<br/></p>
<p>0);<br/>// Register context fields as communications destinations<br/>err = outDesc-&gt;AddDataInPort ( eAlgPortID_BypassIn, sizeof (int32_t) ); AAX_ASSERT (err == 0);<br/>err = outDesc-&gt;AddDataInPort ( eAlgPortID_CoefsGainIn, sizeof (SDemoGain_CoefsGain) ); AAX_ASSERT (err<br/></p>
<p>== 0);<br/>.<br/>.<br/>.<br/></p>
<p>}<br/></p>
<p>Populating a single AAX_IComponentDescriptor interface<br/></p>
<p><b>12.4.6.1 Algorithm callback properties<br/></b></p>
<p>A set of callback properties is required when adding a Process Procedure to an algorithm component. This is<br/>done via the AAX_IPropertyMap interface. Using distinct property maps, a single component may register multiple<br/>versions of its callback. For example, an audio processing component might register mono and stereo callbacks,<br/>or Native and TI callbacks, assigning each the applicable property mapping. This allows the host to determine the<br/>correct callback to use depending on the environment in which the plug-in is instantiated.<br/>static void DescribeAlgorithmComponent( AAX_IComponentDescriptor * outDesc )<br/>{<br/></p>
<p>AAX_IPropertyMap * properties = outDesc-&gt;NewPropertyMap();<br/>.<br/>.<br/>.<br/></p>
<p>properties-&gt;Clear ();<br/>properties-&gt;AddProperty ( AAX_eProperty_ManufacturerID, cDemoGain_ManufactureID );<br/>properties-&gt;AddProperty ( AAX_eProperty_ProductID, cDemoGain_ProductID );<br/>properties-&gt;AddProperty ( AAX_eProperty_InputStemFormat, AAX_eStemFormat_Mono );<br/>properties-&gt;AddProperty ( AAX_eProperty_OutputStemFormat, AAX_eStemFormat_Mono );<br/>properties-&gt;AddProperty ( AAX_eProperty_CanBypass, true );<br/>// Native and AudioSuite versions<br/>properties-&gt;AddProperty ( AAX_eProperty_PlugInID_Native, cDemoGain_PlugInID_Native );<br/>properties-&gt;AddProperty ( AAX_eProperty_PlugInID_AudioSuite, cDemoGain_PlugInID_AudioSuite ); // Since<br/></p>
<p>this is a linear plug-in the RTAS version can also be an AudioSuite version.<br/>properties-&gt;AddProperty ( AAX_eProperty_DSP_AudioBufferLength, kAAX_NativeAudioBufferLength_Default);<br/>err = outDesc-&gt;AddProcessProc_Native ( DemoGain_AlgorithmProcessFunction &lt;1, 1,<br/></p>
<p>1&#171;kAAX_NativeAudioBufferLength_Default&gt;, properties ); AAX_ASSERT (err == 0);<br/>// TI DSP Version<br/>properties-&gt;AddProperty ( AAX_eProperty_PlugInID_TI, cDemoGain_PlugInID_TI );<br/>properties-&gt;AddProperty ( AAX_eProperty_DSP_AudioBufferLength, AAX_eAudioBufferLengthDSP_Default );<br/>properties-&gt;AddProperty ( AAX_eProperty_TI_InstanceCycleCount, 1055 );<br/>properties-&gt;AddProperty ( AAX_eProperty_TI_SharedCycleCount, 58 );<br/></p>
<p>}<br/></p>
<p>Adding properties to a component description<br/></p>
<p>AAX does not require that every value in AAX_IPropertyMap be assigned by the developer. However, if a specific<br/>value is not assigned to one of an element's properties then the element must support any value for that property.<br/>For example, if an audio processing component does not provide any stem format properties then the host will<br/>assume that the callback will support any stem format.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>64 Module Documentation<br/></b></p>
<p><b>12.4.7 Host feature and environment checks<br/></b></p>
<p>AAX includes some mechanisms for detecting feature support in the host during Describe, such as<br/>AAX_IDescriptionHost , AAX_ICollection::HostDefinition(), and AAX_ICollection::GetHostVersion(). A plug-in<br/>may also check other aspects of its environment such as the OS version.<br/></p>
<p><b>Warning<br/></b>IMPORTANT: A plug-in should never add, remove, or change individual parts of its Description based on the<br/>host or environment. It should either provide a full and consistent Description or, if the host is not compatible,<br/>it should provide an empty Description.<br/></p>
<p>The information provided by Describe is stored in a cache file. If the configuration information depends on factors<br/>outside of the plug-in itself then the information that was cached in one environment may be invalid in another<br/>environment.<br/></p>
<p>A plug-in may perform checks during Describe to see if the host supports necessary features, to verify that the<br/>current OS is supported, or to check for other kinds of basic compatibility. If the plug-in determines that the host is<br/>not compatible then it should return an empty Description, i.e. it should not add any Effects to the Collection. An<br/>empty Description is never cached and therefore will not invalidate any existing cache information from a supported<br/>environment.<br/></p>
<p><b>12.4.8 Checking Results<br/></b></p>
<p><b>12.4.8.1 Summary<br/></b></p>
<p>&#8226; Use AAX_CheckedResult to store result values from all method calls in Describe.<br/></p>
<p>&#8226; Use the AAX_SWALLOW and AAX_SWALLOW_MULT macros to encapsulate independent describe code,<br/>such as registration logic for separate Effects or for separate ProcessProc variations within a single Effect.<br/></p>
<p><b>12.4.8.2 The Problem<br/></b></p>
<p>With plain AAX_Result values it can be challenging to properly detect and handle error states. Each description<br/>method call returns an AAX_Result to indicate success or failure, and often problems in a plug-in's configuration<br/>can be addressed by properly detecting and resolving errors that occur here. However, adding a return value check<br/>after ever method and providing conditional logic in the case of a failure is onerous, ugly, and difficult to maintain.<br/>AAX_Result result = AAX_SUCCESS;<br/>result = descriptor-&gt;SomeMethod();<br/>result = descriptor-&gt;AnotherMethod(); // oops! might ignore an error<br/>// --------------------------------------------------<br/>// Safer, but not a good solution:<br/>// Information about the errors is lost, the<br/>// merged error code is meaningless, and<br/>// debugging to find the location of the<br/>// failure is hard.<br/>//<br/>result |= descriptor-&gt;SomeMethod();<br/>result |= descriptor-&gt;AnotherMethod();<br/>// ...<br/>if (AAX_SUCCESS != result)<br/>{<br/></p>
<p>// handle the merged error code<br/>}<br/>// --------------------------------------------------<br/>// This is also not a good solution:<br/>// There is no actual handling of errors<br/>// (from the SDK example plug-ins)<br/>//<br/>result = descriptor-&gt;SomeMethod();<br/>AAX_ASSERT(AAX_SUCCESS == result);<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.4 Description callback 65<br/></b></p>
<p>result = descriptor-&gt;AnotherMethod();<br/>AAX_ASSERT(AAX_SUCCESS == result);<br/>// --------------------------------------------------<br/>// This is correct but is too hard<br/>//<br/>AAX_Result result = AAX_SUCCESS;<br/>result = descriptor-&gt;SomeMethod();<br/>if (AAX_SUCCESS != result) {<br/></p>
<p>// logic to handle this error:<br/>// assert and/or log the failure?<br/>// return or continue execution?<br/></p>
<p>}<br/>result = descriptor-&gt;AnotherMethod();<br/>if (AAX_SUCCESS != result) {<br/></p>
<p>// ditto<br/>}<br/></p>
<p>AAX_Result based error checking is awkward<br/></p>
<p><b>12.4.8.3 The Solution<br/></b></p>
<p>The AAX_CheckedResult class is designed to solve this problem. AAX_CheckedResult can be used just like a<br/>plain-old-data AAX_Result :<br/>AAX_CheckedResult result = AAX_SUCCESS;<br/>result = descriptor-&gt;SomeMethod();<br/>result = descriptor-&gt;AnotherMethod();<br/></p>
<p>Simpler result checking with AAX_CheckedResult<br/></p>
<p>When a failure is encountered, AAX_CheckedResult will:<br/></p>
<p>&#8226; Store the error value<br/></p>
<p>&#8226; Log the error using AAX_TRACE_RELEASE<br/></p>
<p>&#8226; Throw an exception of type AAX_CheckedResult::Exception<br/></p>
<p>To make this safe to use in the Describe routine, the AAX Library includes a try/catch block around the call to the<br/>plug-in's GetEffectDescriptions() routine.<br/></p>
<p><b>Warning<br/></b>Do not use AAX_CheckedResult anywhere where an exception could escape to the host (GetEffectDescriptions()<br/>is OK)<br/></p>
<p><b>12.4.8.4 Handling Errors and Managing Control Flow<br/></b></p>
<p>With the basic approach shown above, any error which is encountered will throw an exception which will cancel<br/>the plug-in's registration and prevent the plug-in from being shown in the host. However, most errors can be safely<br/>handled without canceling the entire plug-in registration.<br/>AAX_CheckedResult result = AAX_SUCCESS;<br/>// effect 1 registration<br/>result = DescribeMyEffect1( effect1Descriptor );<br/>result = outCollection-&gt;AddEffect( myEffect1ID, effect1Descriptor );<br/>// effect 2 registration<br/>result = DescribeMyEffect2( effect2Descriptor );<br/>result = outCollection-&gt;AddEffect( myEffect2ID, effect2Descriptor );<br/></p>
<p>Example with no error handling<br/></p>
<p>In this example, a failure when describing either individual effect will prevent the other effect from being registered.<br/>Registration of individual ProcessProcs within a single effect, e.g. for different stem formats, is similar.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>66 Module Documentation<br/></b></p>
<p>To allow the registration of other effects to proceed in the event of a failure, any exceptions thrown during the<br/>registration of one effect should be caught and should only prevent the registration of that individual effect.<br/>AAX_CheckedResult result = AAX_SUCCESS;<br/>// effect 1 registration<br/>try {<br/></p>
<p>result = DescribeMyEffect1( effect1Descriptor );<br/>result = outCollection-&gt;AddEffect( myEffect1ID, effect1Descriptor );<br/></p>
<p>}<br/>catch (const AAX_CheckedResult::Exception&amp; ex) {<br/></p>
<p>// log the error using ex.What()<br/>// swallow the exception and proceed<br/></p>
<p>}<br/>// effect 2 registration<br/>try {<br/></p>
<p>result = DescribeMyEffect2( effect2Descriptor );<br/>result = outCollection-&gt;AddEffect( myEffect2ID, effect2Descriptor );<br/></p>
<p>}<br/>catch (const AAX_CheckedResult::Exception&amp; ex) {<br/></p>
<p>// ditto<br/>}<br/></p>
<p>Example of error handling with try/catch<br/></p>
<p>This solves the problem fully, but it is still cumbersome - especially when registering a long list of separate Process&#8592;&#8617;<br/>Proc variants!<br/></p>
<p>The AAX_SWALLOW_MULT macro makes it easier to handle errors which are thrown by AAX_CheckedResult :<br/>AAX_CheckedResult result = AAX_SUCCESS;<br/>// effect 1 registration<br/>AAX_SWALLOW_MULT (<br/></p>
<p>result = DescribeMyEffect1( effect1Descriptor );<br/>result = outCollection-&gt;AddEffect( myEffect1ID, effect1Descriptor );<br/></p>
<p>);<br/>// effect 2 registration<br/>AAX_SWALLOW_MULT (<br/></p>
<p>result = DescribeMyEffect2( effect2Descriptor );<br/>result = outCollection-&gt;AddEffect( myEffect2ID, effect2Descriptor );<br/></p>
<p>);<br/></p>
<p>Example of error handling with AAX_SWALLOW_MULT<br/></p>
<p>Variations<br/></p>
<p>&#8226; For single-line try/catch there is also AAX_SWALLOW.<br/>&#8226; If you need to reference the error value after the exception is caught, use AAX_CAPTURE_MULT (multi-line)<br/></p>
<p>or AAX_CAPTURE (single-line)<br/>&#8226; If you know that a certain error code is OK and should not throw in a given situation then you can add it as an<br/></p>
<p>exception to the AAX_CheckedResult object with AAX_CheckedResult::AddAcceptedResult().<br/></p>
<p>For examples of AAX_CheckedResult in use, see the DemoGain_Multichannel and DemoGain_UpMixer plug-ins<br/></p>
<p><b>12.4.9 Describe Validation<br/></b></p>
<p><b>12.4.9.1 Validation with DSH<br/></b></p>
<p>You can validate your plug-in's Describe routine using the DigiShell command-line tool. The validation command is<br/>available directly in the aaxh dish and is also available through an AAX Validator test module:<br/>aaxh dish<br/></p>
<p>dsh&gt; load_dish aaxh<br/>dsh&gt; loadpi &quot;/quoted/path/without escape chars/MyPlugIn.aaxplugin&quot;<br/>dsh&gt; getdescriptionvalidationinfo 0<br/></p>
<p>AAX Validator<br/></p>
<p>dsh&gt; load_dish aaxval<br/>dsh&gt; runtest [test.describe_validation, &quot;/quoted/path/without escape chars/MyPlugIn.aaxplugin&quot;]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.4 Description callback 67<br/></b></p>
<p><b>12.4.9.2 Validation with Pro Tools<br/></b></p>
<p>Beginning in Pro Tools 12.8.2, developer builds of Pro Tools will also check plug-in describe routines and will present<br/>an alert dialog when the plug-in is scanned if any aspect of the plug-in's describe code has failed the validation step.<br/></p>
<p>Describe validation warning in a Pro Tools developer build<br/></p>
<p>The specific kinds of errors which were encountered will be printed to the DigiTrace log file:<br/></p>
<p>13033.502646,00307,0073: ERROR: Unknown target host for the plug-in.<br/>13033.502662,00307,0073: ERROR: PlugInID property is missing for a ProcessProc (process, initialization, or background function).<br/>13033.502734,00307,0e0f: CMN_TRACEASSERT Sandbox.aaxplugin configuration contains 2 errors. See the DigiTrace log or run the AAX Validator for more info. (0 == numErrors)<br/></p>
<p>This check may be suppressed using the following DigiOption:<br/></p>
<p>TestPlugInDescriptions 0<br/></p>
<p><b>12.4.10 Additional Topics<br/></b></p>
<p><b>See also<br/></b>Plug-in meters<br/>Plug-in loading and AAE initialization in Pro Tools<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_ICollection<br/>Interface to represent a plug-in binary's static description.<br/></p>
<p>&#8226; class AAX_IComponentDescriptor<br/>Description interface for an AAX plug-in component.<br/></p>
<p>&#8226; class AAX_IEffectDescriptor<br/>Description interface for an effect's (plug-in type's) components.<br/></p>
<p>&#8226; class AAX_IPropertyMap<br/>Generic plug-in description property map.<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; AAX_Result AAXRegisterPlugin (IACFUnknown &#8727;pUnkHost, IACFPluginDefinition &#8727;&#8727;ppPluginDefinition)<br/>The main plug-in registration method.<br/></p>
<p>&#8226; AAX_Result GetEffectDescriptions (AAX_ICollection &#8727;inCollection)<br/>The plug-in's static Description entrypoint.<br/></p>
<p><b>12.4.11 Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>68 Module Documentation<br/></b></p>
<p><b>12.4.11.1 AAXRegisterPlugin()<br/></b></p>
<p>AAX_Result AAXRegisterPlugin (<br/>IACFUnknown &#8727; pUnkHost,<br/>IACFPluginDefinition &#8727;&#8727; ppPluginDefinition )<br/></p>
<p>The main plug-in registration method.<br/></p>
<p>This method determines the number of components defined in the dll. The implementation of this method in the<br/>AAX library calls the following function, which must be implemented somewhere in your plug-in:<br/>extern AAX_Result GetEffectDescriptions( AAX_ICollection * outCollection );<br/></p>
<p>Wrapped by ACFRegisterPlugin()<br/></p>
<p>Referenced by ACFRegisterPlugin().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>12.4.11.2 GetEffectDescriptions()<br/></b></p>
<p>AAX_Result GetEffectDescriptions (<br/>AAX_ICollection &#8727; inCollection )<br/></p>
<p>The plug-in's static Description entrypoint.<br/></p>
<p>This function is responsible for describing an AAX plug-in to the host. It does this by populating an AAX_ICollection<br/>interface.<br/></p>
<p>This function must be included in every plug-in that links to the AAX library. It is called when the host first loads the<br/>plug-in.<br/></p>
<p><b>Parameters<br/></b>out inCollection<br/></p>
<p>Collaboration diagram for Description callback:<br/></p>
<p><b>12.5 Real-time algorithm callback<br/></b></p>
<p>A plug-in's audio processing core.<br/></p>
<p><b>12.5.1 On this page<br/></b></p>
<p>&#8226; Algorithm definition<br/></p>
<p>&#8226; Algorithm memory management<br/></p>
<p>&#8226; Communicating with the algorithm<br/></p>
<p>&#8226; Algorithm initialization<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.5 Real-time algorithm callback 69<br/></b></p>
<p>&#8226; Algorithm processing<br/>&#8226; Persistent algorithm memory<br/>&#8226; Example algorithm callback<br/>&#8226; Port Types and Behavior<br/>&#8226; Additional Information<br/></p>
<p><b>12.5.2 Algorithm definition<br/></b></p>
<p>Algorithm processing in AAX plug-ins is handled via a C-style algorithm processing callback (see code below.) Each<br/>Effect variation in a plug-in must register an algorithm entrypoint in the plug-in description, and the host will call this<br/>entrypoint to render a buffer of audio samples.<br/>void AAX_CALLBACK MyPlugIn_AlgorithmProcessFunction(<br/></p>
<p>SMyPlugIn_Alg_Context * const inInstancesBegin [],<br/>const void * inInstancesEnd)<br/>{<br/></p>
<p>//<br/>// Processing code...<br/>//<br/></p>
<p>}<br/></p>
<p><b>12.5.3 Algorithm memory management<br/></b></p>
<p>This callback pattern is designed such that plug-in algorithms may be easily loaded in remote memory spaces on<br/>a variety of devices and quickly re-compiled for different operating environments without significant changes to the<br/>code, and this design goal informs the algorithm's memory management techniques.<br/></p>
<p>Algorithm callback<br/></p>
<p><b>Custom</b> <b>context</b> <b>structure<br/></b></p>
<p>Audio input<br/></p>
<p>Audio output<br/></p>
<p>Meter taps<br/></p>
<p>Coefficients<br/></p>
<p>Coefficients<br/></p>
<p>Private Data<br/></p>
<p>Private Data<br/></p>
<p>...<br/></p>
<p>...<br/></p>
<p>...<br/></p>
<p>...<br/></p>
<p><b>Coefficient block<br/></b></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p><b>Coefficient block<br/></b></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p><b>Private</b> <b>data</b> <b>block<br/></b></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p><b>Private</b> <b>data</b> <b>block<br/></b></p>
<p>.<br/></p>
<p>.<br/></p>
<p>.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>70 Module Documentation<br/></b></p>
<p>When the AAX host calls a plug-in's algorithm callback, it provides a block of memory describing the state of the<br/>plug-in. This block of memory, known as the algorithm's context, can be thought of as the algorithm's interface to<br/>the outside world: when another part of the plug-in interacts with the algorithm, it does so by posting information to<br/>the algorithm's context.<br/>//==============================================================================<br/>// Component context definitions<br/>//==============================================================================<br/>// Context structure<br/>struct SDemoDist_Alg_Context<br/>{<br/></p>
<p>int32_t * mCtrlBypassP; // Coefficient message destination<br/>float * mCtrlMixP; // Coefficient message destination<br/>float * mCtrlInpGP; // Coefficient message destination<br/>float * mCtrlOutGP; // Coefficient message destination<br/>SDemoDist_DistCoefs * mCoefsDistP; // Coefficient message destination<br/>SDemoDist_FiltCoefs * mCoefsFiltP; // Coefficient message destination<br/>CSimpleBiquad * mBiquads; // Private data<br/>float* * mInputPP; // Audio signal input<br/>float* * mOutputPP; // Audio signal output<br/>float* * mMeterTapsPP; // Meter signal output<br/></p>
<p>};<br/></p>
<p>It is important to note that, in most circumstances, algorithm callbacks do not own their own memory. The algorithm<br/>and its memory is managed entirely by the host or shell environment, and relies on the host-provided context<br/>structure for all state information.<br/></p>
<p>If persistent memory is required, algorithms can register for block(s) of persistent state date via the<br/>AAX_IComponentDescriptor::AddPrivateData() API (as in SDemoDist_Alg_Context::mBiquads above.) A plug-<br/>in may store state data in the resulting &quot;private data&quot; context fields and this data will be restored by the host when<br/>the algorithm is next called. See the Persistent algorithm memory section below for more information.<br/></p>
<p><b>12.5.4 Communicating with the algorithm<br/></b></p>
<p>Plug-ins communicate with their algorithms via a buffered, host-managed message system. The host guarantees<br/>that messages posted to this system will be delivered to the applicable context field and that the algorithm's context<br/>is up to date every time the component is entered.<br/></p>
<p>This system utilizes a static data routing scheme that is defined in the plug-in's describe method. Once the routing<br/>scheme has been defined, the plug-in may post packets of data to its algorithm using AAX_IController::PostPacket().<br/></p>
<p>In order to reference the fields in its algorithm's context, the plug-in's host-side code uses unique identifiers gener-<br/>ated with the AAX_FIELD_INDEX macro:<br/>enum EDemoDist_Alg_PortID<br/>{<br/></p>
<p>eAlgPortID_BypassIn = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mCtrlBypassP)<br/>,eAlgPortID_MixIn = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mCtrlMixP)<br/>,eAlgPortID_InpGIn = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mCtrlInpGP)<br/>,eAlgPortID_OutGIn = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mCtrlOutGP)<br/>,eAlgPortID_CoefsDistIn = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mCoefsDistP)<br/>,eAlgPortID_CoefsFilterIn = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mCoefsFiltP)<br/>,eAlgFieldID_Biquads = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mBiquads)<br/>,eDemoDist_AlgFieldID_AudioIn = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mInputPP)<br/>,eDemoDist_AlgFieldID_AudioOut = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mOutputPP)<br/>,eAlgFieldID_MeterTaps = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mMeterTapsPP)<br/></p>
<p>};<br/></p>
<p>See Description callback for more information about registering context fields and defining a plug-in's message<br/>routing scheme.<br/></p>
<p><b>12.5.5 Algorithm initialization<br/></b></p>
<p>The following events occur before the AAX host begins calling a plug-in's algorithm:<br/></p>
<p>&#8226; The Effect's data model is initialized<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.5 Real-time algorithm callback 71<br/></b></p>
<p>&#8226; An initial call to AAX_IEffectParameters::ResetFieldData() is made for each private data block in the algorithm.<br/>&#8226; An initial call to AAX_IEffectParameters::GenerateCoefficients() is made and coefficient packets are dis-<br/></p>
<p>patched to each of the algorithm's data ports based on the default model state.<br/>&#8226; All packets are delivered and initial algorithm context state is set<br/>&#8226; If one has been registered, the algorithm's optional initialization callback is called with the default context<br/>&#8226; (Algorithmic processing begins)<br/></p>
<p><b>12.5.5.1 Private data initialization<br/></b></p>
<p>To initialize an algorithm's private data blocks, AAX_IEffectParameters::ResetFieldData() is called on the host for<br/>each block in the algorithm. The host uses this method to acquire a default initialized memory block for each private<br/>data port, which is then copied into the algorithm's memory pool and provided to its context.<br/></p>
<p>The default implementation of this method in AAX_CEffectParameters will initialize the data to zero.<br/></p>
<p><b>See also<br/></b>Persistent algorithm memory<br/></p>
<p><b>12.5.5.2 Optional initialization callback<br/></b></p>
<p>If any additional initialization or de-initialization steps are required for proper operation of the algorithm, an optional<br/>initialization routine may be registered and associated with the algorithm's processing callback. This initialization<br/>routine will be called in the same device / memory space as the algorithm's processing context. The initialization<br/>callback is provided with the algorithm's default context and is called both before every new instance of the Effect<br/>begins its algorithm render callbacks and before every instance is destroyed.<br/></p>
<p>This initialization routine is provided in Describe as an argument to the platform's AddProcessProc registration<br/>method:<br/></p>
<p>&#8226; AAX_IComponentDescriptor::AddProcessProc_Native()<br/>&#8226; AAX_IComponentDescriptor::AddProcessProc_TI()<br/></p>
<p><b>Host Compatibility Notes </b>As of Pro Tools 10.2.1 an algorithm's initialization calllback routine will have up to 5<br/>seconds to execute.<br/></p>
<p><b>See also<br/></b>AAX_CInstanceInitProc<br/></p>
<p><b>12.5.6 Algorithm processing<br/></b></p>
<p>Once the algorithm has been initialized and processing begins, the algorithm function is called regularly by the host<br/>audio engine. The algorithm may read the context data provided by the host and is responsible for writing data to<br/>all of the samples in its output buffers each time it is executed.<br/></p>
<p><b>Note<br/></b>The data in an algorithm's output buffers is not initialized before the algorithm is called, thus the algorithm<br/>must always write data into all output samples. This is to ensure equivalent behavior between all platforms,<br/>some of which do not have the resource budget to pre-initialize output data buffers.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>72 Module Documentation<br/></b></p>
<p><b>12.5.7 Persistent algorithm memory<br/></b></p>
<p>An AAX plug-in algorithm may contain one or more private data ports in its context. These are the only context<br/>fields in which an algorithm may store persistant state data.<br/></p>
<p><b>12.5.7.1 Private memory characteristics<br/></b></p>
<p>Each private data port is a pointer to a preallocated block of memory. The size of each port is defined during<br/>Describe when the port is registered. On DSP systems, the plug-in may request that the data block be placed in the<br/>chip's external memory.<br/></p>
<p>Once private data is allocated by the plug-in host or DSP shell, it will not be relocated or re-allocated until the<br/>algorithm is destroyed (see Optional initialization callback)<br/></p>
<p><b>12.5.7.2 Private data port registration<br/></b></p>
<p>Private data ports are registered during Describe via AAX_IComponentDescriptor::AddPrivateData(). This<br/>method defines the size of the data block that will be allocated as well as an initialization callback with format<br/>AAX_CInitPrivateDataProc.<br/></p>
<p><b>12.5.7.3 Private data initialization<br/></b></p>
<p>AAX_IEffectParameters::ResetFieldData() is called on the host for both Native and DSP plug-ins. For DSP plug-ins,<br/>the initialized data block is copied to the DSP by the AAX host following the initialization callback. The initialization<br/>callbacks for a plug-in's private data blocks are called after all host modules have been initialized and before the<br/>algorithm's optional initialization callback.<br/></p>
<p><b>See also<br/></b>Algorithm initialization<br/></p>
<p><b>12.5.7.4 Private data communication<br/></b></p>
<p>It is possible to transfer data to and from the algorithm's private data blocks using the AAX_IPrivateDataAccess<br/>interface, which is available in a TimerWakeup context through the AAX_IEffectDirectData interface. For more<br/>information about this API, see auxinterface_directdata_privatedataaccess.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.5 Real-time algorithm callback 73<br/></b></p>
<p><b>12.5.8 Example algorithm callback<br/></b></p>
<p>As a final example, the code below describes a simple audio processing component. The component's context<br/>contains one message pointer to receive incoming &quot;gain&quot; parameter values, as well as one audio data input, &quot;pdI&quot;,<br/>and one audio data output, &quot;pdO&quot;. Additionally there is a message pointer to receive &quot;bypass&quot; on/off values. The<br/>host calls the component each time a new input sample buffer must be processed, and each time the component is<br/>called the host ensures that all context fields are up-to-date.<br/>void AAX_CALLBACK MyPlugIn_AlgorithmProcessFunction(<br/></p>
<p>SMyPlugIn_Alg_Context * const inInstancesBegin [],<br/>const void * inInstancesEnd)<br/>{<br/></p>
<p>// Get a pointer to the beginning of the memory block table<br/>SMyPlugIn_Alg_Context* AAX_RESTRICT instance = inInstancesBegin [0];<br/>//--------- Iterate over plug-in instances ---------//<br/>for (SMyPlugIn_Alg_Context * const * walk = inInstancesBegin; walk &lt; inInstancesEnd; ++walk)<br/>{<br/></p>
<p>instance = *walk;<br/>//--------- Retrieve instance-specific information ---------//<br/>//<br/>const SMyPlugIn_CoefsGain* const AAX_RESTRICT coefsGainP = instance-&gt;mCoefsGainP; // Input<br/></p>
<p>(const)<br/>const int32_t bypass = *instance-&gt;mCtrlBypassP;<br/>const float gain = coefsGainP-&gt;mGain;<br/>//--------- Run processing loop over each input channel ---------//<br/>//<br/>for (int ch = 0; ch &lt; kNumChannelsIn; ch++) // Iterate over all input channels<br/>{<br/></p>
<p>//--------- Run processing loop over each sample ---------//<br/>//<br/>for (int t = 0; t &lt; kAudioWindowSize; t++)<br/>{<br/></p>
<p>float* const AAX_RESTRICT pdI = instance-&gt;mInputPP [ch];<br/>float* const AAX_RESTRICT pdO = instance-&gt;mOutputPP [ch];<br/>if ( pdI &amp;&amp; pdO )<br/>{<br/></p>
<p>pdO [t] = gain * pdI [t];<br/>if (bypass) { pdO [t] = pdI [t]; }<br/></p>
<p>}<br/>} // Go to the next sample<br/></p>
<p>} // Go to next channel<br/>} // End instance-iteration loop<br/></p>
<p>}<br/></p>
<p><b>12.5.9 Port Types and Behavior<br/></b></p>
<p>In this section, we will examine the various kinds of ports that can be used by the algorithm component in an AAX<br/>plug-in:<br/></p>
<p>1. Standard message input<br/>2. Internal state storage<br/>3. Metering output<br/>4. Environment variable retrieval<br/>5. Other functionality enhancement<br/></p>
<p><b>12.5.9.1 Standard message input<br/></b></p>
<p>Most ports will function as pointers to incoming data. This data can have any type. For example, an algorithm's<br/>context may include a port of type float&#8727; to receive incoming float data and another port of type SMyCustom&#8592;&#8617;<br/>Structure&#8727; to receive incoming SMyCustomStructure data.<br/></p>
<p>Like all registered context fields, input ports are managed by the hosting environment such that they always point<br/>to the most recently received data at the time that the algorithm callback is entered. The algorithm may not store or<br/>alter data in a standard message input port: this data is available as read-only input. If data is stored in the space<br/>allocated for the port's data then the result will be undefined behavior.<br/></p>
<p>To define a standard message input port, a plug-in should call AAX_IComponentDescriptor::AddDataInPort().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>74 Module Documentation<br/></b></p>
<p><b>12.5.9.2 Internal state storage<br/></b></p>
<p>Most plug-ins require local data to be accessible to their algorithms. These may be static data, such as lookup<br/>tables, or dynamic data, such as coefficient smoothing history or delay lines. In the DemoDist sample plug-in,<br/>SDemoDist_Alg_Context::mBiquads is an example of this type of port: it is not modified by any other<br/>component and DemoDist_AlgorithmProcessFunction() relies on the mBiquads data persisting be-<br/>tween processing calls.<br/></p>
<p>A component that has registered a private data field is given access to a block of private data. Although the<br/>memory in this block will be allocated by the host, its data is fully owned by the component. Because this data is<br/>considered private to its parent component, other components cannot overwrite or target this data. Plug-ins that<br/>need to transmit data directly between their algorithms' private data ports and their other modules may use the<br/>AAX_IEffectDirectData interface, which provides an API for reading from or writing to this data from outside of the<br/>algorithm callback.<br/></p>
<p>The plug-in's data model includes an initialization function that is called by the AAX host at the time of plug-in<br/>instantiation and &quot;reset&quot; events. This initialization method is called on the host for both Native and DSP plug-ins.<br/>Since this method is part of the plug-in's data model, it has direct access to plug-in state information.<br/></p>
<p><b>12.5.9.3 Metering output<br/></b></p>
<p>Plug-in metering ports are populated with an array of float values, or 'taps'. One tap is provided per plug-in meter.<br/>The algorithm writes per-buffer peak values to this port and the AAX host applies standardized ballistics to these<br/>values. Both raw and processed meter values are available to the plug-in's GUI.<br/></p>
<p><b>12.5.9.4 Environment variable retrieval<br/></b></p>
<p>Another use of ports is to receive data from the AAX host describing the execution environment. For example, an<br/>algorithm may include a port to receive the number of samples in its processing window or the sample rate. These<br/>services are provided automatically by the host once the component registers ports for them.<br/></p>
<p><b>12.5.9.5 Other functionality enhancement<br/></b></p>
<p>An algorithm component may use ports to gain additional functionality that is provided by the host. For example,<br/>an algorithm that will be compiled for accelerated environments may take advantage of the TI chip's Direct Memory<br/>Access functionality by registering a DMA port. The host will then allow this port to access memory directly using<br/>AAX's DMA APIs.<br/></p>
<p><b>12.5.10 Additional Information<br/></b></p>
<p>For information about optional features for the algorithm processing callback, see the following Additional AAX features<br/>documentation:<br/></p>
<p>&#8226; Direct Memory Access<br/></p>
<p>&#8226; Background processing callback<br/></p>
<p>Collaboration diagram for Real-time algorithm callback:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.6 Data model interface 75<br/></b></p>
<p><b>12.6 Data model interface<br/></b></p>
<p><b>12.6.1<br/></b></p>
<p>The interface for an AAX Plug-in's data model.<br/></p>
<p><b>:Implemented by the Plug-In<br/></b></p>
<p>The interface for an instance of a plug-in's data model. A plug-in's implementation of this interface is responsible<br/>for creating the plug-in's set of parameters and for defining how the plug-in will respond when these parameters are<br/>changed via control updates or preset loads. In order for information to be routed from the plug-in's data model to its<br/>algorithm, the parameters that are created here must be registered with the host in the plug-in's Description callback.<br/></p>
<p>At initialization, the host provides this interface with a reference to AAX_IController, which provides access from<br/>the data model back to the host. This reference provides a means of querying information from the host such as<br/>stem format or sample rate, and is also responsible for communication between the data model and the plug-in's<br/>(decoupled) algorithm. See Real-time algorithm callback.<br/></p>
<p>You will most likely inherit your implementation of this interface from AAX_CEffectParameters, a default implementa-<br/>tion that provides basic data model functionality such as adding custom parameters, setting control values, restoring<br/>state, generating coefficients, etc., which you can override and customize as needed.<br/></p>
<p>The following tags appear in the descriptions for methods of this class and its derived classes:<br/></p>
<p>&#8226; CALL: Components in the plug-in should call this method to get / set data in the data model.<br/></p>
<p><b>Note<br/></b>&#8226; This class always inherits from the latest version of the interface and thus requires any subclass to imple-<br/></p>
<p>ment all the methods in the latest version of the interface. The current version of AAX_CEffectParameters<br/>provides a convenient default implementation for all methods in the latest interface.<br/></p>
<p>&#8226; Except where noted otherwise, the parameter values referenced by the methods in this interface are<br/>normalized values. See Parameter Manager for more information.<br/></p>
<p><b>Legacy Porting Notes </b>In the legacy plug-in SDK, these methods were found in CProcess and CEffect&#8592;&#8617;<br/>Process. For additional CProcess methods, see AAX_IEffectGUI.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>76 Module Documentation<br/></b></p>
<p><b>12.6.2 Related classes<br/></b></p>
<p>AAX_IACFEffectParameters<br/></p>
<p>AAX_IEffectParameters<br/></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_IController AAX_IAutomationDelegate<br/></p>
<p>AAX_CEffectGUI<br/></p>
<p><b>Figure 12.2 Classes related to AAX_IEffectParameters by inheritance or composition<br/></b></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_CParameterManager AAX_CChunkDataParser AAX_CPacketDispatcher<br/></p>
<p><b>Figure 12.3 Classes owned as member objects of AAX_CEffectParameters<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_CEffectParameters<br/></p>
<p>Default implementation of the AAX_IEffectParameters interface.<br/>&#8226; class AAX_IACFEffectParameters<br/></p>
<p>The interface for an AAX Plug-in's data model.<br/>&#8226; class AAX_IACFEffectParameters_V2<br/></p>
<p>Supplemental interface for an AAX Plug-in's data model.<br/>&#8226; class AAX_IACFEffectParameters_V3<br/></p>
<p>Supplemental interface for an AAX Plug-in's data model.<br/>&#8226; class AAX_IACFEffectParameters_V4<br/></p>
<p>Supplemental interface for an AAX Plug-in's data model.<br/>&#8226; class AAX_IEffectParameters<br/></p>
<p>The interface for an AAX Plug-in's data model.<br/></p>
<p>Collaboration diagram for Data model interface:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.7 Data model overrides interface 77<br/></b></p>
<p><b>12.7 Data model overrides interface<br/></b></p>
<p><b>12.7.1<br/></b></p>
<p><b>Chunk methods<br/></b></p>
<p>These methods are used to save and restore collections of plug-in state information, known as chunks. Chunks are<br/>used by the host when saving or restoring presets and session settings and when providing &quot;compare&quot; functionality<br/>for plug-ins.<br/></p>
<p>The default implementation of these methods in AAX_CEffectParameters supports a single chunk that includes<br/>state information for all of the plug-in's registered parameters. Override all of these methods to add support for<br/>additional chunks in your plug-in, for example if your plug-in contains any persistent state that is not encapsulated<br/>by its set of registered parameters.<br/></p>
<p><b>Warning<br/></b>Remember that plug-in chunk data may be loaded on a different platform from the one where it is saved. All<br/>data structures in the chunk must be properly data-aligned for compatibility across all platforms that the plug-<br/>in supports. See AAX_ALIGN_FILE_ALG for notes about common cross-platform pitfalls for data structure<br/>alignment.<br/></p>
<p>For reference, see also:<br/></p>
<p>&#8226; AAX_CChunkDataParser<br/></p>
<p>&#8226; AAX_SPlugInChunk<br/></p>
<p>&#8226; virtual AAX_Result AAX_IACFEffectParameters::GetNumberOfChanges (int32_t &#8727;oNumChanges) const =0<br/>Retrieves the number of parameter changes made since the plug-in's creation.<br/></p>
<p><b>12.7.2 Function Documentation<br/></b></p>
<p><b>12.7.2.1 GetNumberOfChanges()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetNumberOfChanges (<br/>int32_t &#8727; oNumChanges ) const [pure virtual]<br/></p>
<p>Retrieves the number of parameter changes made since the plug-in's creation.<br/></p>
<p>This method is polled regularly by the host, and can additionally be triggered by some events such as mouse<br/>clicks. When the number provided by this method changes, the host subsequently calls CompareActiveChunk() to<br/>determine if the plug-in's Compare light should be activated.<br/></p>
<p>The value provided by this method should increment with each call to UpdateParameterNormalizedValue()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>78 Module Documentation<br/></b></p>
<p><b>Parameters<br/></b>out oNumChanges Must be set to indicate the number of parameter changes that have occurred since<br/></p>
<p>plug-in initialization.<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p>Collaboration diagram for Data model overrides interface:<br/></p>
<p><b>12.8 GUI interface<br/></b></p>
<p><b>12.8.1<br/></b></p>
<p>The interface for a AAX Plug-in's user interface.<br/></p>
<p>The GUI interface includes methods for handling the plug-in's GUI window and events.<br/></p>
<p><b>Accessing the window<br/></b></p>
<p>In AAX, the plug-in's window is provided as a native window pointer through the AAX_IViewContainer interface. The<br/>plug-in may also use this interface to forward events in its window back to the host for handling.<br/></p>
<p><b>Default implementation<br/></b></p>
<p>A default implementation of the GUI interface, AAX_CEffectGUI, is compiled in to the AAX library. This class<br/>includes a few helper methods and other extensions to the base interface. Of particular note are several additional<br/>pure virtual methods that are used by this class to extend the GUI API, and which must be overridden by any<br/>inheriting class.<br/></p>
<p><b>Extensions<br/></b></p>
<p>The AAX SDK includes several examples of how the basic GUI interface may be extended to support native or<br/>third-party GUI frameworks. These examples are not a core part of the SDK, but are provided to developers as a<br/>convenience when incorporating their own chosen GUI framework.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CEffectGUI<br/></p>
<p>Default implementation of the AAX_IEffectGUI interface.<br/>&#8226; class AAX_IACFEffectGUI<br/></p>
<p>The interface for a AAX Plug-in's GUI (graphical user interface).<br/>&#8226; class AAX_IEffectGUI<br/></p>
<p>The interface for a AAX Plug-in's user interface.<br/>&#8226; class AAX_IViewContainer<br/></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used both by clients of the AAX host and by effect<br/>components.<br/></p>
<p>Collaboration diagram for GUI interface:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.9 AAX communication protocols 79<br/></b></p>
<p><b>12.9 AAX communication protocols<br/></b></p>
<p>How to transfer data between different parts of an AAX plug-in.<br/>AAX is a highly modular architecture. This section describes the various means by which AAX plug-in modules may<br/>communicate with one another and with the host.<br/>There are two fundamental categories of communication in AAX:<br/></p>
<p>1. Communication with the C++ interface objects<br/>2. Communication with the real-time algorithm<br/></p>
<p><b>12.9.1 Communication with the C++ interface objects<br/></b></p>
<p><b>12.9.1.1 Direct host communication<br/></b></p>
<p>Most communication between the AAX host and the plug-in is accomplished via the AAX_IController interface. This<br/>interface contains methods for such things as:<br/></p>
<p>&#8226; Retrieving environment information such as the current sample rate<br/>&#8226; Getting and setting Effect parameters such as the Effect's algorithmic delay<br/>&#8226; Accessing host-managed information such as Plug-in meters and MIDI<br/>&#8226; Accessing other host-managed communications protocols like Data packets and MIDI<br/></p>
<p>In addition, the GUI uses a separate interface for managing view and event details with the host. This interface,<br/>AAX_IViewContainer, includes methods for:<br/></p>
<p>&#8226; Retrieving information like the raw view and the currently held modifier keys<br/>&#8226; Requesting changes to view parameters (e.g. size)<br/>&#8226; Passing GUI events on to the host.<br/></p>
<p><b>&#8211; </b>This is an important function because the host may require its own specific behavior for certain events.<br/>For example, a command-control-option click in Pro Tools should bring up the parameter's automation<br/>menu.<br/></p>
<p><b>12.9.1.2 Custom data blocks<br/></b></p>
<p>Often it is necessary to transmit arbitrary blocks of custom plug-in data between different plug-in modules. In AAX,<br/>this is accomplished by &quot;pushing&quot; data to and &quot;pulling&quot; it from the plug-in's data model.<br/>The abstract data model interface includes two custom data methods for this:<br/></p>
<p>&#8226; AAX_IEffectParameters::GetCustomData()<br/>&#8226; AAX_IEffectParameters::SetCustomData()<br/></p>
<p>It is the data model's job to act as a go-between when custom data must be transmitted between a plug-in's other<br/>modules.<br/>For example, a plug-in may wish to send analysis data from its direct data module to its GUI. In this situation, the<br/>Direct Data object would call SetCustomData() to update the data model whenever new data was available, while<br/>the GUI would &quot;pull&quot; the most up-to-date data via GetCustomData() whenever an update was required.<br/>Note that the default implementations of these methods are empty and thus all implementation details, including<br/>thread safety guards, are left to the plug-in.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>80 Module Documentation<br/></b></p>
<p><b>12.9.1.3 Notifications<br/></b></p>
<p>The data model and GUI interfaces include notification hook methods. These methods used for host-to-Effect notifications<br/>by default, but may also be called with custom notification IDs in order to create custom notifications within a plug-in.<br/></p>
<p><b>12.9.1.4 Direct pointer sharing<br/></b></p>
<p>If co-location is guaranteed, plug-in modules may directly share data pointers. For example, a non-real-time plug-in's<br/>Host Processor object may share a this pointer with its data model object.<br/></p>
<p>To guarantee co-location between modules that could normally be placed into different memory spaces by the host,<br/>use &quot;constraint&quot; properties:<br/></p>
<p>&#8226; AAX_eProperty_Constraint_Location<br/></p>
<p>&#8226; AAX_eProperty_Constraint_Topology<br/></p>
<p>To help avoid forwards-compatibility issues with future devices that support AAX, these constraints should be set<br/>whenever a plug-in requires co-location of its components. Note, however, that using a design that relies on co-<br/>location will prevent the plug-in from running in distributed environments and should therefore be avoided when<br/>possible.<br/></p>
<p><b>12.9.2 Communication with the real-time algorithm<br/></b></p>
<p>An AAX plug-in's algorithm is essentially a stateless callback and, therefore, all of its state data must at some level<br/>be managed by the host. This model is fundamentally different from the other plug-in modules, which are each<br/>objects with their own memory and state.<br/></p>
<p>Most algorithmic data management is performed via the algorithm's context structure. More information about<br/>memory management in AAX real-time algorithms can be found here.<br/></p>
<p><b>12.9.2.1 Data packets<br/></b></p>
<p>The most common form of communication with a plug-in's real-time algorithm callback is the transmission of read-<br/>only data from the data model to the context structure.<br/></p>
<p>AAX includes a dedicated API for this task that provides buffered, optimized delivery of read-only data packets to<br/>the algorithm. For more information, see Communicating with the algorithm .<br/></p>
<p><b>12.9.2.2 Host-managed context fields<br/></b></p>
<p>Algorithms can also send data to the host and receive environment information through dedicated context<br/>fields. For example, the host can provide access to DMA facilities through an object accessed via a DMA<br/>field, and a plug-in can report meter values to the host via a dedicated meter field. For more information, see<br/>Communicating with the algorithm .<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.10 AAX Format Specification 81<br/></b></p>
<p><b>12.9.2.3 Direct data transfers<br/></b></p>
<p>When other modules in the plug-in must interact directly with the algorithm's state information this is accomplished<br/>via the Direct Data interface. This interface provides an idle-time context in which the plug-in may read from or write<br/>to the algorithm's private data memory. These transfers are unbuffered and therefore the plug-in must handle any<br/>appropriate thread-safety considerations. Collaboration diagram for AAX communication protocols:<br/></p>
<p><b>12.10 AAX Format Specification<br/></b></p>
<p>Additional requirements for AAX plug-ins.<br/></p>
<p>This document describes aspects of the AAX plug-in format specification that are beyond the scope of the<br/>common interface classes and callbacks that the plug-in must implement.<br/></p>
<p><b>12.10.1 .aaxplugin Directory Structure<br/></b></p>
<p>AAX uses a bundle packaging format. On macOS, AAX plug-ins are built as standard OS bundles, while on Windows<br/>they are simple directories. All AAX plug-in bindles must use the .aaxplugin extension and the following directory<br/>structure:<br/></p>
<p>&#8226; /Contents<br/></p>
<p><b>&#8211; </b>/Resources<br/>* This directory contains all of the additional resource files that will be needed by the plug-in at run<br/></p>
<p>time such as DSP algorithm DLLs, XML page tables, and image files for the plug-in's GUI<br/>* AAXProperties.xml (optional)<br/></p>
<p>&#183; AAX Properties file for the bundle<br/></p>
<p><b>&#8211; </b>/MacOS<br/>* Contains the plug-in's macOS binary (Mach-O)&#8727;<br/></p>
<p><b>&#8211; </b>/Win32<br/>* Contains the plug-in's Windows x86 binary&#8727;<br/></p>
<p><b>&#8211; </b>/x64<br/>* Contains the plug-in's Windows x64 binary&#8727;<br/></p>
<p><b>&#8211; </b>/Factory Presets (optional)<br/>* This directory includes built-in plug-in presets. For more information, see Presets and settings management<br/></p>
<p>in the Pro Tools Guide documentation<br/></p>
<p><b>&#8211; </b>PkgInfo (macOS only)<br/>* This file must include the concatenation of the plug-in's CFBundlePackageType (TDMw or<br/>BNDL) and CFBundleSignature (PTul)<br/></p>
<p><b>&#8211; </b>Info.plist (macOS only)<br/>* The plug-in's property list<br/></p>
<p>&#8226; desktop.ini (Windows only)<br/></p>
<p><b>&#8211; </b>The .aaxplugin directory's view resource file, used to set its custom icon in Windows Explorer<br/></p>
<p>&#8226; PlugIn.ico (Windows only)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>82 Module Documentation<br/></b></p>
<p><b>&#8211; </b>Custom plug-in icon file<br/></p>
<p>&#8727;See the following compatibility notes<br/></p>
<p><b>Host Compatibility Notes<br/></b></p>
<p>&#8226; The plug-in's binary filename must be the same as the outer .aaxplugin bundle name<br/></p>
<p><b>Host Compatibility Notes<br/></b></p>
<p>&#8226; On Windows, the plug-in binary (DLL) must use the &quot;.aaxplugin&quot; suffix; i.e. the DLL must use exactly the<br/>same name as the outer .aaxplugin folder. On macOS, the plug-in binary does not require a specific suffix.<br/></p>
<p><b>Host Compatibility Notes<br/></b></p>
<p>&#8226; On Windows, the plug-in's binary filename (and therefore also the outer .aaxplugin file name) must not contain<br/>any spaces. There is a bug in AAE that will prevent binaries with spaces from being loaded properly. This is<br/>logged as PTSW-189928.<br/></p>
<p><b>Note<br/></b>This directory structure is also used for plug-in installer directories in the VENUE plug-in installer system. See<br/>VENUE Plug-in installer specification for more information.<br/></p>
<p><b>12.10.2 Required Symbols<br/></b></p>
<p>The following symbols are required in any AAX plug-in and must not be stripped from the binary:<br/></p>
<p>&#8226; _ACFRegisterPlugin<br/></p>
<p>&#8226; _ACFRegisterComponent<br/></p>
<p>&#8226; _ACFGetClassFactory<br/></p>
<p>&#8226; _ACFCanUnloadNow<br/></p>
<p>&#8226; _ACFStartup<br/></p>
<p>&#8226; _ACFShutdown<br/></p>
<p>&#8226; _ACFGetSDKVersion &#8727;<br/></p>
<p><b>Host Compatibility Notes </b>&#8727;_ACFGetSDKVersion is required for 64-bit AAX plug-ins only<br/></p>
<p>Collaboration diagram for AAX Format Specification:<br/></p>
<p><b>12.11 Additional AAX features<br/></b></p>
<p><b>12.11.1<br/></b></p>
<p>How to use additional features and functionality supported by AAX.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.12 Auxiliary Output Stems 83<br/></b></p>
<p><b>Documents<br/></b>&#8226; Auxiliary Output Stems<br/></p>
<p>Routing custom audio streams from a plug-in.<br/>&#8226; Background processing callback<br/></p>
<p>Background processing support for AAX DSP and Native plug-in algorithms.<br/>&#8226; Direct Memory Access<br/></p>
<p>DMA support for AAX DSP plug-ins, with emulation for AAX Native.<br/>&#8226; Direct data access interface<br/></p>
<p>A host interface providing direct access to a plug-in's algorithm memory.<br/>&#8226; EQ and Dynamics Curve Displays<br/></p>
<p>Displaying EQ and Dynamics curves in Pro Tools, control surfaces, and other auxiliary graphical interfaces.<br/>&#8226; Hybrid Processing architecture<br/></p>
<p>An architecture combining low-latency and high-latency audio processing.<br/>&#8226; Plug-in meters<br/></p>
<p>How to manage metering data for AAX plug-ins.<br/>&#8226; MIDI<br/></p>
<p>How to route and process MIDI in AAX plug-ins.<br/>&#8226; Offline processing interface<br/></p>
<p>Advanced offline processing features.<br/>&#8226; Properties File<br/></p>
<p>Properties for an AAX plugin bundle.<br/>&#8226; Sidechain Inputs<br/></p>
<p>Routing custom audio streams to a plug-in.<br/>&#8226; Task agent interface<br/></p>
<p>A mechanism for hosts to request that plug-ins perform tasks.<br/></p>
<p>Collaboration diagram for Additional AAX features:<br/></p>
<p><b>12.12 Auxiliary Output Stems<br/></b></p>
<p>Routing custom audio streams from a plug-in.<br/></p>
<p><b>12.12.1 Overview of Auxiliary Output Stems in AAX<br/></b></p>
<p>Pro Tools has the capability to show and route multiple &quot;auxiliary&quot; outputs from a plug-in to other tracks. These are<br/>known as Auxiliary Output Stems (AOS), a stem referring to one set of outputs. A stereo stem contains two outputs,<br/>left and right, and a mono stem contains one output. The outputs will appear in the input assignment pop-up menu<br/>of each track under the category &quot;plug-in&quot;.<br/></p>
<p>Your plug-in is responsible for the definition of valid aux output paths. This definition includes the total number of<br/>outputs and the desired order of stereo and mono paths. Pro Tools will query each plug-in for available valid paths<br/>and populate its track input selector popup menus accordingly.<br/></p>
<p>Plug-ins must define the lowest available aux output number. In other words, the port number of an aux output<br/>needs to be the lowest available port number after the main outputs of the track the plug-in is instantiated on. For<br/>example, the first available aux output for the plug-in residing on a 5.1 surround track would have a port number of<br/>7, since there are 6 main outputs for the track.<br/></p>
<p>Additionally, port numbers must be declared sequentially and in the order aux output stems are added. For example,<br/>a stem cannott be added with the port number 10 if it precedes a stem with the port number 4.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>84 Module Documentation<br/></b></p>
<p><b>12.12.2 Implementing Auxiliary Output Stems<br/></b></p>
<p>The Auxiliary Output Stems API has a specific descriptor associated with it that needs to be added in Describe&#8592;&#8617;<br/>: AAX_IComponentDescriptor::AddAuxOutputStem(). Make sure this method is called for each component that<br/>supports a different stem format. For example, a mono aux output would be defined as follows:<br/>// ***************************************************************************<br/>// ROUTINE: DescribeAlgorithmComponent<br/>// Algorithm component description<br/>// ***************************************************************************<br/>static void DescribeAlgorithmComponent( AAX_IComponentDescriptor * outDesc )<br/>{<br/></p>
<p>AAX_Result err = AAX_SUCCESS;<br/></p>
<p>[...]<br/>err = outDesc-&gt;AddAuxOutputStem(0 /* first parameter is not used */,<br/></p>
<p>AAX_eStemFormat_Mono,<br/>&quot;My Auxiliary Output Channel&quot;);<br/></p>
<p>AAX_ASSERT (err == AAX_SUCCESS);<br/>[...]<br/></p>
<p>}<br/></p>
<p>The auxiliary output buffers for the plug-in will be appended to the normal output buffer array in the plug-in algorithm.<br/></p>
<p><b>Warning<br/></b>Some hosts, such as Media Composer, do not support Auxiliary Output Stems. You must clearly document<br/>that your plug-ins are not supported on these hosts; attempts by the plug-in to write data beyond the end of the<br/>audio output buffer may cause crashes and other bugs in these hosts. See Host Support for more information.<br/></p>
<p>In your plug-in's algorithm, you will simply need to account for the extra outputs when it processes the audio. Pro<br/>Tools will not automatically route your processed audio to all the extra outputs. As with main outputs, make sure<br/>the processed audio samples are placed in the auxiliary outputs' buffers as well. Collaboration diagram for Auxiliary<br/>Output Stems:<br/></p>
<p><b>12.13 Background processing callback<br/></b></p>
<p>Background processing support for AAX DSP and Native plug-in algorithms.<br/></p>
<p><b>12.13.1 On this page<br/></b></p>
<p>&#8226; Background thread description<br/></p>
<p>&#8226; Restrictions and limitations of background threads<br/></p>
<p>&#8226; Background thread performance characteristics on DSP systems<br/></p>
<p>&#8226; Background thread memory management<br/></p>
<p>&#8226; Additional information<br/></p>
<p><b>12.13.2 Background thread description<br/></b></p>
<p>Each algorithm render callback may optionally be associated with a background processing callback. This back-<br/>ground callback will be triggered regularly in an idle context on a separate thread, and can be used to perform any<br/>background task required by the algorithm.<br/></p>
<p>Background thread processing is supported for both AAX DSP and AAX Native plug-ins.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.13 Background processing callback 85<br/></b></p>
<p><b>12.13.3 Restrictions and limitations of background threads<br/></b></p>
<p>&#8226; An AAX DSP Effect that registers for background processing will not share a DSP with any other Effect type.<br/>It may share a DSP with multiple instances of its own type, but only if its resource requirements allow for this.<br/></p>
<p>&#8226; The frequency of background thread executions relative to render thread executions will vary depending on<br/>the processing situation. For example, a host may pre-process a series of audio buffers as quickly as possible<br/>during an offline render. In this case there would be many executions of the render thread callback for each<br/>execution of the background thread callback. Be sure to consider this when using the background thread<br/>feature in plug-ins that support an AudioSuite processing type.<br/></p>
<p><b>12.13.4 Background thread performance characteristics on DSP systems<br/></b></p>
<p>The background processing callback is called from a true idle thread context. On DSP accelerated platforms, this<br/>means that the callback will be triggered continuously whenever the chip is not executing an interrupt, i.e. the<br/>algorithm render callback. Since the render callback's resource requirements are well-defined (or at least strictly<br/>bounded,) the background thread's available cycles are also deterministically bounded.<br/></p>
<p>However, the background thread itself has a lower priority than the DSP shell. While the background callback's<br/>execution will not be interrupted by shell operations, it will be blocked in the event of a contention for memory<br/>resources with the shell. As a result, the number of memory operations that may be performed in this callback will<br/>be less well-defined when the host is consuming memory resources,e.g. when delivering a very large coefficient<br/>block to the DSP.<br/></p>
<p>If your TDM plug-in does not perform any resource-intensive memory operations then you can assume a guar-<br/>anteed performance level for its DSP background thread. Development tools are available that will test a plug-in<br/>by refreshing its entire context memory at every interrupt, and the background thread performance characteristics<br/>measured by these tools, plus an additional buffer to account for any pathological cases that may be missed by<br/>the performance check, should provide a guaranteed performance baseline for the background thread that will be<br/>completely safe for any Pro Tools operation scenario.<br/></p>
<p><b>12.13.5 Background thread memory management<br/></b></p>
<p>The background processing callback is not provided with any data pointers and does not have access to any facilities<br/>for managed communication with the rest of the plug-in. Therefore, the background process must use shared global<br/>data structures to interact with the render callback. Your plug-in will need to manually synchronize access to this<br/>data.<br/></p>
<p>Usually the background callback will want to interact with the render callback via the algorithm's private data blocks.<br/>Therefore, private data blocks that are provided to an algorithm's context will not be relocated by the host between<br/>calls to the render callback, and background processes can reliably access this data once provided with a pointer.<br/>The same is not true for audio buffers, meters, coefficient ports, etc. - this data can all be relocated by the host<br/>when the render callback is not executing.<br/></p>
<p><b>12.13.6 Additional information<br/></b></p>
<p><b>HDX DSP Guide<br/></b></p>
<p>&#8226; Background processing<br/>&#8226; DMA and background thread performance reporting<br/></p>
<p>Collaboration diagram for Background processing callback:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>86 Module Documentation<br/></b></p>
<p><b>12.14 Direct Memory Access<br/></b></p>
<p>DMA support for AAX DSP plug-ins, with emulation for AAX Native.<br/></p>
<p><b>12.14.1 On this page<br/></b></p>
<p>&#8226; DMA facility overview<br/></p>
<p>&#8226; DMA transfer modes<br/></p>
<p>&#8226; Registering for DMA transfers<br/></p>
<p>&#8226; DMA restrictions<br/></p>
<p>&#8226; Additional information<br/></p>
<p><b>12.14.2 DMA facility overview<br/></b></p>
<p>AAX provides an abstract interface for accessing the host environment's DMA or other memory-transfer facilities.<br/>All platform-specific details are handled by the AAX host environment, allowing plug-ins that use this interface to be<br/>re-targeted to to Native or DSP environments without changing their memory transfer implementation.<br/></p>
<p><b>12.14.3 DMA transfer modes<br/></b></p>
<p>AAX hosts may support the following DMA modes, as listed in AAX_IDma::EMode :<br/></p>
<p>&#8226; In Scatter mode, data is transferred from a linear buffer to a series of offset segments in a circular buffer. This<br/>mode is most often used to transfer data from linear internal memory to a large external memory buffer.<br/></p>
<p>&#8226; In Gather mode, data is collected from a series of offset segments in a circular buffer and concatenated in<br/>a linear buffer. This mode is most often used to transfer data from an external memory buffer to an internal<br/>memory buffer.<br/></p>
<p>&#8226; In Burst mode, data is written linearly from one location to another. Burst mode transfers may be used for<br/>linear transfers of data to or from external memory. During the transfer, the source data is broken into a series<br/>of individual bursts. This mode is included for completeness, though the Scatter/Gather modes are expected<br/>to be more appropriate for the vast majority of real-world DMA use cases.<br/></p>
<p><b>12.14.4 Registering for DMA transfers<br/></b></p>
<p>Algorithm Components register for DMA transfers by adding one or more DMA fields to their context via<br/>AAX_IComponentDescriptor::AddDmaInstance(). At runtime, each field will be populated with a valid DMA interface<br/>for the specified DMA mode.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.15 Direct data access interface 87<br/></b></p>
<p><b>12.14.5 DMA restrictions<br/></b></p>
<p>The following restrictions apply to DMA transfers on all AAX platforms:<br/></p>
<p>&#8226; The maximum burst size for any DMA transfer is 64B. The minimum burst size is 1B.<br/></p>
<p>&#8226; Only one DMA transfer request may be posted per AAX_IDma object per processing callback.<br/></p>
<p>&#8226; Scatter and Gather requests each require that the circular memory buffer be padded by at least the size of<br/>one burst<br/></p>
<p><b>12.14.6 Additional information<br/></b></p>
<p><b>HDX DSP Guide<br/></b></p>
<p>&#8226; DMA support<br/></p>
<p>&#8226; DMA and background thread performance reporting<br/></p>
<p>Collaboration diagram for Direct Memory Access:<br/></p>
<p><b>12.15 Direct data access interface<br/></b></p>
<p><b>12.15.1<br/></b></p>
<p>A host interface providing direct access to a plug-in's algorithm memory.<br/></p>
<p>This interface represents an optional component that you can add to your plug-in in order to support extended<br/>features of the AAX SDK.<br/></p>
<p>Some plug-ins require the host to retrieve non-meter data from the decoupled algorithm module to display on a<br/>GUI or perform additional computation. For example, the result of computing the audio spectrum or pitch data in<br/>the algorithm can be delivered to the host to display on-screen. This is the purpose of the AAX_IEffectDirectData<br/>interface.<br/></p>
<p>The Direct Data interface provides facilities for directly accessing a plug-in's algorithm memory. This interface may<br/>be used to transfer private data from the algorithm to other plug-in components, such as the GUI. It may also be<br/>used as an alternative to PostPacket() to perform direct writes to the algorithm's private data memory.<br/></p>
<p>To set up Direct Data, the module must be registered with the host in the plug-in's Description callback like other<br/>process pointers. To add this interface to your plug-in at describe time, call AAX_IEffectDescriptor::AddProcPtr()<br/>using the kAAX_ProcPtrID_Create_EffectDirectData selector.<br/></p>
<p>The DirectData module works for all plug-in types, including AAX Native, AAX DSP, and AAX AudioSuite.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>88 Module Documentation<br/></b></p>
<p><b>12.15.2 Convenience class<br/></b></p>
<p>AAX_CEffectDirectData, the concrete implementation of AAX_IEffectDirectData, consists of a TimerWakeup_PrivateDataAccess()<br/>function that you subclass in order to access an algorithm's private state data. This timer wakes up at a periodic<br/>interval. In this function you can read the algorithm's private data port to pull the state of an algorithm. Note that<br/>the wakeup period is variable depending on the plug-in's buffer size and running context (real time processing,<br/>AudioSuite, offline bounce, etc.) Care must be taken to ensure that any data retrieved from the algorithm is either<br/>buffered to handle the thread callback periods for the various running contexts or that the plug-in does not depend<br/>on the Direct Data timer catching every state update.<br/></p>
<p>AAX_CEffectDirectData also includes convenience accessors to the Controller and Data Model in order to help<br/>facilitate common access scenarios. Using these, you can do any computation necessary to handle the incoming<br/>algorithm state data and send results on to the Data Model and/or the GUI interface.<br/></p>
<p><b>12.15.3 Private data access interface<br/></b></p>
<p>The Direct Data API provides a TimerWakeup callback with access to AAX_IPrivateDataAccess. This reference is<br/>only valid within the context of the wakeup callback and cannot be stored to provide private data access in other<br/>contexts.<br/></p>
<p>The Private Data Access interface can be used to directly read from and write to an algorithm's private data. These<br/>operations are not synchronized with the algorithm's processing callback, which may asynchronously pre-empt the<br/>read or write operations. Plug-ins that use this interface should buffer all access to their private data to ensure data<br/>integrity.<br/></p>
<p><b>12.15.4 Communicating with other modules<br/></b></p>
<p>The Direct Data API does not include any facilities for inter-module communication. In order to transfer data<br/>between a plug-in's AAX_IEffectDirectData object and its other objects, dedicated custom data methods in<br/>those objects' interfaces should be used. For example, to communicate with the plug-in's data model, use<br/>AAX_IEffectParameters::GetCustomData() and AAX_IEffectParameters::SetCustomData()<br/></p>
<p><b>See also<br/></b>Hybrid Processing architecture for another approach to transferring large amounts of (audio) data between<br/>the algorithm callback and the plug-in's data model.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CEffectDirectData<br/></p>
<p>Default implementation of the AAX_IEffectDirectData interface.<br/>&#8226; class AAX_IACFEffectDirectData<br/></p>
<p>Optional interface for direct access to a plug-in's alg memory.<br/>&#8226; class AAX_IACFPrivateDataAccess<br/></p>
<p>Interface for the AAX host's data access functionality.<br/>&#8226; class AAX_IEffectDirectData<br/></p>
<p>The interface for a AAX Plug-in's direct data interface.<br/>&#8226; class AAX_IPrivateDataAccess<br/></p>
<p>Interface to data access provided by host to plug-in.<br/></p>
<p>Collaboration diagram for Direct data access interface:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.16 EQ and Dynamics Curve Displays 89<br/></b></p>
<p><b>12.16 EQ and Dynamics Curve Displays<br/></b></p>
<p><b>12.16.1<br/></b></p>
<p>Displaying EQ and Dynamics curves in Pro Tools, control surfaces, and other auxiliary graphical interfaces.<br/></p>
<p><b>About </b>Pro Tools, control surfaces, and other auxiliary displays connected to the AAX host may provide a curve<br/>data display to enhance the graphical representation of the plug-in's state.<br/></p>
<p>A &quot;bouncing ball&quot; meter may also be overlaid within the curve data presentation for Dynamics plug-ins.<br/></p>
<p>Pro Tools Mix Window displaying EQ plug-in instances<br/></p>
<p>Pro Tools | S6 MTM display showing a Dynamics plug-in instance with bouncing-ball metering<br/></p>
<p><b>Requirements<br/></b></p>
<p><b>Host Compatibility Notes </b>For S6 control surface displays, see PT-226228 and PT-226227 in the Known Issues<br/>page for more information about the requirements listed in this section.<br/></p>
<p>These are the requirements for supporting the AAX curve data display features:<br/></p>
<p>&#8226; To support EQ curve data displays, a plug-in must support AAX_IEffectParameters::GetCurveData()<br/>&#8226; To support Dynamics curve data displays, a plug-in must also support AAX_IEffectParameters::GetCurveDataDisplayRange()<br/></p>
<p>for the Dynamics curve data types.<br/></p>
<p>The AAX host will only query and display curve data for plug-ins of the applicable Category, as specified in the<br/>AAX_ECurveType documentation.<br/></p>
<p>In order to present a bouncing-ball metering display, Dynamics plug-ins must also support AAX_IEffectParameters::GetCurveDataMeterIds()<br/>in addition to the two other curve data methods. This feature is always optional: a Dynamics plug-in may present a<br/>curve only without support for a bouncing-ball meter overlay.<br/></p>
<p><b>Pro Tools Implementation </b>There are three different kinds of calls that Pro Tools will make when querying EQ<br/>plug-ins for curve data:<br/></p>
<p>&#8226; An initial query with a small set of points. This query is used only to determine whether the plug-in supports<br/>the EQ Curve display feature. The result data is not used. If the plug-in does not support the feature it must<br/>return an error value from GetCurveData()<br/></p>
<p>&#8226; A normal full-curve query to get the base curve data across the full display range<br/>&#8226; One or more targeted queries around any detected inflection points. These queries are used to increase<br/></p>
<p>display resolution for plug-ins with very narrow Q settings.<br/></p>
<p>Pro Tools will call GetCurveData() from a thread in a low-priority thread pool. Most other Pro Tools operations will<br/>not be blocked by the execution of this method, though note that if a control surface is also issuing queries then the<br/>method may be called concurrently from multiple host threads.<br/></p>
<p>In Pro Tools, curve updates are triggered by incrementing the plug-in's change counter. This is the counter value<br/>returned from the GetNumberOfChanges() method in the plug-in. This counter is updated automatically when any<br/>plug-in parameter changes.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>90 Module Documentation<br/></b></p>
<p><b>Testing </b>There are several ways to test a plug-in's S6 curve implementation:<br/></p>
<p><b>View the plug-in using Pro Tools or another client app or control surface with curve display support </b>The<br/>best way to test your plug-in's curve data display support is to use a real application or control surface to test the<br/>behavior of your plug-in with real user workflows. For EQ plug-ins you can use the EQ Curve display in the Pro<br/>Tools Mix Window.<br/></p>
<p><b>View the plug-in using the S6 Surfulator software to emulate an S6 control surface </b>You can view the plug-<br/>in's curve data on the emulated MTM module display. The emulator runs the same software as a true S6 system,<br/>so the curve representation in the emulator will be accurate to what would be displayed on S6 hardware.<br/></p>
<p><b>Test EQ and Dynamics curves at high resolution within Pro Tools using the &quot;TestGetCurveData&quot; DigiOption<br/></b>See Using DigiOptions for more information about this option.<br/></p>
<p>TestGetCurveData EQ graph in plug-in header<br/></p>
<p><b>Use the aaxh dish which is included in the DSH Test Tools package to check your plug-in's curve data<br/></b></p>
<p>dsh&gt; load_dish aaxh<br/>dsh&gt; loadpi &quot;/path/to/your/plug-in.aaxplugin&quot;<br/>dsh&gt; listeffects<br/>View the list of effects in your plug-in and determine which effect you want to test, if there are more than one<br/>dsh&gt; instantiateforcontext {plugin: 0, effect: 0, plat: native, in: mono, out: mono, rate: 48000, alg: true}<br/>Use whatever context parameterization is appropriate for the plug-in configuration you want to test<br/>dsh&gt; getcurvedata {plugin: 0, inst: 0, display: graph}<br/>Experiment with other display values to get other kinds of information<br/>You can edit the instance&#8217;s parameter values within DSH using the &quot;setparameter&quot; command to see the effects of various parameter changes on the curve<br/></p>
<p>The &quot;getcurvedata&quot; command will check all three curve data types and will present information for each supported<br/>type.<br/></p>
<p>Here is an example of the command output using Avid's Dynamics III plug-in:<br/></p>
<p>cmd_result:<br/>curve_data:<br/></p>
<p>AXdr:<br/>values:<br/></p>
<p>supported: false<br/>AXdy:<br/></p>
<p>values:<br/>ascii_art: |<br/>0|<br/>|<br/>|<br/>|<br/>|<br/>| ********<br/>| ************<br/>| ************<br/>| ****<br/>| *****<br/>| *****<br/>| *****<br/>| *****<br/>| *****<br/>| *****<br/>| *****<br/>| *****<br/>| *****<br/>| *****<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.16 EQ and Dynamics Curve Displays 91<br/></b></p>
<p>-60|****<br/>----------------------------------------------------------------------------------------<br/>| -60 0<br/></p>
<p>supported: true<br/>AXeq:<br/></p>
<p>values:<br/>supported: false<br/></p>
<p>instanceID: 0<br/>pluginID: 0<br/></p>
<p>message_type: cmd_result<br/>...<br/></p>
<p><b>Enumerations<br/></b>&#8226; enum AAX_ECurveType {<br/></p>
<p>AAX_eCurveType_None = 0 ,<br/>AAX_eCurveType_EQ = 'AXeq' ,<br/>AAX_eCurveType_Dynamics = 'AXdy' ,<br/>AAX_eCurveType_Reduction = 'AXdr' }<br/></p>
<p>Different Curve Types that can be queried from the Host.<br/></p>
<p><b>Auxiliary UI methods<br/></b>&#8226; virtual AAX_Result AAX_IACFEffectParameters::GetCurveData (AAX_CTypeID iCurveType, const float &#8727;i&#8592;&#8617;<br/></p>
<p>Values, uint32_t iNumValues, float &#8727;oValues) const =0<br/>Generate a set of output values based on a set of given input values.<br/></p>
<p><b>Auxiliary UI methods<br/></b>&#8226; virtual AAX_Result AAX_IACFEffectParameters_V3::GetCurveDataMeterIds (AAX_CTypeID iCurveType,<br/></p>
<p>uint32_t &#8727;oXMeterId, uint32_t &#8727;oYMeterId) const =0<br/>Indicates which meters correspond to the X and Y axes of the EQ or Dynamics graph.<br/></p>
<p>&#8226; virtual AAX_Result AAX_IACFEffectParameters_V3::GetCurveDataDisplayRange (AAX_CTypeID iCurve&#8592;&#8617;<br/>Type, float &#8727;oXMin, float &#8727;oXMax, float &#8727;oYMin, float &#8727;oYMax) const =0<br/></p>
<p>Determines the range of the graph shown by the plug-in.<br/></p>
<p><b>12.16.2 Enumeration Type Documentation<br/></b></p>
<p><b>12.16.2.1 AAX_ECurveType<br/></b></p>
<p>enum AAX_ECurveType<br/></p>
<p>Different Curve Types that can be queried from the Host.<br/></p>
<p><b>Note<br/></b>All 'AX__' IDs are reserved for host messages<br/></p>
<p><b>See also<br/></b>AAX_IEffectParameters::GetCurveData()<br/>AAX_IEffectParameters::GetCurveDataMeterIds()<br/>AAX_IEffectParameters::GetCurveDataDisplayRange()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>92 Module Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eCurveType_None<br/></p>
<p>AAX_eCurveType_EQ EQ Curve, input values are in Hz, output values are in dB.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools requests this curve type for EQ plug-ins<br/>only<br/></p>
<p>AAX_eCurveType_Dynamics Dynamics Curve showing input vs. output, input and output values are in dB.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools requests this curve type for Dynamics<br/>plug-ins only<br/></p>
<p>AAX_eCurveType_Reduction Gain-reduction curve showing input vs. gain reduction, input and output<br/>values are in dB.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools requests this curve type for Dynamics<br/>plug-ins only<br/></p>
<p><b>12.16.3 Function Documentation<br/></b></p>
<p><b>12.16.3.1 GetCurveData()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetCurveData (<br/>AAX_CTypeID iCurveType,<br/>const float &#8727; iValues,<br/>uint32_t iNumValues,<br/>float &#8727; oValues ) const [pure virtual]<br/></p>
<p>Generate a set of output values based on a set of given input values.<br/>This method is used by the host to generate graphical curves. Given a set of input values, e.g. frequencies in Hz,<br/>this method should generate a corresponding set of output values, e.g. dB gain at each frequency. The semantics<br/>of these input and output values are dictated by iCurveType. See AAX_ECurveType.<br/>Plug-ins may also define custom curve type IDs to use this method internally. For example, the plug-in's GUI could<br/>use this method to request curve data in an arbitrary format.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>This method may be called by the host simultaneously from multiple threads with differents iValues.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>oValues must be allocated by caller with the same size as iValues (iNumValues).<br/></p>
<p><b>Host Compatibility Notes </b>Versions of S6 software which support the GetCurveDataDisplayRange()<br/>method will not display a plug-in's curve data unless both GetCurveData()<br/>and GetCurveDataDisplayRange() are supported by the plug-in.<br/></p>
<p><b>Warning<br/></b>S6 currently polls this method to update a plug-in's EQ or dynamics curves based on changes to the<br/>parameters mapped to the plug-in's EQ or dynamics center section page tables. Parameters that are<br/>not included in these page tables will not trigger updates to the curves displayed on S6. (GWSW-7314,<br/>PTSW-195316 / PT-218485)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.16 EQ and Dynamics Curve Displays 93<br/></b></p>
<p><b>Parameters<br/></b>in iCurveType One of AAX_ECurveType<br/>in iValues An array of input values<br/>in iNumValues The size of iValues<br/>out oValues An array of ouptut values<br/></p>
<p><b>Returns<br/></b>This method must return AAX_ERROR_UNIMPLEMENTED if the plug-in does not support curve data for the<br/>requested iCurveType<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>12.16.3.2 GetCurveDataMeterIds()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters_V3::GetCurveDataMeterIds (<br/>AAX_CTypeID iCurveType,<br/>uint32_t &#8727; oXMeterId,<br/>uint32_t &#8727; oYMeterId ) const [pure virtual]<br/></p>
<p>Indicates which meters correspond to the X and Y axes of the EQ or Dynamics graph.<br/></p>
<p>These meters can be used by attached control surfaces to present an indicator in the same X/Y coordinate plane<br/>as the plug-in's curve data.<br/></p>
<p><b>Parameters<br/></b>in iCurveType One of AAX_ECurveType<br/>out oXMeterId Id of the X-axis meter<br/>out oYMeterId Id of the Y-axis meter<br/></p>
<p><b>Returns<br/></b>This method should return AAX_ERROR_UNIMPLEMENTED if the plug-in does not implement it.<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>12.16.3.3 GetCurveDataDisplayRange()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters_V3::GetCurveDataDisplayRange (<br/>AAX_CTypeID iCurveType,<br/>float &#8727; oXMin,<br/>float &#8727; oXMax,<br/>float &#8727; oYMin,<br/>float &#8727; oYMax ) const [pure virtual]<br/></p>
<p>Determines the range of the graph shown by the plug-in.<br/>Min/max arguments define the range of the axes of the graph.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>94 Module Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iCurveType One of AAX_ECurveType<br/>out oXMin Min value of X-axis range<br/>out oXMax Max value of X-axis range<br/>out oYMin Min value of Y-axis range<br/>out oYMax Max value of Y-axis range<br/></p>
<p><b>Returns<br/></b>This method should return AAX_ERROR_UNIMPLEMENTED if the plug-in does not implement it.<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p>Collaboration diagram for EQ and Dynamics Curve Displays:<br/></p>
<p><b>12.17 Hybrid Processing architecture<br/></b></p>
<p><b>12.17.1<br/></b></p>
<p>An architecture combining low-latency and high-latency audio processing.<br/></p>
<p><b>12.17.2 Overview of Hybrid<br/></b></p>
<p>Hybrid processing is an optional feature that allows a single plug-in to simultaneously render data on the host's<br/>low- and high-latency signal networks. In many large plug-ins this can be very useful. For example, consider<br/>a reverb algorithm with both early reflection and tail processing. With AAX Hybrid, this plug-in can process the<br/>early reflections at low latency while allowing the tail algorithm to be handled at higher latency (and thus higher<br/>efficiency.) Other kinds of algorithms that could benefit from Hybrid processing are noise reductions, analyzers,<br/>multi-effect suites, and instruments.<br/></p>
<p>Because the low-latency AAX signal network may be run on DSP hardware, AAX DSP plug-ins that incorporate<br/>Hybrid processing can split audio processing between the DSP and the host. This provides the benefits of low<br/>latency, highly deterministic DSP-based processing while also allowing the plug-in to leverage the high-latency<br/>power of the Intel core where appropriate.<br/></p>
<p>AAX Hybrid is an internal feature and is not exposed to users, except in terms of better plug-in performance and<br/>more efficient DSP usage.<br/></p>
<p><b>Note<br/></b>AAX Hybrid may be protected by one or more U.S. and non-U.S. patents. Details are available at www.&#8592;&#8617;<br/>avid.com/patents.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.17 Hybrid Processing architecture 95<br/></b></p>
<p><b>12.17.3 Implementing Hybrid processing<br/></b></p>
<p>For an example of Hybrid processing, see the DemoDelay_Hybrid example plug-in<br/></p>
<p>To register for Hybrid processing, a plug-in should add values for AAX_eProperty_HybridInputStemFormat and<br/>AAX_eProperty_HybridOutputStemFormat to the associated ProcessProc property map. Once these values have<br/>been registered, both the ProcessProc callback and the Hybrid render function in the plug-in's data model will be<br/>invoked during processing.<br/></p>
<p>Hybrid processing context information is provided via a dedicated Hybrid processing context structure. It is not<br/>possible to register additional fields on this context. However, unlike a normal algorithm ProcessProc, the Hybrid<br/>render method is implemented directly within the plug-in's effect parameters object and has direct access to the<br/>data model memory. This is possible since the render method will always run on the host, and makes it easier to<br/>implement algorithms that require access to the data model, e.g. for direct access to impulse responses, etc.<br/></p>
<p>The AAX host provides dedicated audio buffers in both the ProcessProc context and the Hybrid processing context.<br/>These buffers can be used to pass audio data between the low-latency ProcesProc and the Hybrid render contexts.<br/></p>
<p>&#8226; The plug-in may pass output from the low-latency ProcessProc to the Hybrid render method using addi-<br/>tional audio buffers that are added at the end of the ProcessProc context's normal output buffer array. The<br/>ProcessProc may perform any pre-processing that is desired before passing audio to the Hybrid render con-<br/>text via these buffers. The AAX_eProperty_HybridOutputStemFormat property defines how many buffers will<br/>be sent from the ProcessProc to the Hybrid render method.<br/></p>
<p>&#8226; Similarly, the plug-in may pass samples from the Hybrid processing callback to the low-latency ProcessProc<br/>using additional audio buffers that are added at the end of the ProcessProc context's normal input buffer array.<br/>The AAX_eProperty_HybridInputStemFormat property defines how many buffers will be sent from the Hybrid<br/>render method to the ProcessProc.<br/></p>
<p>Samples which are sent from the ProcessProc to the Hybrid processing callback and back to the ProcessProc are<br/>delayed by a fixed amount relative to the normal input samples that are processed directly by the ProcessProc to<br/>its output buffers. The number of samples of delay that are added in this round-trip is available to the plug-in via<br/>AAX_IController::GetHybridSignalLatency() .<br/></p>
<p><b>12.17.4 Additional information<br/></b></p>
<p><b>12.17.4.1 Parameter update timing<br/></b></p>
<p>Because updates are not passed to the Hybrid processing context using the normal AAX port infrastructure, any<br/>parameter updates from automation will be reflected in this context a little bit ahead of time (&#8764;21 ms at 44.1 kHz.)<br/>See the Parameter update timing page for a discussion of parameter timing accuracy and some suggestions of how<br/>you can maintain accurate parameter update timing.<br/></p>
<p><b>12.17.4.2 Host support and alternatives<br/></b></p>
<p>Not all AAX hosts support AAX Hybrid processing. See the Host Support page for additional information.<br/></p>
<p><b>See also<br/></b>Direct data access interface for another approach for transferring non-audio data between the algorithm call-<br/>back and the plug-in's data model.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>96 Module Documentation<br/></b></p>
<p><b>Classes<br/></b>&#8226; struct AAX_SHybridRenderInfo<br/></p>
<p>Hybrid render processing context.<br/></p>
<p><b>Hybrid audio methods<br/></b>&#8226; virtual AAX_Result AAX_IACFEffectParameters_V2::RenderAudio_Hybrid (AAX_SHybridRenderInfo &#8727;io&#8592;&#8617;<br/></p>
<p>RenderInfo)=0<br/>Hybrid audio render function.<br/></p>
<p><b>MIDI methods<br/></b></p>
<p>Methods to access the plug-in's host-managed MIDI information.<br/></p>
<p>&#8226; virtual AAX_Result AAX_IController::GetHybridSignalLatency (int32_t &#8727;outSamples) const =0<br/>CALL: Returns the latency between the algorithm normal input samples and the inputs returning from the hyrbid<br/>component.<br/></p>
<p><b>12.17.5 Function Documentation<br/></b></p>
<p><b>12.17.5.1 RenderAudio_Hybrid()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters_V2::RenderAudio_Hybrid (<br/>AAX_SHybridRenderInfo &#8727; ioRenderInfo ) [pure virtual]<br/></p>
<p>Hybrid audio render function.<br/>This method is called from the host to render audio for the hybrid piece of the algorithm.<br/></p>
<p><b>Note<br/></b>To use this method plug-in should register some hybrid inputs and ouputs in &quot;Describe&quot;<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>12.17.5.2 GetHybridSignalLatency()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetHybridSignalLatency (<br/>int32_t &#8727; outSamples ) const [pure virtual]<br/></p>
<p>CALL: Returns the latency between the algorithm normal input samples and the inputs returning from the hyrbid<br/>component.<br/>This method provides the number of samples that the AAX host expects the plug-in to delay a signal. The host will<br/>use this value when accounting for latency across the system.<br/></p>
<p><b>Note<br/></b>This value will generally scale up with sample rate, although it's not a simple multiple due to some fixed<br/>overhead. This value will be fixed for any given sample rate regardless of other buffer size settings in the host<br/>app.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.18 Plug-in meters 97<br/></b></p>
<p><b>Parameters<br/></b>out outSamples The number of samples of hybrid signal delay<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p>Collaboration diagram for Hybrid Processing architecture:<br/></p>
<p><b>12.18 Plug-in meters<br/></b></p>
<p>How to manage metering data for AAX plug-ins.<br/></p>
<p><b>12.18.1 Overview of metering in AAX<br/></b></p>
<p>AAX provides a host-managed metering system for plug-ins. The host buffers, thins, and applies ballistics to each<br/>of the plug-in's meters. When the plug-in GUI retrieves this processed data, it receives the exact same information<br/>that is displayed on control surfaces and other metering devices.<br/></p>
<p><b>12.18.2 Adding meters to an Effect<br/></b></p>
<p>Meters are added to an algorithm Component in Describe using AAX_IComponentDescriptor::AddMeters(). The<br/>resulting meter context field will be populated with an array of meter &quot;tap&quot; values, one for each of the Component's<br/>meters.<br/></p>
<p><b>12.18.2.1 Customizing meter behavior<br/></b></p>
<p>Using the Effect Descriptor, each meter in the Effect may optionally be associated with a property map that applies<br/>a particular set of display properties to the meter. These are the properties that may be set on a meter:<br/></p>
<p>&#8226; AAX_EMeterOrientation<br/></p>
<p>&#8226; AAX_EMeterBallisticType<br/></p>
<p>&#8226; AAX_EMeterType<br/></p>
<p>Note that, because meter properties are added at the Effect level, it is not possible to describe different meter<br/>property configurations for different algorithms in the same Effect.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>98 Module Documentation<br/></b></p>
<p><b>12.18.3 Reporting meter values<br/></b></p>
<p>Meter values are reported by the algorithm using one &quot;tap&quot; per channel per buffer. For each tap, the algorithm must<br/>report the maximum metered sample value for each processing buffer.<br/></p>
<p>Meter tap values can be interpreted as the maximum value of the meter per buffer, on a scale of [0.0 1.0]. In<br/>all cases the plug-in's meter position should be normalized between 0 and 1, where 0 is no gain reduction. For<br/>example:<br/></p>
<p>&#8226; An input meter should report the maximum absolute sample value that is present in the input audio buffer for<br/>the appropriate channel<br/></p>
<p>&#8226; An output meter should report the maximum absolute sample value that is present in the output audio buffer<br/>for the appropriate channel<br/></p>
<p>&#8226; A gain-reduction meter (CL or EG types) should report the largest amount of gain reduction in the current<br/>buffer for the appropriate channel. If no gain reduction occurred for a buffer then a value of 0.0 should be<br/>reported. If a full-scale signal was reduced to silence then a value of 1.0 should be reported.<br/></p>
<p>Gain-reduction meter values should report peak gain reduction, not RMS or other algorithms, and may use any<br/>normalization mapping (e.g. linear, exponential) which is desired. Ideally the gain-reduction metering UI in the host<br/>and on attached control surfaces will match the Peak gain redution metering in the plug-in's GUI.<br/></p>
<p><b>Legacy Porting Notes </b>The gain-reduction meter handling for AAX plug-ins is different from that for RTAS/TDM<br/>plug-ins. AAX plug-ins must invert their gain-reduction meter values manually before re-<br/>porting these values from the audio processing callback. The AAX host will always thin<br/>reported meter data using a &quot;max&quot; operation, and will later invert gain-reduction meter<br/>values before they are available to the plug-in GUI or to control surfaces.<br/></p>
<p><b>12.18.4 Displaying meter values<br/></b></p>
<p>The meter values that are reported to the system from the algorithm are available, in buffered and (op-<br/>tionally) ballistics-smoothed form, from AAX_IController . The meter values returned from methods such as<br/>GetCurrentMeterValue() and GetMeterPeakValue() are the same values used by the system when displaying plug-in<br/>meters on control surfaces, and when a plug-in clears the peak value using ClearMeterPeakValue() this change will<br/>likewise be reflected throughout the system.<br/></p>
<p>The literal values provided by these methods can be interpreted as the distance from &quot;rest&quot; that the meter must<br/>travel to represent the current value, again on a scale of [0.0 1.0]. Note that this is not necessarily equivalent to the<br/>semantics of the meter's reported values in the algorithm:<br/></p>
<p>&#8226; For &quot;standard&quot; meters such as input meters, this corresponds to the value provided by the algorithm, since a<br/>maximum metered sample value (1.0) corresponds to a meter that should be drawn &quot;furthest from rest&quot; (1.0),<br/>i.e. at the top of a standard bottom-to-top meter graphic, or at the far right of a standard left-to-right graphic.<br/></p>
<p>&#8226; For &quot;inverted&quot; meters, such as gain-reduction meters, these semantics are reversed: a maximum metered<br/>sample value (1.0) corresponds to a meter drawn &quot;at rest&quot; (0.0), i.e. at the bottom of a bottom-to-top meter<br/>graphic or at the far left of a left-to-right graphic.<br/></p>
<p>These values are independent of meter orientation: an input or output meter that is oriented with<br/>AAX_eMeterOrientation_TopRight will still use 0.0 as its &quot;at rest&quot; position, and likewise a gain-reduction meter<br/>that is oriented with AAX_eMeterOrientation_BottomLeft will still use 1.0.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.19 MIDI 99<br/></b></p>
<p><b>12.18.5 Alternatives<br/></b></p>
<p>For advanced metering applications a single tap value may not be sufficient. To transmit more detailed information<br/>from the algorithm to its other components, a plug-in must use the Direct Data interface. Collaboration diagram for<br/>Plug-in meters:<br/></p>
<p><b>12.19 MIDI<br/></b></p>
<p>How to route and process MIDI in AAX plug-ins.<br/></p>
<p><b>12.19.1 MIDI Overview<br/></b></p>
<p>AAX plugins create MIDI nodes. MIDI nodes define points where the plugin can send or receive MIDI data. The<br/>data at these nodes is represented as a sequence of AAX MIDI packet data structures. The AAX host manages<br/>connections between these nodes and other points in the system. The host also performs conversion between raw<br/>MIDI data and AAX MIDI packets.<br/></p>
<p><b>12.19.2 MIDI node types<br/></b></p>
<p>There are four kinds of nodes an AAX plug-in can create. See AAX_EMIDINodeType for additional details about<br/>these node types:<br/></p>
<p>&#8226; AAX_eMIDINodeType_LocalInput<br/></p>
<p>&#8226; AAX_eMIDINodeType_LocalOutput<br/></p>
<p>&#8226; AAX_eMIDINodeType_Global<br/></p>
<p>&#8226; AAX_eMIDINodeType_Transport<br/></p>
<p><b>12.19.3 Adding MIDI functionality to a plug-in<br/></b></p>
<p>Plug-in may access MIDI data in its algorithm or data model. If plug-in needs MIDI in both places or just in the<br/>algorithm, it should add a MIDI node to the algorithm context, i.e. call AAX_IComponentDescriptor::AddMIDINode()<br/>with the appropriate node type.<br/>//==============================================================================<br/>// Algorithm context definitions<br/>//==============================================================================<br/>// Context structure<br/>struct SMy_Alg_Context<br/>{<br/></p>
<p>[...]<br/>AAX_IMIDINode * mMIDIInNodeP; // Local input MIDI node pointer<br/>AAX_IMIDINode * mMIDINodeOutP; // Local output MIDI node pointer<br/>AAX_IMIDINode * mMIDINodeTransportP; // Transport node<br/>[...]<br/></p>
<p>};<br/>enum EDemoMIDI_Alg_PortID<br/>{<br/></p>
<p>[...]<br/>//<br/>// Add the MIDI node as a physical address within the context field<br/>,eAlgPortID_MIDINodeIn = AAX_FIELD_INDEX (SDemoMIDI_Alg_Context, mMIDINodeP)<br/>,eAlgPortID_MIDINodeOut = AAX_FIELD_INDEX (SDemoMIDI_Alg_Context, mMIDINodeOutP)<br/>,eAlgPortID_MIDINodeTransport = AAX_FIELD_INDEX (SDemoMIDI_Alg_Context, mMIDINodeTransportP)<br/>[...]<br/></p>
<p>};<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>100 Module Documentation<br/></b></p>
<p>// ***************************************************************************<br/>// ROUTINE: DescribeAlgorithmComponent<br/>// Algorithm component description<br/>// ***************************************************************************<br/>static void DescribeAlgorithmComponent( AAX_IComponentDescriptor * outDesc )<br/>{<br/></p>
<p>AAX_Result err;<br/></p>
<p>[...]<br/>// Register MIDI nodes<br/>err = outDesc-&gt;AddMIDINode(eAlgPortID_MIDINodeA, AAX_eMIDINodeType_LocalInput, &quot;DemoMIDI&quot;, 0xffff);<br/></p>
<p>AAX_ASSERT (err == 0);<br/>err = outDesc-&gt;AddMIDINode(eAlgPortID_MIDINodeOut, AAX_eMIDINodeType_LocalOutput, &quot;DemoMIDIOut&quot;,<br/></p>
<p>0xffff); AAX_ASSERT (err == 0);<br/>err = outDesc-&gt;AddMIDINode(eAlgPortID_MIDINodeTransport, AAX_eMIDINodeType_Transport, &quot;DemoMIDITrnsprt&quot;,<br/></p>
<p>0xffff); AAX_ASSERT (err == 0);<br/>[...]<br/></p>
<p>}<br/></p>
<p>If MIDI data is needed in the plug-in's data model only, plug-in should describe MIDI node with AAX_IEffectDescriptor::AddControlMIDINode().<br/>// ***************************************************************************<br/>// ROUTINE: GetPlugInDescription<br/>// ***************************************************************************<br/>static AAX_Result GetPlugInDescription( AAX_IEffectDescriptor * outDescriptor )<br/>{<br/></p>
<p>AAX_Result err;<br/></p>
<p>[...]<br/>// Register MIDI nodes<br/>err = outDesc-&gt;AddControlMIDINode(&#8217;linp&#8217;, AAX_eMIDINodeType_LocalInput, &quot;DemoMIDI&quot;, 0xffff);<br/></p>
<p>AAX_ASSERT (err == 0);<br/>err = outDesc-&gt; AddControlMIDINode(&#8217;lout&#8217;, AAX_eMIDINodeType_LocalOutput, &quot;DemoMIDIOut&quot;, 0xffff);<br/></p>
<p>AAX_ASSERT (err == 0);<br/>err = outDesc-&gt; AddControlMIDINode(&#8217;tran&#8217;, AAX_eMIDINodeType_Transport, &quot;DemoMIDITrnsprt&quot;, 0xffff);<br/></p>
<p>AAX_ASSERT (err == 0);<br/>[...]<br/>return err;<br/></p>
<p>}<br/></p>
<p><b>Note<br/></b>These two types of MIDI nodes can't be used together in the same plug-in's effect.<br/></p>
<p><b>12.19.4 Using MIDI in a plug-in algorithm<br/></b></p>
<p>Like with other algorithm context ports, data in MIDI nodes is directly available in the plug-in's algorithm process<br/>function. Here is an example from the DemoMIDI_NoteOn sample plug-in:<br/>template&lt;int kNumChannelsIn, int kNumChannelsOut&gt;<br/>void<br/>AAX_CALLBACK<br/>DemoMIDI_AlgorithmProcessFunction (<br/></p>
<p>SDemoMIDI_Alg_Context * const inInstancesBegin [],<br/>const void * inInstancesEnd)<br/></p>
<p>{<br/>[...]<br/>// Setup MIDI In node pointers<br/>AAX_IMIDINode* midiNodeIn = instance-&gt;mMIDINodeP;<br/>AAX_CMidiStream* midiBufferIn = midiNodeIn-&gt;GetNodeBuffer();<br/>AAX_CMidiPacket* midiBufferInPtr = midiBufferIn-&gt;mBuffer;<br/>uint32_t packets_count_in = midiBufferIn-&gt;mBufferSize;<br/></p>
<p>// Setup MIDI Out node pointers<br/>AAX_IMIDINode* midiNodeOut = instance-&gt;mMIDINodeOutP;<br/>AAX_CMidiStream* midiBufferOut = midiNodeOut-&gt;GetNodeBuffer();<br/>AAX_CMidiPacket* midiBufferOutPtr = midiBufferOut-&gt;mBuffer;<br/>uint32_t packets_count_out = midiBufferOut-&gt;mBufferSize;<br/></p>
<p>// Setup MIDI Transport node pointers<br/>// NOTE: See warning at AAX_IMIDINode::GetTransport() regarding use of this interface<br/>AAX_IMIDINode* midiTransport = instance-&gt;mMIDINodeTransportP;<br/>AAX_ITransport * transport = midiTransport-&gt;GetTransport();<br/>bool transport_is_playing = false;<br/>if (transport) {<br/></p>
<p>transport-&gt;IsTransportPlaying(&amp;transport_is_playing);<br/>}<br/></p>
<p>if(transport_is_playing) {<br/>//<br/>// While there are packets in the node<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.19 MIDI 101<br/></b></p>
<p>while (packets_count_in &gt; 0) {<br/>midiBufferOutPtr = midiBufferInPtr; // Copy the packet from the input MIDI node<br/></p>
<p>// to the output MIDI node<br/>midiBufferOutPtr-&gt;mTimestamp = timeStamp; // Set the MIDI time stamp<br/>midiNodeOut-&gt;PostMIDIPacket(midiBufferOutPtr); // Post the MIDI packet<br/>midiBufferOut-&gt;mBufferSize = packets_count_in;<br/></p>
<p>midiBufferInPtr++;<br/>packets_count_in--;<br/></p>
<p>}<br/>}<br/>[...]<br/></p>
<p>}<br/></p>
<p>Also data from the MIDI nodes that were described with AAX_IComponentDescriptor::AddMIDINode() can be ac-<br/>cessed via AAX_CEffectParameters::UpdateMIDINodes() method. This method provides an AAX_CMidiPacket.<br/>Because the MIDI packet structure does not identify the associated MIDI stream's type (input, output, global, or<br/>transport) this method also provides an index into the plug-in's algorithm context structure which can be used to<br/>identify the semantics of the MIDI packet.<br/></p>
<p><b>12.19.5 Accessing MIDI in the plug-in data model<br/></b></p>
<p>A plug-in may access MIDI data in its data model via the AAX_CEffectParameters::UpdateMIDINodes()<br/>or AAX_CEffectParameters::UpdateControlMIDINodes() methods. Both of these methods provide an<br/>AAX_CMidiPacket. Because the MIDI packet structure does not identify the associated MIDI stream's type<br/>(input, output, global, or transport) UpdateMIDINodes method also provides an index into the plug-in's algorithm<br/>context structure which can be used to identify the semantics of the MIDI packet, while UpdateControlMIDINodes<br/>provides MIDI node ID for the same reason.<br/>AAX_Result DemoMIDI_Parameters::UpdateMIDINodes ( AAX_CFieldIndex inFieldIndex, AAX_CMidiPacket&amp; inPacket<br/></p>
<p>)<br/>{<br/></p>
<p>if (eAlgPortID_MIDINodeIn == inFieldIndex)<br/>{<br/></p>
<p>if ( (inPacket.mData[0] &amp; 0xF0) == 0x90 )<br/>{<br/></p>
<p>if ( inPacket.mData[2] == 0x00 )<br/>{<br/></p>
<p>// Note Off<br/>}<br/>else<br/>{<br/></p>
<p>// Note On<br/>}<br/></p>
<p>}<br/>}<br/></p>
<p>return AAX_SUCCESS;<br/>}<br/></p>
<p><b>Note<br/></b>Only one of the UpdateMIDINodes and UpdateControlMIDINodes can be used in the single plug-in's effect at<br/>a time. If plug-in uses MIDI nodes described with AddMIDINode function, then only UpdateMIDINodes method<br/>can be used to receive MIDI messages. Otherwise UpdateControlMIDINodes should be used.<br/></p>
<p><b>12.19.6 Support functions<br/></b></p>
<p>Additional definitions and support functions for MIDI in AAX are available in AAX_MIDIUtilities.h Collaboration dia-<br/>gram for MIDI:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>102 Module Documentation<br/></b></p>
<p><b>12.20 Offline processing interface<br/></b></p>
<p><b>12.20.1<br/></b></p>
<p>Advanced offline processing features.<br/></p>
<p>This interface represents an optional component that you can add to your plug-in in order to support extended<br/>features of the AAX SDK.<br/></p>
<p>The HostProcessor interface provides offline plug-ins with useful offline processing features such as random-access<br/>facilities and a non-processing analysis callback. For documentation, see the following classes:<br/></p>
<p>&#8226; Host processor module<br/></p>
<p>&#8226; Host processor delegate<br/></p>
<p>To add this interface to your plug-in at describe time, register a ProcPtr using the kAAX_ProcPtrID_Create_HostProcessor<br/>selector.<br/></p>
<p><b>Note<br/></b>If your plug-in does not require the specific offline processing features provided by this interface then it should<br/>not register a host processor. Instead, register an offline version of the plug-in's real-time algorithm using the<br/>AAX_eProperty_PlugInID_AudioSuite property.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CHostProcessor<br/>Concrete implementation of the AAX_IHostProcessor interface for non-real-time processing.<br/></p>
<p>&#8226; class AAX_IACFHostProcessor<br/>Versioned interface for an AAX host processing component.<br/></p>
<p>&#8226; class AAX_IHostProcessor<br/>Base class for the host processor interface.<br/></p>
<p>&#8226; class AAX_IHostProcessorDelegate<br/>Versioned interface for host methods specific to offline processing.<br/></p>
<p>&#8226; class AAX_VHostProcessorDelegate<br/>Version-managed concrete Host Processor delegate class.<br/></p>
<p>Collaboration diagram for Offline processing interface:<br/></p>
<p><b>12.21 Properties File<br/></b></p>
<p>Properties for an AAX plugin bundle.<br/></p>
<p><b>About </b>An XML properties file can optionally be used in an AAX plugin bundle to provide information to the host<br/>prior to loading the plugin binary.<br/></p>
<p>The file should be named AAXProperties.xml and should be placed in the bundle's Resources folder.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.22 Sidechain Inputs 103<br/></b></p>
<p><b>Collection Properties </b>AuthDialog (Optional)<br/></p>
<p>&#8226; Required attribute: type_=&quot;bool&quot;<br/></p>
<p>&#8226; Value true: Declares that the plugin may show an authorization dialog when loaded.<br/></p>
<p>&#8226; Value false: Declares that the plugin will never show an authorization dialog when loaded.<br/></p>
<p><b>Schema </b>&lt;?xml version=&quot;1.0&quot;?&gt;<br/>&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;<br/>&lt;xs:element name=&quot;AAXPropertiesFile&quot;&gt;<br/></p>
<p>&lt;xs:complexType&gt;<br/>&lt;xs:element name=&quot;Collection&quot;&gt;<br/></p>
<p>&lt;xs:complexType&gt;<br/>&lt;xs:element name=&quot;AuthDialog&quot; minOccurs=&quot;0&quot;&gt;<br/></p>
<p>&lt;xs:complexType&gt;<br/>&lt;xs:simpleContent&gt;<br/></p>
<p>&lt;xs:extension base=&quot;xs:boolean&quot;&gt;<br/>&lt;xs:attribute name=&quot;type_&quot; type=&quot;xs:string&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;1&quot;<br/></p>
<p>fixed=&quot;bool&quot;/&gt;<br/>&lt;/xs:extension&gt;<br/></p>
<p>&lt;/xs:simpleContent&gt;<br/>&lt;/xs:complexType&gt;<br/></p>
<p>&lt;/xs:element&gt;<br/>&lt;/xs:complexType&gt;<br/></p>
<p>&lt;/xs:element&gt;<br/>&lt;/xs:complexType&gt;<br/></p>
<p>&lt;/xs:element&gt;<br/>&lt;/xs:schema&gt;<br/></p>
<p><b>Example </b>&lt;?xml version=&#8217;1.0&#8217; encoding=&#8217;UTF-8&#8217; standalone=&#8217;yes&#8217;?&gt;<br/>&lt;AAXPropertiesFile&gt;<br/></p>
<p>&lt;Collection&gt;<br/>&lt;AuthDialog type_=&quot;bool&quot;&gt;false&lt;/AuthDialog&gt;<br/></p>
<p>&lt;/Collection&gt;<br/>&lt;/AAXPropertiesFile&gt;<br/></p>
<p>Collaboration diagram for Properties File:<br/></p>
<p><b>12.22 Sidechain Inputs<br/></b></p>
<p>Routing custom audio streams to a plug-in.<br/></p>
<p><b>12.22.1 Overview of Sidechain Inputs<br/></b></p>
<p>If applicable, plug-ins may choose to enable sidechain inputs. If a sidechain is enabled, a menu is added to the<br/>plug-in's header that allows the user to choose an interface or bus as the sidechain, or &quot;key input&quot;. Once enabled,<br/>the plug-in will be able to access sidechain input just like any other input signal. Currently, DAE is limited to mono<br/>sidechain inputs.<br/></p>
<p><b>12.22.2 Adding a Sidechain Input to an Effect<br/></b></p>
<p>Setting up a sidechain input is fairly straight forward. You will want to add a physical address within your context<br/>structure, and then &quot;describe&quot; the sidechain in Describe.<br/></p>
<p>Context Structure:<br/>//=============================<br/>// Component context definitions<br/>//=============================<br/>// Context structure<br/>struct SMyPlugIn_Alg_Context<br/>{<br/></p>
<p>[...]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>104 Module Documentation<br/></b></p>
<p>int32_t * mSideChainP;<br/>[...]<br/></p>
<p>};<br/>// Physical addresses within the context<br/>enum EDemoDist_Alg_PortID<br/>{<br/></p>
<p>[...]<br/>,MyPlugIn_AlgFieldID_SideChain = AAX_FIELD_INDEX (SDemoDist_Alg_Context, mSideChainP)<br/>[...]<br/></p>
<p>};<br/></p>
<p>Describe:<br/>// ***************************************************************************<br/>// ROUTINE: DescribeAlgorithmComponent<br/>// Algorithm component description<br/>// ***************************************************************************<br/>static void DescribeAlgorithmComponent( AAX_IComponentDescriptor * outDesc )<br/>{<br/></p>
<p>AAX_Result err = AAX_SUCCESS;<br/>[...]<br/>err = outDesc.AddSideChainIn(eDemoDist_AlgFieldID_SideChain);<br/>[...]<br/>properties-&gt;AddProperty ( AAX_eProperty_SupportsSideChainInput, true );<br/>[...]<br/></p>
<p>}<br/></p>
<p><b>Todo </b>Is properties-&gt;AddProperty ( AAX_eProperty_SupportsSideChainInput, true ) even necessary?!?! I believe<br/>I saw a p.i. that does not declare this...<br/></p>
<p>In order to tell whether there is sidechain information available to your plug-in, check for a null pointer within your<br/>algorithm's process function. The sidechain channel will show up as an additional stem from the original stem format<br/>you declare. That is to stay, for a stereo plug-in, the sidechain channel will be the third channel passed in.<br/>//==============================================================================<br/>// Processing function definition<br/>//==============================================================================<br/>void<br/>AAX_CALLBACK<br/>MyPlugIn_AlgorithmProcessFunction (<br/></p>
<p>SMyPlugIn_Alg_Context * const inInstancesBegin [],<br/>const void * inInstancesEnd)<br/></p>
<p>{<br/>[...]<br/>int32_t sideChainChannel = *instance-&gt;mSideChainP;<br/>float * AAX_RESTRICT sideChainInput = 0;<br/>if ( sideChainChannel )<br/></p>
<p>sideChainInput = instance-&gt;mInputPP [sideChain]Channel;<br/>[...]<br/></p>
<p>}<br/></p>
<p>Collaboration diagram for Sidechain Inputs:<br/></p>
<p><b>12.23 Task agent interface<br/></b></p>
<p><b>12.23.1<br/></b></p>
<p>A mechanism for hosts to request that plug-ins perform tasks.<br/></p>
<p>This interface represents an optional component that you can add to your plug-in in order to support extended<br/>features of the AAX SDK.<br/></p>
<p><b>Host Compatibility Notes </b>This interface is not yet used in any AAX hosts<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.23 Task agent interface 105<br/></b></p>
<p>The plug-in implements an AAX_ITaskAgent, which is used by the host to add or cancel tasks.<br/>The host implements AAX_IACFTask for task objects representing each task that it wants the plug-in to perform.<br/>To request a task, the host adds a task object to the plug-in's task agent interface.<br/>The type of each task is identified with a four-char ID. If additional arbitrary data is necessary to describe the task it<br/>is provided via data buffers.<br/>The plug-in checks this data to understand what work needs to be done, then performs the task. The task may be,<br/>and usually is, executed asynchronously. The plug-in optionally updates the task progress as it proceedds, then<br/>calls AAX_ITask::SetDone() when the work is completed. If the task involves returning data back to the host, the<br/>plug-in first calls AAX_ITask::AddResult() one or more times to provide the data via data buffers.<br/>To be available as a task agent, the plug-in's task agent implementation must be registered with the host in the<br/>plug-in's Description callback like other process pointers. To add this interface to your plug-in at describe time, call<br/>AAX_IEffectDescriptor::AddProcPtr() using the kAAX_ProcPtrID_Create_TaskAgent selector.<br/></p>
<p><b>12.23.2 Communicating with other modules<br/></b></p>
<p>Like other modules, the task agent interface is provided with a reference to the plug-in's AAX_IEffectDirectData<br/>object at initialization. In order to transfer data between a plug-in's AAX_IEffectDirectData object and<br/>its other objects, dedicated custom data methods in those objects' interfaces should be used. For ex-<br/>ample, to communicate with the plug-in's data model, use AAX_IEffectParameters::GetCustomData() and<br/>AAX_IEffectParameters::SetCustomData() .<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CTaskAgent<br/></p>
<p>Default implementation of the AAX_ITaskAgent interface.<br/>&#8226; class AAX_IACFTask<br/></p>
<p>Versioned interface for an asynchronous task.<br/>&#8226; class AAX_IACFTaskAgent<br/></p>
<p>Versioned interface for a component that accepts task requests.<br/>&#8226; class AAX_ITask<br/></p>
<p>Interface representing a request to perform a task.<br/>&#8226; class AAX_ITaskAgent<br/></p>
<p>Interface for a component that accepts task requests.<br/></p>
<p><b>Enumerations<br/></b>&#8226; enum class AAX_TaskCompletionStatus : int32_t {<br/></p>
<p>None = 0 ,<br/>Done = 1 ,<br/>Canceled = 2 ,<br/>Error = 3 }<br/></p>
<p><b>12.23.3 Enumeration Type Documentation<br/></b></p>
<p><b>12.23.3.1 AAX_TaskCompletionStatus<br/></b></p>
<p>enum AAX_TaskCompletionStatus : int32_t [strong]<br/></p>
<p>Completion status for use with AAX_ITask::SetDone()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>106 Module Documentation<br/></b></p>
<p><b>Enumerator<br/></b>None<br/>Done<br/></p>
<p>Canceled<br/>Error<br/></p>
<p>Collaboration diagram for Task agent interface:<br/></p>
<p><b>12.24 AAX Library features<br/></b></p>
<p><b>12.24.1<br/></b></p>
<p>AAX Library core support for the AAX interface<br/>The AAX Library includes several built-in features that are designed to facilitate plug-in development and to make it<br/>easy to create plug-ins with correct and consistent behavior. Although these features are not a part of the AAX API,<br/>they are a core part of the SDK.<br/></p>
<p><b>Documents<br/></b>&#8226; Parameter Manager<br/></p>
<p>Optional (but recommended) system for managing AAX plug-in parameters.<br/>&#8226; Monolithic parameters<br/></p>
<p>Collaboration diagram for AAX Library features:<br/></p>
<p><b>12.25 Parameter Manager<br/></b></p>
<p><b>12.25.1<br/></b></p>
<p>Optional (but recommended) system for managing AAX plug-in parameters.<br/></p>
<p>AAX_CParameterManager<br/></p>
<p>AAX_CParameter<br/></p>
<p>... AAX_IParameter ...<br/></p>
<p>AAX_IDisplayDelegateAAX_ITaperDelegate AAX_IAutomationDelegate<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.25 Parameter Manager 107<br/></b></p>
<p>The Parameter Manager is a generic container for a plug-in's parameters, which constitute the complete externally-<br/>facing state of a plug-in's data model. Additional internal state data may be stored via settings chunks. The<br/>Parameter Manager is owned and operated by the plug-in's Data model interface.<br/></p>
<p>The Parameter Manager provides a convenient and consistent interface by which a plug-in's data model implemen-<br/>tation may access its parameters. Other plug-in components that require access to the data model may also use<br/>this interface, or a proxy of it, to view the current state of the plug-in.<br/></p>
<p>In the Parameter Manager, implementation-specific parameter behaviors such as taper and display formatting are<br/>modular and are applied through delegation. Because of this model, it is possible to easily create a wide variety<br/>of behavior combinations without additional subclassing; any display behavior may be combined with any taper<br/>behavior, and a newly written behavior can be quickly &quot;mixed in&quot; to many parameters.<br/></p>
<p><b>12.25.2 Parameter concepts<br/></b></p>
<p>&#8226; Parameter value domains<br/></p>
<p>&#8226; Taper<br/></p>
<p>&#8226; Delegates<br/></p>
<p>&#8226; Model-View-Controller<br/></p>
<p><b>12.25.2.1 Parameter value domains<br/></b></p>
<p>In AAX, parameter values can be represented in one of two &quot;domains&quot;. Developers work with parameters in the real<br/>domain, while the host handles parameters in a scaled, normalized format.<br/></p>
<p><b>Real (or &quot;logical&quot;) domain<br/></b>AAX plug-ins and parameter controllers work with typed parameter values that represent the real (logical) state<br/>of the parameter. The type, form, and meaning of this value is dependent on the parameter's implementation<br/>and is unknown to the host.<br/></p>
<p><b>Normalized domain<br/></b>The AAX host works with parameter values that have been scaled (normalized) to a type-agnostic format. Al-<br/>though normalized values make little logical sense, they provide the host with a consistent means of handling,<br/>storing, and communicating parameters' values without having to worry about the actual implementation or<br/>meaning of the parameters. Normalized parameter values are 64-bit floating point and are scaled to a range<br/>of [0, 1].<br/></p>
<p>For more information about conversion between parameter domains, see AAX_IParameter.<br/></p>
<p><b>Note<br/></b>The AAX_IEffectParameters interface currently utilizes a secondary normalization to full-scale int32_t values.<br/>In the future, this will be unified with the double precision floating point normalization documented above.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>108 Module Documentation<br/></b></p>
<p><b>12.25.2.2 Taper<br/></b></p>
<p>A taper is the conversion function that translates a parameter's value between its real and normalized forms.<br/></p>
<p>For example, a taper could be created that converts between a normalized value ([0, 1]) and a real frequency value<br/>ranging from [20 2000]. The conversion between these two ranges could be linear or logarithmic, or could use any<br/>other desired mapping. This mapping, as well as the specific range of the possible logical values, is defined by the<br/>taper.<br/></p>
<p>For more information about tapers in AAX, see AAX_ITaperDelegate.<br/></p>
<p><b>12.25.2.3 Delegates<br/></b></p>
<p>In AAX, individual parameters achieve their own unique behavior by being associated with behavioral delegates.<br/></p>
<p>For example, when AAX_CParameter::SetNormalizedValue() is called on a particular parameter through its<br/>AAX_IParameter interface, the AAX_CParameter calls into a AAX_ITaperDelegate that it owns in order to convert<br/>the normalized value to its real equivalent. This real value is then set as the parameter's new state.<br/></p>
<p>For more information about how delegates are used to create a parameter's behavior see AAX_CParameter<br/></p>
<p><b>12.25.2.4 Model-View-Controller<br/></b></p>
<p>AAX adheres roughly to a Model-View-Controller pattern. The Parameter Manager functions within the context of<br/>AAX_IEffectParameters, which in turn acts as an AAX plug-in's Data Model in an MVC sense. Views, such as the<br/>plug-in's GUI, attached control surfaces, or the automation facilities in the AAX host, are given access to the Data<br/>Model via a central Controller, which is represented by the AAX_IController interface.<br/></p>
<p>For more information about how MVC applies to AAX, see the Data model interface documentation page.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CParameter&lt; T &gt;<br/>Generic implementation of an AAX_IParameter.<br/></p>
<p>&#8226; class AAX_CParameterManager<br/>A container object for plug-in parameters.<br/></p>
<p>&#8226; class AAX_IParameter<br/>The base interface for all normalizable plug-in parameters.<br/></p>
<p><b>Documents<br/></b></p>
<p>&#8226; Taper delegates<br/>Classes for conversion to and from normalized parameter values.<br/></p>
<p>&#8226; Display delegates<br/>Classes for parameter value string conversion.<br/></p>
<p>Collaboration diagram for Parameter Manager:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.26 Taper delegates 109<br/></b></p>
<p><b>12.26 Taper delegates<br/></b></p>
<p><b>12.26.1<br/></b></p>
<p>Classes for conversion to and from normalized parameter values.<br/></p>
<p>Taper delegates are used to convert real parameter values to and from their normalized representations. All taper<br/>delegates implement the AAX_ITaperDelegate&lt;T&gt; interface template, which contains two conversion functions:<br/>virtual T NormalizedToReal(double normalizedValue) const = 0;<br/>virtual double RealToNormalized(T realValue) const = 0;<br/></p>
<p>In addition, tapers may incorporate logical value constraints via the following interface methods:<br/>virtual T GetMaximumValue() const = 0;<br/>virtual T GetMinimumValue() const = 0;<br/>virtual T ConstrainRealValue(T value) const = 0;<br/></p>
<p>For more information, see the AAX_ITaperDelegate class documentation.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CBinaryTaperDelegate&lt; T &gt;<br/>A binary taper conforming to AAX_ITaperDelegate.<br/></p>
<p>&#8226; class AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;<br/>A linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p>&#8226; class AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;<br/>A logarithmic taper conforming to AAX_ITaperDelegate.<br/></p>
<p>&#8226; class AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;<br/>A piece-wise linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p>&#8226; class AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;<br/>A piecewise-linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p>&#8226; class AAX_CStateTaperDelegate&lt; T &gt;<br/>A linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p>&#8226; class AAX_ITaperDelegateBase<br/>Defines the taper conversion behavior for a parameter.<br/></p>
<p>&#8226; class AAX_ITaperDelegate&lt; T &gt;<br/>Classes for conversion to and from normalized parameter values.<br/></p>
<p>Collaboration diagram for Taper delegates:<br/></p>
<p><b>12.27 Display delegates<br/></b></p>
<p><b>12.27.1<br/></b></p>
<p>Classes for parameter value string conversion.<br/></p>
<p>Display delegates are used to convert real parameter values to and from their formatted string representations. All<br/>display delegates implement the AAX_IDisplayDelegate interface, which contains two conversion functions:<br/>virtual bool ValueToString(T value, std::string&amp; valueString) const = 0;<br/>virtual bool StringToValue(const std::string&amp; valueString, T&amp; value) const = 0;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>110 Module Documentation<br/></b></p>
<p><b>12.27.2 Display delegate decorators<br/></b></p>
<p>The AAX SDK utilizes a decorator pattern in order to provide code re-use while accounting for a wide variety of<br/>possible parameter display formats. The SDK includes a number of sample display delegate decorator classes.<br/></p>
<p>Each concrete display delegate decorator implements AAX_IDisplayDelegateDecorator and adheres to the dec-<br/>orator pattern. The decorator pattern allows multiple display behaviors to be composited or wrapped to-<br/>gether at run time. For instance it is possible to implement a dBV (dB Volts) decorator, by wrapping an<br/>AAX_CDecibelDisplayDelegateDecorator with an AAX_CUnitDisplayDelegateDecorator.<br/></p>
<p><b>12.27.2.1 Display delegate decorator implementation<br/></b></p>
<p>By implementing AAX_IDisplayDelegateDecorator, each concrete display delegate decorator class implements the<br/>full AAX_IDisplayDelegate interface. In addition, it retains a pointer to the AAX_IDisplayDelegateDecorator that it<br/>wraps. When the decorator performs a conversion, it calls into its wrapped class so that the wrapped decorator may<br/>apply its own conversion formatting. By repeating this pattern in each decorator, all of the decorator subclasses call<br/>into their &quot;wrapper&quot; in turn, resulting in a final string to which all of the decorators' conversions have been applied in<br/>sequence.<br/></p>
<p>Here is the relevant implementation from AAX_IDisplayDelegateDecorator :<br/>template &lt;typename T&gt;<br/>AAX_IDisplayDelegateDecorator&lt;T&gt;::AAX_IDisplayDelegateDecorator(const AAX_IDisplayDelegate&lt;T&gt;&amp;<br/></p>
<p>displayDelegate) :<br/>AAX_IDisplayDelegate&lt;T&gt;(),<br/>mWrappedDisplayDelegate(displayDelegate.Clone())<br/></p>
<p>{<br/>}<br/>template &lt;typename T&gt;<br/>bool AAX_IDisplayDelegateDecorator&lt;T&gt;::ValueToString(T value, AAX_CString* valueString) const<br/>{<br/></p>
<p>return mWrappedDisplayDelegate-&gt;ValueToString(value, valueString);<br/>}<br/>template &lt;typename T&gt;<br/>bool AAX_IDisplayDelegateDecorator&lt;T&gt;::StringToValue(const AAX_CString&amp; valueString, T* value) const<br/>{<br/></p>
<p>return mWrappedDisplayDelegate-&gt;StringToValue(valueString, value);<br/>}<br/></p>
<p><b>12.27.2.2 Decibel decorator example<br/></b></p>
<p>Here is a concrete example of how a decibel decorator might be implemented<br/>template &lt;typename T&gt;<br/>bool AAX_CDecibelDisplayDelegateDecorator&lt;T&gt;::ValueToString(T value, AAX_CString* valueString) const<br/>{<br/></p>
<p>if (value &lt;= 0)<br/>{<br/></p>
<p>*valueString = AAX_CString(&quot;--- dB&quot;);<br/>return true;<br/></p>
<p>}<br/></p>
<p>value = 20*log10(value);<br/>bool succeeded = AAX_IDisplayDelegateDecorator&lt;T&gt;::ValueToString(value, valueString);<br/>*valueString += AAX_CString(&quot;dB&quot;);<br/></p>
<p>return succeeded;<br/>}<br/></p>
<p>Notice in this example that the ValueToString() method is called in the parent class, AAX_IDisplayDelegateDecorator.<br/>This results in a call into the wrapped class' implementation of ValueToString(), which converts the decorated value<br/>to a redecorated string, and so forth for additional decorators.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.28 Display delegate decorators 111<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_CBinaryDisplayDelegate&lt; T &gt;<br/></p>
<p>A binary display format conforming to AAX_IDisplayDelegate.<br/>&#8226; class AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;<br/></p>
<p>A numeric display format conforming to AAX_IDisplayDelegate.<br/>&#8226; class AAX_CStateDisplayDelegate&lt; T &gt;<br/></p>
<p>A generic display format conforming to AAX_IDisplayDelegate.<br/>&#8226; class AAX_CStringDisplayDelegate&lt; T &gt;<br/></p>
<p>A string, or list, display format conforming to AAX_IDisplayDelegate.<br/>&#8226; class AAX_IDisplayDelegateBase<br/></p>
<p>Defines the display behavior for a parameter.<br/>&#8226; class AAX_IDisplayDelegate&lt; T &gt;<br/></p>
<p>Classes for parameter value string conversion.<br/></p>
<p><b>Documents<br/></b>&#8226; Display delegate decorators<br/></p>
<p>Classes for adapting parameter value strings.<br/></p>
<p>Collaboration diagram for Display delegates:<br/></p>
<p><b>12.28 Display delegate decorators<br/></b></p>
<p><b>12.28.1<br/></b></p>
<p>Classes for adapting parameter value strings.<br/></p>
<p>The AAX parameter display strategy uses a decorator pattern for parameter value formatting. This approach allows<br/>developers to maximize code re-use across display delegates with many different kinds of varying formatting, all<br/>without creating interdependencies between the different display delegates themselves.<br/></p>
<p>For more information, see Display delegate decorators. For even more information, about the Decorator design<br/>pattern, please consult the GOF design patterns book.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>A percent decorator conforming to AAX_IDisplayDelegateDecorator.<br/>&#8226; class AAX_CPercentDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>A percent decorator conforming to AAX_IDisplayDelegateDecorator.<br/>&#8226; class AAX_CUnitDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>A unit type decorator conforming to AAX_IDisplayDelegateDecorator.<br/>&#8226; class AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>A unit prefix decorator conforming to AAX_IDisplayDelegateDecorator.<br/>&#8226; class AAX_IDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>The base class for all concrete display delegate decorators.<br/></p>
<p>Collaboration diagram for Display delegate decorators:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>112 Module Documentation<br/></b></p>
<p><b>12.29 Monolithic parameters<br/></b></p>
<p><b>12.29.1<br/></b></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CMonolithicParameters<br/>Extension of the AAX_CEffectParameters class for monolithic VIs and effects.<br/></p>
<p>Collaboration diagram for Monolithic parameters:<br/></p>
<p><b>12.30 Additional Topics<br/></b></p>
<p><b>12.30.1<br/></b></p>
<p>Additional information about the AAX design.<br/></p>
<p><b>Documents<br/></b></p>
<p>&#8226; Real-time performance<br/>Guidelines for avoiding audio streaming errors.<br/></p>
<p>&#8226; Parameter automation<br/>Information about parameter automation.<br/></p>
<p>&#8226; Parameter updates<br/>The anatomy of a parameter update.<br/></p>
<p>&#8226; Plug-in type conversion<br/>Specification for valid conversions between plug-in types.<br/></p>
<p>&#8226; The Avid Component Framework (ACF)<br/>How the AAX C++ interfaces work.<br/></p>
<p>Collaboration diagram for Additional Topics:<br/></p>
<p><b>12.31 Real-time performance<br/></b></p>
<p>Guidelines for avoiding audio streaming errors.<br/></p>
<p>This page provides an overview of best practices for avoiding streaming errors and achieving good performance for<br/>audio processing on real-time threads.<br/></p>
<p>These recommendations are based on observations we have made when reviewing common Pro Tools streaming<br/>errors, especially those caused by plug-ins, as well as on information we have gathered from a number of partners<br/>and other experts in the field.<br/></p>
<p><b>See also<br/></b>Plug-In Causes Audio Streaming Errors<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.31 Real-time performance 113<br/></b></p>
<p><b>12.31.1 Things NOT To Do In An Audio Plug-In Render Callback<br/></b></p>
<p>&#8226; No unbounded calls/loops<br/></p>
<p>&#8226; No access to paged memory or files<br/></p>
<p>&#8226; No system calls<br/></p>
<p>&#8226; No memory allocations or deallocations<br/></p>
<p>&#8226; No exceptions<br/></p>
<p>&#8226; No locks (priority inversions)<br/></p>
<p>&#8226; No data races<br/></p>
<p>&#8226; Avoid context switches<br/></p>
<p>&#8226; No Objective-C or Swift code. These can incur system calls and take locks - see this article for more informa-<br/>tion.<br/></p>
<p>&#8226; Do not use the JUCE callAsync() function - it is not real-time safe. As an alternative, you can use a separate<br/>dedicated thread that wakes on a timer or the AAX TimerWakeup() method to handle non-real time work.<br/></p>
<p>&#8226; Never perform PACE license checks in audio processing thread; always add code annotations to prevent<br/>license checks in any code which will be executed from the audio processing callback.<br/></p>
<p><b>12.31.2 Things To Do In An Audio Plug-In Render Callback<br/></b></p>
<p>&#8226; If passing data, always use lock-free FIFOs<br/></p>
<p><b>&#8211; </b>When making data from other parts of the plug-in available to its real-time callback you should always<br/>use the AAX packet system; this will ensure thread safety, proper timing of the data delivery with respect<br/>to the audio being processed, and optimal real-time thread performance.<br/></p>
<p><b>&#8211; </b>There is a nice reference implementation for a general-purpose FIFO in the farbot project<br/><b>&#8211; </b>Lock-free FIFOs are also good for passing data from the real-time thread to a low-priority thread in order<br/></p>
<p>to do heavy lifting like writes to disk<br/></p>
<p>&#8226; If sharing small amounts of data (&lt;= 8 bytes), use atomics<br/></p>
<p><b>&#8211; </b>Make a local copy/cache of any atomic values that need to be read multiple times from your render<br/>function<br/></p>
<p><b>&#8211; </b>When using atomics, always make the compiler prove that its implementation is lock-free e.g. using a<br/>static_assert that std::atomic&lt;T&gt;::is_always_lock_free<br/></p>
<p>&#8226; When sharing larger data, if it is acceptable if the data sometimes cannot be accessed, use a try_lock() in the<br/>real-time thread and a lock() in any non-real-time threads.<br/></p>
<p><b>&#8211; </b>When using this strategy you should use a spin lock, not a std::mutex; std::mutex::unlock() can block in<br/>a system call to wake the waiting thread<br/></p>
<p>&#8226; When sharing larger data, if it is acceptable to access a stale copy of the data, then use a compare-and-<br/>exchange loop<br/></p>
<p><b>&#8211; </b>Be careful about memory leaks with this strategy<br/><b>&#8211; </b>See the NonRealtimeMutable template in the farbot project<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>114 Module Documentation<br/></b></p>
<p><b>12.31.3 Good Resources And Examples<br/></b></p>
<p>&#8226; Real-time audio programming 101: time waits for nothing by Ross Bencina<br/></p>
<p>&#8226; Four common mistakes in audio development by Michael Tyson<br/></p>
<p>&#8226; farbot: FAbian's Realtime Box o' Tricks project on GitHub<br/></p>
<p>Collaboration diagram for Real-time performance:<br/></p>
<p><b>12.32 Parameter automation<br/></b></p>
<p>Information about parameter automation.<br/></p>
<p><b>12.32.1 On this page<br/></b></p>
<p><b>12.32.2 Overview<br/></b></p>
<p>The term &quot;automation&quot; can mean two things in AAX:<br/></p>
<p>1. A host feature allowing users to record and play back plug-in parameter changes. In this documentation, this<br/>data is referred to as <b>automation data</b>, and it is stored in <b>automation lanes </b>in the host.<br/></p>
<p>2. A system for arbitrating between changes from different parameter editors such as the plug-in GUI, control<br/>surfaces, and pre-recorded automation values. In this documentation, this is referred to as the <b>event system<br/></b>for parameters.<br/></p>
<p>Here are some examples of how these two different meanings are used in AAX:<br/></p>
<p>&#8226; The AAX_IAutomationDelegate provides methods for interacting with the host's parameter event system.<br/></p>
<p>&#8226; AAX_IACFEffectParameters::GetParameterIsAutomatable() and the automatable parameter in the<br/>AAX_CParameter constructor reflect whether a parameter can have automation written and read by the<br/>host.<br/></p>
<p>&#8226; AAX_IController::GetCurrentAutomationTimestamp() gets the timestamp for pre-recorded automation data<br/>when it is received by the plug-in during playback<br/></p>
<p>For more information about the parameter event system, see the Parameter updates pages, and particularly the<br/>information on the Token protocol<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.32 Parameter automation 115<br/></b></p>
<p><b>12.32.3 Plug-in elements used for automation<br/></b></p>
<p>Plug-In<br/></p>
<p>Host<br/></p>
<p>Control surface<br/></p>
<p>Automatable parameters Non-automatable parameters<br/></p>
<p>Automation data<br/></p>
<p>Event system<br/></p>
<p>Default page table ('PgTL') Surface-specific page table GUI<br/></p>
<p>Mapped parameters<br/></p>
<p><b>Figure 12.4 Plug-in elements used for events and automation<br/></b></p>
<p><b>12.32.3.1 Defining automatable parameters<br/></b></p>
<p>In order for a parameter to be available for automation recording, editing, and playback, the plug-in must meet the<br/>following criteria:<br/></p>
<p>&#8226; It must provide true when the host calls GetParameterIsAutomatable() for the parameter. In nearly all<br/>plug-ins, this means providing true to the automatable parameter in the parameter's AAX_CParameter<br/>constructor.<br/></p>
<p>&#8226; It must expose the parameter to the parameter event system (see below.)<br/></p>
<p>In order for a parameter to be exposed to the event system, the plug-in must meet the following criteria:<br/></p>
<p>&#8226; It must respond to all parameter methods in the AAX_IEffectParameters interface, particularly<br/>GetNumberOfParameters() and GetParameterIDFromIndex(). Generally this is accomplished by adding<br/>an AAX_CParameter object for each parameter to the plug-in's Parameter Manager.<br/></p>
<p>&#8226; It must include the parameter in its one-parameter-per-page 'PgTL' (default) page tables. See<br/>Implementing Page Tables in the Page Table Guide for more information about defining this page table<br/>type.<br/></p>
<p>All plug-in parameters must be registered with the host's event system in order for editors, including the plug-in's<br/>GUI, to work properly. Therefore a plug-in should always define a complete 'PgTL' (default) page table including<br/>all of its parameters, even the parameters that are not &quot;automatable&quot;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>116 Module Documentation<br/></b></p>
<p><b>12.32.4 Advanced automation topics<br/></b></p>
<p>&#8226; Linked parameters<br/></p>
<p>Collaboration diagram for Parameter automation:<br/></p>
<p><b>12.33 Parameter updates<br/></b></p>
<p><b>12.33.1<br/></b></p>
<p>The anatomy of a parameter update.<br/></p>
<p><b>Documents<br/></b></p>
<p>&#8226; Parameter update timing<br/>Details about parameter timing and how to keep parameter updates in sync.<br/></p>
<p>&#8226; Token protocol<br/>Communicating parameter state with the host.<br/></p>
<p>&#8226; Basic parameter update sequences<br/>Sequence diagrams for some common parameter update scenarios.<br/></p>
<p>&#8226; Linked parameters<br/>How to link parameters.<br/></p>
<p>&#8226; Linked parameter update sequences<br/>Sequence diagrams for some common linked parameter update scenarios.<br/></p>
<p>Collaboration diagram for Parameter updates:<br/></p>
<p><b>12.34 Parameter update timing<br/></b></p>
<p>Details about parameter timing and how to keep parameter updates in sync.<br/></p>
<p><b>12.34.1 On this page<br/></b></p>
<p>&#8226; Timeline Locations<br/></p>
<p>&#8226; Coordinating the data model and algorithm<br/></p>
<p>&#8226; Fixing timing issues due to shared data<br/></p>
<p>&#8226; Determining the absolute timestamp for a parameter update<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.34 Parameter update timing 117<br/></b></p>
<p><b>12.34.2 Timeline Locations<br/></b></p>
<p>At any given moment, a plug-in may be asked to handle events from multiple locations on the timeline. Each module<br/>in an AAX plug-in may be updated using a different timeline position. For example:<br/></p>
<p>&#8226; During automation playback the host may choose to send parameter updates in advance, while the algorithm<br/>is still processing audio from earlier in the timeline.<br/></p>
<p>&#8226; When a processing chain involves a significant amount of latency, the host may delay the metering data<br/>which is available to the plug-in's GUI until the point in time when the corresponding processed audio is<br/>actually being played back to the user.<br/></p>
<p>In this article, we will refer to the following timeline locations:<br/></p>
<p>&#8226; Automation time: The location that corresponds to the state of the plug-in's data model<br/></p>
<p>&#8226; Playhead: The location where the audio engine is currently gathering samples for processing<br/></p>
<p>&#8226; Render time: The location of the audio samples currently being processed by the plug-in's algorithm<br/></p>
<p>&#8226; Presentation time: The location that corresponds to the playback presentation to the user (i.e. the sound<br/>coming out of the speakers)<br/></p>
<p>Figure 1: Timeline locations<br/></p>
<p><b>12.34.3 Coordinating the data model and algorithm<br/></b></p>
<p>As an AAX plug-in developer, you don't usually need to worry about the fact that your plug-in's data model and<br/>algorithm may each represent a different point in the timeline; the AAX packet system handles all of the necessary<br/>synchronization between these two locations.<br/></p>
<p>This works seamlessly in a normal AAX plug-in because the real-time algorithm is fully decoupled from the plug-in's<br/>data model. Since all of the state information for the algorithm is delivered through its context structure, the host can<br/>simply swap in the correct context data for each call to the processing callback. The plug-in does not require any<br/>special handling code to synchronize between the two timeline locations, and, as a bonus, AAX plug-ins can achieve<br/>deterministic, accurate automation playback without doing any extra work to handle time-stamped parameter update<br/>queues or other overhead.<br/></p>
<p>Figure 2: Synchronization through the AAX packet system<br/></p>
<p><b>12.34.3.1 A closer look at the AAX packet delivery system<br/></b></p>
<p><b>Adding new packets for automation events<br/></b>When playing back automation, the AAX host calls UpdateParameterNormalizedValue() to update the<br/>data model state, then calls GenerateCoefficients() to trigger the generation of new packets. See<br/>Basic parameter update sequences for a full description of this sequence.<br/>Before the host calls GenerateCoefficients() to generate packets for an automation breakpoint, it records<br/>the timeline position of the breakpoint (AAX_IController::GetCurrentAutomationTimestamp() provides this<br/>value as a sample offset from the beginning of playback.) Every packet that is posted during execution of<br/>GenerateCoefficients() is tagged with this timestamp when it is queued for delivery.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>118 Module Documentation<br/></b></p>
<p><b>Packet delivery for AAX Native plug-ins<br/></b>As the playhead advances and sample buffers are queued for processing, the host tracks the location of the<br/>next time-stamped packet in the packet queue. As the render time location for a Native plug-in processing<br/>chain approaches the next packet time-stamp for a plug-in in the chain, the host divides the plug-in's pro-<br/>cessing buffers into smaller buffers. When the render time location is as close as possible to the packet's<br/>time-stamp, the host delivers the packet. The packet data is available to the algorithm in its context the next<br/>time it is executed.<br/>Because the host may divide native processing buffers down to a minimum size of AAX_eAudioBufferLengthNative_Min<br/>- 32 samples - the host can guarantee that all automation playback will be effected within 32 samples of the<br/>actual automation breakpoint location. In addition, with the help of some extra internal bookkeeping, AAX<br/>hosts also guarantee that the exact sample where an automation breakpoint is applied will be deterministic<br/>and will not change between different playback passes.<br/></p>
<p><b>Packet delivery for AAX DSP plug-ins<br/></b>The packet delivery system for AAX DSP plug-ins works similarly to the system for AAX Native plug-ins. AAX<br/>DSP plug-ins use a fixed buffer size, so the host is not able to divide their playback buffers into smaller units:<br/>the plug-in will receive each data packet in the fixed-size playback buffer which most closely corresponds to<br/>the location of the automation event which triggered the packet.<br/>An AAX DSP plug-in which declares an AAX_eProperty_DSP_AudioBufferLength value of N will be guar-<br/>anteed to receive data packets within N/2 samples of the actual automation event position on the timeline.<br/>Since the default buffer size for an AAX DSP plug-in is 4 samples, this yields extremely accurate automation<br/>playback with no extra work required in the plug-in algorithm.<br/></p>
<p><b>12.34.4 Fixing timing issues due to shared data<br/></b></p>
<p>The packet system works perfectly to synchronize the states of the plug-in data model and algorithm, but only<br/>when the plug-in algorithm is fully decoupled from the data model. If the algorithm directly shares data with the data<br/>model then the algorithm will immediately start using any new data model state without waiting for the corresponding<br/>coefficient delivery.<br/></p>
<p>Figure 3 shows one kind of problem that can arise when a plug-in uses the same state for both its data model and<br/>its algorithm. In this case, the plug-in applied a volume trim (shown in the automation lane at the top of the image)<br/>to its algorithm as soon as the parameter update was applied to its data model, even though the algorithm was not<br/>yet processing the audio at the Automation time location. As a result, the audio trim was applied several hundred<br/>samples too early.<br/></p>
<p>Figure 3: Offset automation playback due to lack of timeline location synchronization in a monolithic plug-in<br/></p>
<p><b>12.34.4.1 Monolithic plug-ins<br/></b></p>
<p>Plug-ins that share data directly between their data model and algorithm are referred to as monolithic. All plug-ins<br/>that inherit from the AAX_CMonolithicParameters helper class are monolithic.<br/></p>
<p><b>Note<br/></b>Monolithic plug-ins must always set the AAX_eProperty_Constraint_Location property to include<br/>AAX_eConstraintLocationMask_DataModel in order to avoid being loaded into incompatible AAX hosts.<br/></p>
<p>All monolithic plug-ins must include special handling code to reconcile the plug-in's automation time state with its<br/>render time state.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.34 Parameter update timing 119<br/></b></p>
<p><b>12.34.4.2 How to resolve timing errors<br/></b></p>
<p>There are many possible solutions for the timing errors that arise when a plug-in combines data from different time<br/>locations. Ultimately, the plug-in must separate the state that is represented at different time locations.<br/></p>
<p>In most cases, this requires deferring data model state changes from being applied to the algorithm until the rele-<br/>vant samples are being processed in the render callback. One easy way to accomplish this separation is to take<br/>advantage of the synchronization provided by the AAX packet delivery system. This approach benefits from the fact<br/>that it emulates the design of a normal, decoupled AAX plug-in.<br/></p>
<p>After a packet is queued with a call to PostPacket(), the packet delivery system will wait to update the algorithm's<br/>context structure with the packet's data until the Render time location is very close to the automation event (see<br/>above.) This provides an appropriate mechanism for deferring state changes in the plug-in's data model until the<br/>Render time location has &quot;caught up&quot; to the correct sample.<br/></p>
<p>Figure 4 shows the same scenario as Figure 3, but now the plug-in has been updated to defer data model updates<br/>from the automation time location so that they are applied as coefficients in the algorithm when the render time<br/>location has reached the correct point on the timeline.<br/></p>
<p>Figure 4: Deferring a data model update in a monolithic plug-in using the packet queue<br/></p>
<p>Here is one way to use the packet delivery system to defer changes to the data model state:<br/>AAX_Result<br/>MyEffectParameters::UpdateParameterNormalizedValue(<br/></p>
<p>AAX_CParamID iParamID,<br/>double aValue,<br/>AAX_EUpdateSource inSource)<br/></p>
<p>{<br/>// Call inherited<br/>AAX_Result result = AAX_CMonolithicParameters::UpdateParameterNormalizedValue(<br/>iParamID,<br/>aValue,<br/>inSource);<br/></p>
<p>if (AAX_SUCCESS != result) { return result; }<br/></p>
<p>// Do whatever additional work is required to note that the<br/>// parameter has been updated - for example, set a &quot;dirty&quot;<br/>// flag for the parameter.<br/></p>
<p>return result;<br/>}<br/>AAX_Result<br/>MyEffectParameters::GenerateCoefficients()<br/>{<br/></p>
<p>// Call inherited<br/>AAX_Result result = AAX_CMonolithicParameters::GenerateCoefficients();<br/>if (AAX_SUCCESS != result) { return result; }<br/></p>
<p>const uint32_t stateNum = mMyStateCounter++; // member uint32_t<br/></p>
<p>// Do whatever additional work is required to capture the current<br/>// parameter state and associate it with stateNum, for example<br/>// check for &quot;dirty&quot; parameters and create a list of these<br/>// parameters with their values, add this list to a map using<br/>// stateNum as a key, and clear the &quot;dirty&quot; flags.<br/></p>
<p>result = Controller()-&gt;PostPacket(<br/>kCurrentStateFieldIndex,<br/>&amp;stateNum,<br/>sizeof(uint32_t));<br/></p>
<p>return result;<br/>}<br/>struct MyContextStructure<br/>{<br/></p>
<p>int32_t * mCurrentStateNum; // Private data<br/>// ...<br/></p>
<p>};<br/>void<br/>MyAudioRenderCallback(<br/></p>
<p>MyContextStructure* const inInstancesBegin [],<br/>const void* inInstancesEnd)<br/></p>
<p>{<br/>/* For each instance... */<br/>const uint32_t stateNum = instance-&gt;mCurrentStateNum;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>120 Module Documentation<br/></b></p>
<p>// Update the custom plug-in object state based on stateNum<br/>// and the additional data that was cached during<br/>// GenerateCoefficients().<br/></p>
<p>}<br/></p>
<p>Figure 5: One specific solution for deferring a data model update in a monolithic plug-in using the packet queue<br/></p>
<p>This approach is incorporated directly into the design of AAX_CMonolithicParameters. If your plug-in data model is<br/>a subclass of AAX_CMonolithicParameters then you can follow these steps to ensure accurate parameter update<br/>timing in your plug-in:<br/></p>
<p>1. After creating an automatable parameter, call AAX_CMonolithicParameters::AddSynchronizedParameter() to<br/>add the parameter to an internal list of parameters to synchronize using the deferred-update system<br/></p>
<p>2. In the plug-in's RenderAudio() implementation, iterate through the incoming queue of deferred parameter<br/>values<br/></p>
<p>3. Update the coefficients used by the plug-in's algorithm or other processing components<br/></p>
<p>NOTES<br/></p>
<p>&#8226; Remember to use the deferred parameter values, not values of the plug-in's AAX_IParameter objects, when<br/>setting the state of the plug-in's coefficients<br/></p>
<p>&#8226; The deferred parameter values are delivered in the real-time thread, so all synchronized updates should follow<br/>the basic principles of real-time operation such as avoiding memory allocation/free, thread synchronization,<br/>access to shared resources, or any other actions which could block the real-time thread<br/></p>
<p>For reference, see DemoMIDI_Synth and the other example instrument plug-ins. All of the instrument examples in<br/>the AAX SDK use these facilities to achieve deterministic, accurate playback for automated parameters.<br/></p>
<p>One benefit of this approach is that it provides a compatible interface with monolithic plug-in objects which<br/>are designed to work across multiple plug-in formats. For example, the set of parameter updates provided to<br/>AAX_CMonolithicParameters::RenderAudio() &quot;RenderAudio&quot; can be provided to plug-in objects which require a<br/>queue of time-stamped parameter updates for each audio render callback.<br/></p>
<p><b>12.34.4.3 Additional considerations<br/></b></p>
<p>Of course, the approach described in this section is just one possible solution. The timestamp section below<br/>provides some alternatives to using the packet queue system for synchronization. Ultimately, the best design for<br/>your plug-in will depend on the facilities that are available in the plug-in's monolithic state object, the size of this<br/>object, its interface, the number of parameters representing its state, and other internal details.<br/></p>
<p>Here are some additional factors to consider when using the packet queue system for time location synchronization<br/>of parameter updates:<br/></p>
<p>&#8226; The algorithm callback / RenderAudio() method is called from a real-time thread, and may be called con-<br/>currently with data model methods. You should use a synchronization strategy that is optimized for high<br/>performance in this thread.<br/></p>
<p>&#8226; If a parameter is not automatable then you should probably ignore these additional steps and directly update<br/>the plug-in's monolithic state object from within UpdateParameterNormalizedValue() when that parameter<br/>is changed. Updates for non-automatable parameters can always be applied to the algorithm &quot;as soon as<br/>possible&quot;.<br/></p>
<p>&#8226; Depending on your plug-in's design you may not need or want to apply this solution to some automatable<br/>parameters either. For example, parameters that are unlikely to be automated or which require CPU-<br/>intensive changes in your instrument object should probably be updated on the object directly from within<br/>UpdateParameterNormalizedValue(), and not from within the real-time thread<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.34 Parameter update timing 121<br/></b></p>
<p><b>12.34.5 Determining the absolute timestamp for a parameter update<br/></b></p>
<p>The AAX packet queue provides a host-managed system for applying parameter updates at the correct location<br/>without requiring any special knowledge about the timeline. However, In some situations a plug-in may need to<br/>know the absolute sample position of a parameter change.<br/></p>
<p>For example, a plug-in that synchronizes parameter changes to some external system, and which wants to forward<br/>these changes over to the external system as early as possible, would want to know the sample position for a<br/>coefficient update when the update is first triggered by a call to GenerateCoefficients.<br/></p>
<p>In these situations it is not suitable to simply use a method like AAX_ITransport::GetCurrentNativeSampleLocation()<br/>which returns the current position of the audio render thread. The parameter update may be occurring at a different<br/>location on the timeline from the current render position, so using the current render position for the update would<br/>result in timeline offset problems similar to those described above.<br/></p>
<p><b>12.34.5.1 Obtaining timeline information<br/></b></p>
<p>AAX provides a variety of information that can be used for timeline synchronization. This information is provided<br/>through a combination of AAX_ITransport, AAX_IController, and MIDI beat clock data. Here is a summary of the<br/>relevant ways that a plug-in can get information about the timeline and timing synchronization data:<br/></p>
<p>&#8226; AAX_ITransport::GetCurrentNativeSampleLocation() Provides the absolute sample position of the first sam-<br/>ple in the audio buffer that is currently being processed by the plug-in's worker chain<br/></p>
<p>&#8226; AAX_IController::GetTODLocation() Provides the current &quot;time of day&quot; value, which is a counter within the<br/>audio engine that counts the number of samples that the playhead has traversed since playback start<br/></p>
<p>&#8226; AAX_IController::GetCurrentAutomationTimestamp() Must be called from within GenerateCoefficients. Pro-<br/>vides the timestamp for the beginning of the hardware audio buffer during which the generated coefficients<br/>will be applied to the algorithm. This timestamp is provided in terms of the &quot;time of day&quot; counter, i.e. the<br/>number of samples since playback started.<br/></p>
<p>&#8226; MIDI Beat Clock Sends transport start/continue/stop events to plug-ins that register global MIDI nodes<br/></p>
<p><b>12.34.5.2 Determining the timeline position of a parameter update<br/></b></p>
<p>Each of the available methods for getting information about the timeline position has a particular purpose. No single<br/>interface method can be used to directly determine the sample location for a parameter update, but it is possible to<br/>determine this value by combining information from a few of the available methods.<br/></p>
<p>Here are some possible approaches for determining the timeline position of a parameter update<br/></p>
<p><b>Note<br/></b>Remember that these are not strict recipes; the specific requirements for what kinds of timeline information<br/>are needed will vary from plug-in to plug-in. You may be able to refine these approach to better match the<br/>needs of your specific plug-in.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>122 Module Documentation<br/></b></p>
<p><b>12.34.5.2.1 1. Defer the update to the real-time thread<br/></b></p>
<p>1. Queue state updates using a plug-in design similar to the one described above<br/></p>
<p>2. When a state update is received on the real-time thread, call GetCurrentNativeSampleLocation to get the<br/>sample location for the start of the current render buffer<br/></p>
<p>3. Perform all necessary update handling using this value as the sample location<br/></p>
<p>NOTES<br/></p>
<p>&#8226; This approach yields a sample location value which is accurate within 32 samples<br/></p>
<p>&#8226; Event handling must be performed on the real-time render thread, which may not be viable depending on the<br/>types of operations that the plug-in must perform<br/></p>
<p>&#8226; Event handling cannot be performed in advance to reduce overall system latency<br/></p>
<p><b>12.34.5.2.2 2. Compute the timestamp as a TOD offset<br/></b></p>
<p>1. Add a queue for update events which will be used internally within the plug-in's AAX_IEffectParameters object<br/></p>
<p>2. In UpdateParameterNormalizedValue, enqueue an update event<br/></p>
<p>3. In GenerateCoefficients, call AAX_IController::GetTODLocation() and AAX_IController::GetCurrentAutomationTimestamp()<br/></p>
<p>4. Subtract the current TOD value from the automation timestamp to find the number of samples currently lie<br/>between the data model location and the render audio location on the timeline<br/></p>
<p>5. Call AAX_ITransport::GetCurrentNativeSampleLocation() and add the resulting value to the sample offset that<br/>was determined in the last step. The sum of these two values is the approximate absolute sample location<br/>for the coefficient update.<br/></p>
<p>6. Once this sample location has been calculated, dequeue all pending update events and handle them using<br/>the calculated timestamp<br/></p>
<p>The reason that this approach yields an approximate value is that the TOD location and current playback location<br/>are both given in terms of the real-time audio workers, and these values continue to progress simultaneously with<br/>execution of methods on the automation update thread. As a result, this approach will yield an absolute timestamp<br/>that is &quot;late&quot; by between zero and one hardware buffer.<br/></p>
<p>NOTES<br/></p>
<p>&#8226; Using this approach it is possible to handle parameter updates in advance to reduce overall system latency<br/></p>
<p>&#8226; This approach yields a sample location value which is accurate within one hardware buffer<br/></p>
<p>&#8226; This approach uses AAX interface methods that are not supported in older AAX hosts such as Pro Tools 10<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.35 Token protocol 123<br/></b></p>
<p><b>12.34.5.2.3 3. Compute the timestamp with improved accuracy using MIDI Beat Clock </b>You can refine the<br/>approach described above by using MBC events to detect the location of playback start.<br/></p>
<p>1. Register a global MIDI node in your plug-in using AAX_IEffectDescriptor::AddControlMIDINode() with<br/>AAX_eMIDINodeType_Global and the appropriate event mask bitfield for MBC events<br/></p>
<p>2. Override AAX_IEffectParameters::UpdateControlMIDINodes() to receive MBC data<br/></p>
<p>3. When an MBC Start or Continue event is received, call AAX_ITransport::GetCurrentNativeSampleLocation()<br/>to get the current render location. Cache this value. This value should represent the absolute playback start<br/>sample since audio render will not have started before the MBC event dispatch.<br/></p>
<p>4. As in the previous solution, queue relevant update events in UpdateParameterNormalizedValue<br/></p>
<p>5. In GenerateCoefficients, call GetCurrentAutomationTimestamp and add the resulting value to the cached<br/>playback start sample location<br/></p>
<p>6. Dequeue all pending update events and handle them using the calculated absolute sample timestamp<br/></p>
<p>NOTES<br/></p>
<p>&#8226; Using this approach it is possible to handle parameter updates in advance to reduce overall system latency<br/></p>
<p>&#8226; This approach will yield timestamps within a few samples of the actual automation event location on the Pro<br/>Tools timeline<br/></p>
<p>&#8226; This approach uses AAX interface methods that are not supported in older AAX hosts such as Pro Tools 10<br/></p>
<p>Collaboration diagram for Parameter update timing:<br/></p>
<p><b>12.35 Token protocol<br/></b></p>
<p>Communicating parameter state with the host.<br/></p>
<p><b>12.35.1 On this page<br/></b></p>
<p>&#8226; An Introduction to Tokens<br/></p>
<p>&#8226; Basic Token Operation<br/></p>
<p><b>12.35.2 An Introduction to Tokens<br/></b></p>
<p>One way in which a plug-in can communicate with the &quot;outside world&quot; is through Shared Data Services, also known<br/>as the Token System. This is a mechanism that allows Pro Tools to share parameter information with external<br/>hardware and software modules. While the AAX SDK only uses the Token System indirectly, knowing how it works<br/>will provide a good understanding of how linked parameters should operate.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>124 Module Documentation<br/></b></p>
<p><b>12.35.2.1 Touch<br/></b></p>
<p>Touch tokens inform the system of user interaction with a parameter. When a parameter is being touched the system<br/>knows to stop sending automation data to the plug-in and just use the SET value of the parameter. It is also used<br/>to tell the system when to start/stop recording new automation data.<br/></p>
<p>In AAX, the touch message is sent to the host by AAX_IAutomationDelegate::PostTouchRequest(). The most com-<br/>mon way to call this method is via the following methods:<br/>class AAX_IEffectParameters<br/>{<br/></p>
<p>virtual AAX_Result TouchParameter ( AAX_CParamID inParameterID );<br/>virtual AAX_Result ReleaseParameter ( AAX_CParamID inParameterID );<br/></p>
<p>};<br/>class AAX_IParameter<br/>{<br/></p>
<p>virtual void Touch ();<br/>virtual void Release ();<br/></p>
<p>};<br/></p>
<p>However, AAX plug-ins will rarely need to call these methods directly since the AAX_CParameter and<br/>AAX_CEffectParameters implementations will automatically handle parameter touch and release tokens when-<br/>ever a new value is set on the parameter by the plug-in.<br/></p>
<p>Other clients besides the plug-in may touch a parameter. Since the TOUCH token can come from a control surface<br/>the touch state will actually come back to the plug-in via:<br/>class AAX_IEffectParameters<br/>{<br/></p>
<p>virtual AAX_Result UpdateParameterTouch ( AAX_CParamID iParameterID, AAX_CBoolean iTouchState );<br/>};<br/></p>
<p>This method is mainly important for linked parameters.<br/></p>
<p>Client 1 Client 2 Client 3<br/></p>
<p>Host<br/></p>
<p>Parameter Data<br/></p>
<p>update touch<br/>(async)<br/></p>
<p>View View Controller<br/></p>
<p>touch<br/></p>
<p>View View Controller View<br/></p>
<p><b>Figure 12.5 Touch request from a view controller, with resulting async touch update<br/></b></p>
<p><b>12.35.2.2 Set<br/></b></p>
<p>SET tokens can come from many different locations: the plug-in GUI, a control surface, loading a chunk or automa-<br/>tion playback. Eventually the value of a SET token comes into the plug-in and that's when the internal value of the<br/>parameter gets updated. In AAX the SET token will be sent as a result of calling the following method:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.35 Token protocol 125<br/></b></p>
<p>class AAX_CParemeter&lt;T&gt;<br/>{<br/></p>
<p>void SetValue ( T newValue );<br/>};<br/></p>
<p>which will be called from many other supporting methods:<br/>class AAX_CParameter&lt;T&gt;<br/>{<br/></p>
<p>bool SetValueWithBool ( bool value );<br/>bool SetValueWithInt32 ( int32_t value );<br/>bool SetValueWithFloat ( float value );<br/>bool SetValueWithDouble ( double value );<br/>void SetToDefaultValue ();<br/>void SetNormalizedValue ( double normalizedNewValue );<br/>bool SetValueFromString ( const AAX_CString &amp; newValueString );<br/></p>
<p>};<br/></p>
<p>When a SET token enters the system from the GUI, control surface or automation the value comes bak to the plug-in<br/>via the following method:<br/>class AAX_CEffectParameters<br/>{<br/></p>
<p>AAX_Result UpdateParameterNormalizedValue ( AAX_CParamID iParameterID, double aValue, AAX_EUpdateSource<br/>inSource);<br/></p>
<p>};<br/></p>
<p>At this point the internal contents of the plug-in are set.<br/></p>
<p>Client 1 Client 2 Client 3<br/></p>
<p>Host<br/>(Client 1 has touch)<br/></p>
<p>Parameter Data<br/></p>
<p>update value<br/>(async)<br/></p>
<p>View View Controller<br/></p>
<p>set<br/></p>
<p>View View Controller View<br/></p>
<p><b>Figure 12.6 Set token asynchronously changes state of the parameter data<br/></b></p>
<p><b>12.35.2.3 Update<br/></b></p>
<p>An update token is generated when the internal value of a parameter has been set. GUIs and control surfaces<br/>listen for UPDATE tokens to update the displayed values. In AAX the UPDATE token is sent by calling the following<br/>method:<br/>class AAX_CParameter&lt;T&gt;<br/>{<br/></p>
<p>void UpdateNormalizedValue ( double newNormalizedValue );<br/>};<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>126 Module Documentation<br/></b></p>
<p>All views of the parameter are then asynchronously notified that the value has changed. The plug-in GUI is notified<br/>via a call to AAX_IEffectGUI::ParameterUpdated().<br/></p>
<p>Client 1 Client 2 Client 3<br/></p>
<p>Host<br/></p>
<p>View<br/></p>
<p>update<br/>(async)<br/></p>
<p>View<br/></p>
<p>update<br/>(async)<br/></p>
<p>View<br/></p>
<p>update<br/>(async)<br/></p>
<p>Parameter Data<br/></p>
<p>current value<br/></p>
<p>View Controller View Controller<br/></p>
<p><b>Figure 12.7 Update token triggers async updates to all views<br/></b></p>
<p><b>12.35.3 Basic Token Operation<br/></b></p>
<p>The lists below indicate how the system works in a few different standard update scenarios. To enable<br/>logging for these events set DTF_AUTOMATION=file@DTP_LOW in the DigiTrace configuration file. For<br/>more detailed information about the sequence of calls used to update parameters in different situations, see<br/>Basic parameter update sequences.<br/></p>
<p><b>12.35.3.1 User Editing<br/></b></p>
<p>1. User clicks on a parameter in the GUI or grabs a parameter on the controls surface. A TOUCH token should<br/>be sent at this point.<br/></p>
<p>2. The user changes the parameter from the GUI or controls surface. A SET token should be sent at this point.<br/>3. The SET token goes into the system and comes back to the plugin via UpdateParameterNormalizedValue().<br/>4. The plug-in updates it's internal state and sends an UPDATE token.<br/>5. Repeat steps 2-4 while changing the parameter.<br/>6. The user lets go of the GUI or controls surface. A TOUCH token with the released state should be sent.<br/></p>
<p><b>12.35.3.2 Automation Playback<br/></b></p>
<p>1. The SET token comes from the automation system and enters the plugin via UpdateParameterNormalized&#8592;&#8617;<br/>Value().<br/></p>
<p>2. The plug-in updates it's internal state and sends an UPDATE token.<br/>3. Repeat steps 1-2 while playing back automation.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.36 Basic parameter update sequences 127<br/></b></p>
<p><b>12.35.3.3 Chunk Restoring<br/></b></p>
<p>1. Plug-in loads the chunk.<br/></p>
<p>2. The plug-in sets every parameters value. Another thing to note is that the<br/></p>
<p>3. SetValue() method also contains Touch() and Release() calls. So, while setting every parameter there is a<br/>combination of TOUCH and SET tokens sent to the system.<br/></p>
<p>4. The SET tokens comes back to the plugin via UpdateParameterNormalizedValue().<br/></p>
<p>5. The plug-in updates it's internal state and sends out UPDATE tokens.<br/></p>
<p>Collaboration diagram for Token protocol:<br/></p>
<p><b>12.36 Basic parameter update sequences<br/></b></p>
<p>Sequence diagrams for some common parameter update scenarios.<br/></p>
<p><b>12.36.1 On this page<br/></b></p>
<p>&#8226; User-generated update<br/></p>
<p>&#8226; Automation playback<br/></p>
<p>&#8226; Initialization<br/></p>
<p><b>Note<br/></b>To enable logging for these events at run time set DTF_AUTOMATION=file@DTP_LOW in the DigiTrace<br/>configuration file.<br/></p>
<p><b>12.36.1.1 Notes on threading for these sequences<br/></b></p>
<p>&#8226; Calls from the host into AAX_IEffectParameters may occur on any thread. In general, the only synchronization<br/>that is guaranteed for data model calls in these diagrams is that the call will follow whatever event is indicated<br/>as its trigger.<br/></p>
<p>&#8226; Calls from the host into AAX_IEffectGUI will occur on the main application thread unless indicated otherwise<br/>in the AAX_IEffectGUI documentation.<br/></p>
<p>&#8226; Host-driven updates to the algorithm context are always synchronized with the real-time processing thread<br/></p>
<p><b>12.36.2 User-generated update<br/></b></p>
<p>This is the sequence of calls for a basic, unlinked parameter update triggered by the user. For this sequence, we<br/>assume that the edit was triggered by a GUI event.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>128 Module Documentation<br/></b></p>
<p><b>12.36.2.1 High-level interface calls and events<br/></b></p>
<p>Host Plug-In<br/></p>
<p>Edit event handling<br/></p>
<p>OS Edit Event<br/></p>
<p>AAX_IAutomationDelegate::PostTouchRequest()<br/></p>
<p>AAX_IAutomationDelegate::PostSetValueRequest()<br/></p>
<p>AAX_IAutomationDelegate::PostReleaseRequest()<br/></p>
<p>Set value handling<br/></p>
<p>PostTouchRequest() processed<br/></p>
<p>AAX_IEffectParameters::UpdateParameterTouch()<br/>iTouchState: true<br/></p>
<p>PostSetValueRequest() processed<br/></p>
<p>AAX_IEffectParameters::UpdateParameterNormalizedValue()<br/>iSource: AAX_eUpdateSource_Unspecified<br/></p>
<p>Update parameter state<br/></p>
<p>AAX_IAutomationDelegate::PostCurrentValue()<br/></p>
<p>Increment number of changes<br/></p>
<p>PostReleaseRequest() processed<br/></p>
<p>AAX_IEffectParameters::UpdateParameterTouch()<br/>iTouchState: false<br/></p>
<p>Current value handling<br/></p>
<p>Following UpdateParameterNormalizedValue()<br/></p>
<p>AAX_IEffectParameters::GenerateCoefficients()<br/>timestamp<br/></p>
<p>AAX_IController::PostPacket()<br/></p>
<p>PostCurrentValue() processed<br/></p>
<p>Update other clients<br/>(async)<br/></p>
<p>AAX_IEffectGUI::ParameterUpdated()<br/></p>
<p>Update GUI state<br/></p>
<p>Timestamp synchronization with real-time thread<br/></p>
<p>PostPacket() processed<br/></p>
<p>Update algorithm context<br/></p>
<p><b>Figure 12.8 High-level sequence of interface calls and events for a parameter update following a<br/>user-generated edit<br/></b></p>
<p><b>12.36.2.2 Detailed sequence for default implementation<br/></b></p>
<p>Note that this diagram assumes a GUI implementation that uses SetParameterNormalizedValue(). The im-<br/>plementation could also use other parameter set methods, either in AAX_IEffectParameters or directly on an<br/>AAX_IParameter. The overall sequence would remain the same.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.36 Basic parameter update sequences 129<br/></b></p>
<p>HostAAX_IAutomationDelegateAAX_IControllerAAX_CEffectParametersAAX_CParameterAAX_CPacketDispatcherPlug-in Data ModelPlug-in GUI Algorithm<br/></p>
<p>Implemented by Host Default AAX Library Implementation Implemented by Plug-in<br/></p>
<p>Edit event handling<br/></p>
<p>OS Edit<br/>Event<br/></p>
<p>Convert to normalized<br/></p>
<p>SetParameterNormalizedValue()<br/></p>
<p>SetNormalizedValue()<br/></p>
<p>SetNormalizedValue<br/></p>
<p>PostTouchRequest()<br/></p>
<p>PostSetValueRequest()<br/></p>
<p>PostReleaseRequest()<br/></p>
<p>Set value handling<br/></p>
<p>PostTouchRequest() processed<br/></p>
<p>UpdateParameterTouch()<br/>iTouchState: true<br/></p>
<p>PostSetValueRequest() processed<br/></p>
<p>UpdateParameterNormalizedValue()<br/>iSource: AAX_eUpdateSource_Unspecified<br/></p>
<p>UpdateNormalizedValue()<br/></p>
<p>Update parameter state<br/></p>
<p>PostCurrentValue()<br/></p>
<p>SetDirty()<br/></p>
<p>Increment number of changes<br/></p>
<p>PostReleaseRequest() processed<br/></p>
<p>UpdateParameterTouch()<br/>iTouchState: false<br/></p>
<p>Current value handling<br/></p>
<p>Following<br/>UpdateParameterNormalizedValue()<br/></p>
<p>GenerateCoefficients()<br/>timestamp<br/></p>
<p>Dispatch()<br/></p>
<p>Packet generation callback<br/></p>
<p>PostPacket()<br/></p>
<p>PostCurrentValue() processed<br/></p>
<p>Update other clients<br/>(async)<br/></p>
<p>ParameterUpdated()<br/></p>
<p>Update GUI state<br/></p>
<p>Timestamp synchronization with real-time thread<br/></p>
<p>PostPacket() processed<br/></p>
<p>Update algorithm context<br/></p>
<p><b>Figure 12.9 Detailed sequence of method calls and events for a parameter update following a<br/>user-generated edit on the plug-in GUI<br/></b></p>
<p><b>12.36.2.3 Updates from control surfaces<br/></b></p>
<p>Updates from control surfaces are handled in exactly the same way. In this case, though, the parameter touch, set<br/>value, and release tokens are generated by the control surface.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>130 Module Documentation<br/></b></p>
<p>Control Surface Host<br/></p>
<p>Edit event handling<br/></p>
<p>Control Surface Edit Event<br/></p>
<p>touch<br/></p>
<p>set value<br/></p>
<p>set value<br/></p>
<p>release<br/></p>
<p>Set value handling, etc.<br/></p>
<p>Proceeds as above<br/></p>
<p><b>12.36.3 Automation playback<br/></b></p>
<p>Automation playback handling is similar to the handling for user-generated parameter updates. However, parame-<br/>ters are never touched/released during automation playback. This allows touches from other clients, such as the<br/>GUI or control surfaces, to override the automation playback.<br/></p>
<p>Host Plug-In<br/></p>
<p>Parameter value automation handling<br/></p>
<p>Automation value changed<br/></p>
<p>UpdateParameterNormalizedValue()<br/>iSource: AAX_eUpdateSource_Unspecified<br/></p>
<p>(see sequence above)<br/></p>
<p>Current value handling<br/></p>
<p>(see sequence above)<br/></p>
<p><b>Figure 12.10 Sequence of method calls and events for playback of parameter automation<br/></b></p>
<p><b>12.36.4 Initialization<br/></b></p>
<p>This is the sequence of calls for the initial parameter updates made during data model initialization. Steps that are<br/>redundant with sections of the standard user-generated update sequence are elided.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.37 Linked parameters 131<br/></b></p>
<p><b>Todo </b>Update this section with information about default chunk setting, which is a separate step following the pro-<br/>cedure described below.<br/></p>
<p>Host Plug-In<br/></p>
<p>Initialization<br/></p>
<p>For each parameter<br/></p>
<p>AAX_IEffectParameters::GetParameterDefaultNormalizedValue()<br/></p>
<p>value<br/></p>
<p>AAX_IEffectParameters::UpdateParameterNormalizedValue()<br/>iSource: AAX_eUpdateSource_Unspecified<br/></p>
<p>(see sequence above)<br/></p>
<p>Following all parameter updates<br/></p>
<p>AAX_IEffectParameters::GenerateCoefficients()<br/></p>
<p>(see sequence above)<br/></p>
<p>Timestamp synchronization with real-time thread<br/></p>
<p>PostPacket() processed<br/></p>
<p>Update algorithm context<br/></p>
<p><b>Figure 12.11 Sequence of method calls and events for parameter updates at plug-in initialization<br/></b></p>
<p>Collaboration diagram for Basic parameter update sequences:<br/></p>
<p><b>12.37 Linked parameters<br/></b>How to link parameters.<br/></p>
<p><b>12.37.1 On this page<br/></b></p>
<p>&#8226; Basics of Linked Parameters<br/>&#8226; Linked Parameter Operation<br/>&#8226; Changing Tapers<br/></p>
<p><b>12.37.2 Basics of Linked Parameters<br/></b></p>
<p>A &quot;linked&quot; parameter can be defined as any parameter whose state is somehow dependent on another parameter.<br/>Within this general definition, there are various different kinds of parameter linking:<br/></p>
<p>&#8226; Linking behavior can operate one-way or parameters can be reciprocally linked<br/>&#8226; Linking between parameters can be one-to-one or one-to-many<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>132 Module Documentation<br/></b></p>
<p><b>12.37.2.1 Basic considerations for parameter linking<br/></b></p>
<p>Although the concept of parameter linking is simple, implementing linked parameter behavior that is intuitive and<br/>consistent can require careful design.<br/></p>
<p>&#8226; Parameter interdependencies and constraints can become complex, especially when handling multiple sets<br/>of linked parameters.<br/></p>
<p>&#8226; Linked parameters that update other parameters during playback can result in subtle timing inconsistencies<br/></p>
<p>&#8226; Automated parameters may contain arbitrary and conflicting automation data<br/></p>
<p>&#8226; A user may attempt to edit multiple linked parameters simultaneously during playback, e.g. using multiple<br/>encoders on a control surface<br/></p>
<p>&#8226; A plug-in may contain dependency cycles between interdependent parameters. These cycles can cause<br/>undesired behavior that is difficult to debug, especially if it only occurs in certain circumstances such as when<br/>loading particular presets.<br/></p>
<p>In all of these cases, a plug-in should provide consistent linked parameter behavior: every automated playback pass<br/>should be identical, parameters should never &quot;fight&quot; one another or trigger rapid and unexpected changes in other<br/>parameters, parameters should not become &quot;stuck&quot; in a particular state, etc.<br/></p>
<p>Here comes trouble<br/></p>
<p><b>12.37.2.2 Defining proper linked parameter behavior<br/></b></p>
<p>A good way to approach parameter linking is to start with an understanding of exactly what behavior you desire.<br/></p>
<p>Here are some behaviors that you probably don't want in your plug-in:<br/></p>
<p>&#8226; BAD: Parameters are only linked when edited from the plug-in GUI Users may attempt to edit linked param-<br/>eters from attached control surfaces or using the host's automation features. The parameters should behave<br/>the same way regardless of which method is used to edit them.<br/></p>
<p>&#8226; BAD: Parameters try to match all automation data Automation data can be written arbitrarily: Pro Tools doesn't<br/>have any restrictions that a user with a pencil tool must draw inside the lines, or a user may attempt to edit<br/>multiple parameters on an attached control surface simultaneously. Any parameter that attempts to match<br/>both its own automation data and the automation data of another parameter, or any parameter that attempts<br/>to set another automatable parameter's state based on its own automation data, will lead to &quot;fighting&quot; during<br/>playback of non-conformant automation.<br/></p>
<p>&#8226; BAD: Automation data is only written to one lane at a time One approach to parameter linking may be to<br/>only write automation data to a single parameter at a time. This could be the parameter that is currently<br/>being touched and edited, or it could be a dedicated &quot;master&quot; parameter within the linked group. While this<br/>approach can be used to solve some types of conflicts, it can still lead to unnecessarily complex or incon-<br/>sistent behavior in certain situations: for example, arbitrary automation data can still be written to multiple<br/>parameters' automation lanes, or a user can choose to record automation for only one parameter in a set but<br/>can skip the &quot;master&quot; parameter. Furthermore, it is difficult if not impossible to properly handle parameters<br/>that can be dynamically linked or un-linked using this approach.<br/></p>
<p>With those potential problems in mind, here is a description of how parameter linking should behave.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.37 Linked parameters 133<br/></b></p>
<p><b>12.37.2.2.1 Correct behavior for linked parameters </b>Notes<br/></p>
<p>&#8226; In this proposal (and throughout the rest of this page) the term &quot;linker&quot; will refer to a parameter that initiates a<br/>change and the term &quot;linked&quot; will refer to a dependent parameter that receives the change.<br/></p>
<p>&#8226; The following discussion will focus on automatable parameters that are reciprocally linked. This case tends<br/>to be the most complex, with the greatest need for consistency of implementation.<br/></p>
<p>During user-generated real-time edits (from the plug-in GUI or a control surface) both the linker and the linked<br/>parameters should be updated. Without this requirement, there would be no parameter linking. In order for this<br/>requirement to be enforced consistently the following behaviors must be maintained:<br/></p>
<p>&#8226; The linked parameter should not jump to a new value if the user attempts to edit both parameters simultane-<br/>ously using a control surface.<br/></p>
<p>&#8226; To ensure proper automation playback, automation should be written to both the linker and the linked param-<br/>eters.<br/></p>
<p>When playing back automation, parameters should operate independently and should not attempt to force depen-<br/>dent parameters to a new state. This prevents fighting in the presence of incompatible automation and ensures<br/>deterministic automation playback with every playback pass. As above, there are some more subtle behaviors that<br/>must be maintained for this to work properly:<br/></p>
<p>&#8226; If the user begins a real-time edit during automation playback then the parameter linking behavior should<br/>resume as described above<br/></p>
<p>&#8226; If the plug-in's algorithm cannot support certain parameter configurations then its automatable parameters<br/>should be decoupled from the algorithm using a set of coefficients that is aware of the algorithm's constraints.<br/>In this way every combination of parameter states can map to a particular coefficient state, maintaining<br/>determinism, and incompatible parameter combinations can simply resolve to the &quot;closest&quot; match in the<br/>possible coefficient space during playback of edited parameter automation data.<br/></p>
<p>&#8226; Another, simpler approach for plug-ins that do not support arbitrary parameter configurations is to ensure that<br/>the problematic parameters are not automatable. Handling non-automatable parameter linking is much easier<br/>in general, so consider this approach if automation is not a requirement for some of your plug-in's parameters.<br/></p>
<p>When handling preset changes and plug-in initialization, a similar approach should be taken as with plug-in au-<br/>tomation playback. In these cases it is very unlikely that the plug-in's parameters will be left in an incompatible state<br/>and attempts at linking may result in unwanted update cycles between inter-dependent parameters or unnecessary<br/>coefficient churn. This latter concern can be a real problem for AAX DSP plug-ins that initialize internal algorithmic<br/>state based on initial coefficient data.<br/></p>
<p><b>12.37.2.2.2 Compatibility caveat </b>This behavior was not possible under the RTAS/TDM format, and many RTAS<br/>and TDM plug-ins reverted to workarounds such as writing automation to only one parameter at a time and linking<br/>the parameters during playback. Therefore, plug-ins that previously supported linked automatable parameters un-<br/>der the RTAS/TDM format may not be able to both implement this recommended parameter linking behavior and<br/>maintain compatibility with automation in saved sessions.<br/></p>
<p>Most of Avid's plug-ins that were available in the RTAS and TDM formats fall into this category and should not<br/>be used as examples of proper parameter linking behavior. Instead, use the SDK's DemoGain_LinkedParameters<br/>example plug-in as an example of proper linked parameter operation.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>134 Module Documentation<br/></b></p>
<p><b>12.37.3 Linked Parameter Operation<br/></b></p>
<p>As described above, the key rule for linked parameters is to link during real-time user edits only, and should operate<br/>the parameters independently (without linked behavior) during automation playback and preset restore. This rule<br/>will simplify many issues: it will prevent conflicts with automation data, avoid potentially strange behaviors when<br/>restoring presets, and more.<br/></p>
<p>Here is how the system works WITH linked parameters, using code snippets from the DemoGain_LinkedParameters<br/>example plug-in:<br/></p>
<p><b>12.37.3.1 User Editing<br/></b></p>
<p>1. User clicks on a parameter in the GUI or grabs a parameter on the controls surface. A TOUCH token should<br/>be sent at this point.<br/></p>
<p>&#8226; The touched parameter status comes back to the plug-in. If the parameters are linked the other linked<br/>parameter should have a TOUCH token sent. This really should only be done for linked continuous<br/>parameters. This is done by overriding the AAX_CEffectParameters::UpdateParameterTouch() method.<br/></p>
<p>2. The user changes the parameter from the GUI or controls surface. A SET token should be sent at this point.<br/>// *******************************************************************************<br/>// METHOD: UpdateParameterTouch<br/>// *******************************************************************************<br/>AAX_Result DemoGain_Parameters::UpdateParameterTouch ( AAX_CParamID inParameterID, AAX_CBoolean<br/>inTouchState )<br/>{<br/></p>
<p>if ( inTouchState )<br/>{<br/></p>
<p>AAX_CParamID linkedControl = this-&gt;GetLinkedControl ( inParameterID );<br/>if ( linkedControl )<br/>{<br/></p>
<p>this-&gt;TouchParameter ( linkedControl );<br/>mLinkTouchMap.insert ( std::pair&lt;std::string,std::string&gt;( inParameterID, linkedControl )<br/></p>
<p>);<br/>}<br/></p>
<p>}<br/>[...]<br/></p>
<p>}<br/></p>
<p>3. The SET token goes into the system and comes back to the plugin via AAX_CEffectParameters::UpdateParameterNormalizedValue().<br/></p>
<p>&#8226; If the parameter is linked then the other linked parameter should have its value set for its linked<br/>behaviour. The system knows this is a linked parameter so when the value comes back to the<br/>plug-in via UpdateParameterNormalizedValue() it will know not to perform linked behaviors on that<br/>value change. To determine if a parameter should set a linked parameter you check it with the<br/>AAX_CEffectParameters::IsParameterTouched() method.<br/></p>
<p>4. The plug-in updates its internal state and sends an UPDATE tokens for both parameters.<br/>// *******************************************************************************<br/>// METHOD: UpdateParameterNormalizedValue<br/>// *******************************************************************************<br/>AAX_Result DemoGain_Parameters::UpdateParameterNormalizedValue ( AAX_CParamID inParameterID, double<br/>inValue, AAX_EUpdateSource inSource )<br/>{<br/></p>
<p>AAX_Result result = AAX_CEffectParameters::UpdateParameterNormalizedValue ( inParameterID,<br/>inValue, inSource );<br/></p>
<p>bool touched = this-&gt;IsParameterTouched ( inParameterID );<br/>[...]<br/></p>
<p>if ( touched &amp;&amp; inSource == AAX_eUpdateSource_Unspecified )<br/>{<br/></p>
<p>if ( type == eType_Pan )<br/>this-&gt;SetParameterNormalizedValue( linkedControl, (1.0 - inValue) );<br/></p>
<p>else if ( type == eType_Gain )<br/>this-&gt;SetParameterNormalizedValue( linkedControl, inValue );<br/></p>
<p>}<br/>[...]<br/></p>
<p>}<br/></p>
<p>5. Repeat steps 2-4 while changing the parameter.<br/></p>
<p>6. The user lets go of the GUI or controls surface. A TOUCH token with the released state should be sent.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.37 Linked parameters 135<br/></b></p>
<p>&#8226; The touched parameter status comes back to the plug-in. If the parameters were linked the other linked<br/>parameter should have a TOUCH token with the release status sent. This again is done by overriding<br/>the AAX_CEffectParameters::UpdateParameterTouch() method.<br/>// *******************************************************************************<br/>// METHOD: UpdateParameterTouch<br/>// *******************************************************************************<br/>AAX_Result DemoGain_Parameters::UpdateParameterTouch ( AAX_CParamID inParameterID, AAX_CBoolean<br/>inTouchState )<br/>{<br/></p>
<p>if ( inTouchState )<br/>{<br/></p>
<p>[...]<br/>}<br/>else<br/>{<br/></p>
<p>[...]<br/>this-&gt;ReleaseParameter ( iter-&gt;second.c_str () );<br/></p>
<p>[...]<br/>}<br/>return AAX_SUCCESS;<br/></p>
<p>}<br/></p>
<p><b>12.37.3.2 Automation Playback<br/></b></p>
<p>1. The SET token comes from the automation system and enters the plugin via UpdateParameterNormalizedValue().<br/></p>
<p>&#8226; The plug-in will know this is not from the user editing therefore it will NOT set the other linked parameter.<br/>Remember ONLY LINK USER EDITING. That way there's no conflicts if the user edited the automation<br/>or if the order in which automation arrives at the plug-in changes.<br/></p>
<p>2. The plug-in updates its internal state and sends an UPDATE token.<br/></p>
<p>3. Repeat steps 1-2 while playing back automation.<br/></p>
<p><b>12.37.3.3 Chunk Restoring<br/></b></p>
<p>1. Plug-in loads the chuck.<br/></p>
<p>2. The plug-in sets every parameters value.<br/></p>
<p>3. The SET tokens comes back to the plugin via UpdateParameterNormalizedValue().<br/></p>
<p>&#8226; The plug-in will know this is not from the user editing therefore it will NOT set the other linked parameter.<br/>Remember ONLY LINK USER EDITING. Hopefully the result of this is that the contents of the chunk will<br/>be restored to its exact state.<br/></p>
<p>4. The plug-in updates its internal state and sends out UPDATE tokens.<br/></p>
<p><b>12.37.4 Changing Tapers<br/></b></p>
<p>One common use of linked parameters is to change the taper associated with a parameter. For changing tapers<br/>there are basically only a two rules you need to follow:<br/></p>
<p>1. When you're loading a new chunk you need to set the taper values first. If a parameter is what updates the<br/>taper then set that value first. That way when the value of a parameter is set from a chunk it wont change<br/>because of a taper change.<br/></p>
<p>2. Update the taper from the UpdateParameterNormalizedValue() method. If the new taper needs to change the<br/>value of the parameter you only do so if the user is editing the linked parameter. This still follows the ONLY<br/>LINK USER EDITING rule.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>136 Module Documentation<br/></b></p>
<p>AAX_Result Simple_Parameters::UpdateParameterNormalizedValue ( AAX_CParamID inParameterID, double inValue,<br/>AAX_EUpdateSource inSource )<br/></p>
<p>{<br/>// GetLinkedControl() is a user defined method which determines the linked control ID.<br/>AAX_CParamID linkedControl = this-&gt;GetLinkedControl ( inParameterID );<br/>if ( linkedControl )<br/>{<br/></p>
<p>// IsParameterLinkReady()* is a built in method of AAX_CEffectParameters which determines if the<br/>// parameter should perform linked behaviors based on the touch state of the parameter and the<br/>// source of the UpdateParameterNormalizedValue() call.<br/>if ( this-&gt;IsParameterLinkReady ( inParameterID, inSource ) )<br/></p>
<p>this-&gt;SetParameterNormalizedValue( linkedControl, inValue );<br/>}<br/>// Call the inherited method for the original parameter<br/>AAX_Result result = AAX_CEffectParameters::UpdateParameterNormalizedValue ( inParameterID, inValue,<br/></p>
<p>inSource );<br/>return result;<br/></p>
<p>}<br/></p>
<p>Collaboration diagram for Linked parameters:<br/></p>
<p><b>12.38 Linked parameter update sequences<br/></b></p>
<p>Sequence diagrams for some common linked parameter update scenarios.<br/></p>
<p><b>12.38.1 On this page<br/></b></p>
<p>&#8226; User-generated update<br/></p>
<p>&#8226; Update from automation playback<br/></p>
<p><b>Note<br/></b>To enable logging for these events at run time set DTF_AUTOMATION=file@DTP_LOW in the DigiTrace<br/>configuration file.<br/></p>
<p><b>12.38.1.1 Notes on threading for these sequences<br/></b></p>
<p>&#8226; Calls from the host into AAX_IEffectParameters may occur on any thread. In general, the only synchronization<br/>that is guaranteed for data model calls in these diagrams is that the call will follow whatever event is indicated<br/>as its trigger.<br/></p>
<p>&#8226; Calls from the host into AAX_IEffectGUI will occur on the main application thread unless indicated otherwise<br/>in the AAX_IEffectGUI documentation.<br/></p>
<p>&#8226; Host-driven updates to the algorithm context are always synchronized with the real-time processing thread<br/></p>
<p><b>See also<br/></b>Basic parameter update sequences<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.38 Linked parameter update sequences 137<br/></b></p>
<p><b>12.38.2 User-generated update<br/></b></p>
<p>This is the sequence of calls for a parameter update triggered by the user. For this sequence, we assume that the<br/>edit was triggered by a GUI event. Updates from control surfaces are handled in exactly the same way, except that<br/>the parameter touch, set value, and release tokens are generated by the control surface.<br/></p>
<p>In this example the updated parameter is reciprocally linked to one other parameter. These are the &quot;linker&quot; and<br/>&quot;linked&quot; parameters, respectively.<br/></p>
<p>This procedure is very similar to the non-linked case described here. In the diagrams below, red arcs and pink<br/>section headings are used to indicate events that are specific to the linked parameter case.<br/></p>
<p>Notes:<br/></p>
<p>1. This sequence shows the linked parameter reciprocally issuing a touch on the linker parameter. The touch<br/>fails since the linker parameter is already touched at this time. If the roles were reversed (if an edit occurred<br/>on the linked parameter) then this touch would succeed.<br/></p>
<p>2. The host flags all set value tokens that are triggered by a plug-in within the scope of AAX_IEffectParameters::UpdateParameterNormalizedValue()<br/>&quot;UpdateParameterNormalizedValue()&quot;. When those set value tokens are processed they result in additional<br/>calls to AAX_IEffectParameters::UpdateParameterNormalizedValue() &quot;UpdateParameterNormalizedValue()&quot;.<br/>The host sets iSource to AAX_eUpdateSource_Parameter for each of these subsequent calls to indicate<br/>that the update originated from within a parameter update event.<br/></p>
<p>3. IsParameterLinkReady() returns true during the linker parameter update because the update source is<br/>unknown and the parameter is touched. Both conditions must be true in order for the linking logic to proceed<br/>with setting linked parameters' values.<br/></p>
<p>4. IsParameterLinkReady() returns false during the linked parameter update because the source is<br/>AAX_eUpdateSource_Parameter. This prevents update cycles for reciprocally linked parameters, as demon-<br/>strated here.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>138 Module Documentation<br/></b></p>
<p><b>12.38.2.1 High-level interface calls and events<br/></b></p>
<p>Host Plug-In<br/></p>
<p>Edit event handling<br/></p>
<p>OS Edit Event<br/></p>
<p>AAX_IAutomationDelegate::PostTouchRequest()<br/>for linker param<br/></p>
<p>AAX_IAutomationDelegate::PostSetValueRequest()<br/>for linker param<br/></p>
<p>AAX_IAutomationDelegate::PostReleaseRequest()<br/>for linker param<br/></p>
<p>Set value handling<br/>for linker param<br/></p>
<p>PostTouchRequest() processed<br/></p>
<p>AAX_IEffectParameters::UpdateParameterTouch()<br/>iParameterID: linker<br/></p>
<p>iTouchState: true<br/>AAX_IAutomationDelegate::PostTouchRequest()<br/></p>
<p>for linked param<br/></p>
<p>PostSetValueRequest() processed<br/></p>
<p>AAX_IEffectParameters::UpdateParameterNormalizedValue()<br/>iParameterID: linker<br/></p>
<p>iSource: AAX_eUpdateSource_Unspecified<br/></p>
<p>Linked parameter edit<br/></p>
<p>AAX_IAutomationDelegate::PostTouchRequest()<br/>for linked param<br/></p>
<p>AAX_IAutomationDelegate::PostSetValueRequest()<br/>for linked param<br/></p>
<p>AAX_IAutomationDelegate::PostReleaseRequest()<br/>for linked param<br/></p>
<p>Continue handling linker parameter update<br/></p>
<p>Update linker parameter state<br/></p>
<p>AAX_IAutomationDelegate::PostCurrentValue()<br/>for linker param<br/></p>
<p>Increment number of changes<br/></p>
<p>PostReleaseRequest() processed<br/></p>
<p>AAX_IEffectParameters::UpdateParameterTouch()<br/>iParameterID: linker<br/>iTouchState: false<br/></p>
<p>AAX_IAutomationDelegate::PostReleaseRequest()<br/>for linked param<br/></p>
<p>Set value handling<br/>for linked param<br/></p>
<p>PostTouchRequest() processed<br/></p>
<p>AAX_IEffectParameters::UpdateParameterTouch()<br/>iParameterID: linked<br/></p>
<p>iTouchState: true<br/>AAX_IAutomationDelegate::PostTouchRequest()<br/></p>
<p>1<br/></p>
<p>for linker param<br/></p>
<p>PostSetValueRequest() processed<br/></p>
<p>AAX_IEffectParameters::UpdateParameterNormalizedValue()<br/>2<br/></p>
<p>iParameterID: linked<br/>iSource: AAX_eUpdateSource_Parameter<br/></p>
<p>No linker parameter edit<br/></p>
<p>Continue handling linked parameter update<br/></p>
<p>Update linked parameter state<br/></p>
<p>AAX_IAutomationDelegate::PostCurrentValue()<br/>for linked param<br/></p>
<p>Increment number of changes<br/></p>
<p>PostReleaseRequest() processed<br/></p>
<p>AAX_IEffectParameters::UpdateParameterTouch()<br/>iParameterID: linked<br/>iTouchState: false<br/></p>
<p>AAX_IAutomationDelegate::PostReleaseRequest()<br/>1<br/></p>
<p>for linker param<br/></p>
<p>Current value handling<br/></p>
<p>Identical to standard (unlinked) sequence<br/></p>
<p><b>Figure 12.12 High-level sequence of interface calls and events for a reciprocally linked parameter update<br/>following a user-generated edit<br/></b></p>
<p><b>12.38.2.2 Detailed interface calls and events<br/></b></p>
<p>Note that this diagram assumes a GUI implementation that uses SetParameterNormalizedValue(). The im-<br/>plementation could also use other parameter set methods, either in AAX_IEffectParameters or directly on an<br/>AAX_IParameter. The overall sequence would remain the same.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.38 Linked parameter update sequences 139<br/></b></p>
<p>HostAAX_IAutomationDelegateAAX_IControllerAAX_CEffectParametersLinked AAX_CParameterLinker AAX_CParameterAAX_CPacketDispatcherPlug-in GUI<br/></p>
<p>Implemented by Host Default AAX Library Implementation<br/>Implem-<br/>ented by<br/>Plug-in<br/></p>
<p>Edit event handling<br/></p>
<p>OS Edit<br/>Event<br/></p>
<p>Convert to normalized<br/></p>
<p>SetParameterNormalizedValue()<br/>iParameterID: linker<br/></p>
<p>SetNormalizedValue()<br/></p>
<p>SetNormalizedValue<br/></p>
<p>PostTouchRequest()<br/>for linker param<br/></p>
<p>PostSetValueRequest()<br/>for linker param<br/></p>
<p>PostReleaseRequest()<br/>for linker param<br/></p>
<p>Set value handling<br/>for linker param<br/></p>
<p>PostTouchRequest() processed<br/></p>
<p>UpdateParameterTouch()<br/>iParameterID: linker<br/></p>
<p>iTouchState: true<br/>Touch()<br/></p>
<p>PostTouchRequest()<br/>for linked param<br/></p>
<p>PostSetValueRequest() processed<br/></p>
<p>UpdateParameterNormalizedValue()<br/>iParameterID: linker<br/></p>
<p>iSource: AAX_eUpdateSource_Unspecified<br/>IsParameterLinkReady()<br/></p>
<p>3<br/></p>
<p>inParameterID: linker<br/>inSource: AAX_eUpdateSource_Unspecified<br/>returns true<br/></p>
<p>Linked parameter edit<br/></p>
<p>SetValueWithFloat()<br/></p>
<p>SetValue()<br/></p>
<p>PostTouchRequest()<br/>for linked param<br/></p>
<p>PostSetValueRequest()<br/>for linked param<br/></p>
<p>PostReleaseRequest()<br/>for linked param<br/></p>
<p>Continue handling linker parameter update<br/></p>
<p>UpdateNormalizedValue()<br/></p>
<p>Update parameter state<br/></p>
<p>PostCurrentValue()<br/>for linker param<br/></p>
<p>SetDirty()<br/></p>
<p>Increment number of changes<br/></p>
<p>PostReleaseRequest() processed<br/></p>
<p>UpdateParameterTouch()<br/>iParameterID: linker<br/>iTouchState: false<br/></p>
<p>Release()<br/></p>
<p>PostReleaseRequest()<br/>for linked param<br/></p>
<p>Set value handling<br/>for linked param<br/></p>
<p>PostTouchRequest() processed<br/></p>
<p>UpdateParameterTouch()<br/>iParameterID: linked<br/></p>
<p>iTouchState: true<br/>Touch()<br/></p>
<p>PostTouchRequest()<br/>1<br/></p>
<p>for linker param<br/></p>
<p>PostSetValueRequest() processed<br/></p>
<p>UpdateParameterNormalizedValue()<br/>2<br/></p>
<p>iParameterID: linked<br/>iSource: AAX_eUpdateSource_Parameter<br/></p>
<p>IsParameterLinkReady()<br/>4<br/></p>
<p>inParameterID: linked<br/>inSource: AAX_eUpdateSource_Parameter<br/>returns false<br/></p>
<p>No linker parameter edit<br/></p>
<p>Continue handling linked parameter update<br/></p>
<p>UpdateNormalizedValue()<br/></p>
<p>Update parameter state<br/></p>
<p>PostCurrentValue()<br/>for linked param<br/></p>
<p>SetDirty()<br/></p>
<p>Increment number of changes<br/></p>
<p>PostReleaseRequest() processed<br/></p>
<p>UpdateParameterTouch()<br/>iParameterID: linked<br/>iTouchState: false<br/></p>
<p>Release()<br/></p>
<p>PostReleaseRequest()<br/>1<br/></p>
<p>for linker param<br/></p>
<p>Current value handling<br/></p>
<p>Identical to standard (unlinked) sequence<br/></p>
<p><b>Figure 12.13 Detailed sequence of method calls and events for a reciprocally linked parameter update<br/>following a user-generated edit on the plug-in GUI<br/></b></p>
<p><b>12.38.3 Update from automation playback<br/></b></p>
<p>Since all parameter linking occurs while recording automation, automation playback is very simple. The automation<br/>lanes may contain any arbitrary values, so, in order to avoid fighting between incompatible values, the plug-in should<br/>respect all automation values during playback.<br/></p>
<p>Notes:<br/></p>
<p>1. IsParameterLinkReady() returns false during automation playback because the updated parameter is not<br/>touched. This ensures that automation playback will proceed with the written values and also guarantees that<br/>the user will always be able to override the automation using a control surface encoder or GUI editor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>140 Module Documentation<br/></b></p>
<p>Host AAX_CEffectParameters AAX_CPacketDispatcher<br/></p>
<p>Implemented by Host Default AAX Library Implementation<br/></p>
<p>Parameter value automation handling<br/></p>
<p>UpdateParameterNormalizedValue()<br/>iParameterID: linker<br/></p>
<p>iSource: AAX_eUpdateSource_Unspecified<br/>IsParameterLinkReady()<br/></p>
<p>1<br/></p>
<p>inParameterID: linker<br/>inSource: AAX_eUpdateSource_Unspecified<br/></p>
<p>returns false<br/></p>
<p>No linked parameter edit<br/></p>
<p>Continue handling linker parameter update<br/></p>
<p>Proceeds as above<br/></p>
<p>UpdateParameterNormalizedValue()<br/>iParameterID: linked<br/></p>
<p>iSource: AAX_eUpdateSource_Unspecified<br/>IsParameterLinkReady()<br/></p>
<p>1<br/></p>
<p>inParameterID: linked<br/>inSource: AAX_eUpdateSource_Unspecified<br/></p>
<p>returns false<br/></p>
<p>No linker parameter edit<br/></p>
<p>Continue handling linked parameter update<br/></p>
<p>Proceeds as above<br/></p>
<p>Current value handling<br/></p>
<p>Identical to standard (unlinked) sequence<br/></p>
<p><b>Figure 12.14 Sequence of method calls and events during automation playback with linked parameters<br/></b></p>
<p>Collaboration diagram for Linked parameter update sequences:<br/></p>
<p><b>12.39 Plug-in type conversion<br/></b></p>
<p>Specification for valid conversions between plug-in types.<br/></p>
<p><b>12.39.1 About this specification<br/></b></p>
<p>The specification on this page defines the valid AAX plug-in type conversions. An AAX host may use this specifica-<br/>tion to perform automatic type conversions. For example:<br/></p>
<p>&#8226; When a session that was saved with a DSP plug-in Type is opened on a Native system the saved DSP Type<br/>should be converted to its Native counterpart.<br/></p>
<p>&#8226; When a session saved with the free version of a plug-in is opened on a system that has the full version<br/>installed then the saved free Type may be converted to the full version.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.39 Plug-in type conversion 141<br/></b></p>
<p><b>12.39.2 Terminology<br/></b></p>
<p>In this specification the term &quot;Type&quot; refers to a specific configuration of an AAX plug-in.<br/></p>
<p>Each Type is uniquely identified by a combination of five values:<br/></p>
<p>&#8226; Manufacturer ID<br/>&#8226; Product ID<br/>&#8226; Plug-In ID<br/>&#8226; Sample rate bit mask<br/>&#8226; Architecture<br/></p>
<p>Each Type is defined by a particular call to AAX_IComponentDescriptor::AddProcessProc_Native or<br/>AAX_IComponentDescriptor::AddProcessProc_TI in the plug-in's description method.<br/></p>
<p>The Plug-In ID is defined as one of AAX_eProperty_PlugInID_Native or AAX_eProperty_PlugInID_TI.<br/></p>
<p>In this specification, the format for describing an ID is:<br/></p>
<p>[ ID triad + sample rate + architecture ]<br/></p>
<p>Where the ID triad may be expanded to [ [Manufacturer ID] [Product ID] [Plug-In ID] ]<br/></p>
<p>&#8226; Explicit values are given in plain face<br/>&#8226; Arbitrary constant values are given in bold face<br/>&#8226; Wildcard values are given in italics<br/></p>
<p>For example:<br/></p>
<p>&#8226; [ ID triad + any sample rate + Native ]<br/><b>&#8211; </b>Defines all Type identifiers with the same ID triad and the Native architecture, regardless of sample rate.<br/></p>
<p>&#8226; [ [ [Manufacturer ID] [Product ID] [any ID] ] + sample rate + Native ]<br/><b>&#8211; </b>Defines all Type identifiers with the same Manufacturer and Product IDs, the same sample rate, and the<br/></p>
<p>Native architecture, but with any plug-in ID.<br/></p>
<p><b>12.39.3 Scope of this specification<br/></b></p>
<p>For the purposes of this specification we are not concerned with AudioSuite Types. Currently these Types are never<br/>type-converted.<br/></p>
<p>In theory, an AAX host may apply a &quot;partial&quot; type conversion by swapping between different ProcessProcs without<br/>destroying and re-building any of the plug-in's objects (data model, GUI). For the purposes of this specification we<br/>are not concerned about whether a given conversion is &quot;partial&quot; or &quot;total&quot;; all conversions are treated the same.<br/></p>
<p>Plug-in conversions are also required between Types of different stem formats. In fact, the supported stem format<br/>is an integral part of a Type's unique identifier. This specification ignores the question of stem formats entirely; we<br/>assume that each Type supports all necessary stem formats for legal conversion with other Types.<br/></p>
<p>In general, type swapping rules for deprecated types and related types are equivalent. See Type deprecation for<br/>more information about the differences between related and deprecated types.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>142 Module Documentation<br/></b></p>
<p><b>12.39.4 Topological constraints<br/></b></p>
<p>&#8226; All Types included in a single AAX_ICollection must have the same Manufacturer ID<br/></p>
<p>&#8226; All Types included in a single AAX_IEffectDescriptor must have the same Manufacturer ID and Product ID<br/></p>
<p>&#8226; The Sample rate bit masks for two Types that share all other identifiers must be non-overlapping. I.e. 0x0<br/>== sr_mask1 &amp; sr_mask2<br/></p>
<p>&#8226; Two Types may not be registered that differ only in their Architecture<br/></p>
<p>&#8226; Type relationships may only be defined between mutually exclusive Types. Types are mutually exclusive if:<br/></p>
<p><b>&#8211; </b>Their sample rate support is non-overlapping<br/><b>&#8211; </b>The &quot;before&quot; Type's ID triad is not associated with any Type in the plug-in<br/></p>
<p><b>12.39.5 Implicit conversions<br/></b></p>
<p>The AAX host should automatically convert between Types within the following IDs:<br/></p>
<p>&#8226; [ ID triad + any sample rate + Architecture ]<br/></p>
<p>&#8226; [ [ [Manufacturer ID] [Product ID] [any ID] ] + sample rate + any architecture ]<br/></p>
<p>These conversions occur only if both Types are included in the plug-in when the conversion is made. Consider the<br/>following scenario:<br/></p>
<p>1. A session is saved including an plug-in instance with the following Type identifier: [ My ID triad + 48 kHz + TI ]<br/></p>
<p>2. The plug-in is updated to a version that does not include this Type identifier, but that does include [ My ID<br/>triad + 48 kHz + Native ]<br/></p>
<p>3. The session is opened on a Native system<br/></p>
<p>In this scenario, if the plug-in had not been updated then an automatic conversion would occur. However, since the<br/>plug-in no longer includes the saved Type identifier, no automatic conversion occurs.<br/></p>
<p>A plug-in can work around this situation by including the &quot;old&quot; Type identifier as a Related (or Deprecated) Type (see<br/>Explicit conversions.)<br/></p>
<p>When a plug-in instance is saved after making an implicit conversion, plug-ins may be saved with the session using<br/>their new Type identifier. This is not required. For example, Pro Tools will prefer to save plug-in instances that were<br/>converted from DSP types as DSP, even if they were converted to corresponding Native types when the session<br/>was loaded onto and saved from a native Pro Tools system.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.39 Plug-in type conversion 143<br/></b></p>
<p><b>12.39.6 Explicit conversions<br/></b></p>
<p>AAX includes properties that allow a plug-in to define explicit relationships between different Types. These proper-<br/>ties only operate on ID triads. Each property can be associated with an array of ID triads to define a one-to-one or<br/>a many-to-one association between the given ID triads and the specific Type to which the property is attached.<br/></p>
<p>&#8226; AAX_eProperty_Related_DSP_Plugin_List / AAX_eProperty_Deprecated_DSP_Plugin_List<br/></p>
<p><b>&#8211; </b>All of the given ID triads specify TI Types<br/></p>
<p>&#8226; AAX_eProperty_Related_Native_Plugin_List / AAX_eProperty_Deprecated_Native_Plugin_List<br/></p>
<p><b>&#8211; </b>All of the given ID triads specify Native Types<br/></p>
<p>The AAX host should convert between related Types within the following constraints:<br/></p>
<p>&#8226; [ [ [Manufacturer ID] [Related Product ID] [Related TI Plug-In ID] ] + sample rate + TI ]<br/></p>
<p><b>&#8211; </b>-&gt; [ [ [Manufacturer ID] [New Product ID | Related Product ID] [New Plug-In ID] ] + sample rate + any<br/>architecture ]<br/></p>
<p>&#8226; [ [ [Manufacturer ID] [Related Product ID] [Related Native Plug-In ID] ] + sample rate + Native ]<br/></p>
<p><b>&#8211; </b>-&gt; [ [ [Manufacturer ID] [New Product ID | Related Product ID] [New Plug-In ID] ] + sample rate + any<br/>architecture ]<br/></p>
<p>These conversions will occur regardless of whether the related ID triad is used for any of the Types in the plug-in.<br/></p>
<p>When a plug-in instance is saved after making an explicit conversion, all plug-ins are saved with the session using<br/>their new Type identifier.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools versions prior to Pro Tools 12.3 do not allow explicit type conversion between<br/>types with different product ID values. Beginning in Pro Tools 12.3 both the product ID<br/>and the plug-in ID may differ between explicitly related types.<br/></p>
<p><b>12.39.7 Type deprecation<br/></b></p>
<p>There are two varieties of explicit plug-in type association: related types and deprecated types.<br/></p>
<p>Properties that create a related type association:<br/></p>
<p>&#8226; AAX_eProperty_Related_Native_Plugin_List<br/></p>
<p>&#8226; AAX_eProperty_Related_DSP_Plugin_List<br/></p>
<p>Properties that create a deprecated type association:<br/></p>
<p>&#8226; AAX_eProperty_Deprecated_Native_Plugin_List<br/></p>
<p>&#8226; AAX_eProperty_Deprecated_DSP_Plugin_List<br/></p>
<p>&#8226; AAX_eProperty_PlugInID_Deprecated<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>144 Module Documentation<br/></b></p>
<p>With a few exceptions, these two types of explicit association are treated identically. These are the ways in which<br/>deprecated plug-in type association differs from related plug-in type association:<br/></p>
<p>&#8226; If plug-in types A and B are both installed, and if type A deprecates type B, then type B will be excluded from<br/>all insert lists in Pro Tools and will be made invisible to the user.<br/></p>
<p>&#8226; If plug-in types A and B are both installed, and if type A deprecates type B, then instances of type B will be<br/>swapped to type A when a session containing saved instances of type B is opened.<br/></p>
<p>&#8226; Upon the next session save following a swap due to a deprecated type association, the plug-in instance will<br/>be saved into the session using the ID of the new plug-in type. Therefore deprecated type swaps do not<br/>round-trip when moving between multiple systems if some of the systems have the deprecated types, but not<br/>the deprecating types, installed.<br/></p>
<p>Type deprecation should only be used when a new version of an effect completely replaces an old version of the<br/>effect. For all other situations, type relationship should be used.<br/></p>
<p><b>Host Compatibility Notes<br/></b></p>
<p>&#8226; Pro Tools versions before Pro Tools 12.3 treat deprecated and related type associations identically and do<br/>not support type deprecation features<br/></p>
<p>&#8226; Media Composer does not support type deprecation features<br/>&#8226; VENUE does not support type deprecation features<br/></p>
<p>Collaboration diagram for Plug-in type conversion:<br/></p>
<p><b>12.40 The Avid Component Framework (ACF)<br/></b></p>
<p><b>12.40.1<br/></b></p>
<p>How the AAX C++ interfaces work.<br/></p>
<p>The objects and interfaces in AAX are based on the Avid Component Framework (ACF). The ACF is Avid&#8217;s im-<br/>plementation of COM, and is the framework that AAX, as well as AVX (Avid Video Externsions) plug-ins are built<br/>on.<br/></p>
<p>ACF can be considered an implementation detail of the AAX SDK; the SDK is written to protect plug-in developers<br/>from the intricacies of ACF, and it is not necessary to understand ACF or COM in order to use the SDK.<br/></p>
<p><b>12.40.2 More details<br/></b></p>
<p>As in COM, ACF draws a distinction between the concept of an object and the concept of an interface. An object is<br/>treated as a &quot;black box&quot; of code, whereas an interface is a class of pure virtual methods that allows one to access<br/>the functionality inside the object. An object in ACF is represented by the IACFUnknown interface, which is binary<br/>compatible with the COM class IUnknown. (Likewise, IACFUnknown follows the same reference counting rules as<br/>IUnknown objects.) This interface allows a client to get pointers to other interfaces on a given object using the<br/>QueryInterface() method.<br/></p>
<p>Reference counting is an important aspect of both COM and ACF. Simply put, reference counting is the practice of<br/>tracking all references to an object, so that a program can determine when the object can safely be deleted. The<br/>AAX SDK library handles this reference counting behind the scenes, so plug-ins that call into the SDK library to<br/>manage their component interfaces will not leak references.<br/></p>
<p>Many additional resources can be found both online and print that cover COM and reference counting in greater<br/>detail.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.40 The Avid Component Framework (ACF) 145<br/></b></p>
<p><b>12.40.3 ACF interfaces in AAX<br/></b></p>
<p>The binary interface between an AAX plug-in and host is defined by a series of ACF interfaces. Each of these<br/>interfaces inherits from IACFUnknown. The implementation of each ACF interface typically uses CACFUnknown, a<br/>utility class that provides basic reference counting and additional fundamental ACF details to satisfy IACFUnknown.<br/></p>
<p>These ACF interfaces may be implemented by either the AAX plug-in or the host. The host retains a reference to<br/>each interface that is implemented by the plug-in in order to call methods on the plug-in's implementation. Corre-<br/>spondingly, the plug-in retains references to various interfaces that are implemented by the host, and may call host<br/>methods via these interfaces.<br/></p>
<p>AAX Effect<br/></p>
<p>AAX ACF Interfaces<br/></p>
<p>ACF<br/></p>
<p>IACFUnknownCACFUnknown<br/></p>
<p>AAX_IACFEffectParameters AAX_IACFController<br/></p>
<p>AAX_IEffectParameters<br/></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_IController<br/></p>
<p>My Data Model<br/></p>
<p>AAX_VController<br/></p>
<p><b>Figure 12.15 ACF interfaces: AAX_IACFEffectParameters and AAX_IACFController<br/></b></p>
<p>The figure above demonstrates this design: the plug-in implements AAX_IACFEffectParameters directly, and retains<br/>a reference to an AAX_IACFController that is implemented by the host.<br/></p>
<p>In order to implement AAX_IACFEffectParameters, AAX_IEffectParameters inherits from CACFUnknown and im-<br/>plements QueryInterface() to ensure that the IACFUnknown interface is implemented. The rest of the implemen-<br/>tation of AAX_IACFEffectParameters is contained in AAX_CEffectParameters and the plug-in's custom data model<br/>class.<br/></p>
<p>The reference to AAX_IACFController is managed by a versioned implementation class. For more information about<br/>this design, see below.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>146 Module Documentation<br/></b></p>
<p><b>12.40.4 Using ACF interfaces<br/></b></p>
<p>Depending on where an interface is implemented, there are two specific ways to acquire a reference to the under-<br/>lying AAX object from an IACFUnknown pointer:<br/></p>
<p>&#8226; Host-provided interfaces<br/></p>
<p>&#8226; Plug-in interfaces<br/></p>
<p><b>12.40.4.1 Host-provided interfaces<br/></b></p>
<p>Interfaces that are managed by the host must be carefully version-controlled in order to maintain compatibility with<br/>many different host versions. The AAX SDK includes &quot;AAX_V&quot; classes to handle this versioning. AAX_V classes<br/>are concrete classes that query the host for the correct version of the requested interface. These classes can also<br/>handle re-routing deprecated calls and other complicated versioning logic.<br/></p>
<p>To create an AAX_V object, pass an IACFUnknown pointer to the underlying host-managed interface in to the AAX&#8592;&#8617;<br/>_V class' constructor. ACF reference counting is handled automatically by the object's construction and destruction<br/>routines, so no additional calls are necessary to acquire and release the reference.<br/>#include &quot;AAX_VController.h&quot;<br/>void SomeFunction (IACFUnknown * inController)<br/>{<br/></p>
<p>// When object is created, a reference is acquired<br/>AAX_VController theController (inController);<br/></p>
<p>//<br/>// ...<br/>//<br/></p>
<p>// When object goes out of scope, the reference is released<br/>}<br/></p>
<p><b>12.40.4.2 Plug-in interfaces<br/></b></p>
<p>Interfaces to objects that are owned by the plug-in always have a known version and therefore do not require AAX_V<br/>object management. Instead, these interfaces must be acquired and released directly using ACF.<br/>#include &quot;AAX_UIDs.h&quot;<br/>#include &quot;AAX_Assert.h&quot;<br/>#include &quot;AAX_IEffectParameters.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/>void SomeFunction (IACFUnknown * inController)<br/>{<br/></p>
<p>// When interface is queried, a reference is acquired<br/>if ( inController )<br/>{<br/></p>
<p>AAX_IEffectParameters* myEffectParameters = NULL;<br/>ACFRESULT acfErr = ACF_OK;<br/>acfErr = inController-&gt;QueryInterface(<br/></p>
<p>IID_IAAXEffectParametersV1,<br/>(void **)&amp;myEffectParameters);<br/></p>
<p>AAX_ASSERT(ACFSUCCEEDED(acfErr));<br/>}<br/></p>
<p>//<br/>// ...<br/>//<br/></p>
<p>// The reference must be explicitly released when finished<br/>if (myEffectParameters)<br/>{<br/></p>
<p>myEffectParameters-&gt;Release();<br/>myEffectParameters = NULL;<br/></p>
<p>}<br/>}<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.40 The Avid Component Framework (ACF) 147<br/></b></p>
<p><b>12.40.5 Interface versioning in AAX<br/></b></p>
<p>The ACF-based interface used by AAX is designed to allow additional features to be added to the architecture. This<br/>can be achieved via the addition of new kinds of interfaces (e.g. AAX_IEffectDirectData) or by extending the existing<br/>interfaces. In this section, we will describe an approach for interface extension.<br/></p>
<p>First, here is a more complete picture of &quot;version 1&quot; of the AAX_IACFEffectParameters and AAX_IACFController<br/>interfaces, including a possible host implementation of AAX_IACFController :<br/></p>
<p>AAX Effect<br/></p>
<p>AAX Host<br/></p>
<p>AAX ACF Interfaces<br/></p>
<p>ACF<br/></p>
<p>IACFUnknown CACFUnknown<br/></p>
<p>AAX_IACFEffectParameters AAX_IACFController<br/></p>
<p>AAX_IEffectParameters<br/></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_IController<br/></p>
<p>My Data Model<br/></p>
<p>AAX_VController<br/></p>
<p>AAXH_IEffectParameters<br/></p>
<p>AAXH_VEffectParameters Host Plug-In<br/></p>
<p><b>Figure 12.16 ACF interfaces: AAX_IACFEffectParameters and AAX_IACFController (with possible host<br/>design)<br/></b></p>
<p>To extend these interfaces, new &quot;version 2&quot; interfaces are created that inherit from the original interface classes.<br/>Although any version 1 method could be called on the new version 2 class, references to each interface are retained<br/>by the client in order to clarify the specific version in which each method was introduced.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>148 Module Documentation<br/></b></p>
<p>AAX Effect<br/></p>
<p>AAX ACF Interfaces<br/></p>
<p>ACF<br/></p>
<p>IACFUnknown CACFUnknown<br/></p>
<p>AAX_IACFEffectParameters<br/></p>
<p>AAX_IACFEffectParametersV2<br/></p>
<p>AAX_IEffectParameters<br/></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_IController<br/></p>
<p>My Data Model<br/></p>
<p>AAX_IACFController<br/></p>
<p>AAX_IACFControllerV2<br/></p>
<p>AAX_VController<br/></p>
<p><b>Figure 12.17 Adding a new version to AAX_IACFEffectParameters and AAX_IACFController<br/></b></p>
<p>In this example, if the plug-in is loaded by an older host, the reference to AAX_IACFControllerV2 will return<br/>as NULL, and calls to the V2 methods in AAX_IController will return an &quot;unimplemented&quot; error code. Similarly, if a<br/>plug-in that only implements AAX_IACFEffectParameters is loaded into a host that supports AAX_IACFEffect&#8592;&#8617;<br/>ParametersV2, that host will receive a NULL reference to the newer interface version and will only be able to<br/>call methods on the plug-in's implementation of the original interface.<br/></p>
<p>As a final example, here is a possible design involving new versions of both AAX_IACFEffectParameters and<br/>AAX_IACFController, with an example design for the host's implementation as well as the plug-in's:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.41 ACF Elements 149<br/></b></p>
<p>AAX Effect<br/></p>
<p>AAX Host<br/></p>
<p>AAX ACF Interfaces<br/></p>
<p>ACF<br/></p>
<p>IACFUnknown CACFUnknown<br/></p>
<p>AAX_IACFEffectParameters<br/></p>
<p>AAX_IACFEffectParametersV2<br/></p>
<p>AAX_IEffectParameters<br/></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_IController<br/></p>
<p>My Data Model<br/></p>
<p>AAX_IACFController<br/></p>
<p>AAX_IACFControllerV2<br/></p>
<p>AAX_VController<br/></p>
<p>AAXH_IEffectParameters<br/></p>
<p>AAXH_VEffectParameters Host Plug-In<br/></p>
<p><b>Figure 12.18 Complete design example with versioned ACF interfaces<br/></b></p>
<p><b>Documents<br/></b>&#8226; ACF Elements<br/></p>
<p>ACF classes that are used by common AAX interfaces.<br/></p>
<p>Collaboration diagram for The Avid Component Framework (ACF):<br/></p>
<p><b>12.41 ACF Elements<br/></b></p>
<p><b>12.41.1<br/></b></p>
<p>ACF classes that are used by common AAX interfaces.<br/></p>
<p><b>Classes<br/></b>&#8226; interface IACFUnknown<br/></p>
<p>COM compatible IUnknown C++ interface.<br/></p>
<p>Collaboration diagram for ACF Elements:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>150 Module Documentation<br/></b></p>
<p><b>12.42 AAX Host Guides<br/></b></p>
<p><b>12.42.1<br/></b></p>
<p>Documentation for specific AAX host environments.<br/></p>
<p><b>Documents<br/></b>&#8226; Pro Tools Guide<br/></p>
<p>Details about using AAX plug-ins in Pro Tools.<br/>&#8226; Media Composer Guide<br/></p>
<p>Details about using AAX plug-ins in Media Composer.<br/>&#8226; HDX DSP Guide<br/></p>
<p>How to write AAX plug-ins for Avid's TI DSP-based platforms.<br/>&#8226; Page Table Guide<br/></p>
<p>How to map a plug-in's parameters to control surfaces.<br/>&#8226; DigiTrace Guide<br/></p>
<p>How to add tracing to your plug-ins and view logging from the plug-in host.<br/>&#8226; DSH Guide<br/></p>
<p>How to test basic functionality of AAX plug-ins using DSH test tool.<br/>&#8226; DTT Guide<br/></p>
<p>How to automate different test scenarios for DSH.<br/>&#8226; VENUE Guide<br/></p>
<p>Details about using AAX plug-ins in VENUE live sound systems.<br/></p>
<p>Collaboration diagram for AAX Host Guides:<br/></p>
<p><b>12.43 Pro Tools Guide<br/></b></p>
<p>Details about using AAX plug-ins in Pro Tools.<br/></p>
<p><b>12.43.1 Contents<br/></b></p>
<p>&#8226; About this document<br/>&#8226; Processing modes<br/>&#8226; Requirements for AAX plug-in compatibility with Pro Tools<br/>&#8226; Audio Engine Behavior and Features<br/>&#8226; Basic plug-in operation<br/>&#8226; Optional plug-in features<br/>&#8226; Using the Pro Tools Scripting SDK with AAX<br/>&#8226; Plug-ins with MIDI support<br/>&#8226; Debugging AAX plug-ins<br/>&#8226; Troubleshooting common AAX plug-in failures<br/>&#8226; Using DigiOptions<br/>&#8226; Compatibility Notes<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.43 Pro Tools Guide 151<br/></b></p>
<p><b>12.43.2 About this document<br/></b></p>
<p>This guide discusses specific details related to using AAX plug-ins with Pro Tools, such as loading and initialization<br/>procedures, GUI hosting, and other application-specific features. This guide is not intended to provide complete<br/>documentation for the Pro Tools application. For more information about the features, functionality, and use of Pro<br/>Tools see the Pro Tools Reference Guide, available for download from the Avid web site.<br/></p>
<p>This guide is a work in progress, and is extended as needed to describe different aspects of and caveats to the Pro<br/>Tools implementation of the AAX host spec.<br/></p>
<p><b>12.43.3 Processing modes<br/></b></p>
<p>Pro Tools supports three AAX processing modes: AudioSuite, AAX Native, and AAX DSP.<br/></p>
<p>&#8226; AudioSuite plug-ins perform non-real-time, random-access, file-based processing entirely on the host CPU.<br/></p>
<p>&#8226; AAX Native plug-ins perform real-time, linear, non-destructive processing entirely on the host CPU. Native<br/>plug-ins are also used by Pro Tools to perform offline rendering.<br/></p>
<p>&#8226; DSP plug-ins perform real-time, linear, non-destructive processing on DSP-accelerated hardware, with non-<br/>real-time tasks performed on the host CPU.<br/></p>
<p>Each of these processing modes offers specific advantages and trade-offs in functionality, power, and development<br/>effort, and plug-in developers may choose to develop only for specific processing modes if the features provided by<br/>those modes are required by the plug-in.<br/></p>
<p><b>12.43.3.1 Real-time processing<br/></b></p>
<p>Real-time processing allows users to operate plug-ins in live signal paths or in complicated audio routing schemes<br/>when the future input data is not known.<br/></p>
<p>Plug-ins operating in real-time are clients of the Pro Tools automation system, meaning that control movements can<br/>be dynamically recorded and played back with the audio track, written by hand onto the Pro Tools timeline for future<br/>playback, and/or edited by and broadcast to attached control surfaces.<br/></p>
<p>To instantiate a plug-in for real-time processing in Pro Tools, click on an insert slot in the desired track and select<br/>the plug-in from the menu that appears<br/></p>
<p><b>12.43.3.1.1 Native real-time processing </b>When an AAX plug-in is run natively, all of its components and pro-<br/>cessing elements are loaded into the host environment. The host CPU handles the plug-in's real-time audio pro-<br/>cessing as well as its data model, GUI, and other tasks.<br/></p>
<p><b>12.43.3.1.2 Virtual Instruments and MIDI effects </b>Virtual Instruments and MIDI effects are special categories<br/>of real-time processing effects. Instead of processing audio data, these types of effects convert incoming MIDI data<br/>into output audio or MIDI data. Although a user interacts with these kinds of effects differently than with pure audio<br/>processing effects, the AAX API does not generally distinguish between them. See Plug-ins with MIDI support for<br/>more information.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>152 Module Documentation<br/></b></p>
<p><b>12.43.3.1.3 DSP real-time processing </b>When an AAX plug-in is run with Avid's DSP-enabled hardware, the<br/>plug-in's real-time processing code is loaded onto the external DSP device, while the remaining plug-in modules<br/>continue to be run by the host CPU. Each DSP in this system provides dedicated processing capacity that is not<br/>shared with an OS or other processes, and therefore this architecture allows users to achieve highly reliable and<br/>deterministic low-latency processing even when many DSP plug-ins are instantiated.<br/></p>
<p>Figure 1: Real-time insert slots in the Pro Tools Edit and Mix windows.<br/></p>
<p><b>12.43.3.1.4 CPU reporting </b>To guarantee absolute reliability, AAX DSP plug-ins are required to report their worst-<br/>case performance metrics to Pro Tools. Pro Tools uses this information to ensure that each DSP in the system will<br/>be loaded with only the number of plug-ins that it can support given a worst-case processing load.<br/></p>
<p><b>12.43.3.2 Non-real-time processing (AudioSuite)<br/></b></p>
<p>The non-real-time AudioSuite processing mode is file-based, meaning that the results of AudioSuite processing are<br/>applied destructively to audio files (generally to new, empty files provided by Pro Tools.) AudioSuite processing can<br/>only be performed on preexisting blocks of audio.<br/></p>
<p>There are two primary ways to apply AudioSuite processing in Pro Tools. The first way is to selectively apply the<br/>processing algorithm to the audio tracks and clips that are selected on the Pro Tools timeline. This is known as<br/>&quot;destructive&quot; processing, because the original audio track is replaced by the new processed audio track. There are<br/>no limitations governing the amount of time required to process a track in this manner.<br/></p>
<p>Audio Suite plug-ins also have a second optional mode in which they can run. This is referred to as Preview mode.<br/>The Preview feature allows you to monitor the audio processing applied to a track in semi-real-time. Because this is<br/>a real-time process, it is not applicable to all types of file based processing. You may elect not to support this mode<br/>in your plug-in if its algorithm does not lend itself to real-time, linear processing. Preview mode is implemented in a<br/>non- destructive manner, as Preview mode exists for auditioning only with no actual replacement of audio data on<br/>the Pro Tools timeline.<br/></p>
<p>To instantiate an AudioSuite plug-in in Pro Tools, select the plug-in from the &quot;AudioSuite&quot; menu in the Pro Tools<br/>application menu bar<br/></p>
<p><b>12.43.3.3 Multichannel and Multi-Mono<br/></b></p>
<p>Pro Tools supports various surround stem formats throughout the entire signal chain, including multi-channel pro-<br/>cessing through AAX plug-ins.<br/></p>
<p>Pro Tools also allows a plug-in to function in multi-mono mode if the plug-in does not explicitly support certain<br/>channel formats. In multi-mono mode, Pro Tools instantiates a separate instance of a plug-in for every channel in<br/>the track. In this mode, plug-in controls across all channel-instances in a multi-mono collection are linked by default,<br/>though channels can be unlinked by toggling the blue link button in the plug-in header and selecting the channel<br/>whose controls you wish to modify.<br/></p>
<p>For more information about multi-mono mode, please refer to the Pro Tools Reference Guide.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.43 Pro Tools Guide 153<br/></b></p>
<p><b>12.43.4 Requirements for AAX plug-in compatibility with Pro Tools<br/></b></p>
<p>In addition to implementing the client-side AAX API, all Pro Tools plug-ins must:<br/></p>
<p>1. Be installed to the AAX plug-ins directory<br/></p>
<p>2. Use a valid file name<br/></p>
<p>3. Be signed with a valid digital signature<br/></p>
<p>Note that digital signatures for plug-ins are not required in Pro Tools Developer builds. However, you will need<br/>a Pro Tools Developer Build licence in order to run Pro Tools Developer. To obtain your licence, contact<br/>devauth@avid.com.<br/></p>
<p><b>12.43.4.1 Install directories<br/></b></p>
<p>AAX plug-ins must be installed in the system's AAX Plug-Ins directory. See Building your plug-in installer for more<br/>information about creating a plug-in installer.<br/></p>
<p>Plug-ins that are uninstalled but still present on the system are placed into the &quot;Plug-Ins (Unused)&quot; directory, which<br/>is located next to the Plug-Ins directory.<br/></p>
<p>Pro Tools will also search for a Plug-Ins directory next to the actual Pro Tools application, and this directory will be<br/>used if present. This debug feature can be useful for testing specific plug-ins.<br/></p>
<p><b>12.43.4.2 Plug-in name and file structure<br/></b></p>
<p>In order to be recognized by AAE, all AAX plug-in bundles must use the &quot;.aaxplugin&quot; file name suffix. On macOS,<br/>the plug-in bundle must use this suffix while the binary itself does not require a suffix. On Windows, the plug-in<br/>binary (DLL) must use this suffix.<br/></p>
<p>The directory structure of an AAX plug-in bundle is also important. See .aaxplugin Directory Structure in the<br/>AAX Format Specification document for more information.<br/></p>
<p><b>12.43.4.3 Digital signature<br/></b></p>
<p>As an added security measure against digital piracy, all AAX plug-in binaries must be digitally signed in order to run<br/>in Pro Tools. This signature step does not interfere with your existing copy protection and licensing solutions - it is<br/>simply a build step that you incorporate into your plug-in before releasing the binary.<br/></p>
<p>Digital signatures are generated based on the plug-in binary and act as a guarantee against binary modification.<br/>Therefore, any build steps that modify the binary, such as symbol stripping, must be performed prior to signature<br/>generation. Digital signatures apply to the full .aaxplugin bundle, so any operation that modifies the contents of the<br/>bundle will invalidate its digital signature even if the operation does not affect the plug-in binary itself. Therefore, the<br/>generation and application of a digital signature should be the last step in any release plug-in build process. The dig-<br/>ital signature requirement applies to Beta and Release software. This requirement does not apply to Development<br/>builds of Pro Tools or to other developer tools which can load unsigned binaries.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>154 Module Documentation<br/></b></p>
<p><b>Note<br/></b>You will need a Pro Tools Developer Build licence in order to run the Pro Tools developer builds. To obtain<br/>your licence, see the Obtain a Pro Tools Developer iLok license (and an iLok) section in the Getting Started<br/>with AAX guide.<br/></p>
<p>If you are having problems with digitally signing your plug-ins see the Plug-In Fails to Load in Shipping Pro Tools<br/>section in the Troubleshooting guide.<br/>Requesting the digital signing toolkit<br/>The AAX digital signatures required by Pro Tools are generated using digital signing tools licensed from PACE<br/>Anti-Piracy, Inc., which acts as the certificate authority for all AAX digital signatures. To request access to these<br/>tools, send an e-mail to audiosdk@avid.com with &quot;Pace Tools Request&quot; in the subject. Include the following<br/>information in your request:<br/></p>
<p>&#8226; Company name<br/>&#8226; Admin full name<br/>&#8226; Email<br/>&#8226; Telephone number<br/>&#8226; iLok username<br/></p>
<p>Once your request has been approved you will be contacted by PACE with further instructions for acquiring and<br/>using the digital signature toolkit.<br/>What you will need<br/>The digital signing toolkit which you will receive as an AAX developer will require a physical iLok USB key. You<br/>will also need a registered iLok user account which will be used when applying the digital signature. If your build<br/>toolchain requires hardware-free signing then you can contact PACE regarding their current offerings.<br/>In order to successfully use the signing tools you should be familiar with the latest Gatekeeper and codesign (for<br/>Mac) and Authenticode (for Windows) digital signature schemes.<br/>Although it is possible to use self-signed certificates for AAX digital signatures, before making your AAX plug-ins<br/>commercially available it is recommended that you acquire an Apple-issued Application Developer ID for Gatekeeper<br/>and an &quot;Extended Verification&quot; (EV) Authenticode certificate from a Microsoft approved certificate authority.<br/>See the Getting Started Guide in the PACE digital signing toolkit for more information about using these tools.<br/>Signature requirements in Pro Tools<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools requires PACE Eden digital signatures for AAX plug-ins.<br/></p>
<p>Pro Tools and higher use the Eden toolset. This toolset integrates fully with platform-specific signatures, so you only<br/>need to do one post-build step using the Eden digital signing tools to sign your plug-in with both the Eden signature<br/>and the relevant Apple GateKeeper or Microsoft Authenticode signature. For more information, see the Eden digital<br/>signature toolkit documentation.<br/>Pro Tools and higher will only accept the Eden signature; AAX plug-ins signed by earlier generations of PACE digital<br/>signing tools will not load in Pro Tools.<br/>Optional Signature for Pro Tools AAX DSP binaries<br/>Binary-level encryption can be added to AAX DSP algorithms. Please note that this is NOT a requirement of AAX<br/>DSP plug-ins, and serves only as an additional security measure to protect an algorithm's DLL.<br/>For more information about signing AAX plug-ins for use with Pro Tools, please contact PACE.<br/>Automatic signature application by PACE tools<br/>If you already protect your plug-ins using one of the anti-piracy technologies available from PACE then you may not<br/>need to perform any additional action:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.43 Pro Tools Guide 155<br/></b></p>
<p>&#8226; you are wrapping using PACE InterLok MasterMaker, your binaries will be automatically signed.<br/></p>
<p>&#8226; If you are using Fusion Hybrid without wrapping with MasterMaker, please carefully review the &quot;Adding digital<br/>signature checks&quot; section of the Fusion Hybrid manual.<br/></p>
<p>&#8226; If you are using PACE APIs (like PACE Interface or CDRM) without InterLok wrapping, please see either the<br/>latest PACEDSigTool read me or the Fusion Hybrid manual for additional details regarding digital signing.<br/></p>
<p><b>12.43.5 Audio Engine Behavior and Features<br/></b></p>
<p>Pro Tools hosts AAX plug-ins using the Avid Audio Engine (AAE). AAE implements all host-side AAX interfaces<br/>such as AAX_IController and the AAX_ICollection.<br/></p>
<p><b>12.43.5.1 Plug-in loading and AAE initialization<br/></b></p>
<p>When Pro Tools launches, it immediately begins loading AAE. AAE searches the system for valid AAX plug-ins,<br/>checks each plug-in's digital signature, and loads, initializes and catalogs any valid plug-in modules that it happens<br/>to find.<br/></p>
<p>This initialization is performed via the plug-in's Describe implementation; once AAE loads a plug-in binary, it calls<br/>the plug-in's Describe method to retrieve (and cache) the basic configuration of the plug-in. AAE then hands this<br/>information back to Pro Tools so that Pro Tools knows what plug-ins are available and what their basic properties<br/>are. Once a complete list of plug-in descriptions has been generated, Pro Tools can show lists of available plug-ins<br/>and can construct any plug-in's individual modules.<br/></p>
<p><b>12.43.5.1.1 Plug-in configuration cacheing </b>AAE uses a cache to avoid loading every plug-in into memory on<br/>every launch. During initialization, AAE checks whether each plug-in has changed since the last time the plug-in's<br/>configuration information was cached. If nothing has changed, AAE relies on plug-in descriptions that it cached<br/>during the previous launch to speed through the plug-in loading process. If, however, any plug-ins have been<br/>added, removed, or updated since the last launch, AAE loads each changed plug-in and re-caches its description<br/>information.<br/></p>
<p>The plug-in cache files are located at:<br/></p>
<p>&#8226; Pro Tools 2023.12 and later<br/></p>
<p><b>&#8211; </b>Mac: /Users/Shared/Pro Tools/AAXPlugInCache<br/><b>&#8211; </b>Windows: C:\Users\Public\Pro Tools\AAXPlugInCache<br/></p>
<p>&#8226; Pro Tools 2023.9 and earlier, and fallback for Pro Tools 2023.12<br/></p>
<p><b>&#8211; </b>Mac: &#8764;/Library/Preferences/Avid/Pro Tools/InstalledAAXPlugIns<br/><b>&#8211; </b>Windows: USERPROFILE%\AppData\Roaming\Avid\Pro Tools\InstalledAAXPlugIns<br/></p>
<p>While troubleshooting plug-in caching issues, you can delete, rename, or movet the cache file for a plug-in to force<br/>Pro Tools to re-load and re-cache that plug-in on next launch.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>156 Module Documentation<br/></b></p>
<p><b>12.43.5.1.2 Out-of-proc loading </b>To speed up the launch process and to avoid problems that can occur when<br/>hundreds or thousands of individual plug-in binaries are loaded, AAE uses an out-of-process loading mechanism.<br/>During launch, if a plug-in's cached information needs to be updated then AAE will run a subprocess that loads the<br/>plug-in, calls its Describe routine, and builds the plug-in's cache file. If this subprocess fails then AAE will load the<br/>plug-in to generate the cache as normal.<br/></p>
<p>Because a plug-in's Describe information is cached, it is very important that the configuration details for a particular<br/>plug-in binary are always consistent. A plug-in should never include conditional logic in its Describe routine that, for<br/>example, causes a stem format to be supported or not supported depending on the host version.<br/></p>
<p>Similarly, a plug-in's Describe information must be consistent whether the plug-in is loaded directly into the Pro<br/>Tools application or into a subprocess. Otherwise, the plug-in's cached information may not match the actual plug-<br/>in configuration when it is loaded in Pro Tools, resulting in some unusual problems that can be difficult to debug.<br/></p>
<p>If you suspect that your plug-in may contain a bug related to out-of-process loading, it can be useful to force Pro<br/>Tools to load an AAX plug-in either directly or via a subprocess to examine possible differences. This can be<br/>accomplished using DigiOptions. See Using DigiOptions for more information about available options.<br/></p>
<p>It can also be useful to run the subprocess directly in order to debug the plug-in's Describe routine execution. The<br/>subprocess program is located at:<br/></p>
<p>&#8226; Mac: Pro Tools.app/Contents/CommandLineTools/pluginrunner<br/></p>
<p>&#8226; Windows: C:\Program Files\Avid\Pro Tools\DAEPlugInRunner.exe<br/></p>
<p>The program accepts paths to plug-ins as command line arguments. It will load each plug-in in turn, if that plug-in<br/>does not already have a valid cache file.<br/></p>
<p><b>12.43.5.2 Plug-in initialization<br/></b></p>
<p>When a new plug-in instance is created in Pro Tools, AAE performs the following steps:<br/></p>
<p>1. The plug-in's data model component is loaded<br/></p>
<p>2. The default state of the plug-in is set (see Default plug-in settings)<br/></p>
<p>3. The plug-in's GUI and other host modules are loaded<br/></p>
<p>4. The plug-in's algorithm private data state is initialized<br/></p>
<p>5. The plug-in's algorithm is loaded and initialized<br/></p>
<p>6. The plug-in's algorithm processing is initiated<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.43 Pro Tools Guide 157<br/></b></p>
<p><b>12.43.5.3 Run-time processing behavior<br/></b></p>
<p>The audio engine in Pro Tools includes some advanced real-time processing features that are not present in earlier<br/>versions of Pro Tools:<br/></p>
<p>&#8226; When certain tracks with plug-ins have been silent for a period of time or Pro Tools is not in playback, those<br/>plug-in instances are automatically deactivated to reduce processing load on the host processor<br/></p>
<p>&#8226; In certain situations such as playback or offline bounce where low latency is not required, Pro Tools may call<br/>AAX Native plug-ins with a larger buffer than normal.<br/></p>
<p>This latter behavior is possible due to the fact that AAE uses two latency domains for plug-ins: a high-latency<br/>domain that operates over large block sizes and a low-latency domain that operates over small block sizes. Since<br/>processing at higher block sizes is generally more efficient, plug-in instances that are running in the high-latency<br/>domain generally consume less CPU cycles for their processing than instances that are running in the low-latency<br/>domain.<br/></p>
<p>Pro Tools may swap plug-in instances back and forth between these two domains at run-time and uses a set of rules<br/>designed to optimize the system's CPU resources while at the same time providing the best and most responsive<br/>user experience in every situation. These rules are different depending on whether the system is using an HDX<br/>card as its playback engine.<br/></p>
<p>Here are some of the specific rules that are followed by the current versions of Pro Tools at the time of this writing.<br/>These rules are subject to change from release to release:<br/></p>
<p>&#8226; (HDX classic and Native) If there is any live audio or MIDI feeding into the plug-in's track and if the track is<br/>sending audio to an active output then all plug-in instances on the track will be run at low latency.<br/></p>
<p>&#8226; (HDX classic only) If any AAX DSP plug-in instances are present in the signal path that feeds an AAX Native<br/>plug-in instance then the AAX Native plug-in will be run at low latency.<br/></p>
<p>&#8226; (HDX classic only) Any AAX Native plug-in instance on an AUX track will be run at low latency.<br/></p>
<p>For a full list of compatibility and feature differences between different AAX plug-in hosts, see Host Support.<br/></p>
<p><b>12.43.5.3.1 Deterministic Plug-in Automation </b>Native and DSP plug-ins will receive automation changes in a<br/>deterministic manner. Each time the transport is played, automation events will be delivered to the plug-in for<br/>processing at the same moment on the timeline. Note that this does not mean automation is sample-accurate with<br/>respect to where the automation breakpoints are placed in the timeline, but rather that the timing will be the same<br/>between transport runs.<br/></p>
<p><b>12.43.5.3.2 Offline Bounce </b>Pro Tools supports faster-than-real-time offline bounce for all sessions. All plug-ins<br/>with AAX Native types are supported. For AAX DSP plug-ins, the offline bounce process will temporarily convert<br/>those to their corresponding AAX Native types to complete the bounce. Because offline bounce is faster-than-real-<br/>time, audio processing callbacks will occur as fast as the algorithm will allow for. For this and other reasons, your<br/>algorithms should never depend on wall-clock time for features such as LFO, delay time, etc. Instead, all algorithms<br/>should always base time calculations on sample time so that the output will still be correct even if the algorithm is<br/>being called from an offline bounce.<br/></p>
<p><b>12.43.5.3.3 The Hybrid Engine and AAX DSP </b>Pro Tools HDX and Pro Tools Carbon systems support the<br/>Hybrid Engine, which optimizes system latency by splitting the Pro Tools mix topology between native and DSP<br/>processors. When the Hybrid Engine is in use, Pro Tools tracks are configured as either DSP Mode or Native Mode.<br/>All AAX effect instances on a DSP Mode track are switched to their AAX DSP type. Plug-ins that do not support<br/>AAX DSP are de-activated while the track is in DSP Mode.Pro Tools HDX also supports a Classic mode. In this<br/>mode, the user chooses whether each plug-in instance will be AAX Native or AAX DSP.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>158 Module Documentation<br/></b></p>
<p><b>12.43.5.3.4 AAX Hybrid Plug-ins </b>Pro Tools also supports AAX Hybrid plug-ins, which can have both a Native<br/>and a DSP algorithm processing component. Audio-rate data can also be shared between the two processing com-<br/>ponents, which allows you to split your algorithm up into low-latency and high-latency contexts for better efficiency<br/>and to enable plug-ins such as convolution reverbs, spectrum analyzers, and other similar architectures.<br/></p>
<p><b>Note<br/></b>AAX Hybrid is only supported by Pro Tools HDX when running in Classic mode. See PT-257213 for more<br/>information.<br/></p>
<p><b>12.43.6 Basic plug-in operation<br/></b></p>
<p><b>12.43.6.1 Configuration management<br/></b></p>
<p>Each Effect in an AAX plug-in may contain multiple configurations. Pro Tools automatically determines the appro-<br/>priate plug-in configuration for each Effect insert at run time based on the insert's required sample rate, channel<br/>width, and processing mode (Native of DSP.) Under some circumstances, the configuration requirements for an<br/>Effect insert may change at run-time. Here are some examples:<br/></p>
<p>&#8226; When a width-changing plug-in (e.g. mono-to-stereo) is instantiated on a track then all of the following inserts<br/>must be converted to the new stem format<br/></p>
<p>&#8226; When a user imports session data between sessions at different sample rates then all of the imported plug-ins<br/>must be converted from the old sample rate to the new sample rate<br/></p>
<p>&#8226; When a user opens a session that contains deprecated effects, they must be replaced by the corresponding<br/>installed effects<br/></p>
<p>Whenever a new configuration is required, Pro Tools automatically determines whether one is available that meets<br/>the new requirements and, if it is, swaps in a new plug-in instance using a copy of the previous configuration's<br/>settings.<br/></p>
<p>In order for Pro Tools to deterministically select the appropriate Effect configuration to load in any given scenario,<br/>each of the configurations that are registered in the Effect must be described with distinct and mutually exclusive<br/>compatibility requirements.<br/></p>
<p><b>12.43.6.2 Plug-in activation and deactivation<br/></b></p>
<p>In Pro Tools, real-time plug-in inserts can be either active or inactive. Inactive plug-ins are not instantiated and are<br/>entirely removed from the processing chain, though they are still saved with the session and maintain a placeholder<br/>in their track's insert list for easy activation at a later point.<br/></p>
<p>Active plug-ins may be de-activated manually by the user or automatically by Pro Tools. Plug-ins may be loaded<br/>as inactive when a plug-in that has been saved in a session has been uninstalled and is no longer available, when<br/>a required plug-in configuration is not available, or at any other time when a particular plug-in instance cannot be<br/>loaded.<br/></p>
<p><b>12.43.6.3 Plug-in bypass<br/></b></p>
<p>AAX plug-ins must implement a Master Bypass parameter, which is controlled via the &quot;Bypass&quot; button in the Pro<br/>Tools plug-in window header. While bypassed, the plug-in must not apply any processing to the audio that is passed<br/>to it (except delay, see below.) The plug-in may choose to smoothly transition into and out of bypass however it<br/>chooses.<br/></p>
<p>Any algorithmic delay that a plug-in incurs during normal operation must be maintained by the plug-in during bypass.<br/>For more information about this requirement, see Automatic Delay Compensation.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.43 Pro Tools Guide 159<br/></b></p>
<p><b>12.43.6.4 Presets and settings management<br/></b></p>
<p>Pro Tools includes a plug-in preset management system that can be accessed from the plug-in window header. With<br/>this system, users can save plug-in settings to disk and load the settings later to restore the plug-in's configuration.<br/></p>
<p>Preset files can be bundled with an AAX plug-in to demonstrate a variety of uses for the plug-in or as recommended<br/>settings for different situations, and, as a plug-in developer, you are encouraged to provide a large selection of pre-<br/>configured presets along with your AAX plug-ins. See Create factory presets for more information about bundling<br/>presets with your plug-in.<br/></p>
<p>Aside from user preset management, there are many cases when the state of a plug-in must be captured or restored<br/>by AAE. For example, AAE must restore plug-in settings when a session is loaded and when converting a plug-in<br/>between different configurations.<br/></p>
<p><b>12.43.6.4.1 The plug-in preset menu </b>Plug-in presets are available to the user via the Plug-In Settings menu<br/>in the Pro Tools plug-in window header. This menu supports nesting presets into sub-folders, which provides a<br/>convenient way to categorize and organize large sets of presets. In addition, users may save custom presets and<br/>add these custom presets to the menu.<br/></p>
<p>Figure 2: The Plug-In Settings menu in the Pro Tools plug-in window header<br/></p>
<p>The preset menu in the Pro Tools plug-in header is built from the following two directories:<br/></p>
<p>&#8226; Session file/../Plug-In Settings<br/></p>
<p>&#8226; User Library root/Plug-In Settings<br/></p>
<p>The default setting for the User Library root directory is&#8764;/Documents/Pro Tools on macOS, but the user can change<br/>this setting in the Pro Tools preferences.<br/></p>
<p><b>12.43.6.4.2 Factory presets </b>Pro Tools supports automatic installation of plug-in presets. AAX plug-ins should<br/>include a set of presets in the following directory within the .aaxplugin:<br/></p>
<p>&#8226; MyPlugIn.aaxplugin/Contents/Factory Presets/MyPlugInPackage/<br/></p>
<p>Where MyPlugInPackage is the plug-in's longest Package Name with 16 characters or fewer.<br/></p>
<p>On Pro Tools launch, all installed AAX plug-in settings are copied from the .aaxplugin bundles' &quot;Factory Presets&quot;<br/>folders into the User Library directory (see above.)<br/></p>
<p><b>Note<br/></b>Since the User Library root directory is a customizable setting, you should never install presets directly onto<br/>a user's system. If you require a central repository of settings on the system that is under control of your<br/>installer then you should handle these settings as external resources. You can use custom settings chunks in<br/>the plug-in's &quot;Factory Presets&quot; .tfx files to redirect your plug-in to read the appropriate installed resources.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>160 Module Documentation<br/></b></p>
<p><b>12.43.6.4.3 Default plug-in settings </b>When the first instance of an effect is made active in a session, Pro Tools<br/>queries the instance's state and stores this data as the effect's &quot;factory default&quot; preset. This preset is cached by Pro<br/>Tools and will be set on each subsequent instance of the plug-in with the same configuration<br/></p>
<p>The plug-in's factory default settings are stored on disk in a temporary file location that is specific to the user. Pro<br/>Tools looks for the factory default settings file for a plug-in each time an instance of the plug-in goes from an inactive<br/>state to an active state, including when the instance is first created. If there is no factory default settings file on disk<br/>then Pro Tools will create it using the plug-in's current settings.<br/></p>
<p>All factory default settings files are deleted during the Pro Tools shutdown procedure. Therefore, under normal<br/>operation, these files will be refreshed with each launch of Pro Tools.<br/></p>
<p><b>Note<br/></b>If the Pro Tools shutdown procedure is not completing, for example if you regularly terminate Pro Tools from a<br/>debugger, then the plug-in factory default settings files will not be deleted automatically.<br/></p>
<p>When a session is loaded Pro Tools will perform the following steps on each plug-in instance:<br/></p>
<p>1. Instantiate the plug-in and create a AAX_IEffectParameters object<br/>2. Look for the cached factory default settings file in the file system<br/>3. If the factory default settings file is not found, query the plug-in for its current settings and create the factory<br/></p>
<p>default settings file using these settings<br/>4. Set the instance's default settings based on the settings stored in the cached factory default file<br/>5. Send the instance a AAX_eNotificationEvent_SessionBeingOpened notification<br/>6. Set the saved settings from the session<br/></p>
<p><b>12.43.6.4.4 The Compare Light </b>The plug-in window header in Pro Tools includes a &quot;Compare&quot; button, the<br/>Compare Light control. This control allows the user to compare the current state of the plug-in with the last preset<br/>that was loaded, or the plug-in's default settings if no other preset has yet been loaded.<br/></p>
<p>Pro Tools polls each displayed plug-in periodically to determine whether or not its state matches the currently loaded<br/>preset. While the state matches, the Compare Light is inactive and unlit. As soon as the plug-in's state differs from<br/>the preset, the Compare Light becomes active and is highlighted.<br/></p>
<p>When the Compare Light is active, the user may click on it to cache the current plug-in settings and temporarily<br/>swap in the last preset that was loaded. Clicking on the Compare Light a second time will restore the cached plug-in<br/>settings.<br/></p>
<p>The specific operation of the Compare Light is determined by the plug-in's implementation of AAX_IEffectParameters.<br/>To determine the correct state for a plug-in's compare light, Pro Tools makes regular calls to AAX_IEffectParameters::GetNumberOfChanges()<br/>from a callback timer. If this method's aValueP parameter has changed since the last time the plug-in was queried<br/>then Pro Tools proceeds to call CompareActiveChunk(). If CompareActiveChunk() returns with isEqual==false<br/>then the Compare Light will be lit, otherwise the light will be dimmed.<br/></p>
<p><b>12.43.6.4.5 Basic chunk handling </b>All of these situations use the same basic settings management infrastruc-<br/>ture in Pro Tools, which uses the &quot;chunk&quot; API of AAX_IEffectParameters to retrieve arbitrary blocks of data from the<br/>plug-in (to retrieve a preset) and send the same block back to the plug-in (to set a preset.)<br/></p>
<p>When retrieving a preset from a plug-in, Pro Tools first asks for the size of the plug-in's settings chunk(s). Pro<br/>Tools then provides the plug-in with a pre-allocated buffer of memory into which the plug-in may store its settings<br/>information using any format that it chooses.<br/></p>
<p>When Pro Tools needs to restore the plug-in to this preset state, it sends a copy of this data back to the plug-in. The<br/>plug-in must interpret this data and set its internal state to match the preset.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.43 Pro Tools Guide 161<br/></b></p>
<p><b>12.43.6.5 Modifier key behavior<br/></b></p>
<p>In order for users to have a consistent experience, all AAX plug-ins should provide standard modifier key behaviors<br/>as described in this section. These operations are demonstrated by all Avid plug-ins in Pro Tools, and you can<br/>experiment with Avid's AAX plug-ins to demonstrate the correct plug-in modifier key behavior.<br/></p>
<p>The following modifier key combinations must be handled explicitly by the plug-in:<br/></p>
<p><b>macOS Keys Windows Keys Expected Behavior<br/></b>Command-click Control-click Adjust the parameter's value with fine control, for continuous controller<br/></p>
<p>widgets<br/>Option-click Alt-click Return the parameter's value to default&#8727;<br/>Shift-click Shift-click Link parameters across all channels, if applicable<br/>&#8727;Set-to-default may also be handled directly by the host, depending on the host version (see below).<br/></p>
<p>In addition to these events, there are also specific behaviors which Pro Tools and other AAX hosts provide for certain<br/>key combinations in plug-in GUIs. For example, Pro Tools provides the following modifier key behavior overrides:<br/></p>
<p><b>macOS Keys Windows Keys Expected Behavior<br/></b>Command-Control-click<br/>Command-Right click<br/></p>
<p>Control-Start-click<br/>Control-Right click<br/></p>
<p>Show parameter automation lane in the Pro Tools<br/>Edit Window, if automation is enabled for the param-<br/>eter<br/></p>
<p>Command-Option-Control-click<br/>Command-Option-Right click<br/></p>
<p>Control-Alt-Start-click<br/>Control-Alt-Right click<br/></p>
<p>Activate pop-up menu for automation<br/></p>
<p>Other AAX plug-in hosts implement different host-managed behavior for modifier key combinations, and additional<br/>host-managed key combinations may be added to any AAX host in the future. For example, Pro Tools adds host-<br/>managed support for setting plug-in parameters to their default values.<br/></p>
<p>In order to allow the AAX host to handle these operations, a plug-in must always call the handler methods in<br/>AAX_IViewContainer before handling any mouse events in its own GUI. It is important to call these methods for all<br/>mouse events, in case additional handlers are added to future versions of the host or the plug-in is run in a new<br/>AAX host with a different set of handled modifier key combinations.<br/></p>
<p>See the AAX_IViewContainer class documentation for more information about passing mouse events to the AAX<br/>host.<br/></p>
<p><b>12.43.7 Optional plug-in features<br/></b></p>
<p>Pro Tools plug-ins offer users a rich set of integrated features. To make sure your plug-ins integrate into users'<br/>expected Pro Tools workflows, where applicable you should implement all of the features presented in this chapter.<br/></p>
<p>For more information about any of these features in Pro Tools, see the latest Pro Tools Reference Guide.<br/></p>
<p><b>12.43.7.1 Audio management features<br/></b></p>
<p><b>12.43.7.1.1 Sidechain input </b>If applicable, plug-ins may choose to enable sidechain inputs. If a sidechain is<br/>enabled, a menu is added to the plug-in's header that allows the user to choose an interface or bus as the sidechain,<br/>or &quot;key input&quot;. For AudioSuite, the user can only use an existing audio track as the sidechain input. Once enabled,<br/>the plug-in will be able to access sidechain input just like any other input signal.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>162 Module Documentation<br/></b></p>
<p><b>12.43.7.1.2 Auxiliary Output Stems </b>Pro Tools has the capability to show and route multiple &quot;auxiliary&quot; outputs<br/>from a plug-in to other tracks. These are known as Auxiliary Output Stems (AOS), a stem referring to one set of<br/>outputs. A stereo stem contains two outputs, left and right, and a mono stem contains one output. The outputs will<br/>appear in the input assignment pop-up menu of each track under the category &quot;plug-in&quot;.<br/></p>
<p>Some notes regarding this feature:<br/></p>
<p>&#8226; Only mono and stereo stems are available as auxiliary outputs.<br/></p>
<p>&#8226; The aux outputs cannot be added and removed from the system dynamically though they can be made<br/>inactive by the user. The total number of aux outputs, stem types, names, paths, and ordering are defined<br/>only once by the plug-in.<br/></p>
<p>&#8226; Plug-in aux outputs are not available from the sidechain input popup menu in other plug-ins. Users will not<br/>see the &quot;plug-in&quot; submenu when clicking on a plug-in sidechain popup.<br/></p>
<p>&#8226; There cannot be any multi-mono multi-output plug-ins. If a mono plug-in instance offers multiple outputs it<br/>cannot support multi-mono.<br/></p>
<p>If a plug-in is going to utilize the AOS feature, it will be responsible for a few details that are summarized below:<br/></p>
<p>&#8226; Aux Output Paths<br/>The plug-in is responsible for the definition of valid aux output paths. This definition includes the total number<br/>of outputs, the desired order of stereo and mono paths. Pro Tools will query each plug-in for available valid<br/>paths and populate its track input selector popup menus accordingly.<br/></p>
<p>&#8226; Aux Output Path Order<br/>The plug-in is responsible for specifying the type and name of each of its aux output paths. A plug-in decides<br/>whether the aux outputs are all stereo, all mono, &quot;X&quot; stereo outputs followed by &quot;Y&quot; mono outputs, or some<br/>other combination. Pro Tools lists each output in the order given by the plug-in. If mono and stereo paths are<br/>interleaved the input popup menu of the mono tracks keeps that order and breaks the stereo paths into their<br/>respective left and right sides using &quot;.L&quot; and &quot;.R&quot; suffixes.<br/></p>
<p>&#8226; Aux Output Names<br/>A plug-in is responsible for giving meaningful names to aux outputs. Names are only defined once, so they<br/>will stick. At the very least, individual outputs should be labeled &quot;Output xx&quot;, where &quot;xx&quot; is the aux output<br/>number as it is defined in the plug-in. The output name should also include the words &quot;mono&quot; and &quot;stereo&quot; to<br/>support when users are looking for an output with a specific stem format.<br/></p>
<p>&#8226; Aux Output Numbering<br/>The plug-in is responsible for defining the lowest available aux output number. Plug-ins should base this<br/>number on the width of the plug-in's main outputs. For example, when using a stereo instance of a sampler<br/>the first aux output should be #3, when using a 5.1 instance of the sampler the first aux output should be<br/>#7, etc. This is to keep the numbering scheme inside of the plug-in and in Pro Tools consistent. From the<br/>perspective of Pro Tools, plug-ins typically enumerate all available outputs and do not differentiate between<br/>main and aux outputs. The first &quot;N&quot; outputs are used for the main outputs, and all the remaining outputs are<br/>available for aux output paths.<br/></p>
<p>&#8226; Separate Multi-Output Plug-in Process Type<br/>Plug-in developers are encouraged to offer both &quot;regular&quot; and &quot;multi-output&quot; versions/types of any multi-<br/>output capable plug-in. We strongly suggest this to conserve resources and to keep the user's workspace<br/>as uncluttered as possible. Users can choose to use the regular version/type for plug-ins they don't need<br/>aux outputs for. Multi-output versions can be created as separate process types so that there need not be<br/>separate binaries. Such additional process types will be listed in the plug-in menu next to their regular version<br/>siblings. They should be nominally distinguished by appending phrases like &quot;multi-output&quot; to the plug-in name,<br/>for example.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.43 Pro Tools Guide 163<br/></b></p>
<p><b>Note<br/></b>When moving sessions between different PT systems, multi-output process types will NOT be automat-<br/>ically converted to regular process types if multi-output types are not available.<br/></p>
<p>&#8226; No Multi-Mono Implementations<br/>A plug-in is responsible for not having multi-mono enabled if it utilizes auxiliary outputs stems. Auxiliary output<br/>stems will not work in multi-mono enabled plug-ins. Multi-mono is automatically disabled for AOS in the Effect<br/>Layer.<br/></p>
<p><b>12.43.7.1.3 External metering and internal clip </b>Pro Tools may use the meter values reported by a plug-in for<br/>display on attached control surfaces and other external plug-in views. In general, the behavior of a plug-in meter on<br/>these devices will depend on the meter's properties as registered in Describe. The meter behavior may also depend<br/>on the plug-in's registered category. See Plug-in meters for more information about how to register your plug-in's<br/>meters.<br/></p>
<p>&#8226; Gain reduction metering<br/>Pro Tools supports gain reduction metering and will display an inverted gain reduction meter next to each<br/>plug-in insert and also next to the track's main meter in the Pro Tools Mix and Edit windows.<br/>All registered plug-in gain reduction meters are used by the Pro Tools gain-reduction metering UI. The plug-in<br/>gain reduction meters in the Pro Tools Mix and Edit windows will combine metering data for all gain-reduction<br/>meters of the same type (Compressor/Limiter or Expander/Gate) in the plug-in:<br/></p>
<p><b>&#8211; </b>For plug-ins with multiple gain-reduction meters of the same type, the minimum (most gain-reduced)<br/>meter value for the current buffer will be used<br/></p>
<p><b>&#8211; </b>For multi-mono plug-ins, the minimum meter value across all of the per-channel mono instances will be<br/>used<br/></p>
<p>Pro Tools can be set up to display Compressor/Limiter, Expander/Gate, or both types of metering data in<br/>these displays via Preferences &gt; Metering &gt; Display &gt; Gain Reduction Meter Type. If both types are used,<br/>the displayed meter level is simply the sum of the selected values for each type.<br/>The track gain-reduction meter displays the sum of all the track's inserts' gain reductions, using the same<br/>rules as above.<br/></p>
<p>&#8226; Plug-in internal clipping<br/>The plug-in header has a clip light that indicates that the plug-in has reported that is has clipped somewhere<br/>internally. It is up to the plug-in itself to set and clear its clip indicators as needed. Additionally, plug-ins that<br/>have clipped internally will appear in red on the insert, even if the plug-in window is not open. This allows<br/>users to see at a glance where clipping has occurred in their mix.<br/></p>
<p><b>12.43.7.1.4 Automatic Delay Compensation </b>Automatic Delay Compensation maintains time-alignment be-<br/>tween tracks that have plug-ins with differing algorithmic delays, tracks with different mixing paths, tracks that are<br/>split off and recombined within the mixer, and tracks with hardware inserts. To maintain time alignment, Pro Tools<br/>adds the exact amount of delay to each track necessary to make that particular track's delay equal to the delay of<br/>the track that has the longest delay.<br/></p>
<p>In order to be compensated correctly, AAX plug-ins must report any algorithmic delay that they incur. This delay<br/>may be reported in the plug-in's description, and may also be changed at run-time.<br/></p>
<p>Automatic Delay Compensation Notes<br/></p>
<p>&#8226; Currently, Pro Tools will not update its delay compensation settings while Pro Tools is in playback, so a plug-in<br/>that dynamically changes its delay settings at run-time should either prevent any algorithmic delay updates<br/>during playback or give a visual indication to the user when the delay that it applies and the delay that Pro<br/>Tools is compensating for different delay settings.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>164 Module Documentation<br/></b></p>
<p>&#8226; Pro Tools does not update delay compensation settings when plug-ins go into and out of bypass, and does<br/>not automatically maintain bypass audio buffers for delayed plug-ins. It is therefore required that all plug-ins<br/>incur the same amount of delay when bypassed as during normal operation.<br/></p>
<p>&#8226; Automatic Delay Compensation is not applied during offline (AudioSuite) processing for plug-ins which use the<br/>Host Processor interface. If your Host Processor plug-in incurs algorithmic delay then you must incorporate<br/>audio lookahead via the Host Processor interface's random timeline access API.<br/></p>
<p>&#8226; Given the many routing possibilities in Pro Tools, the Automatic Delay Compensation feature involves some<br/>subtleties that may not be immediately apparent or intuitive. For more information about this feature, we<br/>strongly recommend that you review the relevant chapters in the Pro Tools Reference Guide.<br/></p>
<p><b>12.43.7.2 Plug-in categories<br/></b></p>
<p>The plug-in menus in Pro Tools are hierarchical and by default are organized by category. These general categories<br/>represent common plug-in functions like EQ, dynamics, reverb, etc. Plug-ins may report one or more of these<br/>categories in order to be placed into the proper menu. For a complete list of plug-in categories available, refer to<br/>the AAX_EPlugInCategory enum.<br/>Some features, such as control surface center-section mappings, are only available to plug-ins that report a partic-<br/>ular category, so it is important for plug-ins to report the correct set of categories.<br/></p>
<p><b>12.43.7.3 Advanced non-real-time processing<br/></b></p>
<p>AudioSuite processing allows AAX plug-in to operate on audio in a non-real-time manner. AudioSuite plug-<br/>ins will appear in the AudioSuite menu in Pro Tools. By default, any AAX-Native plug-in will appear in<br/>the menu as long as an AAX_eProperty_PlugInID_AudioSuite property is defined alongside the corresponding<br/>AAX_eProperty_PlugInID_Native ID. However, to make use of extended AudioSuite features such as non-real-time<br/>sample access, the Analysis pass, a separate entry method subclassed from the AAX_CHostProcessor implemen-<br/>tation in the SDK should be used.<br/></p>
<p><b>12.43.7.3.1 AudioSuite processing modes </b>Pro Tools includes a number of different AudioSuite processing<br/>modes, each of which changes the precise behavior of an AudioSuite processing event.<br/>Output modes<br/></p>
<p>&#8226; Overwrite files Output audio destructively overwrites the selected audio files on disk<br/>&#8226; Create individual files Individual new files are created for each processed clip<br/>&#8226; Create continuous file A single new file is created with data from the full processing pass<br/></p>
<p>Input modes<br/></p>
<p>&#8226; Clip by clip<br/>&#8226; Entire selection<br/></p>
<p>The plug-in may optionally disable the &quot;clip by clip&quot; processing mode if continuous input data is required, by using<br/>the property AAX_eProperty_ContinuousOnly.<br/>Channel modes<br/></p>
<p>&#8226; Mono mode Each selected channel is processed as an individual mono audio stream<br/>&#8226; Multi-input mode Selected channels are sent to the plug-in in multi-channel streams<br/></p>
<p>Multi-input mode is only valid with the &quot;entire selection&quot; input mode, since the &quot;clip by clip&quot; input mode requires that<br/>each clip be processed individually as a standalone audio channel.<br/>The plug-in may optionally disable &quot;mono mode&quot; processing if its algorithm is only valid for multi-channel input, by<br/>defining the AAX_eProperty_MultiInputModeOnly property.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.43 Pro Tools Guide 165<br/></b></p>
<p><b>12.43.7.3.2 Analysis </b>AudioSuite plug-ins support and optional Analysis pass, which allows a plug-in to<br/>access the incoming audio before the actual Render pass starts. When Analysis is defined with either<br/>AAX_eProperty_OptionalAnalysis or AAX_eProperty_RequiresAnalysis, an Analyze button will appear in the<br/>plug-in footer in the GUI.<br/></p>
<p>An analysis pass is useful for collecting pitch, spectrum, loudness, noise threshold, or other data that will help the<br/>user set up parameters based on the audio content being processed.<br/></p>
<p><b>12.43.7.3.3 Reverse </b>A &quot;reverse&quot; feature is available for Reverb and Delay AudioSuite plug-ins. This effect will<br/>reverse the source audio, apply the AudioSuite plug-in processing, and re-reverse the source audio back to its<br/>original orientation, thereby applying the AudioSuite effect in reverse.<br/></p>
<p>Reverse replaces the Analysis pass in the Pro Tools UI, so AudioSuite plug-ins in these categories do not receive a<br/>user-triggered analysis pass.<br/></p>
<p><b>12.43.7.3.4 Random-access and non-linear processing </b>The generation of output samples by an AudioSuite<br/>Process must occur linearly and incrementally; however, the source of input samples may optionally be randomly<br/>accessed from the entire selected track. This enables many advanced processing capabilities such as whole-<br/>file analysis, audio reverse effects, and timeline-level modifications such as expanding, contracting, or shifting the<br/>processed region.<br/></p>
<p>In order to prevent invalid data from being randomly accessed, the &quot;overwrite files&quot; processing mode is disabled for<br/>plug-ins that use random-access processing.<br/></p>
<p><b>12.43.7.3.5 AudioSuite Handles </b>By default, when processing audio segments with an AudioSuite plug-in, Pro<br/>Tools will also process an extra region before and after the selected audio. These extra regions will be trimmed out<br/>of the selected.<br/></p>
<p>The reason for this feature is so that the user has some room to expand the resulting audio clip (for fades or other<br/>reasons). However, certain AudioSuite plug-ins will operate more intuitively if these handles are not processed<br/>(such as delay, reverb, loudness normalization, and other plug-in types). To disable extended handle processing,<br/>set the AAX_eProperty_DisableHandles property to true.<br/></p>
<p><b>12.43.7.3.6 Extended features </b>AAX-AudioSuite plug-ins also have several other optional features including cus-<br/>tom progress dialogs, reverse mode, and side-chains. For a complete reference of supported AudioSuite-related<br/>properties, refer to the properties between AAX_eProperty_AudiosuitePropsBase and AAX_eProperty_MaxASProp<br/>found in Interfaces\AAX_Properties.h.<br/></p>
<p><b>12.43.7.4 Clip drag and drop<br/></b></p>
<p>Pro Tools supports drag and drop of audio clips from the Edit Window into AAX plug-ins. When a clip is dragged<br/>and dropped into an AAX plug-in window, it will be committed with any Clip Gain, Clip Effects, Elastic Audio, ARA,<br/>and track insert processing applied, and a new file will be created in the Rendered Files folder within the session<br/>folder.<br/></p>
<p>The drop operation is performed via OS APIs and the drag and drop operation will be received by the plug-in as a<br/>normal audio file drag and drop event using the newly rendered file as its target.<br/></p>
<p>Clip drag and drop is supported starting in Pro Tools 2024.10, with support for drag and drop of clips from mono<br/>and stereo audio tracks<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>166 Module Documentation<br/></b></p>
<p><b>12.43.7.4.1 Implementation notes for Mac </b>On Mac, Pro Tools generates an audio file drag and drop event after<br/>the mouse button is released. This allows Pro Tools to render the audio clip only when the drop event is actually<br/>executed, not before. As a side effect of this approach, there is no indication in the plug-in GUI itself (e.g. highlight)<br/>that a clip can be dropped. In fact, your plug-in GUI code will not observe the drag and drop event until the mouse<br/>button is released. Once the mouse button is released, the plugin GUI views will receive a sequence of messages<br/>representing the drag and drop of the rendered audio file.<br/></p>
<p><b>12.43.7.4.2 Implementation notes for Windows </b>On Windows, the plug-in will receive notifications of the drag<br/>and drop event through the IDropTarget interface before the mouse button is released. The target file name will<br/>be provided, although the file does not yet exist. If your plug-in attempts to read the file on disk during a drag and<br/>drop operation before the actual drop occurs then you should include error handling in the event that the file cannot<br/>be read. The plug-in should allow the operation to proceed until the drop action.<br/></p>
<p>We recommend that plug-ins call IDataObject::QueryGetData() during the drag operation, not Get&#8592;&#8617;<br/>Data(), until the actual contents of the data object payload are required. This is usually not until the actual drop<br/>(IDropTarget::Drop()). Regardless, the AAX drag and drop support is implemented to handle cases when<br/>plug-ins use GetData() prior to the actual drop event to determine drop compatibility, although in this case the<br/>data that is provided references an audio file that does not yet exist.<br/></p>
<p>To create the target file, the plugin must call IDataObject::GetData() from within, or after, IDrop&#8592;&#8617;<br/>Target::Drop() in order to signal to Pro Tools that the file data will be used as part of the drop event. This will<br/>trigger the file render.<br/></p>
<p><b>12.43.8 Using the Pro Tools Scripting SDK with AAX<br/></b></p>
<p>The Pro Tools Scripting SDK provides a way to control various aspects of Pro Tools. AAX plug-ins may incorporate<br/>the Pro Tools Scripting SDK in order to control Pro Tools in ways that are not possible through AAX alone.<br/></p>
<p>The Pro Tools Scripting SDK requires a PTSL connection to be established with Pro Tools. When establishing a<br/>PTSL connection from within an AAX plug-in, the connection request must be made using a non-main application<br/>thread. Spawn a new thread from within your AAX plug-in to perform all PTSL connection requests and Pro Tools<br/>Scripting SDK commands.<br/></p>
<p><b>12.43.9 Plug-ins with MIDI support<br/></b></p>
<p>In most cases, users are able to route MIDI arbitrarily in Pro Tools. Plug-in MIDI outputs and inputs are available<br/>as MIDI sources and destinations and are available at other routing points such as MIDI track input selectors. AAX<br/>plug-ins with MIDI inputs and outputs can be instantiated just like other real-time effects. AAX MIDI processing and<br/>audio processing are not mutually exclusive.<br/></p>
<p>For more information about MIDI in AAX, see MIDI<br/></p>
<p>Pro Tools includes special handling for two common categories of plug-ins that process MIDI data: Virtual Instru-<br/>ments and MIDI effects<br/></p>
<p>&#8226; Virtual Instruments convert MIDI data into audio data. To define a Virtual Instrument, include<br/>AAX_ePlugInCategory_SWGenerators in the effect's category property.<br/></p>
<p>&#8226; MIDI effects manipulate MIDI data in real time. To define an AAX MIDI effect, include AAX_EPlugInCategory_MIDIEffect<br/>in the effect's category property. See below for more information about MIDI effects.<br/></p>
<p>Pro Tools supports MIDI processing in real time effects only. Virtual Instruments and MIDI effects should not register<br/>as AudioSuite plug-ins.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.43 Pro Tools Guide 167<br/></b></p>
<p><b>12.43.9.1 Instrument tracks<br/></b></p>
<p>Pro Tools Instrument tracks apply some special rules for MIDI connections. An Instrument track's MIDI input and<br/>MIDI playlist are connected to the first MIDI input node of the first Virtual Instrument insert on the track. Instrument<br/>tracks also connect chains of MIDI effects together, and include special features for managing inputs and outputs of<br/>these chains.<br/></p>
<p>Because inserts on Instrument tracks process both audio and MIDI, the audio format of Virtual Instrument and other<br/>effects on Instrument tracks will determine whether the effect is shown in the track's insert lists. Virtual Instruments<br/>should register component descriptions for all supported multichannel formats. This will ensure that the instrument<br/>shows in the MIDI plug-ins menu on all Instrument tracks regardless of the track's audio format.<br/></p>
<p>For more information about Pro Tools Instrument tracks, Virtual Instruments, and MIDI effect chaining, see the Pro<br/>Tools Reference Guide.<br/></p>
<p><b>12.43.9.2 MIDI effects and MIDI insert chains<br/></b></p>
<p>By manipulating MIDI data in real time as it flows through a processing chain, MIDI Effects allow users to apply<br/>insert effects to MIDI data just like adding effects to audio data.<br/></p>
<p>To function as a MIDI effect, an effect should define both a MIDI input port and a MIDI output port. When chaining<br/>MIDI effects on an Instrument track, Pro Tools will connect incoming MIDI to the first channel of the plug-in's first<br/>MIDI input node and will connect the first channel of the plug-in's first MIDI output node to the next effect in the<br/>chain.<br/></p>
<p>MIDI effects that use the AAX_EPlugInCategory_MIDIEffect category will appear in a MIDI plug-ins menu that is<br/>separate from the other real-time insert lists on Instrument tracks. This category can also trigger other special<br/>handling of the effect in Pro Tools, such as disabling dynamic plug-in processing.<br/></p>
<p>Because MIDI effects are also standard AAX inserts, it is possible to process both audio and MIDI. Multi-mono<br/>processing is not allowed for MIDI effects since there is only one MIDI channel to process even on multi-channel<br/>Instrument tracks. Therefore, even if a MIDI effect's audio processing is only a pass-through, the effect should<br/>register component descriptions for all multichannel formats. This will ensure that the product shows in the MIDI<br/>plug-ins menu on all Instrument tracks regardless of the track's audio format.<br/></p>
<p><b>12.43.10 Debugging AAX plug-ins<br/></b></p>
<p><b>12.43.10.1 Debugging within Pro Tools<br/></b></p>
<p>Shipping versions of Pro Tools do not support attaching a debugger. This is to prevent malicious users from com-<br/>promising Pro Tools security as well as the security of third-party plug-ins.<br/></p>
<p>As an AAX plug-in developer, you are granted access to debuggable &quot;developer build&quot; versions of Pro Tools to help<br/>your development efforts. Some Pro Tools developer builds are feature-limited; for example, developer builds of Pro<br/>Tools do not allow saving or exporting sessions.<br/></p>
<p>The easiest way to debug plug-ins within Pro Tools is to start up Pro Tools, open a session, attach your debugger,<br/>and then instantiate your plug-in. This order seems to work the best for most users. If you need to debug the initial<br/>host query of your plug-in at Pro Tools start, it is possible to launch Pro Tools from within your debugger. However,<br/>this method is sometimes known to cause problems with certain debuggers.<br/></p>
<p>AAX plug-in developers are also able to download pre-release and beta versions of upcoming Pro Tools releases.<br/>For now, these pre-release versions are not debuggable, but that is expected to change in the future as we work to<br/>make a unified debuggable pre-release installer available for upcoming Pro Tools versions.<br/></p>
<p>Both debuggable and pre-release versions are available for download as part of the AAX SDK Toolkit on the My<br/>Toolkits and Downloads page at avid.com. In order to use developer and pre-release builds, you will need<br/>special licences which you must request from devauth@avid.com.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>168 Module Documentation<br/></b></p>
<p><b>12.43.10.2 DigiShell<br/></b></p>
<p>DigiShell is a software tool that provides a general framework for running tests on Avid audio hardware. As a<br/>command-line application, DigiShell may be driven as part of a standard, automated test suite for maximum test<br/>coverage. The latest DigiShell tools may be downloaded as part of the AAX SDK Toolkit on the My Toolkits<br/>and Downloads page at avid.com.<br/></p>
<p>More information about DSH in general and about loading and testing plug-ins in DSH can be found in DSH Guide.<br/></p>
<p><b>12.43.10.3 DigiTrace<br/></b></p>
<p>All Avid AAX hosts provide tracing functionality based on Avid's DigiTrace tool. DigiTrace is a library that provides<br/>high-performance logging and tracing capabilities to Pro Tools and its components, including plug-ins. More infor-<br/>mation about DigiTrace can be found on Avid's audio developer website.<br/></p>
<p>To enable trace logging for AAX plug-ins, use the AAX_TRACE macro defined in AAX_Assert.h. A separate<br/>macro, AAX_ASSERT, is also available to signal run-time errors. These macros are both cross-platform and will<br/>function whether the algorithm is running on the TI or on the host.<br/></p>
<p>For more information about DigiTrace, see DigiTrace Guide.<br/></p>
<p><b>12.43.10.3.1 Tracing requirements </b>The AAX_ASSERT and AAX_TRACE macros are debug-only and will not<br/>provide tracing output from release builds of your plug-in. AAX_TRACE_RELEASE may be used for tracing in both<br/>debug and release configurations. These macros require that the DTF_AAXPLUGINS facility to your DigiTrace<br/>configuration file. You can toggle this facility to enable or disable AAX algorithm-level tracing. For details on setting<br/>up tracing on AAX TI plug-ins, please refer to the HDX DSP Guide.<br/></p>
<p><b>12.43.11 Troubleshooting common AAX plug-in failures<br/></b></p>
<p>Pro Tools presents a &quot;Move Unauthorized Plug-ins&quot; dialog after attempting to launch with my plug-ins installed, and<br/>the plug-ins do not appear in the Pro Tools insert menus<br/></p>
<p>&#8226; This error indicates that Pro Tools was not able to load the plug-in binary for some reason. The error indicates<br/>a copy protection failure since that is by far the most common reason for users to encounter this kind of error<br/>in released plug-ins, but any other error that prevents the plug-in DLL from loading in Pro Tools may also<br/>cause this error message.<br/>This error does not indicate a failure when checking the plug-in's digital signature. A digital signature failure<br/>would generate a different error message that would specifically mention the plug-in's signature.<br/>The DTF_AAXHOST DigiTrace facility provides additional information about AAX plug-in load errors.<br/>One common cause of DLL loading failures is a failure to dynamically link to other required libraries. In this<br/>case, the DTF_AAXHOST tracing will indicate something like the following:<br/></p>
<p><b>&#8211; </b>AAXH_CEffectFactory::ParseDLL - exception thrown(The specified module could not be found. (126) while loading &quot;MyPlugIn.aaxplugin&quot;)<br/></p>
<p>This exception indicates that some DLL upon which the plug-in depends is not present in the system. This is<br/>most commonly due to dynamic linking to CRT libs, but it could also be caused by any other DLL dependency.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.43 Pro Tools Guide 169<br/></b></p>
<p><b>12.43.12 Using DigiOptions<br/></b></p>
<p>DigiOptions provide a way to override the standard Pro Tools configuration. These options are designed to assist<br/>with testing and development of Pro Tools, and they are often useful during plug-in development as well.<br/></p>
<p>To configure DigiOptions, place a plain-text file named DigiOptionsFile.txt next to the Pro Tools application. On<br/>macOS, place this file next to the Pro Tools.app bundle and on Windows place it next to the Pro Tools executable.<br/></p>
<p>A red notice will appear in the Pro Tools splash screen and in the application About Box indicating when DigiOptions<br/>are enabled in the build.<br/></p>
<p>Figure 3: DigiOption activation notice in the Pro Tools splash screen.<br/></p>
<p><b>Note<br/></b>If suffixes are hidden on your OS then be careful that you do not accidentally give the file an incorrect name<br/>such as DigiOptionsFile.txt.txt.<br/></p>
<p><b>12.43.12.1 Useful DigiOptions<br/></b></p>
<p><b>Note<br/></b>Support for these options may vary from release to release<br/></p>
<p>&#8226; AlwaysRebuildCache 1<br/>This option forces Pro Tools to re-load all installed plug-ins each time the application is launched. This can be<br/>very useful during development, since some plug-in updates during development will not result in an updated<br/>plug-in binary or an updated modification date for the top-level .aaxplugin bundle.<br/><b>Note<br/></b></p>
<p>If you have changed your plug-in's ID values during development and if you encounter AAE error -20038<br/>when your plug-in is loaded then Pro Tools may be using a cache of the outdated plug-in ID. Use the<br/>AlwaysRebuildCache DigiOption or launch Pro Tools once without your plug-in installed to clear this<br/>state.<br/></p>
<p>&#8226; OutOfProcPlugInCache 0<br/>When combined with a reset of the plug-in cache for a particular plug-in, this option will ensure that the plug-in<br/>is loaded by the main Pro Tools process, not by a subprocess.<br/></p>
<p>&#8226; OutOfProcPlugInCache 1<br/>SecondsToWaitForOutOfProcPlugInCache 30<br/>When combined with a reset of the plug-in cache for a particular plug-in, these options will ensure that the<br/>plug-in is loaded by the subprocess, not by the main Pro Tools process.<br/></p>
<p>&#8226; NeverUnloadPlugInBundles &lt;int&gt;<br/>Enable plug-in bundle unloading. The default value for this option is 0. In order to test your plug-ins and make<br/>sure that they operate correctly this option must be set to 0.<br/></p>
<p>&#8226; LogInterruptDataEveryNSeconds &lt;int&gt;<br/>LogInterruptDataEveryNSeconds_HL &lt;int&gt;<br/>These options enable regular DigiTrace performance logging from the low-latency and high-latency real-time<br/>audio render threads in the Avid Audio Engine. For example, LogInterruptDataEveryNSeconds&#8592;&#8617;<br/>_HL 2 would trigger a performance log for the high-latency render thread every two seconds. For more<br/>information about performance logging in AAE see Real-time AAE performance logging with DigiTrace.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>170 Module Documentation<br/></b></p>
<p>&#8226; PauseDuringLaunchToAttachDebugger 1<br/></p>
<p>&#8226; DisplayHostPlugInLatency 1<br/>Display information about the plug-in's processing domain and dynamic processing status in the Pro Tools<br/>plug-in window header.<br/>Figure 4: DisplayHostPlugInLatency info in plug-in header.<br/></p>
<p>&#8226; TestGetCurveData &lt;0, 1, 2&gt;<br/>Display the plug-in's curve data as a plot in the Pro Tools plug-in window header. Possible values are:<br/></p>
<p>1. Off<br/>2. EQ curve<br/>3. Gain reduction curve<br/></p>
<p><b>Warning<br/></b>The implementations of this test curve and the actual curve data shown on Avid control surfaces are dif-<br/>ferent. In particular, the display in Pro Tools is updated regularly at idle time, whereas the curve on a con-<br/>trol surface is only updated when certain parameter changes occur (see PTSW-195316 / PT-218485).<br/>The graph point interpolation, range, and sample points are also not exactly equivalent to the values<br/>used on an actual control surface, so you should not expect the curve shown in the debug view in Pro<br/>Tools to exactly match what would appear to users. After performing early prototyping of your curve<br/>data using the TestGetCurveData DigiOption you are strongly encouraged to use either the S6 Sur-<br/>fulator software or the Pro Tools | Control app to test and refine the plug-in's curve data in a real-world<br/>environment.<br/></p>
<p>For more information about graph curves see EQ and Dynamics Curve Displays .<br/>Figure 5: TestGetCurveData EQ graph in plug-in header.<br/></p>
<p>&#8226; RenderMissingFilesAsBlank 1<br/>This option may be used to automatically render test tones into audio clips with missing source media. The<br/>test tones are rendered with different frequencies and magnitudes. This option can be useful when trou-<br/>bleshooting using a session file provided by an end user, since session-specific issues are rarely dependent<br/>on the source media, but may depend on there being some signal present in the session. This option requires<br/>that the Avid Signal Generator plug-in is installed.<br/></p>
<p>&#8226; 44100_Rate &lt;int&gt;<br/>48000_Rate &lt;int&gt;<br/>Set the new base sample rate for each set of sample rate multiples. Can be useful for simulating sample<br/>rate pull-up by up to +5% (e.g. 44100_Rate 45000 in DigiOptions.txt.) The 44100_Rate option affects<br/>44100, 88200, and 176400 Hz rates, while the 48000_Rate option affects 48000, 96000, and 192000 Hz<br/>rates.<br/></p>
<p>&#8226; EnablePlugInHotSwap 1<br/></p>
<p><b>Note<br/></b>This option is currently non-functional for AAX plug-ins Pro Tools. See PTSW-188653 / PT-218451<br/></p>
<p>This option will allow Pro Tools to recognize changes to your plug-in during run-time. This allows you to re-<br/>compile and load your updated plug-in without re-launching Pro Tools. The following conditions must be true<br/>in order to enable hot-swapping between versions of your plug-in:<br/></p>
<p><b>&#8211; </b>There cannot be any instances of the plug-in currently in Pro Tools.<br/><b>&#8211; </b>Both EnablePlugInHotSwap 1 and AlwaysRebuildCache 1 must be set.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.44 Media Composer Guide 171<br/></b></p>
<p>&#8226; WinDLLErrorMode &lt;int&gt;<br/>Set the Windows error mode during DLL loading and unloading. The value of this option will be set as the<br/>uMode for a call to the SetErrorMode Windows API during DLL loading and unloading.<br/>This option can be useful when debugging plug-in load errors on Windows, for example errors that cause a<br/>&quot;The following Plug-Ins failed to load because no valid authorization could be found&#8221; dialog to appear during<br/>Pro Tools launch.<br/></p>
<p>&#8226; DisableCMNAssert 1<br/>Disable assert dialogs in Pro Tools. Use this option if your Pro Tools debugging sessions are being interrupted<br/>or terminated due to assert failures in the app.<br/>Note that Pro Tools asserts may be triggered by your plug-ins; you should always investigate any assert<br/>that you see to determine whether it is being caused by a plug-in. If you need information about any Pro<br/>Tools asserts, post a question here on the AAX developer forums or write to us at avid.developer.&#8592;&#8617;<br/>services@avid.com and we will be happy to help.<br/></p>
<p>&#8226; TestPlugInDescriptions 0<br/>Use this DigiOption to toggle the plug-in description validation check in Pro Tools developer builds. Developer<br/>builds will check plug-in description information when the plug-in is loaded and will present a warning dialog<br/>if the check fails. See Describe Validation section in the Description callback page for more information.<br/></p>
<p>&#8226; RealTimeDenormalsAreZero &lt;int&gt;<br/>Use this DigiOption to toggle the default denormal handling policy of the AAE real-time processing threads.<br/>A value of 1 means that DAZ+FZ will be enabled for all AAX real-time processing threads unless explicitly<br/>changed using thread-specific primitives, while a value of 0 means that DAZ+FZ will be disabled unless<br/>explicitly changed.<br/>The default state of the DAZ+FZ flags for AAE real-time processing threads is turned on by default.<br/></p>
<p>&#8226; DigiTraceWindow 1<br/>Enable the Console window in Pro Tools which displays the application's DigiTrace output in a live stream.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools 2019.XX and higher. Also supported (and enabled by<br/>default) in Pro Tools developer builds beginning with Pro Tools 2019.6.<br/></p>
<p><b>12.43.13 Compatibility Notes<br/></b></p>
<p>See Host Support and Known Issues in Pro Tools for additional details regarding Pro Tools compatibility<br/></p>
<p>Collaboration diagram for Pro Tools Guide:<br/></p>
<p><b>12.44 Media Composer Guide<br/></b></p>
<p>Details about using AAX plug-ins in Media Composer.<br/></p>
<p><b>12.44.1 Contents<br/></b></p>
<p>&#8226; About this document<br/>&#8226; Processing modes<br/>&#8226; Compatibility requirements<br/>&#8226; AAX feature support in Media Composer<br/>&#8226; Additional Information<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>172 Module Documentation<br/></b></p>
<p><b>12.44.2 About this document<br/></b></p>
<p>This guide discusses specific details related to using AAX plug-ins with Media Composer, such as loading and<br/>initialization procedures, GUI hosting, and other application-specific features.<br/></p>
<p>For more information about the features, functionality, and use of Media Composer see the Media Composer user<br/>documentation.<br/></p>
<p><b>12.44.3 Processing modes<br/></b></p>
<p>Media Composer supports AAX plug-ins in two processing modes: AudioSuite and AAX Native<br/></p>
<p>&#8226; AudioSuite plug-ins perform non-real-time, random-access, file-based processing entirely on the host CPU.<br/></p>
<p>&#8226; AAX Native plug-ins perform real-time, linear, non-destructive processing entirely on the host CPU.<br/></p>
<p>AAX plug-in processing in Media Composer is managed by specific Tools. Each of these Tools can be accessed<br/>using the &quot;Tools&quot; menu in the Media Composer application.<br/></p>
<p><b>12.44.3.1 Non-real-time processing (AudioSuite)<br/></b></p>
<p>Use the AudioSuite Tool to perform AudioSuite processing in Media Composer. The AudioSuite Tool applies an<br/>effect to a clip in the timeline of the record monitor.<br/></p>
<p>Specific AudioSuite plug-ins appear in the Plug-In Selection menu in the AudioSuite window.<br/></p>
<p><b>Note<br/></b>Unlike Pro Tools, the effect to clip relationship is remembered along with the effect parameters used. Pa-<br/>rameters to the effects can be changed at a later time, and at any time the effect can be re-rendered with<br/>the saved effect parameters. Therefore it is very important for AudioSuite plug-ins to maintain compatibility<br/>between instances, versions, and systems in order to function properly in Media Composer workflows. See<br/>Preset management for more information.<br/></p>
<p>Media Composer supports two AudioSuite processing modes:<br/></p>
<p>&#8226; Apply a plug-in to a clip in the Timeline. This method creates a rendered effect.<br/></p>
<p>&#8226; Use the controls in the AudioSuite window to create a new master clip. This method lets you process more<br/>than one channel at a time and to create new media with a duration longer or shorter than the source media.<br/></p>
<p>By default, the AudioSuite window displays the controls for applying a plug-in to a clip in the Timeline. When you<br/>drag a master clip into the window, the window expands to display additional parameters for working with master<br/>clips.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.44 Media Composer Guide 173<br/></b></p>
<p><b>12.44.3.1.1 Applying an AudioSuite Plug-in to a Clip in the Timeline </b>The following illustration shows the<br/>default layout of the AudioSuite window:<br/></p>
<p>Figure 1: The AudioSuite window<br/></p>
<p>To apply an AudioSuite plug-in to a clip in the Timeline:<br/></p>
<p>1. Open the AudioSuite window by doing one of the following:<br/></p>
<p>&#8226; Select Tools &gt; AudioSuite<br/>&#8226; If an audio tool is already open, click the Effect Mode Selector menu and select AudioSuite<br/></p>
<p>2. Use the Track Selection Menu button to select the tracks that you want to modify.<br/></p>
<p>&#8226; When you select an item from this menu, the system selects or deselects the corresponding track in the<br/>Timeline<br/></p>
<p>&#8226; To select multiple tracks, press the Shift key while you select additional tracks from the Track Selection<br/>menu. Plus signs (+) mark the additional tracks and indicate that the effect is applied to more than one<br/>track.<br/></p>
<p>3. Click the Plug-In Selection menu, and select a plug-in<br/></p>
<p>4. Click the Activate Current Plug-In button. This opens a dialog box associated with the plug-in.<br/></p>
<p>From the AudioSuite dialog box, you may make any necessary adjustments to the plug-in and Preview the effect in<br/>real-time.<br/></p>
<p>&#8226; To save the effect, click OK<br/></p>
<p>&#8226; To close the dialog box without saving the effect, click Cancel<br/></p>
<p>&#8226; To save the effect as a template, drag the effect icon to a bin<br/></p>
<p><b>12.44.3.1.2 AudioSuite Master Clip Mode </b>Drag a Master Clip into the AudioSuite Tool to engage AudioSuite<br/>Master Clip Mode. This mode supports all AudioSuite effects, including those that change the width or length of the<br/>effected clip. A new Master Clip is generated for each AudioSuite processing pass applied in this mode.<br/></p>
<p>In Master Clip Mode, the AudioSuite window will be expanded to display additional controls. You can also click the<br/>Display/Hide Master Clip Controls button to display or hide the additional parameters.<br/></p>
<p>The following operations are available in Master Clip Mode:<br/></p>
<p>&#8226; Apply AudioSuite plug-ins to more than one track at the same time. For example, a plug-in might let you pro-<br/>cess two separate tracks as a stereo pair. This enables you to use plug-ins that perform linked compression,<br/>reverb, and other effects that allow multichannel input.<br/></p>
<p>&#8226; Create new media with a longer or shorter duration than the source media. This lets you use effects that<br/>perform time compression and expansion. For example, you can use a Time Compression Expansion plug-in<br/>to change the length of the audio file, or you can lengthen the file in order to add a reverb trail.<br/></p>
<p>&#8226; Apply one mono AudioSuite effect to multiple inputs of a master clip in a multiple-mono fashion.<br/></p>
<p>For more information about processing in Master Clip Mode, see the Media Composer user documentation.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>174 Module Documentation<br/></b></p>
<p><b>12.44.3.1.3 Restrictions on AudioSuite processing<br/></b></p>
<p>&#8226; Media Composer does not support width-changing AudioSuite effects except in Master Clip Mode. See<br/>Processing configurations for more information about supported stem formats in Media Composer.<br/></p>
<p>&#8226; AudioSuite effects that change the clip length should only be used in Master Clip Mode, because consolidated<br/>sequences will not consolidate the correct media length.<br/></p>
<p><b>12.44.3.2 Real-time processing<br/></b></p>
<p>Use the Audio Track Effect Tool to perform real-time processing in Media Composer. Audio Track Effects appear in<br/>the Audio tab of the Effect Palette, as well as in the menus of the Audio Track inserts in the Audio Mixer Window<br/>and the Timeline Track Control Panel.<br/></p>
<p>Real-time AAX processing in Media Composer is analogous to the track inserts feature in Pro Tools. For more<br/>information about track inserts in Pro Tools, see the Real-time processing section in the Pro Tools Guide.<br/></p>
<p><b>12.44.3.2.1 Creating and accessing real-time plug-in instances </b>To insert a plug-in effect on a track in Media<br/>Composer, select the track where you want to apply the effect, which insert location you want to use on the track,<br/>and the specific effect you want to add to your sequence.<br/></p>
<p>You can also insert a plug-in track effect by dragging an Audio Track Effect template from a bin to your sequence.<br/></p>
<p>To insert an Audio Track Effect plug-in from the Timeline Right-click the Record Track button or the Track Control<br/>panel for the track where you want to apply the insert and select AAX Effects [track number] &gt; Insert [a-e] &gt; [insert].<br/></p>
<p>To insert an Audio Track Effect plug-in using the insert button<br/></p>
<p>1. Click an Audio Effect insert button in the Track Control panel for the track where you want to apply the insert.<br/>This opens the Audio Track Effect tool.<br/></p>
<p>2. Click the Select Effect button, and select an Audio Track Effect plug-in effect. Figure 1: Select an insert in the<br/>Audio Track Effect Tool<br/></p>
<p>To insert an plug-in using the Effect Palette<br/></p>
<p>1. In the Project window, click the Effects tab. This opens the Effect Palette. Figure 2: The Effect Palette<br/></p>
<p>2. Click the Audio tab.<br/></p>
<p>3. Click an effect category, select the effect you want, and drag it to the segment or to the Audio Track Effect<br/>insert button where you want to apply the insert. This opens the Select Insert dialog box. Figure 3: The<br/>Select Insert dialog box<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.44 Media Composer Guide 175<br/></b></p>
<p><b>Note<br/></b>You can only insert mono effects on a mono track, stereo effects on a stereo track, and surround sound<br/>effects on a surround sound track.<br/></p>
<p>4. Do one of the following:<br/>&#8226; If you want to add a new insert, click an [Empty] insert button.<br/>&#8226; If you want to replace an existing insert, click the appropriate insert button.<br/></p>
<p>The plug-in effect is inserted in the track to which you dragged the effect icon.<br/></p>
<p>To edit an existing Audio Track Effect Plug-In After you insert an Audio Track Effect plug-in on an audio track, you<br/>can access the plug-in controls by using the Track Control panel or the Audio Track Effect tool.<br/></p>
<p>Figure 4: Audio Track Effect plug-in inserts in the Track Control panel Figure 5: Audio Track Effect tool: Select Track,<br/>Select Insert, and Select Effect buttons (left), Bypass button (center), and Save Effect button (right)<br/></p>
<p>When you select an insert button in the Track Control panel or an effect in the Audio Track Effect tool, the controls<br/>for the plug-in appear in the Audio Track Effect tool window.<br/></p>
<p>Figure 6: The Compressor/Limiter Dyn 3 plug-in window displayed in the Audio Track Effect tool dialog box<br/></p>
<p>You can also open the tool by selecting Tools &gt; Audio Track Effect Tool or right-clicking the Record Track button for<br/>the track where you want to edit an insert and selecting Audio Track Effect tool. You can use the buttons in the tool<br/>to select a specific insert to edit.<br/></p>
<p>To save changes to a plug-in's settings, do one of the following:<br/></p>
<p>&#8226; Click the Save Effect icon in the Audio Track Effect tool<br/>&#8226; Close the Audio Track Effect tool<br/></p>
<p><b>12.44.3.2.2 Using Audio Track Effect Templates </b>If you apply an Audio Track effect and make a set of adjust-<br/>ments to it, you can quickly recreate the same sound on other tracks in your sequence or project. You can save<br/>an Audio Track effect with its parameter settings to a bin as an effect template. You can then apply the template to<br/>other audio tracks at any time.<br/></p>
<p>You can apply an Audio Track effect template with all its parameters directly to an Audio Track Effect insert button in<br/>the Track Selection panel or to clips in the Timeline.<br/></p>
<p>To save an Audio Track Effect as a template Do one of the following:<br/></p>
<p>&#8226; Click the Save Effect button in the Audio Track Effect tool and drag it to a bin<br/>&#8226; Click an Audio Track Effect button and drag it to a bin<br/></p>
<p>A new track effect template appears in the bin, containing the parameter setting information for the effect. The new<br/>effect template is identified in the bin by an effect icon. By default, your Avid editing application names the template<br/>by the plug-in name.<br/></p>
<p>To apply an Audio Track Effect template to an audio track Do one of the following:<br/></p>
<p>&#8226; Drag the Audio Track Effect template from the bin to an insert button in the Track Selection panel<br/>&#8226; Drag the Audio Track Effect template from the bin to a segment on the track where you want to apply the<br/></p>
<p>effect. The Select Insert dialog box opens so you can select the insert where you want to apply the effect.<br/></p>
<p>This applies the effect to the track.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>176 Module Documentation<br/></b></p>
<p><b>12.44.4 Compatibility requirements<br/></b></p>
<p>Media Composer supports 64-bit AAX Native plug-ins beginning in Media Composer 8.1. There are no Media<br/>Composer versions that support 32-bit AAX plug-ins, and Media Composer does not currently support AAX DSP<br/>plug-ins.<br/></p>
<p>In addition to implementing the client-side AAX API for a supported platform, Media Composer AAX plug-ins must:<br/></p>
<p>1. Be installed to the AAX plug-ins directory<br/></p>
<p>2. Use a valid file name<br/></p>
<p><b>12.44.4.1 Install directories<br/></b></p>
<p>AAX plug-ins must be installed in the system's AAX Plug-Ins directory. See Building your plug-in installer for more<br/>information about creating a plug-in installer.<br/></p>
<p><b>Host Compatibility Notes </b>Some early versions of Media Composer 8 do not search the system plug-ins directory<br/>recursively. If your plug-ins are installed into a sub-directory beneath this main directory<br/>then they will not be loaded by the affected versions of Media Composer.<br/></p>
<p>Plug-ins that are uninstalled but still present on the system are placed into the &quot;Plug-Ins (Unused)&quot; directory, which<br/>is located next to the Plug-Ins directory.<br/></p>
<p>Media Composer will also search for a Plug-Ins directory next to the actual Media Composer application, and this<br/>directory will be used if present. This debug feature can be useful for testing specific plug-ins.<br/></p>
<p><b>12.44.4.2 Plug-in name and file structure<br/></b></p>
<p>In order to be recognized by AAE, all AAX plug-in bundles must use the &quot;.aaxplugin&quot; file name suffix. On macOS,<br/>the plug-in bundle must use this suffix while the binary itself does not require a suffix. On Windows, the plug-in<br/>binary (DLL) must use this suffix.<br/></p>
<p>The directory structure of an AAX plug-in bundle is also important. See .aaxplugin Directory Structure in the<br/>AAX Format Specification document for more information.<br/></p>
<p><b>12.44.5 AAX feature support in Media Composer<br/></b></p>
<p>Media Composer supports many of the same AAX features as Pro Tools. However, some features are not avail-<br/>able in Media Composer, and other features are managed differently between the two applications. This section<br/>describes how Media Composer handles various optional AAX features.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.44 Media Composer Guide 177<br/></b></p>
<p><b>12.44.5.1 Processing configurations<br/></b></p>
<p>Sample rates Media Composer operates at sample rates of 32000, 44100, 48000, 88200, 96000 Hz, as well as each<br/>rate's film pulldown version scaled by a ratio of 1000/1001: approximately 31968, 40959, 47952, 88111, 95904 Hz.<br/></p>
<p><b>Note<br/></b>The AAX API does not currently provide a selector for 32 kHz sample rate support<br/></p>
<p>Track formats Media Composer supports only four track formats:<br/></p>
<p>&#8226; Mono<br/></p>
<p>&#8226; Stereo (interleaved L/R)<br/></p>
<p>&#8226; 5.1 surround in Pro Tools order (L, C, R, Ls, Rs, Lfe)<br/></p>
<p>&#8226; 7.1 surround in Pro Tools order (L, C, R, Lss, Rss, Lsr, Lsr, Lfe)<br/></p>
<p>Effects will only see these track formats on input.<br/></p>
<p><b>Note<br/></b>Plug-ins that support width-changing configurations between supported and unsupported track formats are<br/>not compatible with Media Composer<br/></p>
<p>Channel ordering for plug-ins in Media Composer is identical to the channel ordering in Pro Tools. The channel<br/>ordering presentation to users may vary from the channel ordering that is used when sending audio buffers to Pro<br/>Tools; Media Composer re-orders channels to Pro Tools order prior to presenting the audio to the effect.<br/></p>
<p><b>12.44.5.2 Preset management<br/></b></p>
<p>Media Composer stores plug-in presets in several locations within the app. Presets may be stored and accessed<br/>through the following workflows:<br/></p>
<p>&#8226; Presets can be stored in Media Composer bins by dragging the pink effect icon from the top of the effect<br/>editor window into a bin window.<br/></p>
<p>&#8226; Track effect presets are stored with their tracks in the sequence<br/></p>
<p>&#8226; AudioSuite presets are stored with their audio clips in the sequence<br/></p>
<p>The storage of AudioSuite presets with clips in Media Composer is very different from Pro Tools. To ensure com-<br/>patibility with Media Composer, it is very important that any AudioSuite effect can be re-rendered from the source<br/>media at any time.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>178 Module Documentation<br/></b></p>
<p><b>12.44.5.2.1 Plug-in preset compatibility and persistance </b>It is always important to design AAX plug-in preset<br/>data in a way that will be compatible across different systems and at different points in time. This is particularly true<br/>when designing an AAX plug-in to be compatible with Media Composer.<br/></p>
<p>Media Composer sequences carrying presets can be exported as AAF, and these sequences may be moved freely<br/>between Media Composer systems on different operating systems and platforms. Therefore, it is important that<br/>plug-in preset data is not platform specific. A plug-in loaded in any given Media Composer system must be able to<br/>successfully read, parse, and apply preset information that was created on a different system.<br/></p>
<p>Presets also persist for a long time in sequences, so preset information should be formatted in a way that newer<br/>plug-ins can read older version's data, and older versions can read newer version's data.<br/></p>
<p>In addition, Media Composer 8.4 and higher can access factory presets and user-created presets interoperably with<br/>Pro Tools. A user can save a preset in one application, and access it in the other.<br/></p>
<p>These preset compatibility considerations also apply to plug-ins carried over from legacy plug-in formats such<br/>as TDM/RTAS. Media Composer 8.1 and higher (with 64-bit AAX support) will match plug-in IDs when loading<br/>sequence data saved with Media Composer 7 and below, which use older plug-in formats. The same system is<br/>used for matching plug-in IDs when moving presets between different versions of Pro Tools, and between Pro Tools<br/>and Media Composer: in all cases, a preset saved for a particular plug-in ID must be compatible with all other<br/>plug-ins that use that ID, regardless of the plug-in format.<br/></p>
<p><b>12.44.5.2.2 Plug-in preset data comparison </b>Media Composer's rendered AudioSuite effect feature relies on a<br/>comparison of plug-in settings chunk data. Unlike in Pro Tools, this operation uses direct data comparison rather<br/>than AAX_IEffectParameters::CompareActiveChunk(). Therefore, Media Composer compatibility and proper opera-<br/>tion of AudioSuite rendering in Media Composer depends on the plug-in having fully consistent AAX preset contents<br/>from one run to the next.<br/></p>
<p>Two specific areas where problems can occur are:<br/></p>
<p>&#8226; Uninitialized memory in the preset chunk data<br/></p>
<p>&#8226; Floating point values in the preset chunk data<br/></p>
<p>Both of these can result in differences between settings chunks representing the same plug-in state, which causes<br/>Media Composer to perpetually re-render the plug-in.<br/></p>
<p>The problem of uninitialized memory is obvious. Given a particular plug-in state, Media Composer expects that<br/>any retrieved settings chunk will contain matching data regardless of when the chunk is retrieved. When the chunk<br/>contains uninitialized data this data does not match between different retrieved chunks. The fix, of course, is to<br/>make sure the entire chunk is initialized, for example by setting the entire chunk to zeroes before filling in the data.<br/></p>
<p>The problem of floating point values is more subtle. Depending on the plug-in's parameter implementation, floating<br/>point values may be slightly different in the lowest-order bits when set onto the plug-in as part of an incoming chunk<br/>and when subsequently read out. When this occurs, Media Composer sees a mismatch in the chunk data, which<br/>causes the AudioSuite plug-in to unexpectedly be seen as requiring a new render.<br/></p>
<p>AAX plug-in developers will need to avoid both of these conditions in order to maintain compatibility with Media<br/>Composer's AudioSuite effect rendering model.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.44 Media Composer Guide 179<br/></b></p>
<p><b>12.44.5.3 Unsupported features<br/></b></p>
<p>The following AAX features are not supported by Media Composer. Plug-ins that require these features will not be<br/>compatible with Media Composer. If your plug-ins use these features for advanced functionality but not for basic<br/>operation then you should document this restriction for Media Composer users.<br/></p>
<p>&#8226; Advanced audio routing Media Composer has a simplified audio topology with only tracks and a single master<br/>fader. There are no side chains, no busses, and no submasters. As a result, Media Composer does not<br/>support extended routing options such as Sidechain Inputs or Auxiliary Output Stems<br/></p>
<p>&#8226; Transport interface Media Composer does not fully support the AAX_ITransport interface. In addition, early<br/>versions of Media Composer 8 that do not support this interface at all may incorrectly return AAX_SUCCESS<br/>to method calls on this interface. More recent versions of Media Composer will either provide valid information<br/>or return AAX_ERROR_UNIMPLEMENTED.<br/></p>
<p>&#8226; MIDI Media Composer does not support MIDI routing to and from plug-in instances, and no AAX MIDI features<br/>are supported by Media Composer.<br/></p>
<p>&#8226; External control surfaces Although Media Composer does support external control surfaces for some editing<br/>functions, it is not currently possible to control plug-in parameters using external control surface hardware in<br/>Media Composer.<br/></p>
<p><b>12.44.5.4 Additional feature support notes<br/></b></p>
<p>&#8226; AAX plug-in notification support varies between Media Composer and Pro Tools. Media Composer does not<br/>support the following notifications, and may not support additional notifications as well:<br/></p>
<p><b>&#8211; </b>AAX_eNotificationEvent_ASProcessingState<br/><b>&#8211; </b>AAX_eNotificationEvent_ASPreviewState.<br/><b>&#8211; </b>AAX_eNotificationEvent_SessionBeingOpened<br/></p>
<p>&#8226; Media Composer does not support AudioSuite rendering to a separate track (see AAX_eProperty_DestinationTrack)<br/></p>
<p><b>12.44.6 Additional Information<br/></b></p>
<p><b>12.44.6.1 Audio Engine features and behavior<br/></b></p>
<p>Media Composer shares the same audio engine as Pro Tools (AAE) and both applications share the same advanced<br/>audio processing features. However, some aspects of plug-in operation are different between the two apps.<br/></p>
<p>Here are some important notes regarding how Media Composer handles plug-in instances within the audio engine:<br/></p>
<p>&#8226; Media Composer only runs plug-ins when Media Composer is playing. Unlike Pro Tools, Plug-ins stop pro-<br/>cessing when Media Composer stops playing.<br/></p>
<p>&#8226; Media Composer buffer sizes are always 1024 samples, and execution is not strictly linked to real-time.<br/>Processing is generally between four and eight frames ahead of when the audio is heard.<br/></p>
<p>&#8226; Media Composer will render, mix down, and export real-time effects as fast as the processor will allow,<br/>typically much faster than real-time, so be careful of introducing real-time dependencies.<br/></p>
<p>&#8226; Media Composer has a background render capability, so you cannot expect the GUI to be available, or even<br/>be possible on the system performing the render.<br/></p>
<p>&#8226; Plug-ins are frequently disposed and re-created on their preset data. This happens with every edit that<br/>changes the number, length, or position of playable clips in the timeline.<br/></p>
<p>For more detailed information about how AAE handles plug-in loading and processing, see Audio Engine Behavior and Features<br/>in the Pro Tools Guide.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>180 Module Documentation<br/></b></p>
<p><b>12.44.6.2 Debugging AAX plug-ins in Media Composer<br/></b></p>
<p>Media Composer does not support attaching a debugger in order to debug plug-ins while they are loaded within the<br/>app. In addition, Avid does not currently provide debuggable &quot;developer build&quot; versions of Media Composer. You<br/>must therefore rely on logging information for debugging your plug-ins in Media Composer, or debug your plug-ins<br/>using other AAX hosts such as a Pro Tools development build or the DigiShell command-line environment.<br/></p>
<p>For more information about debugging in Pro Tools and DigiShell, see Debugging AAX plug-ins in the<br/>Pro Tools Guide.<br/></p>
<p>Collaboration diagram for Media Composer Guide:<br/></p>
<p><b>12.45 HDX DSP Guide<br/></b></p>
<p>How to write AAX plug-ins for Avid's TI DSP-based platforms.<br/></p>
<p><b>12.45.1 Contents<br/></b></p>
<p>&#8226; Overview of TI DSP Algorithms in AAX<br/></p>
<p>&#8226; Getting Started with HDX DSP<br/></p>
<p>&#8226; The HDX DSP Platform<br/></p>
<p>&#8226; Requirements for HDX DSP Plug-Ins<br/></p>
<p>&#8226; TI Development Tools<br/></p>
<p>&#8226; Common Issues with TI Development<br/></p>
<p>&#8226; TI Optimization Guide<br/></p>
<p>&#8226; Error Codes<br/></p>
<p><b>12.45.2 Overview of TI DSP Algorithms in AAX<br/></b></p>
<p>Avid's hardware-accelerated audio systems allow AAX plug-ins to offload their real-time processing tasks to a dedi-<br/>cated processor, guaranteeing reliable performance at ultra-low latency. Avid's TI DSP-based products utilize Texas<br/>Instruments DSP chips to host plug-ins in a managed shell environment.<br/></p>
<p>The AAX host handles all system-level communications and resources on the DSP and provides a consistent API<br/>to manage communication between the plug-in's real-time algorithm and its other components. This design allows<br/>AAX plug-ins to use the same communication methods whether they are running natively, on a TI-based accelerated<br/>system, or in some other distributed environment.<br/></p>
<p>Each AAX plug-in contains a real-time algorithm callback. For TI DSP-based platforms, this callback is compiled<br/>into a relocatable ELF DLL. This library is loaded onto the appropriate DSP by the host, and may share the DSP<br/>with other plug-ins if the host determines that the required system resources are available. A real-time execution<br/>environment called the TI Shell is also loaded onto each DSP. The TI Shell manages the DSP's memory and<br/>interrupts and guarantees reliable real-time performance even at single sample operation.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 181<br/></b></p>
<p><b>12.45.3 Getting Started with HDX DSP<br/></b></p>
<p>This section provides a quick overview of what you will need for creating an AAX DSP plug-in to run on Avid's<br/>TI-based HDX DSP platforms.<br/></p>
<p>&#8226; Plug-in structure<br/>The algorithm component for an AAX DSP plug-in is compiled into a binary that runs on the TI DSP. Because<br/>this algorithm callback runs on a separate device than the rest of the plug-in, the algorithm must be separated<br/>from the plug-in's other components and no pointers may be shared between the two. All memory used by<br/>the algorithm must be set up via fields in the algorithm's context structure, and the AAX packet system must<br/>be used for transmitting coefficients from the plug-in data model to the algorithm.<br/>For more information about the structure of an AAX plug-in algorithm and features for communicating with the<br/>algorithm, see Real-time algorithm callback .<br/></p>
<p>&#8226; Development Environment<br/>To compile your plug-in's AAX DSP binary you will need to run TI's free Code Composer Studio (CCS) IDE<br/>on a Windows system or VM.<br/>The latest Code Composer Studio versions no longer come bundled with compilation tools compatible with<br/>C6727 DSPs, so you must use download download and install version 7.x from https://www.ti.&#8592;&#8617;<br/>com/tool/download/C6000-CGT/7.4.24.<br/>To get Code Composer Studio version 12, visit https://www.ti.com/tool/ccstudio and navi-<br/>gate to Downloads &gt; View all versions<br/>For additional steps to set up Code Composer Studio see TI Development Tools<br/></p>
<p>&#8226; Language support<br/>The C6727 compiler for AAX DSP plug-ins supports C and C++ up to C++98. In particular, note that no<br/>C++11 or later language support is available. For more specific details see C++ standard support .<br/></p>
<p><b>12.45.4 The HDX DSP Platform<br/></b></p>
<p>HDX DSP is Avid's core mixer and plug-in accelerator platform. Avid's HDX and Pro Tools | Carbon systems both<br/>use the HDX DSP platform, with multiple TI C6727 DSPs each clocked at 350 MHz. These DSPs utilize a 32-bit<br/>floating-point architecture, with the option to perform 64-bit double-precision operations at some performance cost.<br/>Each HDX card includes 18 DSPs and is connected to the host system over a high bandwidth PCIe connection,<br/>while each Pro Tools | Carbon system includes 8 DSPs and is connected to the host system over a Gigabit Ethernet<br/>connection.<br/></p>
<p><b>12.45.4.1 DSP characteristics: instruction processing<br/></b></p>
<p>The C6727 DSP utilizes a VLIW architecture and contains dual data paths. Each data path includes four indepen-<br/>dent functional units, so the DSP can accommodate up to 8 parallel instructions per cycle. To take advantage of<br/>this architecture, the TI compiler relies heavily on instruction pipelining for optimization.<br/></p>
<p><b>12.45.4.2 DSP characteristics: audio buffers<br/></b></p>
<p>In order to realize the maximum possible performance benefit from this architecture, the algorithm routine for a<br/>single HDX DSP plug-in is always called with the same buffer size. By guaranteeing that each algorithm will be<br/>called with a consistent buffer size, the TI compiler is able to properly account for any possible iterative instruction<br/>pipelining, resulting in large performance gains.<br/>HDX DSP uses a four-sample processing quantum by default for plug-in instances. Plug-ins that require additional<br/>processing time per callback, e.g. to mitigate the overhead cost of the chip's DMA facilities, may optionally request<br/>a 16, 32, or 64-sample quantum. Note that at higher block sizes, the number of potential I/O channels available to<br/>plug-ins on a chip will be reduced.<br/></p>
<p><b>Host Compatibility Notes </b>32 and 64-sample quantum is available in Pro Tools 10.2 and higher<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>182 Module Documentation<br/></b></p>
<p><b>12.45.4.3 DSP characteristics: memory<br/></b></p>
<p>Each DSP on the HDX DSP platform includes 16 MB of external RAM and 256 kB of internal RAM. The DSP has<br/>the ability to execute code from either internal or external RAM, though the real-time performance cost of external<br/>RAM accesses is significant. The chip's internal RAM is addressable at the core clock rate.<br/></p>
<p>Each DSP also has a program cache of 32 kB. Plug-in code is loaded into this cache from internal memory, so for<br/>best performance your plug-in should not use more than 32 kB for its program code. You can look at the CCS-<br/>generated .map file to find your plug-in's program code size.<br/></p>
<p><b>12.45.4.3.1 SDRAM performance </b>Asynchronous access to data in the C6727's SDRAM is very slow, requiring<br/>50 cycles/word to read and 15 cycles/word to write. This is primarily due to clock domain bridging, lack of data<br/>caching, and the fact that data from the core is given a low priority in order to avoid stalling real-time DMA transfers.<br/></p>
<p><b>12.45.4.3.2 Executing program code from external memory </b>The TI C6727 supports executing program code<br/>from external memory. When executing from uncached external memory, expect cycle counts to increase by a<br/>factor of 4x to 5x compared with the equivalent internal-memory code. Assuming that no cache thrashing occurs,<br/>subsequent calls will be cached and thus the program's location in either external or internal memory will produce<br/>similar cycle counts.<br/></p>
<p><b>Note<br/></b>The CCSv4 Profiler contains a bug that produces incorrect cycle counts for cached external-memory program<br/>code. Therefore, when gathering cycle count data for a plug-in that stores its program data in external memory,<br/>an RTI-based timing method should be used.<br/></p>
<p><b>12.45.4.4 System characteristics: DSP/host data transfers<br/></b></p>
<p>Plug-ins loaded onto the HDX DSP platform may transfer arbitrarily large data blocks between the DSP and the<br/>host, within the limits of available DSP memory and system bandwidth.<br/></p>
<p><b>12.45.4.4.1 DSP/host bandwidth </b>Neither AAX nor the HDX DSP platform include any explicit plug-in bandwidth<br/>limiting constraints. If a plug-in's data transfer requests bump up against the physical bandwidth limit for the system<br/>then this will delay the blocking data transfer request on the host, as the transfer will be held off for higher-priority<br/>operations on the DSP, and may also delay automation data from reaching other plug-ins on the affected DSPs in<br/>the same group.<br/></p>
<p>The recommended upper limit for DSP/host data transfer requests in an individual plug-in when running on an HDX<br/>PCIe card is 10 MB/s, divided by the maximum number of plug-in instances that will run on a single chip. On the<br/>HDX card, DSPs are wired to the FPGA crossbar in groups of three, with a data bandwidth of approximately 67 MB/s<br/>for each group. The overall system bandwidth for each DSP is therefore approximately 20 MB/s. This bandwidth is<br/>shared by all data reads and writes, including custom data transfer requests as well as plug-in and mixer automation<br/>and metering data.<br/></p>
<p>This limit is significantly lower on Pro Tools | Carbon. Carbon uses a single group for all eight DSPs, so the overall<br/>system bandwidth for each DSP is approximately 8 MB/s. In addition, data transfers between Carbon and the host<br/>system must be executed over a Gigabit Ethernet connection with up to 75% of its bandwidth already reserved<br/>for AVB audio data. This leaves 250 Mb/s for all other command traffic. If your plug-in utilizes frequent or large<br/>DSP/host data transfers then be sure to test it on Pro Tools | Carbon to verify whether it is compatible.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 183<br/></b></p>
<p><b>12.45.4.4.2 DSP/host data transfer characteristics </b>The minimum data transfer size for all host-to-DSP com-<br/>munications for HDX PCIe cards is 128 bytes. This limit applies to all host-to-DSP data transfers, including data<br/>sent to buffered ports, unbuffered ports, and private data blocks (via the AAX Direct Data interface.)<br/></p>
<p>Since each transfer has a minimum size of 128 bytes, the use of many small packets does not increase transfer<br/>efficiency or save system bandwidth. Quite the opposite: updating a single 64-byte packet would require less<br/>bandwidth than updating two 4-byte packets in an HDX PCIe system, since the former would require only one<br/>128-byte transfer while the latter will require two.<br/></p>
<p>On Pro Tools | Carbon there is no minimum data transfer size. That said, for best performance on Carbon it is still<br/>recommended to minimize the number of data packets that are sent.<br/></p>
<p><b>12.45.4.5 TI Shell characteristics: Memory allocation<br/></b></p>
<p><b>12.45.4.5.1 Memory resource availability </b>The TI Shell code that is loaded onto each DSP uses approximately<br/>56 kB of internal memory, leaving 200 kB of internal memory per DSP. This memory is shared between the plug-<br/>ins on the chip and holds the plug-ins' code and data, per-instance blocks declared in Describe(), and instance<br/>overhead.<br/></p>
<p>As a general guideline, plug-in instances should not use more than 200 / n kB of internal memory, where n is<br/>the number of instances of your plug-in that will run on a single chip based on its cycle count requirements. If<br/>each plug-in instance on the chip requires more internal memory than this then the plug-in may need to declare an<br/>explicit number of instances that can run per chip based on this memory usage rather than declaring its cycle count<br/>utilization.<br/></p>
<p><b>12.45.4.5.2 Shared and per-instance memory allocation </b>When a plug-in instance is created on a DSP, its<br/>program code is loaded onto that DSP. This copy of the program code is then re-used for all subsequent instances<br/>of the effect that are loaded onto the DSP. Static and global data are also shared between all instances of an effect<br/>on the DSP. Other allocations, such as coefficient and private data blocks, are per-instance.<br/></p>
<p><b>Host Compatibility Notes </b>Beginning in Pro Tools 11, AAX DSP algorithms also support optional temporary<br/>data spaces that can be described in the Describe module and are shared among<br/>all instances on a DSP. This is an alternative to declaring large data blocks on the<br/>stack for better memory management and to prevent stack overflows. Please refer to<br/>AAX_IComponentDescriptor::AddTemporaryData() for usage instructions.<br/></p>
<p><b>12.45.4.5.3 Placing data into external memory </b>An AAX plug-in may optionally request that its private data or<br/>program code be placed into external memory. Because standard access calls to the DSP's SDRAM are very slow,<br/>it is strongly recommended that all of a plug-in's real-time data be placed in internal RAM, and the TI Shell will load<br/>a plug-in's program code and all private plug-in data blocks into internal memory by default.<br/></p>
<p>Requesting more than 256 kB of data in internal memory for plug-in data plus the memory required by the TI<br/>Shell will lead to undefined behavior, so it is important to explicitly request external memory for plug-in data when<br/>appropriate.<br/></p>
<p>For private data blocks that should be loaded into external memory, use the AAX_ePrivateDataOptions_External<br/>flag when calling AAX_IComponentDescriptor::AddPrivateData() . This flag will be ignored by the host, so Native<br/>AAX plug-ins will have the same functionality with or without this property.<br/></p>
<p>To load program code, static data, or global variables into external memory, use the TI SECTION pragmas. For<br/>example, #pragma CODE_SECTION_(&quot;.extmem&quot;) can be used before function definitions that are either<br/>initialization code, or infrequently used background code. For static variables, use #pragma DATA_SECTION&#8592;&#8617;<br/>_(&quot;.extmemdata&quot;) before each variable definition.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>184 Module Documentation<br/></b></p>
<p><b>12.45.4.5.4 DMA support </b>Because of the slower access time of external RAM, you should consider using a<br/>DMA transfer for recurring transfers, and possibly even for larger one-time transfers. This is of particular relevance<br/>for data reads, which must traverse the various clock domains and priority switches twice (address send, and then<br/>data return.)<br/></p>
<p>The TI Shell supports three DMA modes: Scatter (for transfers from internal to external memory), Gather (for<br/>transfers from external to internal memory), and Burst (contiguous block copies). The Scatter mode can accomplish<br/>transfer speeds of up to 2.1 DSP cycles/byte transferred, while the Gather mode can accomplish 2.7 cycles/byte<br/>transferred.<br/></p>
<p>The Scatter and Gather DMA facilities use a linear buffer for internal memory and a FIFO for external memory. It<br/>is possible to transfer to or from multiple offsets within the external memory FIFO using an offset table, which can<br/>contain up to 65,536 (2&#8743;16) entries. The offset (burst) length may be 4, 8, 16, 32, or 64 bytes long.<br/></p>
<p>The TI Shell also supports a Burst DMA mode which implements linear data reads or writes.<br/></p>
<p>For more information on DMA support and for example code, see \ExamplePlugIns\DemoGain_DMA in the<br/>SDK.<br/></p>
<p><b>12.45.4.6 TI Shell characteristics: Data packet services<br/></b></p>
<p>In addition to supporting direct transfers of arbitrary data via DMA, the TI Shell also supports a packetized data<br/>delivery mechanism for host-to-DSP data transfers. Packet delivery ports may be either unbuffered or buffered, and<br/>are described using the AAX_EDataInPortType parameter in AAX_VComponentDescriptor::AddDataInPort().<br/></p>
<p><b>12.45.4.6.1 Unbuffered ports </b>Unbuffered ports use a straightforward implementation that delivers posted pack-<br/>ets to the algorithm as soon as possible. In an unbuffered port, newer packets will always override older packets.<br/>Therefore, an algorithm may not receive every packet that was posted to an unbuffered port, but it will always receive<br/>the most up-to-date information possible.<br/></p>
<p>Unbuffered ports deliver their data without blocking or synchronizing with the algorithm's execution. Although bus<br/>arbitration guarantees that a read from the algorithm callback will not occur in the middle of a write from the host, it<br/>is important to note that the data in an unbuffered port may change during algorithm execution.<br/></p>
<p><b>12.45.4.6.2 Buffered ports </b>Buffered data ports store incoming packets in a host-managed queue. This queue<br/>acts as a buffer and provides the host with more flexibility in how it delivers packets. A key feature of buffered data<br/>ports is that new data will never be delivered to these ports during algorithm execution.<br/></p>
<p>The behavior of buffered data ports varies depending on the host platform. In HDX DSP plug-ins, Buffered data<br/>ports use a FIFO to queue data packets as they are posted. New packets are dequeued and delivered to the<br/>algorithm individually, with the next packet arriving before each algorithm render callback.<br/></p>
<p><b>12.45.4.6.3 Data port overhead and restrictions </b>Each HDX DSP supports a maximum of 164 buffered data<br/>ports, which matches the maximum I/O limit for each DSP. System overhead costs associated with using the on-chip<br/>packet services are as follows:<br/></p>
<p><b>Memory Overhead<br/></b></p>
<p>&#8226; The memory overhead for an unbuffered data port is simply the size of the data packet.<br/></p>
<p>&#8226; This DSP memory overhead for a buffered data port is two times the size of the data packet. A large (&gt;100-<br/>element) packet queue is also allocated on the host.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 185<br/></b></p>
<p><b>CPU overhead </b>Unbuffered ports do not incur any additional CPU overhead.<br/></p>
<p>Individual buffered ports incur non-trivial CPU overhead. For example, in Pro Tools 10.2 each buffered port requires<br/>5 cycles of overhead per render callback. This overhead can quickly add up in &quot;small&quot; plug-ins that contain many<br/>buffered data ports. Therefore, we strongly recommend that plug-ins use consolidated coefficient packets when<br/>possible in order to minimize this overhead. This optimization can result in large performance gains for callbacks<br/>that require 1000 or fewer cycles to operate.<br/></p>
<p>The trade-off of this optimization is that more work ends up being done on the host and more data must be transmit-<br/>ted to the algorithm, since the entire coefficient packet must be re-calculated and re-sent every time any of its input<br/>parameters change. This is usually beneficial trade-off to make, especially given the 128-Byte per-transfer minimum<br/>for HDX PCIe cards discussed above. However, care must be taken in extreme cases such as when packet delivery<br/>threatens to bump up against the maximum recommended bandwidth for host/DSP data transfers, especially on<br/>Pro Tools | Carbon.<br/></p>
<p><b>12.45.4.7 TI Shell characteristics: Instance allocation<br/></b></p>
<p><b>12.45.4.7.1 Multi-shell packing </b>With a few exceptions, AAX DSP plug-ins will share DSPs with other plug-ins.<br/>This occurs transparently to the plug-in due to the fact that all system resource management is handled by the TI<br/>Shell.<br/></p>
<p>When a new plug-in instance is created, the TI Shell and AAX host will attempt to intelligently allocate it to a DSP<br/>based on both memory and CPU resource requirements. If one plug-in on the chip requires a large amount of<br/>memory and very few processing cycles, it may be packed with another plug-in that does not require much memory<br/>but that is very CPU intensive.<br/></p>
<p>Each DSP chip runs audio callbacks at a single buffer size, so plug-ins that run at different buffer sizes will not be<br/>loaded onto the same DSP chip. For example, if a plug-in processes at 16 sample buffers then it will only share<br/>a chip with other plug-ins that process at 16 sample buffers. An AAX DSP plug-in's buffer size is defined by its<br/>AAX_eProperty_DSP_AudioBufferLength property. Most plug-ins use the default of 4 sample buffers, and that is<br/>the value that will maximize chip sharing.<br/></p>
<p>Certain plug-ins cannot share a DSP with other plug-ins:<br/></p>
<p>&#8226; Plug-ins that use DMA<br/></p>
<p>&#8226; Plug-ins that register for a background processing callback<br/></p>
<p>&#8226; Plug-ins that register a maximum number of instances per chip using AAX_eProperty_TI_MaxInstancesPerChip<br/></p>
<p>These plug-ins will receive dedicated DSPs to which only additional instances of the same plug-in type will be<br/>added.<br/></p>
<p>The TI shell also supports a processor affinity property, which indicates that a DSP ProcessProc should be prefer-<br/>entially loaded onto the same DSP as other instances from the same DLL binary. This is a requirement for some<br/>designs that must share global data between different processing configurations.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>186 Module Documentation<br/></b></p>
<p><b>12.45.4.7.2 DSP Shuffles </b>A DSP shuffle will occur in Pro Tools when the engine must re-allocate DSP resources<br/>in order to make more processing power available. A shuffle will force the re-instantiation of the plug-in's DSP<br/>algorithm component, potentially on a new chip, while leaving the plug-in's host objects intact. During a shuffle, the<br/>engine will perform the following steps:<br/></p>
<p>1. Disconnect audio from an effect<br/></p>
<p>2. Call instance initialization with the removing instance flag on the old location<br/></p>
<p>3. Repeat for all instances of all DSP Effects in the system<br/></p>
<p>4. Load the effect in the new location<br/></p>
<p>5. Re-send the last packets to all data-in ports<br/></p>
<p>6. Call private data init for any private data<br/></p>
<p>7. Call instance init with the 'adding instance' flag, in the new location<br/></p>
<p>8. Begin audio processing<br/></p>
<p>9. Reconnect audio<br/></p>
<p>10. Repeat the instantiation and connection process for all instances of all DSP Effects in the system<br/></p>
<p>Note that the system may perform some audio processing with each new instance before all of the Effect instances<br/>in the system have been re-instantiated.<br/></p>
<p><b>12.45.4.8 Additional TI Shell services<br/></b></p>
<p><b>12.45.4.8.1 Background processing </b>AAX plug-ins may request idle time from the main TI Shell thread. This<br/>results in a true idle context callback which can be used for non-critical background processing tasks on the DSP.<br/>This facility restricts the DSP to only allocate plug-in instances of the same type.<br/></p>
<p>A plug-in's background processing callback is not provided with a reference to the plug-in's data structures and must<br/>therefore access plug-in data via global variables. The background process will be interrupted by system events<br/>and the audio render callback. For more information and an example on how to create a plug-in that relies on<br/>background processing, see \ExamplePlugins\DemoGain_Background in the SDK.<br/></p>
<p><b>12.45.5 Requirements for HDX DSP Plug-Ins<br/></b></p>
<p><b>12.45.5.1 Plug-in description<br/></b></p>
<p>To support HDX DSP platforms, a plug-in must add a TI ProcessProc (real-time processing entrypoint) for each of<br/>its algorithms. This is done via a call to AAX_IComponentDescriptor::AddProcessProc_TI(), which is parametrized<br/>with the names of both the algorithm's TI DLL and of its exported entrypoint.<br/></p>
<p>At minimum, the TI ProcessProc requires the following AAX Properties:<br/></p>
<p>&#8226; A TI plug-in ID: AAX_eProperty_PlugInID_TI<br/></p>
<p>&#8226; The audio buffer size that will be used by the ProcessProc: AAX_eProperty_DSP_AudioBufferLength, set<br/>with a value from AAX_EAudioBufferLengthDSP<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 187<br/></b></p>
<p><b>12.45.5.2 Performance measurement and reporting<br/></b></p>
<p>In order to determine each algorithm's resource requirements, the host collects cycle count information from the<br/>plug-in via the plug-in's Describe callback. Each plug-in Effect is responsible for correctly reporting its algorithms'<br/>cycle counts for each accelerated platform that it supports. For plug-ins that use DMA or background threads, a<br/>maximum per-chip instance count is also required.<br/></p>
<p><b>Note<br/></b>All reported values must represent the algorithm's worst case performance.<br/></p>
<p>Each of these values are reported as properties of a given algorithm ProcessProc and are provided by the plug-in<br/>via AAX_IComponentDescriptor::AddProcessProc_TI(). If an effect does not report its cycle count usage then it will<br/>be limited to a single instance per TI chip. This can be useful during development, but is not a supported mode for<br/>general use; all shipped plug-ins must correctly report their cycle requirements.<br/></p>
<p>The DigiShell utility can be used to accurately measure plug-in cycle count requirements. For more information<br/>about DigiShell, see DSH Guide.<br/></p>
<p><b>12.45.5.2.1 Shared vs. per-instance cycles </b>Because a single call into a plug-in is used to process multiple<br/>instances of that effect on that chip, two cycle count properties must be reported for each TI algorithm:<br/></p>
<p>1. AAX_eProperty_TI_SharedCycleCount This property describes the algorithm's one-time processing over-<br/>head that doesn't change as instances are added to a chip.<br/></p>
<p>2. AAX_eProperty_TI_InstanceCycleCount This property describes the additional cycle counts that each in-<br/>stance adds to the base shared overhead.<br/></p>
<p>Many plug-ins exhibit different performance characteristics for both of these metrics depending on the plug-in's<br/>state. When reporting a plug-in's shared and per-instance cycle count requirements it is important to ensure that<br/>the reported values are the maximum possible requirements of the algorithm.<br/></p>
<p>Often a plug-in will experience its worst-case per-instance processing load in one configuration and its worst-case<br/>shared processing load in another configuration. In this situation, the plug-in's reported cycle count requirements<br/>should reflect the state in which the sum of the two metrics is highest.<br/></p>
<p>It's a common practice to not describe AAX_eProperty_TI_InstanceCycleCount and AAX_eProperty_TI_SharedCycleCount<br/>for the plug-ins during development and debugging process of the DSP plug-ins. This is acceptable, although in<br/>this case the one instance of such a plug-in will require the whole chip. In AAX SDK example plug-ins this is imple-<br/>mented using AAX_TI_BINARY_IN_DEVELOPMENT macros. If defined, it turns off the cycle count properties<br/>for the plug-in.<br/></p>
<p><b>12.45.5.2.2 Measuring shared cycles </b>Measuring shared cycle counts requires instantiating multiple instances<br/>of an effect and observing how the processing time changes as instances are added. The shared and instance<br/>cycle counts are then calculated by performing a linear regression on the number of uncached cycle counts as the<br/>number of plug-in instances on the chip increases.<br/></p>
<p>Note that these values will differ between debug and release builds of an algorithm, so a plug-in's describe function<br/>should report the correct cycle count values based on the relevant build configuration.<br/></p>
<p>DigiShell includes the ability to measure shared cycle counts using the DAE.cyclesshared command. For<br/>more information about performance profiling using DigiShell, see Cycle count performance test.<br/></p>
<p><b>Note<br/></b>HDX DSP requires reporting of an algorithm's worst-case cycle counts.<br/>Because HDX PCIe and Pro Tools | Carbon use the same HDX DSP platform, either product may be used to<br/>take plug-in cycle count measurements.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>188 Module Documentation<br/></b></p>
<p><b>12.45.5.2.3 DMA and background thread performance reporting </b>For algorithms that use DMA or<br/>background thread facilities, the maximum number of algorithm instances that will fit on a chip is difficult to<br/>predict from cycle counts alone. Due to the asynchronous behavior and limited capacity of the DMA system, the<br/>DMA system may begin to miss its deadlines before the CPU is fully loaded. In addition, due to differences in<br/>background processing requirements between algorithms, an effect's background process may begin to miss its<br/>deadlines and be starved before the interrupt-time audio processing is at capacity. Plug-ins that use these facilities<br/>must therefore report the maximum number of instances that will run reliably at a given sample rate, in addition to<br/>reporting their shared and per-instance cycle counts as above.<br/></p>
<p>Some other plug-ins may also wish to report the maximum number of instances that will run reliably at each sample<br/>rate. For example, plug-ins that use a lot of host/DSP data bandwidth may need to limit the number of instances per<br/>DSP chip in order to run successfully on Pro Tools | Carbon.<br/></p>
<p>Maximum reliable instance counts are reported using an additional property, AAX_eProperty_TI_MaxInstancesPerChip.<br/>A plug-in should register separate components for the following three sample rate ranges in order to register distinct<br/>values for this property:<br/></p>
<p>1. Sample rates from 42kHz to 50kHz<br/>2. Sample rates from 84kHz to 100kHz<br/>3. Sample rates from 168kHz to 200kHz<br/></p>
<p>Notes regarding DMA and background thread performance reporting:<br/></p>
<p>&#8226; Because the number of instances will decrease as sample rate increases, the plug-in must be tested at the<br/>highest available pulled-up sample rate (i.e. 50kHz instead of 48kHz) in each of these three ranges.<br/></p>
<p>&#8226; On the HDX platform, effects that use DMA or background threads will not be mixed with effects of other types<br/>on a given chip.<br/></p>
<p>&#8226; The maximum number of instances per DSP cannot be measured via DSH in these cases, so careful listening<br/>tests must be manually performed in order to determine whether a certain number of instances of a DMA or<br/>background-enabled plug-in actually operate correctly on a DSP.<br/></p>
<p><b>12.45.5.2.4 Dynamic resource usage </b>All resources used by an AAX DSP plug-in algorithm are considered<br/>static. Plug-ins may not dynamically change the amount of memory or DSP cycles that are allocated to them after<br/>these metrics are provided in Describe.<br/></p>
<p>The ability to dynamically change DSP cycle count requirements at run time is provided in the AAX SDK but is not<br/>currently supported by any host.<br/></p>
<p><b>12.45.5.3 Plug-in compilation and packaging<br/></b></p>
<p><b>12.45.5.3.1 Exported symbols </b>Each HDX DSP algorithm (ELF DLL) may contain multiple entrypoints. A single<br/>DLL may be used for all of your plug-in's entrypoints and program code, or you may divide your plug-in's entrypoints<br/>and program code between multiple DLLs.<br/></p>
<p>Your plug-in must export one &quot;C&quot;-style callback for each algorithm ProcessProc that your plug-in registers. This<br/>entrypoint must conform to the standard AAX real-time algorithm callback prototype:<br/># include &quot;elf_linkage_aax_ccsv5.h&quot; // Includes required TI_EXPORT definition<br/>extern &quot;C&quot;<br/>TI_EXPORT<br/>void<br/>MyEffect_AlgorithmProcessFunction(<br/></p>
<p>SMyEffect_Alg_Context * const inInstancesBegin [],<br/>const void * inInstancesEnd)<br/></p>
<p>Listing 1.1: The standard AAX real-time algorithm callback prototype<br/></p>
<p>See Settings for exported symbols if you are running into problems linking your AAX DSP binary.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 189<br/></b></p>
<p><b>12.45.5.3.2 Packaging </b>The ELF DLLs for an AAX DSP plug-in must be placed in the ./Content/Resources di-<br/>rectory within the plug-in bundle.<br/></p>
<p><b>12.45.6 TI Development Tools<br/></b></p>
<p>Development for TI algorithms is primarily performed in TI's Code Composer Studio. Code Composer Studio (CCS)<br/>is a full-featured, Eclipse-based IDE providing JTAG hardware debugger support, a hardware simulator, and a<br/>suite of profiling tools. Most importantly, CCS includes an excellent C compiler that is capable of providing highly<br/>optimized DSP instructions without too much tuning.<br/></p>
<p><b>Note<br/></b>As of this writing, Code Composer Studio for Mac does not support the C6000 series processor. CCS for<br/>Windows is required for AAX DSP plug-in development. See MacOS Host Support for CCS on the<br/>Texas Instruments wiki for current compatibility information.<br/></p>
<p><b>12.45.6.1 Code Composer Studio<br/></b></p>
<p>The AAX SDK supports Code Composer Studio versions 4 (&quot;CCSv4&quot;) and higher (&quot;CCSv5&quot;, etc.), with hardware<br/>debugging support beginning in version 4.2. As of the writing of this documentation, CCS versions 4, 5, 7 and 12<br/>have been tested by Avid.<br/></p>
<p><b>Note<br/></b>This documentation was originally written for CCSv4 and was later updated with instructions for updating<br/>from CCSv4 to CCSv5. Versions 5 and higher use a different project file format from version 4; when this<br/>documentation describes changes required for version 5 then these changes will also be required by other<br/>later versions which use this new project format.<br/></p>
<p><b>12.45.6.1.1 Installation<br/></b></p>
<p>1. Download and install the latest Code Composer Studio from TI's website.<br/><b>Note<br/></b></p>
<p>Windows 10 requires Code Composer Studio version 6.1.3 or higher<br/>As of Code Composer Studio version 7 TI does not charge for licenses. You can simply download the<br/>tool and start using it. Along with this the end user license agreement has changed to a simple TSPA<br/>compatible license. For more information see the TI web site.<br/></p>
<p>2. The default installation will work fine, but a custom install will be smaller. You only need support for the<br/>C6000 chipset and, if you have an HDX board with JTAG pins, the Spectrum Digital JTAG drivers, so you can<br/>deselect all the other chipsets and JTAG drivers.<br/></p>
<p>3. Download and install the C6000 Code Generation Tools v7.x:<br/></p>
<p>(a) Launch CCS and go to Help &gt; Install New Software...<br/>(b) In the opened dialog select &quot;Code Generation Tools Updates&quot; in the &quot;Work with:&quot; drop-down list.<br/>(c) Select &quot;TI Compiler Updates&quot; &gt; &quot;C6000 Compiler Tools [version 7.x]&quot;.<br/>(d) Press Next and continue installation using the &quot;typical&quot; installation settings.<br/></p>
<p>As of the publishing of this version of the AAX SDK Avid is internally using v7.4.24. Avid has tested 7.4.4,<br/>7.4.6 and 7.4.24, all later v7 revisions should work as well. CGTools versions higher than v7 do not support<br/>the C6727 DSP.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>190 Module Documentation<br/></b></p>
<p><b>12.45.6.1.2 Workspace setup </b>Each time you launch CCS you will be prompted to select a workspace directory.<br/>A CCS workspace is similar to a Visual Studio solution file. Note that workspaces tend to store absolute paths and<br/>developer-specific info, so you may wish to avoid checking them in to your source control server.<br/></p>
<p><b>Setting up workspace-global macros </b>To set up workspace global macros:<br/></p>
<p>1. When you open CCS for the first time, select a directory for your &quot;workspace&quot;. As mentioned above, we<br/>recommend that this be outside of your source tree.<br/><b>Note<br/></b></p>
<p>If you are updating from a previous CCS version you may not be able to reuse your workspace. For<br/>example, we have found the CCSv4 workspaces are incompatible with CCSv5. After updating your<br/>system to a later Code Composer Studio version you should create a new workspace and import your<br/>existing projects into this new workspace.<br/></p>
<p>2. Go to File &gt; Import... and select Code Composer Studio &gt; Build Variables (CCS &gt; Managed Build Macros<br/>in CCSv4.) Click Next.<br/></p>
<p>3. Browse to TI/Common/macros.ini in your AAX SDK directory and click Finish.<br/></p>
<p>4. This will define an &quot;SDK_SOURCE_ROOT&quot; Linked Resource path variable and Managed Build macro, which<br/>associates the CCS workspace with a single AAX SDK installation.<br/><b>Note<br/></b></p>
<p>A side effect of this is that you cannot use projects from multiple distinct AAX SDK installations in the<br/>same CCS workspace.<br/></p>
<p>5. To verify that the correct path has been set, go to Window &gt; Preferences... and look in General &gt; Workspace<br/>&gt; Linked Resources, and C/C++ &gt; Build &gt; Build Variables (C/C++ &gt; Managed Build &gt; Macros for CCSv4.)<br/></p>
<p><b>Importing projects into your workspace </b>To import projects into your workspace:<br/></p>
<p>1. In the IDE, go to Project &gt; Import CCS Projects...<br/></p>
<p>2. In Select search-directory, select the root of your AAX SDK installation.<br/></p>
<p>3. The CCS projects in the AAX SDK will be added to the Discovered projects field. Select All or choose the<br/>specific projects you want to import.<br/></p>
<p>4. Click Finish, and then wait while the projects are imported.<br/></p>
<p>In order to import CCSv4 projects into later versions of Code Composer Studio it is necessary to add a .cdtproject<br/>file to the project. If you don't have this file in your project, then you can copy it from any other existing project which<br/>was created using CCSv5 or later. Otherwise you will most likely see something similar to this error:<br/></p>
<p>&quot;Error: Import failed for project 'xxxx' because its meta-data cannot be interpreted.&quot;<br/></p>
<p>If you try to build this newly imported CCSv4 project in a later version of Code Composer Studio then you will get<br/>the warning:<br/></p>
<p>&quot;This project was created using a version of compiler that is not currently installed: 7.0.5 [C6000].<br/>Another version of the compiler will be used during build: 7.4.24. Please install the compiler of the<br/>required version, or migrate the project to one of the available compiler versions by adjusting project<br/>properties.&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 191<br/></b></p>
<p>This warning may be cleared by changing Properties &gt; General &gt; Compiler Version from TI v7.0.x to the current<br/>version (e.g. TI v7.4.x). After that the &quot;Output format&quot; field, which is next one to the &quot;Compiler version&quot; field and<br/>is typically grayed out, will become active. You should choose &quot;eabi (ELF)&quot; there. Otherwise Code Composer the<br/>build will fail with errors:<br/></p>
<p>&#8226; &quot;--dynamic=lib not supported when producing TI-COFF output files&quot;<br/></p>
<p>&#8226; &quot;--export=_auto_init_elf not supported when producing TI-COFF output&quot;<br/></p>
<p><b>Note<br/></b>After successful convertion of the project and successful build, the remeasurement of cycle count should be<br/>done, because it may change. Most likely it will decrease, as compared to the version which was built with<br/>CCSv4, but that is not guaranteed. Also the size of the DLL may increase, which may require reducing code<br/>size in order to properly instantiate the plug-in.<br/></p>
<p><b>12.45.6.1.3 Creating new projects<br/></b></p>
<p><b>New project setup </b>Use the following settings in the &quot;New Project...&quot; wizard. Defaults are in italics.<br/></p>
<p>&#8226; Project Type: C6000<br/></p>
<p>&#8226; Output type: Executable<br/></p>
<p>&#8226; Device Variant: Generic C67x+ Device<br/></p>
<p>&#8226; Device Endianness: little<br/></p>
<p>&#8226; Code Generation Tools: 7.4.24 or later (7.0.5 for CCSv4)<br/></p>
<p>&#8226; Output format: eabi (ELF) (in CCSv4 this field will be grayed out.)<br/></p>
<p>&#8226; Linker Command File: CommonPlugIn_LinkerCmd.cmd (see note below)<br/></p>
<p>&#8226; Runtime Support Library: &lt;automatic&gt;<br/></p>
<p><b>Note<br/></b>You can edit the Linker Command File setting to use the SDK_SOURCE_ROOT macro by manually editing<br/>the project's .project XML file or by adding the file to your project using a relative path. See the SDK sample<br/>plug-in projects for an example.<br/></p>
<p><b>12.45.6.1.4 Recommended settings for AAX plug-in projects </b>Tool Settings C6000 Compiler Include Options<br/>-include_path &quot;${SDK_SOURCE_ROOT}/Interfaces&quot; -include_path &quot;${SDK_SOURCE_&#8592;&#8617;<br/>ROOT}/[Plug-in directory]&quot;<br/></p>
<p>The SDK_SOURCE_ROOT macro is defined via the macros.ini file, located in the SDK's /TI/CCSv4 directory. If you<br/>encounter errors using this macro, import the file using File &gt; Import... &gt; CCS &gt; Managed Build Macros.<br/></p>
<p>Tool Settings C6000 Compiler Command Files -cmd_file &quot;${SDK_SOURCE_ROOT}\\TI\\CCSv4\\&#8592;&#8617;<br/>CommonPlugIn_CompilerCmd.cmd&quot;<br/></p>
<p>This file contains additional compiler commands that should be common to all AAX plug-in projects<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>192 Module Documentation<br/></b></p>
<p>Tool Settings C6000 Linker Basic Options -o &quot;${ConfigDir}/${PackageName}/Contents/&#8592;&#8617;<br/>Resources/${ProjName}.dll&quot;<br/></p>
<p>This path will ensure that your compiled TI DLL is placed in the appropriate location inside your AAX plug-in bundle.<br/></p>
<p>Tool Settings C6000 Linker Runtime Environment (No &quot;Initialization model&quot; options set)<br/>Build Settings Artifact name ${ConfigDir}/${PackageName}/Contents/Resources/${Proj&#8592;&#8617;<br/>Name}<br/></p>
<p>This path will ensure that your compiled TI DLL is placed in the appropriate location inside your AAX plug-in bundle.<br/></p>
<p>Build Settings Artifact extension dll<br/></p>
<p>AAX TI libraries should use the .dll extension<br/></p>
<p>Binary Parser Elf Parser<br/></p>
<p>AAX TI libraries should use the Elf binary parser only<br/></p>
<p>Macros Project User Macros ConfigDir = ${OutDir}/${ConfigName} IntDir = ${ConfigDir}/int/${Package&#8592;&#8617;<br/>Name}/TI/${ProjName} OutDir = ${ProjDirPath}/../../WinBuild PackageName = [Plug-in<br/>name]<br/></p>
<p>These macros are used by the other settings here to ensure proper path set-up and artifact naming. Don't worry<br/>that ConfigName shows up as undefined - it will be defined as Debug/Release at compilation.<br/></p>
<p><b>12.45.6.1.5 Recommended Release configuration settings </b>Tool Settings C6000 Compiler Basic Options<br/>-symdebug:none -O3<br/></p>
<p>Tool Settings C6000 Compiler Predefined Symbols -define=NDEBUG<br/></p>
<p>Tool Settings C6000 Compiler Optimizations -os -on2 -op3<br/></p>
<p>Tool Settings C6000 Compiler Assembler Options -keep_asm<br/></p>
<p><b>12.45.6.1.6 Other useful project settings </b>Tool Settings C6000 Compiler Predefined Symbols -define _&#8592;&#8617;<br/>DEBUG<br/></p>
<p>This option is useful for differentiating cycle count reporting for Debug vs. Release builds.<br/></p>
<p>Tool Settings C6000 Compiler Directory Specifier -ft &quot;${IntDir}&quot; -fr &quot;${IntDir}&quot; -fs &quot;${Int&#8592;&#8617;<br/>Dir}&quot;<br/></p>
<p>Useful for collecting intermediate files<br/></p>
<p>Tool Settings C6000 Linker Basic Options -m &quot;${IntDir}/${ProjName}.map&quot;<br/></p>
<p>Useful for placing the map file alongside all other intermediates<br/></p>
<p>Tool Settings C6000 Linker File Search Path -l (nothing)<br/></p>
<p>You can exclude libc.a, which is included by default, from this option unless you require C library features.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 193<br/></b></p>
<p><b>12.45.6.1.7 Adding files and folders </b>In CCS, dragging files into the project, using &quot;Add Files to Project...&quot;, or<br/>using &quot;Link Files to Project...&quot; will either copy the file into the project directory or create an absolute path to the file.<br/>This is usually not the desired behavior. Use the following steps to add a file using a relative path:<br/></p>
<p>1. Right click on the project you'd like to add files to, and select New &gt; File (NOT &quot;Source File&quot; or &quot;Header File&quot;).<br/></p>
<p>2. Click &quot;Advanced &gt;&gt;&quot;.<br/></p>
<p>3. Check the box that says &quot;Link to the file in the system&quot;. Click &quot;Variables...&quot;<br/></p>
<p>4. Select the appropriate variable (usually either SDK_SOURCE_ROOT or SOURCE_ROOT) and click &quot;Extend...&quot;<br/></p>
<p>5. Find the file you want to add. Click OK. Click Finish.<br/></p>
<p>Note that, when adding folders, everything in the folder will be built by default. You can exclude files to work around<br/>this behavior.<br/></p>
<p><b>12.45.6.1.8 Settings for exported symbols<br/></b></p>
<p>&#8226; There is a compiler option in Code Composer Studio that will add an underscore to the exported entrypoint's<br/>name. We recommend keeping this option disabled in order to avoid ambiguity between the exported symbol<br/>name and the function name as it appears in your source code.<br/></p>
<p>&#8226; If you encounter undefined symbol errors when linking to a DSP library that uses a C-style interface then<br/>add the extern &quot;C&quot; keyword before the lib function prototypes. This should resolve the majority of such linker<br/>errors.<br/></p>
<p><b>12.45.6.2 The TMS320C6000 C++ compiler<br/></b></p>
<p>One of the primary goals of AAX is to provide a platform-agnostic development architecture in which products can<br/>easily be developed and re-used across a wide variety of platforms. However, it is still occasionally necessary to<br/>write platform-specific code. This section will document methods for producing code that is specific to the TI C6727<br/>platform using the TMS320C6000 C++ compiler.<br/></p>
<p><b>12.45.6.2.1 C++ standard support </b>The TMS320C6000 compiler supports C++ as defined in the ISO/IEC<br/>14882:1998 standard. The exceptions to the standard are as follows:<br/></p>
<p>&#8226; Complete C++ standard library support is not included. C subset and basic language support is included.<br/></p>
<p>&#8226; These C++ headers for C library facilities are not included:<br/></p>
<p><b>&#8211; </b>&lt;clocale&gt;<br/><b>&#8211; </b>&lt;csignal&gt;<br/><b>&#8211; </b>&lt;cwchar&gt;<br/><b>&#8211; </b>&lt;cwctype&gt;<br/><b>&#8211; </b>&lt;ciso646&gt;<br/></p>
<p>&#8226; These C++ headers are the only C++ standard library header files included:<br/></p>
<p><b>&#8211; </b>&lt;new&gt;<br/><b>&#8211; </b>&lt;typeinfo&gt;<br/></p>
<p>&#8226; No support for bad_cast or bad_type_id is included in the typeinfo header.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>194 Module Documentation<br/></b></p>
<p>&#8226; Run-time type information (RTTI) is disabled by default. RTTI can be enabled with the -rtti compiler option.<br/>&#8226; The reinterpret_cast type does not allow casting a pointer to member of one class to a pointer to<br/></p>
<p>member of a another class if the classes are unrelated.<br/>&#8226; Two-phase name binding in templates, as described in tesp.res and temp.dep of the standard, is not imple-<br/></p>
<p>mented.<br/>&#8226; The export keyword for templates is not implemented.<br/>&#8226; A typedef of a function type cannot include member function cv-qualifiers.<br/>&#8226; A partial specialization of a class member template cannot be added outside of the class definition.<br/></p>
<p><b>12.45.6.2.2 Predefined environment symbols </b>The following symbols are predefined by the compiler on the TI<br/>architecture, and should be used in code concerned with cross-platform support:<br/></p>
<p>&#8226; _TMS320C6X Identifies that the chip is a C6000 variant. This is the symbol that we commonly use to<br/>distinguish whether code is being compiled for AAX-Native (Mac/Windows) or AAX-TI.<br/></p>
<p>&#8226; _TMS320C6700_PLUS Identifies that the chip is a C6700-plus variant<br/></p>
<p>Although you should not require them for AAX development, equivalent assembly predefines are as follows:<br/></p>
<p>&#8226; .TMS320C6X Identifies that the chip is a C6000 variant<br/>&#8226; .TMS320C6700_PLUS Identifies that the chip is a C6700-plus variant<br/></p>
<p><b>12.45.6.2.3 Loop controls </b>The TI compiler supports several pragmas that can be used to give the compiler<br/>additional information about loops.<br/></p>
<p>&#8226; #pragma MUST_ITERATE( min, max, multiple ) This pragma helps the compiler optimize<br/>loops. min is the minimum number of times the loop will execute, max is the maximum number of times the<br/>loop will execute, and modulo is used if the loop will only execute a certain multiple of some number.<br/></p>
<p>&#8226; #pragma PROB_ITERATE( min , max ) If extreme cases prevent the use of MUST_ITERATE,<br/>PROB_ITERATE allows you to specify the usual number of times a loop executes. For example, PROB&#8592;&#8617;<br/>_ITERATE could be applied to a loop that executes for eight iterations in the majority of cases but that<br/>sometimes may execute more or less than eight iterations.<br/></p>
<p>&#8226; pragma UNROLL( n ) Helps the compiler use SIMD instructions, where n is the unrolling factor. By<br/>specifying UNROLL(1) you can prevent the compiler from automatically unrolling a loop. In general, we rec-<br/>ommend using MUST_ITERATE instead unless you have specifically identified a situation where manually<br/>unrolling a loop improves performance.<br/></p>
<p><b>12.45.6.3 DigiShell test tool (DSH)<br/></b></p>
<p>DigiShell is a software tool that provides a general framework for running tests on Avid audio hardware. As a<br/>command-line application, DigiShell may be driven as part of a standard, automated test suite for maximum test<br/>coverage. DSH supports loading all types of AAX plug-ins including Native and DSP, and is especially useful when<br/>running performance and cancellation tests of AAX-TI types. DigiShell is included in Pro Tools Development Builds<br/>as dsh.exe (Windows) or as dsh in the CommandLineTools directory (Mac).<br/></p>
<p>More information on DSH test tool can be found in DSH Guide.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 195<br/></b></p>
<p><b>12.45.6.4 Hardware Debugging<br/></b></p>
<p><b>12.45.6.4.1 Requirements </b>Relocatable ELF DLLs (TI algorithms) can be debugged with some help from the<br/>DIDL loader, the TI Shell Manager, and a script called DLLView_Elf_Avid.js.<br/></p>
<p>These are the minimum requirements for hardware debugging for TI plug-ins:<br/></p>
<p>&#8226; Code Composer Studio version 4.2 or later<br/>&#8226; XDS510 hardware debugger<br/>&#8226; JTAG-enabled HDX card<br/></p>
<p>We recommend using Spectrum Digital's XDS510 USB Plus JTAG Emulator, as it is the only one our internal<br/>developers have used and tested in-house. Both Spectrum Digital and TI have useful technical reference/installation<br/>guides, both of which can be found on the AAX Developer Forum under the 'Development Tools' discussion.<br/></p>
<p><b>12.45.6.4.2 How it works </b>The ridl ELF loader inside DIDL stores a module and segment list containing the paths<br/>of all loaded modules and where their segments are loaded. The TI Shell Manager gets a serialized version of this<br/>table and loads it to a block of external memory on the chip at a known location. The DLLView_Elf_Avid.js script<br/>queries this memory via the debugger and extracts the paths of the modules and the ELF segment load locations,<br/>which it then passes on to the GEL_SymbolAddELFRel scripting console command (new to CCSv4.2). You can<br/>also use that command directly at the console.<br/></p>
<p><b>12.45.6.4.3 Connecting a JTAG Emulator </b>A JTAG-enabled HDX development card includes a &quot;riser&quot; PCB sec-<br/>tion extending about a centimeter above the production card PCB. This riser includes two JTAG connectors. The<br/>two connectors correspond to the two banks of 9 DSPs on the HDX card. Assuming that you are instantiating your<br/>plug-in for debugging on the first available DSP, you will want to connect your JTAG emulator to the connector that<br/>is closest to the card's user-visible ports. This connector corresponds to the first 9 DSPs on the card.<br/></p>
<p><b>12.45.6.4.4 Linking to TIShell.out </b>Hardware debugging, as well as several other debugging facilities, requires<br/>that the DSP plug-in project is linked to TIShell.out in Code Composer Studio.<br/></p>
<p>To link a plug-in project to TIShell.out, follow these steps:<br/></p>
<p>1. Open the plug-in project's properties window and navigate to the C/C++ Build &gt; Tool Settings &gt; C6000 Linker<br/>&gt; File Search Path properties pane.<br/></p>
<p>2. Add &quot;TIShell.out&quot; to the &quot;Include library file&quot; (-l) property list.<br/>3. Under &quot;Add &lt;dir&gt; to library search path&quot; (-i), add the file path of the Pro Tools build you will be using to<br/></p>
<p>test the plug-in. This directory should already include the build's TIShell.out file.<br/>4. Repeat this process for each Configuration of the plug-in project that you will be testing.<br/>5. Add &quot;[path to AAX SDK root]\\TI&quot; to the project's list of source file include directories<br/></p>
<p><b>12.45.6.4.5 Adding the HDX Target Descriptor File </b>To add the HDX Target Descriptor File:<br/></p>
<p>1. In the IDE, go to Window &gt; Preferences, CCS &gt; Debug. Point the &quot;Shared target configuration directory&quot; to<br/>/TI/Common in your AAX SDK source tree<br/></p>
<p>2. In the IDE, go to Window &gt; Show View &gt; Target Configurations.<br/>3. Click refresh if you don't see the configuration file<br/>4. Right click Raven_C672x_XDS510_USB.ccxml, and click &quot;Set as Default&quot;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>196 Module Documentation<br/></b></p>
<p><b>12.45.6.4.6 Setting up the DLLView script </b>Once you have successfully installed the XDS510, you will have to<br/>do a little bit of setup with CCS. Before starting this process, verify that you are running CCSv4.2 or later and the<br/>C6000 code generation tools v7.4 or later (or 7.0.5 for CCSv4). CCS should recognize the installed emulator and<br/>prompt you to download the necessary drivers. Once completed, you will then want to setup your DLLView script.<br/></p>
<p>To set up the DLLView script:<br/></p>
<p>1. In the IDE, open the Scripting Console under View &gt; Scripting Console<br/></p>
<p>2. At the Scripting console, type one of the following to load the DLLView script (insert your own source tree path,<br/>and make sure to load the version that corresponds to your installed CCS version): Code Composer Studio<br/>4: loadJSFile &quot;[PATH TO AAX SDK]/TI/CCSv4/dllView_Elf_Avid.js&quot; true Code<br/>Composer Studio 5 and later: loadJSFile &quot;[PATH TO AAX SDK]/TI/CCSv5/dllView_Elf&#8592;&#8617;<br/>_Avid.js&quot; true<br/></p>
<p>You should now see a new menu item under the Scripts menu: &quot;DLLView -Load Pro Tools Plug-In Symbols&quot; This<br/>should load every time CCS starts.<br/></p>
<p><b>12.45.6.4.7 Loading Symbols for Debugging </b>You will need to get your code loaded and running on the TI<br/>before you load symbols. You can do this directly through Pro Tools, or by using our DigiShell test tool. If using the<br/>DigiShell test tool, load the DAE dish and then a plug-in via the following commands: load_dish DAE Loads the<br/>DAE dish run Lists available plug-ins with their index and spec run&lt;index&gt; Instantiates the &lt;index&gt; plug-in<br/></p>
<p>Use the DLLView script to load symbols for ELF DLLs. After setting up the DLLView script and connecting to the<br/>desired chip in the Debug pane, run the &quot;DLLView -Load Pro Tools Plug-In Symbols&quot; script from the Scripts menu<br/>in Code Composer Studio.<br/></p>
<p><b>Note<br/></b>The chip will need to be Suspended in the debugger in order to load symbols.<br/></p>
<p>To load symbols for debugging:<br/></p>
<p>1. In CCS, Launch the TI Debugger (Target &gt; Launch TI Debugger)<br/></p>
<p>2. Connect the debug target to the appropriate chip<br/></p>
<p>3. Suspend the chip<br/></p>
<p>4. Run Scripts &gt; DLLView -Load Pro Tools Plug-In Symbols.<br/><b>Note<br/></b></p>
<p>This script can take a moment to load; look at the Scripting Console to view its progress if you like<br/>This script may print a warning about TIShell.out not existing. This warning is benign for plug-in debug-<br/>ging since the TIShell symbols are not required in this case.<br/></p>
<p>This will load symbols for all symbol-rich modules running on the chip(s) connected to the debugger. If you load or<br/>unload plug-ins after this, you can simply repeat the &quot;DLLView -Load Pro Tools Plug-In Symbols&quot; command, which<br/>will synchronize the debugger with the current configuration.<br/></p>
<p><b>Note<br/></b>When running a plug-in in Pro Tools, the first DSP chip is reserved for the HDX mixer. Therefore the first<br/>available DSP chip for plug-in instantiation is C672x_1. Under DSH, the first available DSP chip is C672x&#8592;&#8617;<br/>_0.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 197<br/></b></p>
<p><b>12.45.6.4.8 Breaking on first entry into algorithm </b>To break on the first entry into the plug-in's processing rou-<br/>tine, use the manual single-buffer processing mode in DSH: piproctrigger manual run&lt;index&gt; Attach<br/>debugger, suspend the chip, load symbols, set breakpoint, resume piproctrigger auto<br/></p>
<p><b>12.45.6.4.9 Breaking in the on-chip algorithm initialization callback </b>It is not currently possible to hit a break-<br/>point in the optional on-chip algorithm initialization callback for a plug-in. If you need to troubleshoot this callback<br/>then you should use tracing to print debug information to a log file.<br/></p>
<p><b>12.45.6.5 Tracing<br/></b></p>
<p>Avid's AAX DSP platforms provide tracing functionality based on Avid's DigiTrace tool.<br/></p>
<p>To enable trace logging for TI plug-ins, use the AAX_TRACE or AAX_TRACE_RELEASE macros defined in<br/>AAX_Assert.h. A separate macro, AAX_ASSERT, is also available for conditional tracing. These macros are<br/>cross-platform and will function whether the algorithm is running on the TI or on the host.<br/></p>
<p><b>12.45.6.5.1 Tracing requirements<br/></b></p>
<p>&#8226; The AAX_ASSERT and AAX_TRACE macros are debug-only and will not provide tracing output from re-<br/>lease builds of your plug-in. AAX_TRACE_RELEASE may be used for tracing in both debug and release<br/>configurations.<br/></p>
<p>&#8226; These macros require that the DTF_AAXPLUGINS facility is enabled in the DigiTrace configuration file. You<br/>can toggle this facility to enable or disable AAX algorithm-level tracing.<br/></p>
<p>&#8226; In order for tracing to be successful on TI platforms, your plug-in's ELF DLL must dynamically link against<br/>TIShell.out, a component that is installed alongside the Pro Tools application. This file includes the 'glue' that<br/>is required in order for the linker to resolve the DigiTrace entrypoint symbol in the DLL.<br/></p>
<p>To link your plug-in project to TIShell.out in Code Composer Studio, follow the steps listed in Linking to TIShell.out .<br/></p>
<p><b>12.45.6.5.2 Tracing example </b>int32_t<br/>AAX_CALLBACK<br/>MyExamplePlugIn_AlgorithmInit ( SExample_Alg_Context const *<br/></p>
<p>inInstance , AAX_EComponentInstanceInitAction inAction )<br/>{<br/></p>
<p>AAX_TRACE_RELEASE (<br/>kAAX_Trace_Priority_Normal ,<br/>&quot;MyExamplePlugIn_AlgorithmInit called for action : %d&quot;,<br/>inAction );<br/></p>
<p>return 0;<br/>}<br/></p>
<p>Listing 2: Adding trace code on TI<br/></p>
<p><b>12.45.6.5.3 Usage notes<br/></b></p>
<p>&#8226; When running on the DSP, the actual handling of each tracing call occurs in a separate thread. This can lead<br/>to incorrect data reporting if volatile data, such as a pointer to an audio sample, is passed in to the tracing<br/>statement as a parameter.<br/></p>
<p>&#8226; DSP tracing is most reliable when using debug TI builds and when all TI compiler optimizations have been<br/>disabled<br/></p>
<p>&#8226; Known and resolved issues with DSP tracing are logged on the Known Issues page<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>198 Module Documentation<br/></b></p>
<p><b>12.45.6.6 Testing in Pro Tools<br/></b></p>
<p><b>12.45.6.6.1 The System Usage window </b>The System Usage window in Pro Tools includes some features specif-<br/>ically targeted at testing DSP plug-ins, and particularly for testing shuffle events. Starting in Pro Tools 10, the System<br/>Usage window includes the following test features:<br/></p>
<p>&#8226; Shift + Drag DSP Meter - This shuffles everything on the chosen chip to another chip, which allows you to<br/>quickly test shuffle for a given chip.<br/></p>
<p>&#8226; Hover mouse over DSP - Presents a tooltip to show the running plug-ins on a chip<br/>&#8226; Cmd+Option+Shift Hover - Detailed debugging tooltip info<br/>&#8226; Cmd+Option+Shift Click - Forces a full shuffle of all chips / cards<br/>&#8226; Click on empty chip - Reserves a DSP to prevent allocation on that chip<br/></p>
<p><b>12.45.6.6.2 DSP information tooltip </b>Pro Tools can display additional information for DSP plug-ins using some<br/>debug tooltips that are hidden in the plug-in window header and the System Usage window.<br/>The tooltip in the plug-in window header displays information about the particular plug-in instance that is currently<br/>shown in the window. To display this tooltip, hold Command-Option-Shift (Mac) or Control-Alt-Shift (Windows) and<br/>hover the mouse cursor over the DSP &gt; Native button in the plug-in header.<br/>The tooltip in the System Usage window displays usage information for each DSP chip in the system. You can reveal<br/>this tooltip for a particular chip by mousing over the chip's usage meter while holding Command-Option-Shift (Mac)<br/>or Control-Alt-Shift (Windows). This tooltip shows the chip's total allocated cycles, internal, and external memory.<br/>The information in these tooltips is generally targeted at systems-level debugging, but can prove useful for some<br/>plug-in troubleshooting as well.<br/>Figure 1: DSP tooltip in the Pro Tools plug-in window header.<br/>Figure 2: DSP tooltip in the Pro Tools System Usage window.<br/></p>
<p><b>12.45.7 Common Issues with TI Development<br/>12.45.7.1 Data structure compatibility<br/></b></p>
<p>AAX DSP plug-ins use a set of custom data structures to exchange information with host. In order to preserve a<br/>consistent binary interface between the plug-in's host and algorithm, the layout of these structures must be identical<br/>on both platforms. Each structure must have the same size when compiled by both the host platform compiler and<br/>the TI DSP compiler, and any members that are referenced by both the host code and the DSP code must reside at<br/>the same offset within the struct on both platforms.<br/>In order to satisfy this requirement, it is essential that an AAX plug-in's algorithm context structure and any other<br/>data structures that are passed between the host and the DSP use appropriate alignment. Data structures are<br/>usually aligned to 32-bit boundaries, and both Intel and TI compilers use identical struct alignment and packing for<br/>most cases. However, this behavior is not explicitly defined in the C standard.<br/>Furthermore, different compilers may use different sizes for some built-in data types. It is therefore very important<br/>to use explicitly-sized types such as int32_t and float rather than ambiguous types such as bool or int.<br/>One particularly tricky data type is pointers, which may be compiled as 64-bit values on a 64-bit Intel system but as<br/>32-bit values on the TI DSP.<br/>Here are some specific scenarios when an unexpected difference in alignment or data type size may occur and<br/>cause an ABI incompatibility between a plug-in's host and DSP components:<br/></p>
<p>&#8226; Nested structures<br/>&#8226; Usage of pragma pack<br/>&#8226; Dynamic allocation of memory in structures and algorithm<br/>&#8226; Incorrect use of pointer data<br/>&#8226; Pointer data size incompatibility<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 199<br/></b></p>
<p><b>12.45.7.1.1 Nested structures </b>It can be particularly difficult to debug alignment issues in nested data structures.<br/>One reason is that nested structs do not necessarily have the same alignment as the parent struct. A nested<br/>structure will have the alignment that is set preceding its declaration, not the alignment of the structure in which it is<br/>contained.<br/></p>
<p>Aside from avoiding nested structs entirely, one way to avoid potential issues is to make sure that nested structs<br/>always contain a double. This will guarantee that the structure is double-word aligned. We have also found that<br/>placing nested structs near the beginning of the parent struct results in more consistent alignment between Intel<br/>and TI compilers, even in cases where the actual alignment of each member is strictly ambiguous according to the<br/>standard.<br/></p>
<p>Another important rule of thumb with nested structs is to define them inline in the enclosing structure. We have<br/>found that including one data structure as a member in another data structure will only be reliably aligned between<br/>Visual Studio and the TI compiler tools if the member structure's type is defined in-line. This does not appear to<br/>be an issue between clang and the TI compiler - the data structure alignment for the nested structure is consistent<br/>between those two compilers regardless of the location of the internal structure's definition.<br/>#include AAX_ALIGN_FILE_ALG<br/>struct SomeStruct<br/>{<br/></p>
<p>float a;<br/>float b;<br/></p>
<p>};<br/>#include AAX_ALIGN_FILE_RESET<br/>// Somewhere else...<br/>#include AAX_ALIGN_FILE_ALG<br/>class SomeClass<br/>{<br/>public:<br/></p>
<p>SomeStruct s; // Don&#8217;t do this! Inconsistent between Visual Studio and TI<br/>// other stuff...<br/></p>
<p>};<br/>#include AAX_ALIGN_FILE_RESET<br/></p>
<p>Listing 3: Problematic code: nested struct not defined in-line<br/>#include AAX_ALIGN_FILE_ALG<br/>class SomeClass<br/>{<br/>public:<br/></p>
<p>struct SomeStruct<br/>{<br/></p>
<p>float a;<br/>float b;<br/></p>
<p>} s; // This is fine - consistent between Visual Studio, clang, and TI<br/>// other stuff...<br/></p>
<p>};<br/>#include AAX_ALIGN_FILE_RESET<br/></p>
<p>Listing 4: Fixed code: nested struct defined in-line<br/></p>
<p><b>12.45.7.1.2 Usage of pragma pack </b>If you use pragmas to align your structs, then you should know that in most<br/>cases it will only decrease the natural struct alignment of a compiler. That means that if you have<br/>#pragma pack(8)<br/>struct x<br/>{<br/></p>
<p>char a;<br/>float b;<br/></p>
<p>};<br/></p>
<p>Listing 5: Example of usage of #pragma pack where it has no effect<br/></p>
<p>then struct x most likely won't be aligned to the 8 byte boundary. Therefore the pack pragma is not really useful for<br/>addressing alignment issues. Instead of using pack, one way to guarantee that a structure is double-word aligned,<br/>is to include at least one double member.<br/>#pragma pack(8)<br/>struct x<br/>{<br/></p>
<p>float a;<br/>double b;<br/></p>
<p>};<br/></p>
<p>Listing 6: Example of usage of #pragma pack where it actually affects the alignment of the structure<br/></p>
<p>In this case data will be double-word aligned.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>200 Module Documentation<br/></b></p>
<p><b>12.45.7.1.3 Dynamic allocation of memory in structures and algorithm </b>The problem with dynamic allocation<br/>is that it's difficult to enforce specific alignment of the resulting block beyond the natural alignment of the struc-<br/>ture. Newly allocated blocks are not double-word aligned by default. This prevents double-word memory access<br/>optimizations (see Additional data type optimizations) from working.<br/>// blocks are not aligned to 8-byte boundaries by default. This prevents double-word<br/>// memory access optimizations from working<br/>float* floatBlock = new float[100];<br/>delete[] floatBlock;<br/>// Though AAX_Alignment.h does include some aligned memory allocators to counteract the alignment<br/>// problem, their use is still strongly discouraged.<br/>float* floatBlock2 = alignMalloc&lt;float&gt;(100, 8);<br/>alignFree(floatBlock2);<br/></p>
<p>Listing 7: Problems which may arise when using dynamic allocation of memory in algorithm<br/></p>
<p><b>12.45.7.1.4 Incorrect use of pointer data </b>In general, you should avoid storing pointers to anything in any data<br/>structures that are passed between the host and the DSP. There are many possible problems and bugs that can be<br/>caused by this, for example:<br/></p>
<p>&#8226; Often the memory map of packets can change out from under the plug-in<br/></p>
<p>&#8226; It is easy to accidentally reference data in the wrong memory space when setting pointer values<br/></p>
<p>&#8226; Pointer data types are not explicitly sized (see below.)<br/></p>
<p>One alternative to using raw data pointers is to store data offsets into a coefficient array rather than using direct<br/>pointers to other structure elements. A solution such as this that does not involve pointer data types will almost<br/>always end up being easier to implement, easier to troubleshoot, and easier to maintain than a solution that uses<br/>pointer data.<br/></p>
<p>That said, if you must use pointer data types in any data structures that are passed between the AAX host and DSP<br/>components then you should be very careful to avoid the problems listed above.<br/></p>
<p><b>12.45.7.1.5 Pointer data size incompatibility </b>Problems due to pointer data size incompatibility can be partic-<br/>ularly difficult to debug. Pointer data types are not explicitly sized in C, and, starting with the 64-bit Pro Tools 11<br/>release, pointers will have different lengths for host and TI binaries. This can cause subtle portability problems in<br/>certain circumstances, if proper care is not taken.<br/></p>
<p>Consider the following state block:<br/>struct SMyPlugInStateBlock<br/>{<br/></p>
<p>float mInGain_Smoothed;<br/>some_t* mPointerP;<br/>float mOutGain_Smoothed;<br/></p>
<p>};<br/></p>
<p>Notice the pointer mPointerP (the type that it points to is irrelevant for this discussion). Perhaps it is a pointer<br/>that can reference different sets of coefficients, or perhaps it points to some sort of global variable. In any case, this<br/>pointer is 64-bits long on the host, and 32-bits long on TI.<br/></p>
<p>In most cases, this won't cause a problem because the host simply allocates a bit more space for the state block<br/>than the TI needs and fills the allocated memory with 0s. But consider the case where we overload ResetFieldData()<br/>to set mOutGain_Smoothed to something other than 0:<br/>AAX_Result MyPlugIn_Parameters::ResetFieldData (AAX_CFieldIndex inFieldIndex, void * inData, uint32_t<br/></p>
<p>inDataSize) const<br/>{<br/></p>
<p>AAX_Result result;<br/>switch (inFieldIndex)<br/>{<br/></p>
<p>case (eMyAlgFieldIndex_State):<br/>{<br/></p>
<p>memset(inData, 0, inDataSize);<br/>SMyPlugInStateBlock* stateP = static_cast&lt;SMyPlugInStateBlock*&gt;(inData);<br/>stateP-&gt;mOutGain_Smoothed = mOutGain_Target;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 201<br/></b></p>
<p>result = AAX_SUCCESS;<br/>break;<br/></p>
<p>}<br/>default:<br/>{<br/></p>
<p>result = AAX_CEffectParameters::ResetFieldData(inFieldIndex, inData, inDataSize);<br/>break;<br/></p>
<p>}<br/>}<br/>return result;<br/></p>
<p>}<br/></p>
<p>We might be doing this if mOutGain_Smoothed was a smoothing parameter and we want to start it at the target<br/>gain value (rather than having it smooth from 0.0 at instantiation). But if the Host and TI can't agree on where in the<br/>state block mOutGain_Smooth is located, then the result will be unexpected behavior that is difficult to debug.<br/></p>
<p>The most direct way to avoid this problem is to use an explicitly-sized 32-bit type for any pointers in your state block:<br/>struct SMyPlugInStateBlock<br/>{<br/></p>
<p>float mInGain_Smoothed;<br/>uint32_t mPointerP;<br/>float mOutGain_Smoothed;<br/></p>
<p>};<br/></p>
<p>It will be necessary to use reinterpret_cast&lt;float&#8727;&gt;(stateP-&gt;mPointerP) to recast the pointer<br/>to a pointer data type on the TI, but that should not result in any extra processing cycles.<br/></p>
<p><b>12.45.7.1.6 Alignment Reference </b>These are the data type sizes and default alignments for some common<br/>compilers when compiling for 64-bit binary formats:<br/></p>
<p><b>TI MS Visual C++ C++ Builder GCC<br/>char </b>1 byte 1-byte<br/></p>
<p>aligned<br/>1 byte 1-byte<br/></p>
<p>aligned<br/>1 byte 1-byte<br/></p>
<p>aligned<br/>1 byte 1-byte<br/></p>
<p>aligned<br/><b>short </b>2 bytes 2-byte<br/></p>
<p>aligned<br/>2 bytes 2-byte<br/></p>
<p>aligned<br/>2 bytes 2-byte<br/></p>
<p>aligned<br/>2 bytes 2-byte<br/></p>
<p>aligned<br/><b>int </b>4 bytes 4-byte<br/></p>
<p>aligned<br/>4 bytes 4-byte<br/></p>
<p>aligned<br/>4 bytes 4-byte<br/></p>
<p>aligned<br/>4 bytes 4-byte<br/></p>
<p>aligned<br/><b>long </b>4 bytes 4-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/><b>long long </b>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/><b>bool </b>1 byte 1-byte<br/></p>
<p>aligned<br/>1 byte 1-byte<br/></p>
<p>aligned<br/>1 byte 1-byte<br/></p>
<p>aligned<br/>1 byte 1-byte<br/></p>
<p>aligned<br/><b>float </b>4 bytes 4-byte<br/></p>
<p>aligned<br/>4 bytes 4-byte<br/></p>
<p>aligned<br/>4 bytes 4-byte<br/></p>
<p>aligned<br/>4 bytes 4-byte<br/></p>
<p>aligned<br/><b>double </b>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/><b>long dou-<br/></b></p>
<p><b>ble<br/></b>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/>16 bytes 16-byte<br/></p>
<p>aligned<br/><b>pointer </b>4 bytes 4-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/>8 bytes 8-byte<br/></p>
<p>aligned<br/></p>
<p>Also here are some useful links to web resources on the topic:<br/></p>
<p>&#8226; A good resource for the TI DSP is http://www.ti.com/lit/an/sprab89/sprab89.pdf (Sec-<br/>tion 2 especially). This document includes some graphs of simple alignment examples.<br/></p>
<p>&#8226; Another good reference regarding general struct alignment issues is available from publib.boulder.ibm.&#8592;&#8617;<br/>com: http://publib.boulder.ibm.com/infocenter/macxhelp/v6v81/index.&#8592;&#8617;<br/>jsp?topic=/com.ibm.vacpp6m.doc/compiler/ref/rnpgpack.htm<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>202 Module Documentation<br/></b></p>
<p><b>12.45.8 TI Optimization Guide<br/></b></p>
<p>Optimizing AAX real-time algorithms for Avid's TI-based platforms is very similar to optimizing real-time algorithms<br/>for any architecture. When developers think about optimization, they often think &quot;I want to make my code run faster&quot;.<br/>In reality, however, optimization is about making the processor do less. After all, the processor's clock rate is fixed<br/>and can only perform a limited number of instructions in a set amount of time. Therefore, our focus in this section will<br/>be on helping the compiler produce code with shorter execution paths and make full use of the TI chip's architecture.<br/>Modern compilers have become extremely powerful at being able to optimize code, which is fortunate given the<br/>complicated architectures of today's DSP products. In this section we will not focus on instruction-level &quot;optimiza-<br/>tions&quot; like the one below, which will automatically be done by the compiler. Instead of making our code faster, which<br/>it won't, little &quot;tricks&quot; like this really just make code harder to read:<br/>int y = x;<br/>y = y &#187; 1; // y = y / 2;<br/></p>
<p>Listing 8: The kind of optimization that you won't be seeing in this section<br/>Rather, we will focus on refactoring audio processing algorithms to be more efficient and on giving the TI compiler<br/>better information about the code, pointers, and data it is working with so it can perform more effective compile-time<br/>optimizations.<br/>Finally, our optimization efforts will focus on the worst-case code path. For example, developers often try to optimize<br/>algorithms by conditionally bypassing portions of code that may be disabled by particular parameter states. This is<br/>counter-productive, because the system has to assume a plug-in's worst-case execution performance regardless of<br/>how much time the plug-in is actually using. Therefore, in the context of real-time algorithms running on AAX DSP<br/>platforms, it is best to only worry about worst-case execution time.<br/>For more information about using TI's toolset to profile your code's performance, see Cycle count performance test.<br/></p>
<p><b>Note<br/></b>The optimizations described in this section assume that you are using version 7 or higher of TI's C6000 Code<br/>Generation Tools (CGTools). We strongly recommend using v7.0.5 or later as earlier versions throw linking<br/>errors.<br/></p>
<p><b>12.45.8.1 Optimization quick start<br/></b></p>
<p>Here is a quick outline of the general optimization steps for an AAX DSP algorithm:<br/></p>
<p>1. Before beginning your DSP optimizations, make sure that your Native algorithm has basic optimizations in<br/>place. In our experience, beginning the TI optimization process with a slow or needlessly precise Native<br/>algorithm will result in a long porting process. Here are some suggestions for common Native optimizations:<br/></p>
<p>&#8226; Identify unnecessary double precision<br/>&#8226; Identify tables that have too high of granularity<br/></p>
<p>2. Make sure your compiler Release settings enable the compiler to optimize fully and give full optimization<br/>comments: -k -s -pm -op3 -os -o3 -mo -mw -consultant -verbose -mv67p<br/></p>
<p>3. Use the load/update/store design pattern to reduce memory accesses in inner loops<br/>4. Move any processing that does not directly depend on the audio signal out of the real-time algorithm<br/>5. Declare non-changing variables and pointers (both local and in parameter lists) as const<br/>6. Declare non-aliased pointers (both local variables and function parameters) as AAX_RESTRICT<br/>7. Change any long variables to int, and change double variables to float if the reduced precision does<br/></p>
<p>not affect signal integrity (usually defined as cancellation with the plug-in's Native algorithm.)<br/>8. Restructure inner processing loops so that they do not contain large conditional statements or other branches<br/>9. Declare any functions that are called within the innermost processing loop as inline in order to allow the<br/></p>
<p>inner loops to pipeline<br/>10. Add loop count information when known, using #pragma MUST_ITERATE(min,max,quant)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 203<br/></b></p>
<p><b>12.45.8.2 Compiler and linker options<br/></b></p>
<p>As with any complex environment, many performance gains on the TI rely on the appropriate compiler and linker<br/>options. The options documented here will allow CGTools to apply its optimization logic to your algorithm.<br/></p>
<p>When tweaking compiler options on the TI, keep in mind that, like on any CPU, it is useless to optimize Debug code<br/>or to profile its performance. This is especially true on TI processors because of the fact that generated Debug and<br/>Release assembly is almost completely different, assuming that heavy optimization options were chosen for the<br/>Release configuration.<br/></p>
<p>In general, all recommended compiler options should be set correctly in the AAX SDK's example plug-in projects,<br/>and these settings may be used as a guide for your own plug-in projects. See the SDK files CommonPlugIn_&#8592;&#8617;<br/>CompilerCmd.cmd and CommonPlugIn_LinkerCmd.cmd for the latest recommended settings.<br/></p>
<p><b>12.45.8.2.1 Overview of optimization-related compiler options<br/></b></p>
<p>&#8226; -g Full symbolic debug. This setting should be used in debug configurations to make stepping through code<br/>easier. It should not be defined in release configurations, as it will prevent the compiler from being able to<br/>fully optimize code.<br/></p>
<p>&#8226; -k Keep generated .asm files. This should be turned on in release configuraions so that you can use the<br/>ASM output as feedback when making optimization decisions and performance improvements.<br/></p>
<p>&#8226; -d&quot;_DEBUG&quot; Defines the _DEBUG preprocessor macro that alters how certain code is generated (asserts,<br/>stdlib, etc). This should be turned on in debug configurations only. Note that TI does not require NDEBUG to<br/>be defined in release configurations.<br/><b>Note<br/></b></p>
<p>This will eventually be deprecated in favor of the pre-defined &quot;_TMS320C6X&quot; macro.<br/></p>
<p>&#8226; -mv67p Specifies that the compiler should build code for the C67x+ chip variant we are using, which has<br/>some improvements beyond the original C67x. This option should be enabled in all build configurations that<br/>target the HDX platform.<br/></p>
<p>&#8226; -s Specifies Opt-C/ASM interlisting. This interweaves modified C-code and ASM in the .ASM file produced<br/>by the -k option. You should use -s in release configurations so that the ASM file can be read more easily.<br/><b>Note<br/></b></p>
<p>Do NOT use the -ss option in release configurations. This option will negatively affect optimization<br/></p>
<p>&#8226; -pm Program mode compilation. Instructs the C compiler to compile all files in the same compila-<br/>tion unit, so that it can optimize code further using information from all files being compiled. See<br/>Program Mode optimization (-pm) for more information.<br/></p>
<p>&#8226; -op3 A modifier for the -pm option, this specifies that there are no external variable references in the project.<br/>This option is appropriate for TI algorithms, which do have an external function reference (the process<br/>entry point) but do not have external variable references. This option allows the compiler to further opti-<br/>mize global variables without worrying whether they will be accessed outside of the compilation unit. See<br/>Program Mode optimization (-pm) for more information<br/></p>
<p>&#8226; -o3 File-level optimization. This flag gives the compiler full ability to optimize C-code by reordering instruc-<br/>tions, inlining functions, and performing other optimizations. Note that the resulting ASM code will be very<br/>difficult to parse back into the original C and will make debugging very difficult, so this flag should only be<br/>used for Release code. See Optimization flags (-o) for more information.<br/></p>
<p>&#8226; -mo Use Function Subsections. This instructs the compiler to place all functions into their own separate<br/>subsection in the linker map. This allows the linker to remove unused functions in order to reduce memory<br/>usage.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>204 Module Documentation<br/></b></p>
<p>&#8226; -mw Generate a single iteration view of SP loops. This flag adds important information to the ASM output file<br/>that is useful when optimizing your code for pipelined loops.<br/></p>
<p>&#8226; -verbose Output verbose status messages when compiling files. Though not very useful for humans,<br/>verbose output will produce some key information that text parsers can use, such as compiler versions and<br/>other details.<br/></p>
<p><b>12.45.8.2.2 Overview of optimization-related linker options<br/></b></p>
<p>&#8226; -relocatable Generate a relocatable non-executable.<br/></p>
<p>&#8226; -m&quot;file.map&quot; Generate a map file. This file contains useful information about the memory footprint of<br/>your plug-in, which is useful for fixing large plug-ins that may not have fit into available program memory.<br/></p>
<p>&#8226; -w Warn about output sections. This flag generates very useful information that tells you if there might be a<br/>problem with memory output sections you are trying to generate.<br/></p>
<p>&#8226; -x Exhaustively read libraries. This is a useful flag if you do not want to worry about the order in which you<br/>specify required libraries.<br/></p>
<p><b>12.45.8.2.3 Optimization flags (-o)<br/></b></p>
<p>&#8226; Register (-o0) This option allows for some performance gains over non-optimized code by allocating vari-<br/>ables to registers, inlining functions declared inline, etc.<br/></p>
<p>&#8226; Local (-o1) This option enables local optimizations, with very similar results to the register-level optimizations<br/>of -o0.<br/></p>
<p>&#8226; Function (-o2) This is the standard optimization level, and provides large gains over unoptimized code. This<br/>optimization level allows function-level optimizations such as software pipelining, loop optimization/unrolling,<br/>etc.<br/></p>
<p>&#8226; File (-o3) This option can provide some speedup beyond function-level optimizations, but also mutilates<br/>assembly code beyond recognition. At this optimization level the compiler will remove unused functions,<br/>simplify code in the case of unused return values, auto-inline small functions, etc.<br/></p>
<p>Like the corresponding Visual Studio options,-o0 and -o1 allow you to step through code line-by-line for debug-<br/>ging, at the cost of reduced performance. -o2 and -o3 sacrifice the ability to step through code and watch memory<br/>in favor of optimized code.<br/></p>
<p><b>12.45.8.2.4 Program Mode optimization (-pm) </b>Program mode optimization gives the compiler further optimiza-<br/>tion information by compiling all files at once rather than individually. Thus global constants, function implementa-<br/>tions, etc. can be made known to the entire program at compilation. This allows the compiler to inline functions<br/>more effectively and to determine loop unrolling based on constant loop iterators.<br/></p>
<p>There are a few -pm options:<br/></p>
<p>&#8226; -pm -op0 Contains functions and variables that are called or modified from outside the source code pro-<br/>vided to the compiler.<br/></p>
<p>&#8226; -pm -op1 Contains variables modified from outside the source code provided to the compiler but does not<br/>use functions called from outside the source code.<br/>This option is not appropriate for AAX plug-in algorithms, because the algorithm component will be exported<br/>and called from outside the compiled source code.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 205<br/></b></p>
<p>&#8226; -pm -op2 Contains no functions or variables that are called or modified from outside the source code<br/>provided to the compiler.<br/>This option is not appropriate for AAX plug-in algorithms, because the algorithm component will be exported<br/>and called from outside the compiled source code.<br/></p>
<p>&#8226; -pm -op3 Contains functions that are called from outside the source code provided to the compiler but<br/>does not use variables modified from outside the source code.<br/>This is the recommended Program Mode optimization level for TI plug-ins. This optimization level requires<br/>that no global variables are used outside of the algorithm callback. In general, any such variables should be<br/>passed in to a TI algorithm via the algorithm's context structure.<br/></p>
<p><b>12.45.8.2.5 Compiler options to avoid </b>The following information was taken from the TMS320C6000 Program-<br/>mer's Guide:<br/></p>
<p>&#8226; -g/-s/-ss These options limit the amount of optimization across C statements, leading to larger code size<br/>and slower program execution.<br/></p>
<p>&#8226; -mu This option disables software pipelining for debugging. If a reduction in code size is necessary, use the<br/>-ms2/-ms3 options. These options will disable software pipelining among their other code size optimizations.<br/></p>
<p>&#8226; -mz This option is obsolete. When using 3.00+ compilers, this option will decrease performance and increase<br/>code size.<br/></p>
<p><b>12.45.8.3 The load-update-store pattern<br/></b></p>
<p>The load-update-store pattern is one of the cornerstones of a fast iterative algorithm. This pattern specifies that<br/>locally accessed data should be loaded into memory at the start of processing, accessed during processing, and<br/>stored or saved after processing has completed. By using this pattern you will move memory reads and writes<br/>outside of your plug-in's innermost processing loop, which reduces data dependencies and shortens the critical<br/>inner loop.<br/></p>
<p>As an example, consider the following unoptimized filter code:<br/>inline void<br/>ProcessDirectFormII(float* input, float* output, float* state, float*<br/></p>
<p>coefs, int nsamp)<br/>{<br/></p>
<p>// eB0 .. eB2 and eA0, eA1 are just integer enums to partition<br/>// the filter coefficients into A and B<br/>for(int i = 0; i &lt; nsamp; ++i)<br/>{<br/></p>
<p>output[i] = input[i]*coefs[eB0] + state[0];<br/>state[0] = input[i]*coefs[eB1] + state[1] - output[i]*coefs[eA0];<br/>state[1] = input[i]*coefs[eB2] - output[i]*coefs[eA1];<br/></p>
<p>}<br/>}<br/></p>
<p>Listing 9: Unoptimized filter algorithm<br/></p>
<p>Notice that in this code there are at least 15 memory accesses per loop iteration! This algorithm will be very<br/>inefficient as the value of nsamp increases.<br/></p>
<p>The compiler should be able to optimize this algorithm to some extent by pulling certain memory accesses out-<br/>side of the loop. However, the compiler cannot completely optimize the loop because it must assume that the<br/>input/output/state/coefs pointers are aliased in memory. We will discuss the const and restrict keywords<br/>later, which are ways to give the compiler additional information it can use to optimize this loop. However, for now<br/>let's focus back on the basic design of this code.<br/></p>
<p>Using load-update-store, we can refactor this loop to pull the memory accesses outside of the loop:<br/>void<br/>ProcessDirectFormII (float* input, float* output, float* state, float *<br/></p>
<p>coefs, int nsamp)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>206 Module Documentation<br/></b></p>
<p>{<br/>// eB0 .. eB2 and eA0, eA1 are just integer enums to partition<br/>// the filter coefficients into A and B<br/>// ---- LOAD ----<br/>float coefA0 = coefs [eA0];<br/>float coefA1 = coefs [eA1];<br/>float coefB0 = coefs [eB0];<br/>float coefB1 = coefs [eB1];<br/>float coefB2 = coefs [eB2];<br/>float state0 = state [0];<br/>float state1 = state [1];<br/>float output;<br/>// ---- UPDATE ----<br/>for (int i = 0; i &lt; nsamp; ++i)<br/>{<br/></p>
<p>output = input [i]* coefB0 + state0;<br/>state0 = input [i]* coefB1 + state1 - output * coefA0;<br/>state1 = input [i]* coefB2 - output * coefA1;<br/>output [i] = output;<br/></p>
<p>}<br/>// ---- STORE ----<br/>state [0] = state0;<br/>state [1] = state1;<br/></p>
<p>}<br/></p>
<p>Listing 10: Refactored filter algorithm with load-update-store pattern applied. Not fully optimized.<br/></p>
<p>Though the code initially appears longer, you will notice that we have reduced the loop to only 4 memory accesses!<br/>Though we have an additional 9 memory accesses outside the loop, they will only occur once per function call,<br/>resulting in significant savings at higher values of nsamp.<br/></p>
<p><b>Note<br/></b>we are not finished with this loop yet, because we can make some very significant gains by using the<br/>restrict and const keywords, as discussed in the section on C keywords.<br/></p>
<p>Before moving on from load-update-store, let's consider how this pattern should be applied to different categories<br/>of data that may be provided in an AAX DSP processing context:<br/></p>
<p>&#8226; Coefficients and parameters Coefficients and parameters are read-only by definition. As such, they should<br/>be loaded into a local variable at the beginning of the algorithm callback and should not be modified further.<br/></p>
<p>&#8226; Private state State parameters are writable and may be changed by the algorithm. Therefore, private state<br/>data should be loaded into a local variable copy, then stored back into memory after the local copy is updated.<br/></p>
<p>&#8226; Output Output is write-only, so all calculations may be performed on a local variable and then stored into<br/>memory once per loop.<br/></p>
<p><b>12.45.8.4 Case study: IIR filter implemenation on TI 672x DSPs<br/></b></p>
<p>In this section we will examine various IIR filter implementations as a specific example of the considerations that<br/>must be made when optimizing DSP code for the 672x.<br/></p>
<p>The TI 67xx family of DSPs is notably different from some other typical DSP processors, such as the 56k and<br/>the Intel FPU, in that the TI DSP does not have an implicit higher-precision multiply-accumulate. It is of course<br/>capable of double precision accumulation, but this must be coded explicitly. In some ways, this is similar to the<br/>Intel SSE processing unit, which jetisonned the 80-bit floating point stack used in the Intel FPU. The lack of higher<br/>precision accumulation in TI (and SSE) can sometimes result in unacceptable quantization noise performance for<br/>single precision filter implementations. Luckily, with the right choice of filter structure or coding for explicit double<br/>precision accumulation, excellent results can be achieved.<br/></p>
<p>On fixed-point DSPs such as 56k, Direct Form I (DF1) implementation is the standard due to moderately good<br/>fixed point scaling properties, decent noise performance, and simple implementation. However, on a 672x DSP a<br/>single precision DF1 filter can have terrible noise performance (depending on the filter coefficients and the audio<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 207<br/></b></p>
<p>material being processed.) A degenerate case is a DF1 highpass filter processing low frequency material; in DF1,<br/>the feedforward coefficients subtract the previous sample from the current sample, and for low frequency material<br/>this produces very small numbers with low precision. Single precision DF2 structures also produce similarly poor<br/>results in this respect.<br/></p>
<p>One option to improve upon these results is to use double precision throughout the 672x filter implementation.<br/>However, this results in a heavy cycle performance penalty due to the high cost of double operations on the TI DSP.<br/>Another, often better, option is to use single precision coefficients and state, with double precision accumulation:<br/>float in, b0, b1, a1, state1;<br/>double accum ;<br/>accum = double (b0) * double (in) +<br/></p>
<p>double (b1) * double (state1) +<br/>double (a1) * double (accum);<br/></p>
<p>state1 = in;<br/></p>
<p>Listing 11: Mixed-precision DF1 filter implementation<br/></p>
<p>The TI compiler will implement this using the mpysp2dp instruction, since it knows that the operands started out as<br/>single precision and end up as double precision. This is considerably faster than going to a full double precision<br/>implementation, but it is still relatively slow compared to straight single precision. Making the state double precision<br/>will improve noise performance further, with some increase in cycle usage.<br/></p>
<p>Another option that generally gets good results is the single precision DF2 Transpose (DF2T) filter. On TI the DF2T<br/>implementation is fast and generally has good noise performance. If you are looking for a simple recommendation<br/>that should work well enough for most applications, DF2T is a good choice.<br/></p>
<p>The optimized C filter library available from TI uses the DF2 structure in its implementation. Even though DF2 has<br/>some limitations, this is a good starting point for seeing how to optimize filter code on TI; peak performance on TI is<br/>2.25 cycles per biquad, so it's pretty amazing what can be done (to achieve that level of performance multiple series<br/>or parallel biquads need be put in a tight loop.) We have adapted some of this filter code to DF2T, and still achieved<br/>fairly similar cycle performance.<br/></p>
<p>If the single precision DF2T noise performance is not good enough for your application, then either double precision<br/>or one of the myriad other filter structures, such as State Space, Gold-Rader, Lattice or Zolzer, should do the job.<br/>In fact, there is one relatively new filter structure which we think stands out, called the Direct Wave Form (DWF)<br/>filter. Details about this filter structure can be found in Direct Wave Form Digital Filter Structure: an Easy Alternative<br/>for the Direct Form by Jean H.F. Ritzerfel. According to the author the noise performance is 3dB within optimal, it's<br/>relatively efficient (5 multiplies per biquad), free of limit cycles, has simple coefficient generation and low coefficient<br/>quantization sensitivity. It might just be the perfect filter structure, but we'll let you be the judge of that; keep in mind<br/>that all filter structures have some tradeoffs, and the recommendations made here might not be the best for your<br/>particular application.<br/></p>
<p><b>12.45.8.5 Understanding CGTools-generated ASM files<br/></b></p>
<p>The ability to read the ASM files that are generated by CGTools is essential when optimizing a TI algorithm. Specif-<br/>ically, the information in these files will allow you to determine if anything is preventing software pipelining from<br/>occurring, which is the single most effective form of optimization on the C6727.<br/></p>
<p>To view your project's ASM file, turn on the -k compiler option (&quot;Keep Generated .asm Files&quot;, found under Build<br/>Options &gt; Compiler &gt; Assembly in the Code Composer Studio IDE.) By default, ASM files will be placed in the<br/>same directory as the corresponding source file.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>208 Module Documentation<br/></b></p>
<p><b>Note<br/></b>You should only examine ASM listings of Release code that has been optimized by the compiler. Debug code<br/>should not be optimized.<br/></p>
<p>Each ASM file for a TI algorithm callback should contain text that marks the start of the assembly listing for the<br/>processing loop. For example:<br/>;**********************************************************************<br/>;* FUNCTION NAME: // [Your algorithm&#8217;s ProcessProc symbol] ___________*<br/>;*____________________________________________________________________*<br/>;* Regs Modified: A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14, _*<br/>;*________________A15,B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12, _____*<br/>;* _______________B13,SP,A16,A17,A18,A19,A20,A21,A22,A23,A24,A25, ____*<br/>;*________________A26,A27,A28,A29,A30,A31,B16,B17,B18,B19,B20,B21, ___*<br/>;* _______________B22,B23,B24,B25,B26,B27,B28,B29,B30, B31 ___________*<br/>;* Regs Used____: A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14, _*<br/>;* _______________A15,B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12, _____*<br/>;* _______________B13,DP,SP,A16,A17,A18,A19,A20,A21,A22,A23,A24, _____*<br/>;* _______________A25,A26,A27,A28,A29,A30,A31,B16,B17,B18,B19,B20, ___*<br/>;* _______________B21,B22,B23,B24,B25,B26,B27,B28,B29,B30,B31 ________*<br/>;* Local Frame Size: 0 Args + 148 Auto + 44 Save = 192 byte __________*<br/>;**********************************************************************<br/></p>
<p>Listing 12: CGTools-generated header for a processing loop assembly listing<br/></p>
<p>Within this listing, you are looking for several things:<br/></p>
<p>1. Function calls<br/></p>
<p>2. Branches or control code<br/></p>
<p>3. Software pipelining notes<br/></p>
<p><b>12.45.8.5.1 Function calls </b>[!B0] CALL .S1 __divd ; |213|<br/>|| [!B0] MVKH .S2 0x40080000 ,B5 ; |213|<br/>|| [ B0] MV .L1X B10 ,A4 ; |213|<br/>$C$RL9 : ; CALL OCCURS {__divd} ; |213|<br/></p>
<p>Listing 13: Function call in a CGTools-generated assembly listing<br/></p>
<p>Function calls, such as the call in the listing above, cannot be effectively pipelined. If you find a function call figure<br/>out what C instruction it is caused by. Sometimes a function call will be made implicitly, such as when casting from<br/>float to int or when doing division. All function calls should be removed from the processing loop or inlined in order<br/>for the compiler to optimize effectively.<br/></p>
<p><b>12.45.8.5.2 Branches </b>NOP 1<br/>B .S1 $C$L5 ; |213|<br/>NOP 4<br/>MPYDP .M1X A5:A4 ,B5:B4 ,A11:A10 ; |213|<br/></p>
<p>|| LDW .D2T2 *+ SP (124) ,B5 ; |218|<br/>; BRANCH OCCURS { $C$L5 } ; |213|<br/></p>
<p>Listing 14: Branch in a CGTools-generated assembly listing<br/></p>
<p>Branches can also prevent loop pipelining. If you find a branch in your algorithm's assembly, determine whether it<br/>is preventing the compiler from pipelining a loop. If it is preventing pipelining, you must figure out how to rewrite the<br/>conditional in your C code so that it will not be compiled into a branch.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 209<br/></b></p>
<p><b>12.45.8.5.3 Software pipelining notes </b>For each loop the compiler finds and is able to pipeline, the .ASM file<br/>should contain a section similar to the one below:<br/></p>
<p>;*--------------------------------------------------------------------*<br/>;* SOFTWARE PIPELINE INFORMATION<br/>;*<br/>;* Loop source line : 68<br/>;* Loop opening brace source line : 69<br/>;* Loop closing brace source line : 124<br/>;* Loop Unroll Multiple : 2x<br/>;* Known Minimum Trip Count : 1<br/>;* Known Max Trip Count Factor : 1<br/>;* Loop Carried Dependency Bound (^) : 15<br/>;* Unpartitioned Resource Bound : 20<br/>;* Partitioned Resource Bound (*) : 20<br/>;* Resource Partition :<br/>;* A- side B- side<br/>;* .L units 0 0<br/>;* .S units 0 1<br/>;* .D units 20* 20*<br/>;* .M units 7 5<br/>;* .X cross paths 5 6<br/>;* .T address paths 20* 20*<br/>;* Long read paths 5 1<br/>;* Long write paths 0 0<br/>;* Logical ops (. LS) 5 4 (.L or .S unit )<br/>;* Addition ops (. LSD) 0 1 (.L or .S or .D unit )<br/>;* Bound (.L .S .LS) 3 3<br/>;* Bound (.L .S .D .LS .LSD) 9 9<br/>;*<br/>;* Searching for software pipeline schedule at ...<br/>;* ii = 20 Schedule found with 3 iterations in parallel<br/></p>
<p>Listing 15: Pipelined loop header in a CGTools-generated assembly listing<br/></p>
<p>These are the important items to note in this listing:<br/></p>
<p>&#8226; Loop Carried Dependency Bound and Partitioned Resource Bound The maximum of<br/>these numbers is the minimum number of clock cycles one instance of the loop will require in its current<br/>form. You can reduce these numbers by performing some of the optimizations listed in this guide.<br/></p>
<p>&#8226; Loop Unroll Multiple This line will appear if the compiler is partially unrolling the loop to improve<br/>performance.<br/></p>
<p>If a loop section instead displays Disqualified loop: then some of the conditions required to enable software<br/>pipelining have not been met:<br/></p>
<p>&#8226; -o2 or -o3 optimizations must be enabled<br/></p>
<p>&#8226; The loop cannot contain a function call. Make all called functions inline.<br/></p>
<p>&#8226; The loop cannot contain any branches or jumps, often caused by large conditional statements<br/></p>
<p>&#8226; Software pipelining will not work with nested loops; only the innermost loop will be pipelined. You should<br/>completely unroll the inner loop or refactor the algorithm so that the loop can be pipelined<br/></p>
<p>For more information about pipelining and loop/branch optimization, see Refactoring conditionals and branches.<br/></p>
<p><b>12.45.8.6 C keywords<br/></b></p>
<p>There are a few keywords in C that give the compiler additional information about the variables you declare and<br/>parameters you pass into functions. This allows the compiler to further optimize the code it is compiling, which can<br/>result in significant performance gains.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>210 Module Documentation<br/></b></p>
<p><b>12.45.8.6.1 const </b>Effective use of const lets the compiler know whether pointers, scalars, or objects will remain<br/>constant in memory.<br/></p>
<p>Let's add the const keyword to the filter function from our example of The load-update-store pattern.<br/>void<br/>ProcessDirectFormII (<br/></p>
<p>const float * const input, // read - only<br/>float * const output, // read - write<br/>float * const state, // read - write<br/>const float * const coefs , // read - only<br/>int nsamp )<br/></p>
<p>{<br/>// eB0 .. eB2 and eA0, eA1 are just integer enums to partition<br/>// the filter coefficients into A and B<br/>// ---- LOAD ----<br/>const float coefA0 = coefs [ eA0 ];<br/>const float coefA1 = coefs [ eA1 ];<br/>const float coefB0 = coefs [ eB0 ];<br/>const float coefB1 = coefs [ eB1 ];<br/>const float coefB2 = coefs [ eB2 ];<br/>float state0 = state [0];<br/>float state1 = state [1];<br/>// ---- UPDATE ----<br/>for (int i =0; i&amp;lt; nsamp; ++i)<br/>{<br/></p>
<p>const float output = input [i]* coefB0 + state0 ;<br/>state0 = input [i]* coefB1 + state1 - output * coefA0 ;<br/>state1 = input [i]* coefB2 - output * coefA1;<br/>output [i] = output;<br/></p>
<p>}<br/>// ---- STORE ----<br/>state [0] = state0;<br/>state [1] = state1;<br/></p>
<p>}<br/></p>
<p>Listing 16: Refactored filter algorithm with load-update-store pattern and const keyword applied.<br/></p>
<p>It is especially important to note that the declaration of const float output was moved inside the loop. Why<br/>did we do this? Because we see that output is constant over an iteration of the loop, but it does change between<br/>iterations. By declaring it const inside the loop body we remove the data dependency that existed in output and<br/>allow the loop to optimize more effectively.<br/></p>
<p>As demonstrated by this change to const float output, const is useful for manually breaking dependen-<br/>cies in DSP code. Variable re-use introduces unnecessary data dependencies in code, which can be avoided by<br/>using individual local const variables.<br/></p>
<p><b>12.45.8.6.2 restrict </b>The restrict keyword tells the compiler that a specific pointer is not aliased, meaning<br/>that none of the memory locations accessed by the pointer are read or written to by any other variable within its<br/>local scope. This keyword is very important when optimizing TI code that involves pointers, as all AAX algorithms<br/>do due to the nature of the algorithm context structure.<br/></p>
<p>restrict was introduced with the C99 standard. AAX plug-ins use the AAX_RESTRICT keyword, which is a<br/>cross-platform macro for the C99 standard restrict.<br/></p>
<p><b>Note<br/></b>Now that MSVC has added C99 support to its compiler, AAX_RESTRICT will eventually be deprecated in<br/>favor of the restrict keyword.<br/></p>
<p>The following example demonstrates the use of restrict in our filter code.<br/>void<br/>ProcessDirectFormII (<br/></p>
<p>const float * const AAX_RESTRICT input,<br/>float * const AAX_RESTRICT output,<br/>float * const AAX_RESTRICT state,<br/>const float * const AAX_RESTRICT coefs ,<br/>int nsamp )<br/></p>
<p>{<br/>// eB0 .. eB2 and eA0, eA1 are just integer enums to partition<br/>// the filter coefficients into A and B<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 211<br/></b></p>
<p>// ---- LOAD ----<br/>const float coefA0 = coefs [ eA0 ];<br/>const float coefA1 = coefs [ eA1 ];<br/>const float coefB0 = coefs [ eB0 ];<br/>const float coefB1 = coefs [ eB1 ];<br/>const float coefB2 = coefs [ eB2 ];<br/>float state0 = state [0];<br/>float state1 = state [1];<br/>// ---- UPDATE ----<br/>for (int i =0; i&amp;lt; nsamp; ++i)<br/>{<br/></p>
<p>const float output = input [i]* coefB0 + state0;<br/>state0 = input [i]* coefB1 + state1 - output * coefA0;<br/>state1 = input [i]* coefB2 - output * coefA1;<br/>output [i] = output;<br/></p>
<p>}<br/>// ---- STORE ----<br/>state [0] = state0;<br/>state [1] = state1;<br/></p>
<p>}<br/></p>
<p>Listing 17: Refactored filter algorithm with load-update-store pattern and const and restrict keywords applied.<br/></p>
<p><b>Note<br/></b>&#8226; This example applies restrict to the algorithm's input and output audio buffer pointers. These<br/></p>
<p>pointers do not alias each other in most algorithms, but this may not be the case for all algorithms and<br/>should be verified by the developer before applying restrict.<br/></p>
<p>&#8226; The restrict keyword is somewhat redundant when used with the load-update-store pattern. This is<br/>because by asserting to the compiler that the pointers are not aliased, it should be able to partially do<br/>the load-update-store refactoring automatically. However, because some compilers have limited or no<br/>support for the restrict keyword, using the load-update-store pattern is still recommended.<br/></p>
<p><b>12.45.8.6.3 Keywords to avoid </b>There are some keywords which do more harm than good, but are still being<br/>used either due to legacy code or developer superstitions. These keywords should not be used in AAX plug-ins.<br/></p>
<p>&#8226; register The register keyword is a suggestion to the compiler that a certain variable will be accessed<br/>frequently and should be stored in a register rather than a memory location. Use this keyword only when you<br/>are sure that the compiler is placing a frequently-used variable in memory when it would be advantageous<br/>to keep it in a register. Note that the register keyword has no effect if the CGTools optimizations are<br/>enabled.<br/></p>
<p>&#8226; static In C, the static keyword tells the compiler to initialize the variable at compilation time and retain<br/>the value between calls. Though there are some valid situations to use the static keyword, its use in AAX<br/>plug-ins on all platforms is extremely limited. One of its most &quot;popular&quot; uses, declaring local variables inside<br/>a function as static in order to achieve a type of global counter, should never be used in AAX algorithm<br/>code. If you are using static to make a local variable hold its variable across calls to a function, it is always<br/>preferable to either pass it in to the function as a modifiable parameter or declare it as a member variable of<br/>the method (if C++).<br/></p>
<p><b>12.45.8.7 Data types<br/></b></p>
<p>The TI C672x+ is a 32-bit floating point DSP platform, and has a few peculiarities that you should be aware of.<br/></p>
<p>&#8226; Use int instead of long Integers of type long int are 40 bits wide on TI, and are very inefficient. Always<br/>use the int data type (or, even better, the C99-standard int32_t) instead.<br/></p>
<p>&#8226; Use float instead of double Double-precision floating-point data types have a significant performance<br/>penalty on TI processors. Use float instead of double wherever possible, as long as this substitution<br/>does not affect signal integrity or cancellation.<br/></p>
<p>&#8226; Use unsigned values when referencing memory In general, explicitly typed pointers should always be used<br/>to reference memory. If you do have need of a generic memory representation, use an unsigned integer to<br/>avoid implicit conversion costs.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>212 Module Documentation<br/></b></p>
<p><b>12.45.8.7.1 Unintended data type conversions </b>When developing for the TI platform it is important to keep an<br/>eye out for unintended type conversions, and especially for implicit double-precision instructions. The following<br/>points are helpful for both program efficiency and for future maintenance of the code, since they clarify the de-<br/>veloper's understanding of how the code should operate, e.g. by specifying that a cast is occurring, and make it<br/>obvious that steps such as data type conversions are an intentional part of the algorithm.<br/></p>
<p>&#8226; Explicitly declare constants as single-precision. For example, use 0.0f instead of 0.0. Often a compiler<br/>will be able to do this automatically at compile time, but it is better to be explicit with your intended precision.<br/></p>
<p>&#8226; If any casts are required in your code, make them explicit. For example, float output =<br/>(float)doubleVar as opposed to float output = doubleVar.<br/></p>
<p>&#8226; Use single-precision math.h functions (such as fabsf()) instead of the double-precision equivalents<br/>(fabs()).<br/></p>
<p>&#8226; Do not directly reference memory addresses using integer data types; instead, use a pointer data type. If an<br/>integer data type is required, use an unsigned 32-bit type.<br/></p>
<p>To help ensure that you are not violating these principles, always be aware of any warnings generated by the<br/>compiler. In particular, do not ignore warnings related to &quot;implicit conversion from 'double' to 'float'&quot; or &quot;implicit<br/>conversion from 'double' to 'int'&quot;; these warnings may indicate that you are declaring a double when a float would be<br/>just as good.<br/></p>
<p>In the final stages of optimization, examine the generated assembly code to make sure there are no unintended<br/>double-precision instructions or memory accesses.<br/></p>
<p><b>12.45.8.7.2 Additional data type optimizations </b>The AAX SDK includes cross-platform macros that can be<br/>used to convert two single-precision float loads to one double-precision load. The coefficient smoothing case study<br/>below includes an example use case for these macros.<br/>const float * pTable = &amp;SmoothCoefTable[address];<br/>AAX_ALIGNMENT_HINT(pTable,8);<br/>float firstCoef = AAX_LO(*pTable);<br/>float secondCoef = AAX_HI(*pTable);<br/></p>
<p>Listing 18: Example of using AAX macros for converting two float loads to one double load.<br/></p>
<p>In this example the AAX_ALIGNMENT_HINT macro checks whether data is aligned on a 8-byte boundary, then the<br/>double word is loaded, and finally the AAX_LO and AAX_HI macros get the double word's first and second (float)<br/>parts.<br/></p>
<p>If SmoothCoefTable consists of floats and is 8-byte aligned, then this scenario will work fine for loads<br/>when address is even. This raises the question about how to load double word from &amp;SmoothCoef&#8592;&#8617;<br/>Table[address], when address is odd. Since this kind of optimization is most useful for loading data from<br/>external memory, where the CPU savings of a single double word load vs two 32-bit loads is greatest, then one trick<br/>which can help is to trade off memory (as external memory is plentiful) for performance. Specifically, Smooth&#8592;&#8617;<br/>CoefTable can be orginized in a such way that for every member of this table, except the first and the last ones,<br/>there will be two consequent entries.<br/>const int32_t size = 4;<br/>// instead of this classic variant...<br/>const float SmoothCoefTable[size] = {<br/></p>
<p>-0.1, -0.2, -0.3, -0.4<br/>}<br/>// ...table can be organized this way<br/>const float SmoothCoefTable[size*2 - 2] = {<br/></p>
<p>-0.1, -0.2,<br/>-0.2, -0.3,<br/>-0.3, -0.4,<br/>-0.4, 0.0 /* last member is dummy */<br/></p>
<p>}<br/></p>
<p>Listing 19: Example of restructuring the table so that it can be easily used in the optimization scenario given above.<br/></p>
<p>In this case the number of loads will be halved at the cost of doubling the size of the table. If the table is located in<br/>external memory then the additional memory requirement can be an excellent trade-off for the performance gained.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 213<br/></b></p>
<p><b>12.45.8.8 Case study: Efficient parameter smoothing at single and double precision<br/></b></p>
<p>Coefficient smoothing (&quot;de-zippering&quot;) can often be one of the most difficult parts of a plug-in to optimize for real-<br/>time operation. This is especially true in cases when full double-precision smoothing filters have been used in a<br/>plug-in's Native code, with the possibility of very small coefficients. In these cases it can be difficult to optimize<br/>the smoothing code while also satisfying requirements for audio data parity between the plug-in's Native and DSP<br/>configurations.<br/></p>
<p>double * const AAX_RESTRICT deZipper = dzCoefsP-&gt;mDeZip [ch ][0];<br/>const double * AAX_RESTRICT coefs = myCoefsP-&gt;mBiqCoefsBuf [0];<br/>// Double - precision<br/>for (int i = 0; i &lt; eNumBiquads * eNumCoefs ; ++i)<br/>{<br/></p>
<p>double dz = deZipper [i];<br/>dz += zeroCoef * ( coefs [i] - deZipper [i]);<br/></p>
<p>}<br/></p>
<p>Listing 20: Example of double-precision smoothing.<br/></p>
<p>In this section we will describe three specific approaches that may be taken to perform optimized real-time smoothing<br/>without compromising sound quality.<br/></p>
<p><b>12.45.8.8.1 Method 1: Clamped single-precision smoothing </b>The simplest approach for optimization of a<br/>double-precision smoothing filter is to replace it with modified single-precision smoothing. Unfortunately, we have<br/>found that this approach can lead to glitches and instability at higher sample rates when adjusting controls due to<br/>transient innacuraccies in the smoothing.<br/>double * const AAX_RESTRICT deZipper = dzCoefsP-&gt;mDeZip [ch ][0];<br/>const double * AAX_RESTRICT coefs = myCoefsP-&gt;mBiqCoefsBuf [0];<br/>// Method 1 - single - precision<br/>for (int i = 0; i &lt; eNumBiquads * eNumCoefs ; ++i)<br/>{<br/></p>
<p>float dz = deZipper [i];<br/>dz += zeroCoef * ( coefs [i] - deZipper [i]);<br/>// If the de -zip step is so small that the coefficient doesn&#8217;t change then clamp<br/>// the value to the target to ensure we are using exactly the desired value .<br/>deZipper [i] = (dz == deZipper [i]) ? coefs [i] : dz;<br/></p>
<p>}<br/></p>
<p>Listing 21: Example of clamped single-precision smoothing.<br/></p>
<p><b>12.45.8.8.2 Method 2: Mixed-precision smoothing </b>To resolve the stability issues at high sample rates, the<br/>state may be accumulated at double-precision. This results in mixed-precision operations that are much faster on<br/>TI DSPs than full double-precision calculations, though still slower than single-precision.<br/>float * const AAX_RESTRICT deZipper = dzCoefsP-&gt;mDeZip [ch ][0];<br/>double * const AAX_RESTRICT deZipState = dzCoefsP-&gt;mDZState [ch][0];<br/>const float * AAX_RESTRICT coefs = myCoefsP-&gt;mBiqCoefsBuf [0];<br/>// Method 2 - partial double precision<br/># pragma UNROLL ( CBiquad::eNumCoefs )<br/>for(int i = 0; i &lt; eNumBiquads * eNumCoefs ; i ++)<br/>{<br/></p>
<p>double dz = deZipState [i];<br/>dz += zeroCoef * ((coefs [i]) - ( deZipper [i]));<br/>deZipState [i] = dz;<br/>deZipper [i] = float (dz);<br/></p>
<p>}<br/></p>
<p>Listing 22: Example of mixed-precision smoothing.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>214 Module Documentation<br/></b></p>
<p><b>12.45.8.8.3 Method 3: Loop unrolling and double-word memory accesses </b>Further performance gains can<br/>be made by unrolling the loop and using double word memory accesses. This code is faster, but is still not as fast<br/>as full single-precision.<br/>float * const AAX_RESTRICT deZipper = dzCoefsP-&gt;mDeZip [ch][0];<br/>double * const AAX_RESTRICT deZipState = dzCoefsP-&gt;mDZState [ch][0];<br/>const float * AAX_RESTRICT coefs = myCoefsP-&gt;mBiqCoefsBuf [0];<br/>// Method 3 - partial double precision - unrolled with double-precision memory accesses for(int i = 0; i &lt;<br/></p>
<p>(eNumBiquads * eNumCoefs); i +=2 )<br/>{<br/></p>
<p>double dz0 = deZipState [i];<br/>double dz1 = deZipState [i+1];<br/>dz0 += zeroCoef * (AAX_LO ( coefs [i]) - AAX_LO ( deZipper [i]));<br/>dz1 += zeroCoef * ( AAX_HI ( coefs [i]) - AAX_HI ( deZipper [i]));<br/>deZipState [i] = dz0;<br/>deZipper [i] = float (dz0);<br/>deZipState [i+1] = dz1;<br/>deZipper [i+1] = float (dz1);<br/></p>
<p>}<br/></p>
<p>Listing 23: Example of loop unrolling and double-precision memory accesses for smoothing optimization.<br/></p>
<p><b>12.45.8.8.4 Coefficient smoothing example summary<br/></b></p>
<p>&#8226; Full single-precision smoothing (method 1) is an excellent and simple solution for gain coefficients and other<br/>scalar values which are not extremely sensitive to coefficient quantization at small values. This method does<br/>not always reach the target value, so clamping should be used to ensure signal integrity.<br/></p>
<p>&#8226; Mixed-precision smoothing (method 2) uses slightly more CPU, but gives full double precision accuracy. This<br/>approach should generally be used for EQs and other sensitive coefficients.<br/></p>
<p>&#8226; Further low-level optimizations are also possible via manual loop unrolling and double-precision memory<br/>access (method 3).<br/></p>
<p><b>12.45.8.9 Refactoring conditionals and branches<br/></b></p>
<p><b>Note<br/></b>For more detailed information on how to reduce or eliminate the use of branches in algorithms, see section<br/>5.2 of the <b>Hand-Tuning Loops and Control Code on the TMS320C6000 </b>guide provided by TI.<br/></p>
<p>An important technique in refactoring algorithms to enhance loop performance is to reduce or eliminate conditionals<br/>and branches in code. The TI compiler focuses a lot of its optimization energy on keeping its pipeline full of inside<br/>loops. However, it cannot pipeline a loop if the one of the following is true:<br/></p>
<p>&#8226; The loop contains a branch<br/></p>
<p>&#8226; The loop contains a function call<br/></p>
<p>&#8226; The loop is too long<br/></p>
<p>To demonstrate this, we will again begin with an unoptimized example:<br/>for ( int i = 0; i &amp;lt; numSamples ; ++i)<br/>{<br/></p>
<p>if (! bypass )<br/>{<br/></p>
<p>const float filtOutput1 = input [i] * coef0 + state0 * coef1 ;<br/>const float filtOutput2 = filtOutput1 * coef2 + state1 * coef3 ;<br/>output [i] = filtOutput2 ;<br/></p>
<p>}<br/>else<br/>{<br/></p>
<p>output [i] = input [i];<br/>}<br/></p>
<p>}<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 215<br/></b></p>
<p>Listing 24: Another unoptimized filter algorithm.<br/></p>
<p>Though trivial, this example illustrates the problem with conditionals inside of loops. In TI assembly, con-<br/>ditional code usually translates into code branches, which prevents loops from pipelining effectively see<br/>Understanding CGTools-generated ASM files. Let's refactor the loop in our example to reduce the size of its<br/>conditional branch:<br/>for (int i = 0; i &amp;lt; numSamples ; ++i)<br/>{<br/></p>
<p>const float filtOutput1 = input [i] * coef0 + state0 * coef1 ;<br/>const float filtOutput2 = filtOutput1 * coef2 + state1 * coef3 ;<br/>output [i] = filtOutput2 ;<br/>if ( bypass )<br/>{<br/></p>
<p>output [i] = input [i];<br/>}<br/></p>
<p>}<br/></p>
<p>Listing 25: Filter algorithm with a refactored conditional branch.<br/></p>
<p>At first, it may seem wasteful to perform the filter calculation if bypass will simply throw away the result. In reality,<br/>however, the opposite is true: as a real-time algorithm, this code is constrained by its maximum, worst-case cycle<br/>count. It is important to understand this point: essentially, the cycle count of the plug-in is always its worst-case<br/>performance.<br/></p>
<p>By reducing the algorithm's maximum cycle count we are therefore reducing waste, even though we are increasing<br/>the plug-in's cycle count when it is bypassed. In fact, the ideal scenario for most algorithms is to use only one<br/>code path (and, consequentially, a single deterministic cycle count) despite the fact that this can result in worse<br/>performance for some specific states. To state this fundamental principle in a different way:<br/></p>
<p>The performance of specific states in an AAX DSP algorithm is not relevant if there is another possible state with<br/>worse performance.<br/></p>
<p>Going back to our optimized example, you may also notice that the conditional still exists. Doesn't this create a<br/>branch in the assembly code as well and prevent pipelining?<br/></p>
<p>In the case of very brief conditionals such as this, the answer is usually no. On TI processors, most instructions can<br/>be executed conditionally, depending on the value of a control register. Thus, the single assignment (output =<br/>input) inside this conditional will reduce to a few conditional instructions without having to execute a branch. As<br/>a result, the TI compiler will be able to efficiently pipeline this loop.<br/></p>
<p>That said, it is occasionally necessary to eliminate conditionals entirely. One effective solution for these situations<br/>is to execute the branched logic algorithmically rather than conditionally. To demonstrate this approach, here is our<br/>filter example again, this time with the the conditional completely eliminated from the loop:<br/>for (int i = 0; i &amp;lt; numSamples ; ++i)<br/>{<br/></p>
<p>const float filtOutput1 = input [i] * coef0 + state0 * coef1 ;<br/>const float filtOutput2 = filtOutput1 * coef2 + state1 * coef3 ;<br/>output [i] = (! bypass ) * filtOutput2 + bypass * input [i];<br/></p>
<p>}<br/></p>
<p>Listing 26: Filter algorithm with branching logic executed algorithmically.<br/></p>
<p>This code is shorter and completely eliminates the conditional from inside the loop body. However, there is an<br/>associated cost in readability, in that it is not initially obvious how exactly bypass affects the output. This is of<br/>course a tradeoff that you will need to consider on a case-by-case basis. In general, we encourage you to consider<br/>this technique only when you have verified in the assembly code that simply reducing the size of the conditional is<br/>not enough to achieve effective instruction pipelining.<br/></p>
<p>Another useful technique for optimizing loops is to use pragma MUST_ITERATE and pragma PROB_&#8592;&#8617;<br/>ITERATE (see more about these pragmas in Loop controls), which help the compiler guess the number of iter-<br/>ations for the loop. It is extremely useful when you know the exact number of the iterations, and this number never<br/>changes during plug-in processing. For example, this is applicable for the loops which iterate through the audio<br/>samples in the input and output buffers. The number of input samples is always constant for an AAX DSP plug-in<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>216 Module Documentation<br/></b></p>
<p>algorithm; the buffer length must be described with the option AAX_eProperty_DSP_AudioBufferLength for each<br/>DSP component in the plug-in's description.<br/></p>
<p>The following code example shows an algorithm processing function template. For convenience, this function tem-<br/>plate takes the audio buffer length as a template parameter:<br/>template&lt;int kAudioWindowSize&gt;<br/>void AAX_CALLBACK<br/>Example_AlgorithmProcessFunction( SExample_Alg_Context * const inInstancesBegin [], const void *<br/></p>
<p>inInstancesEnd)<br/>{<br/></p>
<p>for (SExample_Alg_Context * const * walk = inInstancesBegin; walk != inInstancesEnd; ++walk)<br/>{<br/></p>
<p>SExample_Alg_Context* const AAX_RESTRICT contextP = *walk;<br/>const float * const AAX_RESTRICT inputP = contextP-&gt;mInputPP;<br/>float * const AAX_RESTRICT outputP = contextP-&gt;mOutputPP;<br/>#pragma MUST_ITERATE( kAudioWindowSize, kAudioWindowSize, kAudioWindowSize )<br/>for (int32_t i = 0; i &lt; kAudioWindowSize; ++i)<br/>{<br/></p>
<p>outputP[i] = inputP[i];<br/>}<br/></p>
<p>}<br/>}<br/></p>
<p>Listing 27: Optimizing loop using pragma MUST_ITERATE.<br/></p>
<p>Note that the audio buffer length property takes a AAX_EAudioBufferLengthDSP value. The values of this enum<br/>are set to the power-of-two for each buffer length, so in this case the kAudioWindowSize value would be set<br/>to match 2 &lt;&lt; AAX_eProperty_DSP_AudioBufferLength when compiling this algorithm callback into<br/>the TI DLL<br/></p>
<p>The same optimization can be used for the loops that iterate through input/output channels, as demonstrated by the<br/>DemoDist example plug-in.<br/></p>
<p><b>12.45.8.10 Case study: pipeline refactoring in Avid's EQ3 and Dyn3 plug-ins<br/></b></p>
<p>While optimizing the &quot;stock&quot; Pro Tools equalization and dynamics processors we came across many real-world<br/>optimization scenarios that will be applicable to a broad variety of plug-ins. In this section we will consider specific<br/>techniques that we used to enable software pipelining of these algorithms by the TI compiler, including an in-depth<br/>look at the pseudo-speculative execution approach used in our Dyn3 plug-in's polynomial gain calculation loop.<br/></p>
<p><b>12.45.8.10.1 Move individual processing operations into separate loops </b>Oftentimes a sample-by-sample<br/>iterative loop that is not software pipelining can be broken up into individual loops that incrementally apply changes<br/>to the audio buffer. These smaller loops have a much better chance of being successfully pipelined by the compiler.<br/>In EQ3, moving our biquad audio processing stages to dedicated loops that do not include coefficient smoothing or<br/>other tasks resulted in large performance gains.<br/></p>
<p><b>12.45.8.10.2 Avoid pipeline dependencies </b>The goal of the above optimization is to allow the compiler to suc-<br/>cessfully pipeline each iterative loop. However, even a pipelined loop may be optimized further. One of the best<br/>ways of optimizing loops is to keep the processor busy while pipeline dependencies are cleared.<br/></p>
<p>For example, in EQ3 we found that it was better to perform the plug-in's input and output meter calculations in the<br/>same loop rather than separating them out into individual loops. This is because each meter calculation has a<br/>dependency on its previous value, which puts a dependency in the pipeline. Doing both at the same time gives the<br/>process more to do while waiting for the next value. In Dyn3 we had similar results merging table lookup, attack,<br/>and release loops into a single iterative loop. As long as the loop is still successfully pipelined by the compiler, these<br/>&quot;larger&quot; loops tended to have much better performance due to the reduction in blocking dependencies.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 217<br/></b></p>
<p><b>12.45.8.10.3 Detailed example of loop optimization in Dyn3 </b>At this point it will be helpful to go into greater<br/>detail about our optimizations for Dyn3's polynomial gain calculation loop, because the increase in performance<br/>was quite large and is fairly representative of other algorithms. The unoptimized code took 43 cycles to execute one<br/>iteration of the loop. After rearranging the code it now takes 6 cycles. The basic problem was numerous pipeline<br/>dependencies: the Loop Carried Dependency Bound was 42 cycles, yet the Partitioned Resource Bound was 4<br/>cycles. In other words, if all of these dependencies were removed the loop could potentially execute in 4 cycles.<br/>2760 ;* SOFTWARE PIPELINE INFORMATION<br/>2761 ;*<br/>2762 ;* Loop source line : 199<br/>2763 ;* Loop opening brace source line : 200<br/>2764 ;* Loop closing brace source line : 213<br/>2765 ;* Known Minimum Trip Count : 4<br/>2768 ;* Loop Carried Dependency Bound (^) : 42<br/>2769 ;* Unpartitioned Resource Bound : 4<br/>2770 ;* Partitioned Resource Bound (*) : 4<br/>2785 ;*<br/>2786 ;* Searching for software pipeline schedule at ...<br/>2787 ;* ii = 42 Did not find schedule<br/>2788 ;* ii = 43 Schedule found with 1 iterations in parallel<br/>2789 ;* Done<br/>for (int i =0; i&amp;lt; kAudioWindowSize ; i++) // cSmoothingBlockSize<br/>{<br/></p>
<p>const float * smoothCoeffs = stateP -&amp;gt; mSmoothedPoly ;<br/>float logEnv = logEnvArray [i]; // logEnvArray [ fIdx +i];<br/>logEnv -= smoothThrLow ;<br/>if( logEnv &amp;gt;= 0.0 f) // In the knee<br/></p>
<p>smoothCoeffs += eCpdPolyOrder ;<br/>if( logEnv &amp;gt;= 0.0 f) // In the knee<br/></p>
<p>logEnv -= smoothThrLowDelta ;<br/>if( logEnv &amp;gt;= 0.0 f) // In the linear GR stage<br/></p>
<p>smoothCoeffs += eCpdPolyOrder ;<br/>const float filteredLogEnv = smoothCoeffs [ eCpdPolyCoeffsC ] +<br/></p>
<p>logEnv *( smoothCoeffs [ eCpdPolyCoeffsB ] +<br/>smoothCoeffs [ eCpdPolyCoeffsA ]* logEnv );<br/></p>
<p>filtLogEnvArray [i] = filteredLogEnv + smoothedMakeupGain ;<br/>}<br/></p>
<p>Listing 28: Dyn3's unoptimized polynomial gain calculation loop and asm listing.<br/></p>
<p>&#8226; logEnv -= smoothThrLow depends on the result of logEnvArray[i]<br/></p>
<p>&#8226; if(logEnv &gt;= 0.0f) depends on the result of logEnv -= smoothThrLow<br/></p>
<p>&#8226; logEnv -= smoothThrLowDelta depends on the result of logEnv -= smoothThrLow<br/></p>
<p>&#8226; Thrid if(logEnv &gt;= 0.0f) depends on the result of logEnv -= smoothThrLowDelta<br/></p>
<p>&#8226; Second smoothCoeffs += eCpdPolyOrder depends on the result of the first smoothCoeffs<br/>+= eCpdPolyOrder<br/></p>
<p>&#8226; logEnv&#8727;smoothCoeffs[eCpdPolyCoeffsB] depends on the result of logEnv -= smooth&#8592;&#8617;<br/>ThrLowDelta<br/></p>
<p>&#8226; smoothCoeffs[eCpdPolyCoeffs], etc. depend on the result of the second smoothCoeffs<br/>+= eCpdPolyOrder<br/></p>
<p>&#8226; filteredLogEnv+smoothedMakeupGain depends on the result of filteredLogEnv =<br/>smoothCoeffs[eCpdPolyCoeffsC]<br/></p>
<p>&#8226; filtLogEnvArray[i] depends on the result of filteredLogEnv + smoothedMakeupGain<br/></p>
<p>And I don't think that even covers every case, but you get the idea. The bottom line is there is no way this loop<br/>can pipeline well. In contrast, here is the optimized code and listing file output once these dependencies have been<br/>removed:<br/>2476 ;* Loop opening brace source line : 167<br/>2477 ;* Loop closing brace source line : 179<br/>2446 ;* Known Minimum Trip Count : 4<br/>2482 ;* Loop Carried Dependency Bound (^) : 1<br/>2483 ;* Unpartitioned Resource Bound : 4<br/>2484 ;* Partitioned Resource Bound (*) : 4<br/>2512 ;* ii = 6 Schedule found with 5 iterations in parallel<br/>for (int i =0; i&amp;lt; cProcessingBlockSize ; i++)<br/>{<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>218 Module Documentation<br/></b></p>
<p>float logEnv = logEnvArray [i];<br/>float logEnvThrHi = logEnv - smoothThrHigh ;<br/>const float gainSlope = smoothThrSlope +<br/></p>
<p>logEnv * smoothSlope ;<br/>const float gainKnee = smoothKneeC +<br/></p>
<p>logEnvThrHi *( smoothKneeB +<br/>smoothKneeA * logEnvThrHi );<br/></p>
<p>const bool bKnee = ( logEnv &amp;gt; smoothThrLow );<br/>const bool bSlope = ( logEnv &amp;gt; smoothThrHigh );<br/>float filteredLogEnv = bKnee ? gainKnee : 0.0f;<br/>filteredLogEnv = bSlope ? gainSlope : filteredLogEnv ;<br/>filtLogEnvArray [i] = filteredLogEnv ;<br/></p>
<p>}<br/></p>
<p>Listing 29: Dyn3's optimized polynomial gain calculation loop and asm listing<br/>In this case gainSlope is only dependent on the loading of logEnv, so that can begin almost immediately.<br/>GainKnee must wait for logEnvThrHi, but gainSlope can be calculated during that time. bKnee and b&#8592;&#8617;<br/>Slope are also only dependent on logEnv, and start right away. The main dependency is filteredLogEnv<br/>which is dependent on bKnee and gainKnee and then bSlope and gainSlope. Anyhow, this is far fewer<br/>dependencies. Here is another version which runs in exactly the same number of cycles. (In fact, under the hood it<br/>may be creating the same asm code; we have not compared instruction-by-instruction.)<br/>for (int i =0; i&amp;lt; kAudioWindowSize ; i++)<br/>{<br/></p>
<p>float logEnv = logEnvArray [i];<br/>float logEnvThrHi = logEnv - smoothThrHigh ;<br/>const bool bKnee = ( logEnv &amp;gt; thrLow );<br/>const bool bSlope = ( logEnv &amp;gt; thrHigh );<br/>float filteredLogEnv = bKnee ?<br/></p>
<p>kneeC + logEnvThrHi *( kneeB + kneeA * logEnvThrHi ) :<br/>0.0 f;<br/></p>
<p>filteredLogEnv = bSlope ?<br/>thrSlope + logEnv * slope :<br/>filteredLogEnv ;<br/></p>
<p>filtLogEnvArray [i] = filteredLogEnv ;<br/>}<br/></p>
<p>Listing 30: An alternative optimization for Dyn3's polynomial gain calculation loop.<br/></p>
<p><b>12.45.8.10.4 But what about Native? </b>You might expect this altered code to execute well on a TI DSP but poorly<br/>on x86. However, keep in mind that a large degree of speculative execution is used on Intel's processors. This<br/>means that pipeline dependencies due to conditionals can be broken because multiple paths are executed. In<br/>these cases, only one of the results is used and the others are thrown away. In other words, if you saw pseudo<br/>code showing the literal execution of the unoptimized code above on Intel then it would probably look a lot like<br/>the optimized code. The lesson? For TI it is important to rearrange your code so that essentially it implements<br/>speculative execution as much as possible, and if applied correctly this optimization should not negatively impact<br/>your plug-in's native performance.<br/></p>
<p><b>12.45.8.11 Case study: Additional optimization lessons from EQ3 and Dyn3<br/></b></p>
<p>The pipeline optimization example above is just one example, and the following techniques also helped us achieve<br/>many-fold increases in performance. Note that many of these techniques are discussed in greater detail in the<br/>sections above.<br/></p>
<p><b>12.45.8.11.1 Watch the assembly listing </b>In the process of optimizing these plug-ins we found their asm listing<br/>files very helpful, especially the Loop Carried Dependency Bound and the Partitioned Resource Bound information.<br/>The listing file shows how many cycles the code is taking to execute, and we could make an estimate of how far<br/>away we were from the optimal implementation by seeing how well the pipeline is being utilized.<br/></p>
<p><b>12.45.8.11.2 Divide processing tasks over multiple calls </b>In the old RTAS version of EQ3 the coefficients were<br/>updated (smoothed) every 8 samples. Initially, this was changed to every 4 samples in the AAX version in order to<br/>easily work with 4-sample blocks on HDX. However, we were able to achieve better results by adding &quot;ping pong&quot;<br/>logic that alternates between smoothing the first and second half of the coefficients on each pass. To make this work<br/>in our odd-banded EQ we had to pad the smoothing coefficients by one biquad's worth to make an even number of<br/>biquads, but regardless of this inefficiency we still achieved performance gains.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 219<br/></b></p>
<p><b>12.45.8.11.3 Eliminate branches that block pipelining </b>Eliminating large conditional branches is critical to op-<br/>timal performance on TI. This can be an especially tempting pitfall for developers who are used to coding only for<br/>x86 processors.<br/></p>
<p>Consider the &quot;ping pong&quot; optimization described above. This logic does not break pipelining because the conditional<br/>logic that checks the state of the flag does not result in a large branch; once the ping pong value is set, the exact<br/>same logic operates in every processing callback. If instead we used an if statement to determine which &quot;side&quot;<br/>should execute, this would prevent pipelining optimizations and would seriously impact performance.<br/></p>
<p><b>12.45.8.11.4 Remove double-precision operations where they are not required </b>Here is some coefficient<br/>smoothing code from our pre-optimization EQ3 algorithm. This code was embedded in the inner biquad processing<br/>loop:<br/># pragma UNROLL ( CBiquad::eNumCoefs )<br/>for (int k = 0; k &lt; CBiquad::eNumCoefs; ++k)<br/>{<br/></p>
<p>double &amp;dz = deZipper[k];<br/>AAX::DeDenormal (dz);<br/>step[k] = zeroCoef * ( coefs[k] - dz);<br/></p>
<p>}<br/># pragma UNROLL ( CBiquad::eNumCoefs )<br/>for(int k = 0; k &lt; CBiquad::eNumCoefs; ++k)<br/>{<br/></p>
<p>double nm1_dz = deZipper[k]; // read state<br/>nm1_dz += step[k];<br/>biquadCoefs[k] = static_cast&lt; float &gt; ( nm1_dz );<br/>deZipper[k] = nm1_dz ; // write state<br/></p>
<p>}<br/></p>
<p>Listing 31: Unoptimized coefficient smoothing in EQ3<br/></p>
<p>To optimize this code, we converted the logic to use single-precision de-zipper values. However, this resulted in a<br/>sonic difference due to the fact that the smoothed coefficients would not necessarily ramp all the way to the correct<br/>target value. To solve that we added a conditional &quot;clamp&quot; that halts the smoothing once there is no difference<br/>between the 32-bit smoothed value and the target value. On examination of the assembler output, we found that<br/>this conditional pipelines very well.<br/># pragma UNROLL ( CBiquad::eNumCoefs )<br/>for(int i = 0; i &lt; (cMaxNumBiquadsWithPad / 2) * CBiquad::eNumCoefs; ++i)<br/>{<br/></p>
<p>float dz = deZipper[i];<br/>dz += zeroCoef * ( coefs[i] - deZipper[i]);<br/>deZipper[i] = (dz == deZipper[i]) ? coefs[i] : dz; // clamp<br/></p>
<p>}<br/></p>
<p>Listing 32: Optimized coefficient smoothing in EQ3<br/></p>
<p><b>12.45.8.11.5 Make coefficients contiguous </b>We were able to achieve significant performance gains in iterative<br/>loops like the smoothing code shown above by ensuring that all of the coefficients that would be accessed by the<br/>loop are contiguous in memory. In addition, note that in the optimized code there is only one loop, which iterates<br/>NumBiquads&#8727;NumCoefs times. This optimization is possible due to the fact that each filter's coefficients are<br/>contiguous in the coefs array.<br/></p>
<p><b>12.45.8.11.6 Use AAX_RESTRICT wherever applicable </b>We have found that the restrict keyword is vital<br/>for optimal performance on TI DSPs. For example, the parameter smoothing logic in our Dyn3 plug-in was reduced<br/>from 18 cycles to 3 cycles per loop iteration simply by the addition of this keyword to the applicable pointer variables.<br/></p>
<p>For more information about the restrict keyword, see restrict.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>220 Module Documentation<br/></b></p>
<p><b>12.45.8.11.7 Be aware of shell overhead </b>In the TI Shell there is code that loops through every buffered co-<br/>efficient FIFO before every sample buffer in order to swap the algorithm's context field pointers to a new set of<br/>coefficients if one is available. This uses a nominal number of cycles per buffered port, which can add up very<br/>quickly in small plug-ins.<br/></p>
<p>For example, before our optimizations EQ3 used eight individual buffered coefficient blocks. On investigation, we<br/>found that the shell overhead from managing these buffers added up to be roughly equivalent to the algorithm's total<br/>processing cycles! To work around this we merged the 8 coefficient blocks into one large block. The trade-off of<br/>this optimization is that more work must be done on the host to re-generate and copy the whole coefficient state<br/>every time any parameter changes, so this is an optimization that should be applied only when appropriate for the<br/>individual plug-in.For example, before our optimizations EQ3 used eight individual buffered coefficient blocks. On<br/>investigation, we found that the shell overhead from managing these buffers added up to be roughly equivalent to<br/>the algorithm's total processing cycles! To work around this we merged the 8 coefficient blocks into one large block.<br/>The trade-off of this optimization is that more work must be done on the host to re-generate and copy the whole<br/>coefficient state every time any parameter changes, so this is an optimization that should be applied only when<br/>appropriate for the individual plug-in.<br/></p>
<p><b>12.45.8.11.8 Watch for opportunities to merge or eliminate operations </b>Keep an eye out for unnecessary pro-<br/>cessing stages performed by your algorithm. Gain stages, phase toggles, and &quot;dummy&quot; coefficients are particularly<br/>good candidates for this kind of optimization. For example:<br/></p>
<p>&#8226; In our EQ3 plug-in, we found that we could achieve significant performance improvement by merging the<br/>plug-in's input and output gain stages with the overall gain of the first and last biquads. As a side benefit, this<br/>reduced the total quantization noise in the algorithm.<br/></p>
<p>&#8226; In our Dyn3 plug-in, we found that we were applying smoothing logic to filter coefficients that would always<br/>be zero.<br/></p>
<p>&#8226; When we looked more closely at Dyn3 we found that we were also computing and discarding sidechain filter<br/>information for the LFE, which is not part of the sidechain<br/></p>
<p><b>12.45.8.11.9 Read the TI documentation </b>There are many helpful optimization resources available from Texas<br/>Instruments. Out of all of the TI optimization documents we encountered, we found the Hand-Tuning Loops and<br/>Control Code on the TMS320C6000 guide to be the most helpful and complete.<br/></p>
<p><b>12.45.8.12 Optimization on the HDX platform<br/></b></p>
<p><b>12.45.8.12.1 Interrupt latency </b>Besides the large latency due to context switching (lots of data file registers to<br/>store) and the pipeline (many stages), interrupts can be disabled around pipelined loops, which cannot be inter-<br/>rupted. This can be controlled with the -mi=X compiler option, which will disallow unsafe pipelining for loops that are<br/>longer than X cycles. See TI's documentation (SPRU187O Section 2.12) for more details and references regarding<br/>this behavior.<br/></p>
<p><b>12.45.8.12.2 External memory access </b>A loop which performs many reads and writes may require access to<br/>external memory. In this scenario, the loop may take 10's or even 100's of times longer to execute than the compiler<br/>expects it to!<br/></p>
<p>There are two options for dealing with this:<br/></p>
<p>1. Search and destroy these loops individually<br/></p>
<p>&#8226; Move all the data used by the loop to internal RAM.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 221<br/></b></p>
<p>&#8226; Use HDX's DMA facilities for external memory accesses.<br/>&#8226; #pragma FUNC_INTERRUPT_THRESHOLD can be used to disable pipelining on a case by case<br/></p>
<p>basis.<br/></p>
<p>2. For modules that are known to have these loops but are not worth hand optimizing, then turn off pipelined<br/>loop optimization altogether. (-mu aka -disable_software_pipelining).<br/></p>
<p><b>Note<br/></b>This is only a problem in the C67(0-2)x ISAx used on the HDX platform. In The C64xx and C674x ISA, there is<br/>an SPLOOP command which can buffer the branches within pipelined loops to allow them to be interruptable.<br/></p>
<p><b>12.45.8.13 Code Composer Studio optimization tools<br/></b></p>
<p><b>12.45.8.13.1 Compiler Consultant </b>The Compiler Consultant tool can be used to suggest additional optimiza-<br/>tions.<br/></p>
<p>To enable the Compiler Consultant in Code Composer Studio, do the following:<br/></p>
<p>1. Set an optimization level of -o2 or -o3 (Found in CCSv4 under Build Options &gt; Compiler &gt; Basic)<br/></p>
<p>2. Set the &#8211;consultant: Generate Compiler Consultant Advise switch (Found in CCSv4 under<br/>Build Options &gt; Compiler &gt; Feedback)<br/></p>
<p><b>12.45.8.13.2 Optimization information file </b>Optimization information files can be generated in Code Composer<br/>Studio by selecting the option Build Options &gt; Compiler &gt; Feedback &gt; Opt Info File. Optimization information files<br/>have an .nfo extension and are placed into the project's intermediate build products directory. In general, these files<br/>list function call-graph information and describe whether or not individual functions can be inlined.<br/></p>
<p><b>12.45.9 Error Codes<br/></b></p>
<p>The following appendices document error codes that are specific to plug-in hosting in Pro Tools HDX and other AAX<br/>platforms based on the TI DSP environment.<br/></p>
<p><b>12.45.9.1 -138xx: DHM Core DSP errors<br/></b></p>
<p>These errors relate to routing and assignment problems on Pro Tools HDX hardware. Plug-ins should never be able<br/>to trigger these error codes, which indicate low-level problems in the system.<br/></p>
<p><b>Table 1: DHM Core DSP error codes<br/></b></p>
<p><b>Value Definition<br/></b>-13801 ePSError_CTIDSP_WrongSampleRate<br/>-13802 ePSError_CTIDSP_NoFreeStreams<br/>-13803 ePSError_CTIDSP_StreamCreationTimeout<br/>-13804 ePSError_CTIDSP_StreamDestruction<br/>-13805 ePSError_CTIDSP_InactiveStream<br/>-13806 ePSError_CTIDSP_StreamCorrupted<br/>-13807 ePSError_CTIDSP_QueueFull<br/>-13808 ePSError_CTIDSP_NullPointer<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>222 Module Documentation<br/></b></p>
<p>-13809 ePSError_CTIDSP_WrongStreamID<br/>-13810 ePSError_CTIDSP_ImageError<br/>-13811 ePSError_CTIDSP_ResetError<br/>-13812 ePSError_CTIDSP_ImageVerify<br/>-13813 ePSError_CTIDSP_DSPAlreadyInBootOrReset<br/>-13814 ePSError_CTIDSP_TriggerInterrupt<br/>-13815 ePSError_CTIDSP_BufferSizeNotAligned<br/>-13816 ePSError_CTIDSP_TimeoutWaitingForHPIC<br/>-13817 ePSError_CTIDSP_SetUHPIError<br/>-13818 ePSError_CTIDSP_UHPINotReady<br/></p>
<p><b>12.45.9.2 -140xx: AAX Host errors<br/></b></p>
<p>These errors relate to logic failures in the AAX host software. These errors can be due to plug-in bugs or system<br/>configuration problems.<br/></p>
<p><b>Table 2: AAX Host Software error codes<br/></b></p>
<p><b>Value Definition<br/></b>-14001 kAAXH_Result_Warning<br/>-14003 kAAXH_Result_UnsupportedPlatform<br/>-14004 kAAXH_Result_EffectNotRegistered<br/>-14005 kAAXH_Result_IncompleteInstantiationRequest<br/>-14006 kAAXH_Result_NoShellMgrLoaded<br/>-14007 kAAXH_Result_UnknownExceptionLoadingTIPlugIn<br/>-14008 kAAXH_Result_EffectComponentsMissing<br/>-14009 kAAXH_Result_BadLegacyPlugInIDIndex<br/>-14010 kAAXH_Result_EffectFactoryInitedTooManyTimes<br/>-14011 kAAXH_Result_InstanceNotFoundWhenDeinstantiating<br/>-14012 kAAXH_Result_FailedToRegisterEffectPackage<br/>-14013 kAAXH_Result_PlugInSignatureNotValid<br/>-14014 kAAXH_Result_ExceptionDuringInstantiation<br/>-14015 kAAXH_Result_ShuffleCancelled<br/>-14016 kAAXH_Result_NoPacketTargetRegistered<br/>-14017 kAAXH_Result_ExceptionReconnectingAfterShuffle<br/>-14018 kAAXH_Result_EffectModuleCreationFailed<br/>-14019 kAAXH_Result_AccessingUninitializedComponent<br/>-14020 kAAXH_Result_TIComponentInstantiationPostponed<br/>-14021 kAAXH_Result_FailedToRegisterEffectPackageNotAuthorized<br/>-14022 kAAXH_Result_FailedToRegisterEffectPackageWrongArchitecture<br/>-14023 kAAXH_Result_PluginBuiltAgainstIncompatibleSDKVersion<br/>-14023 kAAXH_Result_PluginBuiltAgainstIncompatibleSDKVersion<br/>-14100&#8727; kAAXH_Result_InvalidArgumentValue<br/>-14101&#8727; kAAXH_Result_NameNotFoundInPageTable<br/></p>
<p>&#8727;Overlaps with -141xx: TI System errors definitions<br/></p>
<p><b>12.45.9.3 -141xx: TI System errors<br/></b></p>
<p>These errors relate to logic failures in the TI management software and generally indicate a failure in the HDX<br/>system services such as buffered message queues, context management, and callback timing.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.45 HDX DSP Guide 223<br/></b></p>
<p><b>Table 3: TI system error codes<br/></b></p>
<p><b>Value Definition<br/></b>-14101 eTISysErrorNotImpl<br/>-14102 eTISysErrorMemory<br/>-14103 eTISysErrorParam<br/>-14104 eTISysErrorNull<br/>-14105 eTISysErrorCommunication<br/>-14106 eTISysErrorIllegalAccess<br/>-14107 eTISysErrorDirectAccessOfFifoBlocksUnsupported<br/>-14108 eTISysErrorPortIdOutOfBounds<br/>-14109 eTISysErrorPortTypeDoesNotSupportDirectAccess<br/>-14110 eTISysErrorFIFOFull<br/>-14111 eTISysErrorRPCTimeOutOnDSP<br/>-14112 eTISysErrorShellMgrChip_SegsDontMatchAddrs<br/>-14113 eTISysErrorOnChipRPCNotRegistered<br/>-14114 eTISysErrorUnexpectedBufferLength<br/>-14115 eTISysErrorUnexpectedEntryPointName<br/>-14116 eTISysErrorPortIDTooLargeForContextBlock<br/>-14117 eTISysErrorMixerDelayNotSupportedForPlugIns<br/>-14118 eTISysErrorShellFailedToStartUp<br/>-14119 eTISysErrorUnexpectedCondition<br/>-14120 eTISysErrorShellNotRunningWhenExpected<br/>-14121 eTISysErrorFailedToCreateNewPIInstance<br/>-14122 eTISysErrorUnknownPIInstance<br/>-14123 eTISysErrorTooManyInstancesForSingleBufferProcessing<br/>-14124 eTISysErrorNoDSPs<br/>-14125 eTISysBadDSPID<br/>-14126 eTISysBadPIContextWriteBlockSize<br/>-14128 eTISysInstanceInitFailed<br/>-14129 eTISysSameModuleLoadedTwiceOnSameChip<br/>-14130 eTISysCouldNotOpenPlugInModule<br/>-14130 eTISysCouldNotOpenPlugInModule<br/>-14131 eTISysPlugInModuleMissingDependcies<br/>-14132 eTISysPlugInModuleLoadableSegmentCountMismatch<br/>-14133 eTISysPlugInModuleLoadFailure<br/>-14134 eTISysOutOfOnChipDebuggingSpace<br/>-14135 eTISysMissingAlgEntryPoint<br/>-14136 eTISysInvalidRunningStatus<br/>-14137 eTISysExceptionRunningInstantiation<br/>-14138 eTISysTIShellBinaryNotFound<br/>-14139 eTISysTimeoutWaitingForTIShell<br/>-14140 eTISysSwapScriptTimeout<br/>-14141 eTISysTIDSPModuleNotFound<br/>-14142 eTISysTIDSPReadError<br/></p>
<p><b>12.45.9.4 -142xx: DIDL errors<br/></b></p>
<p>These errors all relate to the dynamic library loading system that manages ELF DLL binaries on Pro Tools HDX<br/>hardware. For example, a eDIDL_FileNotFound error will be raised if the ELF DLL name specified by an<br/>Effect's Describe code does not match any DLL that is present in the plug-in's bundle.<br/></p>
<p><b>Table 4: DIDL error codes<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>224 Module Documentation<br/></b></p>
<p><b>Value Definition<br/></b>-14201 eDIDL_FileNotFound<br/>-14202 eDIDL_FileNotOpen<br/>-14203 eDIDL_FileAlreadyOpen<br/>-14204 eDIDL_InvalidElfFile<br/>-14205 eDIDL_ImageNotFound<br/>-14206 eDIDL_SymbolNotFound<br/>-14207 eDIDL_DependencyNotLoaded<br/>-14208 eDIDL_BadAlignment<br/>-14209 eDIDL_NotImplemented<br/></p>
<p><b>12.45.9.5 -144xx: HDX hardware errors<br/></b></p>
<p>These errors relate to failures on the HDX hardware itself. Plug-ins should never be able to trigger these error<br/>codes, which indicate low-level problems in the system.<br/></p>
<p><b>Table 5: HDX hardware error codes<br/></b></p>
<p><b>Value Definition<br/></b>-14401 eBerlinImageError<br/>-14402 eBerlinImageWriteError<br/>-14403 eBerlinInvalidArgs<br/>-14404 eBerlinCantGetTMSChannel<br/>-14405 eBerlinChunkWriteError<br/>-14406 eBerlinChunkReadError<br/>-14407 eBerlinInvalidReqID<br/>-14408 eBerlinDSPInResetError<br/>-14409 eBerlinDSPTimeOut<br/>-14410 eBerlinIncorrectTdmCableWiring<br/>-14411 eBerlinInvalidClock<br/></p>
<p><b>12.45.9.6 -145xx: DHM isochronous audio engine errors<br/></b></p>
<p>These errors relate to failures within the HDX audio engine software. Plug-ins should never be able to trigger these<br/>error codes, which indicate low-level problems in the system.<br/></p>
<p><b>Table 6: DHM isochronous audio engine error codes<br/></b></p>
<p><b>Value Definition<br/></b>-14500 eDsiIsochEngineGenericError<br/>-14501 eDsiIsochEngineWrongChannelNumber<br/>-14502 eDsiIsochEngineTxRingFull<br/>-14503 eDsiIsochEngineRxRingNotReady<br/>-14504 eDsiIsochEngineWrongNumberOfSamplesRequest<br/>-14505 eDsiIsochEngineUnrecognizedSampleRate<br/>-14506 eDsiIsochEngineUnsupportedSampleSizeBytes<br/>-14507 eDsiIsochEngineUnsupportedNumberOfChannels<br/>-14508 eDsiIsochEngineUnsupportedSampleRate<br/>-14509 eDsiIsochEngineDMAAlreadyEnabled<br/>-14510 eDsiIsochEngineDMAAlreadyDisabled<br/>-14511 eDsiIsochEngineInterruptHandlerAlreadyInstalled<br/>-14512 eDsiIsochEngineBadCardRecord<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 225<br/></b></p>
<p>-14513 eDsiIsochEngineCantSetValueDuringStreaming<br/>-14514 eDsiIsochEngineStreamingAlreadyStarted<br/>-14515 eDsiIsochEngineStreamingAlreadyStopped<br/>-14516 eDsiIsochEngineStreamingCantBeStarted<br/>-14517 eDsiIsochEngineUnsupportedSamplesPerInterrupt<br/>-14518 eDsiIsochEngineCantSetSamplesPerInterrupt<br/>-14519 eDsiIsochEngineInterruptLoopAlreadyExists<br/>-14520 eDsiIsochEngineGlobalDMADisabled<br/>-14521 eDsiIsochEngineActiveInterruptMaskAlreadyEnabled<br/>-14522 eDsiIsochEngineSDI0Errors<br/></p>
<p><b>12.45.9.7 -30xxx: Dynamically-generated error codes<br/></b></p>
<p>Errors in the -30xxx range are dynamically generated codes, and thus the same failure point could generate a<br/>different error code depending on the order in which errors occurred. These kinds of error codes are used heavily<br/>by the TI Shell Manager, the host component that interacts with the on&#8211;DSP shell environment.<br/></p>
<p>If one of these error codes is being generated by the TI Shell Manager (the most common case) then you should<br/>be able to get more information about the failure by enabling the following DigiTrace logging facility:<br/></p>
<p>DTF_TISHELLMGR=file@DTP_NORMAL<br/></p>
<p>or, within the DSH tool:<br/></p>
<p>enable_trace_facility [DTF_TISHELLMGR, DTP_NORMAL]<br/></p>
<p>This should result in a log with more information such as the name of the failing plug-in, the dynamically gen-<br/>erated error code, and a string description of its meaning. Depending on the failure case, the DAE dish com-<br/>mand getlastdsploaderror can also sometimes be used to retrieve the description string for a dynamically-<br/>generated error if it was the last error generated during the DSP loading operation.<br/></p>
<p>Collaboration diagram for HDX DSP Guide:<br/></p>
<p><b>12.46 Page Table Guide<br/></b></p>
<p>How to map a plug-in's parameters to control surfaces.<br/></p>
<p><b>12.46.1 Contents<br/></b></p>
<p>&#8226; Introduction<br/></p>
<p>&#8226; Avid Control Surfaces<br/></p>
<p>&#8226; Plug-In Page Table Guidelines<br/></p>
<p>&#8226; Avid Center Section Page Tables<br/></p>
<p>&#8226; EUCON Page Tables<br/></p>
<p>&#8226; Implementing Page Tables<br/></p>
<p>&#8226; Appendix A. Get Parameter Value Info<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>226 Module Documentation<br/></b></p>
<p><b>12.46.2 Introduction<br/></b></p>
<p><b>12.46.2.1 Control Surfaces Overview<br/></b></p>
<p>A tactile, external hardware control surface can be used to control different aspects of an application such as Pro<br/>Tools or Media Composer. Users prefer purpose-built control surfaces for DAW manipulation due to the control<br/>surface's superior accessibility, tactile feel, ergonomics, and user feedback.<br/>Avid provides several different control surface products designed to accommodate a wide variety of user needs and<br/>workflows. Avid control surfaces implement EUCON (Extended User Control), a high-speed open control protocol<br/>featuring high-resolution, responsive control over almost all software functions. Pro Tools includes support for<br/>Mackie's HUI protocol and can interface with third-party control surfaces that implement this protocol.<br/></p>
<p><b>12.46.2.2 Page Tables Overview<br/></b></p>
<p>When a control surface is attached to a DAW system running AAX plug-ins the surface can be used to manipulate<br/>plug-ins' parameters. Plug-ins define the mapping between their parameters and control surface encoders using<br/>page tables.<br/>Abstractly, a page table is a static mapping of a plug-in's controls to the interface of the control surface. Since a<br/>plug-in may have many more controls than the control surface can accommodate at a given time, the controls may<br/>be split across several &quot;pages&quot; that the user can freely switch between.<br/>More concretely, a set of page tables is simply a set of single dimensional arrays. Each slot of the array corre-<br/>sponds to a particular rotary encoder or push-button of the control surface. By inserting control indices into the<br/>elements of the array, a plug-in's controls are mapped to particular tangible controls of the CS. Page tables are<br/>stored as XML data created by the Page Table Editor application available as part of the AAX SDK Toolkit on the<br/>My Toolkits and Downloads page at avid.com. The XML is referenced by the plug-in as a resource using<br/>a call to AAX_IEffectDescriptor::AddResourceInfo().<br/>The following sections describe the various interfaces that the supported control surfaces provide for modifying<br/>plug-in parameters. Later, the specifics of implementation of page tables is described.<br/></p>
<p><b>12.46.3 Avid Control Surfaces<br/></b></p>
<p><b>12.46.3.1 EUCON<br/></b></p>
<p><b>12.46.3.1.1 Avid Dock, Avid S1 and Avid Control app </b>The free Avid Control app provides a EUCON-enabled<br/>control surface for iPad or Android tablet. The app offers a host of touch controls and visual feedback. Combining<br/>Avid Control with Avid Dock, or Artist S1 hardware adds additional touch workflows and custom control. When<br/>laying out plug-in parameters on its display, Avid Control uses the same page table layouts as Avid S1.<br/>Avid Control app display controlling an EQ plug-in instance<br/>The Avid S1 can run as either a standalone device or connected to additional units to form a larger system for audio<br/>mixing applications. The plug-in editing section for the S1 consists of 8 touch and velocity sensitive rotary encoders,<br/>and 8 switches. The rotary knobs are physically laid out horizontally along the top of the control surface as a group<br/>of 8, with the switches located directly below the encoders (the &#8220;ON&#8221; buttons). The alpha-numeric scribble strip and<br/>plug-in editing display are 8 characters wide. The S1is mapped using the Av18 page table, with the recommendation<br/>that the most important parameter is listed first. Both rotary encoders and switches are numbered right to left, as 0<br/>through 7, and 8 through 15 respectively.<br/>Avid Dock provides dedicated transport, focus fader and automation and navigation controls. It is designed with a<br/>dock to mount an iPad or Android Tablet running the free Avid Control app, providing control of Pro Tools and plugin<br/>parameters. The Dock provides eight push-top, touch-sensitive knobs that interact with whatever knobset has been<br/>chosen in the Avid Control app. Select an EQ, plug-in, send, pan, or other item, and all parameters instantly map to<br/>the knobs for tweaking. The knob section is mapped using the Av81 page table, divided into 2 series of 4 knobs.<br/>Avid Dock with iPad and Avid Control app<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 227<br/></b></p>
<p><b>12.46.3.1.2 Avid S6 </b>Avid S6 is a modular control surface solution for the most demanding audio mixing and<br/>production environments. Built on the same proven technology that is core to the industry-leading ICON and System<br/>5 product families, S6 enables mixers to quickly turn around complex projects while swiftly handling last-minute<br/>changes. With its unparalleled ability to simultaneously control multiple Pro Tools and other EUCON-enabled DAWs<br/>over simple Ethernet, S6 also speeds workflows and enables network collaboration on a single integrated platform.<br/>Avid S6<br/></p>
<p>The main touch screen display on S6 can be configured to show graphs representing a plug-in's frequency or dynam-<br/>ics response curves. To support this feature, a plug-in must implement AAX_IEffectParameters::GetCurveData() for<br/>the applicable AAX_ECurveType selector.<br/></p>
<p><b>12.46.3.2 VENUE<br/></b></p>
<p>VENUE is a revolutionary line of digital live sound systems that deliver amazing sound quality, reliability, flexibility,<br/>and ease-of-use. These live sound systems come equipped with plug-in editing sections, and work together to<br/>deliver studio-grade sound and powerful performance. For more information about using AAX plug-ins with VENUE<br/>systems see the VENUE Guide.<br/></p>
<p><b>12.46.3.2.1 VENUE </b>| <b>S6L </b>VENUE | S6L is a modular system designed to take on the world's most demanding<br/>tours and events with ease. Offering unprecedented processing capabilities - with over 300 processing channels<br/>- S6L delivers unrelenting performance and reliability through its advanced engine design and backs it up with<br/>modern touchscreen workflows and scalability to meet any challenge. VENUE | S6L console<br/></p>
<p>S6L uses the same modular components as Avid S6, but uses a different set of encoder layouts on these compo-<br/>nents in order to best support mixing workflows in a live sound setting. When displaying plug-in parameters, S6L<br/>maps the parameters onto its CKM. The leftmost two columns on the CKM are reserved (one column for constant<br/>operations, one as a &quot;spacer&quot; row with not assignments), leaving six columns of knob cells available for plug-in<br/>parameters. S6L uses the 'Av46' 4x6 page table type to map plug-in parameters to the CKM knob cells in this<br/>mode.<br/></p>
<p>If a 'Av46' page table is not available from the plug-in, S6L uses the plug-in's C|24 'FrTL' layout in order to<br/>map one plug-in parameter to each of the 24 available knob cells. This generally leads to a very sub-optimal layout<br/>of parameters on the surface, both because the C|24 page table is designed for a linear layout and because it results<br/>in only one parameter assigned per knob cell, leaving two of the available encoders unassigned. Therefore, Avid<br/>strongly recommends that all AAX DSP plug-ins which are compatible with S6L are updated to include the new 4x6<br/>page table layout.<br/></p>
<p>S6L also supports dedicated EQ and dynamics plug-ins: a user can select a particular plug-in as his EQ or dynamics<br/>processor and use the surface's EQ, Compressor/Limiter, and Expander/Gate selectors to display the plug-in's<br/>parameters using a fixed layout for the given plug-in type. This mode uses the plug-in's D-Control Center Section<br/>EQ or Dynamics page tables when mapping plug-in controls. In order to be selectable as the system's EQ or<br/>dynamics processor a plug-in must support the Avid center section page tables.<br/></p>
<p><b>12.46.4 Plug-In Page Table Guidelines<br/></b></p>
<p>This section is intended as a guide in setting up defined 'pages' using some general rules. However, due to the<br/>sheer number of variables, it is simply not possible to account for all scenarios. But by following these suggestions,<br/>an AAX plug-in developer should find these guidelines useful in setting up their own plug-in pages. Moreover, it<br/>is hoped that a consistent and somewhat standard mapping topology will be realized across the broad range of<br/>plug-ins and control surfaces.<br/></p>
<p>Here, we are primarily concerned with the number of controls on a control surface (CS) available for plug-in editing;<br/>and secondarily with the layout of controls provided for plug-ins. Accordingly, we need a method of mapping a<br/>plug-in's control parameters to a CS, and we need to take into account the varying numbers of controls available on<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>228 Module Documentation<br/></b></p>
<p>a CS. Using 'page tables', from a software point of view, a plugin's control parameters can be mapped to a CS. Each<br/>page of the page table describes which of the plugin's parameters will be accessible from the CS's controls that<br/>are used for plug-in editing. Multiple pages are needed in the case where a CS has fewer controls available than<br/>the actual number of controls on a plug-in. We begin by stating guidelines that should be followed when mapping a<br/>plug-in's control parameters to a CS. At the end of this chapter, you will find the technical details of creating page<br/>tables for your plug-in.<br/>The following guidelines are for simple, generic control surfaces. More advanced CSs, such as the MackieHUI and<br/>ProControl, have some guidelines of their own which are listed after these.<br/></p>
<p><b>12.46.4.1 General Guidelines<br/></b></p>
<p><b>Map a plug-in's controls from left-top to right-bottom sequentially onto each page. </b>Follow the layout of the<br/>plug-in GUI as closely as possible, allowing the controls to sequentially map to the Control Surface in the order<br/>specified above. In so doing, the CS controls will match the plug-in GUI; in the sense that by counting the location<br/>of a given control on the PI GUI, one should be able to grasp the corresponding slider or pot on the CS.<br/>Note that Master Bypass, located in the plug-in's floating inserts window, should nearly always be placed as the<br/>first control on the first page. The only time this guideline might not be followed is if the plug-in has a particularly<br/>favorable layout for the control surface, and where this placement of Master Bypass would disrupt it. Also, on some<br/>control surfaces a dedicated bypass is already provided, in which case theMaster Bypass should not be mapped<br/>into the page table.<br/></p>
<p><b>Related control parameters should be grouped together on the same page. </b>Controls that are often 'adjusted'<br/>with other similar or related controls should be mapped to the same page. This enhances the users ability to tweak<br/>related parameters and alleviates unnecessary paging.<br/></p>
<p><b>Related control parameters should not be split across pages. </b>This follows directly from the bullet above. If<br/>some closely related controls cannot all fit on the same page, it is better to leave some blanks (i.e., unused pots,<br/>sliders, or switches) and move onto the next page where they can be adjusted together.<br/>As a hypothetical example, let's say a control surface has 5 sliders, and we are mapping an EQ PI with 6 parameters<br/>- a low, mid, and high frequency band which has gain for each band. It would be best to map them to the CS as<br/>follows on page 1, from left to right on the CS: low freq, low gain, mid freq, mid gain, blank. Then map the remaining<br/>two parameters onto page 2: high freq, high gain, blank, blank, blank.<br/></p>
<p><b>Equivalent left and right stereo parameters should remain on the same page. </b>Since adjusting the left or right<br/>parameter of a stereo PI has considerable impact on the sound field, it is important that equivalent left and right<br/>stereo controls remain on the same page. Contrast this to placing the left parameters on one page, and the right<br/>parameters on another which is not desirable. This rule also changes according to the controller's layout. As an<br/>example, the CS-10 has 6 pots for PI editing arranged in a matrix of 3 rows x 2 columns. From left to right, the pots<br/>in row 1 are numbered 1 and 4. In row 2 the pots are numbered 2 and 5. Finally, the pots in row3 are numbered 3<br/>and 6. A layout for L/R controls should be mapped param1L = control 1, param1R = control 4, and so on.<br/></p>
<p><b>Repeat control parameters on pages where it makes sense to do so. </b>In some situations, it is desirable to<br/>have access to the same control on many pages. For example, this might mean having an output and/or input gain<br/>control available on each page of an EQ PI - since EQs change the overall gain. This is especially desirable if there<br/>would otherwise be blanks (i.e., unused pots, sliders, or switches).<br/></p>
<p><b>12.46.5 Avid Center Section Page Tables<br/></b></p>
<p>&quot;Center Section&quot; page tables provide a mapping of plug-in parameters to dedicated functions. These page tables are<br/>used by D-Control/D-Command (ICON), D-Show (VENUE), and EUCON-enabled consoles to provide a consistent<br/>user experience when interacting with EQ and Dynamics plug-ins.<br/>There are three Center Section page table types:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 229<br/></b></p>
<p><b>Table type Plug-in category<br/></b>'DgEQ' EQ<br/>'DgCP' Compressor/Limiter (Dynamics)<br/>'DgGT' Expander/Gate (Dynamics)<br/></p>
<p>Dynamics plug-ins that include both Compressor/Limiter and Expander/Gate processing should support both DgCP<br/>and DgGT page tables.<br/>The control surfaces which use these page tables each use a different physical layout of parameter functions onto<br/>the surface. These layouts have been designed to provide an intuitive and consistent way to control EQ and<br/>Dynamics plug-ins in a way that is appropriate for the encoder layout on each surface. By adding these page<br/>tables to your EQ and Dynamics plug-ins, your plug-ins will map correctly to all products which use these tables.<br/></p>
<p><b>12.46.5.1 Center Section Page Table Guidelines<br/></b></p>
<p>It is important to note that Center Section page table types are different from all other page table types in a funda-<br/>mental way:<br/><b>Each slot in the page table is pre-defined for a specific type of control. Therefore, your plug-in must conform<br/>to this pre-defined layout.<br/></b>The purpose of these tables is to give the user a standard interface for EQ and Dynamics plug-ins - no matter what<br/>particular plug-in they are using. It allows the user to quickly access the most common controls in their favorite<br/>EQ or Dynamics plug-ins. This is different from all other page table types because the only restriction on other<br/>page table types is that - for types that have dedicated discrete controls - you cannot place continuous controls in<br/>a dedicated switch. However, the user will also know that if there are controls they would like to access that are<br/>missing from the Center Section, they can access them through one of the other layouts available on the control<br/>surface.<br/>You'll notice looking at the pictures of these sections in D-Control (below) that the only scribble strips are in the<br/>center of the section. Unlike the Channel Strip section, there is not a scribble strip to label each control. The<br/>control's purpose is physically printed on the control surface. This model of hard-coding &quot;center section&quot; plug-in<br/>functions to specific encoders is followed on VENUE systems and on EUCON-enabled control surfaces which use<br/>these table types as well. That is why it is imperative that your plug-in conform to the pre-defined layout.<br/>Because of the strict definitions of the layouts, it may mean that 1) not all of the controls for your plug-in can fit in<br/>these sections, and that 2) there may be controls your plug-in does not have and therefore are blank in this view. For<br/>example, let's say your plug-in is a 10-band EQ that does not have individual Q controls on any of the bands. Such<br/>a plug-in will be forced to leave off some of its bands, even though all Q controls specific to the bands on the page<br/>table are empty. That is fine as there will be another way for the user to display the plug-in on the control surface<br/>that will include all of the controls. For example, on D-Control, a user can also view an EQ or Dynamics plug-in in<br/>both the Channel Strip and Custom Fader modes which will display all controls. The important point is this:<br/><b>Do not assign a parameter to a Center Section page table slot that does not match the parameter's function.<br/></b>If you do, the parameter's function will be mislabeled and will cause confusion for the user.<br/>You should only implement one page for these Center Section layouts. This is different from the other page table<br/>types, where it is expected to implement as many pages as necessary to give access to all controls in the plug-in.<br/>In the case of the Center Section layouts, you should only define one page, except in the case when the plug-in has<br/>separate controls for each channel (Left, Right, Center, etc.).<br/><b>More than one page in Center Section layouts is allowed only if the plug-in has separate controls for each<br/>channel.<br/></b>For example, if your EQ plug-in allows the user to change the EQ differently for the left and right channels, then you<br/>would implement two pages for the DgEQ page table. You'll notice in the pictures below for the EQ and Dynamics<br/>sections of D-Control, there are buttons labeled for channel selections (L, LC, C, RC, R, etc.). The control surface will<br/>automatically map the pages to the buttons, according to the standard order for surround channels. For example, in<br/>a stereo EQ, Left controls should be in the first page, and Right controls in the second. D-Control will automatically<br/>map page 1 to the L button and page 2 to the R button.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>230 Module Documentation<br/></b></p>
<p><b>Note<br/></b>We cannot emphasize strongly enough that trying to fill in all of your controls into these layouts, whether it is<br/>by creating extra pages, or by filling in empty slots, will only serve to confuse the user. You must adhere strictly<br/>to the guidelines given for these sections.<br/></p>
<p><b>12.46.5.1.1 EQ Center Section Page Table Guidelines </b>To demonstrate the guidelines for EQ Center Section<br/>tables, we will use the D-Control Center Section encoders. Since all control surfaces which use Center Section<br/>page tables use a similar approach with hard-coded layouts for these types, the guidelines in this section are<br/>equally applicable to all control surfaces.<br/></p>
<p>Take a look at D-Control's EQ section more closely in the image below.<br/></p>
<p>D-Control EQ Center Section.<br/></p>
<p>It supports a maximum of seven bands of EQ, each a vertical column of controls and labeled from left to right as<br/>follows:<br/></p>
<p>&#8226; HPF (High-Pass Filter, nominally a high-pass filter or low frequency notch filter)<br/></p>
<p>&#8226; LF (Low Frequency, nominally a parametric EQ or low frequency shelf filter)<br/></p>
<p>&#8226; LMF (Low-Mid Frequency, nominally a parametric EQ)<br/></p>
<p>&#8226; MF (Mid Frequency, nominally a parametric EQ)<br/></p>
<p>&#8226; HMF (High-Mid Frequency, nominally a parametric EQ)<br/></p>
<p>&#8226; HF (High Frequency, nominally a parametric EQ or high frequency shelf filter)<br/></p>
<p>&#8226; LPF (Low-Pass Filter, nominally a low-pass filter or high frequency notch filter)<br/></p>
<p>Each of these bands has a Q/Slope control, Frequency control, and an In Circuit/ Out of Circuit button. Five of<br/>the bands have an additional Gain control. Four of the bands have an additional EQ type selector switch, each<br/>surrounded by a pair of EQ type LED's. Input and Output Level controls are also available, as is a multi-channel<br/>Link button in the middle section.<br/></p>
<p><b>Note<br/></b>If an EQ plug-in implements a band that does not have an In/Out Circuit control or a Type control, but wants<br/>the related LED's to light properly, please see the discussion of the GetParameterValueInfo() API<br/>below.<br/></p>
<p>The topmost rotary encoders in the HPF, LF, HF, and LPF bands are not labeled but they are indeed Q / Slope<br/>controls. The EQ type selector switches located between the Q/Slope and Frequency knobs control the type of filter<br/>on that band. Thus they define the behavior of all controls in that band (and not just the unlabeled Q/Slope control).<br/></p>
<p>The EQ page table indices map to the dedicated EQ Center Section hardware encoders as follows:<br/></p>
<p>&#8226; Equalization 'DgEQ'<br/></p>
<p>1. High Pass - In Circuit switch<br/>2. High Pass - Type switch<br/>3. High Pass - Frequency<br/>4. High Pass - Q/Slope<br/>5. Low Filter - In Circuit switch<br/>6. Low Filter - Type switch<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 231<br/></b></p>
<p>7. Low Filter - Gain<br/>8. Low Filter - Frequency<br/>9. Low Filter - Q/Slope<br/></p>
<p>10. Low-Mid Filter - In Circuit switch<br/>11. Low-Mid Filter - Type switch<br/>12. Low-Mid Filter - Gain<br/>13. Low-Mid Filter - Frequency<br/>14. Low-Mid Filter - Q/Slope<br/>15. Mid Filter - In Circuit switch<br/>16. Mid Filter - Type switch<br/>17. Mid Filter - Gain<br/>18. Mid Filter - Frequency<br/>19. Mid Filter - Q/Slope<br/>20. High-Mid Filter - In Circuit switch<br/>21. High-Mid Filter - Type switch<br/>22. High-Mid Filter - Gain<br/>23. High-Mid Filter - Frequency<br/>24. High-Mid Filter - Q/Slope<br/>25. High Filter - In Circuit switch<br/>26. High Filter - Type switch<br/>27. High Filter - Gain<br/>28. High Filter - Frequency<br/>29. High Filter - Q/Slope<br/>30. Low Pass - In Circuit switch<br/>31. Low Pass - Type switch<br/>32. Low Pass - Frequency<br/>33. Low Pass - Q/Slope<br/>34. Input Gain<br/>35. Output Gain<br/>36. Multi-channel Link switch<br/>37. High Pass - Q/Slope alternate parameter<br/>38. Low Filter - Q/Slope alternate parameter<br/>39. Low-Mid Filter - Q/Slope alternate parameter<br/>40. Mid Filter - Q/Slope alternate parameter<br/>41. High-Mid Filter - Q/Slope alternate parameter<br/>42. High Filter - Q/Slope alternate parameter<br/>43. Low Pass - Q/Slope alternate parameter<br/></p>
<p><b>Note<br/></b>In order to use the &quot;Q/Slope alternate parameter&quot; functions in the EQ page table, a plug-in must respond to<br/>the AAX_ePageTable_UseAlternateControl selector in the GetParameterValueInfo() method. When the band<br/>type is changed, the control surface will call into the plug-in with this selector to determine if the control in the<br/>&quot;Alt&quot; position should be used. Please see the discussion of the GetParameterValueInfo() below.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>232 Module Documentation<br/></b></p>
<p>If your plug-in supports fewer than seven simultaneous bands of EQ, you have some options for where to place<br/>them. We recommend the following placement guidelines so users have consistency with various EQ plug-ins.<br/></p>
<p>&#8226; If you only have one band of EQ, use the LF band.<br/></p>
<p>&#8226; If you have one to four fully parametric bands, use LF, LMF, HMF, and HF (starting from left to right). (Skip the<br/>MF band.)<br/></p>
<p>&#8226; If you have up to two shelving filters and two parametric bands, use LF (LF shelf), LMF (para), HMF (para),<br/>and HF (HF shelf). (Skip the MF band.)<br/></p>
<p>Note that this layout includes a few additional functions not in D-Control's EQ section. These extra functions are the<br/>&quot;Low-Mid Filter - Type switch&quot;, &quot;Mid Filter - Type switch&quot;, and &quot;High-Mid Filter - Type switch&quot; slots.<br/></p>
<p><b>12.46.5.1.2 Dynamics Center Section Page Table Guidelines </b>To demonstrate the guidelines for Dynamics<br/>Center Section tables, we will use the D-Control Center Section encoders. As with the EQ Center Section tables<br/>above, all control surfaces which use Center Section page tables use a similar approach with hard-coded layouts<br/>for these types, the guidelines in this section are equally applicable to all control surfaces.<br/></p>
<p>The D-Control Dynamics section is shown below. Keep in mind that the D-Control's Dynamics section displays<br/>page tables for both the Compressor/Limiter page table type and the Expander/Gate type. Therefore, the function<br/>of certain rotaries and switches differs depending on which page table type has been loaded. In these cases, there<br/>is a LED to indicate the current function of a rotary or switch.<br/></p>
<p>D-Control Dynamics Center Section.<br/></p>
<p>Several rotary encoders have alternate uses while others are always dedicated to one function. The two page<br/>tables' indices map to the dedicated Dynamics Center Section hardware encoders as follows:<br/></p>
<p>&#8226; Compressor/Limiter 'DgCP'<br/></p>
<p>1. Threshold<br/>2. Ratio<br/>3. Attack Time<br/>4. Release Time<br/>5. Knee<br/>6. Make-up Gain<br/>7. High Pass - In Circuit / Out of Circuit switch<br/>8. High Pass - EQ Type switch (with notch and high-pass filter LEDs)<br/>9. High Pass - Frequency<br/></p>
<p>10. High Pass - Q/Slope<br/>11. Low Pass - In Circuit / Out of Circuit switch<br/>12. Low Pass - EQ Type switch (with notch and low-pass filter LEDs)<br/>13. Low Pass - Frequency<br/>14. Low Pass - Q/Slope<br/>15. External Key switch (middle section)<br/>16. Key Listen switch (middle section)<br/>17. Input Gain<br/>18. Output Gain<br/>19. Multi-channel Link switch (middle section)<br/>20. Depth (not included on ICON)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 233<br/></b></p>
<p>&#8226; Expander/Gate 'DgGT'<br/>1. Threshold<br/>2. Ratio<br/>3. Range<br/>4. Attack Time<br/>5. Release Time<br/>6. Hysteresis<br/>7. Hold<br/>8. High Pass - In Circuit / Out of Circuit switch<br/>9. High Pass - EQ Type switch (with notch and high-pass filter LEDs)<br/></p>
<p>10. High Pass - Frequency<br/>11. High Pass - Q/Slope<br/>12. Low Pass - In Circuit / Out of Circuit switch<br/>13. Low Pass - EQ Type switch (with notch and low-pass filter LEDs)<br/>14. Low Pass - Frequency<br/>15. Low Pass - Q/Slope<br/>16. External Key switch (middle section)<br/>17. Key Listen switch (middle section)<br/>18. Input Gain<br/>19. Output Gain<br/>20. Multi-channel Link switch (middle section)<br/>21. Knee (not included on ICON)<br/></p>
<p>The compressor/limiter page table, DgCP, supports all the controls above except Range, Hysteresis, and Hold. (As<br/>you create the page table in the Page Table Editor, this is clear.)<br/>The expander/gate page table, DgGT, supports all the controls above except Knee and Makeup Gain. It does<br/>support both Ratio and Range. The user presses the Page button to select between them.<br/>A plug-in can support both DgCP and DgGT page tables. Again, the user presses the Page button to select between<br/>them. If a plug-in supports both of these page tables and the DgGT page table includes support for both Ratio and<br/>Range controls, pressing the Page button will switch between all available controls as follows:<br/>DgCP -&gt; DgGT with Ratio -&gt; DgGT with Range (and all other controls unchanged)-&gt; DgCP -&gt; ...<br/></p>
<p><b>12.46.5.2 Center Section Parameter Mapping to Single-Column/Row Layouts<br/></b></p>
<p>The following tables show the layout mapping and hard-coded names for center section page tables on EUCON<br/>surfaces which use single-column or single-row layouts for Eq and Dyn plug-in modes. The tables show the assign-<br/>ment of specific center section table indices to cells on the EUCON control surface. Each EUCON control surface<br/>cell includes three encoders: a rotary knob encoder and two push-button encoders. These tables use the following<br/>codes to indicate encoders in each control surface cell:<br/></p>
<p>&#8226; Knob = Knob encoder<br/>&#8226; Knob(Sel I) = Knob encoder with Sel active<br/>&#8226; Knob(Sel O) = Knob encoder with Sel inactive<br/>&#8226; In = In switch<br/></p>
<p><b>Note<br/></b>For center section page table layouts the &quot;Sel&quot; push-button encoder is only used to toggle the rotary encoder<br/>between two possible parameters. It is never mapped to a single discrete parameter in these layouts.<br/>With some versions of EUCON, the cell mapping on the first page is &quot;reversed&quot; relative to the second page<br/>when the surface is laid out horizontally; the first page moves left to right through increasing cell indices, while<br/>later pages move right to left.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>234 Module Documentation<br/></b></p>
<p><b>Page 1 Page 2<br/>Far from user / Left Close to user / Right Far from user / Left Close to user / Right<br/></b></p>
<p><b>Func-<br/>tion<br/></b></p>
<p><b>8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9<br/></b></p>
<p><b>1<br/>HPF<br/>In/</b>&#8592;&#8617;<br/><b>Out<br/></b></p>
<p>Knob/In<br/></p>
<p><b>2<br/>HPF<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>3<br/>HPF<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>4<br/>HPF<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>5<br/>Lo<br/>In/</b>&#8592;&#8617;<br/><b>Out<br/></b></p>
<p>In<br/></p>
<p><b>6<br/>Lo<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>7<br/>Lo<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>8<br/>Lo<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>9<br/>Lo<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>10<br/>Lo<br/>Mid<br/>In/</b>&#8592;&#8617;<br/><b>Out<br/></b></p>
<p>In<br/></p>
<p><b>11<br/>Lo<br/>Mid<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>12<br/>Lo<br/>Mid<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>13<br/>Lo<br/>Mid<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>14<br/>Lo<br/>Mid<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 235<br/></b></p>
<p><b>Page 1 Page 2<br/>15<br/></b></p>
<p><b>Mid<br/>In/</b>&#8592;&#8617;<br/><b>Out<br/></b></p>
<p>In<br/></p>
<p><b>16<br/>Mid<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>17<br/>Mid<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>18<br/>Mid<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>19<br/>Mid<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>20 Hi<br/>Mid<br/>In/</b>&#8592;&#8617;<br/><b>Out<br/></b></p>
<p>In<br/></p>
<p><b>21 Hi<br/>Mid<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>22 Hi<br/>Mid<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>23 Hi<br/>Mid<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>24 Hi<br/>Mid<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>25 Hi<br/>In/</b>&#8592;&#8617;<br/><b>Out<br/></b></p>
<p>In<br/></p>
<p><b>26 Hi<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>27 Hi<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>28 Hi<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>29 Hi<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>30<br/>LPF<br/>In/</b>&#8592;&#8617;<br/><b>Out<br/></b></p>
<p>Knob/In<br/></p>
<p><b>31<br/>LPF<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>32<br/>LPF<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>236 Module Documentation<br/></b></p>
<p><b>Page 1 Page 2<br/>33<br/></b></p>
<p><b>LPF<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>34<br/>In-<br/>put<br/>Level<br/></b></p>
<p>Knob<br/></p>
<p><b>35<br/>Out-<br/>put<br/>Level<br/></b></p>
<p>Knob<br/></p>
<p><b>36<br/>Link<br/></b></p>
<p><b>37<br/>HPF<br/>Q<br/>Alt<br/></b></p>
<p>Knob<br/>(Sel<br/>I)&#8727;<br/></p>
<p><b>38<br/>Lo<br/>Q<br/>Alt<br/></b></p>
<p>Knob<br/>(Sel<br/>I)&#8727;<br/></p>
<p><b>39<br/>Lo<br/>Mid<br/>Q<br/>Alt<br/></b></p>
<p>Knob<br/>(Sel<br/>I)&#8727;<br/></p>
<p><b>40<br/>Mid<br/>Q<br/>Alt<br/></b></p>
<p>Knob<br/>(Sel<br/>I)&#8727;<br/></p>
<p><b>41 Hi<br/>Mid<br/>Q<br/>Alt<br/></b></p>
<p>Knob<br/>(Sel<br/>I)&#8727;<br/></p>
<p><b>42 Hi<br/>Q<br/>Alt<br/></b></p>
<p>Knob<br/>(Sel<br/>I)&#8727;<br/></p>
<p><b>43<br/>LPF<br/>Q<br/>Alt<br/></b></p>
<p>Knob<br/>(Sel<br/>I)&#8727;<br/></p>
<p><b>12.46.5.2.1 'DgEQ' PageTable - Equalizer </b>Notes<br/></p>
<p>&#8226; The multi-channel link switch (index 36) is not mapped to any encoder in this layout<br/></p>
<p>&#8226; The knob assignments marked with an asterisk will be assigned depending on the plug-in's response to<br/>AAX_IEffectParameters::GetParameterValueInfo() with the AAX_ePageTable_UseAlternateControl selector.<br/>If the plug-in provides AAX_eUseAlternateControl_Yes then the assignment marked with an asterisk will be<br/>used.<br/></p>
<p><b>12.46.5.2.2 Both 'DgCP' and 'DgGT' PageTables - Multi-dynamics </b>If both Dynamics center section page table<br/>types are defined for the plug-in then EUCON control surfaces will use the following mapping.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 237<br/></b></p>
<p><b>Note<br/></b>Some control surfaces may only partially follow this mapping. For example, the mapping of the Artist Mix<br/>control surface in Dyn mode uses two pages: it follows this mapping for encoder cells 1-8 on the first page<br/>and follows the 'DgCP'-only mapping for encoder cells 9-16 on the second page.<br/></p>
<p><b>Page 1 Page 2<br/>Far from user / Left Close to user / Right Close to user / Left Far from user / Right<br/></b></p>
<p><b>Func-<br/>tion<br/></b></p>
<p><b>8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>1<br/></b></p>
<p><b>C<br/>Thresh-<br/>old<br/></b></p>
<p>Knob Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>2<br/></b></p>
<p><b>C<br/>Ra-<br/>tio<br/></b></p>
<p>Knob Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>3<br/></b></p>
<p><b>C<br/>At-<br/>tack<br/>Time<br/></b></p>
<p>Knob Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>4<br/></b></p>
<p><b>C<br/>Re-<br/>lease<br/>Time<br/></b></p>
<p>Knob Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>5<br/></b></p>
<p><b>C<br/>Knee<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>6<br/></b></p>
<p><b>C<br/>Gain<br/>Makeup<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>7<br/></b></p>
<p><b>HPF<br/>En-<br/>abled<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>8<br/></b></p>
<p><b>HPF<br/>Type<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>9<br/></b></p>
<p><b>HPF<br/>Freq<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>10<br/></b></p>
<p><b>HPF<br/>Q<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>11<br/></b></p>
<p><b>LPF<br/>En-<br/>abled<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>12<br/></b></p>
<p><b>LPF<br/>Type<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>238 Module Documentation<br/></b></p>
<p><b>Page 1 Page 2<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>13<br/></b></p>
<p><b>LPF<br/>Freq<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>14<br/></b></p>
<p><b>LPF<br/>Q<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>15<br/></b></p>
<p><b>Ext<br/>Key<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>16<br/></b></p>
<p><b>Key<br/>Lis-<br/>ten<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>17<br/></b></p>
<p><b>In-<br/>put<br/>Gain<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>18<br/></b></p>
<p><b>Out-<br/>put<br/>Gain<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>19<br/></b></p>
<p><b>Link<br/></b>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>20<br/></b></p>
<p><b>Depth<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>1<br/></b></p>
<p><b>X<br/>Thresh-<br/>old<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>2<br/></b></p>
<p><b>X<br/>Ra-<br/>tio<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>3<br/></b></p>
<p><b>X<br/>Range<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>4<br/></b></p>
<p><b>X<br/>At-<br/>tack<br/>Time<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>5<br/></b></p>
<p><b>X<br/>Re-<br/>lease<br/>Time<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>6<br/></b></p>
<p><b>X<br/>Hys-<br/>tere-<br/>sis<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 239<br/></b></p>
<p><b>Page 1 Page 2<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>7<br/></b></p>
<p><b>X<br/>Hold<br/></b></p>
<p><b>Page 3 Page 4<br/>Close to user / Left Far from user / Right Close to user / Left Far from user / Right<br/></b></p>
<p><b>Func-<br/>tion<br/></b></p>
<p><b>24 23 22 21 20 19 18 17 32 31 30 29 28 27 26 25<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>1<br/></b></p>
<p><b>C<br/>Thresh-<br/>old<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>2<br/></b></p>
<p><b>C<br/>Ra-<br/>tio<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>3<br/></b></p>
<p><b>C<br/>At-<br/>tack<br/>Time<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>4<br/></b></p>
<p><b>C<br/>Re-<br/>lease<br/>Time<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>5<br/></b></p>
<p><b>C<br/>Knee<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>6<br/></b></p>
<p><b>C<br/>Gain<br/>Makeup<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>7<br/></b></p>
<p><b>HPF<br/>En-<br/>abled<br/></b></p>
<p>Knob/In<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>8<br/></b></p>
<p><b>HPF<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>9<br/></b></p>
<p><b>HPF<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>10<br/></b></p>
<p><b>HPF<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>11<br/></b></p>
<p><b>LPF<br/>En-<br/>abled<br/></b></p>
<p>Knob/In<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>240 Module Documentation<br/></b></p>
<p><b>Page 3 Page 4<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>12<br/></b></p>
<p><b>LPF<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>13<br/></b></p>
<p><b>LPF<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>14<br/></b></p>
<p><b>LPF<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>15<br/></b></p>
<p><b>Ext<br/>Key<br/></b></p>
<p>Knob/In<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>16<br/></b></p>
<p><b>Key<br/>Lis-<br/>ten<br/></b></p>
<p>Knob/In<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>17<br/></b></p>
<p><b>In-<br/>put<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>18<br/></b></p>
<p><b>Out-<br/>put<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>19<br/></b></p>
<p><b>Link<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>CP<br/>20<br/></b></p>
<p><b>Depth<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>1<br/></b></p>
<p><b>X<br/>Thresh-<br/>old<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>2<br/></b></p>
<p><b>X<br/>Ra-<br/>tio<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>3<br/></b></p>
<p><b>X<br/>Range<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>4<br/></b></p>
<p><b>X<br/>At-<br/>tack<br/>Time<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>5<br/></b></p>
<p><b>X<br/>Re-<br/>lease<br/>Time<br/></b></p>
<p>Knob<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 241<br/></b></p>
<p><b>Page 3 Page 4<br/></b></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>6<br/></b></p>
<p><b>X<br/>Hys-<br/>tere-<br/>sis<br/></b></p>
<p>Knob<br/></p>
<p><b>Dg</b>&#8592;&#8617;<br/><b>GT<br/>7<br/></b></p>
<p><b>X<br/>Hold<br/></b></p>
<p>Knob<br/></p>
<p>Notes<br/></p>
<p>&#8226; Neither table's multi-channel link switch ('DgCP' index 19 and 'DgGT' index 20) is mapped to an encoder<br/>in this layout<br/></p>
<p>&#8226; The 'DgGT' filter, external key, and gain parameters (indices 8 through 19) are not mapped to any encoders<br/>in this layout<br/></p>
<p><b>12.46.5.2.3 'DgCP' PageTable - Compressor/Limiter </b>If the plug-in defines a 'DgCP' page table but does not<br/>define a 'DgGT' page table then EUCON control surfaces will use the following mapping.<br/></p>
<p><b>Page 1</b>&#8727; <b>Page 2<br/>Far from user / Left Close to user / Right Far from user / Left Close to user / Right<br/></b></p>
<p><b>Func-<br/>tion<br/></b></p>
<p><b>8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9<br/></b></p>
<p><b>1 C<br/>Thresh-<br/>old<br/></b></p>
<p>Knob<br/></p>
<p><b>2 C<br/>Ra-<br/>tio<br/></b></p>
<p>Knob<br/></p>
<p><b>3 C<br/>At-<br/>tack<br/>Time<br/></b></p>
<p>Knob<br/></p>
<p><b>4 C<br/>Re-<br/>lease<br/>Time<br/></b></p>
<p>Knob<br/></p>
<p><b>5 C<br/>Knee<br/></b></p>
<p>Knob<br/></p>
<p><b>6 C<br/>Gain<br/>Makeup<br/></b></p>
<p>Knob&#8727; Knob&#8727;<br/></p>
<p><b>7<br/>HPF<br/>En-<br/>abled<br/></b></p>
<p>Knob/In<br/></p>
<p><b>8<br/>HPF<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>9<br/>HPF<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>242 Module Documentation<br/></b></p>
<p><b>Page 1</b>&#8727; <b>Page 2<br/>10<br/></b></p>
<p><b>HPF<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>11<br/>LPF<br/>En-<br/>abled<br/></b></p>
<p>Knob/In<br/></p>
<p><b>12<br/>LPF<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>13<br/>LPF<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>14<br/>LPF<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>15<br/>Ext<br/>Key<br/></b></p>
<p>Knob/In<br/></p>
<p><b>16<br/>Key<br/>Lis-<br/>ten<br/></b></p>
<p>Knob/In<br/></p>
<p><b>17<br/>In-<br/>put<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>18<br/>Out-<br/>put<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>19<br/>Link<br/></b></p>
<p><b>20<br/>Depth<br/></b></p>
<p>Knob<br/></p>
<p>Notes<br/></p>
<p>&#8226; If no parameter is defined at the Ratio parameter index then the Makeup Gain parameter will be mapped to<br/>the Ratio parameter's normal spot in order to increase usefulness of the first-page mapping.<br/></p>
<p>&#8226; Pro Tools versions prior to Pro Tools 11.1 use a different layout for the first page of this table type<br/></p>
<p><b>12.46.5.2.4 'DgGT' PageTable - Expander/Gate </b>If the plug-in defines a 'DgGT' page table but does not define<br/>a 'DgCP' page table then EUCON control surfaces will use the following mapping.<br/></p>
<p><b>Page 1 Page 2<br/>Far from user / Left Close to user / Right Far from user / Left Close to user / Right<br/></b></p>
<p><b>Func-<br/>tion<br/></b></p>
<p><b>8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9<br/></b></p>
<p><b>1 X<br/>Thresh-<br/>old<br/></b></p>
<p>Knob<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 243<br/></b></p>
<p><b>Page 1 Page 2<br/>2 X<br/></b></p>
<p><b>Ra-<br/>tio<br/></b></p>
<p>Knob<br/></p>
<p><b>3 X<br/>Range<br/></b></p>
<p>Knob<br/></p>
<p><b>4 X<br/>At-<br/>tack<br/>Time<br/></b></p>
<p>Knob<br/></p>
<p><b>5 X<br/>Re-<br/>lease<br/>Time<br/></b></p>
<p>Knob<br/></p>
<p><b>6 X<br/>Hys-<br/>tere-<br/>sis<br/></b></p>
<p>Knob<br/></p>
<p><b>7 X<br/>Hold<br/></b></p>
<p>Knob<br/></p>
<p><b>8<br/>HPF<br/>En-<br/>abled<br/></b></p>
<p>Knob/In<br/></p>
<p><b>9<br/>HPF<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>10<br/>HPF<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>11<br/>HPF<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>12<br/>LPF<br/>En-<br/>abled<br/></b></p>
<p>Knob/In<br/></p>
<p><b>13<br/>LPF<br/>Type<br/></b></p>
<p>In<br/></p>
<p><b>14<br/>LPF<br/>Freq<br/></b></p>
<p>Knob<br/>(Sel<br/>O)<br/></p>
<p><b>15<br/>LPF<br/>Q<br/></b></p>
<p>Knob<br/>(Sel<br/>I)<br/></p>
<p><b>16<br/>Ext<br/>Key<br/></b></p>
<p>Knob/In<br/></p>
<p><b>17<br/>Key<br/>Lis-<br/>ten<br/></b></p>
<p>Knob/In<br/></p>
<p><b>18<br/>In-<br/>put<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>244 Module Documentation<br/></b></p>
<p><b>Page 1 Page 2<br/>19<br/></b></p>
<p><b>Out-<br/>put<br/>Gain<br/></b></p>
<p>Knob<br/></p>
<p><b>20<br/>Link<br/></b></p>
<p><b>12.46.5.3 Center Section Parameter Mapping in S6 Expand Mode<br/></b></p>
<p>In addition to supporting single-row and single-column EQ and Dynamics layouts as described above, S6 also<br/>includes an Expand Mode for EQ and Dynamics plug-ins which allows the targeted plug-in's EQ or Dynamics center<br/>section mapping to be displayed across an entire CKM module.<br/></p>
<p><b>12.46.5.3.1 'DgEQ' PageTable - Equalizer </b>EQ layout in S6 Expand Mode<br/></p>
<p><b>12.46.5.3.2 'DgCP' and 'DgGT' PageTables - Compressor/Limiter and Expander/Gate </b>Dynamics layout in<br/>S6 Expand Mode<br/></p>
<p><b>12.46.5.4 Center Section Parameter Mapping on VENUE </b>| <b>S3L-X<br/></b></p>
<p>Built-in processing parameters are mapped to the Channel Control encoders on VENUE | S3L. For more information<br/>about Channel Control mode in S3L-X see Using Channel Control in the VENUE Guide.<br/></p>
<p><b>Channel Control<br/>Encoder<br/></b></p>
<p><b>Knob Sel Switch In Switch<br/></b></p>
<p><b>1 </b>Low Gain Low EQ band in/out<br/><b>2 </b>Low Freq/Q Toggles Freq/Q Low EQ band type<br/><b>3 </b>LoMid Gain LoMid EQ band in/out<br/><b>4 </b>LoMid Freq/Q Toggles Freq/Q<br/><b>5 </b>HiMid Gain HiMid EQ band in/out<br/><b>6 </b>HiMid Freq/Q Toggles Freq/Q<br/><b>7 </b>High Gain High EQ band in/out<br/><b>8 </b>High Freq/Q Toggles Freq/Q High EQ band type<br/></p>
<p><b>12.46.5.4.1 'DgEQ' PageTable - Equalizer<br/></b></p>
<p><b>Channel Control<br/>Encoder<br/></b></p>
<p><b>Knob Sel Switch In Switch<br/></b></p>
<p><b>1 </b>Threshold level Comp/Lim or Exp/Gate in/out<br/><b>2 </b>Ratio<br/><b>3 </b>Attack<br/><b>4 </b>Knee<br/><b>5 </b>Release<br/><b>6 </b>Gain level<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 245<br/></b></p>
<p><b>Channel Control<br/>Encoder<br/></b></p>
<p><b>Knob Sel Switch In Switch<br/></b></p>
<p><b>7 </b>Key HF Key Listen Filter in/out<br/><b>8 </b>Key LF Key In Filter in/out<br/></p>
<p><b>12.46.5.4.2 'DgCP' and 'DgGT' PageTables - Compressor/Limiter and Expander/Gate<br/></b></p>
<p><b>12.46.6 EUCON Page Tables<br/></b></p>
<p>Plug-ins should implement specific EUCON page tables to take advantage of EUCON-specific features and layouts.<br/>By writing EUCON-specific page tables, your plug-in is able to re-define both the in/out button as well as the select<br/>button per EUCON control cell on compatible surfaces.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools versions prior to Pro Tools 11.1 use plug-ins' ProControl and ICON page ta-<br/>bles (Dynamics, EQ, Channel Strip, Custom Fader, etc.) to map plug-in parameters to<br/>EUCON-enabled surfaces, so be sure that your plug-ins also implement these page ta-<br/>bles correctly so that users with earlier versions of Pro Tools can have the best possible<br/>experience when using your plug-ins.<br/></p>
<p><b>Note<br/></b>The legacy PeTE editor will remove all EUCON sections from any page table XML file that it saves. Developers<br/>should no longer use PeTE for AAX page table editing. If you do use Pete, it is important to always back up<br/>your page table file before editing the file in PeTE.<br/></p>
<p><b>12.46.6.1 Specification<br/></b></p>
<p>EUCON page tables use modern formatting, making them more intuitive to implement than non-EUCON tables.<br/>Here are some example lines from a EUCON page table:<br/>&lt;PageTable type=&#8217;Av18&#8217; pgsz=&#8217;24&#8217; &gt;<br/></p>
<p>&lt;Page num=&#8217;1&#8217;\&gt;<br/>&lt;Cell row=&#8217;1&#8217; col=&#8217;1&#8217; knobID=&quot;Knob1&quot; inOutButtonID=&quot;Button1A&quot; selectButtonID=&quot;Button1B&quot; /&gt;<br/>&lt;Cell row=&#8217;1&#8217; col=&#8217;2&#8217; knobID=&quot;Knob2&quot; inOutButtonID=&quot;Button2A&quot; selectButtonID=&quot;Button2B&quot; /&gt;<br/>&lt;Cell row=&#8217;1&#8217; col=&#8217;3&#8217; knobID=&quot;Knob3&quot; inOutButtonID=&quot;Button3A&quot; selectButtonID=&quot;Button3B&quot; /&gt;<br/>...<br/></p>
<p>&lt;/Page\&gt;<br/>...<br/></p>
<p>&lt;/PageTable &gt;<br/></p>
<p>The EUCON PageTable element includes a series of Cell sub-elements. The attributes of each Cell sub-<br/>element are as follows:<br/></p>
<p>&#8226; row - the cell's row position, ordered furthest to nearest<br/>&#8226; col - the cell's column position, ordered left to right<br/>&#8226; knobID - the parameter ID associated with the knob in question<br/>&#8226; inOutButtonID - the parameter ID associated with the &quot;In&quot; button next to the knob in question. This must<br/></p>
<p>be a discrete parameter.<br/>&#8226; selectButtonID - the parameter ID associated with the &quot;Sel&quot; button next to the knob in question. This<br/></p>
<p>can be a discrete or continuous parameter. If it is a continuous parameter then pushing &quot;Sel&quot; will toggle the<br/>knob associated with the button between the selectButtonID and knobID parameters.<br/></p>
<p><b>12.46.6.2 Types<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>246 Module Documentation<br/></b></p>
<p><b>Av81 Av18 Av48 Av46<br/></b>type='Av81' type='Av18' type='Av48' type='Av46'<br/>8 rows 1 row 4 rows 4 rows<br/>1 column 8 columns 8 columns 6 columns<br/>pgsz='24' (3 elements per cell)pgsz='24' (3 elements per cell)pgsz='96' (3 elements per cell)pgsz='72' (3 elements per cell)<br/>Used for vertical sets of knob cellsUsed for horizontal sets of knob cellsUsed for 4x8 knob cell arrays, e.g. S6 &quot;Expand Mode&quot;Used for 4x6 knob cell arrays, e.g. plug-in layouts on S6L<br/>Most important parameters should be placed in highest-numbered rows (closest to user)M st important controls should placed in lowest-numb red columns (left)Layout should be similar to plug-in GUILayout should be similar to plug-in GUI<br/></p>
<p><b>12.46.6.3 Conventions<br/></b></p>
<p>&#8226; To map a single discrete parameter to an encoder cell, assign the parameter to both the knob and the In<br/>switch. Assigning the parameter to the cell's knob will ensure that the parameter name and value is always<br/>displayed on the surface. The user will be able to edit the parameter using either the rotary encoder or the In<br/>switch.<br/></p>
<p>&#8226; When assigning discrete parameters, always prefer to use the In switch over the Sel switch. For cells with<br/>one continuous and one discrete parameter, users will always expect the discrete parameter to be assigned<br/>to the In switch rather than the Sel switch. In other EUCON modes (besides plug-in editing) the In switch is<br/>always used to enable/disable parameters, while the Sel switch is usually used to toggle between functions<br/>for the cell's rotary encoder.<br/></p>
<p><b>12.46.6.4 Requirements<br/></b></p>
<p>&#8226; All parameter IDs used in the EUCON page tables must be defined with a Ctrl ID element within the<br/>ControlNameVariations element<br/></p>
<p>&#8226; Every Cell with at least one parameter assignment must include a knobID assignment. It is not valid to<br/>assign either inOutButtonID or selectButtonID without also assigning the cell's knobID.<br/></p>
<p>&#8226; For a given knobID, the same parameters must be assigned to the selectButtonID and inOut&#8592;&#8617;<br/>ButtonID switches across all EUCON page tables<br/></p>
<p>&#8226; Every knob cell assignment set (Rotary+Sel+In assignment) used in the 'Av48' table must be exactly<br/>replicated somewhere in the 'Av81' table<br/></p>
<p>&#8226; 'Av48' tables may contain no more than two pages<br/></p>
<p><b>12.46.7 Implementing Page Tables<br/></b></p>
<p><b>12.46.7.1 Page table XML specification<br/></b></p>
<p>This section includes a rough specification for plug-in page table XML. Whenever possible, we encourage develop-<br/>ers to use the Page Table Editor tool to generate plug-in page tables rather than writing or editing the page table<br/>XML by hand.<br/></p>
<p>The page table XML format contains three main tags:<br/></p>
<p>&#8226; PageTableLayouts tag<br/></p>
<p>&#8226; ControlNameVariations tag<br/></p>
<p>&#8226; Editor tag<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 247<br/></b></p>
<p><b>12.46.7.1.1 PageTableLayouts tag </b>This section provides a static mapping of control elements to page table<br/>layouts. Multiple layouts may be provided in this section, e.g. in cases where different control sets are used by<br/>different plug-in Types.<br/></p>
<p>Each layout includes a complete set of page table descriptions. There are multiple kinds of page tables, each of<br/>which may have multiple pages. At minimum, each layout must include a PageTable with type='pgTL' and<br/>pgsz='1'. This is the default page table, and the order of the control elements that it describes must match the<br/>order in which the corresponding parameters are added to the plug-in itself.<br/></p>
<p>Here is an excerpt from the PageTableLayouts section in Avid's Eleven plug-in page tables demon-<br/>strating non-EUCON PageTable elements. For the EUCON PageTable element specification, see<br/>Eucon page table specification.<br/>&lt;PageTableLayouts&gt;<br/></p>
<p>&lt;Plugin manID=&#8217;Digi&#8217; prodID=&#8217;ElvF&#8217; plugID=&#8217;ELFr&#8217;&gt;<br/>&lt;Desc&gt;Eleven Free 1 -&amp;amp;gt; 1 Avid Technology, Inc.&lt;/Desc&gt;<br/>&lt;Layout&gt;PageTable Free&lt;/Layout&gt;<br/></p>
<p>&lt;/Plugin&gt;&lt;!--manID=&#8217;Digi&#8217; prodID=&#8217;ElvF&#8217; plugID=&#8217;ELFr&#8217;--&gt;<br/>&lt;Plugin manID=&#8217;Digi&#8217; prodID=&#8217;Elvn&#8217; plugID=&#8217;ELVr&#8217;&gt;<br/></p>
<p>&lt;Desc&gt;Eleven 1 -&amp;amp;gt; 1 Avid Technology, Inc.&lt;/Desc&gt;<br/>&lt;Layout&gt;PageTable 1&lt;/Layout&gt;<br/></p>
<p>&lt;/Plugin&gt;&lt;!--manID=&#8217;Digi&#8217; prodID=&#8217;Elvn&#8217; plugID=&#8217;ELVr&#8217;--&gt;<br/>&lt;!-- ... --&gt;<br/>&lt;PTLayout name=&#8217;PageTable 1&#8217;&gt;<br/></p>
<p>&lt;PageTable type=&#8217;BkCS&#8217; pgsz=&#8217;12&#8217;&gt;<br/>&lt;Page num=&#8217;1&#8217;&gt;<br/></p>
<p>&lt;ID&gt;Mic Type&lt;/ID&gt;<br/>&lt;ID&gt;Cab Type&lt;/ID&gt;<br/>&lt;ID&gt;Amp Type&lt;/ID&gt;<br/>&lt;ID&gt;Master&lt;/ID&gt;<br/>&lt;ID&gt;Gain 2&lt;/ID&gt;<br/>&lt;ID&gt;Gain 1&lt;/ID&gt;<br/>&lt;ID&gt;Mic Axis&lt;/ID&gt;<br/>&lt;ID&gt;Cab Type&lt;/ID&gt;<br/>&lt;ID&gt;Amp Type&lt;/ID&gt;<br/>&lt;ID&gt; &lt;/ID&gt;<br/>&lt;ID&gt; &lt;/ID&gt;<br/>&lt;ID&gt;Bright Switch&lt;/ID&gt;<br/></p>
<p>&lt;/Page&gt;&lt;!--num=&#8217;1&#8217;--&gt;<br/>&lt;Page num=&#8217;2&#8217;&gt;<br/></p>
<p>&lt;!-- ... --&gt;<br/>&lt;/Page&gt;&lt;!--num=&#8217;2&#8217;--&gt;<br/>&lt;Page num=&#8217;3&#8217;&gt;<br/></p>
<p>&lt;!-- ... --&gt;<br/>&lt;/Page&gt;&lt;!--num=&#8217;3&#8217;--&gt;<br/></p>
<p>&lt;/PageTable&gt;&lt;!--type=&#8217;BkCS&#8217; pgsz=&#8217;12&#8217;--&gt;<br/>&lt;!-- ... --&gt;<br/>&lt;PageTable type=&#8217;PgTL&#8217; pgsz=&#8217;1&#8217;&gt;<br/></p>
<p>&lt;Page num=&#8217;1&#8217;&gt;<br/>&lt;ID&gt;Master Bypass&lt;/ID&gt;<br/></p>
<p>&lt;/Page&gt;&lt;!--num=&#8217;1&#8217;--&gt;<br/>&lt;Page num=&#8217;2&#8217;&gt;<br/></p>
<p>&lt;ID&gt;Input Level&lt;/ID&gt;<br/>&lt;/Page&gt;&lt;!--num=&#8217;2&#8217;--&gt;<br/>&lt;Page num=&#8217;3&#8217;&gt;<br/></p>
<p>&lt;ID&gt;Output Level&lt;/ID&gt;<br/>&lt;/Page&gt;&lt;!--num=&#8217;3&#8217;--&gt;<br/>&lt;Page num=&#8217;4&#8217;&gt;<br/></p>
<p>&lt;ID&gt;Gate Threshold&lt;/ID&gt;<br/>&lt;/Page&gt;&lt;!--num=&#8217;4&#8217;--&gt;<br/>&lt;!-- ... --&gt;<br/></p>
<p>&lt;/PageTable&gt;&lt;!--type=&#8217;PgTL&#8217; pgsz=&#8217;1&#8217;--&gt;<br/>&lt;/PTLayout&gt;&lt;!--name=&#8217;PageTable 1&#8217;--&gt;<br/>&lt;PTLayout name=&#8217;PageTable Free&#8217;&gt;<br/></p>
<p>&lt;!-- ... --&gt;<br/>&lt;/PTLayout&gt;&lt;!--name=&#8217;PageTable Free&#8217;--&gt;<br/></p>
<p>&lt;/PageTableLayouts&gt;<br/></p>
<p>The sub-tags for this section are as follows:<br/></p>
<p>&#8226; Plugin element<br/>A high-level description of a single plug-in Type.<br/>The manID, prodID, and plugID attributes must match the corresponding Manufacturer, Product, and<br/>Type IDs for each plug-in Type that is described in the XML file. Multiple Plugin elements may be included<br/>in a single XML file.<br/>The Plugin element has two sub-elements:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>248 Module Documentation<br/></b></p>
<p>1. The Desc sub-element provides a brief description of the plug-in Type. This information is used only by<br/>the Page Table Editor application and does not affect operation of the plug-in in Pro Tools.<br/></p>
<p>2. One Layout sub-element is used to bind the plug-in Type to a particular PTLayout (see below.)<br/></p>
<p>&#8226; PTLayout element<br/>A complete control mapping, including a full set of PageTable descriptions.<br/></p>
<p><b>&#8211; </b>PageTable sub-element - A single page table mapping, with controls specified across multiple Page<br/>elements as in the example above.<br/>PageTable elements have the following attributes:<br/></p>
<p>1. type defines the particular device that will use the PageTable. type may be one of:<br/>* PgTL - Generic page tables (any size)<br/>* PcTL - ProControl, VENUE, and fall-back EUCON page table (size 16)<br/>* MkTL - Makie HUI page table (size 8)<br/>* HgTL - 002/003 and Command|8 page table (size 8)<br/>* FrTL - Control 24, C|24, and fall-back S6L page table (size 24)<br/>* BkCS - ICON Channel Strip (size 12)<br/>* BkSF - ICON Custom Fader (size 16)<br/>* DgGT - ICON dynamics section (Gate/Expander) (size 20)<br/>* DgCP - ICON dynamics section (Compressor/Limiter) (size 19)<br/>* DgEQ - ICON EQ section (size 43)<br/>* Av81 - EUCON 8x1 section (size 24)<br/>* Av18 - EUCON 1x8 section (size 24)<br/>* Av48 - EUCON 4x8 section (size 96)<br/>* Av46 - EUCON 4x6 section (size 72)<br/></p>
<p>2. pgsz defines the number of controls per page in the page table. Most page table types require<br/>a specific size, as noted above. The generic PgTL page tables may be of any size, and multiple<br/>PgTL page tables may be provided. However, each plug-in must provide a PgTL page table of<br/>size 1 that includes all of the plug-in's automatable parameters, in the order in which they are added<br/>to the plug-in.<br/></p>
<p><b>12.46.7.1.2 ControlNameVariations tag </b>This section includes information about the names of each control in<br/>the plug-in. Here is an excerpt from our Eleven plug-in page tables which demonstrates the basic format of this<br/>section:<br/>&lt;Ctrl ID=&#8217;Amp Bypass&#8217;&gt;<br/></p>
<p>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;1&#8217;&gt;AB&lt;/name&gt;<br/>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;4&#8217;&gt;AByp&lt;/name&gt;<br/>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;5&#8217;&gt;A Byp&lt;/name&gt;<br/>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;6&#8217;&gt;AmpByp&lt;/name&gt;<br/>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;7&#8217;&gt;Amp Byp&lt;/name&gt;<br/></p>
<p>&lt;/Ctrl&gt;&lt;!--ID=&#8217;Amp Bypass&#8217;--&gt;<br/>&lt;Ctrl ID=&#8217;Amp Type&#8217;&gt;<br/></p>
<p>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;1&#8217;&gt;AT&lt;/name&gt;<br/>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;3&#8217;&gt;Amp &lt;/name&gt;<br/>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;5&#8217;&gt;AmpTp&lt;/name&gt;<br/>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;6&#8217;&gt;AmpTyp&lt;/name&gt;<br/>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;7&#8217;&gt;Amp Typ&lt;/name&gt;<br/></p>
<p>&lt;/Ctrl&gt;&lt;!--ID=&#8217;Amp Type&#8217;--&gt;<br/>&lt;Ctrl ID=&#8217;Bright Switch&#8217;&gt;<br/></p>
<p>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;1&#8217;&gt;Brt &lt;/name&gt;<br/>&lt;name typ=&#8217;PgTL&#8217; sz=&#8217;6&#8217;&gt;Bright&lt;/name&gt;<br/></p>
<p>&lt;/Ctrl&gt;&lt;!--ID=&#8217;Bright Switch&#8217;--&gt;<br/></p>
<p>The sub-tags used are as follows:<br/></p>
<p>Ctrl element with ID attribute - The identifier of the control that is being identified.<br/></p>
<p>The identifiers for all parameters in the page table must and should match the IDs used for the control<br/>both in the &lt;PageTableLayouts&gt; layouts and in the Editor tag's DiscCtrls sub-tag (see below). See<br/>Parameter identifiers for more information about parameter identifiers.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 249<br/></b></p>
<p>name element - The desired abbreviated name of the control for display on control surface UIs, which may have<br/>limited display space available.<br/>The typ parameter allows you to choose which page table type the given abbreviation will be specific to. For<br/>example, a name provided with typ='HgTL' would only appear on Command|8, 002, and 003 hardware. As with<br/>all other tags, the name associated with typ PgTL (the generic page table identifier) will be used if no other name<br/>is given for the specific page table that is being loaded.<br/>The sz parameter defines the size of the control surface display for which the given name is appropriate. The<br/>control surface will use the name associated with the largest size that will fit on its display.<br/>To reduce the number of names that must be specified, abbreviated names can be given that are longer than<br/>their specified size. These names will be truncated when necessary. For example, a control surface that could<br/>accommodate two characters on its display would use the size-1 name for the &quot;Bright Switch&quot; control above, since 1<br/>is the largest number less than or equal to 2 from the provided set of name sizes (in this case, 1 and 6.) The size-1<br/>name, 'Brt ', has four characters in it. Therefore, it would be truncated down to 'Br' to fit onto the control<br/>surface's display.<br/></p>
<p><b>12.46.7.1.3 Editor tag </b>The last of the three main sections in an XML plug-in page table is the Editor section.<br/>This section is used by the Page Table Editor application and you should not need to modify its contents. However,<br/>if you are encountering problems modifying your plug-in in the Page Table Editor then you may wish to verify that<br/>all plug-ins and controls are properly identified within the PluginList and DiscCtrls sub-tabs, respectively.<br/>Here is the Editor section from the Eleven page table XML:<br/>&lt;Editor vers=&#8217;1.3.7.1&#8217;&gt;<br/></p>
<p>&lt;PluginList&gt;<br/>&lt;TDM&gt;<br/></p>
<p>&lt;PluginID manID=&#8217;Digi&#8217; prodID=&#8217;Elvn&#8217; plugID=&#8217;ELVt&#8217;&gt;<br/>&lt;MenuStr&gt;TDM: Eleven, 1 in X 1 out&lt;/MenuStr&gt;<br/></p>
<p>&lt;/PluginID&gt;&lt;!--manID=&#8217;Digi&#8217; prodID=&#8217;Elvn&#8217; plugID=&#8217;ELVt&#8217;--&gt;<br/>&lt;/TDM&gt;<br/>&lt;RTAS&gt;<br/></p>
<p>&lt;PluginID manID=&#8217;Digi&#8217; prodID=&#8217;Elvn&#8217; plugID=&#8217;ELVr&#8217;&gt;<br/>&lt;MenuStr&gt;RTAS: Eleven, 1 in X 1 out&lt;/MenuStr&gt;<br/></p>
<p>&lt;/PluginID&gt;&lt;!--manID=&#8217;Digi&#8217; prodID=&#8217;Elvn&#8217; plugID=&#8217;ELVr&#8217;--&gt;<br/>&lt;PluginID manID=&#8217;Digi&#8217; prodID=&#8217;ElvF&#8217; plugID=&#8217;ELFr&#8217;&gt;<br/></p>
<p>&lt;MenuStr&gt;RTAS: Eleven Free, 1 in X 1 out&lt;/MenuStr&gt;<br/>&lt;/PluginID&gt;&lt;!--manID=&#8217;Digi&#8217; prodID=&#8217;ElvF&#8217; plugID=&#8217;ELFr&#8217;--&gt;<br/></p>
<p>&lt;/RTAS&gt;<br/>&lt;/PluginList&gt;<br/>&lt;DiscCtrls&gt;<br/></p>
<p>&lt;CtrlID&gt;Amp Bypass&lt;/CtrlID&gt;<br/>&lt;CtrlID&gt;Amp Type&lt;/CtrlID&gt;<br/>&lt;CtrlID&gt;Bright Switch&lt;/CtrlID&gt;<br/>&lt;CtrlID&gt;Cab Bypass&lt;/CtrlID&gt;<br/>&lt;CtrlID&gt;Cab Type&lt;/CtrlID&gt;<br/>&lt;CtrlID&gt;Master Bypass&lt;/CtrlID&gt;<br/>&lt;CtrlID&gt;Mic Axis&lt;/CtrlID&gt;<br/>&lt;CtrlID&gt;Mic Type&lt;/CtrlID&gt;<br/></p>
<p>&lt;/DiscCtrls&gt;<br/>&lt;/Editor&gt;&lt;!--vers=&#8217;1.3.7.1&#8217;--&gt;<br/></p>
<p><b>12.46.7.2 Parameter identifiers<br/></b></p>
<p>The ID tags/arguments in a page table must reference parameters which are exposed by the plug-in's<br/>AAX_IEffectParameters implementation via methods such as GetParameterIndex().<br/>There are two supported ways to identify parameters in a page table:<br/></p>
<p>&#8226; By the parameter's ID (preferred)<br/>&#8226; By the parameter's 31-character name (legacy)<br/></p>
<p>A single page table may only reference the plug-in's parameters using one of these two approaches; a page table<br/>file may not reference one parameter by its name and another by its ID, and it may not reference one parameter by<br/>its name in one location but by its ID in another location.<br/>If a plug-in will change its parameters' names at run time then the parameter identifiers used in the page tables must<br/>reference parameters by ID.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>250 Module Documentation<br/></b></p>
<p><b>12.46.7.3 Creating page tables using the AAX Plug-In Page Table Editor<br/></b></p>
<p>Page tables can be created and edited using the AAX Plug-In Page Table Editor application available on the De-<br/>veloper website. The Page Table Editor generates an XML file that can be used in both Windows and Macintosh<br/>plug-in projects.<br/></p>
<p>The Page Table Editor can also open page table files in existing .aaxplugin bundles on your system. If you're looking<br/>for examples of how to lay out the common parameters in your plug-ins try opening up the page tables for one of<br/>the standard Avid plug-ins like Avid Channel Strip or D-Verb.<br/></p>
<p><b>Note<br/></b>The Page Table Editor only supports opening a single file at a time. It can be useful to open multiple files<br/>in order to compare their layouts. To open multiple page tables at the same time you can launch multiple<br/>instances of the Page Table Editor application by running the application from a terminal shell.<br/></p>
<p>The Page Table Editor will make use of the Parameter IDs that are defined in a plug-in, and will associate them with<br/>the 'Plugin' tags in the XML file. Using the DemoDist sample plug-in included in the AAX SDK, you'll see that there<br/>is one Plugin entry for each plug-in type in the binary.<br/>// Type, product, and relation IDs<br/>const AAX_CTypeID cDemoDist_ManufactureID =&#8217;AVID &#8217;;<br/>const AAX_CTypeID cDemoDist_ProductID = &#8217;DmDE &#8217;;<br/>const AAX_CTypeID cDemoDist_TypeID_AS = &#8217;DmAS &#8217;;<br/>const AAX_CTypeID cDemoDist_TypeID_MonoNative = &#8217;DmRT &#8217;;<br/>const AAX_CTypeID cDemoDist_TypeID_StereoNative = &#8217;DsRT &#8217;;<br/>const AAX_CTypeID cDemoDist_TypeID_MonoTI = &#8217;DDT1 &#8217;;<br/>const AAX_CTypeID cDemoDist_TypeID_StereoTI = &#8217;DDT2 &#8217;;<br/></p>
<p>Listing 1: DemoDist Plug-In IDs<br/>.<br/>.<br/>.<br/>&lt;Plugin manID =&#8217;AVID &#8217; prodID =&#8217;DmDE &#8217; plugID =&#8217;DmRT &#8217;&gt;<br/>&lt;Desc &gt; DemoDist 1 -&amp;amp;gt; 1 by Avid Technology , Inc .&lt;/ Desc &gt;<br/>&lt;Layout &gt; PageTable 1&lt;/ Layout &gt;<br/>&lt;/ Plugin &gt;&lt;!-- manID =&#8217;AVID &#8217; prodID =&#8217;DmDE &#8217; plugID =&#8217;DmRT &#8217;--&gt;<br/>&lt;Plugin manID =&#8217;AVID &#8217; prodID =&#8217;DmDE &#8217; plugID =&#8217;DsRT &#8217;&gt;<br/>&lt;Desc &gt; DemoDist 2 -&amp;amp;gt; 2 by Avid Technology , Inc .&lt;/ Desc &gt;<br/>&lt;Layout &gt; PageTable 1&lt;/ Layout &gt;<br/>&lt;/ Plugin &gt;&lt;!-- manID =&#8217;AVID &#8217; prodID =&#8217;DmDE &#8217; plugID =&#8217;DsRT &#8217;--&gt;<br/>&lt;Plugin manID =&#8217;AVID &#8217; prodID =&#8217;DmDE &#8217; plugID =&#8217;DDT1 &#8217;&gt;<br/>&lt;Desc &gt; DemoDist 1 -&amp;amp;gt; 1 by Avid Technology , Inc .&lt;/ Desc &gt;<br/>&lt;Layout &gt; PageTable 1&lt;/ Layout &gt;<br/>&lt;/ Plugin &gt;&lt;!-- manID =&#8217;AVID &#8217; prodID =&#8217;DmDE &#8217; plugID =&#8217;DDT1 &#8217;--&gt;<br/>&lt;Plugin manID =&#8217;AVID &#8217; prodID =&#8217;DmDE &#8217; plugID =&#8217;DDT2 &#8217;&gt;<br/>&lt;Desc &gt; DemoDist 2 -&amp;amp;gt; 2 by Avid Technology , Inc .&lt;/ Desc &gt;<br/>&lt;Layout &gt; PageTable 1&lt;/ Layout &gt;<br/>&lt;/ Plugin &gt;&lt;!-- manID =&#8217;AVID &#8217; prodID =&#8217;DmDE &#8217; plugID =&#8217;DDT2 &#8217;--&gt;<br/>.<br/>.<br/>.<br/></p>
<p>Listing 2: DemoDist XML<br/></p>
<p><b>Note<br/></b>For compatibility between your AAX and corresponding RTAS or TDM plug-ins, make sure the 4 character<br/>IDs for AAX_eProperty_ManufacturerID, AAX_eProperty_ProductID, AAX_eProperty_PlugInID_Native, and<br/>AAX_eProperty_PlugInID_AudioSuite are identical to the legacy SDK's counterpart.<br/></p>
<p>For more information about the AAX Plug-In Page Table Editor tool, see the ReadMe file which accompanies the<br/>application.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 251<br/></b></p>
<p><b>12.46.7.4 Verifying Page Table Layouts: The Hidden Pop-Up Menu<br/></b></p>
<p>You can verify the page tables created in your plug-in in Pro Tools with a &quot;hidden&quot; developer debug Page Tables<br/>popup menu. To verify the page tables, first include the YourPageTables.r file in your project and compile the plug-<br/>in. Then, after launching Pro Tools, instantiate the plug-in, hold down the Commandkey (Ctrl-key in Windows) and<br/>mouse-click the Automation button in the plug-in window to display the menu.<br/></p>
<p>&#8226; Category<br/>The Category menu item has a submenu listing the names of possible categories. Any category that the<br/>plug-in belongs to will have a check mark next to it. In addition, appended to the name of the category is an<br/>indication of whether that category can be bypassed, and if so, the control number (#) and control name of the<br/>associated bypass control. Also appended is the number of the first page on which a control associated with<br/>the category can be found. This page number is based on whatever the current page table type is selected<br/>in the &quot;TableType&quot; menu item. For example: Delay (can bypass, control #9, Master Bypass) (first page #1)<br/></p>
<p>&#8226; Table Type<br/>Sets the type of control surface page table.<br/></p>
<p>&#8226; Page Size<br/>Sets the number of controls per page. The identifier &quot;custom&quot; is shown next to page sizes that have been<br/>specifically implemented (which at minimum, should appear next to page sizes of 5, 6, 8, and16! ). The<br/>identifier &quot;default&quot; is shown next to page sizes that do not have specific support in your page table file. Note<br/>that the Mackie and ProControl table type will automatically set this to 8 and 16, respectively.<br/></p>
<p>&#8226; Control Name Length<br/>Sets the number of characters to be displayed in the control's name (shown in the Page menu below). The<br/>identifier &quot;expected length&quot; appears next to lengths that should be specifically addressed (3, 4, 5, 6, 7, 8, and<br/>31). If you use the XML page table system, the names can be specified in the Page Table Editor application.<br/>Otherwise, the function GetControlNameOfLength() is responsible for providing names with these lengths.<br/></p>
<p>&#8226; Control Value Length<br/>Sets the number of characters to be displayed in the control's value (shown in the Page menu below). The<br/>identifier &quot;expected length&quot; appears next to lengths that should be specifically addressed (4, 5, 6, 7, 8, and<br/>31; also, 3 is used for ProControl switch states). The plug-in Library call GetValueString() is responsible for<br/>providing values with these lengths.<br/></p>
<p>&#8226; Highlighted Page<br/>Highlights the selected page in the plug-in window in Pro Tools.<br/></p>
<p>&#8226; Highlight Color<br/>Sets the highlight color. The highlight color can be: red, green, blue or yellow. Note that at minimum, plug-in's<br/>should support these four colors of highlighting!<br/></p>
<p>&#8226; Page X<br/>The actual page table layouts are shown here. The following information can be seen in this menu item.<br/></p>
<p><b>&#8211; </b>The control's name, as returned from the XML page tables. If the table type is Mackie, then the length<br/>will be 4 (unless overridden by changing the &quot;Control Name Length&quot; menu item). If the table type is<br/>ProControl, the length will be 3 (again, unless overridden, but usually there is no point in doing so).<br/>Also, with ProControl set as the table type, the special ProControl symbols will appear here if they are<br/>part of the name (however, note that they are small and can be difficult to see). Finally, if the table<br/>type is default, the name will be shown with the number of characters as specified in the &quot;Control Name<br/>Length&quot; menu item.<br/></p>
<p><b>&#8211; </b>The control's value is shown next. Both the Mackie and ProControl table types will automatically set the<br/>control's value length to 4 and 3, respectively. Otherwise, this can be set with the &quot;Control Value Length&quot;<br/>menu item. GetValueString() is responsible for providing this 'value' information.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>252 Module Documentation<br/></b></p>
<p><b>&#8211; </b>The number of control steps is shown next for continuous and discrete controls. For example, a discrete<br/>control will appear as: &quot;(discrete: N steps)&quot;, where N is the # of steps of the control.<br/></p>
<p><b>&#8211; </b>If &quot;(NoL)&quot; is displayed, this simply means that it is a new plug-in, and supports either the XML page<br/>tables or the GetParameterNameOfLength() function call. If &quot;(NoL)&quot; does not appear, then the plug-in is<br/>older and you should not expect the control names or values to be optimized - since they are created by<br/>just truncating the longer values that the older plug-ins return.<br/></p>
<p><b>&#8211; </b>If &quot;(highlight)&quot; is displayed, this means that the string will be reverse highlighted when displayed on<br/>hardware controllers that support it. Not all hardware controllers utilize reverse highlighting.<br/></p>
<p><b>&#8211; </b>Next, orientation flags for each plug-in control will be displayed. The format is: &quot;(Value: xxx yyy),&quot; where<br/>xxx is either &quot;BMin&quot; (kDAE_BottomMinTopMax) or &quot;TMin&quot; (kDAE_TopMinBottomMax); and yyy is either<br/>&quot;LMin&quot; (kDAE_LeftMinRightMax) or &quot;RMin&quot; (kDAE_RightMinLeftMax). This text identifies the value of<br/>the control's orientation flags, as returned by GetParameterOrientation().<br/></p>
<p><b>&#8211; </b>Also shown is the radial LED encoder-display mode (as returned by GetControlOrientation()) assigned<br/>to each control (this radial LED surrounds each encoder). The possible modes are: &quot;spread&quot; kDAE&#8592;&#8617;<br/>_RotarySpreadMode, &quot;wrap&quot; kDAE_RotaryWrapMode, &quot;boost&quot; kDAE_RotaryBoostCutMode, or &quot;dot&quot;<br/>kDAE_RotarySingleDotMode, along with either &quot;RMin&quot; kDAE_RotaryRightMinLeftMax, or &quot;LMin&quot; k&#8592;&#8617;<br/>DAE_RotaryLeftMinRightMax - indicating which side the minimum AAE value is being mapped to.<br/></p>
<p><b>12.46.7.5 Control Highlighting Scheme<br/></b></p>
<p>Note that plug-in controls that are currently controllable on any page of a plug-in will be highlighted in blue when<br/>they are the active page on a control surface. Therefore, it is very important to implement the highlighting of<br/>controls in your plug-in. Plug-in highlighting is also used with automation. In general, four common colors should<br/>be implemented:<br/></p>
<p>&#8226; Red: Write automated<br/></p>
<p>&#8226; Green: Read automated<br/></p>
<p>&#8226; Blue: Accessible on control surface (stays blue if control is also read automated)<br/></p>
<p>&#8226; Yellow: Accessible on control surface and write automated<br/></p>
<p>You can use the &quot;hidden&quot; popup menu above to test that your color schemes are working properly.<br/></p>
<p><b>12.46.7.6 Control Numbering Layouts<br/></b></p>
<p>Most of the advanced control surfaces have both rotary encoders (knobs) and switches. The knobs and switches are<br/>handled differently by different surfaces. C|24 has a set of 24 rotary encoders and 24 switches for plug-in editing,<br/>and 003 has 8 encoders and 8 switches, all set up in pairs. However, both of these control surfaces automatically<br/>assign a control with only two possible values (e.g., &quot;on&quot; or &quot;off&quot;) to a switch, while a control with three or more<br/>possible values, whether it is discrete or continuous, is automatically assigned to the rotary encoder. Therefore, no<br/>distinction is made between control numbers for switches and control numbers for encoders.<br/></p>
<p>The following tables show how the control numbers are arranged for control surfaces which have distinctions be-<br/>tween their encoders and switches.<br/></p>
<p><b>Table 12.27 Table 2: D-Control Channel Strip - Numbering Layout<br/>Encoders Switches<br/></b></p>
<p>1 7<br/>2 8<br/>3 9<br/>4 10<br/>5 11<br/>6 12 <b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 253<br/></b></p>
<p><b>Table 12.28 Table 3: D-Control/Pro-Control Custom Fader Mode - Numbering Layout<br/>Encoders Switches<br/></b></p>
<p>1 9<br/>2 10<br/>3 11<br/>4 12<br/>5 13<br/>6 14<br/>7 15<br/>8 16<br/></p>
<p><b>12.46.7.7 Alphanumeric Displays<br/></b></p>
<p>With the advent of the newer advanced control surfaces (CS), plug-ins now have the opportunity to provide infor-<br/>mation to the user via alphanumeric displays on the CS. Unfortunately, the displays are limited in the number of<br/>characters that can be shown. For instance, on the Mackie HUI, nine characters are provided for each plug-in<br/>control, allowing only four characters for the control name, and four characters for the control value, and one for a<br/>space between them. On ProControl, eight characters are provided for each plug-in control, with three characters<br/>allocated to displaying a control name, and four characters for its control value. On C|24 and 003, four characters<br/>are provided for the plug-in name, control name, and the control value. For the control value, these four characters<br/>include a +/- and/or any necessary unit abbreviations (ex: K, s, dB, etc.). D-Control and Command|8 provide six<br/>characters for the plug-in name, control name, and control value.<br/></p>
<p>In order to display meaningful information in these short character strings, plug-ins will have to optimize the strings<br/>that they return to AAE. The dispatcher calls MapControlValToString(), which in turn calls GetValueString(), is used<br/>to obtain these control value strings. Typically in the past, the requested length argument of both these member<br/>functions, i.e., maxChars in MapControlValToString() or maxLength in GetValueString() has been ignored; but, from<br/>here on out, they should be carefully examined and used to create an optimum and meaningful string for any<br/>requested length.<br/></p>
<p>To prevent the code from becoming unwieldy, as in the case of trying to provide strings for all requested lengths, a<br/>minimum number of expected lengths should be specifically addressed. The expected value lengths are: 4, 5, 6,<br/>7, 8, and 31. In addition, ProControl switch states are a maximum length of 3 (i.e., when dealing with the state of<br/>a switch for ProControl, provide this information in 3 characters or less). Therefore, whenever possible, a plug-in<br/>should return the most meaningful string that will fit in any particular requested length, and at minimum, handle the<br/>expected lengths. If a plug-in does not have custom code to handle a particular requested length, it can round the<br/>length down to the next smaller expected length and use the code that it has for it. For example, a request of 9<br/>characters should be converted to an expected request of 8 characters.<br/></p>
<p>Please note: Since truncating a long string to fit within the requested length will not provide meaningful results<br/>in most cases, plug-ins must specifically provide code for deriving useful strings for the expected lengths where<br/>applicable.<br/></p>
<p>Since the smaller lengths, especially 4 and 5 characters, are usually too short to display a plug-in's true full value<br/>including units, some decisions will have to be made about how to suitably shorten them. The following provides<br/>some general guidelines.<br/></p>
<p>If needed, and in order of precedence, try to:<br/></p>
<p>&#8226; Remove spaces: 13 Hz becomes 13Hz<br/></p>
<p>&#8226; Use common abbreviations for units: 16 seconds to 16sec, or 16 s, 156 Hertz to 156Hz<br/></p>
<p>&#8226; Drop the units entirely: 1832 Hz to 1832<br/></p>
<p>&#8226; Round the value: 173.3 ms to 173<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>254 Module Documentation<br/></b></p>
<p>Here is a table depicting a typical example in more detail. The expected lengths are shown in the left most vertical<br/>column.<br/></p>
<p>Alphanumeric Characters<br/></p>
<p>While creating the above strings, the requested length argument passed in (maxChars in MapControlValToString(),<br/>and maxLength in GetValueString()) should be strictly adhered to! The string returned should be no greater than the<br/>requested number of characters. Furthermore, the developer should assume that the buffer passed into this function<br/>is only as large as the requested length. Any intermediate string processing should be done in temporary local<br/>buffers and only when you have the final string should you copy back to the buffer that was passed in, making sure<br/>you copy no more than the requested number of characters, plus the Null character or Length byte, as appropriate;<br/>since in general, MapControlValToString() uses C strings and GetValueString() uses Pascal strings.<br/></p>
<p>Also, in an effort to further help prevent buffer overruns, two new functions have been added to the PI library file<br/>SliderConversions.cp: SmartAppendNum() and SmartAppendXNum(), which includes a maximum length argument<br/>and should be used in place of FicAppendNum() and FicAppendXNum() from FicBasics.cpp.<br/></p>
<p>Finally, note that ProControl and HUI will sometimes utilize 5 characters to display its value when a sign is involved.<br/>For instance, if the number is -100, the negative sign will appear in the space separating the control name from the<br/>control value. Pro Tools will take care of this conversion as long as all of the expected lengths are properly provided<br/>for. For C|24 and 003, this is not the case - only four characters are allowed, so the +/- must be a part of those four<br/>characters.<br/></p>
<p>HUI, ProControl, C|24, and 003 all provide alphanumeric displays for visual feedback, with the primary purpose<br/>being plug-in parameter editing. Functions in the plug-in library are provided that allow customized parameter<br/>strings to be created for use on the display. Specifically, these functions are: GetControlNameOfLength() and Get&#8592;&#8617;<br/>ValueString(). Fortunately, the details of writing to the display are taken care of by the application. Therefore, the<br/>plug-in developer only needs to be concerned with providing meaningful display strings for all plug-in parameters that<br/>are controllable. Whether using the XML or legacy page table system, GetControlNameOfLength() should return<br/>the long version (31 characters maximum) of the plug-in's control names. Short versions of plug-in control names<br/>are stored in the XML file, edited with the Page Table Editor application. If you are also using legacy page tables to<br/>support versions of Pro Tools prior to 6.4, the short names should also be coded in the GetControlNameOfLength()<br/>function.<br/></p>
<p>AAE clients like Pro Tools call GetControlNameOfLength(), but if AAE finds XML data stored in the plug-in, it gets the<br/>information from there rather than calling into the plug-in. GetControlNameOfLength() is responsible for providing<br/>the parameter &quot;names&quot; used on the display. As with parameter &quot;value&quot; strings, it is important to carefully create<br/>parameter names that are meaningful in the limited space allocated to displaying parameter names. On ProControl,<br/>string lengths of three characters will be used for the parameter name strings, where four characters will be used<br/>on the HUI, C|24, and 003. D-Control and Command|8 use six characters for control names. In general, lengths<br/>of 3, 4, 5, 6, 7, 8, and 31 should be specifically addressed in the Page Table Editor or GetControlNameOfLength().<br/>We begin next, by looking at some concrete examples.<br/></p>
<p><b>12.46.7.8 ProControl Display<br/></b></p>
<p>ProControl also provides an alphanumeric display; however, there are some significant differences that need to be<br/>addressed. Shown is a generic representation for the ProControl display. The image below shows what users will<br/>usually be viewing on ProControl's displays, which are the current Encoder/Value settings. Figure 13 shows the<br/>current switch settings when the user toggles to the Switch/State display mode. ProControl will only display one of<br/>three views at any given time.<br/></p>
<p>Pro-Control Encoder Display<br/></p>
<p>ProControl Switch Display<br/></p>
<p>As with the HUI, meaningful strings will have to be provided in the limited available lengths. ProControl, C|24 or<br/>003 value strings require no special treatment other than what has already been stated above for HUI, since all<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.46 Page Table Guide 255<br/></b></p>
<p>of these control surfaces display their values in 4 digits/characters, as returned by GetValueString(). The<br/>biggest difference between the HUI display and the Avid control surfaces' displays is that the Avid control surfaces<br/>can display symbols.<br/></p>
<p>Let's take a moment to explain how the displays of C|24 and 003 work. Both of these surfaces have a four character<br/>LED display located above each encoder/switch pair. When in Channel mode, these scribble strips show the plug-in<br/>name (if any) on that channel. When that plug-in is selected, the display switches to show the controls for the<br/>plug-in. Now each display shows the name of the control. The display automatically switches to the current value of<br/>the control when the encoder or switch is moved or pushed.<br/></p>
<p><b>12.46.8 Appendix A. Get Parameter Value Info<br/></b></p>
<p><b>12.46.8.1 Overview<br/></b></p>
<p>AAX_Result GetParameterValueInfo ( AAX_CParamID iParameterID, int32_t i&#8592;&#8617;<br/>Selector, int32_t&#8727; oValue)<br/></p>
<p>GetParameterValueInfo() is implemented at the Data Model's AAX_CEffectParameters level, and will allow the app<br/>to query a plug-in for the &quot;meaning&quot; of its parameter values. It was designed as a general purpose mechanism that<br/>will find additional uses with new selectors in the future. It is used:<br/></p>
<p>&#8226; to ensure the EQ and Dynamics sections' EQ type selector LEDs light appropriately for a givenband's filter<br/>type. We want the appropriate EQ type LED to light for each band's filter type -whether or not your band can<br/>switch between filter types.<br/></p>
<p>&#8226; to ensure the state of the EQ section's In buttons matches the values of the associated plug-incontrols. When<br/>each band's In button is lit, it must mean that the EQ is active/on/enabled.When it is unlit, it must mean that<br/>the EQ is off/disabled/bypassed. (Some plug-ins have EQbypass controls (On = bypass); others have EQ In<br/>buttons (On = On). We can derive &quot;meaning&quot; from the control regardless of control value.)<br/></p>
<p>&#8226; similarly, to ensure the state of the Dynamics section's Filt In buttons matches the values of theassociated<br/>plug-in controls. When each band's Filt In button is lit, it must mean that the EQ isactive/on/enabled. When it<br/>is unlit, it must mean that the EQ is off/disabled/bypassed.<br/></p>
<p><b>12.46.8.2 Implementation<br/></b></p>
<p>GetParameterValueInfo() will be of type AAX_EParameterValueInfoSelector (AAX_Enums.h) and will allow for future<br/>queries on parameter value &quot;meaning.&quot;<br/>enum AAX_EParameterValueInfoSelector<br/>{<br/></p>
<p>AAX_ePageTable_EQ_Band_Type = 0,<br/>AAX_ePageTable_EQ_InCircuitPolarity = 1,<br/>AAX_ePageTable_UseAlternateControl = 2<br/></p>
<p>};<br/></p>
<p>Listing 3: Parameter Selector Enums<br/></p>
<p>Results (not return values) passed back by GetParameterValueInfo() will be of one of these two types:<br/>enum AAX_EEQBandTypes<br/>{<br/></p>
<p>AAX_eEQBandType_HighPass = 0,<br/>AAX_eEQBandType_LowShelf = 1,<br/>AAX_eEQBandType_Parametric = 2,<br/>AAX_eEQBandType_HighShelf = 3,<br/>AAX_eEQBandType_LowPass = 4,<br/>AAX_eEQBandType_Notch = 5<br/></p>
<p>};<br/></p>
<p>Listing 4: EQ Band Type Enums<br/>enum AAX_EEQInCircuitPolarity<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>256 Module Documentation<br/></b></p>
<p>{<br/>AAX_eEQInCircuitPolarity_Enabled = 0,<br/>AAX_eEQInCircuitPolarity_Bypassed = 1,<br/>AAX_eEQInCircuitPolarity_Disabled = 2<br/></p>
<p>};<br/></p>
<p>Listing 5: EQ Circuit Polarity Enums<br/>enum AAX_EUseAlternateControl<br/>{<br/></p>
<p>AAX_eUseAlternateControl_No = 0,<br/>AAX_eUseAlternateControl_Yes = 1<br/></p>
<p>};<br/></p>
<p>Listing 6: Alternate Control Enum<br/></p>
<p>Please see AAX_Enums.h for more information.<br/></p>
<p>To add support for this method, you must to override AAX_CEffectParameters::GetParameterValueInfo() from within<br/>your plug-ins Data Model. For a given AAX_CParamID, selector, and parameter value, you must pass back a result<br/>(not a return value) denoting the &quot;meaning&quot; of that parameter value. If a parameter has no meaning in the context<br/>of the given selector, you should return AAX_ERROR_UNIMPLEMENTED.<br/></p>
<p>One point to note, is that an EQ or Dynamics plug-in may have a band of EQ that does not include an EQ type<br/>selector control. The band is just always, say, a HPF. There's no control to map to the EQ type selector button in<br/>the page table and therefore no obvious control for which you would pass back AAX_eEQBandType_HighPass in<br/>GetParameterValueInfo(). What is the solution? Well, the other controls on that band (Frequency, Q/Slope, Gain,<br/>In) know what type of band they're on. Thus the plug-in should pass back the relevant EEQ_Band_Types enum<br/>in GetParameterValueInfo() for all controls on a given band of EQ. This also applies to key filter bands in your<br/>Dynamics plug-ins. In this way, the EQ type selector LEDs in both the EQ and Dynamics sections will always light<br/>appropriately.<br/></p>
<p>The second exception applies to EQ or Dynamics plug-ins that have a band of EQ that does not include an In<br/>Circuit / Out of Circuit control for that band. In this case, the band is always In Circuit (or On) and the other controls<br/>for this band should return AAX_eEQInCircuitPolarity_Enabled as the result for GetParameterValueInfo() when the<br/>AAX_ePageTable_EQ_InCircuitPolarity selector is passed in. Code snippets for GetParameterValueInfo() from the<br/>EQ III 7-Band AAX plug-in is provided below:<br/></p>
<p><b>Note<br/></b>The logic for the In Circuit / Out of Circuit LED is available in Pro Tools 6.7 and higher.<br/></p>
<p>// *************************************************<br/>// METHOD: GetParameterValueInfo<br/>// *************************************************<br/>AAX_Result EQIII_7_Parameters::GetParameterValueInfo ( AAX_CParamID iParameterID, int32_t iSelector,<br/></p>
<p>int32_t* oValue) const<br/>{<br/></p>
<p>const AAX_IParameter * parameter = mParameterManager.GetParameterByID( iParameterID );<br/>if ( !parameter )<br/></p>
<p>return AAX_ERROR_INVALID_PARAMETER_ID;<br/>if ( iSelector == AAX_ePageTable_EQ_Band_Type )<br/>{<br/></p>
<p>if ( parameter-&gt;Name() == EQIII_HPF_Type )<br/>{<br/></p>
<p>switch( parameter-&gt;GetStepValue() )<br/>{<br/></p>
<p>case 0 /*Notch*/: *oValue = AAX_eEQBandType_Notch; break;<br/>case 1 /*HiPass*/: *oValue = AAX_eEQBandType_HighPass; break;<br/>default: *oValue = -1; return AAX_ERROR_UNIMPLEMENTED; break;<br/></p>
<p>}<br/>return AAX_SUCCESS;<br/></p>
<p>}<br/>else if ( parameter-&gt;Name() == EQIII_LF_Type )<br/>{<br/></p>
<p>switch( parameter-&gt;GetStepValue() )<br/>{<br/></p>
<p>case 0 /*Peak*/: *oValue = AAX_eEQBandType_Parametric; break;<br/>case 1 /*Shelf*/: *oValue = AAX_eEQBandType_LowShelf; break;<br/>default: *oValue = -1; return AAX_ERROR_UNIMPLEMENTED; break;<br/></p>
<p>}<br/>return AAX_SUCCESS;<br/></p>
<p>}<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.47 DigiTrace Guide 257<br/></b></p>
<p>else if (parameter-&gt;Name() == EQIII_HF_Type )<br/>{<br/></p>
<p>switch (parameter-&gt;GetStepValue() )<br/>{<br/></p>
<p>case 0 /*Peak*/: *oValue = AAX_eEQBandType_Parametric; break;<br/>case 1 /*Shelf*/: *oValue = AAX_eEQBandType_HighShelf; break;<br/>default: *oValue = -1; return AAX_ERROR_UNIMPLEMENTED; break;<br/></p>
<p>}<br/>return AAX_SUCCESS;<br/></p>
<p>}<br/>else if ( parameter-&gt;Name() == EQIII_LPF_Type )<br/>{<br/></p>
<p>switch ( parameter-&gt;GetStepValue() )<br/>{<br/></p>
<p>case 0 /*Notch*/: *oValue = AAX_eEQBandType_Notch; break;<br/>case 1 /*LoPass*/: *oValue = AAX_eEQBandType_LowPass; break;<br/>default: *oValue = -1; return AAX_ERROR_UNIMPLEMENTED; break;<br/></p>
<p>}<br/>return AAX_SUCCESS;<br/></p>
<p>}<br/>}<br/>else if (iSelector == AAX_ePageTable_UseAlternateControl)<br/>{<br/></p>
<p>if ( (parameter-&gt;Name() == EQIII_HPF_Type ) ||<br/>(parameter-&gt;Name() == EQIII_HPF_Q) ||<br/>(parameter-&gt;Name() == EQIII_HPF_Slope) )<br/></p>
<p>{<br/>const AAX_IParameter* typeParam = mParameterManager.GetParameterByID(EQIII_HPF_Type_Ch);<br/>*oValue = (typeParam-&gt;GetStepValue() == 0 /*Notch*/) ? AAX_eUseAlternateControl_No :<br/></p>
<p>AAX_eUseAlternateControl_Yes;<br/>return AAX_SUCCESS;<br/></p>
<p>}<br/>else if ( (parameter-&gt;Name() == EQIII_LPF_Type) ||<br/></p>
<p>(parameter-&gt;Name() == EQIII_LPF_Q) ||<br/>(parameter-&gt;Name() == EQIII_LPF_Slope) )<br/></p>
<p>{<br/>const AAX_IParameter* typeParam = mParameterManager.GetParameterByID(EQIII_LPF_Type_Ch);<br/>*oValue = (typeParam-&gt;GetStepValue() == 0 /*Notch*/) ? AAX_eUseAlternateControl_No :<br/></p>
<p>AAX_eUseAlternateControl_Yes;<br/>return AAX_SUCCESS;<br/></p>
<p>}<br/>}<br/></p>
<p>return AAX_ERROR_UNIMPLEMENTED;<br/>};<br/></p>
<p>Listing 7: EQIII GetParameterValueInfo()<br/></p>
<p>As you'll notice, the EQ III plug-in has separate controls for Q and Slope in its HPF and LPF bands, depending<br/>on whether the band is set to notch or band pass. When the Band Type control is set to notch, the continuous Q<br/>control is used. When the Band Type is set to Hi/Lo Pass, the discrete Slope control is used. In the page table, the<br/>HPF / LPF Q controls are set to the ``Q or Slope'' in the Page Table Editor application, and the HPF / LPF Slope<br/>controls are set to the ``Q or Slope Alt''. Then, with the GetParameterValueInfo() implementation above, the control<br/>surface properly swaps the controls when the band type control is changed. In other words, when the function<br/>is called with the AAX_ePageTable_UseAlternateControl selector, if the band type control is set to notch, then<br/>AAX_eUseAlternateControl_No is returned in the result and the control surface puts the Q control at that position.<br/>If the band type is set to pass, then AAX_eUseAlternateControl_Yes is returned and the Slope is placed at that<br/>position. Collaboration diagram for Page Table Guide:<br/></p>
<p><b>12.47 DigiTrace Guide<br/></b></p>
<p>How to add tracing to your plug-ins and view logging from the plug-in host.<br/></p>
<p><b>12.47.1 On this page<br/></b></p>
<p>&#8226; What is DigiTrace?<br/></p>
<p>&#8226; DigiTrace quick start guide<br/></p>
<p>&#8226; DigiTrace log files<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>258 Module Documentation<br/></b></p>
<p>&#8226; Configuring DigiTrace<br/></p>
<p>&#8226; Bonus features<br/></p>
<p>&#8226; Adding traces to an AAX plug-in<br/></p>
<p>&#8226; Advanced DigiTrace configuration<br/></p>
<p>&#8226; Compatibility<br/></p>
<p>&#8226; Additional Information<br/></p>
<p><b>12.47.2 What is DigiTrace?<br/></b></p>
<p>DigiTrace is a logging tool used by many Avid audio applications. DigiTrace provides high-performance, real-time<br/>tracing capabilities and can help you debug hard-to-isolate problems in real-time code. Pro Tools and other Avid<br/>audio products are instrumented with DigiTrace, and it is easy to add DigiTrace logging to your AAX plug-ins.<br/></p>
<p>This document outlines how to use DigiTrace, both as a developer to add trace instrumentation to your code and as<br/>an end user to view or record trace instrumentation for an instrumented application.<br/></p>
<p><b>12.47.2.1 What does DigiTrace do?<br/></b></p>
<p>DigiTrace generates encrypted logs on users' systems. These log files can be decrypted via the DigiTraceDecryptor<br/>application that is included in the DigiTrace Tools package.<br/></p>
<p>By default, DigiTrace logs basic information including details about the system, software, component versions, and<br/>any errors that are encountered. By using a simple configuration text file, DigiTrace can be easily configured to<br/>provide additional logging information such as plug-in loading details. Here are some examples of how you can use<br/>DigiTrace:<br/></p>
<p>&#8226; You can use DigiTrace in your plug-ins when you need a convenient, high-performance logging solution.<br/></p>
<p>&#8226; You can use the default DigiTrace logs that Pro Tools generates to help you understand problems that your<br/>plug-ins encounter when running on Pro Tools.<br/></p>
<p>&#8226; You can add DigiTrace statements and stack traces to your released plug-ins in order to help you troubleshoot<br/>end-user issues more quickly.<br/></p>
<p>&#8226; You can (and should!) submit DigiTrace logs when reporting bugs and other Pro Tools issues to Avid.<br/></p>
<p><b>12.47.3 DigiTrace quick start guide<br/></b></p>
<p>This section provides quick steps for the following common tasks:<br/></p>
<p>&#8226; Find and decrypt DigiTrace log files<br/></p>
<p>&#8226; Configure DigiTrace for AAX plug-in logging<br/></p>
<p>&#8226; Configure DigiTrace for plain-text output<br/></p>
<p>&#8226; Add tracing to a plug-in<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.47 DigiTrace Guide 259<br/></b></p>
<p><b>12.47.3.1 Find and decrypt DigiTrace log files<br/></b></p>
<p>DigiTrace log files are placed into a common logs directory. The specific directory that is used depends on the<br/>version of DigiTrace - see Where are DigiTrace log files stored?<br/></p>
<p>By default, the version of DigiTrace that is installed with Avid audio products generates logs in an encrypted format<br/>with the extension &quot;.dlog&quot;. Developer builds of Pro Tools and other applications are configured to generate plain-text<br/>logs.<br/></p>
<p>You can convert .dlog files to plain-text using the DigiTraceDecryptor tool that is included in the DigiTrace Tools<br/>package available for download from the Avid developer portal. To decrypt a log using this tool, simply drag-and-<br/>drop the .dlog file onto the tool. You can also set this tool as the default application for opening .dlog files in your<br/>OS, which will allow you to decrypt and open .dlog files directly.<br/></p>
<p><b>12.47.3.2 Configure DigiTrace for AAX plug-in logging<br/></b></p>
<p>You must customize the DigiTrace configuration to enable extra logging, such as debug logging for AAX plug-ins.<br/></p>
<p>DigiTrace uses a plain-text configuration file to enable custom logging. This file uses the suffix &quot;.digitrace&quot; and is<br/>located within or beside the application. For example, the configuration files for Pro Tools are located at:<br/></p>
<p>&#8226; macOS: Pro Tools.app/Contents/Resources/config.digitrace<br/></p>
<p>&#8226; Windows: C:\Program Files\Avid\Pro Tools\ProTools.digitrace<br/></p>
<p>To configure DigiTrace to print logs from AAX_TRACE or AAX_TRACE_RELEASE macros in AAX plug-ins, add the<br/>following line to the .digitrace configuration file for the application:<br/></p>
<p>DTF_AAXPLUGINS=file@DTP_LOWEST<br/></p>
<p>If a config.digitrace file does not already exist for a DigiTrace-enabled application then you can create it to enable<br/>DigiTrace. For more information about customizing the DigiTrace configuration and enabling different levels of debug<br/>logging, see Configuring DigiTrace .<br/></p>
<p><b>12.47.3.3 Configure DigiTrace for plain-text output<br/></b></p>
<p>In order to be able to view streaming log output in real time, DigiTrace must be configured for plain-text output. This<br/>is the default configuration for developer builds of Pro Tools and other Avid audio applications.<br/></p>
<p>To configure shipping applications for plain-text log output, you must replace the application's installed DigiTrace<br/>library with a development version of the DigiTrace library. Development builds of DigiTrace are included in the<br/>DigiTrace Tools package. Search for &quot;Digitrace.framework&quot; on macOS or &quot;DigiTrace.dll&quot; on Windows and replace<br/>the installed shipping version of the library with the developer version from the DigiTrace Tools package to configure<br/>the application for plain-text output.<br/></p>
<p>Note that the developer version of DigiTrace may output logs to a different directory than the shipping version.<br/>In general, developer builds of DigiTrace will place log files in a directory next to the instrumented application. For<br/>example, developer builds of Pro Tools will output logs to a logs directory placed adjacent to the Pro Tools application<br/>bundle rather than in the user's Library/Logs/Avid folder.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>260 Module Documentation<br/></b></p>
<p><b>12.47.3.4 Add tracing to a plug-in<br/></b></p>
<p>To easily add tracing to an AAX plug-in, use the AAX_TRACE or AAX_TRACE_RELEASE macros. Logging from<br/>the &quot;release&quot; macro will be enabled for all builds of the plug-in, whereas logging from the &quot;standard&quot; macro will only<br/>be enabled in Debug builds of the plug-in.<br/></p>
<p><b>12.47.4 DigiTrace log files<br/></b></p>
<p>The default logging in Avid audio applications includes data that can be useful in many different troubleshooting<br/>situations. For example:<br/></p>
<p>&#8226; Information about the user's system configuration<br/></p>
<p>&#8226; A complete list of loaded components and libraries. (If the user has an old or incompatible version of your<br/>plug-ins installed on his system, you will know about it!)<br/></p>
<p>&#8226; Crash logs in the event of a system failure<br/></p>
<p>In addition, you can add DigiTrace logging code to your plug-ins, helping you examine potential issues in the way<br/>your plug-in is running on a user's computer even when you cannot reproduce the issue locally.<br/></p>
<p><b>12.47.4.1 Where are DigiTrace log files stored?<br/></b></p>
<p><b>12.47.4.1.1 Log directory </b>DigiTrace logs are stored in a log files directory on the user's system:<br/></p>
<p>&#8764;/Library/Logs/Avid/ (macOS) %userprofile%\AppData\Local\Avid\Logs or C:\Program Files\Avid\Pro Tools\Logs<br/>(Windows)<br/></p>
<p>This default log directory can be overridden in the DigiTrace config file. See Advanced DigiTrace configuration for<br/>more information.<br/></p>
<p><b>12.47.4.1.2 Log file names </b>By default the log file will be given a time-stamped name in the format &lt;App&#8592;&#8617;<br/>Name&gt;_YYYY_MM_DD_HH_MM_SS.dlog. This timestamp represents the system time when the log was<br/>created. Like the log directory, this log file name can be changed using the DigiTrace configuration. See<br/>Advanced DigiTrace configuration for more information.<br/></p>
<p><b>12.47.4.2 Monitoring DigiTrace logs<br/></b></p>
<p><b>12.47.4.2.1 Log files </b>You can of course view a log file by opening it periodically. In addition, assuming that<br/>DigiTrace is configured for plain text output, you can also constantly monitor a log file in a &quot;streaming&quot; manner. This<br/>is possible using standard Unix tools included with macOS or with Cygwin on Windows. In fact, this approach<br/>usually works better than telling DigiTrace to use console output due to buffering of the console output.<br/></p>
<p>&#8226; For basic real-time monitoring of a single file, use tail: tail -f /path/to/digitrace/logs/the&#8592;&#8617;<br/>_logfile.txt<br/></p>
<p>&#8226; For real-time monitoring of the most recent file in the log file directory, use a combination of tail and ls:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.47 DigiTrace Guide 261<br/></b></p>
<p><b>12.47.4.2.2 Console </b>Console behavior is quite different between macOS and Windows<br/>Windows On Windows, traces sent to the console go to the system debugging console. The only way to view the<br/>console output is to be running with an attached debugger.<br/>macOS On the Mac, console traces are sent to stdout console, which shows up in a few places:<br/></p>
<p>&#8226; If you're running in a debugger, the debug console will display stdout output, including DigiTrace messages<br/>&#8226; If you're not in the debugger, you can view the output in the Console app (/Applications/Utilities/Console). For<br/></p>
<p>Pro Tools, look under &#8764;/Library/Logs/Avid/Pro Tools.X.log in the log list. Note that these messages are not<br/>displayed in the &quot;All Messages&quot; log.<br/></p>
<p>&#8226; Alternately, you can manually look at the log output, again using the tail command, e.g. tail -f &quot;&#8764;/&#8592;&#8617;<br/>Library/Logs/Avid/Pro Tools.0.log&quot;<br/></p>
<p><b>12.47.4.3 Log file formatting<br/></b></p>
<p>Here is the beginning of an example DigiTrace log:<br/></p>
<p>*** Digidesign Session Trace for: /Applications/Pro Tools 11.0.2 3PDev.app (pid=0x5aff, version=11.0.2d626)<br/>*** Starting Timestamp: Tuesday, January 7, 2014 4:10:57 PM Eastern Standard Time (89706938666 uS)<br/>*** System Details: OS Version: 10.8,5, CPU Speed: 2.7 gHz, Architecture: Intel 64 bit, Num Processors: 8 logical 4 physical, Memory: 16384 MB<br/>*** DigiTrace Config File: /Applications/Pro Tools 11.0.2 3PDev.app/Contents/Resources/config.digitrace<br/>*** Facilities to trace:<br/></p>
<p>DTF_INSTALLED_COMPONENTS@DTP_NORMAL(0e0d)<br/></p>
<p>Time(us),Tid,Facility,Name : Debug Message<br/>---------------------------------------------------------------------------<br/>89707181683,00c07,0e0d: Pace eden lib version: 2.0.0, r22343 (2.0.0.22343), [...]<br/>89707220338,00c07,0e0d: ShoeTool_Init - shoe tool installed version is 6.000 [...]<br/>89707220374,00c07,0e0d: ShoeTool_IncreaseAIOLimits - var=46, newVal=512, cur [...]<br/>89707220380,00c07,0e0d: ShoeTool_IncreaseAIOLimits - var=47, newVal=512, cur [...]<br/></p>
<p>The log file consists of a header followed by a series of log statements. Each log statement includes the following<br/>information:<br/></p>
<p>&#8226; Time(us) - The time the message was logged, in microseconds since the machine was started.<br/>&#8226; Tid - The thread ID of the thread that logged the message.<br/>&#8226; Facility - The Facility ID of the facility that's logging the message.<br/>&#8226; Name - This is the config name added to all facilites included by this config file. This can be used to group all<br/></p>
<p>facilites related to a feature set, for instance. If not set, this is not included.<br/>&#8226; Debug Message - This is the actual string passed to the trace facility.<br/></p>
<p><b>12.47.5 Configuring DigiTrace<br/></b></p>
<p>You can configure DigiTrace to include or exclude specific traces using the config.digitrace configuration file. This<br/>file is plain text and includes a single configuration command on each line.<br/>This is the basic format for a command used to enable tracing for a single facility:<br/>facility=[console@minimum console logging priority],[file@minimum file logging priority]<br/>Here are some examples:<br/></p>
<p>&#8226; DTF_APP_VERSION=file@DTP_LOW<br/>&#8226; DTF_PLUGINS_3P=file@DTP_LOW,console@DTP_URGENT<br/>&#8226; DTF_ASSERTHANDLER=console@DTP_URGENT<br/>&#8226; DTF_DAE_MEM=console@DTP_URGENT,file@DTP_LOWEST<br/></p>
<p>For more information about special configuration commands, see Advanced DigiTrace configuration.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>262 Module Documentation<br/></b></p>
<p><b>12.47.5.1 Trace facilities<br/></b></p>
<p>Trace facilities are used by DigiTrace to determine whether or not the given trace statement should be displayed.<br/>Trace facilities allow the user to filter trace statements at the component level.<br/></p>
<p><b>12.47.5.2 Trace priorities<br/></b></p>
<p>Trace priorities are used by DigiTrace to determine whether or not the given trace statement should be displayed.<br/>DigiTrace specifies five trace priorities:<br/></p>
<p>&#8226; DTP_LOWEST<br/></p>
<p>&#8226; DTP_LOW<br/></p>
<p>&#8226; DTP_NORMAL<br/></p>
<p>&#8226; DTP_HIGH<br/></p>
<p>&#8226; DTP_URGENT<br/></p>
<p>The DigiTrace configuration file specifies minimum trace priorities. For example, if a trace statement uses DTP_LOW<br/>and DigiTrace is configured to use DTP_NORMAL as the minimum trace priority, then the trace statement will not be<br/>sent to the output target. In general, the DTP_LOWEST priority setting will populate the trace output with the most<br/>verbose information while the DTP_URGENT setting will output only the most high level details.<br/></p>
<p><b>12.47.5.3 Useful DigiTrace facilities<br/></b></p>
<p>This section includes descriptions of several facilities that are used in Pro Tools and other Avid audio products. The<br/>logging provided by these facilities may be helpful when diagnosing plug-in issues.<br/></p>
<p>&#8226; DTF_AAXPLUGINS This is the standard facility for AAX plug-ins. This facility will only log traces that are<br/>present in AAX plug-ins themselves, not traces in any hosting code. Plug-ins may use the AAX_TRACE or<br/>AAX_TRACE_RELEASE macros to log to this facility.<br/><b>Note<br/></b></p>
<p>Disabling the DTF_AAXPLUGINS facility will slightly reduce the overhead of trace statements and chip<br/>communication on HDX systems.<br/></p>
<p>&#8226; DTF_AAXHOST at DTP_NORMAL Logging from the main AAX host component. Use a lower priority for<br/>additional AAX Host tracing.<br/></p>
<p>&#8226; DTF_PLUGINS at DTP_LOW Miscellaneous plug-in operations, including page table logging, preset direc-<br/>tory errors, and DLL loading and unloading<br/></p>
<p>&#8226; DTF_TIPLUGINS at DTP_NORMAL Logging for HDX plug-in algorithm handling details such as packet<br/>management and private data field state reset. Use DTP_LOW for deeper tracing.<br/></p>
<p>&#8226; DTF_TISHELLMGR at DTP_HIGH Logging from the HDX RTOS<br/></p>
<p>&#8226; DTF_DAE_HOSTDEVICE at DTP_URGENT Performance logging from the real-time audio render thread.<br/>See Real-time AAE performance logging with DigiTrace<br/></p>
<p>&#8226; DTF_DAE_ERRORS at DTP_NORMAL or DTP_LOW Information about any errors that occur in AAE. Use<br/>DTP_LOW to enable stack traces.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.47 DigiTrace Guide 263<br/></b></p>
<p>&#8226; DTF_ASSERTHANDLER at DTP_NORMAL or DTP_LOW Similar to DTF_DAE_ERRORS: Information about<br/>any asserts that fail. Use DTP_LOW to enable stack traces.<br/></p>
<p>&#8226; DTF_THREAD_NAMES_AND_PRIORITIES at DTP_NORMAL or DTP_LOW Allows you to look up a<br/>thread's debug name from its ID on the standard trace line. Thread names and IDs will be traced as they are<br/>created, and you can then use that ID to resolve the thread name of later trace statements. Use DTP_&#8592;&#8617;<br/>NORMAL for just names and IDs, and DTP_LOW to include priorities.<br/></p>
<p>&#8226; DTF_PACESUPPORT at DTP_NORMAL Plug-in digital signature logging, with some diagnostics for digital<br/>signature verification failures.<br/></p>
<p>&#8226; DTF_ADC at DTP_NORMAL Delay compensation logging, including host accounting for plug-in latency.<br/>&#8226; DTF_AUTOMATION at DTP_LOW Parameter touch and release logging.<br/>&#8226; DTF_AUDIOSUITE at Logging of events specific to AudioSuite plug-in instances.<br/></p>
<p><b>12.47.6 Bonus features<br/></b></p>
<p><b>12.47.6.1 Real-time AAE performance logging with DigiTrace<br/></b></p>
<p>Pro Tools 11 and higher includes logging for audio render callback performance. To enable this logging, enabled<br/>the DTF_DAE_HOSTDEVICE facility at DTP_URGENT. This facility will enable logging of real-time audio render<br/>thread metrics around any render errors that occur.<br/></p>
<p>Here is an example of a performance log:<br/></p>
<p>Int(LL): hstEr=0, ioEr=0, dif=2665(2891,23129), tot=2517(1648,2317), in=51(58,83),<br/>clbk=2158(1508,2158), out=108(99,164), offset=[12], mxW=1101(com.avid.aax.&#8592;&#8617;<br/>eleven.free)<br/></p>
<p>The different values included in this log are:<br/></p>
<p>&#8226; hstEr<br/></p>
<p>&#8226; ioEr<br/></p>
<p>&#8226; dif<br/></p>
<p>&#8226; tot<br/></p>
<p>&#8226; in<br/></p>
<p>&#8226; clbk<br/></p>
<p>&#8226; out<br/></p>
<p>&#8226; offset<br/></p>
<p>A log of 'x=a (b,c)' means that the (x) value (e.g. tot) for the interrupt was (a) us, the running average was (b) us,<br/>and the maximum value encountered was (c) us. Therefore, in the example above:<br/></p>
<p>&#8226; 1648 us average total time was spent in each interrupt<br/>&#8226; 2517 us was spent in this interrupt<br/>&#8226; Eleven Free was the longest worker in this interrupt<br/></p>
<p>In practice, it is difficult to precisely log this information during an error. This is due to changes in the interrupt<br/>pattern and scheduling when the audio engine is halted. In order to account for this, the performance logging will<br/>print out logs for several interrupts around when any error occurs. The actual audio engine error (hstEr) may be<br/>reported for a &quot;junk&quot; interrupt cycle that is spuriously logged during this halt process.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>264 Module Documentation<br/></b></p>
<p><b>12.47.6.2 Adding signposts to the DigiTrace log at run-time<br/></b></p>
<p>Use the shift-'&#8764;' key combination to add a &quot;Trace Flag&quot; line into the DigiTrace log. This allows you to add a &quot;signpost&quot;<br/>line to the log right when an important event happens, or before/after an important operation, so that it is easier to<br/>find the important details when inspecting the log later.<br/></p>
<p>176603608088,2b603,0016: DSK_PrePrimeDiskTask::PrePrimeDiskTask - finish<br/>176603961348,00307,0000: Trace Flag 3 (diff prev: 2.40s, diff start: 7.18s)<br/>176605252296,00307,0000: Trace Flag 4 (diff prev: 1.29s, diff start: 8.47s)<br/>176605252779,00307,0f09: 2016-07-19 23:36:32.499 PTC_Mgr::Idle() -- performing task (Websocket Base)<br/>176606039830,00307,0000: Trace Flag 5 (diff prev: 0.79s, diff start: 9.26s)<br/></p>
<p>Each trace flag signpost includes the text &quot;Trace Flag&quot; and the diff (in seconds) from both the previous trace flag<br/>and the first trace flag which was triggered during the current run of the app.<br/></p>
<p>These lines will be printed regardless of the current DigiTrace configuration settings.<br/></p>
<p><b>Host Compatibility Notes </b>This feature is available in Pro Tools 12.6 and higher<br/></p>
<p><b>12.47.7 Adding traces to an AAX plug-in<br/></b></p>
<p><b>12.47.7.1 Basic AAX logging<br/></b></p>
<p>Standard printf-style logging from AAX plug-ins is very easy. This feature is built into the AAX specification and<br/>is exposed to plug-ins via the AAX_TRACE and AAX_TRACE_RELEASE macros. For more information about basic<br/>logging, see the documentation for those macros.<br/></p>
<p><b>Note<br/></b>To enable basic AAX logging via these macros, the DTF_AAXPLUGINS trace facility must be enabled.<br/></p>
<p><b>12.47.7.1.1 Tracing for AAX DSP </b>The AAX_TRACE and AAX_TRACE_RELEASE macros, as well as<br/>AAX_ASSERT, are cross-platform and are supported for use in AAX DSP algorithms. For more information<br/>about tracing from AAX DSP algorithms, see the Tracing section in the HDX DSP Guide.<br/></p>
<p><b>12.47.7.2 Advanced DigiTrace logging features<br/></b></p>
<p>As a developer, you can use several advanced macros to extend the functionality of DigiTrace logging in your plug-<br/>in beyond the simple printf-style features provided by AAX_TRACE. The full DigiTrace macro suite includes<br/>macros for stack traces, very long traces, or even the ability to dump a block of memory to the log.<br/></p>
<p>Note that these advanced features are only available on the host system. They are not currently available from<br/>algorithms running on embedded hardware.<br/></p>
<p><b>12.47.7.2.1 What files do I include in my project? </b>To add advanced DigiTrace instrumentation to your source<br/>code you must:<br/></p>
<p>1. Include DigiTrace.h in the file where you are going to put your trace statements.<br/>2. Compile CDigitraceAccess.cpp into your project<br/></p>
<p>If you have problems including the DigiTrace header file, try moving it to the top of the file that you're including it<br/>into. DigiTrace has no other dependencies and should be safe to include into any component.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.47 DigiTrace Guide 265<br/></b></p>
<p><b>12.47.7.2.2 What do I do if I encounter problems compiling or linking? </b>Should you run into linker errors or<br/>other problems after adding the DigiTrace header file, please go through the following items and verify that each is<br/>included in your project:<br/></p>
<p>&#8226; The CDigitraceAccess.cpp file automatically searches for and loads the DigiTrace.dll (Windows) or Digi&#8592;&#8617;<br/>Trace.framework (Mac) component and ensures that the appropriate function pointers are initialized. If you<br/>receive linker errors, the missing symbols are likely in this file. Note that your project will need the path to<br/>CDigiTraceAccess.h in order to compile this file.<br/></p>
<p>&#8226; If you receive an include file error for DigiPragmas.h then you will need to add the header's path to your<br/>project's search paths. This file is included in the most recent DigiTrace Tools packages but may not be<br/>included in some older packages.<br/></p>
<p><b>12.47.7.2.3 Macros </b>DigiTrace provides five core macros for trace output, which are:<br/></p>
<p>&#8226; TRACE_R - for general printf style tracing. Subject to a total line limit of 256 chars.<br/></p>
<p>&#8226; TRACE_PUTS_R - prints an arbitrary length buffer, splitting it up into clean lines based on line breaks. No<br/>formatting.<br/></p>
<p>&#8226; STACKTRACE_R - for stack trace printing. See below.<br/></p>
<p>&#8226; MEMTRACE_R - for memory buffer hex tracing<br/></p>
<p>&#8226; FXTRACE_R - for automatic function entry and exit tracing<br/></p>
<p><b>12.47.7.2.4 Debug vs. release macros </b>All of the macros listed above are general-use macros, which generate<br/>output in both Debug and Release builds. They each have a debug-only variant which excludes the trailing &quot;&lt;&#8592;&#8617;<br/>TT&gt;_R&lt;/TT&gt;&quot;. Like AAX_TRACE, these debug-only versions compile to a noop in release builds.<br/></p>
<p>The use of debug-only macros is not usually necessary due to the fact that release traces are encrypted and hidden<br/>from end users (but not from other developers.) As a best practice, we recommend using the &quot;_R&quot; version of a<br/>macro whenever possible. The debug versions of the macros should only be necessary in special circumstances<br/>where you specifically do not want to compile the code into release builds.<br/></p>
<p>For more information about tracing in release builds see Security concerns<br/></p>
<p><b>12.47.7.2.5 Syntax </b>Adding a DigiTrace statement to your code is as easy as making a single function call thanks<br/>to DigiTrace's predefined macros. The basic macro syntax is:<br/>MACRO_NAME( TRACE_FACILITY_NAME [| TRACE_PRIORITY_LEVEL], MESSAGE_STRING )<br/></p>
<p>Here is a code sample:<br/>bool my_function(char* data_buffer, int data_buffer_len)<br/>{<br/></p>
<p>FXTRACE_R( DTF_PLUGINS_3P, &quot;my_function&quot; ); // Automatically trace function entry and exit.<br/>// You need only to specify a trace facility.<br/>OSErr err = FrobnicateBuffer(data_buffer, data_buffer_len);<br/>if( noErr != err )<br/>{<br/></p>
<p>TRACE_R( DTF_PLUGINS_3P | DTP_HIGH, &quot;Couldn&#8217;t frobnicate the buffer: %s&quot;, OSErrToString(err) );<br/>}<br/>else<br/>{<br/></p>
<p>int cBytesToTrace = 64;<br/>MEMTRACE( DTF_PLUGINS_3P | DTP_LOW, &quot;Data after frobnication&quot;, data_buffer, cBytesToTrace );<br/></p>
<p>}<br/>}<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>266 Module Documentation<br/></b></p>
<p><b>12.47.7.2.6 Generating stack traces </b>The STACKTRACE_R macro is very useful for getting stack traces of<br/>important events in the code like throwing errors (which can be thrown from many locations). One particularly useful<br/>feature of this macro is that it allows you to specify a facility and priority for the printf part of the stacktrace, e.g.<br/>DTP_NORMAL, and another one for the stacktrace step, e.g. DTP_LOW. See DigiTrace.h for a full list of macros<br/>and their documentation.<br/></p>
<p><b>12.47.7.2.7 Turning off tracing in a specific file </b>You can explicitly disable tracing in an instrumented file in the<br/>build by defining the MTurnDbgTraceOff symbol at the top of the file.<br/></p>
<p><b>12.47.7.3 Security concerns<br/></b></p>
<p>Unless you provide your own logging encryption, DigiTrace logs are not secure and should not be used to store any<br/>sensitive information.<br/></p>
<p>Logs generated by Pro Tools release builds on users' systems are encrypted. This is primarily for the sake of<br/>avoiding confusion in our user community, since DigiTrace logs can be cryptic and potentially misleading for users<br/>who are not familiar with our code.<br/></p>
<p>Avid and other third-party developers will see your plug-ins' release trace statements if they load your plug-ins with<br/>the appropriate trace facilities enabled. We highly recommend that you keep this in mind when developing your<br/>trace statements, both in order to prevent confusion (see the formatting guidelines in the AAX_TRACE_RELEASE<br/>documentation) and in order to maintain the security of your code.<br/></p>
<p><b>12.47.8 Advanced DigiTrace configuration<br/></b></p>
<p>The basic configuration command to enable tracing for a facility is described above in Configuring DigiTrace.<br/></p>
<p>There are also additional commands that can be added to the DigiTrace configuration file for more advanced con-<br/>figurations.<br/></p>
<p><b>12.47.8.1 Configuration command format<br/></b></p>
<p>&#8226; All DigiTrace configuration commands are listed in the configuration file with the form &lt;token&gt;=&lt;value&gt;<br/></p>
<p>&#8226; Any blank line or line beginning with a '#' character is ignored<br/></p>
<p>&#8226; Tokens are not case sensitive<br/></p>
<p>&#8226; If there are repeated tokens in a file, the last token wins<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.47 DigiTrace Guide 267<br/></b></p>
<p><b>12.47.8.2 Advanced configuration commands<br/></b></p>
<p>&#8226; FileTracingDir = { DIRPATH }<br/></p>
<p><b>&#8211; </b>Default: USE_RELATIVE_PATH<br/><b>&#8211; </b>Custom log file directory. e.g. &quot;C:\MyTraceDir&quot; on Windows or &quot;&#8764;/MyTraceDir&quot; on macOS.<br/><b>&#8211; </b>If DIRPATH == USE_RELATIVE_PATH then the output trace file directory will be created next to the<br/></p>
<p>target application.<br/></p>
<p>&#8226; Append = { true | false }<br/></p>
<p><b>&#8211; </b>Default: false<br/><b>&#8211; </b>Append to file. If true, the output of this trace will be appended to any existing log file with the same<br/></p>
<p>name. Otherwise, this trace will overwrite an existing log file with the same name.<br/></p>
<p>&#8226; LogFileLimit = { LIMIT }<br/></p>
<p><b>&#8211; </b>Default: no limit<br/><b>&#8211; </b>Limits the number of log files kept around for this config file to the specified number.<br/><b>&#8211; </b>If set to an integer value, DigiTrace will delete the oldest log file(s) until there are only N most recent log<br/></p>
<p>files in the output folder.<br/><b>&#8211; </b>If you rename an output file so it does not have the standard prefix, it is never deleted by this option.<br/><b>&#8211; </b>Does not work with the &quot;append&quot; option<br/></p>
<p>&#8226; TraceQueueSize = { small | medium | large }<br/></p>
<p><b>&#8211; </b>Default: small<br/><b>&#8211; </b>This controls the amount of memory allocated to the trace queue. You probably won't need to change it.<br/></p>
<p>&#8226; BeQuiet = { true | false }<br/></p>
<p><b>&#8211; </b>Default: false<br/><b>&#8211; </b>&quot;Quiet&quot; mode. If set to true, this configuration option makes all trace output occur without any decora-<br/></p>
<p>tion (i.e. no timestamps, no thread id, no process id, etc.).<br/><b>&#8211; </b>This mode may be useful for some types of real-time vector tracing or for configuring formatted logs for<br/></p>
<p>post-processing with a text editor.<br/></p>
<p>&#8226; FileId = { FILEID }<br/></p>
<p><b>&#8211; </b>Default: none<br/><b>&#8211; </b>If set, this string is included in the filename created by DigiTrace for trace output files.<br/><b>&#8211; </b>Does not work with the &quot;append&quot; option<br/></p>
<p>&#8226; Name = { NAME }<br/></p>
<p><b>&#8211; </b>Default: none<br/><b>&#8211; </b>If set, this string is included in every trace for all the facilities that are enabled in this config file.<br/><b>&#8211; </b>You can have one of these per config file.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>268 Module Documentation<br/></b></p>
<p><b>12.47.8.3 Dynamically changing the DigiTrace configuration<br/></b></p>
<p>DigiTrace config files can be loaded dynamically, which means that you can add new configs while the instrumented<br/>application is running. Below are the details surrounding dynamic loading:<br/></p>
<p>&#8226; In debug builds, this will happen each time the app comes to the foreground.<br/>&#8226; The API only does anything if something has changed in your config files that will result in different tracing<br/></p>
<p>of some sort. If nothing has changed, the overhead to make the call is &lt; 1ms, and current tracing is not<br/>affected.<br/></p>
<p>&#8226; If something has changed, the changes are merged in to the existing config objects in memory. Active log<br/>files are not interrupted when possible. This takes around 200ms (mostly because of a sleep command that<br/>lets threads finish tracing things). Traces that happen in threads during this changeover will be dropped.<br/></p>
<p>&#8226; No code in the actual tracing commands was changed.<br/>&#8226; You can change any of the attributes of the trace facilities (priority level, file or console, etc).<br/>&#8226; You can add new config files on the fly, or if you start with no config file, you can add one on the fly.<br/></p>
<p><b>12.47.9 Compatibility<br/></b></p>
<p>DigiTrace is an internal testing and troubleshooting tool. Although we will try to provide up-to-date documentation<br/>so that third-party developers can use this tool, we may need to change the way that DigiTrace works at some point<br/>and so we cannot make any promises regarding forwards-compatibility.<br/></p>
<p>At the time of this writing:<br/></p>
<p>&#8226; DigiTrace is fully compatible with Pro Tools 8.0.3 and later. DigiTrace is installed by default with compatible<br/>Pro Tools shipping versions and with some Pro Tools Development Builds.<br/></p>
<p>&#8226; DigiTrace is compatible with all versions of the DAE dish in the DSH environment. Tracing must be explicitly<br/>enabled in the dsh executable by placing a config.digitrace config file next to the executable.<br/></p>
<p>If you notice significant bugs or other problems with DigiTrace in any Pro Tools release then we encourage you<br/>to report the issues to us on the developer forum. We may not be able to address issues immediately, but your<br/>feedback is appreciated.<br/></p>
<p><b>12.47.10 Additional Information<br/></b></p>
<p><b>12.47.10.1 Confidentiality<br/></b></p>
<p>As with all information provided in the AAX SDK, the information provided in this documentation is confidential and<br/>is bound by the terms of your NDA with Avid. You may provide customized DigiTrace configuration files to end<br/>users in order to generate useful debugging information on their systems. However, you may not provide users with<br/>decrypted DigiTrace logs or with other details provided in this DigiTrace documentation.<br/></p>
<p>Collaboration diagram for DigiTrace Guide:<br/></p>
<p><b>12.48 DSH Guide<br/></b></p>
<p>How to test basic functionality of AAX plug-ins using DSH test tool.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.48 DSH Guide 269<br/></b></p>
<p><b>12.48.1 Contents<br/></b></p>
<p>&#8226; What is DSH and how it works<br/></p>
<p>&#8226; Basic set of commands of the DAE dish<br/></p>
<p>&#8226; Basic plug-in tests<br/></p>
<p>&#8226; Debugging and tracing in DSH<br/></p>
<p>&#8226; Scripting interface and batch profiling<br/></p>
<p><b>12.48.2 What is DSH and how it works<br/></b></p>
<p>DigiShell is a software tool that provides a general framework for running tests on Avid audio hardware. As a<br/>command-line application, DigiShell may be driven as part of a standard, automated test suite for maximum test<br/>coverage. DSH supports loading all types of AAX plug-ins except AS, and is especially useful when running per-<br/>formance and cancellation tests of AAX-TI types. DigiShell is included in Pro Tools Development Builds as dsh.exe<br/>(Windows) or as dsh in the CommandLineTools directory (Mac).<br/></p>
<p>After it is launched, DigiShell waits for a command name and parameters to be entered via stdin; command results<br/>are output via stdout. DigiShell parses its input as command name, followed by a single space, and then command<br/>parameters. The command parameters are expected to be a yaml-encoded string. Here are two examples of strings<br/>in compact (single-line) yaml format:<br/></p>
<p>&#8226; A hash containing lists in compact yaml syntax { key1: [val1, val2], key2: [val3,<br/>val4] }<br/></p>
<p>&#8226; A list of two lists [[PIO, 0, 1], [DSP, 1, 1]]<br/></p>
<p><b>12.48.3 Basic set of commands of the DAE dish<br/></b></p>
<p>DigiShell has built-in commands for getting help, creating a DigiTrace configuration and loading DigiShell modules<br/>known as &quot;dishes&quot;. One can see the command list by running the help command without any parameters. Passing<br/>a command name as a single string parameter to the help command will give a more detailed command description.<br/></p>
<p>The default installation of DigiShell includes a few dishes, including the DAE dish. This dish loads the AAE audio<br/>engine and can be used for loading and testing basic functionality of plug-ins. The DAE dish can also be used to<br/>load a plug-in for basic debugging purposes, and provides a ligher-weight debugging environment than the full Pro<br/>Tools application.<br/></p>
<p>Another dish supplied with DSH, the aaxh dish, provides a lower-level hosting environment for AAX plug-ins. This<br/>dish loads a dedicated AAX host component without audio routing logic or other audio engine responsibilities. In<br/>this guide we will focus on loading and running plug-ins using the DAE dish, but we encourage you to also explore<br/>the commands available in the aaxh dish and to learn how to exercise your plug-ins in that environment.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>270 Module Documentation<br/></b></p>
<p><b>12.48.3.1 Loading plug-ins in DSH<br/></b></p>
<p>The following commands can be used to load and configure the DAE dish:<br/></p>
<p>&#8226; load_dish DAE Loads the DAE dish<br/></p>
<p>&#8226; init_dae 48000 This command is optional. It configures AAE to work at a specific sample rate. By<br/>default it will work at 44100 Hz.<br/></p>
<p>Loading the DAE dish into the DigiShell environment with the built-in load_dish command will extend the set of<br/>available commands. Amoung them there is a run command. The run command can be used in two ways:<br/></p>
<p>&#8226; Execute with no arguments: List all plug-in configurations which are available to AAE<br/>&#8226; Execute with arguments specifying a particular plug-in configuration: Load a plug-in instance using the spec-<br/></p>
<p>ified configuration<br/></p>
<p>You can also search for the id and spec of the specific plug-in with the findpi command, which takes a plug-in's<br/>name or part of it as an argument, and then searches through the whole list of available plug-ins using this pattern.<br/></p>
<p>Figure 1: DSH command for loading plug-ins.<br/></p>
<p>If the plug-ins was instantiated successfully, then DSH will list all its parameters, just like on the screenshot. If<br/>instantiation fails, then DSH in most cases will output the error code, although it is not always obvoius what this<br/>error code means. Here is the list or possible reasons of some failures:<br/></p>
<p>&#8226; -9060 failed to load DSP Hybrid plug-in<br/></p>
<p>&#8226; -14140 IO interface is not connected<br/></p>
<p>&#8226; -7050 not enough resources for instantiating plugin<br/></p>
<p>&#8226; -14378 plug-in exceeded memory limits<br/></p>
<p>&#8226; -14003 something is wrong with your HDX card<br/></p>
<p>-30xxx errors are dynamically-generated and can indicate different failures. Failures due to plug-ins exceeding the<br/>cycle limit of the DSP CPU will often appear as -30xxx errors. See -30xxx: Dynamically-generated error codes in<br/>the HDX DSP Guide for more information.<br/></p>
<p><b>Note<br/></b>run command works for Native and DSP plug-ins, but not for the Audio Suite ones. Also it will fail for DSP<br/>Hybrid plug-ins. To be able to instantiate them, one should run acquiredeck command.<br/></p>
<p>There are several DAE dish commands for operating with plug-ins' instances:<br/></p>
<p>&#8226; getcurrentinstance Returns the index of the current instance. The counting strarts from 0 for the first<br/>instance that has been instantiated, and increments by one for every next instance.<br/></p>
<p>&#8226; getinstanceproperties Returns the effect name for the Native plug-ins, and much more detailed info<br/>for the DSP instances.<br/></p>
<p>&#8226; setcurrentinstance Sets the instance with the given index as the current instance.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.48 DSH Guide 271<br/></b></p>
<p><b>12.48.3.2 Working with HDX card from DSH<br/></b></p>
<p>One of the benefits of the DAE dish in DigiShell is that it has direct access to the shell environment that loads DSP<br/>plug-ins. The included facilities for retrieving load error information from the DSP manager can be very helpful for<br/>debugging DSP plug-in load failures. For example, you can use the following DAE dish commands to determine<br/>what resource requirement is preventing additional instances from loading onto a single DSP:<br/></p>
<p>1. reservetidsp all Reserves all unused DSPs in the system<br/></p>
<p>2. unreservetidsp 0 Frees the first DSP for plug-in allocation<br/></p>
<p>3. getlastdsploaderror Retrieve the text of the error that was generated when the final Effect instance<br/>attempted to load<br/></p>
<p>4. getdspinfo 0 Returns detailed info about the DSP chip with the given index. By executing this command<br/>you can figure out whether particular chip is in use currently, which plug-ins are instantiated there, how many<br/>resources they consume and how many resources are still available.<br/>Figure 2: Info about the DSP chip with the given index.<br/></p>
<p><b>12.48.3.3 DAE dish tips<br/></b></p>
<p>&#8226; With the standard configuration, the system's AAX plug-ins folder will be used by DSH and DTT. To over-<br/>ride this, create a folder named &quot;Plug-Ins&quot; next to the DTT and CommandLineTools directories. While that<br/>directory exists, AAE will only scan the plug-ins in the new Plug-Ins folder.<br/></p>
<p><b>12.48.4 Basic plug-in tests<br/></b></p>
<p>There are some basics tests that can be performed for AAX plug-ins in DSH. Among them are instantiation test,<br/>measuring of amount of processor cycles that DSP plug-in may consume on different settings, cancellation test and<br/>so on.<br/></p>
<p><b>12.48.4.1 Cycle count performance test<br/></b></p>
<p>Use the DAE.cyclesshared command in the DAE dish to profile a DSP algorithm's cycle count performance. This<br/>command measures both the shared and the per-instance cycles used by a plug-in, both of which must be reported<br/>to the host. This command also includes the option to load a custom plug-in preset so that various algorithm code<br/>paths may be exercised. It is important to report the maximum possible number of cycles that the plug-in may need,<br/>so that it had enough resources, even in the worst case. Otherwise one can obtain noise and clicks in the output<br/>audio on the extreme plug-in's settings.<br/></p>
<p>The full syntax of this command is as follows: cyclesshared &lt;index -- spec -- {key:value,<br/>key:value, etc.}&gt; index - Index of the plug-in as listed by the DAE.run command spec - Plug-in ID<br/>triplet in array, e.g. ['AVID', 'DmGn', 'DGDT'] key:value hash options: idx - Index of the plug-in spec - Plug-in<br/>ID triplet array run_cached: &lt;true -- false&gt; - Whether to use cached code when measuring. De-<br/>faults to false. load_preset: &lt;filename&gt; - Load the specified preset for each instance before measuring<br/>performance adjust_controls: &lt;true - false&gt; - Randomly change the plug-in's parameter state<br/>before running the test<br/></p>
<p>Examples:<br/></p>
<p>&#8226; cyclesshared 21<br/></p>
<p>&#8226; cyclesshared ['AVID', 'DmGn', 'DGDT']<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>272 Module Documentation<br/></b></p>
<p>&#8226; cyclesshared {spec: ['AVID', 'DmGn', 'DGDT'], load_preset: &quot;mySettings.&#8592;&#8617;<br/>tfx&quot;}<br/></p>
<p>&#8226; cyclesshared {spec: ['AVID', 'DmGn', 'DGDT'], adjust_controls: true}<br/></p>
<p>&#8226; cyclesshared {idx: 21, run_cached: true} Do not use cached measurements for re-<br/>ported cycle counts!<br/></p>
<p>Normal output of this command should look like this:<br/></p>
<p>Figure 3: Normal cyclesshared command output.<br/></p>
<p>Sometimes during the development process it may happen that this test fails, and the reason of such a failure can<br/>be different:<br/></p>
<p>1. Plug-in exceeded the DSP chip's memory limit<br/>Figure 4: Plug-in exceeded the memory limit.<br/></p>
<p>2. Plug-in exceeded the processors cycles budget<br/></p>
<p>&#8226; The number of instance and shared cycles looks acceptable, but expected number of plug-in's instances<br/>that can be instantiated on the chip/card at different sample rates is zero. Resultant cycle count can be<br/>used for calculating how much plug-in has exceeded the limit, and how much it should be optimized.<br/>Figure 5: Plug-in exceeded the processor cycles budget.<br/></p>
<p>&#8226; If plug-in exceeds the processor's cycles budget too much, then cyclesshared test will most likely output<br/>the warning that is highlighted with orange color on the screenshot below. Also the number of both<br/>instance and shared cycles will be shown as zero or one.<br/>Figure 6: Plug-in exceeded the processor cycles budget very much.<br/></p>
<p>3. Plug-in processing is not balanced.<br/>If some big parts of code, which do not really depend on the specific plug-in settings, are located under<br/>condition structures, and if they make plug-in to do more calculations in one case and less in another case,<br/>then that means that plug-in's processing is not balanced. This may cause some problems, because it is<br/>hard to predict when this or that condition may become true and how much the amount of processor's cycles<br/>that plug-in needs will increase. So it is better to remove such conditional blocks and to performe those<br/>calculations every time, even if their result is not really needed in particular cases.<br/>To indicate such situations the correlation coefficient can be used. If its value close to zero, then plug-in has<br/>the described problems.<br/>Figure 7: Plug-in processing is not balanced.<br/></p>
<p><b>12.48.4.1.1 Performance profiling and test signals </b>Some algorithms' performance characteristics are<br/>program-dependent, and in such cases use of the the cycles command alone may not be sufficient. To route<br/>a test signal to your plug-in while measuring cycles, use of the cycles command along with the load_wav_file<br/>command in the DAE dish. The basic approach is as follows:<br/></p>
<p>&#8226; Use single-buffer manual processing, rather than continuous<br/></p>
<p>&#8226; Split your test signal into several pieces, with each piece to be processed using different settings<br/></p>
<p>&#8226; Loop on:<br/></p>
<p><b>&#8211; </b>Load or adjust the PI's settings,<br/><b>&#8211; </b>process the next piece of audio while measuring cycles<br/></p>
<p>Example:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.48 DSH Guide 273<br/></b></p>
<p>1. piproctrigger manual set to single-buffer processing<br/></p>
<p>2. load_wav_file &quot;testaudio_pt1.wav&quot;<br/></p>
<p>3. load_wav_file &quot;testaudio_pt2.wav&quot;<br/></p>
<p>4. load_wav_file &quot;testaudio_pt3.wav&quot; load audio buffers; take note of return ...<br/></p>
<p>5. run &lt;mypluginIndex&gt;<br/></p>
<p>6. load_settings &quot;mySavedSettings.tfx&quot; load the settings OR control [1,24] # set con-<br/>trols directly<br/></p>
<p>7. cycles b1 measure cycles while processing first file<br/></p>
<p>8. load_settings &quot;mySavedSettings2.tfx&quot; load the next settings<br/></p>
<p>9. cycles b2 measure cycles while processing second file ... etc.<br/></p>
<p><b>12.48.4.2 Cancellation test<br/></b></p>
<p>When porting plug-ins from RTAS to AAX platform, or form 32-bit to 64-bit architecture, or from Native to DSP, it<br/>may be useful to compare output of two plug-in's versions to make sure that it is still the same and nothing has been<br/>broken. For this purpose DSH cancellation test can be used.<br/></p>
<p>In the simplest case, when both plug-ins are present in the same version of Pro Tools (Native and DSP version<br/>of the same plug-in for example), then diff command can be used to perform the test: diff [ &lt;spec1&gt;,<br/>&lt;spec2&gt;, &lt;frames&gt; ] which reports the peak difference in the output amplitude of plug-ins &lt;spec1&gt; and<br/>&lt;spec2&gt; after processing &lt;frames&gt; frames of a 1 kHz full-scale sine wave. The maximum difference will be<br/>provided in dB.<br/></p>
<p>Another way to perform the cancellation test is to process audio with each plug-in separately manually and to<br/>compare the result after that. This scenario allows you to load custom input audio file and special plug-in settings:<br/></p>
<p>1. piproctrigger manual This command should be run for DSP plug-ins before loading them. When<br/>this option is set, DSP plug-in will start process audio only after piproc command is called. Otherwise it will<br/>start processing right after the instatiation process.<br/></p>
<p>2. run 81 Laoding plug-in<br/></p>
<p>3. load_settings &quot;/Users/settings/pitch_settings.tfx&quot; Loading settings file<br/></p>
<p>4. load_wav_file &quot;/Users/audio_files/mono_file.wav&quot; Wav file will be loaded in a buffer,<br/>or in several buffer if it has more than one channel. Command will output references to the buffers, like b1,<br/>b2 ...<br/><b>Note<br/></b></p>
<p>It is not recoomended to choose very long audio files for the DSP proceesing, since the test is very<br/>slow, and processing of 10 sec audio file may take up to 1 min depending on the complexity of the<br/>plug-in's algorithm.<br/></p>
<p>5. bclone b1 The easiest way to create the output buffer of the same size is to copy th einput buffer. Com-<br/>mand will also output references to the resultant buffers.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>274 Module Documentation<br/></b></p>
<p>6. piproc [b1, b2] Command which actually is doing passes the input audio through the current plug-in,<br/>and is recording the result to the output buffer (which is b2 here). For stereo plug-in command will look like<br/>piproc [[b1,b2],[b3,b4]]<br/></p>
<p>7. bfsave [b2, &quot;/Users/saved_buffer&quot;] Output buffer can be stored to the disk. This may be<br/>needed for the cases, when one wants to compare the output of plug-ins, which can not be loaded in the<br/>same instance of the DSH. So the output of one plug-in can be saved to disk and then loaded later in the<br/>anothe instance of DSH. Also output buffer can be saved as .wav file with save_wav_file command.<br/></p>
<p>8. bfload &quot;/Users/saved_buffer&quot; Saved buffer can be loaded again by this command. It will output<br/>the reference to the newly created buffer.<br/></p>
<p>9. bacmp [b1,b2] This command will compare the contents of the buffers b1 and b2. So it can compare<br/>the output buffers of two plug-ins and thus make the cancellation test.<br/></p>
<p><b>12.48.5 Debugging and tracing in DSH<br/></b></p>
<p>DSH provides a lighter-weight debugging environment than the full Pro Tools application. So it should be easier<br/>to step though the description code of the plug-in there, rather the in PT, because DSH does significantly less<br/>initialization work than PT during the loading process.<br/></p>
<p>Also DSH is very useful in situations, when one wants to debug the plug-in's algorithm on a specific audio buffer.<br/>The only way to follow plug-in's algorithm work step-by-step on the certain piece of audio is to debug the piproc<br/>command.<br/></p>
<p>DSH supports tracing, which is based on Avid's DigiTrace. To enable trace logs in DSH, one should create a dsh.&#8592;&#8617;<br/>digitrace config file for it and put it next to dsh executable file. It can be the same as .digitrace file for the Pro<br/>Tools. DSH has built-in commands to generate a DigiTrace config file. The clear_trace_config command creates (or<br/>clears if it already exists) a DigiTrace config file. The enable_trace_facility command enables logging of a specified<br/>facility/priority pair.<br/></p>
<p><b>Note<br/></b>On the Mac, DigiShell must be relaunched before a new DigiTrace configuration will take effect.<br/></p>
<p><b>12.48.6 Scripting interface and batch profiling<br/></b></p>
<p>DigiShell can be scripted using DishTestTool, a Ruby-based command line tool. More details can be found in<br/>DTT Guide.<br/></p>
<p>Collaboration diagram for DSH Guide:<br/></p>
<p><b>12.49 DTT Guide<br/></b></p>
<p>How to automate different test scenarios for DSH.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.49 DTT Guide 275<br/></b></p>
<p><b>12.49.1 Contents<br/></b></p>
<p>&#8226; What is DTT<br/>&#8226; How to run tests and suites in DTT<br/>&#8226; Writing DTT scripts<br/>&#8226; Logging in DTT and debugging DTT scripts<br/>&#8226; Working with DTT test suites<br/></p>
<p><b>12.49.2 What is DTT<br/></b></p>
<p>DishTestTool (DTT) is a Ruby-based command line tool, which provides the ability to script and thus automate DSH<br/>test scenarios. It is included in the DigiShell Tools package in the /DTT directory.<br/></p>
<p><b>Note<br/></b>Ruby is installed by default on macOS. On Windows, you will need to install Ruby and add it to your PATH<br/>variable manually. For information regarding Ruby version compatibility with a specific build of DTT, see the<br/>ReadMe.txt file in /DTT/sources.<br/></p>
<p>The DTT folder consists of:<br/></p>
<p>&#8226; Sources<br/><b>&#8211; </b>DTT core<br/><b>&#8211; </b>scripts folder - place all DTT script files here<br/></p>
<p>By default, this folder includes a few example scripts demonstrating basic DTT operations and plug-in<br/>testing steps:<br/></p>
<p>* DSH_SigCancellation.rb - script for the cancellation test<br/>* DSH_TI_CycleCounts - script for performing cycle count test<br/>* SuiteGenerator.rb - generates suites for the DSH_SigCancellation and DSH_TI_CycleCounts tests<br/></p>
<p><b>&#8211; </b>suites folder - place your DTT suite files here<br/>&#8226; run_test.command (on Mac) or run_test.bat (on Windows) - command file for runnung tests<br/>&#8226; run_irb.command (on Mac) or run_irb.bat (on Windows) - command-line interpreter<br/></p>
<p><b>12.49.3 How to run tests and suites in DTT<br/></b></p>
<p>run_test is the main DTT execution program. run_test is able to execute Ruby scripts which have been<br/>placed in the scripts folder within the DTT directory.<br/></p>
<p>&#8226; run_test.command -l - lists all the available scripts and suites<br/>&#8226; run_test.command 1 - runs test by number<br/>&#8226; run_test.command DSH_SigCancellation - runs a test by name. Pay attensions that the name<br/></p>
<p>of test should be without (!) extension.<br/>&#8226; run_test.command -script DSH_SigCancellation -a sample_rate=48000 -a<br/>threshold=-80 - runs a test with test script arguments, which are specified using the -a option<br/></p>
<p>Figure 1: running DTT tests.<br/></p>
<p>For more information about script arguments, see Describing and using input arguments of the script<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>276 Module Documentation<br/></b></p>
<p><b>12.49.4 Writing DTT scripts<br/></b></p>
<p>Most of the DTT scripts require DigiShell, which allows them to run dsh and execute different dsh commands.<br/>Each script should be represented in the form of class, which inherits Script class, and also each script must have<br/>at least two elements: self.inputs section, where all the input arguments of the test should be described, and run<br/>method, which is the main body of your script.<br/>require &#8217;DigiShell&#8217;<br/>class ScriptSample &lt; Script<br/></p>
<p>def self.inputs<br/>return {}<br/></p>
<p>end<br/>def run<br/></p>
<p>return pass(&quot;Well, it didn&#8217;t explode. So that&#8217;s something.&quot;);<br/>end<br/></p>
<p>end<br/></p>
<p>Listing 1: Skeleton of the script<br/></p>
<p><b>12.49.4.1 Describing and using input arguments of the script<br/></b></p>
<p>The available parameters and their values for a script are listed in the static self.inputs routine. Input argu-<br/>ments must be organized in the form of a hash map which is returned from this routine.<br/>def self.inputs<br/></p>
<p>return {<br/>:sample_rate =&gt; [44100,[44100,48000,88200]],<br/>:path_to_tfx =&gt; [&#8217;none&#8217;],<br/>:threshold =&gt; [-96],<br/></p>
<p>}<br/>end<br/>@dsh.init_dae(sample_rate)<br/></p>
<p>Listing 2: Desribing input arguments for the script and using them<br/></p>
<p>Hash entries should be in the following format: :arg_name =&gt; [default_value, [range of allowed values]]<br/></p>
<p>These arguments can be used then by just calling them by name, like in the example above with sample_rate<br/>argument.<br/></p>
<p><b>12.49.4.2 Writing body of the script<br/></b></p>
<p>The body of the script must be enclosed in the body of the run method of the script class. As far as most DTT tests<br/>need DSH, in the example below it's shows how to create a DSH instance in the script and how to use it then. DSH<br/>instance can be creted with DigiDhell.new method, which requites DigiShell module, as has already been<br/>said. Then all the DSH commands become available as methods of the DSH instance, and input arguments can be<br/>passed to these command as input arguments for the methods, i.e. in parentheses dsh.load_dish(&quot;DAE&quot;).<br/>Also it's recommended to handle possible exceptions that may occure during the execution of the code, and to make<br/>sure that DSH has been closed, if it was instantiated on the moment of the failure.<br/>def run<br/></p>
<p>begin<br/>dsh = DigiShell.new(target)<br/>dsh.load_dish(&quot;DAE&quot;)<br/>dsh.init_dae(sample_rate)<br/>dsh.close<br/>return pass(&quot;Well, it didn&#8217;t explode. So that&#8217;s something.&quot;)<br/></p>
<p>rescue Exception =&gt; e<br/># make sure to close down dsh before returning<br/>if (dsh)<br/></p>
<p>dsh.close<br/>end<br/></p>
<p>return fail(e)<br/>end<br/></p>
<p>end<br/></p>
<p>Listing 3: Example of the body of the script.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.49 DTT Guide 277<br/></b></p>
<p><b>12.49.5 Logging in DTT and debugging DTT scripts<br/></b></p>
<p>DTT tool has logging, and all the logs collected in the Logs folder, which is located in root directory of the DTT. DTT<br/>creates a separate folder for each test and names these folders with the corresponding names + the time when the<br/>particular test has been executed. For example:<br/></p>
<p>DSH_SigCancellation_20131225_185146_0001<br/></p>
<p>Inside each folder there are several log files:<br/></p>
<p>&#8226; xxx.html &#8211; contains info about input &amp; output of the test in a fancy form (tables)<br/></p>
<p>&#8226; xxx_c.txt &#8211; contains the list of the DSH commands that have been executed<br/></p>
<p>&#8226; xxx_d.txt &#8211; DSH output<br/></p>
<p>&#8226; xxx_i.txt &#8211; info about your system<br/></p>
<p>&#8226; xxx_l.txt &#8211; standard output<br/></p>
<p>&#8226; xxx_v.txt &#8211; verbose output<br/></p>
<p><b>12.49.5.1 Interactive mode<br/></b></p>
<p>There is an option to run DTT in interactive mode using interactive ruby shell (irb). When running in this mode, DTT<br/>creates a shell which is an extended version of the standard Ruby interpreter. Besides the standard functionality, it<br/>knows how to work with DTT classes and can give hints on their methods. In particular, the DTT interactive mode<br/>shell knows how to work with DigiShell.<br/></p>
<p>To run DTT in interactive mode, go to the DTT folder and launch the run_irb program. At this point you will send<br/>ruby commands to dsh through the pipe in YAML format:<br/>t = Target.new # creates an instance of Target. In this case target is a local machine, though we have a<br/></p>
<p>possibility to run test on remote machine.<br/>dsh = DigiShell.new(t) # creates an instance of DigiShell(aka launching dsh binary)<br/>dsh.load_dish(&#8217;DAE&#8217;) #Loads &#8217;DAE&#8217; dish<br/>dsh.help(&#8217;init_dae&#8217;) # Requests help from dsh for &#8217;init_dae&#8217; command<br/>dsh.init_dae<br/>plugins = dsh.run #returns an array of plug-ins and writes them to plugins var.<br/>plug-ins[0] #reaching first plug-in from the list<br/>#... whatever you want to do<br/></p>
<p>Listing 4: Running DTT in interactive mode<br/></p>
<p><b>12.49.6 Working with DTT test suites<br/></b></p>
<p>Suites are files which contain the list of DTT scripts that should be run, and parameteres for these tests. These files<br/>should be created in YAML format. The list of the tests should be preceeded by tests: line. Then tests to be run<br/>should be described as a map with the following members:<br/></p>
<p>&#8226; name: - name of the test<br/></p>
<p>&#8226; enabled: - determines whether test will be run or skipped<br/></p>
<p>&#8226; args: - input parameters of the test<br/></p>
<p>The input parameters of the test should be orginized as a hash map. That means that all keys should start with &quot;:&quot;<br/>and look like &quot;:plugin_spec: &quot;.<br/></p>
<p>Also suite may contain a section with the general parameters like:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>278 Module Documentation<br/></b></p>
<p>&#8226; verbose: false which determines whether the output of the test in the console will be verbose or not.<br/>&#8226; timeoutFactor: &quot;16.0&quot; which defines the time period, after which test will exit in case it stuck on<br/></p>
<p>the execution of the certain peice of code.<br/></p>
<p>Example of the suite:<br/>suitesettings:<br/></p>
<p>verbose: false<br/>tests:<br/>#<br/># Cycle counting test<br/>#<br/>- name: DSH_TI_CycleCounts<br/></p>
<p>enabled: true<br/>args:<br/>:plugin_spec: &#8217;Digi,Pich,Psmm&#8217;<br/>:sample_rate: 48000<br/></p>
<p>Listing 5: Example of the DTT test suite<br/><b>Note<br/></b></p>
<p>All the suites files should have an extension .gss<br/></p>
<p><b>12.49.6.1 Autogeneration of the suites<br/></b></p>
<p>Sometimes it is necessary to generate the suites for the particular script for all the plug-ins from the bundle and/or<br/>for different sample rates. In this case instead of the copy-paste, which may lead to some mistakes and erratums,<br/>suitegenerator can be used. This is a special script, which takes as arguments the name of the script(s), for which<br/>the suites should be generated, and the list of their input parameters. Strange as it may sound, this data should be<br/>formed as a suite. Script itself is available as SuiteGenerator.rb along with other scripts in the DTT.<br/><b>Note<br/></b></p>
<p>SuiteGenerator.rb can generate suites only for the two tests: DSH_SigCancellation test and DSH_TI_Cycle&#8592;&#8617;<br/>Counts test<br/></p>
<p>Here is the example of how to use this script to generate the suites for all the plug-ins from the 'D-Verb' bundle for<br/>all the sample rates the cancellation test AAX Native vs AAX DSP, and for the cycle counts test:<br/>tests:<br/># Generate suite for Cancellation test: AAX Native vs AAX DSP<br/>- name: SuiteGenerator<br/></p>
<p>args:<br/>:plugin_name: &#8217;D-Verb&#8217;<br/>:path_to_audio_files: /Volumes/G_Audio/GS_Test_Resources/audio/<br/>:path_to_presets: /Volumes/G_Audio/GS_Test_Resources/PL_Settings/<br/>:test_script: DSH_SigCancellation<br/></p>
<p>enabled: true<br/># Generate suite for Instance Count test<br/>- name: SuiteGenerator<br/></p>
<p>args:<br/>:plugin_name: &#8217;D-Verb&#8217;<br/>:path_to_presets: /Volumes/G_Audio/GS_Test_Resources/PL_Settings/<br/>:test_script: DSH_TI_CycleCounts_se<br/></p>
<p>enabled: true<br/>suitesettings:<br/></p>
<p>verbose: false<br/>timeoutFactor: &quot;16.0&quot;<br/></p>
<p>Listing 6: Example of how to use SuiteGenerator script for generating suites for all the plug-ins from the 'D-Verb'<br/>bundle for the all sample rates for the cancellation and for the cycle counts test.<br/>To generate the suites, one should run this suite for the SuiteGenerator as an ordinary suite by executing the<br/>run_test.command &lt;the name of the suite for the SuiteGenerator&gt; command. All the<br/>suites will be generated into the single file, which will be located inside the suites folder, and will be called like:<br/>dspVSnative(optional)_&lt;the name of the plug-in&gt;_&lt;the name of the test&gt;.gss<br/>Examples:<br/></p>
<p>&#8226; TRIM_DSH_TI_CycleCounts.gss<br/>&#8226; dspVSnative_TRIM_DSH_SigCancellation.gss<br/></p>
<p>Collaboration diagram for DTT Guide:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.50 Extensions 279<br/></b></p>
<p><b>12.50 Extensions<br/></b></p>
<p><b>12.50.1<br/></b></p>
<p>Extensions to the AAX SDK.<br/></p>
<p><b>Documents<br/></b>&#8226; GUI Extensions<br/></p>
<p>GUI Extensions for the AAX SDK.<br/>&#8226; Monolithic VIs and Effects<br/></p>
<p>Extension of the AAX_CEffectParameters class for monolithic VIs and effects.<br/>&#8226; Other Extensions<br/></p>
<p>Collaboration diagram for Extensions:<br/></p>
<p><b>12.51 GUI Extensions<br/></b></p>
<p>GUI Extensions for the AAX SDK.<br/></p>
<p><b>12.51.1 About the SDK's GUI Extensions<br/></b></p>
<p>The code and projects in the SDK's Extensions/GUI/ directory demonstrate how to extend the AAX SDK's GUI<br/>programming interface using a variety of popular GUI frameworks, including:<br/></p>
<p>&#8226; Native Cocoa<br/>&#8226; Native Win32<br/>&#8226; VSTGUI<br/>&#8226; JUCE<br/></p>
<p>These projects do not represent core functionality of the AAX SDK, but rather they serve as examples of how plug-in<br/>GUIs can be written to the AAX specification using a variety of different approaches.<br/></p>
<p><b>12.51.2 Notes<br/></b></p>
<p>&#8226; The VST and JUCE GUI Extension library projects use a macro value to resolve file paths to the installed<br/>framework directory. This macro is defined in a Visual Studio property sheet on Windows and as a custom<br/>project variable on Mac. Because this macro will not be resolved on Mac until compilation, the Xcode GUI will<br/>not be able to find the included files. However, the projects should builds successfully once the macros are<br/>updated to point to the correct directory.<br/></p>
<p>&#8226; The JUCE GUI Extension code in this SDK was written using version 1.51 of the JUCE framework<br/>&#8226; Several VSTGUI-based headers with an &quot;_ext&quot; filename are provided along with the SDK's GUI Extensions<br/></p>
<p>code. These headers are slightly modified versions of the corresponding headers that are distributed with<br/>VSTGUI. The headers have been modified for use with our example plug-ins because we had several prob-<br/>lems when using the VSTGUI SDK for 64 bit. For example, we encountered conflicting typedefs redefinitions<br/>like int32_t etc., which are preprocessed out of the vstguibase_ext.h file. These headers should not be re-<br/>quired to build a 32-bit plug-in and they were only added in our transitional AAX SDK, version 1.5.<br/></p>
<p>Collaboration diagram for GUI Extensions:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>280 Module Documentation<br/></b></p>
<p><b>12.52 Monolithic VIs and Effects<br/></b></p>
<p>Extension of the AAX_CEffectParameters class for monolithic VIs and effects.<br/></p>
<p>This extension to AAX_CEffectParameters adds some conveniences for Virtual Instrument (VI) plug-ins and for<br/>other plug-ins that use a monolithic processing object, i.e. an object that combines state data with the audio render<br/>routine in a single object.<br/></p>
<p>&#8226; The RenderAudio method provides a direct audio processing callback within the data model object. Perform<br/>all audio processing in this method.<br/></p>
<p>&#8226; The StaticDescribe method establishes a generic MIDI processing context for the Effect. Call this method<br/>from the plug-in's Description callback implementation.<br/></p>
<p>&#8226; The AddSynchronizedParameter method provides a mechanism for synchronizing parameter updates with<br/>the real-time thread, allowing deterministic, accurate automation playback. For more information abou this<br/>feature, see Fixing timing issues due to shared data<br/></p>
<p><b>Note<br/></b>This convenience class assumes a monolithic processing environment (i.e. AAX_eConstraintLocationMask_DataModel<br/>.) This precludes the use of AAX_CMonolithicParameters -derived Effects in distributed-processing formats<br/>such as AAX DSP.<br/></p>
<p>AAX_CMonolithicParameters Collaboration diagram for Monolithic VIs and Effects:<br/></p>
<p><b>12.53 Other Extensions<br/></b></p>
<p><b>12.53.1<br/></b></p>
<p><b>MIDI logging utilities<br/></b></p>
<p>&#8226; void AAX::AsStringMIDIStream_Debug (const AAX_CMidiStream &amp;inStream, char &#8727;outBuffer, int32_t in&#8592;&#8617;<br/>BufferSize)<br/></p>
<p><b>Filesystem utilities<br/></b></p>
<p>&#8226; bool AAX::GetPathToPlugInBundle (const char &#8727;iBundleName, int iMaxLength, char &#8727;oModuleName)<br/>Retrieve the file path of the .aaxplugin bundle.<br/></p>
<p><b>12.53.2 Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.54 Supplemental Information 281<br/></b></p>
<p><b>12.53.2.1 AsStringMIDIStream_Debug()<br/></b></p>
<p>void AAX::AsStringMIDIStream_Debug (<br/>const AAX_CMidiStream &amp; inStream,<br/>char &#8727; outBuffer,<br/>int32_t inBufferSize )<br/></p>
<p>Print a MIDI stream as a C-string<br/></p>
<p>Sets an empty string in release builds<br/></p>
<p><b>12.53.2.2 GetPathToPlugInBundle()<br/></b></p>
<p>bool AAX::GetPathToPlugInBundle (<br/>const char &#8727; iBundleName,<br/>int iMaxLength,<br/>char &#8727; oModuleName )<br/></p>
<p>Retrieve the file path of the .aaxplugin bundle.<br/></p>
<p><b>Parameters<br/></b>in iBundleName<br/></p>
<p>&#8226; macOS: The CFBundleIdentifier value set in the plug-in's .plist file<br/></p>
<p>&#8226; Other: This parameter is ignored<br/></p>
<p>in iMaxLength<br/>out oModuleName A preallocated buffer of size iMaxLength<br/></p>
<p>Collaboration diagram for Other Extensions:<br/></p>
<p><b>12.54 Supplemental Information<br/></b></p>
<p><b>12.54.1<br/></b></p>
<p>Supplemental documents beyond the scope of the AAX SDK.<br/></p>
<p><b>Documents<br/></b></p>
<p>&#8226; Troubleshooting<br/>How to solve common issues.<br/></p>
<p>&#8226; Distributing Your AAX Plug-In<br/>Details about packaging and distributing your AAX plug-ins.<br/></p>
<p>&#8226; AAX Interfaces<br/>Full list of AAX interfaces.<br/></p>
<p>&#8226; Host Support<br/>Supported features in each AAX host.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>282 Module Documentation<br/></b></p>
<p>&#8226; Known Issues<br/>A list of known bugs affecting AAX plug-ins.<br/></p>
<p>&#8226; Change Log<br/>Changes between AAX SDK versions.<br/></p>
<p>&#8226; Example Plug-Ins<br/>Descriptions of the SDK's example plug-ins.<br/></p>
<p>Collaboration diagram for Supplemental Information:<br/></p>
<p><b>12.55 Troubleshooting<br/></b></p>
<p>How to solve common issues.<br/></p>
<p><b>12.55.1 Contents<br/></b></p>
<p>&#8226; Plug-In Fails to Load in Shipping Pro Tools<br/></p>
<p>&#8226; Plug-In Causes Audio Streaming Errors<br/></p>
<p><b>12.55.2 Plug-In Fails to Load in Shipping Pro Tools<br/></b></p>
<p>If your plug-in fails to load in shipping Pro Tools with the message &quot;The following plug-ins failed to load because<br/>they are not valid 64 bit AAX plug-ins&quot; then the most likely reason is that the plug-in does not have a valid digital<br/>signature.<br/></p>
<p>Your AAX plug-ins will not be compatible with shipping versions of Pro Tools until they are digitally signed using<br/>tools provided by PACE Anti-Piracy, Inc. As an AAX developer you can receive these tools free of charge. Read the<br/>Digital signature section of the Pro Tools Guide to learn about the digital signing requirements for compatibility with<br/>Pro Tools.<br/></p>
<p>To verify whether this failure is due to an invalid digital signature vs. some other library loading failure, check the<br/>Pro Tools log file. A failure caused by an invalid digital signature will result in log lines like the following:<br/></p>
<p>Sys_PACE::GetDigitalSignature - looking for Eden dsig for path &quot;/Applications/ProTools/Plug-Ins/DemoGain_example.aaxplugin/&quot;<br/>Sys_PACE::GetDigitalSignature - dsig error name /Applications/ProTools/Plug-Ins/DemoGain_example.aaxplugin/ 0<br/>legacy Dsig check disabled??<br/>Sys_PACE::GetDigitalSignature - did NOT get valid dsig /Applications/ProTools/Plug-Ins/DemoGain_example.aaxplugin/<br/>Plug-In Binary &quot;DemoGain_example.aaxplugin&quot; failed to load with err = -7054.<br/>Plug-In Binary &quot;DemoGain_example.aaxplugin&quot; 1.0 : Failed to load.<br/></p>
<p>Another way to check whether a plug-in's digital signature is invalid is to test the plug-in in a Pro Tools developer<br/>build or with the DigiShell utility. If the plug-in successfully loads and runs in these tools but not in a shipping build<br/>of Pro Tools then it is very likely that the problem is in the plug-in's digital signature.<br/></p>
<p>If you are having an issue running the signing tools then please check this list of the most common failure points:<br/></p>
<p>1. Bad command line arguments for wraptool<br/></p>
<p>2. An invalid developer certificate<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.55 Troubleshooting 283<br/></b></p>
<p>3. An expired developer certificate<br/></p>
<p>4. The Eden Tools license is not activated to your iLok USB key<br/></p>
<p>5. Your code signing certificate is not installed on your iLok USB key<br/></p>
<p>6. For Mac, the Xcode command line tools are not installed on your signing system<br/></p>
<p>7. The plug-in bundle itself is malformed and will not load<br/></p>
<p>8. The plug-in bundle is being modified at some point after being signed, thereby invalidating its digital signature<br/></p>
<p>If a digital signature was successfully applied to an AAX plug-in at one point in the build process but now the plug-<br/>in fails to load due to a bad signature then the most likely reason is that someone or something has altered the<br/>signature or the contents of the .aaxplugin bundle thereby invalidating the signature. The most common reason for<br/>a digital signature to become invalidated is that something is changed within the .aaxplugin bundle when moving<br/>between different systems or when archiving/unarchiving.<br/></p>
<p>Several things can cause this kind of signature invalidation. Here are some examples:<br/></p>
<p>&#8226; If symlink are not preserved when copying the plug-in<br/></p>
<p>&#8226; If there was some actual tampering of the plug-in after the build<br/></p>
<p>&#8226; If there is corruption of the plug-in binary itself<br/></p>
<p>&#8226; If the .aaxplugin bundle contains one or more file names with exotic characters which change representations<br/>when moved between filesystems with different character encoding schemes<br/></p>
<p>Note that the AAX digital signature covers the entire .aaxplugin bundle so any actions which affect the contents of<br/>this bundle in any way after signing will invalidate the bundle's digital signature.<br/></p>
<p>If the failure is occurring on an isolated system then replacing the .aaxplugin which has an invalidated signature with<br/>an original, untampered copy (e.g. via a reinstall) should resolve this issue.<br/></p>
<p>If the failure is occurring only one certain systems then try archiving and copying the failing plug-ins back to a system<br/>where the plug-in loads successfully then comparing the archived copy to a known successful copy to see if there<br/>are any differences to the file names or binary contents of the files within the bundle.<br/></p>
<p><b>12.55.3 Plug-In Causes Audio Streaming Errors<br/></b></p>
<p><b>See also<br/></b>Real-time performance<br/></p>
<p>The algorithm callback in audio plug-ins is executed within a complex real-time environment, often with tight dead-<br/>lines for not only the plug-in itself but for other plug-ins participating in the same processing chain. The real-time<br/>threading model is managed outside of the plug-in and may be different across different plug-in hosts and formats.<br/>Sometimes, things go wrong and a deadline is missed.<br/></p>
<p>Figure 1: Processing thread utilization during a sporadic audio streaming error<br/></p>
<p>This can happen naturally when the system is loaded to capacity and the CPU simply does not have time to complete<br/>all of the work required by the plug-in algorithm routine before the processing deadline. Most ofen, however, audio<br/>processing errors occur in situations when there ought to be more than enough time to do all of the work required by<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>284 Module Documentation<br/></b></p>
<p>the plug-in. As shown in the image above, the real-time threads can appear to have low CPU utilization and plenty<br/>of overhead, then suddenly a deadline is missed. What happened?<br/></p>
<p>In most cases, audio engine errors occur when a single plug-in instance significantly overruns the processing<br/>deadline. The instance usually processes quickly in prior executions and does not give any indication of impending<br/>doom.<br/></p>
<p>Figure 2: Call execution times for three plug-in instances in a chain<br/></p>
<p>There are many reasons why this can happen. One excellent tool for evaluating these kinds of failures on macOS is<br/>the ktrace utility. This utility collects system calls, thread interactions, and backtraces similar to Instruments data<br/>in a simple command line tool. This can provide a detailed view of the state of the system leading up to an audio<br/>streaming error, and can be used to capture logs on any Mac system, even those without special developer tools<br/>installed. Once the tool is running there is a minimal performance impact. Avid provides a ktrace capture utility for<br/>use with Pro Tools that can trigger captures based on Pro Tools audio engine errors. You can download this tool<br/>from the AAX SDK downloads area.<br/></p>
<p>Figure 3: Beginning in Pro Tools 2021.6, this dialog is presented when a plug-in significantly overruns its deadline<br/></p>
<p>Here are some of the culprits that Avid has found when investigating these kinds of performance issues using<br/>ktraces and similar utilities. Use these examples as a guide for the kinds of things to watch out for in your plug-ins,<br/>especially when you hear reports that your plug-ins may be triggering sporadic audio engine errors.<br/></p>
<p>&#8226; System calls, C++ library calls, and other language features' call synchronization<br/>When tracking down intermittent performance issues, watch for any calls into the standard C++ library or any<br/>use of higher-level language features that are not explicitly designed for real-time use.<br/>You should never trust that STL and C++ library implementations are safe to use in a real time context. Of<br/>course STL containers are not thread safe, but in real-time code you should avoid all use of C++ library<br/>functions, not just containers, unless you are certain that the library implementation you are using will have<br/>no performance related side effects.<br/>For example, in some macOS versions std::clock will take a kernel mutex, causing an unexpected<br/>priority inversion with any lower-priority thread using std::clock at the same time.<br/>Furthermore, the runtime features of higher-level languages are often not designed for running in real time.<br/>Objective-C and Swift messaging calls can take locks and should never be used in a real time thread and<br/>other languages' features are similarly out of your control as a developer. Avoid them in your algorithm logic.<br/></p>
<p>&#8226; Other components and libraries<br/>Similarly, any third-party component or library should not be used from the real-time thread unless it is explic-<br/>itly designed for use in this context. It can sometimes be difficult to track calls into library code, especially if<br/>the library use is not isolated to a particular function in the plug-in such as its graphics or signal processing.<br/>Be particularly careful to isolate the plug-in's algorithm logic when using general-purpose libraries that serve<br/>multiple functions in a plug-in or when using objects that combine multiple functions.<br/></p>
<p>&#8226; Synchronization within the plug-in<br/>Any synchronization of data access within a plug-in must be performed in a way such that the real-time<br/>algorithm can never block on a resource held by a lower priority thread.<br/>In an AAX plug-in, parameter changes are applied on a different thread than audio processing. AAX in-<br/>cludes a system for synchronizing delivery of parameter updates to the algorithm at the correct time without<br/>requiring any synchronization by the plug-in, and you are strongly encouraged to understand the details of<br/>how parameter updates work, in particular how the parameter update timing is achieved and how to imple-<br/>ment proper timing and synchronization even in a plug-in that does not use a standard decoupled algorithm<br/>callback.<br/>Be particularly careful if you do not use this sytem for decoupling and if instead your plug-in shares access<br/>to the same data between its algorithm and other logic, even if you are using a third party framework. If your<br/>plug-in triggers sporadic deadline misses in the host engine then this can be a productive area to inspect<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.56 Distributing Your AAX Plug-In 285<br/></b></p>
<p>&#8226; File access<br/>File access can accidentally creep into the logic executed by a plug-in algorithm, causing random but severe<br/>timing failures. Check to make sure that your plug-in cannot possibly trigger any logging to a file from the<br/>audio processing thread. Even having a file handle open on the processing thread can cause performance<br/>problems: the OS may trigger a flush on such an open file during a filesystem synchronization event, causing<br/>the thread to block despite there being no explicit file I/O operations performed.<br/></p>
<p>&#8226; Virtual memory faults<br/>If your plug-in frequently accesses large amounts of data then be sure to check for possible virtual memory<br/>faults in any logs concerning audio buffer overruns. Avoid any access to paged memory or files from within<br/>the plug-in's real-time code.<br/></p>
<p>&#8226; Memory allocation<br/>Memory allocation is the classic example of what not to do in a real-time thread, yet it can be quite difficult to<br/>track down. There are no guarantees for the time that a malloc call may execute; the call may even need to<br/>page memory in from disk in order to complete. It can be very difficult to determine whether any particular call<br/>can result in memory allocation, and this underscores the total control that you must take over your plug-in's<br/>algorithm logic. Every operation performed within the audio processing thread must be guaranteed to be<br/>free of memory allocation, which requires a deep understanding and control over the implementation of all<br/>methods called from the algorithm.<br/></p>
<p>&#8226; User authorization and copy protection<br/>Some copy protection schemes will helpfully scatter authorization checks throughout your code, relieving you<br/>of that chore. Be sure to exclude your plug-in's real-time logic from this process. Authorization checks are<br/>complex and can take multiple milliseconds to complete, or more if they involve external licensing hardware<br/>or contact with an external server.<br/></p>
<p>Collaboration diagram for Troubleshooting:<br/></p>
<p><b>12.56 Distributing Your AAX Plug-In<br/></b></p>
<p>Details about packaging and distributing your AAX plug-ins.<br/></p>
<p><b>12.56.1 Contents<br/></b></p>
<p>&#8226; The finishing touches<br/></p>
<p>&#8226; Building your plug-in installer<br/></p>
<p>&#8226; Testing your plug-in<br/></p>
<p>&#8226; Selling your plug-in<br/></p>
<p><b>12.56.2 The finishing touches<br/></b></p>
<p>You've completed your main development work and your new AAX plug-in is nearly ready to ship! Now it's time to<br/>put the polish on your release.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>286 Module Documentation<br/></b></p>
<p><b>12.56.2.1 Check and finalize page tables<br/></b></p>
<p>After development has completed on your plug-in, we recommend that you check and finalize the plug-in's page<br/>tables using the Page Table Editor tool. It can be easy to forget to update the plug-in's page tables after making<br/>changes to the plug-in's list of parameters or to other aspects of the plug-in during development. To check for prob-<br/>lems, open and view the plug-in's page tables for every layout in the editor app. Verify that the plug-in parameters<br/>are arranged properly for each control surface and that the list of available parameters in each layout is correct.<br/>Correct and complete page tables are an important part of the user experience for many AAX plug-in users, and<br/>your users will appreciate your attention to detail here!<br/></p>
<p><b>12.56.2.2 Create factory presets<br/></b></p>
<p>Each AAX plug-in may be bundled with a set of factory presets. These presets will be made available to users<br/>through the host application's plug-in preset management UI.<br/>Plug-in factory presets are stored as .tfx settings files. These files can be generated from any AAX host application<br/>which supports plug-in preset management. For example, in Pro Tools it is possible to create a new .tfx settings file<br/>by following these steps:<br/></p>
<p>1. Create an instance of your plug-in in a Pro Tools session<br/>2. Manually apply the desired preset settings<br/>3. Choose &quot;Save Settings As...&quot; from the Presets drop-down menu in the plug-in window header<br/></p>
<p>Once you have saved your desired factory presets as .tfx files onto your system you can package them with your<br/>plug-in bundle in &#8727;.aaxplugin/Contents/Factory Presets. Any presets found in this directory will be copied to the<br/>plug-in settings location for the running instance of Pro Tools when Pro Tools scans the plug-in on launch. See<br/>.aaxplugin Directory Structure for more information about supported sub-directories within the .aaxplugin bundle.<br/>The feature for automatically copying factory presets from the .aaxplugin bundle to the plug-in settings directory on<br/>the user's system is supported by Pro Tools 11 and later and by all versions of Media Composer with AAX plug-in<br/>support.<br/>Plug-in installers for 32-bit plug-ins supporting Pro Tools 10.3.5 and earlier must copy the settings to the plug-in<br/>settings folder when the plug-in is installed.<br/>These are the paths for plug-in settings used by Pro Tools and Media Composer versions which support 32-bit AAX<br/>plug-ins:<br/></p>
<p>&#8226; Mac: /Library/Application Support/Digidesign/Plug-In Settings<br/>&#8226; Win: C:\Program Files(x86)\Common Files\Digidesign\DAE\Plug-In Settings<br/></p>
<p>The default paths for plug-in settings used by Pro Tools and Media Composer versions which support 64-bit AAX<br/>plug-ins are provided below. However, you should <b>not </b>use these paths in your installers since they may be cus-<br/>tomized using the host application's preferences (for example, the &quot;User Media and Settings Location&quot; preference<br/>in Pro Tools.) Instead, use the Factory Preset bundling system described above for installing presets for 64-bit<br/>plug-ins.<br/>Default plug-in settings locations for 64-bit AAX plug-in hosts:<br/></p>
<p>&#8226; Mac: &#8764;/Documents/Pro Tools/Plug-In Settings<br/>&#8226; Win: C:\[user folder path]\Documents\Pro Tools\Plug-In Settings<br/></p>
<p>For more information about using plug-in presets in the various AAX hosts, see the following pages in the documen-<br/>tation for each host:<br/></p>
<p>&#8226; Pro Tools<br/>&#8226; Media Composer<br/>&#8226; VENUE<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.56 Distributing Your AAX Plug-In 287<br/></b></p>
<p><b>12.56.2.3 Sign your plug-in<br/></b></p>
<p>Pro Tools requires that all AAX plug-ins be signed with a digital signature. The certificate authority for this signature<br/>is PACE Anti-Piracy, Inc. and all AAX plug-ins for Pro Tools must be signed with the digital signing tools from PACE.<br/>See the Digital signature section in the Pro Tools Guide for more information about this requirement.<br/></p>
<p><b>12.56.3 Building your plug-in installer<br/></b></p>
<p>Your plug-in installer should place all .aaxplugin bundles into the system's AAX Plug-Ins directory:<br/></p>
<p>&#8226; macOS: /Library/Application Support/Avid/Audio/Plug-Ins<br/></p>
<p>&#8226; Windows (32-bit plug-ins): C:\Program Files (x86)\Common Files\Avid\Audio\Plug-Ins<br/></p>
<p>&#8226; Windows (64-bit plug-ins): C:\Program Files\Common Files\Avid\Audio\Plug-Ins<br/></p>
<p>This directory is searched recursively, so AAX plug-ins may be installed into sub-directories. For example, you may<br/>install all AAX plug-ins into a new sub-directory labelled with your manufacturer name.<br/></p>
<p><b>12.56.3.1 Installing Track Presets<br/></b></p>
<p>The Track Presets feature in Pro Tools allows users to recall entire tracks, or entire sets of tracks, and to add specific<br/>track data such as insert chains, sends, and routing. For example, if a user doesn't know in advance what vocal<br/>chain they may want to use, they can begin tracking, and then instantiate a whole set of inserts with stored settings<br/>from an existing track preset by clicking on an insert selector and finding that preset.<br/></p>
<p>You are encouraged to create your own track presets and provide them to users in your installers. For example, if<br/>you sell plug-in bundles then you may wish to provide users with Track Presets demonstrating useful combinations<br/>of multiple plug-ins from the bundle, or if your plug-ins involve some &quot;boilerplate&quot; routing configuration then you can<br/>provide a multi-track Track Preset with this routing already established.<br/></p>
<p>Installation Location<br/></p>
<p>Track Presets are stored in the Pro Tools documents folder. Use these locations for default installation<br/></p>
<p>&#8226; Mac &#8764;/Documents/Pro Tools/Track Presets<br/></p>
<p>&#8226; PC: C:\Users\[username]\Documents\Pro Tools\Track Presets<br/></p>
<p>This location is indexed automatically by Pro Tools.<br/></p>
<p>All of the Track Preset files which you install should be added to a folder with the name of your company. This will<br/>ensure that your Track Presets appear as expected in the preset menus in Pro Tools:<br/></p>
<p>&#8226; Pro Tools Documents Folder<br/></p>
<p><b>&#8211; </b>/Track Presets<br/>* &#183; Name of your company<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>288 Module Documentation<br/></b></p>
<p>Tagging<br/></p>
<p>A default tags dictionary is available from the My Toolkits and Downloads page at avid.com. These are<br/>not the only tags you can use, but any of these that you do use will be increasing the value and usability of the<br/>default set included with Avid products. Using this shared dictionary will ensure that your users can quickly find your<br/>Track Presets. Workflow Considerations<br/></p>
<p>&#8226; Audibility<br/></p>
<p><b>&#8211; </b>If you want a track to be heard automatically then route that track to the Monitor Path. If a user is using<br/>a Monitor Path the track preset will be instantiated and audible immediately.<br/></p>
<p>&#8226; Track Data to Recall<br/></p>
<p><b>&#8211; </b>In most cases a Track Preset will be created exactly as a user wants to recall it. The available Track<br/>Data to Recall from a preset is quite broad though, so you should consider what default import settings<br/>make the most sense for each of your presets.<br/>Here are some ideal default settings for a generic single track plug-in focused preset:<br/></p>
<p>&#8226; Plug-in Format Conversion<br/></p>
<p><b>&#8211; </b>Format conversion for plug-ins is designed to work if formats are enumerated correctly and available.<br/>This would take place for instance when recalling inserts from a stereo track preset to a 5.1 track preset<br/>- most often this should just work if your plug-in is available in all/most formats.<br/></p>
<p>&#8226; Including Avid Stock Plug-ins<br/></p>
<p><b>&#8211; </b>If you wish to include any stock Avid plug-ins in your presets for any reason, stick to these plug-ins that<br/>are automatically installed by Pro Tools to be as sure as possible that your end user will be able to fully<br/>recall the preset:<br/></p>
<p>* AutoPan; BF-76; Channel Strip; Click II; Dither; Down Mixer; D-Verb; Dynamics III; Eleven Lite; EQ<br/>III; InTune; Invert/Duplicate; LoFi; Master Meter; Maxim; ModDelay III; Normalize-Gain; Pitch Shift<br/>Legacy; Pitch II; RectiFi; Reverse/DC Removal; SansAmp PSA-1; SciFi; Signal Generator; Time<br/>Shift; Time Adjuster; Trim; VariFi<br/></p>
<p>The following Virtual Instruments are installed separately but come for free with paid Pro Tools<br/>versions:<br/></p>
<p>* Boom; DB-33; Mini Grand; Structure Free; Vacuum; Xpand!2<br/></p>
<p><b>12.56.4 Testing your plug-in<br/></b></p>
<p>The AAX Plug-In Burnthrough Grid document describes a number of test cases and workflows for multiple AAX<br/>plug-in hosts. This document is available for download as part of the AAX SDK Toolkit on the My Toolkits<br/>and Downloads page at avid.com.<br/></p>
<p><b>12.56.5 Selling your plug-in<br/></b></p>
<p><b>12.56.5.1 Avid Marketplace<br/></b></p>
<p>Avid may offer to sell your compatible products through our online store. We offer test tools and support services<br/>that will help you get your products to market with the highest quality whether you decide to offer them through our<br/>online store or independently. Registered developers can further register as Sellers, then work with Avid to add their<br/>solutions to the online store. Please visit your My Avid account and go to &quot;My Developer Account&quot; then to &quot;Access<br/>Seller Portal&quot; to explore this program or write to partners@avid.com for more information.<br/></p>
<p>Get your AAX Plug-In ready for sale on Avid Marketplace by following these steps:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.57 AAX Interfaces 289<br/></b></p>
<p>&#8226; Explore the Avid Webstore - Review the Avid Webstore description and learn about this valuable<br/>and expanding offering. E-mail us at partners@avid.com with your questions.<br/></p>
<p>&#8226; Sign up - Register as a Seller (sometimes referred to as a &quot;vendor&quot;) by following the link from the &quot;My Devel-<br/>oper Account&quot; page and selecting &quot;Access the Seller Portal.&quot;<br/></p>
<p>&#8226; Prepare your submission - Gather the plug-in and other information required to onboard as described in the<br/>Onboarding FAQ. Your experience will be easier if you collect these items in advance.<br/></p>
<p>&#8226; Send us your Product - Submit your products and other required information for testing and publication on the<br/>Avid Store!<br/></p>
<p><b>12.56.5.2 In-App Purchase<br/></b></p>
<p>In-App Purchase provides a direct path to purchase your products from directly within the AAX host application.<br/>For example, when a user opens a session which contains unavailable plug-ins, In-App Purchase can be used to<br/>prompt the user to purchase the plug-ins immediately.<br/></p>
<p>See this article for more information about how to add support for In-App Purchase to your on-boarded<br/>AAX plug-ins. Additional documentation regarding In-App Purchase is available under the &quot;In-App Purchase Tools&quot;<br/>section of the AAX SDK Toolkit downloads page in your avid.com account.<br/></p>
<p>Collaboration diagram for Distributing Your AAX Plug-In:<br/></p>
<p><b>12.57 AAX Interfaces<br/></b></p>
<p>Full list of AAX interfaces.<br/></p>
<p><b>12.57.0.1 Interfaces Implemented by the AAX Host<br/></b></p>
<p>These interfaces are implemented by the AAX Host. References to the host-managed objects are provided to the<br/>plug-in through accessor methods, most commonly IACFUnknown::QueryInterface().<br/></p>
<p><b>Class AAX_IAutomationDelegate<br/></b></p>
<p><b>Class AAX_ICollection<br/></b></p>
<p><b>Class AAX_IComponentDescriptor<br/></b></p>
<p><b>Class AAX_IController<br/></b></p>
<p><b>Class AAX_IDma<br/></b></p>
<p><b>Class AAX_IEffectDescriptor<br/></b></p>
<p><b>Class AAX_IHostProcessorDelegate<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>290 Module Documentation<br/></b></p>
<p><b>Class AAX_IHostServices<br/></b></p>
<p><b>Class AAX_IMIDINode<br/></b></p>
<p><b>Class AAX_IPrivateDataAccess<br/></b></p>
<p><b>Class AAX_IPropertyMap<br/></b></p>
<p><b>Class AAX_ITask<br/></b></p>
<p><b>Class AAX_ITransport<br/></b></p>
<p><b>Class AAX_IViewContainer<br/></b></p>
<p><b>12.57.0.2 Interfaces Implemented by the AAX Plug-In<br/></b></p>
<p>These interfaces must be implemented by the AAX plug-in. Default implementations are provided in the AAX Library<br/>via the AAX_C classes. Plug-in classes may inherit from the AAX_C classes to override the default behavior.<br/></p>
<p><b>Class AAX_IACFTaskAgent<br/></b></p>
<p><b>Class AAX_IEffectDirectData<br/></b></p>
<p><b>Class AAX_IEffectGUI<br/></b></p>
<p><b>Class AAX_IEffectParameters<br/></b></p>
<p><b>Class AAX_IHostProcessor<br/></b></p>
<p><b>12.57.0.3 Interfaces internal to the AAX SDK<br/></b></p>
<p>These classes and interfaces are used internally within the AAX Library. References to objects implementing these<br/>classes are never passed between the plug-in and the AAX Host, and the AAX Host has no knowledge of these<br/>classes.<br/></p>
<p><b>Class AAX_IParameter<br/></b></p>
<p><b>Class AAX_IParameterValue<br/></b></p>
<p><b>Class AAX_ITaperDelegateBase<br/></b></p>
<p>Collaboration diagram for AAX Interfaces:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.58 Host Support 291<br/></b></p>
<p><b>12.58 Host Support<br/></b></p>
<p>Supported features in each AAX host.<br/></p>
<p><b>12.58.1 Host Support<br/></b></p>
<p>These tables list AAX host support for various AAX interfaces, as well as support for general features. The tables<br/>include the version number for the earliest version of each Avid host software which supports the given interface or<br/>feature.<br/></p>
<p>The earliest version of each host to support AAX plug-ins is:<br/></p>
<p>&#8226; Pro Tools 10.0<br/></p>
<p>&#8226; Media Composer 8.1<br/></p>
<p>&#8226; VENUE 4.1<br/></p>
<p>For more information about versioning in AAX, including how to check for host support of a particular interface, see<br/>The Avid Component Framework (ACF).<br/></p>
<p><b>12.58.1.1 Platform Support<br/></b></p>
<p><b>Pro Tools Media Composer VENUE<br/></b>AAX Native 10.0 8.1 none<br/>AAX DSP 10.0 none 4.1<br/>AAX Hybrid 11.0&#8727; none none<br/>Offline processing (AudioSuite) 10.0 8.1&#8727;&#8727; none<br/>ProcessProc / data model co-location 10.0 8.1 none<br/>Monolithic topology 10.0 8.1 none<br/>Native processor architecture 10: x86/i386<br/></p>
<p>11+: x86_64<br/>8.1+: x86_64 4.1: x86/i386<br/></p>
<p>4.5+: x86_64<br/>Compatibility with arm64/x86_64 FAT binaries on macOS 2021.10 n/a<br/>Properties File 2024.3 none none<br/></p>
<p><b>Note<br/></b>Pro Tools 11.0 supports AAX Hybrid processing for real-time plug-ins only. Support for AudioSuite processing<br/>for AAX Hybrid is supported starting in Pro Tools 11.1.<br/>Media Composer 8.5 and higher support both multichannel and mono AudioSuite processing. Earlier versions<br/>of Media Composer support mono only.<br/></p>
<p><b>12.58.1.2 Describe Interfaces<br/></b></p>
<p><b>Pro Tools Media Composer VENUE<br/></b>AAX_IACFCollection 10.0 8.1 4.1<br/>AAX_IACFComponentDescriptor 10.0 8.1 4.1<br/></p>
<p>V2 11.0 8.1 4.5?<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>292 Module Documentation<br/></b></p>
<p>V3 12.8 none 5.6<br/>AAX_IACFEffectDescriptor 10.0 8.1 4.1<br/></p>
<p>V2 11.0 8.1 4.5?<br/>AAX_IACFPropertyMap 10.0 8.1 4.1<br/></p>
<p>V2 11.0 8.1 4.5?<br/>V3 12.9 none 5.6<br/></p>
<p>AAX_IACFDescriptionHost 12.8 none none<br/>AAX_IACFFeatureInfo 12.8 none none<br/></p>
<p><b>12.58.1.3 Run-Time Interfaces<br/></b></p>
<p><b>Pro Tools Media Composer VENUE<br/></b>AAX_IACFAutomationDelegate 10.0 8.1 4.1<br/>AAX_IACFController 10.0 8.1 4.1<br/></p>
<p>V2 11.0 8.1 none<br/>V3 12.4 8.6 none<br/></p>
<p>AAX_IACFEffectDirectData 10.0 8.1 4.1<br/>V2<br/></p>
<p>AAX_IACFEffectGUI 10.0 8.1 4.1<br/>AAX_IACFEffectParameters 10.0 8.1 4.1<br/></p>
<p>V2 11.0 8.1 4.5?<br/>V3 11.2 8.1 none<br/>V4 none none 5.6<br/></p>
<p>AAX_IACFHostProcessor 10.0 8.1 none<br/>V2 12.0 none none<br/></p>
<p>AAX_IACFHostProcessorDelegate 10.0 none none<br/>V2 11.0 none none<br/>V3 12.0 none none<br/></p>
<p>AAX_IACFHostServices 10.0 8.1 4.1?<br/>V2 12.0 8.6 none<br/>V3 12.8.3 none none<br/></p>
<p>AAX_IACFPageTable 12.8 none 5.7<br/>V2 12.8.2 none 5.7<br/></p>
<p>AAX_IACFPageTableController none none 5.7<br/>AAX_IACFPrivateDataAccess 10.0 8.1 4.1<br/>AAX_IACFSessionDocument 2023.6.0 none none<br/>AAX_IACFSessionDocumentClient 2023.6.0 none none<br/>AAX_IACFTaskAgent none none none<br/>AAX_IACFTransport 10.0 8.5 (partial) none<br/></p>
<p>V2 10.3.7 8.5 (partial) none<br/>V3 2021.3 none<br/>V4 2023.9 none<br/>V5 2024.3 none<br/></p>
<p>AAX_IACFTransportControl 2023.9 none none<br/>AAX_IACFViewContainer 10.0 8.1 4.1<br/></p>
<p>V2 12.0.1 none none<br/>V3 2022.4 none none<br/></p>
<p><b>12.58.1.4 Features<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.58 Host Support 293<br/></b></p>
<p><b>Pro Tools Media Composer VENUE<br/></b>Basic Stem Formats (mono through 7.1) 10.0 8.1 none<br/>7.x.2 Stem Formats 12.8 none none<br/>Surround Stem Formats (5.0.2 to 9.1.6) none none none<br/>Ambisonics Stem Formats (first through third order) 12.8.2 none none<br/>Ambisonics Stem Formats (fourth through seventh<br/>order)<br/></p>
<p>none none none<br/></p>
<p>Plug-in type conversion 10.3.8, 11.0&#8727;,<br/>11.1<br/></p>
<p>none none<br/></p>
<p>Auxiliary Output Stems 10.0 none none<br/>Sidechain Inputs 10.0 8.5 none<br/>MIDI 10.0 none none<br/>Automation recording and playback 10.0 none none<br/>Plug-in presets 10.0 8.4 4.1<br/>External control surfaces 10.0 8.1 none<br/></p>
<p><b>12.58.2 Host Compatibility Notes<br/></b></p>
<p><b>See also<br/></b>Compatibility Notes in the Pro Tools Guide document<br/></p>
<p><b>Member AAX_CMidiPacket::mIsImmediate<br/></b>This value is not currently set. Use mTimestamp == 0 to detect immediate packets<br/></p>
<p><b>Member AAX_CParameter</b>&lt; <b>T </b>&gt;<b>::AAX_CParameter (AAX_CParamID identifier, const AAX_IString &amp;name,<br/>T defaultValue, const AAX_ITaperDelegate</b>&lt; <b>T </b>&gt; <b>&amp;taperDelegate, const AAX_IDisplayDelegate</b>&lt; <b>T </b>&gt;<br/><b>&amp;displayDelegate, bool automatable=false)<br/></b>As of Pro Tools 10.2, DAE will check for a matching parameter NAME and not an ID when reading in automation<br/>data from a session saved with an AAX plug-ins RTAS/TDM counter part.<br/>As of Pro Tools 11.1, AAE will first try to match ID. If that fails, AAE will fall back to matching by Name.<br/></p>
<p><b>Module AAX_DigiTrace_Guide<br/></b>This feature is available in Pro Tools 12.6 and higher<br/></p>
<p><b>Member AAX_eConstraintLocationMask_DLLChipAffinity<br/></b>This constraint is supported in Pro Tools 10.2 and higher<br/></p>
<p><b>Member AAX_eCurveType_Dynamics<br/></b>Pro Tools requests this curve type for Dynamics plug-ins only<br/></p>
<p><b>Member AAX_eCurveType_EQ<br/></b>Pro Tools requests this curve type for EQ plug-ins only<br/></p>
<p><b>Member AAX_eCurveType_Reduction<br/></b>Pro Tools requests this curve type for Dynamics plug-ins only<br/></p>
<p><b>Member AAX_eDataInPortType_Incremental<br/></b>Supported in Pro Tools 12.5 and higher; when AAX_eDataInPortType_Incremental is not supported the port will<br/>be treated as AAX_eDataInPortType_Unbuffered<br/></p>
<p><b>Member AAX_EHostModeBits<br/></b>Supported in Venue 5.6 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_ASPreviewState<br/></b>Supported in Pro Tools 11 and higher<br/>Not supported by Media Composer<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>294 Module Documentation<br/></b></p>
<p><b>Member AAX_eNotificationEvent_ASProcessingState<br/></b>Supported in Pro Tools 11 and higher<br/>Not supported by Media Composer<br/></p>
<p><b>Member AAX_eNotificationEvent_DelayCompensationState<br/></b>Supported in Pro Tools 12.6 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_EnteringOfflineMode<br/></b>Supported in Pro Tools 11 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_ExitingOfflineMode<br/></b>Supported in Pro Tools 11 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_HostLocale<br/></b>Supported in Pro Tools 2024.3 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_HostModeChanged<br/></b>Supported in Venue 5.6 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_LogState<br/></b>Pro Tools currently only sends this notification to the Direct Data object in the plug-in<br/></p>
<p><b>Member AAX_eNotificationEvent_MaxViewSizeChanged<br/></b>Supported in Pro Tools 11.1 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_ParameterNameChanged<br/></b>Supported in Pro Tools 2023.3 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_PresetOpened<br/></b>Supported in Pro Tools 11 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_PriorSettingsInvalid<br/></b>Supported in Venue 5.6 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_SessionBeingOpened<br/></b>Supported in Pro Tools 11 and higher<br/>Not supported by Media Composer<br/></p>
<p><b>Member AAX_eNotificationEvent_SessionPathChanged<br/></b>Supported in Pro Tools 11.1 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_SideChainBeingConnected<br/></b>Supported in Pro Tools 11.1 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_SideChainBeingDisconnected<br/></b>Supported in Pro Tools 11.1 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_SignalLatencyChanged<br/></b>Supported in Pro Tools 11.1 and higher<br/></p>
<p><b>Member AAX_eNotificationEvent_TrackNameChanged<br/></b>Supported in Pro Tools 11.2 and higher<br/>Not supported by Media Composer<br/></p>
<p><b>Member AAX_eNotificationEvent_TransportStateChanged<br/></b>Supported in Pro Tools 2021.10 and higher<br/></p>
<p><b>Member AAX_ePlugInStrings_Progress<br/></b>Not currently supported by Pro Tools<br/></p>
<p><b>Member AAX_eProcessingState_BeginPassGroup<br/></b>AudioSuite pass group notifications are supported starting in Pro Tools 12.0<br/></p>
<p><b>Member AAX_eProcessingState_EndPassGroup<br/></b>AudioSuite pass group notifications are supported starting in Pro Tools 12.0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.58 Host Support 295<br/></b></p>
<p><b>Member AAX_eProperty_Constraint_NeverUnload<br/></b>AAX_eProperty_Constraint_NeverUnload is not currently implemented in DAE or AAE<br/></p>
<p><b>Member AAX_eProperty_DestinationTrack<br/></b>This property is not supported on Media Composer<br/></p>
<p><b>Member AAX_eProperty_LatencyContribution<br/></b>Maximum delay compensation limits will vary from host to host. If your plug-in exceeds the delay compensation<br/>sample limit for a given AAX host then you should note this limitation in your user documentation. Example<br/>limits:<br/></p>
<p>&#8226; Pro Tools 9 and higher: 16,383 samples at 44.1/48 kHz, 32,767 samples at 88.2/96 kHz, or 65,534 samples<br/>at 176.4/192 kHz<br/></p>
<p>&#8226; Media Composer 8.1 and higher: 16,383 samples at 44.1/48 kHz, 32,767 samples at 88.2/96 kHz<br/><b>Member AAX_eProperty_OptionalAnalysis<br/></b></p>
<p>In Media Composer, optional analysis will also be performed automatically before each channel is rendered.<br/>See MCDEV-2904<br/></p>
<p><b>Member AAX_eProperty_SideChainStemFormat<br/></b>Currently Pro Tools supports only AAX_eStemFormat_Mono side chain inputs<br/>AAX_eProperty_SideChainStemFormat is not currently implemented in DAE or AAE<br/></p>
<p><b>Member AAX_eProperty_UsesClientGUI<br/></b>Currently supported by Pro Tools only<br/></p>
<p><b>Member AAX_IACFEffectParameters::CompareActiveChunk (const AAX_SPlugInChunk </b>&#8727;<b>iChunkP, AAX_</b>&#8592;&#8617;<br/><b>CBoolean </b>&#8727;<b>oIsEqual) const =0<br/></b>In Pro Tools, this method will only be called if a prior call to GetNumberOfChanges() has indicated that the<br/>plug-in's state has changed. If the plug-in's current settings are different from the settings in aChunkP then the<br/>plug-in's Compare Light will be illuminated in the plug-in header, allowing users to toggle between the plug-in's<br/>custom state and its saved state.<br/></p>
<p><b>Member AAX_IACFEffectParameters::GetCurveData (AAX_CTypeID iCurveType, const float </b>&#8727;<b>iValues,<br/>uint32_t iNumValues, float </b>&#8727;<b>oValues) const =0<br/></b>Versions of S6 software which support the GetCurveDataDisplayRange() method will not display a plug-in's<br/>curve data unless both GetCurveData() and GetCurveDataDisplayRange() are supported by the plug-in.<br/></p>
<p><b>Member AAX_IACFEffectParameters::GetParameterNameOfLength (AAX_CParamID iParameterID,<br/>AAX_IString </b>&#8727;<b>oName, int32_t iNameLength) const =0<br/></b>In most cases, the AAX host will call GetParameterName() or GetParameterNameOfLength() to retrieve param-<br/>eter names for display. However, when Pro Tools is retrieving a plug-in name for display on a control surface the<br/>XML data stored in the plug-in's page tables will be used in preference to values retrieved from these methods.<br/></p>
<p><b>Member AAX_IComponentDescriptor::AddAuxOutputStem (AAX_CFieldIndex inFieldIndex, int32_t in</b>&#8592;&#8617;<br/><b>StemFormat, const char inNameUTF8[])=0<br/></b>There is a hard limit to the number of outputs that Pro Tools supports for a single plug-in instance. This limit is<br/>currently set at 256 channels, which includes all of the plug-in's output channels in addition to the sum total of<br/>all of its aux output stem channels.<br/>Pro Tools supports only mono and stereo auxiliary output stem formats<br/></p>
<p><b>Member AAX_IComponentDescriptor::AddClock (AAX_CFieldIndex inFieldIndex)=0<br/></b>As of Pro Tools 11.1, this field may be used in both Native and DSP plug-ins. The DSP clock data is a 16-bit<br/>cycling counter. This field was only available for Native plug-ins in previous Pro Tools versions.<br/></p>
<p><b>Member AAX_IComponentDescriptor::AddMIDINode (AAX_CFieldIndex inFieldIndex, AAX_EMIDINodeType<br/>inNodeType, const char inNodeName[], uint32_t channelMask)=0<br/></b>Due to current restrictions MIDI data won't be delivered to DSP algorithms, only to AAX Native.<br/></p>
<p><b>Member AAX_IController::GetHostName (AAX_IString </b>&#8727;<b>outHostNameString) const =0<br/></b>Pro Tools versions from Pro Tools 11.0 to Pro Tools 12.3.1 will return a generic version string to this call. This<br/>issue is resolved beginning in Pro Tools 12.4.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>296 Module Documentation<br/></b></p>
<p><b>Member AAX_IMIDINode::PostMIDIPacket (AAX_CMidiPacket </b>&#8727;<b>packet)=0<br/></b>Pro Tools supports the following MIDI events from plug-ins:<br/></p>
<p>&#8226; NoteOn<br/>&#8226; NoteOff<br/>&#8226; Pitch bend<br/>&#8226; Polyphonic key pressure<br/>&#8226; Bank select (controller #0)<br/>&#8226; Program change (no bank)<br/>&#8226; Channel pressure<br/></p>
<p><b>Member AAX_ITransport::GetBarBeatPosition (int32_t </b>&#8727;<b>Bars, int32_t </b>&#8727;<b>Beats, int64_t </b>&#8727;<b>DisplayTicks, int64</b>&#8592;&#8617;<br/><b>_t SampleLocation) const =0<br/></b>There is a minor performance cost associated with using this API in Pro Tools. It should not be used excessively<br/>without need.<br/></p>
<p><b>Member AAX_ITransport::GetCurrentLoopPosition (bool </b>&#8727;<b>bLooping, int64_t </b>&#8727;<b>LoopStartTick, int64_t </b>&#8727;&#8592;&#8617;<br/><b>LoopEndTick) const =0<br/></b>This does not indicate anything about the status of the &quot;Loop Record&quot; option. Even when the host is configured<br/>to loop playback, looping may not occur if certain conditions are not met (i.e. the length of the selection is too<br/>short)<br/></p>
<p><b>Member AAX_ITransport::GetCurrentTickPosition (int64_t </b>&#8727;<b>TickPosition) const =0<br/></b>The tick resolution here is different than that of the tick displayed in Pro Tools. &quot;Display ticks&quot; (as they are called)<br/>are 1/960 of a quarter note.<br/></p>
<p><b>Member AAX_ITransport::GetCustomTickPosition (int64_t </b>&#8727;<b>oTickPosition, int64_t iSampleLocation) const<br/>=0<br/></b>There is a minor performance cost associated with using this API in Pro Tools. It should not be used excessively<br/>without need.<br/></p>
<p><b>Member AAX_IViewContainer::GetModifiers (uint32_t </b>&#8727;outModifiers)=0<br/>Although this method allows plug-ins to acquire the current state of the Windows key (normally blocked by Pro<br/>Tools), plug-ins should not use key combinations that require this key.<br/></p>
<p><b>Module AAX_Media_Composer_Guide<br/></b>Some early versions of Media Composer 8 do not search the system plug-ins directory recursively. If your plug-<br/>ins are installed into a sub-directory beneath this main directory then they will not be loaded by the affected<br/>versions of Media Composer.<br/></p>
<p><b>Module AAX_Page_Table_Guide<br/></b>Pro Tools versions prior to Pro Tools 11.1 use plug-ins' ProControl and ICON page tables (Dynamics, EQ, Chan-<br/>nel Strip, Custom Fader, etc.) to map plug-in parameters to EUCON-enabled surfaces, so be sure that your<br/>plug-ins also implement these page tables correctly so that users with earlier versions of Pro Tools can have<br/>the best possible experience when using your plug-ins.<br/></p>
<p><b>Module AAX_Pro_Tools_Guide<br/></b>Pro Tools requires PACE Eden digital signatures for AAX plug-ins.<br/>Supported in Pro Tools 2019.XX and higher. Also supported (and enabled by default) in Pro Tools developer<br/>builds beginning with Pro Tools 2019.6.<br/></p>
<p><b>Module AAX_TI_Guide<br/></b>32 and 64-sample quantum is available in Pro Tools 10.2 and higher<br/>Beginning in Pro Tools 11, AAX DSP algorithms also support optional temporary data spaces that can be<br/>described in the Describe module and are shared among all instances on a DSP. This is an alternative to<br/>declaring large data blocks on the stack for better memory management and to prevent stack overflows. Please<br/>refer to AAX_IComponentDescriptor::AddTemporaryData() for usage instructions.<br/></p>
<p><b>Module AdditionalFeatures_CurveDisplays<br/></b>For S6 control surface displays, see PT-226228 and PT-226227 in the Known Issues page for more information<br/>about the requirements listed in this section.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 297<br/></b></p>
<p><b>Module advancedTopics_relatedTypes<br/></b>Pro Tools versions prior to Pro Tools 12.3 do not allow explicit type conversion between types with different<br/>product ID values. Beginning in Pro Tools 12.3 both the product ID and the plug-in ID may differ between<br/>explicitly related types.<br/></p>
<p><b>Module AuxInterface_TaskAgent<br/></b>This interface is not yet used in any AAX hosts<br/></p>
<p><b>Module CommonInterface_Algorithm<br/></b>As of Pro Tools 10.2.1 an algorithm's initialization calllback routine will have up to 5 seconds to execute.<br/></p>
<p><b>Module CommonInterface_FormatSpecification<br/></b>&#8727;_ACFGetSDKVersion is required for 64-bit AAX plug-ins only<br/></p>
<p><b>Module ExamplePlugIns<br/></b>The DemoDelay_DynamicLatencyComp example is compatible with Pro Tools 11.1 and higher.<br/></p>
<p>Collaboration diagram for Host Support:<br/></p>
<p><b>12.59 Known Issues<br/></b></p>
<p>A list of known bugs affecting AAX plug-ins.<br/></p>
<p><b>12.59.1 Contents<br/></b></p>
<p>&#8226; Known Issues in the AAX SDK<br/>&#8226; Known Issues in Pro Tools<br/>&#8226; Known Issues in Venue Live Sound Systems<br/>&#8226; Known Issues in Media Composer<br/>&#8226; Known Issues in Control Surfaces<br/>&#8226; Known Issues in Other Software<br/>&#8226; Known Issues in AAX Tools<br/></p>
<p><b>12.59.2 Known Issues in the AAX SDK<br/></b></p>
<p><b>12.59.2.1 AAXSDK-1052<br/></b></p>
<p>DemoGain_Multichannel does not appear in Pro Tools inserts and AudioSuite listings<br/></p>
<p>Details: The DemoGain_Multichannel example plugin&#8217;s describe routine fails to register any effects due to an ex-<br/>ception.<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.2.2 AAXSDK-1036<br/></b></p>
<p>AAX_ASSERT exposes third party build machine file paths, even in public facing protected and/or stripped binaries<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>298 Module Documentation<br/></b></p>
<p><b>12.59.2.3 AAXSDK-897<br/></b></p>
<p>Calling AAX_CParameter SetValue() methods during AAX_CEffectParameters::EffectInit() does not set the param-<br/>eter value<br/></p>
<p>As a workaround, use AAX_CParameter::SetNormalizedDefaultValue() to control the initial value of a parameter.<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.2.4 AAXSDK-851<br/></b></p>
<p>The register keyword is incorrectly used in AAX_Atomic.h<br/></p>
<p>This causes compilation failures in clang on Windows<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.2.5 AAXSDK-832<br/></b></p>
<p>Rectifi example does not output any signal in DSP mode<br/></p>
<p>Details: The AAX SDK example version of Rectifi initiates but does not output any sound when in DSP mode<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.2.6 AAXSDK-708<br/></b></p>
<p>The AAX SDK library will not compile using macOS SDK 10.13<br/></p>
<p>Details: Compilation results in an error in NSUUID.h. This error does not occur when using SDK 10.14 or later<br/></p>
<p>Resolution: This bug has been fixed in the macOS SDK<br/></p>
<p><b>12.59.2.7 AAXSDK-705<br/></b></p>
<p>AAX_VHostProcessorDelegate does not detect hosts with V2 support<br/></p>
<p>Resolultion: This bug is fixed as of AAX SDK 2.4.0<br/></p>
<p><b>12.59.2.8 AAXSDK-663<br/></b></p>
<p>AAX SDK #pragma pack errors with XCode 10 and later<br/></p>
<p>Resolution: This bug is fixed as of AAX SDK 2.3.2<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 299<br/></b></p>
<p><b>12.59.2.9 AAXSDK-599<br/></b></p>
<p>In the Win32 GUI example plug-in, the mouse cursor disappears when text is entered in text box and only re-appears<br/>when the mouse is moved out of the plug-in window bounds<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.2.10 AAX-578 / PTSW-158310<br/></b></p>
<p>AAX SDK JUCE example plug-in does not &quot;snap to default&quot; on option-click<br/></p>
<p>Resolution: This bug is fixed as of AAX SDK 1.0.4<br/></p>
<p><b>12.59.2.11 AAX-585 / PTSW-157451<br/></b></p>
<p>AAX DemoGain GUI example plug-ins do not correctly handle alt/opt-click for resetting controls to their default state<br/></p>
<p>Resolution: This bug is partially resolved as of AAX SDK 1.0.4. See also PTSW-158348 and PTSW-158381.<br/></p>
<p><b>12.59.2.12 AAX-582 / PTSW-157726<br/></b></p>
<p>AAX SDK example plug-ins' controls do not write automation properly when in 'touch' mode (frequently revert to<br/>default value while writing)<br/></p>
<p>Resolution: This bug is fixed as of the 1.0.4 SDK<br/></p>
<p><b>12.59.2.13 AAXSDK-561 / PT-232159<br/></b></p>
<p>An AAX Hybrid DSP plug-in with 7.1.2 input and output stem formats and a 16-sample processing buffer size will<br/>throw an AAE -14382 error upon instantiation at 192kHz<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.2.14 AAXSDK-533<br/></b></p>
<p>AAXLibrary compiles with warnings in Visual Studio 2015<br/></p>
<p>Resolution: This bug is fixed as of AAX SDK 2.3.0<br/></p>
<p><b>12.59.2.15 AAXSDK-514<br/></b></p>
<p>Using collection-level properties leads to a leaked ACF object<br/></p>
<p>Resolution: This bug is fixed as of AAX SDK 2.3.0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>300 Module Documentation<br/></b></p>
<p><b>12.59.2.16 AAXSDK-321<br/></b></p>
<p>Demo Delay (mono) DSP / Demo Gain (Cocoa UI) (mono) DSP can't be instantiated<br/></p>
<p>Resolution: This bug is fixed as of AAX SDK 2.2.0<br/></p>
<p><b>12.59.2.17 AAXSDK-271<br/></b></p>
<p>DemoMIDI_Sampler: No audio on right channel (multi-mono)<br/></p>
<p>Resolution: This bug is fixed as of AAX SDK 2.2.0<br/></p>
<p>Discussion: DemoMIDI_Sampler and DemoMIDI_Synth are now restricted to not use multi-mono, via the<br/>AAX_eProperty_Constraint_MultiMonoSupport property.<br/></p>
<p>In Pro Tools, when a track's MIDI destination is set to &quot;none&quot; and a new plug-in that includes a MIDI input node (e.g.<br/>any Instrument plug-in) is instantiated, the track's MIDI destination is set to the first newly created MIDI input node.<br/></p>
<p>When the track in question is greater than mono, and the Instrument plug-in is multi-mono, the default behavior is for<br/>the track's MIDI destination to be set to the first of the newly created input nodes, not to all of them simultaneously.<br/>As a result, the track's MIDI destination is set to the MIDI input node of the first (left) multi-mono instance of the<br/>plug-in.<br/></p>
<p>To route MIDI to all channels of a multi-mono plug-in in Pro Tools, ctrl-select the MIDI destination and choose the<br/>additional MIDI nodes.<br/></p>
<p><b>12.59.2.18 AAXSDK-186<br/></b></p>
<p>C99Compatibility constructs are incorrect when used with VS2012<br/></p>
<p>Resolution: This bug is fixed as of AAX SDK 2.1.1<br/></p>
<p><b>12.59.2.19 AAXSDK-162<br/></b></p>
<p>Misleading warning message when attempting hardware debugging using a non-local TIShell.out<br/></p>
<p>The &quot;Load ProTools Plug-in Symbols&quot; script gives the following warning: D:/Code_7/dev.ws.&#8592;&#8617;<br/>backup-win7-concert/AAX/Internal/SystemSoftware/TIShell/CCS_Project/TIShell/../../../../../../&#8592;&#8617;<br/>WinBag/x64/Release/bin/TIShell.out does not exist! Please question everything.<br/></p>
<p>This error message includes a hard-coded path that is not relevant to the running system. This error is benign but<br/>it can be confusing.<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.2.20 AAXSDK-16<br/></b></p>
<p>AAX SDK: Win32 example plug-in GUI does not appear in Windows 8<br/></p>
<p>Resolution: This bug is fixed as of AAX SDK 2.2.0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 301<br/></b></p>
<p><b>12.59.2.21 AAXSDK-14<br/></b></p>
<p>AAX DemoGain_VST: Text box entry is not acknowledged upon click outside of window<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.2.22 AAXSDK-13 / AAX-579 / PTSW-158381<br/></b></p>
<p>AAX SDK Win32 example plug-in does not &quot;snap to default&quot; on option-click<br/></p>
<p>Resolution: This bug is fixed as of AAX SDK 2.2.0<br/></p>
<p><b>12.59.2.23 AAXSDK-11 / AAX-581 / PTSW-158348<br/></b></p>
<p>AAX SDK VSTGUI example plug-in does not respond to 'alt' or 'win' modifier keys (Windows)<br/></p>
<p>Resolution: This bug is fixed as of AAX SDK 2.2.0<br/></p>
<p><b>12.59.2.24 AAXSDK-10 / AAX-580 / PTSW-154083<br/></b></p>
<p>AAX DemoGain_VST and DemoGain_Cocoa require initial click on GUI to take focus before editing (macOS)<br/></p>
<p>Resolution: This bug is not yet resolved. For macOS, one workaround is to modify VSTGUI's cocoasupport.mm file<br/>in order to add a handler for the acceptsFirstMouse selector:<br/>static BOOL VSTGUI_NSView_acceptsFirstMouse(<br/></p>
<p>id self,<br/>SEL _cmd)<br/></p>
<p>{<br/>return YES;<br/></p>
<p>}<br/>// In VSTGUI_NSView_isOpaque()<br/>res = class_addMethod(<br/></p>
<p>viewClass,<br/>@selector(acceptsFirstMouse:),<br/>IMP (VSTGUI_NSView_acceptsFirstMouse),<br/>&quot;B@:@:&quot;);<br/></p>
<p>Special thanks to Nick Protokowicz for suggesting this workaround.<br/></p>
<p><b>12.59.2.25 AAXSDK-6 / AAX-646<br/></b></p>
<p>AAX SDK: Incorrect output from scatter/gather DMA example plug-in when increasing playback buffer size while<br/>audio is present (Native decks)<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p>Workaround: The workaround for this issue is to not run audio through this plug-in while increasing the playback<br/>buffer size.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>302 Module Documentation<br/></b></p>
<p><b>12.59.2.26 AAXSDK-5<br/></b></p>
<p>AAX_CChunkDataParser::LoadChunk doesn't handle unknown chunk items well<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>Discussion: AAX_CChunkDataParser does not store the size of each chunk item in the data stream. Therefore<br/>there is no way to determine the correct size for each data element when reading a chunk that was generated by<br/>this parser.<br/></p>
<p>Workaround: If you know the correct size of each data element in a chunk when it is read by the plug-in, you can<br/>override the AAX_CChunkDataParser methods to ensure that each data element is correctly sized.<br/></p>
<p><b>12.59.2.27 AAXSDK-2 / AAX-648<br/></b></p>
<p>AAX SDK: Output from DMA example plug-in is one buffer early<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3 Known Issues in Pro Tools<br/></b></p>
<p><b>12.59.3.1 PT-325781<br/></b></p>
<p>Pro Tools crashes when loading an AAX plugin compiled with Objective C++ in the project languages<br/></p>
<p>Details: When trying to load an AAX plugin in Pro Tools that was compiled with OBJC and OBJCXX included in<br/>LANGUAGES, Pro Tools crashes due to memory failure<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.2 PT-323936<br/></b></p>
<p>Plugin window may be clipped on Windows when using a system display scaling value other than 100%<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.3 PT-322604<br/></b></p>
<p>AudioSuite plugins that use AAX_eProperty_UsesRandomAccess prevent certain processing modes<br/></p>
<p>Details: When using an AudioSuite plugin that sets AAX_eProperty_UsesRandomAccess to true, changing the<br/>AudioSuite processing mode to &quot;Create Continuous File&quot; forces &quot;Entire Selection&quot; mode, and changing the pro-<br/>cessing mode to &quot;Create Individual Files&quot; forces &quot;Clip by Clip&quot; mode.<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 303<br/></b></p>
<p><b>12.59.3.4 PT-322526<br/></b></p>
<p>MIDI recorded via chain out from a MIDI Effect plugin with latency is not aligned correctly<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2024.6<br/></p>
<p><b>12.59.3.5 PT-317648<br/></b></p>
<p>Pro Tools does not support plugins that use Auxiliary Output Stems and have more standard input channels than<br/>standard output channels<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.6 PT-316101<br/></b></p>
<p>Pro Tools doesn't throw the &quot;Move Failed Plugins&quot; dialog when launching with unsigned plugins<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.7 PT-307986<br/></b></p>
<p>Certain Avid plugins, such as SynthCELL and GrooveCELL, prevent AAX plugins from forking subprocesses<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.8 PT-307746<br/></b></p>
<p>When the transport is started at the beginning of the timeline, plugins that use tick position and/or sample location<br/>from AAX_ITransport may start early and play out of time if the plugin follows other inserts that incur their own<br/>latency<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools PT 2024.10<br/></p>
<p>Discussion: Synchronization using AAX_ITransport::GetBarBeatPosition() or MIDI Beat Clock may resolve this is-<br/>sue.<br/></p>
<p><b>12.59.3.9 PT-307193<br/></b></p>
<p>Committing creates a consolidated clip when plug-in sets AAX_eProperty_Constraint_AlwaysProcess to true<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.10 PT-306863<br/></b></p>
<p>The AAX_eProperty_Constraint_DoNotApplyDefaultSettings property is applied when &quot;Set Plug-in Default To&quot; is set<br/>to &quot;User Setting&quot; and a preset has been &quot;Set As User Default&quot;, but the property should be ignored in this case<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>304 Module Documentation<br/></b></p>
<p><b>12.59.3.11 PT-305352<br/></b></p>
<p>Automation values change unpredictably when changing a plug-in parameter from continuous to discrete or discrete<br/>to continuous<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.12 PT-303482<br/></b></p>
<p>(Important Escalation) Contextual menus and child windows miss mouse clicks in some 3P plug-ins, new to PT<br/>2023.3<br/></p>
<p>Resolution: This bug is fixed in Pro Tools 2023.6<br/></p>
<p><b>12.59.3.13 PT-299906<br/></b></p>
<p>AudioSuite plug-ins with sidechains crash PT (arm64 only)<br/></p>
<p>Resolution: This bug is Closed as Fixed in PT 2023.R1.0<br/></p>
<p><b>12.59.3.14 PT-297802<br/></b></p>
<p>Integer overflow in AAX_ITransport::GetTimelineSelectionStartPosition on Windows<br/></p>
<p>AAX_ITransport::GetTimelineSelectionStartPosition() supplies an incorrect sample position when the value is<br/>greater than about 12.42 hours at 48kHz.<br/></p>
<p>Resolution: This bug is fixed in Pro Tools 2023.9<br/></p>
<p><b>12.59.3.15 PT-290588<br/></b></p>
<p>AudioSuite offline processing option cannot be used after performing certain actions (it simply becomes greyed out)<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2022.12<br/></p>
<p><b>12.59.3.16 PT-284916<br/></b></p>
<p>Modifications to non-automatable plug-in parameters do not set the Pro Tools session dirty flag for AAX plug-ins<br/>that disable default settings via AAX_eProperty_Constraint_DoNotApplyDefaultSettings<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.17 PT-282946<br/></b></p>
<p>AAX timestamps for live plug-ins are two buffers out of sync with timestamps for non-live plug-ins<br/></p>
<p>This relates to timestamps derived from AAX_IComponentDescriptor::AddClock()<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 305<br/></b></p>
<p><b>12.59.3.18 PT-278282<br/></b></p>
<p>Crash when running certain Accelerate.framework operations<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2021.12<br/></p>
<p><b>12.59.3.19 PT-276280<br/></b></p>
<p>The VoiceOver accessibility tree for JUCE based plug-in GUIs is not connected to the Pro Tools plug-in window<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.20 PT-274717<br/></b></p>
<p>AudioSuite settings are saved with the system rather than with the session<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.21 PT-271830<br/></b></p>
<p>Crash when re-sizing a window for a plug-in that uses JUCE with OpenGL rendering enabled<br/></p>
<p>Details: When Pro Tools resizes an AAX plug-in window it can cause the the GL rendercontext used by JUCE<br/>to become invalidated. Plug-ins must take care not to use this object within the scope of a concurrent window re-size<br/>request via AAX_IViewContainer::SetViewSize() .<br/></p>
<p>Resolution: Plug-in developers must synchronize access to any OpenGL objects that are not thread-safe.<br/></p>
<p><b>12.59.3.22 PT-265539<br/></b></p>
<p>Side chain data is not provided to AudioSuite plug-ins in handle regions<br/></p>
<p>Details: AudioSuite does not process the audio in the handles outside of the clip selection<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.23 PT-263909<br/></b></p>
<p>Clipboard is pasted twice when pasting text into a JUCE plug-in text box<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2022.12<br/></p>
<p><b>12.59.3.24 PT-263859<br/></b></p>
<p>Committing up to an insert that is followed by a width-converting insert also commits the width-converting insert<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>306 Module Documentation<br/></b></p>
<p><b>12.59.3.25 PT-261394<br/></b></p>
<p>Frame rate offsets are calculated incorrectly for plug-ins when the session is at a higher frame rate<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2020.5<br/></p>
<p><b>12.59.3.26 PT-258560 / PT-256919<br/></b></p>
<p>Multi-input only AudioSuite plug-ins are processed as multi-mono<br/></p>
<p>Details: Plug-ins that define AAX_eProperty_MultiInputModeOnly actually get mono mode only<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.27 PT-258394<br/></b></p>
<p>JUCE AAX plug-ins which use images from BinaryData crash on Catalina<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.28 PT-257213<br/></b></p>
<p>AAX Hybrid plug-ins produce distorted signal on tracks in DSP Mode when using the HDX Hybrid Engine or Pro<br/>Tools Carbon<br/></p>
<p>Details: Because of this bug, we have disabled DSP Mode for certain AAX Hybrid plug-ins.<br/></p>
<p>Resolution: The fix is pending bug review<br/></p>
<p><b>12.59.3.29 PT-256704<br/></b></p>
<p>Pro Tools Plug-In Folder permissions (macOS) are set to allow write access by anyone<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2019.12<br/></p>
<p><b>12.59.3.30 PT-255800<br/></b></p>
<p>AAX Hybrid plug-in output on HDX contains a gap which varies with host buffer size<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.31 PT-255408<br/></b></p>
<p>Changing one plug-in insert results in a redundant audio buffer on a later insert in the chain<br/></p>
<p>Resolution: This bug from an external report could not be verified by Avid<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 307<br/></b></p>
<p><b>12.59.3.32 PT-254203<br/></b></p>
<p>Reverb and Delay AudioSuite plug-ins cannot provide an &quot;Analysis&quot; button<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2024.6; the AAX_eProperty_DisableAudioSuiteReverse property is<br/>now implemented.<br/></p>
<p><b>12.59.3.33 PT-254118 / PT-275441 / PT-279941<br/></b></p>
<p>Dynamic Plug-In Processing doesn't work during playback<br/></p>
<p>Details: Plug-ins are processed continuously during playback even when Dynamic Plug-In Processing is engaged.<br/>This issue has been fixed for certain track and plug-in types in various recent releases, but there are still common<br/>configurations for which dynamic plug-in processing does not work.<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2023.3<br/></p>
<p><b>12.59.3.34 PT-254103<br/></b></p>
<p>Some AAX plug-ins are displayed with incorrect colors<br/></p>
<p>Details: This issue affects plug-ins that use OpenGL in Pro Tools 2019.5 and higher. It relates to a Pro Tools<br/>optimization in which color space conversion is skipped for certain parts of the application UI.<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.35 PT-250751<br/></b></p>
<p>AudioSuite plug-ins do not set a custom suffix on a clip in case the selection reference is &quot;Clips list&quot;<br/></p>
<p>Resolution: This bug is will not be fixed<br/></p>
<p><b>12.59.3.36 PT-249791<br/></b></p>
<p>AudioSuite: Custom clip name is not applied to generated audio file on disk<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.37 PT-249790<br/></b></p>
<p>AudioSuite plug-ins cannot set a custom clip name suffix<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2019.10<br/></p>
<p><b>12.59.3.38 PT-248000<br/></b></p>
<p>Plug-in partial bypass should support more than just EQ and Dynamics categories<br/></p>
<p>Resolution: This enhancement is not yet supported<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>308 Module Documentation<br/></b></p>
<p><b>12.59.3.39 PT-245693 / PT-200756<br/></b></p>
<p>Dynamic plug-in processing on HDX cuts off reverb tails<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2024.6<br/></p>
<p><b>12.59.3.40 PT-243211<br/></b></p>
<p>Crash when closing a plug-in window unless the plug-in leaks its AAX_IViewContainer reference counts<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2019.5<br/></p>
<p><b>12.59.3.41 PT-237857<br/></b></p>
<p>Custom EQ curve display ranges are not supported<br/></p>
<p>Resolution: This enhancement is not yet supported<br/></p>
<p><b>12.59.3.42 PT-236755<br/></b></p>
<p>Up-mixing plug-ins with AOS drop output channels on HDX<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2018.7<br/></p>
<p><b>12.59.3.43 PT-235831<br/></b></p>
<p>The plug-in frame overlaps the plug-in window header if the plug-in GUI is taller than the screen height less the<br/>plug-in window header height.<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p>Workaround: Avoid resizing the plug-in GUI to a height greater than the display height.<br/></p>
<p><b>12.59.3.44 PT-235333<br/></b></p>
<p>Dynamic plug-in processing incorrectly shuts off processing in mixed multi-mono/multichannel chains that should<br/>force processing<br/></p>
<p>This bug can occur if a multi-mono plug-in preceeds a multichannel plug-in which sets AAX_eProperty_Constraint_AlwaysProcess<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.45 PT-234681<br/></b></p>
<p>AAX plug-in parameter handling may cause audio glitches on Windows for plug-ins with very long<br/>GenerateCoefficients() execution time<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 309<br/></b></p>
<p><b>12.59.3.46 PT-233726<br/></b></p>
<p>Unprintable characters in four-char parameter IDs may result in -9105 errors<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2018.1<br/></p>
<p><b>12.59.3.47 PT-233176<br/></b></p>
<p>AAX digital signature check fails on pre-Sierra systems for plug-ins signed on Sierra<br/></p>
<p>Resolution: This bug has been reported to Avid but is not yet confirmed. Contact PACE Anti-Piracy, Inc. if you<br/>encounter this behavior.<br/></p>
<p><b>12.59.3.48 PT-232678 / PT-236755<br/></b></p>
<p>Plug-in aux outputs are silent for upmix plug-ins when using AAX Native plug-ins with the HDX playback engine<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2018.1<br/></p>
<p><b>12.59.3.49 PT-232403<br/></b></p>
<p>ProTools shows error if the plug-in's multi-chunk preset file contain incorrect chunk listed in the end<br/></p>
<p>For example, if a new chunk type has been added to a later version of a plug-in and a preset from that version is<br/>opened in an earlier version of the plug-in.<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12.8.2<br/></p>
<p><b>12.59.3.50 PT-232159<br/></b></p>
<p>AAX Hybrid plug-ins with more than 16 total input channels (direct input and hybrid input) raise AAE -14382 error<br/>upon instantiation at 192 kHz sample rate<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.51 PT-230327<br/></b></p>
<p>The AAX related types feature is broken (AAX_IACFPropertyMap_V3 inheritance is incorrect)<br/></p>
<p>Resolution: This bug was introduced in Pro Tools 12.8 and is fixed as of Pro Tools 12.8.1<br/></p>
<p><b>12.59.3.52 PT-230290<br/></b></p>
<p>The plug-in preset menu takes a long time to build for plug-ins with a very large number of preset .tfx files<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2018.7<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>310 Module Documentation<br/></b></p>
<p><b>12.59.3.53 PT-230288<br/></b></p>
<p>The plug-in preset menu contains empty folders for other Effects in the same .aaxplugin bundle<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12.8.2<br/></p>
<p><b>12.59.3.54 PT-229026<br/></b></p>
<p>Pro Tools may crash after plug-in parameter tweaks on Windows<br/></p>
<p>Resolution: This crash has not been reproduced starting with Pro Tools 2018.1<br/></p>
<p><b>12.59.3.55 PT-227655<br/></b></p>
<p>AAX_ITransport::GetTimelineSelectionStartPosition() provides incorrect values for real-time plug-ins - value de-<br/>pends on transport time display selection in Pro Tools<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12.8<br/></p>
<p><b>12.59.3.56 PT-227173<br/></b></p>
<p>Incorrect timecode is sent to plug-ins when delay is present before the plug-in<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>Workaround: Attach a debugger after opening a session in Pro Tools. After the first session open, subsequent<br/>session open actions will not result in a crash.<br/></p>
<p><b>12.59.3.57 PT-226959<br/></b></p>
<p>A crash may occur when a multi-mono plug-in uses an incrementally buffered AAX port<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.58 PT-226559<br/></b></p>
<p>Transport location provided to plug-ins is incorrect during half-speed playback<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.59 PT-225763<br/></b></p>
<p>Incorrect AudioSuite processing modes are available for multichannel random access plug-ins<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 311<br/></b></p>
<p><b>12.59.3.60 PT-225637<br/></b></p>
<p>Plug-in automation can receive incorrect values when playback is initiated with tracks in auto write mode immediately<br/>after a session is loaded<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.61 PT-223581<br/></b></p>
<p>Pro Tools removes plug-ins from the insert menu if unsupported stem formats are detected<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12.8<br/></p>
<p>This bug is also now fixed in earlier versions of Pro Tools via a workaround which is now built into the AAX SDK<br/>during Describe. See AAX_VPropertyMap::AddProperty()<br/></p>
<p><b>12.59.3.62 PT-218545<br/></b></p>
<p>There is no way for AAX plug-ins to opt out of the default settings chunk sequence during plug-in instantiation<br/></p>
<p>Resolution: This enhancement will be supported in a Pro Tools 2019 release; see AAX_eProperty_Constraint_DoNotApplyDefaultSettings<br/></p>
<p><b>12.59.3.63 PT-218486<br/></b></p>
<p>Removing all automation parameters doesn't stop control from jumping back on first playback<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.64 PT-210904 / VSW-14216<br/></b></p>
<p>HDX errors can occur due to over-allocation of certain plug-ins<br/></p>
<p>This bug applies specifically to AAX DSP plug-ins which register the same DLL and algorithm entry point name for<br/>multiple modules with different AAX_eProperty_TI_MaxInstancesPerChip requirements.<br/></p>
<p>In VENUE, this bug causes a 'No Information Available' error dialog on a single DSP chip<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12.5 and VENUE 5.1<br/></p>
<p><b>12.59.3.65 PT-206995<br/></b></p>
<p>AOS is not cleaned up in AAX_IComponentDescriptor::Clear<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>312 Module Documentation<br/></b></p>
<p><b>12.59.3.66 PT-206541<br/></b></p>
<p>AAX automation playback is late and non-deterministic<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2024.10<br/></p>
<p><b>12.59.3.67 PT-206161<br/></b></p>
<p>HDX: AAX packets are not delivered to ports 16 or 24 (zero-indexed) when PostPacket() is called outside of<br/>GenerateCoefficients()<br/></p>
<p>Workaround: Make all calls to AAX_IController::PostPacket() within the scope of AAX_IEffectParameters::GenerateCoefficients()<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.68 PT-205610<br/></b></p>
<p>AAX Hybrid: transport location and clock methods do not provide correct values when called from the Hybrid render<br/>callback<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12.4<br/></p>
<p><b>12.59.3.69 PT-203420<br/></b></p>
<p>TestGetCurveData DigiOption results in incorrect plug-in view offset for plug-ins with MIDI<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>Workaround: Temporarily disable MIDI in your plug-in while developing or debugging the plug-in's curve data, then<br/>re-enable MIDI once you have finished using the TestGetCurveData DigiOption.<br/></p>
<p><b>12.59.3.70 PT-202345<br/></b></p>
<p>Pro Tools may incorrectly identify plug-ins when a single plug-in uses identical plug-in IDs across different Effects<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12.2<br/></p>
<p><b>12.59.3.71 PTSW-200437 / PTSW-197598<br/></b></p>
<p>Plug-Ins that use the &quot;Related Types&quot; feature cannot relate to plug-ins with a different ProductID<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.3.2 and Pro Tools 10.3.11<br/></p>
<p><b>12.59.3.72 PTSW-197651 / PT-218405<br/></b></p>
<p>In some cases AAX plug-ins do not show the correct Control Name Variation and just read out the automation name<br/></p>
<p>Resolution: This bug is will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 313<br/></b></p>
<p><b>12.59.3.73 PTSW-197601 / PT-218459<br/></b></p>
<p>Control surfaces can send illegal parameter values to plug-ins<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.74 PTSW-197593 / PT-218480<br/></b></p>
<p>HDX: A chip may be full with just a small percent of the System Usage meter filled<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.75 PTSW-197540<br/></b></p>
<p>AudioSuite: Analyze mode is not working properly when processing method is set to &quot;clip-by-clip&quot;<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.3.1<br/></p>
<p><b>12.59.3.76 PTSW-197472<br/></b></p>
<p>Dynamic Plug-In Processing is unnecessarily disabled for plug-ins in the &quot;Other&quot; category<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12<br/></p>
<p><b>12.59.3.77 PTSW-197471<br/></b></p>
<p>AudioSuite only analyzes the first clip in &quot;clip list&quot; mode<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12<br/></p>
<p><b>12.59.3.78 PTSW-197468 / PT-218460<br/></b></p>
<p>Pro Tools may incorrectly change a plug-in instance when another instance is edited<br/></p>
<p>Resolution: This bug is fixed in Pro Tools 2018.1<br/></p>
<p>Discussion: This issue only happens when the two plug-in types use the same Manufacturer and Plug-In IDs and<br/>use Product IDs with unprintable chars when interpreted as four-char values.<br/></p>
<p>We strongly recommend that you select Product IDs in the printable ASCII four-char range.<br/></p>
<p><b>12.59.3.79 PTSW-197431 / PT-218414<br/></b></p>
<p>Pro Tools 10: Plug-in Side-chain input is silent when the plug-in supports Aux Outputs<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>314 Module Documentation<br/></b></p>
<p><b>12.59.3.80 PTSW-197075<br/></b></p>
<p>Plug-in preset files for some plug-ins are not cross-compatible between Mac and Windows<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.2 and Pro Tools 10.3.10<br/></p>
<p><b>12.59.3.81 PTSW-196772 / PT-218423<br/></b></p>
<p>A View Size Changed notification is not sent when connecting/disconnecting a display<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.82 PTSW-196604<br/></b></p>
<p>Cannot adjust plug-in parameters with large numbers of steps using control surface (Artist Series)<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12.4<br/></p>
<p><b>12.59.3.83 PTSW-196428 / PT-218488<br/></b></p>
<p>AudioSuite preview allows processing with incorrect number of channels<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.84 PTSW-195316 / PT-218485<br/></b></p>
<p>EQ/Dyn graphs on EUCON surfaces are not always updated for plug-ins with many EQ/Dyn parameters<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>Discussion: Currently, EUCON surfaces only update a plug-in's EQ/Dyn curve plots when an update occurs to one<br/>of the parameters which is mapped to the plug-in's &quot;center section&quot; EQ/Dyn page tables. Other parameters will not<br/>trigger an update to the plug-in's EQ/Dyn curve plot.<br/></p>
<p><b>12.59.3.85 PTSW-195257<br/></b></p>
<p>Calling AAX_ICollection::AddEffect() multiple times using the same iEffectID only returns an error if called with<br/>the same effect descriptor, but this is always illegal<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12<br/></p>
<p>Discussion: Calling AAX_ICollection::AddEffect() using the same ID will now return an error in all cases<br/></p>
<p><b>12.59.3.86 PTSW-195256 / PT-218429<br/></b></p>
<p>Plug-in is not notified of preset load when loading factory default presets<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 315<br/></b></p>
<p><b>12.59.3.87 PTSW-195209 / PT-218474<br/></b></p>
<p>AAX_IViewContainer::HandleParameterMouseUp() returns AAX_ERROR_UNIMPLEMENTED when using control-<br/>command-option-click on a plug-in GUI control<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>Discussion: See the discussion of this bug in the AAX_IViewContainer documentation.<br/></p>
<p><b>12.59.3.88 PTSW-195113<br/></b></p>
<p>Automation problems with plug-in parameter names &gt; 31 characters<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.2.1<br/></p>
<p>Discussion: This bug was introduced in Pro Tools 11.1<br/></p>
<p><b>12.59.3.89 PTSW-194698 / PT-218478<br/></b></p>
<p>Very hard to edit plug-in parameters with many steps using a control surface rotary encoder<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.90 PTSW-194231 / PT-218434<br/></b></p>
<p>When the output on a track is set to &quot;no output&quot; then no audio is sent to Auxiliary Outputs of the plug-ins on the<br/>track<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p>Workaround: Users can work around this issue by ensuring that a track output is always assigned for tracks with<br/>plug-ins that generate Auxiliary Output channels. For example, the user may pull down the track's output gain fader,<br/>enable MUTE, or select an unused output channel or bus.<br/></p>
<p><b>12.59.3.91 PTSW-193646<br/></b></p>
<p>AudioSuite plug-ins are not able to partially re-name clips<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12<br/></p>
<p><b>12.59.3.92 PTSW-193400<br/></b></p>
<p>AOS plug-ins become active when moving an inactive plug-in to another insert<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.2<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>316 Module Documentation<br/></b></p>
<p><b>12.59.3.93 PTSW-193345<br/></b></p>
<p>AudioSuite processing notifications are not sent at the start and end of a processing event<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12<br/></p>
<p>Discussion: Two new notifications were added to provide this behavior. The existing AudioSuite notifications retain<br/>their behavior: they are sent before and after each processing pass, i.e. at the beginning and end of each audio<br/>channel that is processed, even if the current selection includes multiple channels. For more information, see<br/>AAX_EProcessingState<br/></p>
<p><b>12.59.3.94 PTSW-193339<br/></b></p>
<p>Pro Tools does not update plug-in settings when a new setting's name matches an old setting and the modification<br/>date is later<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>Workaround: To update the settings that are bundled with a plug-in, the plug-in's installer should search for and<br/>remove any deprecated settings files on the system.<br/></p>
<p><b>12.59.3.95 PTSW-193051<br/></b></p>
<p>Using Aux Output Stems on DSP plug-ins causes them to crash<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.2<br/></p>
<p>Discussion: This bug was introduced in Pro Tools 11.1<br/></p>
<p><b>12.59.3.96 PTSW-192863 / PT-218498<br/></b></p>
<p>Plug-in side chain input is not properly delay compensated: aligned with output instead of input, no individual tap<br/>per insert<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 2021.6<br/></p>
<p><b>12.59.3.97 PTSW-192755<br/></b></p>
<p>Key focus is not returned to a plug-in after it launches a dialog<br/></p>
<p>Resolution: This bug will not be fixed (design limitation)<br/></p>
<p><b>12.59.3.98 PTSW-192720 / PT-218467<br/></b></p>
<p>External source (SideChain) key input is not reported to DSP Dynamics plug-ins after HDX re-shuffle, hence no<br/>Gain Reduction occurs.<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 317<br/></b></p>
<p><b>12.59.3.99 PTSW-192635<br/></b></p>
<p>Implement Manufacturer ID byteswap<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.2 and Pro Tools 10.3.10<br/></p>
<p><b>12.59.3.100 PTSW-192456 / PT-218490<br/></b></p>
<p>Plug-in settings chunks with incorrect fSize result in junk data<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.101 PTSW-192251 / PT-218394<br/></b></p>
<p>EUCON surface cells sometimes behave inconsistently when discrete plug-in parameters are mapped to rotary<br/>encoders<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.102 PTSW-192086 / PT-218465<br/></b></p>
<p>AudioSuite AAX: Pro Tools performs multiple unnecessary render passes when rendering in multi-input mode<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.103 PTSW-191875<br/></b></p>
<p>Pro Tools uses a hard-coded version string when publishing its version to AAX plug-ins (AAX_IController::GetHostName)<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12.4<br/></p>
<p><b>12.59.3.104 PTSW-191446 / PT-218600<br/></b></p>
<p>Global symbols due to statically linked boost libs in Pro Tools components may conflict with plug-in components that<br/>use boost<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.105 PTSW-191317 / PT-218425<br/></b></p>
<p>The Pro Tools meter decay setting is not applied to plug-in meters<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>318 Module Documentation<br/></b></p>
<p><b>12.59.3.106 PTSW-191139<br/></b></p>
<p>Plug-ins do not receive parameter touch state when automation-enabled in Pro Tools 11.1<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1.2<br/></p>
<p><b>12.59.3.107 PTSW-190722<br/></b></p>
<p>Some plug-in state changes do not trigger the Pro Tools session &quot;dirty&quot; flag<br/></p>
<p>Resolution: This bug is fixed as of Pro Tool 11.1.2 and and Pro Tools 10.3.9<br/></p>
<p><b>12.59.3.108 PTSW-190719<br/></b></p>
<p>Unexpected behavior for plug-in auxiliary output channels &gt; 128<br/></p>
<p>Resolution: This bug will be fixed as of Pro Tools 11.1.3<br/></p>
<p><b>12.59.3.109 PTSW-190340<br/></b></p>
<p>In some cases AAX plug-ins do not show the correct Control Name Variation on control surfaces<br/></p>
<p>This bug can occur when a page table references parameters by ID and some parameters' ID strings are exactly as<br/>long as the control surface's display. In this scenario, the control surface will display the parameter's ID string rather<br/>than a Control Name Variations (abbreviation) string of equivalent length.<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12<br/></p>
<p><b>12.59.3.110 PTSW-189928 / PT-218456<br/></b></p>
<p>Failure to load AAX plug-ins with spaces in DLL filename<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.111 PTSW-189738 / PT-218494<br/></b></p>
<p>AAX: AAX_IController::PostPacket() doesn't return any error if you attempt to post to a private data field<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.112 PTSW-189725 / PT-218397<br/></b></p>
<p>Auto-generated AudioSuite plug-in GUIs are non-functional for the first plug-in loaded into the window<br/></p>
<p>This bug applies to AudioSuite plug-ins wich use the AAX_eProperty_UsesClientGUI property. This bug is present<br/>in all Pro Tools versions which support AAX.<br/></p>
<p>Workaround: This bug only applies when an AudioSuite window is first created. To resolve the issue, toggle an open<br/>AudioSuite window between different plug-ins. After toggling to another plug-in and back to the original plug-in, the<br/>auto-generated GUI will again be functional.<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 319<br/></b></p>
<p><b>12.59.3.113 PTSW-189439 / PT-218427<br/></b></p>
<p>Attempts to set signal latency by non-linear AudioSuite plug-ins should fail, but do not<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.114 PTSW-189279<br/></b></p>
<p>An AudioSuite plug-in ID may be incorrectly used as a related type, preventing type-swapping<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.2 and Pro Tools 10.3.10.<br/></p>
<p><b>12.59.3.115 PTSW-188836 / PT-218428<br/></b></p>
<p>AAX_CMidiPacket::mIsImmediate field is not getting set for real-time MIDI messages<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.116 PTSW-188830<br/></b></p>
<p>AudioSuite: PreRender() is not called before each preview pass<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1<br/></p>
<p><b>12.59.3.117 PTSW-188653 / PT-218451<br/></b></p>
<p>Plug-ins are not unloaded and cannot be swapped when EnablePlugInHotSwap option is enabled<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>The workaround for this issue is to re-launch Pro Tools after installing a new build of the plug-in<br/></p>
<p><b>12.59.3.118 PTSW-188161<br/></b></p>
<p>It is not possible to launch some Pro Tools 11 and later development builds from a debugger<br/></p>
<p>Resolution: This bug is unresolved. It applies to all Pro Tools 11 and higher development builds on Windows and to<br/>some development builds on Mac.<br/></p>
<p>Workaround Use the PauseDuringLaunchToAttachDebugger DigiOption to attach the debugger at a safe point in<br/>the Pro Tools launch process<br/></p>
<p><b>12.59.3.119 PTSW-187670<br/></b></p>
<p>Plug-in preset menu takes a long time to load with many presets<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>320 Module Documentation<br/></b></p>
<p><b>12.59.3.120 PTSW-187220 / PT-218584<br/></b></p>
<p>AAX_ePrivateDataOptions_KeepOnReset is not implemented<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.121 PTSW-187216 / PT-218491<br/></b></p>
<p>Pro Tools has a problem with AAX_IController::PostPacket() being called during AAX_IEffectParameters::TimerWakeup()<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>Workaround: This bug occurs only with unbuffered plug-ins' ports for coefficients, so the workaround for this issue<br/>is to use buffered ports instead.<br/></p>
<p><b>12.59.3.122 PTSW-187159<br/></b></p>
<p>Plug-in parameters can get stuck in touched state; touch/release tokens do not always match<br/></p>
<p>One race condition that could result in this bug behavior has been addressed in Pro Tools 11.1.0. However, the<br/>bug can still occur when using EUCON control surfaces due to a mismatch in touch/release tokens sent from those<br/>surfaces.<br/></p>
<p>Resolution: This bug is resolved as of Pro Tools 11.1.3. It is unresolved in Pro Tools 10<br/></p>
<p><b>12.59.3.123 PTSW-187066 / PT-218391<br/></b></p>
<p>AAX_ITransport::GetCurrentNativeSampleLocation() returns invalid value on the start of playback<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.124 PTSW-186864<br/></b></p>
<p>Automatable parameter values may change between Set and Update<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.125 PTSW-186725<br/></b></p>
<p>Related types do not work when used with AAX_eProperty_SampleRate<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1<br/></p>
<p><b>12.59.3.126 PTSW-186627<br/></b></p>
<p>AAX plug-ins whose context field IDs are not defined in Describe cause a crash in Pro Tools<br/></p>
<p>Resolution: This bug is closed (unable to reproduce)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 321<br/></b></p>
<p><b>12.59.3.127 PTSW-186253<br/></b></p>
<p>AudioSuite GUI work causes audio playback glitches and stutters<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.2.<br/></p>
<p><b>12.59.3.128 PTSW-186189<br/></b></p>
<p>If an AAX plug-in does not declare all the fields in its context block, undefined behavior may occur (possibly a crash)<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.3.8 and Pro Tools 11.0.2<br/></p>
<p><b>12.59.3.129 PTSW-186182<br/></b></p>
<p>On Windows, VSTGUIv4 plug-in GUIs do not receive key events (PT11 only)<br/></p>
<p>Resolution: This bug is addressed with a patch to the AAX SDK's VSTGUI extension implementation as of AAX<br/>SDK 2.1.0<br/></p>
<p><b>12.59.3.130 PTSW-185868 / PT-218439<br/></b></p>
<p>AAX: Calls to SetValue() early in plug-in life may not propagate to UpdateParameterNormalizedValue()<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>The workaround for this issue is to call SetValue redundantly until the desired value is updated.<br/></p>
<p><b>12.59.3.131 PTSW-185867 / PT-218470<br/></b></p>
<p>Session tempo should be available during EffectInit()<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>Workaround: The workaround for this issue is to poll the transport interface in TimerWakeup() or otherwise call it<br/>after EffectInit() completes.<br/></p>
<p><b>12.59.3.132 PTSW-185866<br/></b></p>
<p>Pro Tools does not respond to SetParameterNormalizedValue() while offline bouncing<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1. However, note that we do not recommend implementing linked<br/>parameters using direct calls to SetParameterNormalizedValue(). For an explanation of the correct approach to<br/>parameter linking, see Linked parameters, with examples provided in the SDK example plug-ins.<br/></p>
<p><b>12.59.3.133 PTSW-185825 / PT-218464<br/></b></p>
<p>Undo key events do not reach plug-ins (Windows)<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>322 Module Documentation<br/></b></p>
<p><b>12.59.3.134 PTSW-185537<br/></b></p>
<p>Use of DigiTrace results in eTISysSwapScriptTimeout<br/></p>
<p>Resolution: This bug fixed as of Pro Tools 11.1<br/></p>
<p><b>12.59.3.135 PTSW-185484<br/></b></p>
<p>AAX_TRACE_RELEASE crashes at highest optimization setting in AAX DSP plug-ins<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.136 PTSW-185483<br/></b></p>
<p>DigiTrace: Only one parameter can be sent per trace on HDX<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1<br/></p>
<p><b>12.59.3.137 PTSW-185462<br/></b></p>
<p>AudioSuite: Error 1224 on AudioSuite render when significantly changing the length of a clip (Windows 8)<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1<br/></p>
<p><b>12.59.3.138 PTSW-185343<br/></b></p>
<p>AAX_ITransport::GetTimeCodeInfo returns invalid values for AAX Instruments<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.3.7 and Pro Tools 11.0.2<br/></p>
<p><b>12.59.3.139 PTSW-185341<br/></b></p>
<p>Related types come up as inactive when going from HDX &gt; Native<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1<br/></p>
<p><b>12.59.3.140 PTSW-184777 / PT-218483<br/></b></p>
<p>AAX plug-in meters are not cleared during silence<br/></p>
<p>This bug is new to Pro Tools 11. It does not occur in Pro Tools 10.<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 323<br/></b></p>
<p><b>12.59.3.141 PTSW-184770<br/></b></p>
<p>AAX Hybrid plug-ins cannot be opened as AudioSuite (AAE -7103 error)<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1<br/></p>
<p><b>12.59.3.142 PTSW-184682<br/></b></p>
<p>Incorrect audio buffer length provided when a native plug-in (erroneously) registers AAX_eProperty_AudioBufferLength<br/></p>
<p>Resolution: Since this is an unsupported plug-in configuration this bug will not be fixed<br/></p>
<p><b>12.59.3.143 PTSW-184642 / PT-218627<br/></b></p>
<p>AudioSuite &quot;progress&quot; dialog re-naming is not supported by AAX (it was supported in Pro Tools 9 and earlier)<br/></p>
<p>Resolution: This feature is not implemented<br/></p>
<p><b>12.59.3.144 PTSW-184619 / PT-218473 / AAX-600<br/></b></p>
<p>AAX MIDI plug-ins' MIDI channels are not uniquely labeled<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.145 PTSW-184541<br/></b></p>
<p>Native engine strides by 2048 samples at 96kHz (expect &lt;= 1024)<br/></p>
<p>Resolution: This bug fixed as of Pro Tools 11.0.1<br/></p>
<p><b>12.59.3.146 PTSW-183902 / PT-218479<br/></b></p>
<p>AAX_IHostProcessorDelegate::GetAudio() responds to invalid iLocation as if everything succeeded<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.147 PTSW-183848 / PT-218390<br/></b></p>
<p>AAX_IHostProcessorDelegate::GetAudio() ignores input audio buffer parameter<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>The workaround for this issue is to make sure that HostProcessor plug-ins only request valid audio - do the<br/>boundary-condition checking inside the plug-in.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>324 Module Documentation<br/></b></p>
<p><b>12.59.3.148 PTSW-183841<br/></b></p>
<p>Plug-ins defining AAX_eProperty_RequestsAllTrackData quit when processing a timeline region with no audio<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.0.2<br/></p>
<p><b>12.59.3.149 PTSW-183731<br/></b></p>
<p>Failures returned by 3P AAX-AS PIs in Pre- Analyze/Render are not used by the host<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1<br/></p>
<p><b>12.59.3.150 PTSW-183708<br/></b></p>
<p>AudioSuite: plug-in parameters are not changed upon 1st click after you click Bypass. [Win]<br/></p>
<p>Resolution: This was found to be an issue in certain plug-ins with JUCE-based GUI implementations. In JUCE,<br/>the real-time variants of the of the modifiers key getter method can cause seemingly unrelated problems with the<br/>responsiveness of the GUI. In this instance, the symptom was that plug-in parameters would not be changed on the<br/>first click inside the GUI window.<br/></p>
<p>The workaround for this issue, and for other unusual GUI behavior in these plug-ins, is to always use juce::&#8592;&#8617;<br/>ModifierKeys::getCurrentModifiers(); do not use juce::ModifierKeys::getCurrent&#8592;&#8617;<br/>ModifiersRealtime().<br/></p>
<p><b>12.59.3.151 PTSW-168222<br/></b></p>
<p>Sample rate specific plug-ins cause Pro Tools to throw a misleading error message when opened in non-supported<br/>sample rate sessions<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 11.1<br/></p>
<p><b>12.59.3.152 PTSW-165992<br/></b></p>
<p>Make automation link by Parameter ID instead of Parameter Name. Fall-back to Parameter Name if no match<br/></p>
<p>Resolution: This behavior is supported starting in Pro Tools 11.1<br/></p>
<p><b>12.59.3.153 PTSW-163739<br/></b></p>
<p>AudioSuite works incorrectly in Clip List mode.<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 12<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 325<br/></b></p>
<p><b>12.59.3.154 PTSW-161674<br/></b></p>
<p>Stereo instrument plug-ins: &quot;MIDI Node&quot; field in plug-in window header disappears when insert is dragged to a new<br/>slot<br/></p>
<p>Resolution: This bug is unresolved in Pro Tools and will not be fixed for the foreseeable future.<br/></p>
<p><b>12.59.3.155 PTSW-160778<br/></b></p>
<p>After making a Preview pass, AudioSuite plug-ins no longer make calls to InitOutputBounds()<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2.1<br/></p>
<p><b>12.59.3.156 PTSW-160620<br/></b></p>
<p>AAX plug-ins receive meaningless Clock data on Native decks, and less-than-ideal data on DSP decks<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2<br/></p>
<p><b>12.59.3.157 PTSW-159702<br/></b></p>
<p>AAX VI Issue - All AAX VIs do not have MIDI Nodes<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2<br/></p>
<p><b>12.59.3.158 PTSW-159700<br/></b></p>
<p>AAX VI Issue - Instrument Tracks do not automatically map to the AAX VI that is instantiated on them<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2<br/></p>
<p><b>12.59.3.159 PTSW-159524<br/></b></p>
<p>Incorrect error message when power is not connected to HDX card (EDIT: occurs with pre-A1 HDX prototypes only)<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.160 PTSW-158119<br/></b></p>
<p>Some plug-ins' DSP Instance counts are much lower in Pro Tools 10.2 than in Pro Tools 10.1<br/></p>
<p>Resolution: This issue affects plug-ins that employ more than one buffered data port and that support many in-<br/>stances per DSP chip on HDX. As of Pro Tools 10.2, there is a limit of 164 buffered data ports per DSP (this is equal<br/>to the total I/O limit per DSP.)<br/></p>
<p>To work around this issue, use as few data ports in your plug-in's algorithm context as possible. Note that DMA<br/>transfers on HDX occur in 128-byte chunks, so packet sizes below 128 bytes do not increase transfer efficiency on<br/>HDX.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>326 Module Documentation<br/></b></p>
<p><b>12.59.3.161 PTSW-157745<br/></b></p>
<p>Plug-ins write automation with pairs of updates, causing undesired &quot;stepping&quot; in recorded automation<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2 and 10.1.1<br/></p>
<p><b>12.59.3.162 PTSW-157518<br/></b></p>
<p>Poor plug-in performance with multiple processors selected; plug-ins are not consistently assigned to the same<br/>worker/thread by DAE, leading to cache thrashing.<br/></p>
<p>Resolution: This bug is fixed as of the audio engine changes in Pro Tools 11<br/></p>
<p><b>12.59.3.163 PTSW-157012<br/></b></p>
<p>AAX DSP plug-ins with same DLL name are not properly labeled in the System Usage window<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2<br/></p>
<p><b>12.59.3.164 PTSW-156310<br/></b></p>
<p>Mouse cursor does not reliably update when positioned over plug-ins. Instead the mouse cursor shows the current<br/>Edit Tool.<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2<br/></p>
<p><b>12.59.3.165 PTSW-156286<br/></b></p>
<p>GUI elements fill window in some 3P AAX plug-ins GUIs on Windows<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2<br/></p>
<p><b>12.59.3.166 PTSW-156216<br/></b></p>
<p>pluginGestalt_SupportsControlChangesInThread is not properly implemented for AAX plug-ins<br/></p>
<p>Resolution: Parameter updates are handled by a non-main thread for all AAX plug-ins as of Pro Tools 10.1<br/></p>
<p><b>12.59.3.167 PTSW-156195<br/></b></p>
<p>Silent failure when plug-ins attempt to register components with different platform support<br/></p>
<p>Resolution: This bug is not yet resolved. This is an expected constraint, but the silent failure is unexpected<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 327<br/></b></p>
<p><b>12.59.3.168 PTSW-156035<br/></b></p>
<p>GetCurrentTDMSampleLocation() returns the wrong value.<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2<br/></p>
<p><b>12.59.3.169 PTSW-155300 / PT-218458<br/></b></p>
<p>When an AudioSuite plug-in modifies the output audio length, the audio is not positioned at the correct location<br/></p>
<p>This bug is due to AudioSuite handles processing. A plug-in that modifies the output audio length may move audio<br/>from the handle region into the visible clip region, which is unexpected behavior from the user's perspective.<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>The workaround is for plug-ins that experience this issue to disable AudioSuite handles, thereby only processing<br/>the audio that the user sees on the timeline.<br/></p>
<p><b>12.59.3.170 PTSW-155177<br/></b></p>
<p>eFicGestalt_GetASPreHandleLength and eFicGestalt_GetASPostHandleLength return the<br/>wrong handle length values upon a call to AnalyzeAudio with 'WHOLE FILE' mode selected<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2<br/></p>
<p><b>12.59.3.171 PTSW-154361<br/></b></p>
<p>Highlight info sent to plug-ins before GUI is created.<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.0<br/></p>
<p><b>12.59.3.172 PTSW-153140<br/></b></p>
<p>Crash on Pro Tools quit when plug-in GUI is open (macOS)<br/></p>
<p>Resolution: This bug is unresolved in Pro Tools and will not be fixed for the foreseeable future. Plug-in workarounds<br/>are demonstrated in the DemoGain_GUIExtensions example plug-ins:<br/></p>
<p>a) Separating all Obj-C elements into a separate bundle that is loaded manually by the main plug-in bundle (see<br/>DemoGain_Cocoa) b) Applying an NSAutoreleasePool to the AAX GUI object destructors (see DemoGain_VST<br/>and DemoGain_JUCE)<br/></p>
<p><b>12.59.3.173 PTSW-150047<br/></b></p>
<p>AAX MIDI plug-ins do not get correct MIDI routing on Instrument tracks<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.2<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>328 Module Documentation<br/></b></p>
<p><b>12.59.3.174 PTSW-149880<br/></b></p>
<p>Configurations with duplicate PlugInID properties are silently hidden with no error<br/></p>
<p>Resolution: As of Pro Tools 10.2, duplicate PlugInID properties will trigger the following DigiTrace log:<br/></p>
<p>DTF_AAXHOST DTP_NORMAL<br/></p>
<p>&quot;AAXH ERROR: Attempted to add new configuration with duplicate ID: %x&quot; existingID<br/></p>
<p><b>12.59.3.175 PTSW-149819<br/></b></p>
<p>MIDI packet alignment is not identical between DAE and AAX<br/></p>
<p>This is a known bug in Pro Tools 10.0. This bug results in corrupted MIDI stream data to AAX plug-ins.<br/></p>
<p>Resolution: This bug is fixed as of Pro Tools 10.0.1<br/></p>
<p><b>12.59.3.176 PTSW-135536 / PT-218412<br/></b></p>
<p>Erroneous transport location information provided to plug-ins after playback (new to PT9)<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.3.177 PTSW-3020 / PT-218463<br/></b></p>
<p>Groups do not follow changes to &quot;Inserts&quot; Globals group settings<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p>The workaround for this issue is to modify the group's settings to de-select &quot;follow globals&quot;, then re-modify the<br/>group's settings to select &quot;follow globals&quot;. This will apply the current Globals settings as well as any future changes<br/>to the Globals without need for additional workarounds.<br/></p>
<p><b>12.59.3.178 AAX-686<br/></b></p>
<p>Re-add support for AudioSuite &quot;progress&quot; dialog re-naming (was supported in PT 9 and earlier) (see PTSW-159768)<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.3.179 AAX-583 / PTSW-157743<br/></b></p>
<p>AAX SDK Win32 GUI example plug-in does not draw correctly<br/></p>
<p>Resolution: Duplicate of PTSW-156286 (see above.) Resolved as of Pro Tools 10.2<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.59 Known Issues 329<br/></b></p>
<p><b>12.59.4 Known Issues in Venue Live Sound Systems<br/></b></p>
<p><b>12.59.4.1 VSW-13857<br/></b></p>
<p>Plug-in installers cannot associate a single thumbnail image with multiple variants<br/></p>
<p>Resolution: This capability is supported starting in Venue 6.3<br/></p>
<p>Prior to this change a plug-in thumbnail filename always contained 24 hexadecimal digits:<br/></p>
<p>1. The first 8 digits refer to the plug-in's Manufacturer ID<br/>2. The middle 8 digits refer to the plug-in's Product ID<br/>3. The last 8 digits refer to the plug-in's &quot;plug-in ID&quot;, which is usually a plug-in variant (Mono, Stereo, etc.).<br/></p>
<p>With this change, Venue supports using a generic thumbnail file for all variants, thus having only the first 16 identi-<br/>fying digits.<br/></p>
<p><b>12.59.4.2 VSW-13292<br/></b></p>
<p>Plug-in parameters are not mapped to S6L if custom page tables are not provided<br/></p>
<p>Details: S6L does not fall back to using the 'PgTL' page table type if a plug-in does not provide any parameter<br/>mapping for the primary 'Av46' or secondary 'FrTL' page tables. If a plug-in does not provide any of these<br/>page tables then its parameters will not display on the console.<br/></p>
<p>Resolution: This bug will not be fixed<br/></p>
<p><b>12.59.4.3 Other Known Issues<br/></b></p>
<p>&#8226; PT-210904 / VSW-14216<br/></p>
<p><b>12.59.5 Known Issues in Media Composer<br/></b></p>
<p><b>12.59.5.1 MCDEV-2904<br/></b></p>
<p>Optional analysis is not applied to every channel in a multi-channel selection<br/></p>
<p>Resolution: This bug is fixed as of Media Composer 8.4<br/></p>
<p>Discussion: When an optional analysis pass is triggered in Media Composer, only the channel that is currently<br/>represented in the AudioSuite Dialog will be analyzed. Other channels in a multi-channel selection will not be<br/>analyzed.<br/></p>
<p>This issue is fixed in Media Composer 8.4; now the following behavior will occur for AudioSuite plug-ins:<br/></p>
<p>&#8226; If a plug-in defines only AAX_eProperty_RequiresAnalysis then an Analyze pass will be performed before<br/>Render/Preview and the &quot;Analyze&quot; button will be disabled<br/></p>
<p>&#8226; If a plug-in defines only AAX_eProperty_OptionalAnalysis then an Analyze pass will be performed before<br/>Render/Preview as well as when the &quot;Analyze&quot; button is clicked, and the &quot;Analyze&quot; button will be enabled<br/></p>
<p>&#8226; If a plug-in defines both AAX_eProperty_RequiresAnalysis and AAX_eProperty_OptionalAnalysis then an<br/>Analyze pass will be performed before Render/Preview as well as when the &quot;Analyze&quot; button is clicked, and<br/>the &quot;Analyze&quot; button will be enabled<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>330 Module Documentation<br/></b></p>
<p><b>12.59.6 Known Issues in Control Surfaces<br/></b></p>
<p><b>12.59.6.1 PT-285383<br/></b></p>
<p>EUCON surfaces display plug-in parameters incorrectly if the plug-in page table contains an Av18 layout<br/></p>
<p>Resolution: This bug is fixed in 2023.3<br/></p>
<p><b>12.59.6.2 PT-226228<br/></b></p>
<p>On EUCON control surfaces, Dynamics curves are not displayed if a plug-in does not provide a custom curve display<br/>range<br/></p>
<p>Workaround: In order for a plug-in's Dynamics curve to be displayed, the plug-in must implement<br/>AAX_IEffectParameters::GetCurveDataDisplayRange() for whichever Dynamics curve types it supports<br/></p>
<p><b>12.59.6.3 PT-226227<br/></b></p>
<p>EUCON control surfaces do not support custom EQ curve display ranges<br/></p>
<p>Resolution: This feature is not yet implemented<br/></p>
<p><b>12.59.6.4 GWSW-16656<br/></b></p>
<p>Avid Control does not map plug-in controls to cells that do not have an encoder assignment<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.6.5 GWSW-8470<br/></b></p>
<p>S6: Knob velocity changes are too sensitive for plug-in parameters with a large number of steps<br/></p>
<p>Resolution: Resolved as of S6 Software 2.0<br/></p>
<p><b>12.59.6.6 GWSW-6694<br/></b></p>
<p>S6: Plug-in parameter order is inverted when using ProControl page tables<br/></p>
<p>Resolution: Resolved as of S6 Software 1.3<br/></p>
<p><b>12.59.7 Known Issues in Other Software<br/></b></p>
<p><b>12.59.7.1 XPACE-23<br/></b></p>
<p>Performance issues on Azure VMs with some copy protected binaries<br/></p>
<p>Pro Tools and Media Composer support operation in an Azure VM environment. Some early versions of Eden copy<br/>protection by PACE Anti-Piracy, Inc. does not perform well in this environment.<br/></p>
<p>Resolution: This issue is resolved in PACE Eden versions 5 and later. To avoid this issue be sure to update to the<br/>latest version of your copy protection.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.60 Change Log 331<br/></b></p>
<p><b>12.59.8 Known Issues in AAX Tools<br/></b></p>
<p><b>12.59.8.1 AAXTOOL-1344<br/></b></p>
<p>Page Table Editor recognises 7.0.6 and 7.1.6 as &quot;unknown stem format&quot;<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.8.2 PT-218597<br/></b></p>
<p>The cyclesshared dish command provides an average, but should provide the worst observed case<br/></p>
<p>Resolution: This bug is unresolved<br/></p>
<p><b>12.59.8.3 Additional Information<br/></b></p>
<p>For a list of additional known issues in AAX Tools such as Pro Tools Developer Builds, DigiShell or the<br/>AAX Plug-In Page Table Editor, see the dedicated ReadMe file that is distributed with each tool. Collaboration<br/>diagram for Known Issues:<br/></p>
<p><b>12.60 Change Log<br/></b></p>
<p>Changes between AAX SDK versions.<br/></p>
<p><b>Note<br/></b>See Host Support for information about which host versions support various AAX features.<br/></p>
<p><b>12.60.1 Change Log<br/></b></p>
<p><b>12.60.1.1 AAX SDK 2.8.1<br/></b></p>
<p><b>12.60.1.1.1 Documentation<br/></b></p>
<p>&#8226; Updated documentation on plugin caching in the Pro Tools Guide.<br/></p>
<p>&#8226; Added documentation for Clip drag and drop to the Pro Tools Guide.<br/></p>
<p>&#8226; Added warnings against setting cached plugin information based on run-time checks. See Host feature and environment checks<br/>for more information.<br/></p>
<p><b>12.60.1.1.2 Build<br/></b></p>
<p>&#8226; Changed use of nonstandard WIN32 to _WIN32<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>332 Module Documentation<br/></b></p>
<p><b>12.60.1.1.3 AAX Library<br/></b></p>
<p>&#8226; Moved functions AAX_GetStemFormatChannelCount , sampleRateInMask , getLowestSampleRateInMask ,<br/>and getMaskForSampleRate from AAX.h to AAX_Enums.h.<br/></p>
<p><b>12.60.1.2 AAX SDK 2.8.0<br/></b></p>
<p><b>12.60.1.2.1 AAX Library<br/></b></p>
<p>&#8226; Added task-related support files for AAX_CTask and AAX_IHostTaskAgent<br/></p>
<p><b>12.60.1.2.2 License<br/></b></p>
<p>&#8226; Added an open source option to the AAX SDK license<br/></p>
<p><b>12.60.1.2.3 Directory Changes<br/></b></p>
<p>&#8226; Renamed all msvc and vs2017 directories to vs<br/></p>
<p><b>12.60.1.2.4 Documentation<br/></b></p>
<p>&#8226; Converted the SDK's readme file to markdown<br/></p>
<p>&#8226; Documented that AAX_eProperty_DisableAudioSuiteReverse is now supported (starting in Pro Tools 2024.6)<br/></p>
<p><b>12.60.1.2.5 Example plug-ins<br/></b></p>
<p>&#8226; Added new example plug-in DemoMIDI_Transpose<br/></p>
<p><b>12.60.1.2.6 Extensions<br/></b></p>
<p>&#8226; Converted use of juce::PlatformUtilities to juce::Process when setting the module instance<br/>handle in the JUCE GUI extension to enable support for JUCE version 7 and higher<br/></p>
<p><b>12.60.1.2.7 Resolved bugs<br/></b></p>
<p>&#8226; Added explicit copy constructors to classes in AAX_Exception.h to resolve an MSVC warning<br/></p>
<p><b>12.60.1.3 AAX SDK 2.7.0<br/></b></p>
<p><b>12.60.1.3.1 AAX Library<br/></b></p>
<p>&#8226; Enhanced AAX_VCollection to provide information about the host version when required during Describe.<br/>Access via AAX_ICollection::GetHostVersion()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.60 Change Log 333<br/></b></p>
<p><b>12.60.1.3.2 Definitions<br/></b></p>
<p>&#8226; Added a notification AAX_eNotificationEvent_HostLocale to allow plugins to follow the host's loclization set-<br/>ting.<br/></p>
<p>&#8226; Added new feature identifier AAXATTR_Client_Version to support AAX_ICollection::GetHostVersion()<br/></p>
<p><b>12.60.1.3.3 Documentation<br/></b></p>
<p>&#8226; Added documentation for MIDI Effects to the Pro Tools Guide<br/></p>
<p><b>12.60.1.3.4 Interface<br/></b></p>
<p>&#8226; Added AAX_IACFTransport_V5 that provides the ability to query key signature, typically accessed through<br/>AAX_ITransport::GetKeySignature()<br/></p>
<p><b>12.60.1.3.5 Resolved bugs<br/></b></p>
<p>&#8226; Fixed compiler errors in AAX_CRangeTaperDelegate when instantiated for certain integer types<br/></p>
<p>&#8226; Fixed a compiler error in AAX_CParameter constructors affecting certain compilers<br/></p>
<p><b>12.60.1.3.6 specification<br/></b></p>
<p>&#8226; Added the Properties File as an optional file in the plugin bundle specification<br/></p>
<p><b>12.60.1.4 AAX SDK 2.6.1<br/></b></p>
<p><b>12.60.1.4.1 Build<br/></b></p>
<p>&#8226; Reduced default warning Visual Studio level to Level4 to eliminate warnings from standard library headers<br/></p>
<p><b>12.60.1.4.2 Definitions<br/></b></p>
<p>&#8226; Added AAX_eProperty_ShowInMenus for plugins that should not be shown in the host's effect menus<br/></p>
<p>&#8226; Added new plugin category AAX_EPlugInCategory_MIDIEffect for MIDI Effect plugins<br/></p>
<p><b>12.60.1.4.3 Example plug-ins<br/></b></p>
<p>&#8226; The DemoMIDI_Synth_AuxOutput plugin now demonstrates stereo auxiliary outputs<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>334 Module Documentation<br/></b></p>
<p><b>12.60.1.4.4 Extensions<br/></b></p>
<p>&#8226; Updated the JUCE GUI extension to support JUCE version 7<br/></p>
<p><b>12.60.1.5 AAX SDK 2.6.0<br/></b></p>
<p><b>12.60.1.5.1 AAX Library<br/></b></p>
<p>&#8226; Added a implementation AAX_CSessionDocumentClient for the session document client interface<br/>&#8226; Changed the behavior of AAX_AggregateResult to avoid crash on an exception thrown from the class de-<br/></p>
<p>structor<br/>&#8226; Added additional reference implementations of AAX_IDataBuffer - AAX_CArrayDataBuffer and AAX_CArrayDataBufferOfType<br/></p>
<p><b>12.60.1.5.2 Definitions<br/></b></p>
<p>&#8226; Added a new tracing priority, kAAX_Trace_Priority_Critical<br/></p>
<p><b>12.60.1.5.3 Documentation<br/></b></p>
<p>&#8226; Re-named TI Guide to HDX DSP Guide<br/>&#8226; Clarified documentation for HDX DSP Multi-shell packing<br/>&#8226; Added documentation regarding Using the Pro Tools Scripting SDK with AAX<br/>&#8226; Added BNDL as a valid bundle ID in AAX Format Specification<br/></p>
<p><b>12.60.1.5.4 Interface<br/></b></p>
<p>&#8226; <b>&#8211; </b>Added AAX_IACFTransportControl and AAX_IACFTransport_V4, with methods typically accessed<br/>through AAX_ITransport<br/></p>
<p><b>&#8211; </b>Added AAX_IACFSessionDocument, with methods typically accessed through AAX_ISessionDocument,<br/>and AAX_IACFSessionDocumentClient, with implementation usually performed via AAX_CSessionDocumentClient<br/></p>
<p><b>&#8211; </b>Added AAX_IACFDataBuffer, with methods typically accessed through AAX_IDataBuffer when the data<br/>buffer is implemented on the host<br/></p>
<p><b>12.60.1.5.5 Resolved bugs<br/></b></p>
<p>&#8226; Added return value checks for internal calls to AAX_IEffectParameters::GetNumberOfParameters and<br/>AAX_IEffectParameters::GetParameterIDFromIndex<br/></p>
<p><b>12.60.1.6 AAX SDK 2.5.1<br/></b></p>
<p><b>12.60.1.6.1 AAX Library<br/></b></p>
<p>&#8226; Updated AAX_CParameter so that the host is now automatically notified whenever AAX_CParameter::SetName()<br/>is used.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.60 Change Log 335<br/></b></p>
<p><b>12.60.1.6.2 Definitions<br/></b></p>
<p>&#8226; Added kAAX_ParameterIdentifierMaxSize to define the maximum size of a AAX_CParamID c-string.<br/></p>
<p><b>12.60.1.6.3 Interface<br/></b></p>
<p>&#8226; Added Task agent interface including the AAX_ITaskAgent module and the generic AAX_IDataBuffer refer-<br/>ence counted data container.<br/></p>
<p>&#8226; Added AAX_eNotificationEvent_ParameterNameChanged notification type. Users of AAX_CParameter do<br/>not need to post this notification directly.<br/></p>
<p><b>12.60.1.6.4 Utilities<br/></b></p>
<p>&#8226; Replaced snprintf and fixed size buffers with C++ idioms in the AAX_StringUtilities.h utility functions<br/></p>
<p><b>12.60.1.7 AAX SDK 2.5.0<br/></b></p>
<p><b>12.60.1.7.1 Definitions<br/></b></p>
<p>&#8226; Added AAX_EStemFormat definitions for surround stem formats from 5.0.2 to 9.1.6 and for Ambisonics for-<br/>mats from fourth to seventh order<br/></p>
<p><b>12.60.1.7.2 Example plug-ins<br/></b></p>
<p>&#8226; DemoGain_UpMixer has been updated with all combinations of the new stem formats<br/></p>
<p><b>12.60.1.7.3 Interface<br/></b></p>
<p>&#8226; New interfaces:<br/></p>
<p><b>&#8211; </b>AAX_IACFViewContainer_V3, with methods to track mouse movement over controls, accessed through<br/>AAX_IViewContainer<br/></p>
<p>See Host Support for host support information<br/></p>
<p><b>12.60.1.8 AAX SDK 2.4.1<br/></b></p>
<p><b>12.60.1.8.1 Build<br/></b></p>
<p>&#8226; Treat Warnings As Errors is now disabled for the AAX Library Xcode project<br/></p>
<p>&#8226; The AAX Library Xcode project is no longer configured to use the Legacy Build System, which is deprecated<br/>in current Xcode<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>336 Module Documentation<br/></b></p>
<p><b>12.60.1.9 AAX SDK 2.4.0<br/></b></p>
<p><b>12.60.1.9.1 Build<br/></b></p>
<p>&#8226; Compilation for arm64 is now supported<br/></p>
<p>&#8226; Explicitly set macOS project architectures to x86_64 and arm64<br/></p>
<p>&#8226; Updated Visual Studio project format to VS2017 and resolved newly detected warnings<br/></p>
<p>&#8226; Reduced Visual Studio warning level from EnableAllWarnigs to Level4 for the AAXLibrary project<br/></p>
<p><b>12.60.1.9.2 Definitions<br/></b></p>
<p>&#8226; Added AAX_eProperty_AlwaysBypass for plug-ins that always pass the audio signal through unaltered<br/></p>
<p>&#8226; Added AAX_eProperty_ObservesTransportState , AAX_eNotificationEvent_TransportStateChanged ,<br/>AAX_ETransportState , AAX_ERecordMode , and AAX_TransportStateInfo_V1 to provide information about<br/>the current state of the host transport<br/></p>
<p>&#8226; Added AAX_eNotificationEvent_LogState as an optional logging convenience mechanism for certain plug-ins<br/>that use the Direct Data feature<br/></p>
<p>&#8226; Extended AAX_EFrameRate to include additional frame rates. These additional rates can be queried using<br/>AAX_ITransport::GetHDTimeCodeInfo()<br/></p>
<p>&#8226; Added AAX_ERROR_PRINT_FAILURE for printing library method failures<br/></p>
<p><b>12.60.1.9.3 Documentation<br/></b></p>
<p>&#8226; Added the Real-time performance page and the Plug-In Causes Audio Streaming Errors troubleshooting sec-<br/>tion with overview of best practices for avoiding streaming errors and achieving good performance for audio<br/>processing on real-time threads<br/></p>
<p>&#8226; Updated the HDX DSP Guide page with a &quot;Getting Started&quot; section and with information about Pro Tools |<br/>Carbon<br/></p>
<p>&#8226; Corrected the documented range of acceptable values between AAX_ERROR_PLUGIN_BEGIN and<br/>AAX_ERROR_PLUGIN_END<br/></p>
<p>&#8226; Improved Doxygen dot image resolution, now using SVG<br/></p>
<p><b>12.60.1.9.4 Example plug-ins<br/></b></p>
<p>&#8226; DemoGain_UpMixer now registers non-converting combinations<br/></p>
<p><b>12.60.1.9.5 Interface<br/></b></p>
<p>&#8226; New interfaces:<br/></p>
<p><b>&#8211; </b>AAX_IACFEffectDirectData_V2, with methods accessed through AAX_IEffectDirectData<br/><b>&#8211; </b>AAX_IACFTransport_V3, with methods typically accessed through AAX_ITransport<br/></p>
<p>See Host Support for host support information<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.60 Change Log 337<br/></b></p>
<p><b>12.60.1.9.6 Resolved bugs<br/></b></p>
<p>&#8226; Fixed AAXSDK-705<br/></p>
<p><b>12.60.1.9.7 Utilities<br/></b></p>
<p>&#8226; CreatePackage.bat now removes the read-only attribute from the .aaxplugin folder on Windows<br/></p>
<p><b>12.60.1.10 AAX SDK 2.3.2<br/></b></p>
<p><b>12.60.1.10.1 AAX Library<br/></b></p>
<p>&#8226; Removed unnecessary virtual keyword usage for method overrides<br/></p>
<p>&#8226; Removed unused mClipped member of AAX_CEffectParameters<br/></p>
<p>&#8226; Convert mViewContainer member of AAX_CEffectGUI to a smart pointer<br/></p>
<p><b>12.60.1.10.2 Build<br/></b></p>
<p>&#8226; Xcode 10 and Visual Studio 2017 are now supported<br/></p>
<p>&#8226; Added Xcode workspace and Visual Studio solution containing all projects in the AAX SDK for convenience<br/></p>
<p>&#8226; Removed 32-bit architecture targets from all project configurations. 32-bit architectures are still supported by<br/>AAX if you choose to explicitly add them to your build project configurations.<br/></p>
<p>&#8226; Updated all Xcode projects to recommended CFBundleIdentifier usage and build settings<br/></p>
<p><b>12.60.1.10.3 Definitions<br/></b></p>
<p>&#8226; Added AAX_eProperty_Constraint_DoNotApplyDefaultSettings for plug-ins which need to disable the normal<br/>default settings application procedure used by Pro Tools<br/></p>
<p>&#8226; Added AAX_eNotificationEvent_PriorSettingsInvalid which may be useful for certain plug-ins when running in<br/>Venue systems<br/></p>
<p>&#8226; Added AAX_eProperty_PlugInID_NoProcessing for Effect types that do not process audio<br/></p>
<p>&#8226; Removed AAX_eProperty_SupportsProgressDialog which is not supported in any AAX host<br/></p>
<p><b>12.60.1.10.4 Documentation<br/></b></p>
<p>&#8226; Fixes and improvements in the &quot;Plug-In spec properties&quot; section of AAX_Properties.h<br/></p>
<p>&#8226; Added Quick Start and Troubleshooting documentation sections<br/></p>
<p>&#8226; Added additional detail to the Digital signature section of the Pro Tools Guide<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>338 Module Documentation<br/></b></p>
<p><b>12.60.1.10.5 Example plug-ins<br/></b></p>
<p>&#8226; Changed ID generation algorithm for DemoGain_UpMixer. Older copies of this example plug-in will not be<br/>recovered in saved sessions.<br/></p>
<p><b>12.60.1.10.6 Resolved bugs<br/></b></p>
<p>&#8226; Fixed AAXSDK-663 AAX SDK #pragma pack errors with XCode 10 and later<br/></p>
<p><b>12.60.1.11 AAX SDK 2.3.1<br/></b></p>
<p><b>12.60.1.11.1 AAX Library<br/></b></p>
<p>&#8226; Enhanced support for AAX_CheckedResult - added AAX_CAPTURE, AAX_CAPTURE_MULT, and<br/>AAX_AggregateResult to assist with common Describe error handling scenarios<br/></p>
<p>&#8226; Updated AAX_CMonolithicParameters::StaticDescribe() to use AAX_CheckedResult for error checking<br/></p>
<p>&#8226; Added AAX_CStatelessParameter for &quot;momentary&quot; parameters which do not require state, such as tap tempo<br/>buttons which can be mapped to a control surface<br/></p>
<p>&#8226; Improved tolerance for unknown parameters when building or parsing plug-in settings chunk data<br/></p>
<p>&#8226; Added AAX_DEBUGASSERT, AAX_STACKTRACE, and AAX_TRACEORSTACKTRACE to the library of<br/>tracing and assertion macros in AAX_Assert.h<br/></p>
<p>&#8226; Fixed warnings which would prevent compilation in Visual Studio 2015 and Visual Studio 2017 when Treat<br/>Warnings As Errors is enabled<br/></p>
<p>&#8226; Removed Visual Studio 2008, Visual Studio 2010, and Xcode 3 projects<br/></p>
<p><b>12.60.1.11.2 Definitions<br/></b></p>
<p>&#8226; Removed guard preventing AAX_CPP11_SUPPORT from being set for PACE Fusion compiler builds<br/></p>
<p>&#8226; Deprecated AAX_EHostMode - replaced by AAX_EHostModeBits<br/></p>
<p><b>12.60.1.11.3 Documentation<br/></b></p>
<p>&#8226; Documentation added to EQ and Dynamics Curve Displays for the EQ Curves feature in Pro Tools 2018.1<br/></p>
<p>&#8226; Added Checking Results and Describe Validation sections to Description callback<br/></p>
<p>&#8226; Added Building your plug-in installer section to Distributing Your AAX Plug-In, including information about<br/>bundling Track Presets with the plug-in installer<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.60 Change Log 339<br/></b></p>
<p><b>12.60.1.11.4 Example plug-ins<br/></b></p>
<p>&#8226; Updated all example plug-ins' Describe routines to use AAX_CheckedResult for error checking<br/>&#8226; Updated some example plug-ins' parameter registration code in EffectInit() with a safer parameter creation<br/></p>
<p>and release style using std::unique_ptr<br/>&#8226; Updated the RectiFi example plug-in to match the current shipping version of Avid's Recti-Fi plug-in<br/>&#8226; DemoGain_UpMixer now converts arbitrarily between all stem formats, both wider and narrower<br/>&#8226; Removed Visual Studio 2008, Visual Studio 2010, and Xcode 3 projects<br/>&#8226; Common Xcode settings updated with &quot;macosx10.11&quot; base SDK and &quot;10.9&quot; deployment target<br/>&#8226; Added AAX DSP for higher stem formats in DemoGain_Multichannel and DemoGain_UpMixer<br/></p>
<p><b>12.60.1.11.5 Extensions<br/></b></p>
<p>&#8226; Updated the VSTGUI extension and example plug-in to use VSTGUI 4.3<br/></p>
<p><b>12.60.1.11.6 Interface<br/></b></p>
<p>&#8226; New interfaces:<br/><b>&#8211; </b>AAX_IACFPageTable_V2, with methods accessed through AAX_IPageTable<br/><b>&#8211; </b>AAX_IACFHostServices_V3, with methods typically accessed through the macros in AAX_Assert.h<br/></p>
<p>See Host Support for host support information<br/></p>
<p><b>12.60.1.11.7 Utilities<br/></b></p>
<p>&#8226; Added reference count tracing logic to AAX_CACFUnknown.cpp, which can be toggled on using the AAX_&#8592;&#8617;<br/>DEBUG_ACF_REFCOUNT macro<br/></p>
<p>&#8226; Added some convenience functions to AAX_PageTableUtilities.h<br/>&#8226; Added getLowestSampleRateInMask() and getMaskForSampleRate() convenience functions<br/></p>
<p><b>12.60.1.12 AAX SDK 2.3.0<br/></b></p>
<p><b>12.60.1.12.1 AAX Library<br/></b></p>
<p>&#8226; Added AAX_Exception.h with the AAX::Exception namespace for AAX-specific exception objects and the<br/>AAX_CheckedResult class which can be used for throwing AAX exceptions when an error is encountered.<br/></p>
<p>&#8226; Added a try/catch block in the library implementation of AAXRegisterPlugin such that exceptions may safely<br/>be thrown during Describe<br/></p>
<p>&#8226; AAX_ICollection now provides convenience methods to access an AAX_IDescriptionHost and IACFDefinition,<br/>if these interfaces are supported by the host during Describe<br/></p>
<p>&#8226; AAX_IComponentDescriptor now provides the generic AddProcessProc() method for specifying multiple<br/>ProcessProcs at once using a property map<br/></p>
<p>&#8226; AAX_IController now provides methods for copying page table data from other effect variants or from arbitrary<br/>page table files on disk<br/></p>
<p>&#8226; AAX_IPropertyMap now supports pointer-sized properties<br/>&#8226; AAX_IPropertyMap objects can now be generated from other property map objects without requiring access<br/></p>
<p>to a component factory interface<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>340 Module Documentation<br/></b></p>
<p><b>12.60.1.12.2 Definitions<br/></b></p>
<p>&#8226; Added a new stem format definition for the 7.0.2 format<br/></p>
<p>&#8226; Removed the previous FuMa Ambisonics formats and added definitions for second-order, and third-order<br/>ACN Ambisonics stems<br/></p>
<p>&#8226; Added new notification types:<br/></p>
<p><b>&#8211; </b>AAX_eNotificationEvent_ParameterMappingChanged (plug-in to host)<br/><b>&#8211; </b>AAX_eNotificationEvent_HostModeChanged (host to plug-in)<br/></p>
<p>&#8226; C++11 keyword compatibility macros added to AAX.h<br/></p>
<p>&#8226; Removed the AAX_AlignedDouble definition, which was unused<br/></p>
<p><b>12.60.1.12.3 Documentation<br/></b></p>
<p>&#8226; New documentation:<br/></p>
<p><b>&#8211; </b>Distributing Your AAX Plug-In<br/><b>&#8211; </b>EQ and Dynamics Curve Displays<br/><b>&#8211; </b>Adding signposts to the DigiTrace log at run-time<br/><b>&#8211; </b>Plug-in preset data comparison for Media Composer<br/><b>&#8211; </b>Interactive mode for DTT<br/><b>&#8211; </b>Descriptions of Avid Dock, Avid S1 and Avid Control app in the Page Table Guide<br/></p>
<p>&#8226; There is a new process for requesting the digital signing toolkit for digitally signing AAX plug-ins<br/></p>
<p>&#8226; Added a PDF print-out of this Doxygen documentation to assist with text-based searches<br/></p>
<p>&#8226; Updated the Contacting Avid section of the main page to clarify the various processes for communicating with<br/>Avid<br/></p>
<p>&#8226; Updated AAX_Errors.h with a list of current internal AAX host error values, which are useful for reference<br/>when troubleshooting host errors.<br/></p>
<p>&#8226; Updated the HDX DSP Guide with information about using the latest version of Code Composer Studio with<br/>this AAX SDK<br/></p>
<p><b>12.60.1.12.4 Example plug-ins<br/></b></p>
<p>&#8226; Base Mac OS SDK setting in the common .xcconfig files is now macosx10.9<br/></p>
<p>&#8226; DemoGain_Multichannel now includes an example of gain reduction metering<br/></p>
<p>&#8226; DemoGain_Multichannel now supports 7.0.2 and First-order, second-order, and third-order Ambisonics stem<br/>formats<br/></p>
<p>&#8226; DemoGain_UpMixer example plug-in added to demonstrate a width-changing effect<br/></p>
<p>&#8226; The DemoMIDI_NoteOn example plug-in algorithm now supports note hold<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.60 Change Log 341<br/></b></p>
<p><b>12.60.1.12.5 Interface<br/></b></p>
<p>&#8226; New interfaces:<br/><b>&#8211; </b>AAX_IACFComponentDescriptor_V3, with methods accessed through AAX_IComponentDescriptor<br/><b>&#8211; </b>AAX_IACFDescriptionHost, with methods accessed through AAX_IDescriptionHost<br/><b>&#8211; </b>AAX_IACFEffectParameters_V4, with methods accessed through AAX_IEffectParameters<br/><b>&#8211; </b>AAX_IACFFeatureInfo, with methods accessed through AAX_IFeatureInfo<br/><b>&#8211; </b>AAX_IACFPageTable, with methods accessed through AAX_IPageTable<br/><b>&#8211; </b>AAX_IACFPageTableController, with methods accessed through AAX_IController<br/><b>&#8211; </b>AAX_IACFPropertyMap_V3, with methods accessed through AAX_IPropertyMap<br/></p>
<p>See Host Support for host support information<br/>&#8226; Added the concept of a host &quot;feature&quot; which can be queried during Describe execution using<br/></p>
<p>AAX_IDescriptionHost and AAX_IFeatureInfo<br/></p>
<p><b>12.60.1.12.6 Resolved bugs<br/></b></p>
<p>&#8226; Resolved AAXSDK-533: AAXLibrary compiles with warnings in VS2015 / VS2017<br/>&#8226; Resolved AAXSDK-514: Using collection-level properties leads to a leaked ACF object<br/>&#8226; Fixed bugs with taper delegates when the minimum and maximum values are equal<br/>&#8226; Some unnecessary headers removed or converted to forward declarations<br/></p>
<p><b>12.60.1.13 AAX SDK 2.2.2<br/></b></p>
<p><b>12.60.1.13.1 AAX Library<br/></b></p>
<p>&#8226; Added new methods to AAX_IParameter for easier conversion between logical and normalized parameter<br/>values<br/></p>
<p>&#8226; Re-named AAX_CParameterManager::ControlIndexFromID() to AAX_CParameterManager::GetParameterIndex()<br/>&#8226; Added AAX Library project for Visual Studio 2013<br/>&#8226; Added warning exclusion for C4738 to 32-bit Release configuration of the AAX Library project on Windows<br/></p>
<p>to fix a treat-warnings-as-errors build failure that can occur in this configuration when linking statically to the<br/>MSVC run-time libraries<br/></p>
<p><b>12.60.1.13.2 Definitions<br/></b></p>
<p>&#8226; Added new stem format selectors for the following stem formats:<br/><b>&#8211; </b>The 7.1.2 speaker configuration<br/><b>&#8211; </b>First-order, second-order, and third-order Ambisonics<br/></p>
<p>&#8226; Added a new notification type for information regarding the host's delay compensation state&#8592;&#8617;<br/>: AAX_eNotificationEvent_DelayCompensationState<br/></p>
<p>&#8226; Added a new input data port type property for ports which request incrementally-buffered packet delivery<br/>&#8226; Added a property to allow different AAX DSP plug-in types to share the same DSP chip even if<br/></p>
<p>AAX_eProperty_TI_MaxInstancesPerChip is declared: AAX_eProperty_TI_ForceAllowChipSharing<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>342 Module Documentation<br/></b></p>
<p><b>12.60.1.13.3 Documentation<br/></b></p>
<p>&#8226; Added specific details about display hardware to the VENUE Guide<br/></p>
<p><b>12.60.1.13.4 Example plug-ins<br/></b></p>
<p>&#8226; Added the DemoGain_Multichannel example plug-in<br/></p>
<p>&#8226; Updated page tables of all example plug-ins<br/></p>
<p>&#8226; Example plug-in Xcode projects now use C++11 and libc++ by default<br/></p>
<p>&#8226; Updated DemoDelay_Hybrid to fix problems with instantiation in DSH and other test hosts<br/></p>
<p>&#8226; Removed multi-mono support from DemoMIDI_Synth to provide a better example of a standard VI configura-<br/>tion<br/></p>
<p>&#8226; Updated Recti-Fi example plug-in IDs so that they will not collide with the shipping version of Recti-Fi<br/></p>
<p><b>12.60.1.13.5 Extensions<br/></b></p>
<p>&#8226; Updated AAX_JuceContentView::mouseMove() for compatibility with Juce version 4 and higher<br/></p>
<p>&#8226; Updated AAX_CEffectGUI_VST for compatibility with 32-bit plug-ins when used with VSTGUI 4.2<br/></p>
<p><b>12.60.1.13.6 Interface<br/></b></p>
<p>&#8226; ACF interface files updated to a more recent version of the ACF SDK<br/></p>
<p><b>12.60.1.13.7 Resolved bugs<br/></b></p>
<p>&#8226; AAX_CEffectParameters::UpdateParameterNormalizedValue() now increments the effect change counter<br/>only when the parameter's value actually changes<br/></p>
<p><b>12.60.1.13.8 Utilities<br/></b></p>
<p>&#8226; New utility functions: AAX::AsStringStemFormat(), AAX::AsStringStemChannel()<br/></p>
<p>&#8226; Added AAX_SCOPE_COMPUTE_DENORMALS() for forcing denormal float values to be calculated within a<br/>scope, rather than being treated as zero (currently implemented for Mac only)<br/></p>
<p><b>12.60.1.14 AAX SDK 2.2.1<br/></b></p>
<p><b>12.60.1.14.1 Interface<br/></b></p>
<p>&#8226; New interfaces:<br/></p>
<p><b>&#8211; </b>AAX_IACFController_V3<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.60 Change Log 343<br/></b></p>
<p><b>12.60.1.14.2 Documentation<br/></b></p>
<p>&#8226; Added the VENUE Guide page<br/>&#8226; Updated the Page Table Guide<br/></p>
<p><b>&#8211; </b>Updated VENUE information: Added information about VENUE | S6L and S3L and removed information<br/>about VENUE systems which do not support AAX plug-ins<br/></p>
<p><b>&#8211; </b>Added information for S6, including details about the 'Av46' page table type and a new section on<br/>Center Section Parameter Mapping in S6 Expand Mode<br/></p>
<p>&#8226; Updated the documentation for Plug-in type conversion, including a new section describing Type deprecation<br/>&#8226; Fixed image display problems on the DSH Guide page<br/>&#8226; Added pre-built HDX DLL files to the SDK for all example plug-ins which support AAX DSP<br/></p>
<p><b>Note<br/></b>The example plug-ins' Visual Studio projects now include a PostBuildEvent command which will<br/>copy the plug-in's HDX DLL from the project's TI/bin/Release folder to the built .aaxplugin's Resources<br/>folder.<br/></p>
<p>&#8226; Additional minor example plug-in fixes<br/><b>&#8211; </b>Removed unnecessary build phases and framework dependencies from the plug-ins' Xcode projects<br/><b>&#8211; </b>Removed &quot;%AAX&quot; from the example plug-ins' display names<br/><b>&#8211; </b>Changed the guard for AAX DSP cycle count declarations to check for the definition of the AAX_&#8592;&#8617;<br/>TI_BINARY_IN_DEVELOPMENT preprocessor symbol before adding cycle counts to the plug-in's<br/>description<br/></p>
<p><b>&#8211; </b>Added &quot;example&quot; to the names of all example plug-ins<br/></p>
<p><b>12.60.1.14.3 AAX Library<br/></b></p>
<p>&#8226; Extended AAX_CParameter::GetValueAsString() and AAX_CParameter::SetValueWithString() with support<br/>for all value types<br/></p>
<p>&#8226; Fixed the specialization of AAX_CPacket::GetPtr() for void&#8727; so that it is called when the void&#8727; version of<br/>the function template is requested<br/></p>
<p><b>12.60.1.14.4 Definitions<br/></b></p>
<p>&#8226; Added AAX_ePlugInStrings_ClipNameSuffix<br/>&#8226; Added a definition of the TI_VERSION preprocessor macro for the TI DSP compiler in AAX.h<br/></p>
<p><b>12.60.1.15 AAX SDK 2.2.0<br/></b></p>
<p><b>12.60.1.15.1 Interface<br/></b></p>
<p>&#8226; New interfaces:<br/><b>&#8211; </b>AAX_IACFEffectParameters_V3<br/><b>&#8211; </b>AAX_IACFHostProcessor_V2<br/><b>&#8211; </b>AAX_IACFHostProcessorDelegate_V3<br/><b>&#8211; </b>AAX_IACFHostServices_V2<br/><b>&#8211; </b>AAX_IACFViewContainer_V2<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>344 Module Documentation<br/></b></p>
<p><b>12.60.1.15.2 Directory changes<br/></b></p>
<p>&#8226; Moved common processing classes for the SDK example plug-ins to ExamplePlugIns/Common/Processing&#8592;&#8617;<br/>Classes<br/></p>
<p>&#8226; Moved MIDI logging utilities to the Extensions folder<br/>&#8226; Moved AAX_CMonolithicParameters to the Extensions folder and removed it from the AAX Library<br/></p>
<p><b>12.60.1.15.3 Extensions<br/></b></p>
<p>&#8226; Changed VST project to use the newest version of VSTGUI sources - VSTGUI 4.2<br/>&#8226; Created Visual Studio 2012 projects for GUI Extensions<br/>&#8226; Fixed AAX_CMonolithicParameters so that it correctly supports AAX_eConstraintLocationMask_DataModel<br/></p>
<p><b>Note<br/></b>This value is <b>required </b>for all plug-ins that share memory between their data model and algorithm call-<br/>back<br/></p>
<p>&#8226; Updated AAX_CMonolithicParameters to include parameter value synchronization<br/>&#8226; Updated AAX_CMonolithicParameters to support Hybrid and include a state counter field<br/></p>
<p><b>12.60.1.15.4 Definitions<br/></b></p>
<p>&#8226; Changed name of AAX_eProperty_StoreXMLPageTablesByType to AAX_eProperty_StoreXMLPageTablesByEffect<br/>to best reflect the actual behavior of this property<br/></p>
<p>&#8226; Replaced AAX_EPlugInCategory_Effect category (erroneously removed in AAX SDK 2.1)<br/></p>
<p><b>12.60.1.15.5 Utilities<br/></b></p>
<p>&#8226; Added utilities for atomic operations and a thread-safe FIFO queue class: AAX_CAtomicQueue<br/>&#8226; Added AAX stacktrace logging support to make plug-in debugging easier: see AAX_STACKTRACE and<br/></p>
<p>AAX_TRACEORSTACKTRACE<br/>&#8226; Added a utility for locating the .aaxplugin bundle to provide an ability to access resources in the bundle<br/></p>
<p><b>12.60.1.15.6 AAX Library<br/></b></p>
<p>&#8226; Created an AAX Library project for Visual Studio 2012<br/>&#8226; Created a libc++ target in the AAX Library Xcode project<br/>&#8226; Resolved &quot;incompatible ms_struct&quot; warning in Xcode 6; removed AAX_ALIGN_FILE_ALG from inappropriate<br/></p>
<p>locations such as virtual classes that do not cross library boundaries<br/>&#8226; Added AAX_IParameterValue, an abstract value class for parameter data, and refactored AAX_CParameter<br/></p>
<p>to use this interface<br/>&#8226; Re-named AAX_CInstrumentParameters to AAX_CMonolithicParameters (see the Extensions sec-<br/></p>
<p>tion for more information)<br/>&#8226; Added an AAX_CStateDisplayDelegate constructor taking std::vector&lt;AAX_IString&#8727;&gt;<br/>&#8226; Added an AAX_CParameter constructor taking AAX_IString as an identifier<br/>&#8226; Added hex conversion methods to AAX_CString<br/>&#8226; Fixed chunk size error handling in AAX_CChunkDataParser<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.60 Change Log 345<br/></b></p>
<p><b>12.60.1.15.7 Example plug-ins<br/></b></p>
<p>&#8226; Added DemoMIDI_Synth and DemoMIDI_Synth_AuxOutput plug-ins<br/></p>
<p>&#8226; Created Visual Studio 2012 projects for all example plug-ins<br/></p>
<p>&#8226; Added EUCON page tables for all example plug-ins<br/></p>
<p>&#8226; Various fixes for modifier-click event handling in example plug-ins<br/></p>
<p>&#8226; Updated the example plug-in projects so that all built plug-in bundle filenames include &quot;_Example&quot;<br/></p>
<p>&#8226; Corrected input/output property usage in HostProcessor example plug-ins<br/></p>
<p>&#8226; Fixed multi-channel processing in DemoDelay_HostProcessor<br/></p>
<p>&#8226; Fixed a bug with dynamic processing in DemoMIDI_NoteOn example plug-in<br/></p>
<p>&#8226; Fixed DemoGain_GUIExtensions Win32 example plug-in GUI so that it is correctly displayed in Windows 8<br/></p>
<p><b>12.60.1.15.8 Documentation<br/></b></p>
<p>&#8226; Added Media Composer Guide<br/></p>
<p>&#8226; Updated Host Support documentation for latest AAX host versions<br/></p>
<p>&#8226; Updated the Page Table Guide<br/></p>
<p><b>&#8211; </b>Updated EUCON Page Tables documentation<br/><b>&#8211; </b>Updated Avid Center Section Page Tables documentation with tables mapping the EQ, Comp/Lim, and<br/></p>
<p>Exp/Gate table indices to their respective functions<br/></p>
<p>&#8226; Updated MIDI node documentation<br/></p>
<p>&#8226; Added new documentation pages for Parameter update timing and Parameter automation<br/></p>
<p>&#8226; Improved Presets and settings management documentation<br/></p>
<p>&#8226; Documented the plug-in caching behavior in Pro Tools<br/></p>
<p>&#8226; Added documentation for optimizing an AAX DSP plug-in by using a hard-coded buffer size in the algorithm<br/>callback/ See the Refactoring conditionals and branches section of the HDX DSP Guide<br/></p>
<p><b>12.60.1.16 AAX SDK 2.1.1<br/></b></p>
<p><b>12.60.1.16.1 Definitions<br/></b></p>
<p>&#8226; Explicitly removed support for the SDK's C99Compatibility headers in Microsoft Visual C++ 10.0 and later<br/></p>
<p><b>12.60.1.16.2 DSP<br/></b></p>
<p>&#8226; Added support and documentation for compiling AAX DSP plug-ins using Code Composer Studio 5<br/></p>
<p>&#8226; Updated all example plug-in projects for use with Code Composer Studio 5<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>346 Module Documentation<br/></b></p>
<p><b>12.60.1.16.3 Documentation<br/></b></p>
<p>&#8226; Extended the parameter update documentation pages with sequence diagrams and further information about<br/>linked parameter behavior<br/></p>
<p>&#8226; Added guides for DigiTrace and DSH<br/></p>
<p>&#8226; Added a reference list of AAX interfaces<br/></p>
<p><b>12.60.1.17 AAX SDK 2.1.0<br/></b></p>
<p><b>12.60.1.17.1 Interface<br/></b></p>
<p>&#8226; New method added to AAX_IACFTransport_V2 : IsMetronomeEnabled()<br/></p>
<p><b>12.60.1.17.2 AAX Library<br/></b></p>
<p>&#8226; New methods in AAX_CString for direct copy from, assignment to, and comparison with std::string<br/></p>
<p>&#8226; Fixed many implicit sign conversions<br/></p>
<p>&#8226; Added const qualification to some AAX_C... methods<br/></p>
<p>&#8226; Updated AAX_IParameter::GetValueAsString() to take a pointer-to AAX_IString (was lvalue ref)<br/></p>
<p>&#8226; Fixed a bug in AAX_CEffectParameters::GetParameterNameOfLength(); the method now correctly truncates<br/>a parameter name if the requested length is shorter than the shortest available abbreviated name<br/></p>
<p>&#8226; Treat Warnings As Errors enabled in AAX Library projects<br/></p>
<p>&#8226; clang pragmas added to avoid warnings for non-virtual destructors in ACF interface classes (cf. Microsoft<br/>COM)<br/></p>
<p>&#8226; Xcode 3 project added for the AAX Library<br/></p>
<p><b>12.60.1.17.3 Definitions<br/></b></p>
<p>&#8226; Alignment of AAX_CMidiPacket and AAX_CMidiStream on 32-bit macOS is now explicitly set using #pragma<br/>options align=power to maintain backwards-compatibility with earlier versions of Pro Tools<br/></p>
<p>&#8226; New property added: AAX_eProperty_RequiresChunkCallsOnMainThread<br/></p>
<p>&#8226; New property added: AAX_eProperty_Constraint_AlwaysProcess<br/></p>
<p>&#8226; Converted AAX_eProperty_Related_Plugin_List (property #22) to dedicated DSP and Native<br/>versions<br/></p>
<p>&#8226; Re-named AAX_eProperty_AudioBufferLength to AAX_eProperty_DSP_AudioBufferLength<br/></p>
<p>&#8226; Added new AAX_ECurveType selector: AAX_eCurveType_Reduction<br/></p>
<p>&#8226; Added various new selectors to AAX_ENotificationEvent<br/></p>
<p>&#8226; Updated AAX_STEM_FORMAT macros to allow negative index values<br/></p>
<p>&#8226; Added new error codes to AAX_EError<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.60 Change Log 347<br/></b></p>
<p><b>12.60.1.17.4 Utilities<br/></b></p>
<p>&#8226; New utility functions: AAX::IsAvidNotification(), AAX_IsASCII(), AAX_AsStringFour&#8592;&#8617;<br/>Char()<br/></p>
<p>&#8226; AAX_ASSERT and AAX_TRACE now require a trailing semicolon<br/></p>
<p>&#8226; Re-named LIMIT to AAX_LIMIT<br/></p>
<p>&#8226; Removed unused extended-80 conversion utilities<br/></p>
<p><b>12.60.1.17.5 Extensions<br/></b></p>
<p>&#8226; Resolved issue in which VSTGUI v4 key events were not received on Windows<br/></p>
<p>&#8226; Xcode 3 projects added for the Juce and VSTGUI extension libraries<br/></p>
<p><b>12.60.1.17.6 Documentation<br/></b></p>
<p>&#8226; .pdf documentation moved to Doxygen<br/></p>
<p>&#8226; Added several new sample plug-ins<br/></p>
<p>&#8226; Expanded documentation for Host Processor and AAX Hybrid<br/></p>
<p><b>12.60.1.18 AAX SDK 2.0.1<br/></b></p>
<p><b>12.60.1.19 AAX SDK 2.0.0<br/></b></p>
<p><b>12.60.1.19.1 AAX Library<br/></b></p>
<p>&#8226; Added support for the AAX Hybrid processing architecture<br/></p>
<p>&#8226; Added methods for better access to global MIDI data from AAX_IEffectParameters<br/></p>
<p>&#8226; Extended the AAX_ITransport interface with several new methods<br/></p>
<p>&#8226; Host Processor plug-ins can now trigger an analysis pass programmatically<br/></p>
<p><b>12.60.1.19.2 Definitions<br/></b></p>
<p>&#8226; Added new selectors to AAX_ENotificationEvent for state information during AudioSuite, bounce, and restore<br/>events<br/></p>
<p>&#8226; AudioSuite reverb and delay plug-ins may opt out of the &quot;Reverse&quot; processing mode<br/></p>
<p><b>12.60.1.19.3 Algorithm<br/></b></p>
<p>&#8226; Support for temporary algorithm data blocks<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>348 Module Documentation<br/></b></p>
<p><b>12.60.1.20 AAX SDK 1.5.0<br/></b></p>
<p><b>12.60.1.20.1 AAX Library<br/></b></p>
<p>&#8226; Plug-ins now receive a different notification when receiving chunks from session and preset loads<br/></p>
<p>&#8226; Aux output stems now support up to 256 output channels<br/></p>
<p>&#8226; Added alpha versions of V2 interfaces<br/></p>
<p>&#8226; Added projects for Visual Studio 2005 and 2008<br/></p>
<p><b>12.60.1.21 AAX SDK 1.0.6<br/></b></p>
<p><b>12.60.1.21.1 Documentation<br/></b></p>
<p>&#8226; 64-bit targets enabled for the AAX Library and sample plug-ins<br/></p>
<p><b>12.60.1.21.2 AAX Library<br/></b></p>
<p>&#8226; Changed scope of some methods in AAX_CEffectParameters and AAX_CEffectGUI<br/></p>
<p>&#8226; New 8 byte structure alignment added to AAX.h<br/></p>
<p>&#8226; Changed the scope of some chunk parser items<br/></p>
<p>&#8226; Clock context field is set to be synchronized across multiple plug-in instances<br/></p>
<p>&#8226; Support for multiple input MIDI nodes<br/></p>
<p>&#8226; Support for multiple named Aux Outputs (AAX_CInstrumentParameters)<br/></p>
<p>&#8226; Instrument parameters no longer uses host generated GUI by default<br/></p>
<p><b>12.60.1.21.3 DSP<br/></b></p>
<p>&#8226; Algorithm initialization routine now has 5 seconds to execute<br/></p>
<p><b>12.60.1.22 AAX SDK 1.0.5<br/></b></p>
<p><b>12.60.1.22.1 Directory Changes<br/></b></p>
<p>&#8226; Removed 3 files in /ExamplePlugIns/Common<br/></p>
<p>&#8226; Added AAX_UtilsNative.h and AAX_Version.h<br/></p>
<p>&#8226; Moved AAXLog(), AAXLogf(), and isParameterIDEqual() to AAX_UtilsNative.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.60 Change Log 349<br/></b></p>
<p><b>12.60.1.22.2 Documentation<br/></b></p>
<p>&#8226; Fixed instance tracking bugs in DemoGain_BackGround<br/></p>
<p>&#8226; Added a time-stamp parameter to DemoMIDI_NoteOn<br/></p>
<p>&#8226; Added MIDI-through to DemoMIDI_NoteOn<br/></p>
<p>&#8226; Added DemoGain_DMA sample plug-in<br/></p>
<p><b>12.60.1.22.3 AAX Library<br/></b></p>
<p>&#8226; Changed scope of some methods in AAX_CEffectParameters<br/></p>
<p>&#8226; Set default number of steps in AAX_CParameter.h to non-zero<br/></p>
<p>&#8226; Renamed enum AAX_EConstraintLocation to AAX_EConstraintLocationMask<br/></p>
<p><b>12.60.1.22.4 DSP<br/></b></p>
<p>&#8226; Larger buffer size allowed on TI<br/></p>
<p>&#8226; Support for DLL chip affinity in Pro Tools 10.2 and higher<br/></p>
<p>&#8226; New AAX_INT_LO and AAX_INT_HI utilities defined<br/></p>
<p><b>12.60.1.23 AAX SDK 1.0.4<br/></b></p>
<p><b>12.60.1.23.1 Describe<br/></b></p>
<p>&#8226; Multi-mono support constraint property added<br/></p>
<p><b>&#8211; </b>Will be supported in DAE versions 10.2 and higher<br/></p>
<p><b>12.60.1.23.2 AAX Library<br/></b></p>
<p>&#8226; AAX_CInstrumentParameters class added as helper for monolithic instruments<br/></p>
<p>&#8226; AAX_CTimestamp type changed to signed 64-bit integer<br/></p>
<p>&#8226; Maximum string length support added to binary display delegate<br/></p>
<p><b>12.60.1.23.3 Documentation<br/></b></p>
<p>&#8226; Resolved several DemoGain_GUIExtensions example plug-in bugs and improved parity with expected Pro<br/>Tools plug-in GUI features<br/></p>
<p>&#8226; Added DemoMIDI_Sampler example plug-in<br/></p>
<p>&#8226; Added /TI/SignalProcessing directory with example signal processing utilities<br/></p>
<p>&#8226; Added new &quot;AAX for Pro Tools&quot; document (still in progress)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>350 Module Documentation<br/></b></p>
<p><b>12.60.1.24 AAX SDK 1.0.3<br/></b></p>
<p><b>12.60.1.24.1 Describe<br/></b></p>
<p>&#8226; Added &quot;deprecated type&quot; feature for swapping in new Effect types<br/></p>
<p>&#8226; Removed AAX_eProperty_TI_UncachedCycleCount<br/></p>
<p>&#8226; Removed AAX_eProperty_UseSmallPreviewBuffer, as this property is now mandatory<br/></p>
<p><b>12.60.1.24.2 Algorithm<br/></b></p>
<p>&#8226; Established 1024 as the maximum expected audio buffer length for any AAX plug-in<br/></p>
<p>&#8226; Created new instance initialization action flag for instance reset events<br/></p>
<p><b>12.60.1.24.3 AAX Library<br/></b></p>
<p>&#8226; Fixed reference-counting bug in AAXRegisterPlugin()<br/></p>
<p><b>12.60.1.24.4 DSP<br/></b></p>
<p>&#8226; Extra software pipeline information added to CCS asm output by default<br/></p>
<p>&#8226; External memory support added to default CommonPlugIn_LinkerCmd.cmd file<br/></p>
<p><b>&#8211; </b>ExtendedPlugIn_LinkerCmd.cmd is now deprecated<br/></p>
<p><b>12.60.1.24.5 Utilities<br/></b></p>
<p>&#8226; DigiTrace facility for AAX_Assert changed from DTF_TIPLUGINS to DTF_AAXPLUGINS<br/></p>
<p>&#8226; Added example DTT script for signal cancellation testing to Development builds<br/></p>
<p>&#8226; Added DSP information tooltip feature to plug-in window header in Pro Tools<br/></p>
<p><b>12.60.1.24.6 Documentation<br/></b></p>
<p>&#8226; Win32 GUI example plug-in added to the SDK<br/></p>
<p>&#8226; Basic coefficient smoothing example plug-in added to SDK<br/></p>
<p>&#8226; Side Chain and Auxiliary Output Stem information page added to Doxygen<br/></p>
<p>&#8226; Resolved SetControlHighlightInfo() naming inconsistency in sample plug-ins<br/></p>
<p>&#8226; Expanded GUI information in AAX Manual<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.61 Example Plug-Ins 351<br/></b></p>
<p><b>12.60.1.25 AAX SDK 1.0.2<br/></b></p>
<p><b>12.60.1.25.1 AAX Library<br/></b></p>
<p>&#8226; Moved AAX Library source to /Libs directory<br/></p>
<p>&#8226; Added complete library source code and project files<br/></p>
<p>&#8226; Removed pre-compiled AAX library binaries<br/></p>
<p><b>12.60.1.25.2 Documentation<br/></b></p>
<p>&#8226; Added correct mouse event handling logic to DemoGain_GUIExtensions plug-ins<br/></p>
<p>&#8226; Added meters to DemoGain_Cocoa<br/></p>
<p>&#8226; New TI optimization case studies added to the TI Guide document<br/></p>
<p><b>12.60.1.25.3 Resolved bugs<br/></b></p>
<p>&#8226; PTSW-149745<br/></p>
<p><b>&#8211; </b>Loading code into external DSP memory is functional as of TI Shell build 10.1x828<br/></p>
<p>Collaboration diagram for Change Log:<br/></p>
<p><b>12.61 Example Plug-Ins<br/></b></p>
<p>Descriptions of the SDK's example plug-ins.<br/></p>
<p><b>12.61.1 SDK Example plug-ins<br/></b></p>
<p>This SDK includes the following example plug-ins. These plug-ins are designed to demonstrate good AAX plug-in<br/>design with varying levels of complexity.<br/></p>
<p>In general, the SDK includes one basic version of each example plug-in, as well as multiple variations on this basic<br/>version. Each of these variations demonstrates a particular feature or design approach. To see the specific changes<br/>that were made to implement a feature, compare the example plug-in variant that demonstrates the feature to the<br/>basic version of the plug-in.<br/></p>
<p>Aside from the GUI Extension examples, which are designed to work with third-party GUI frameworks, each sample<br/>plug-in should successfully compile &quot;out of the box&quot;. However, you may receive compilation errors during the plug-<br/>ins' post-build copy step due to the fact that compiled TI DLLs are not included with this SDK.<br/></p>
<p><b>12.61.1.1 Basic examples<br/></b></p>
<p>These plug-ins provide complete working examples of AAX plug-ins without a lot of extra features. Use these<br/>plug-ins as a starting point for understanding AAX.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>352 Module Documentation<br/></b></p>
<p><b>12.61.1.1.1 DemoGain </b>DemoGain is the simplest example plug-in, incorporating a mono algorithm with gain<br/>and bypass parameters.<br/></p>
<p><b>12.61.1.1.2 DemoDist </b>DemoDist demonstrates some more sophisticated techniques such as coefficient calcu-<br/>lation and packaging, private data allocation, and multiple stem format support. DemoDist also demonstrates some<br/>basic optimization strategies for improving real-time algorithmic performance.<br/></p>
<p><b>12.61.1.1.3 DemoDelay </b>DemoDelay implements a basic delay algorithm. The variants of this example demon-<br/>strate a variety of alternative processing features provided by AAX.<br/></p>
<p><b>12.61.1.1.4 DemoMIDI_NoteOn </b>DemoMIDI_NoteOn implements basic MIDI input and output functionality. The<br/>example demonstrates a simple MIDI processing loop that either copies MIDI input to MIDI output or holds Note<br/>On events depending on a Hold parameter. The example also detects Note On events. To visually indicate these<br/>events, the plugin will output DC offset while a note is held. This offset is not audible but will appear in the Pro Tools<br/>track and can be used to verify the timing of the Note On and Note Off events. The example also shows how to<br/>handle MIDI packages in the Data Model by overriding the AAX_CEffectParameters::UpdateMIDINodes() method.<br/></p>
<p><b>12.61.1.1.5 RectiFi </b>This is a fully ported version of the Recti-Fi plug-in from Avid's D-Fi suite. For more informa-<br/>tion about Recti-Fi, see http://www.avid.com/plugins/d-fi<br/></p>
<p><b>Note<br/></b>The SDK's Recti-Fi example plug-in is currently out of date and does not accurately represent Avid's shipping<br/>Recti-Fi plug-in.<br/></p>
<p><b>12.61.1.2 Feature examples<br/></b></p>
<p>Each of these plug-ins is a slight variation on one of the Basic examples. Each feature example plug-in demon-<br/>strates a specific feature or a possible alternative design approach for the plug-in. Compare these plug-ins with the<br/>corresponding basic example plug-in when you want to understand how a feature or design should be applied to<br/>your own AAX plug-ins.<br/></p>
<p><b>12.61.1.2.1 DemoGain_GUIExtensions </b>These examples demonstrate the use of various native and third-party<br/>GUI frameworks with AAX. The examples that use third-party frameworks are configured to link to static libraries<br/>that combine the SDK's GUI Extensions (located in /Extensions/GUI) and the applicable third-party GUI framework.<br/>These libraries are not included in the SDK, and you will need to install the applicable framework SDK before it will<br/>be possible to compile these example plug-ins.<br/></p>
<p><b>Note<br/></b>See bug AAXSDK-599<br/></p>
<p><b>12.61.1.2.2 DemoGain_LinkedParameters </b>This example demonstrates parameter linking. The plug-in is a<br/>stereo version of DemoGain, with options to link the left and right channels in two different modes.<br/></p>
<p><b>12.61.1.2.3 DemoGain_Smoothed </b>This example demonstrates efficient algorithmic coefficient smoothing using<br/>a slight variation on the basic DemoGain plug-in algorithm.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.61 Example Plug-Ins 353<br/></b></p>
<p><b>12.61.1.2.4 DemoGain_Background </b>This example demonstrates a background routine for algorithm process-<br/>ing. This example also uses the AAX direct data interface for communicating algorithmic delay to the plug-in's<br/>controller.<br/></p>
<p><b>12.61.1.2.5 DemoGain_DMA </b>This example includes two Effects that demonstrate use of the Scatter/Gather and<br/>Burst DMA facilities in AAX.<br/></p>
<p><b>12.61.1.2.6 DemoGain_Multichannel </b>This example demonstrates a multichannel plug-in configuration support-<br/>ing all available point source stem formats.<br/></p>
<p>This plug-in also includes a simple example of gain-reduction metering, which can be used to test host features<br/>which use this data such as the gain reduction meters in Pro Tools.<br/></p>
<p><b>12.61.1.2.7 DemoGain_UpMixer </b>This example demonstrates conversion between different stem formats<br/></p>
<p><b>12.61.1.2.8 DemoGain_ParamValueInfo </b>This example demonstrates an implementation of the GetParameterValueInfo()<br/>method, which is used to properly display certain parameter details on attached control surfaces. See<br/>Avid Center Section Page Tables in the Page Table Guide.<br/></p>
<p><b>12.61.1.2.9 DemoDist_GenCoef </b>This example demonstrates an alternative approach to parameter update han-<br/>dling. It bypasses the packet dispatcher helper class and directly overrides UpdateParameterNormalizedValue() and<br/>GenerateCoefficients(). This approach may be appropriate for plug-ins that involve complex mapping between pa-<br/>rameter updates, coefficient generation algorithms, and coefficient data packets.<br/></p>
<p><b>12.61.1.2.10 DemoDelay_HostProcessor </b>This example includes two Effects that demonstrate the optional<br/>Offline processing interface for advanced offline processing features. One Effect implements a simple offline de-<br/>lay line, while the other Effect implements the same delay line but compensates for its delay when rendering to the<br/>timeline. This demonstrates how to manually compensate for inherent algorithmic delay in an offline processor.<br/></p>
<p><b>Note<br/></b>The output of offline plug-ins that do not use the Offline processing interface will be automatically adjusted<br/>by the host host to account for any declared latency. The manual compensation technique demonstrated by<br/>DemoDelay_HostProcessor is <b>only </b>necessary in plug-ins that implement the Offline processing interface, e.g.<br/>plug-ins that require nonlinear offline processing features.<br/></p>
<p><b>12.61.1.2.11 DemoDelay_Hybrid </b>This example demonstrates the optional Hybrid Processing architecture ar-<br/>chitecture for AAX plug-ins. This plug-in implements a short delay line that is rendered in the high-latency hybrid<br/>context. It can be built and run for either AAX Native or AAX DSP.<br/></p>
<p><b>12.61.1.2.12 DemoDelay_DynamicLatencyComp </b>This example demonstrates how to properly handle algorith-<br/>mic latency changes at run-time. It uses a delay line to emulate a latency-inducing algorithm with varying latency<br/>based on the delay parameter setting. When the plug-in's latency compensation feature is enabled it declares this<br/>latency to the host.<br/></p>
<p><b>Host Compatibility Notes </b>The DemoDelay_DynamicLatencyComp example is compatible with Pro Tools 11.1 and<br/>higher.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>354 Module Documentation<br/></b></p>
<p><b>12.61.1.2.13 DemoMIDI_Synth </b>A basic synthesizer plug-in demonstrating use of an external object to manage<br/>the plug-in's state. AAX Native plug-ins that are designed to work with a cross-format framework may use a similar<br/>design. This plug-in uses AAX_CMonolithicParameters and therefore is AAX Native only.<br/></p>
<p><b>12.61.1.2.14 DemoMIDI_Synth_AuxOutput </b>A variation on DemoMIDI_Synth demonstrating the Auxiliary Output Stems<br/>feature. This instrument plug-in supports four independently-routable synthesizer objects.<br/></p>
<p><b>12.61.1.2.15 DemoMIDI_Sampler </b>This simple &quot;drum machine&quot; style sampler plug-in demonstrates sample-<br/>accurate global and local MIDI input and the MIDI Transport interface. This plug-in uses AAX_CMonolithicParameters<br/>and therefore is AAX Native only.<br/></p>
<p><b>12.61.1.2.16 DemoMIDI_Transpose </b>A basic MIDI effect that transposes incoming notes. The example im-<br/>plements audio passthrough, switchable MIDI passthrough and MIDI bypass. Moreover, the plugin overrides<br/>GenerateCoefficients() to generate coefficients as a single data structure and it also overrides ResetFieldData()<br/>to customise the inital values of private data fields.<br/></p>
<p><b>12.61.1.3 Deprecated Examples<br/></b></p>
<p><b>12.61.1.3.1 DemoGain_Delay<br/></b></p>
<p><b>Deprecated </b>The DemoGain_Delay example is deprecated. See DemoDelay_HostProcessor<br/></p>
<p>Collaboration diagram for Example Plug-Ins:<br/></p>
<p><b>12.62 VENUE Guide<br/></b></p>
<p>Details about using AAX plug-ins in VENUE live sound systems.<br/></p>
<p><b>12.62.1 Contents<br/></b></p>
<p>&#8226; About this document<br/></p>
<p>&#8226; Overview of VENUE<br/></p>
<p>&#8226; VENUE systems<br/></p>
<p>&#8226; Host environment<br/></p>
<p>&#8226; AAX feature support and compatibility<br/></p>
<p>&#8226; VENUE Plug-in installer specification<br/></p>
<p>&#8226; Additional plug-in guidelines<br/></p>
<p>&#8226; System details<br/></p>
<p>&#8226; Additional Information<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.62 VENUE Guide 355<br/></b></p>
<p><b>12.62.2 About this document<br/></b></p>
<p>This guide discusses specific details related to creating AAX plug-ins which are compatible with Avid VENUE sys-<br/>tems.<br/></p>
<p>This guide includes a general overview of the new VENUE architecture as it pertains to plug-ins, a set of guidelines<br/>for developing compatible plug-ins, and details for creating full-featured plug-in installers for VENUE.<br/></p>
<p><b>Note<br/></b>Any reference in this document to &quot;VENUE&quot; refers specifically to VENUE | S6L, and VENUE | S3L systems.<br/>Older VENUE systems such as VENUE Profile, D-Show, and SC48 are not compatible with AAX plug-ins and<br/>are not considered in this document.<br/></p>
<p><b>12.62.3 Overview of VENUE<br/></b></p>
<p>VENUE is Avid's product line aimed at live sound users. VENUE systems are modular, with audio engine, control<br/>surface, console, I/O, and external GUI units.<br/></p>
<p>VENUE offers plug-in racks to utilize the power of AAX DSP plug-ins. As virtual outboard racks inside the VENUE<br/>system, the plug-in racks allow users to take their AAX DSP plug-ins out of the studio and into a live performance.<br/></p>
<p>Figure 1: The main VENUE software interface<br/></p>
<p>Figure 2: VENUE plug-in rack<br/></p>
<p>Using the VENUE GUI, an operator is able to see thumbnails for each of the plug-ins in a plug-in rack. An operator<br/>can choose to zoom in on a plug-in from this rack view and, from there, graphically control the plug-in with the<br/>mouse, keyboard, or touch-screen. Only one plug-in interface can be displayed at a time in this mode.<br/></p>
<p>Figure 3: Plug-in zoom view<br/></p>
<p><b>12.62.4 VENUE systems<br/></b></p>
<p>This section will provide a brief overview of Avid's AAX-compatible VENUE systems. For more information about<br/>the features, functionality, and use of these systems see the VENUE user documentation.<br/></p>
<p><b>12.62.4.1 VENUE </b>| <b>S6L<br/></b></p>
<p>VENUE | S6L is a modular system designed to take on the world's most demanding tours and events with ease.<br/>Offering unprecedented processing capabilities - with over 300 processing channels - S6L delivers unrelenting<br/>performance and reliability through its advanced engine design and backs it up with modern touchscreen workflows<br/>and scalability to meet any challenge.<br/></p>
<p>The S6L engine contains dedicated HDX-powered DSPs handling all plug-in processing and supports 64-bit AAX<br/>DSP plug-ins.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>356 Module Documentation<br/></b></p>
<p><b>12.62.4.2 VENUE </b>| <b>S3L-X<br/></b></p>
<p>The VENUE | S3L-X System is a modular live sound solution including an HDX-powered processing engine, scal-<br/>able remote I/O, and a EUCON-enabled control surface.<br/></p>
<p>At the heart of the S3L system lies the E3 engine. The E3 runs Windows Embedded and a version of VENUE<br/>software that can load AAX DSP plug-ins onto a built-in HDX platform. Accompanying the E3 engine is the S3<br/>control surface and one or more Stage 16 remote I/O boxes.<br/></p>
<p>Most system parameters, including plug-ins, can be controlled using either the on-screen VENUE software or di-<br/>rectly via encoders on the S3 control surface. When being used as part of a VENUE | S3L-X system, the S3 control<br/>surface is divided into three main sections: A - Channel Section The Channel section provides control of Input<br/>Channels, FX Returns, Output Channels, some channel parameters (such as Input Channel Gain and Aux Send<br/>levels), and channel banking. Channels are selected using the channel Select switches next to each fader.<br/></p>
<p>B - Channel Control The eight Channel Control encoders provide control of processing functions for the currently<br/>selected Input or Output Channel. Inserted Dynamics and EQ plug-ins can be selected and adjusted in Channel<br/>Control.<br/></p>
<p>C - Global Control The eight Global Control encoders provide control of system-wide parameters, including control<br/>of plug-ins. The Global Control encoders can be placed into Insert Mode, and can then be used to select and adjust<br/>any plug-ins.<br/></p>
<p>Figure 4: Main control sections on the S3 control surface<br/></p>
<p><b>12.62.4.2.1 Using Channel Control </b>If a channel has an EQ, Comp/Lim, or Expander/Gate plug-in inserted on it,<br/>it can be controlled using the eight Channel Control encoders. The user can toggle between controlling the built-in<br/>Dynamics or EQ processors and the plug-in versions.<br/></p>
<p>Each Input and Output Channel has built-in EQ and Comp/Lim processors. Each Input Channel also has a built-<br/>in Expander/Gate. To adjust the built-in processors, the user selects a channel, assigns a processing function to<br/>Channel Control by pressing the corresponding encoder from the Channel Control main menu, then adjusts the<br/>available parameters.<br/></p>
<p>Figure 5: The Channel Control main menu<br/></p>
<p>See Center Section Parameter Mapping on VENUE | S3L-X for a description of how plug-in parameters are mapped<br/>to the S3L Channel Control encoders for EQ, Compressor/Limiter, and Expander/Gate plug-ins.<br/></p>
<p><b>12.62.5 Host environment<br/></b></p>
<p><b>12.62.5.1 Audio engine<br/></b></p>
<p>The audio engine in VENUE is based around Avid's HDX technology. Each VENUE S6L and S3L System contains<br/>a specialized HDX core card. For more information about HDX, see the HDX DSP Guide. Because the VENUE<br/>architecture is so similar to HDX, AAX DSP plug-ins are cross-compatible with VENUE and most plug-ins will run<br/>seamlessly on VENUE with little or no modification.<br/></p>
<p>Each VENUE system operates at a single native sample rate. VENUE supports multiple processing block sizes at<br/>this sample rate. Like in Pro Tools | HDX systems, each DSP chip in the system will only be able to load plug-ins<br/>using a single block size; plug-ins which process using different block sizes cannot be allocated to the same DSP.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.62 VENUE Guide 357<br/></b></p>
<p><b>12.62.5.2 Available DSP resources<br/></b></p>
<p>The following information reflects plug-in processing abilities of VENUE systems:<br/></p>
<p>&#8226; S3L-X<br/><b>&#8211; </b>4 TI C6727 DSP chips are available for plug-in processing<br/><b>&#8211; </b>40 plug-in rack slots are available<br/></p>
<p>&#8226; S6L<br/><b>&#8211; </b>All HDX DSP cards are dedicated to plug-in processing; each HDX DSP card has 18 TI C6727 DSP<br/></p>
<p>Chips<br/><b>&#8211; </b>Depending on E6L engine type, 125 (E6L-144) or 200 (E6L-192) plug-in rack slots are available<br/></p>
<p><b>12.62.5.3 Operating system<br/></b></p>
<p>The core host software in a VENUE system is built upon Windows Embedded 8. The installation used on VENUE<br/>systems is a customized version of Windows 8 that includes only what is necessary for the VENUE software.<br/></p>
<p>Core services from Windows 8 are available, such as the Win32 API, but some advanced services may not be<br/>available. Such services include MIDI, printing, video codec, .NET, etc. If your code relies on advanced Win32<br/>APIs, or you are in doubt about specific APIs, please contact Avid for more information.<br/></p>
<p>Using unavailable services may cause a plug-in to not load (e.g. if it attempts to link against DLLs that aren't included<br/>in the Windows Embedded 8 image) or to fail during run-time. Whenever possible, before using any advanced Win32<br/>API, you should verify the availability of the service and/or handle the fact that the service might not be functional.<br/></p>
<p>See the VENUE Plug-in installer specification section for more information about ensuring that all required run-time<br/>components are available to your plug-in.<br/></p>
<p><b>12.62.5.4 Display<br/></b></p>
<p>VENUE S6L requires that plug-in windows be restricted to a certain size. If a plug-in exceeds this size, it will overlap<br/>VENUE's GUI and may possibly be truncated. The specifications are as follows:<br/></p>
<p>&#8226; S3L-X<br/><b>&#8211; </b>Total GUI size: 1024 W x 768 H<br/><b>&#8211; </b>Max plug-in window size (w/o sidechain support): 749 W x 617 H<br/><b>&#8211; </b>Max plug-in window size (with sidechain support): 749 W x 565 H<br/></p>
<p>&#8226; S6L<br/><b>&#8211; </b>Total GUI size: 1920 W x 1080 H<br/><b>&#8211; </b>Max plug-in window size (w/o sidechain support): 1436 W x 855 H<br/><b>&#8211; </b>Max plug-in window size (with sidechain support): 1436 W x 796 H<br/></p>
<p>VENUE will dispatch a AAX_eNotificationEvent_MaxViewSizeChanged notification indicating the maximum size for<br/>a plug-in's GUI. Calls to AAX_IViewContainer::SetViewSize() will fail with an error if the plug-in attempts to set its<br/>view size to a larger value than the system supports, though the plug-in's initial GUI will be displayed (and possibly<br/>truncated) at its normal size before any resize requests are made.<br/></p>
<p>The actual hardware and graphical acceleration available in VENUE systems is as follows:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>358 Module Documentation<br/></b></p>
<p><b>S3L-X S6L<br/>CPU model </b>Celeron P4500 Core i5-2510E<br/><b>GPU model </b>Intel HD Graphics Intel HD Graphics 3000<br/><b>DirectX support </b>10.1 10.1<br/><b>OpenGL support </b>2.1 3.1<br/><b>OpenCL support </b>None None<br/><b>Shader model </b>4 4.1<br/></p>
<p><b>12.62.5.5 Page tables<br/></b></p>
<p>&#8226; VENUE S3L-X uses 'PcTL' (ProControl) page tables<br/></p>
<p>&#8226; VENUE S6L uses 'Av46', a EUCON-style page table with a 4x6 knob cell configuration.<br/></p>
<p><b>Note<br/></b>In S6L, the 'FrTL' (C|24) page table is used as a fallback when 4x6 is not available. This is only a temporary<br/>solution to support legacy plug-ins. All plug-ins targeting VENUE S6L support must support the 4x6 knob cell<br/>layout and should not rely on this C|24 fallback behavior.<br/></p>
<p>Page table design guidelines Primary plug-in parameters should be located on the first page in the page tables for<br/>a surface. This is especially true for the 4x6 knob cell layout used by S6L. Users should not be required to navigate<br/>between pages for the majority of common operations.<br/></p>
<p>For more information about page tables, including additional guidelines for good page table design, see the<br/>Page Table Guide.<br/></p>
<p><b>12.62.5.6 Network communications<br/></b></p>
<p>Some plug-ins may require interaction with other devices in a network. VENUE systems have two Gigabit Ethernet<br/>ports available:<br/></p>
<p>1. <b>ECx port </b>Intended for connection of VNC Viewer to control the VENUE system remotely. The IP address and<br/>network mask for this port are user-configurable in the VENUE UI.<br/></p>
<p>2. <b>AVB port </b>Intended for connection of all other VENUE system components, as well as a computer running Pro<br/>Tools software. This port always uses link-local addressing. Because of AVB traffic, the effective bandwidth<br/>of this port is limited to 100 Mb/s.<br/><b>Note<br/></b></p>
<p>Plug-ins must not use a significant portion of the available bandwidth on the AVB port, since it will affect<br/>mission-critical control connections of a VENUE system.<br/></p>
<p>Both S3L-X and S6L systems include the Apple Bonjour service. Plug-ins may use Bonjour for interfacing with other<br/>software in the network. Plug-ins must not install their own version of Bonjour or attempt to modify the Bonjour<br/>installation on the system.<br/></p>
<p><b>12.62.5.7 Host environment summary<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.62 VENUE Guide 359<br/></b></p>
<p><b>S3L-X S6L<br/>Operating System </b>Windows Embedded 8 Windows Embedded 8<br/><b>Sample Rate </b>48 kHz 96 kHz<br/><b>Max GUI size </b>749 W x 617 H (no sidechain)<br/></p>
<p>749 W x 565 H (sidechain)<br/>1436 W x 855 H (no sidechain)<br/>1436 W x 796 H (sidechain)<br/></p>
<p><b>Page table </b>'PcTL' 'Av46'<br/></p>
<p><b>12.62.6 AAX feature support and compatibility<br/></b></p>
<p>VENUE supports many of the same AAX features as Pro Tools. However, some features are not available in<br/>VENUE, and other features are managed differently between the two applications. This section describes how<br/>VENUE handles various optional AAX features.<br/></p>
<p><b>12.62.6.1 Processing configurations<br/></b></p>
<p>Architectures VENUE supports 64-bit AAX DSP plug-ins only. AAX Native and AAX Hybrid plug-ins are not sup-<br/>ported. Plug-ins compiled for 32-bit processors are not supported, though they may be included in a VENUE-<br/>compatible .aaxplugin bundle alongside the plug-in's 64-bit binary.<br/></p>
<p>Stem formats<br/></p>
<p>&#8226; Mono plug-ins may be inserted as channel inserts on mono input strips and output busses.<br/></p>
<p>&#8226; Stereo plug-ins can be inserted as channel inserts on stereo input strips and output busses.<br/></p>
<p>&#8226; Greater-than-stereo formats are not supported by VENUE<br/></p>
<p>&#8226; Multi-mono processing is not supported; an operator must use the stereo version of a plug-in in stereo pro-<br/>cessing locations.<br/></p>
<p>Width-changing plug-ins Width Changing plug-ins are not allowed as inserts except in mix busses. Unlike in Pro<br/>Tools, a plug-in cannot change the output stem format of a strip or bus by using a mono-to-stereo plug-in on a mono<br/>track.<br/></p>
<p>However, width-changing plug-ins are supported on output busses. For these, the outputs of the plug-in can either<br/>be routed back to an FX return or routed out to physical outputs. This functionality does not require any additional<br/>implementation specific to VENUE.<br/></p>
<p><b>12.62.6.2 Presets and automation<br/></b></p>
<p>Plug-In settings are persisted (saved &amp; restored) the same way for Show files, snapshots &amp; settings files, using a<br/>single method to extract settings and a single method to apply setting. The code uses the &quot;chunk&quot; APIs. That's<br/>similar to what Pro Tools does, except that for automation, VENUE uses exclusively snapshots (that is, VENUE<br/>does not record &amp; playback individual control changes).<br/></p>
<p>Many VENUE snapshots users are known to store settings for every Plug-In in every snapshot (or almost). This<br/>causes performance issues because settings are often fairly slow to load, making a snapshot recall last too<br/>long (sometimes 30 seconds or more!) whereas users expect a snapshot recall to take instantly. However, ex-<br/>tremely frequently, settings are not actually changing from a snapshot to the next one (that is, from one snap-<br/>shot to the next one, the vast majority of Plug-Ins contain the same settings). To mitigate this, VENUE calls<br/>AAX_IEffectParameters::CompareActiveChunk() to determine whether a chunk from an incoming snapshot would<br/>result in any change to the plug-in's current settings. If not, the new chunk will not be loaded onto the plug-in. This<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>360 Module Documentation<br/></b></p>
<p>optimization is extremely effective, but requires that Plug-Ins implement the CompareActiveChunk() method prop-<br/>erly at any time (in particular regardless of whether the plug-in is visible or not). With VENUE, you must implement<br/>this API very well or the Plug-In may not be controllable. This optimization will affect settings application when a<br/>show is loaded, when presets are loaded and when snapshots are recalled.<br/></p>
<p>All chunks are first compared one by one to the active chunks, until one is different or an error is returned. If any<br/>chunk compare fails (not equal or error returned), then all chunks are sent in sequence.<br/></p>
<p>As it is the basic method for plug-in settings manipulation, it is critical that plug-ins process chunks as accurately<br/>and efficiently as possible.<br/></p>
<p>Plug-In Chunks The size of a plug-in chunk cannot exceed 64KB in VENUE. If a Plug-In requires more than 64KB<br/>of chunk data total (all chunk sizes added), settings for this plug-in won't be persisted, snapshots won't work for this<br/>plug-in and users won't be able to load or save settings. If you can not meet this requirement, you should detect<br/>that you are running on VENUE and not declared the process type as it won't be usable.<br/></p>
<p><b>12.62.6.3 Unsupported features<br/></b></p>
<p>The following AAX features are not supported by VENUE. Plug-ins that require these features will not be compatible<br/>with VENUE systems. If your plug-ins use these features for advanced functionality but not for basic operation then<br/>you should document this restriction for VENUE users.<br/></p>
<p>&#8226; Advanced audio routing VENUE does not support Auxiliary Output Stems from plug-ins.<br/></p>
<p><b>Warning<br/></b>Description callback calls to register auxiliary output stems will return an error code on VENUE systems,<br/>indicating that the host will not provide audio buffers for auxiliary output stems during processing. A<br/>plug-in must not attempt to write data into auxiliary output stem buffers which have not been provided<br/>by the host!<br/></p>
<p>&#8226; Transport interface VENUE operates entirely in real-time and does not contain a timeline of pre-<br/>recorded audio. Therefore VENUE does not support the AAX_ITransport interface. VENUE will return<br/>AAX_ERROR_UNIMPLEMENTED to unsupported transport interface method calls.<br/></p>
<p>&#8226; MIDI VENUE does not support MIDI routing to and from plug-in instances, and no AAX MIDI features are<br/>supported by VENUE.<br/></p>
<p><b>12.62.7 VENUE Plug-in installer specification<br/></b></p>
<p>To install plug-ins, the VENUE software includes a simple installation interface. To install a plug-in, the operator<br/>simply plugs in a USB Flash Drive with an installer for the plug-in and the plug-in will show up in an installer menu<br/>on the VENUE interface (shown below).<br/></p>
<p>This menu will automatically list all the installable plug-ins on the drive. With the click of a button, the user can install<br/>the plug-ins onto his VENUE system.<br/></p>
<p>Figure 6: The VENUE plug-in installer tab<br/></p>
<p>For this custom installation to work properly, the plug-in installation USB Key must follow a certain layout. This layout<br/>is designed to be as flexible and as expandable as possible, giving the developer many options while retaining the<br/>simplicity that makes VENUE's plug-in installation appealing to the user. This layout is also designed to coexist on<br/>a drive with a Pro Tools plug-in install. The following is a detailed description of how the file hierarchy should be laid<br/>out.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.62 VENUE Guide 361<br/></b></p>
<p><b>12.62.7.1 Overview<br/></b></p>
<p>The VENUE Plug-In installer specification is an extension of an AAX plug-in bundle, i.e. of the MyPlugIn.aaxplugin<br/>folder.<br/></p>
<p>A standard .aaxplugin directory forms a basic, compatible plug-in installer for VENUE. See .aaxplugin Directory Structure<br/>for more information about this folder.<br/></p>
<p>The following optional items can be added to the .aaxplugin folder to extend its functionality when used as a VENUE<br/>plug-in installer:<br/></p>
<p>&#8226; License file that will need to be accepted by end user<br/></p>
<p>&#8226; Pre-install action (either .bat script or executable or both)<br/></p>
<p>&#8226; Post-install action (either .bat script or executable or both)<br/></p>
<p>&#8226; Pre-uninstall action (either .bat script or executable or both)<br/></p>
<p>&#8226; Post-uninstall action (either .bat script or executable or both)<br/></p>
<p>&#8226; PACE Eden installer to update the version pre-installed on the VENUE system<br/></p>
<p>&#8226; Factory presets<br/></p>
<p>&#8226; Registry entries in a form of .reg files<br/></p>
<p>&#8226; Program files to be placed in the system's C:\Program Files folder<br/></p>
<p>&#8226; Plug-in thumbnails to be shown in the rack in VENUE Software UI<br/></p>
<p><b>12.62.7.2 Directory structure<br/></b></p>
<p>Here is a layout of the optional elements in the .aaxplugin plug-in installer directory:<br/></p>
<p>&#8226; /Contents<br/></p>
<p><b>&#8211; </b>standard AAX plug-in contents<br/></p>
<p>&#8226; /Pace Eden<br/></p>
<p><b>&#8211; </b>Setup.exe<br/><b>&#8211; </b>Setup.bat<br/><b>&#8211; </b>Version.txt<br/></p>
<p>&#8226; /Program Files<br/></p>
<p><b>&#8211; </b>...<br/></p>
<p>&#8226; /Thumbnails<br/></p>
<p><b>&#8211; </b>id1.bmp (example: 424644204C41324131314C41.bmp)<br/><b>&#8211; </b>id2.bmp<br/></p>
<p>&#8226; /License.rtf or License.txt<br/></p>
<p>&#8226; /Install_before.bat<br/></p>
<p>&#8226; /Install_before.exe<br/></p>
<p>&#8226; /Install_after.bat<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>362 Module Documentation<br/></b></p>
<p>&#8226; /Install_after.exe<br/>&#8226; /SomeSettings.reg<br/>&#8226; /Uninstall_before.bat<br/>&#8226; /Uninstall_before.exe<br/>&#8226; /Uninstall_after.bat<br/>&#8226; /Uninstall_after.exe<br/></p>
<p><b>12.62.7.3 Optional installer files<br/></b></p>
<p><b>12.62.7.3.1 License terms </b>A license stored as a file of either RTF or ASCII plain text format. The file must be<br/>located in the root folder of the installer. Depending on the text file format, the file name must be either License.rtf<br/>or License.txt.<br/></p>
<p><b>12.62.7.3.2 Registry entries </b>Registry settings to be applied during installation need to be stored in .reg files in<br/>the root folder of installer. All such files must be of the Windows Registry format. Particular file names does not<br/>matter.<br/>Registry files are applied during plug-in installation.<br/>It is important to not alter any system settings or settings of other software installed.<br/></p>
<p><b>Note<br/></b>Changes in the registry are not reverted during the plugin uninstallation.<br/></p>
<p><b>12.62.7.3.3 Program files </b>Files under the Program Files subfolder in the plug-in installer will be copied to the<br/>system's C:\Program Files folder. All contents of the Program Files subfolder are copied as-is into C:\Program Files,<br/>retaining the internal folder structure of nested directories.<br/>These changes are undone when the plug-in is uninstalled.<br/></p>
<p><b>12.62.7.3.4 Plug-in thumbnails </b>VENUE uses thumbnail images to display plug-in GUIs in the plug-in rack while<br/>the full-size plug-in GUI is hidden.<br/>If thumbnail images are not provided in the plug-in installer then VENUE will display a generic thumbnail image for<br/>the plug-in until it has been focused in Zoom Mode in the VENUE interface. In this case VENUE will create and<br/>cache a thumbnail image for the plug-in GUI the first time that it is focused.<br/>The user may regenerate a thumbnail by right-clicking a rack with a plug-in and choosing &quot;Recreate Thumbnail&quot;.<br/>Including thumbnails in plug-in installers<br/>A separate thumbnail should be provided in the plug-in installer for each variant supported by the plug-in, i.e. each<br/>unique AAX DSP ID triad registered by the plug-in. Use the &quot;Recreate Thumbnail&quot; feature to create the initial<br/>versions of your plug-in thumbnail images. Package these thumbnail images into your plug-in installer in order to<br/>guarantee that thumbnail images will be available to users immediately upon installing the plug-in.<br/>Each thumbnail bitmap file is named after the following plug-in parameters:<br/></p>
<p>1. AAX_eProperty_ManufacturerID<br/>2. AAX_eProperty_ProductID<br/>3. AAX_eProperty_PlugInID_TI<br/></p>
<p>All of three are converted to hexadecimal representation and concatenated to form a file name that uniquely identi-<br/>fies a plug-in variant. For example, the Avid Channel Strip plug-in has a thumbnail file named 41564944 43685374<br/>434D5469.bmp (no spaces).<br/>The &quot;Recreate Thumbnail&quot; feature in VENUE will ensure that the generated thumbnail images use the correct file<br/>names, resolution, and image format.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.62 VENUE Guide 363<br/></b></p>
<p><b>12.62.7.3.5 Actions </b>A plug-in installer may define custom actions for the following cases:<br/></p>
<p>1. Pre-install action - executed when plug-in installation starts<br/>2. Post-install action - executed when plug-in installation finishes<br/>3. Pre-uninstall action - executed when plug-in uninstallation starts<br/>4. Post-uninstall action - executed when plug-in uninstallation finishes<br/></p>
<p>Each action is defined by either a .bat file or an Win32/64 executable file (.exe). Action files must be placed in the<br/>root folder of installer and use these file names:<br/></p>
<p>1. Pre-install action - Install_before.bat, Install_before.exe<br/>2. Post-install action - Install_after.bat, Install_after.exe<br/>3. Pre-uninstall action - Uninstall_before.bat, Uninstall_before.exe<br/>4. Post-uninstall action - Uninstall_after.bat, Uninstall_after.exe<br/></p>
<p>If both .exe and .bat files are present for a certain action, then both are executed, with the .bat file being run before<br/>the .exe.<br/>When executing an action, no exit code is tested. In order to report errors, the following needs to be done:<br/></p>
<p>1. .bat files:<br/>The following line should be used to report an error message from a script: reg add HKCU\Software\Digidesign\tmp<br/>/f /v InstallResult /d &quot;Error description&quot;<br/></p>
<p>2. .exe files:<br/>The error message needs to be added to Windows registry as a REG_SZ value in HKEY_CURRENT_&#8592;&#8617;<br/>USER\Software\Digidesign\tmp and named InstallResult.<br/></p>
<p>The presence of the error message will abort a plug-in installation. Any error strings will be written to the VENUE<br/>logs so that Avid support will be able to see them. Error strings from these actions are not shown to the user.<br/></p>
<p><b>12.62.7.3.6 PACE software installer<br/>Warning<br/></b></p>
<p>This functionality must not be used without prior approval from Avid. Before releasing <b>any </b>VENUE plug-in<br/>update with a bundled PACE installer you must contact Avid to confirm that the bundled installer will not cause<br/>issues for deployed VENUE systems.<br/></p>
<p>VENUE allows plug-ins to install updated version of PACE iLok software immediately after the plug-in installation.<br/>In general, Avid tries to provide the latest Pace software with each VENUE software release and update. Therefore<br/>this step should not be necessary in most cases.<br/>The PACE installer files must be located in Pace Eden subfolder of the installer. This folder must contain the following<br/>files:<br/></p>
<p>&#8226; Version.txt containing a version of the LDSvc.exe PACE executable being installed. The version information<br/>must be in the form of 1.2.3.4<br/></p>
<p>&#8226; Setup.exe - the PACE installer itself.<br/>&#8226; (optional) Setup.bat containing an installation script. Usually used to run PACE installer in a silent (no UI, no<br/></p>
<p>interaction) mode.<br/></p>
<p>During installation, Setup.bat, if present, is run. Otherwise Setup.exe is executed with the following command line<br/>arguments:<br/>Setup.exe /s /v&quot;REINSTALLMODE=vamus REBOOT=ReallySuppress /qn&quot;<br/>If the version of installer is not higher than the version installed in system, the installation will not be performed.<br/>An OS reboot is prompted in VENUE UI after PACE was installed.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>364 Module Documentation<br/></b></p>
<p><b>12.62.7.4 Using a VENUE plug-in installer<br/></b></p>
<p>In order to install a plug-in to the VENUE system, end user is expected to perform the following steps:<br/></p>
<p>1. Download a VENUE Plug-in Installer(s) in a form of archive (Zip is suggested). Is it ok to have multiple plug-ins<br/>in one archive as soon as each plug-in is in own VENUE Plug-in Installer (i.e. in own .aaxplugin folder).<br/></p>
<p>2. Unpack archive and copy installers to USB drive in the following way:<br/>(a) &quot;AAX Plug-Ins&quot; folder must be placed in the root of USB drive.<br/>(b) Each installer needs to be copied directly the &quot;AAX Plug-Ins&quot; folder. In the end, resulting folder structure<br/></p>
<p>will look like this:<br/>3. Install plug-ins in a way described in documentation of a particular VENUE Software version.<br/></p>
<p><b>12.62.8 Additional plug-in guidelines<br/></b></p>
<p><b>12.62.8.1 General Reliability and Fault Tolerance<br/></b></p>
<p>Since VENUE is a more &quot;mission critical&quot; type of application where there is no room for error during a live show,<br/>additional precautions have to be taken with respect to reliability of its various components. We have built provisions<br/>in VENUE to protect the system from catastrophic failure due to a plug-in crashing and bringing down the entire<br/>system. On top of this, extra care should be taken in developing stable software when targeting VENUE as a<br/>platform.<br/></p>
<p>If a plug-in crashes, the user will be warned through a dialog. A crash brings down all plug-in processes, but audio<br/>keeps flowing through the console and through the DSPs, including the plug-ins' DSPs. All the effects continue to<br/>be effective, but their parameters can't be accessed or modified anymore (the show goes on...).<br/></p>
<p>At this point, audio should be totally unaffected, even for the effect that caused the crash (assuming the crash took<br/>place in the host code, not the DSP code, of course). At the user's discretion, all plug-ins will be bypassed or muted<br/>(depending on where they are used in the system), any dependencies on the plug- ins' DSPs will be removed, the<br/>plug-ins' DSPs will be reset, and all the plug-ins will start again. When the rebuilding operation is complete, the user<br/>will be prompted to decide when he wishes the new plug-ins to be connected.<br/></p>
<p><b>12.62.8.2 Plug-In Dialogs<br/></b></p>
<p>Plug-ins should avoid invoking dialog windows in VENUE. We strongly suggest that any unnecessary dialog window<br/>your plug-in creates, whether at installation or instantiation, be removed. For VENUE-only plug-ins, we strongly<br/>suggest to not make use of any dialog windows.<br/></p>
<p>Should you nevertheless need to make use of additional windows or dialogs, you need to make sure that they are<br/>front-most, so that they will not be hidden behind VENUE's GUI. The VENUE software will try to force your windows<br/>to be front-most, but it is safer if your plug-in enforces this in the first place.<br/></p>
<p><b>12.62.8.3 Online Help<br/></b></p>
<p>VENUE currently doesn't include any standardized help menu for plug-ins. We recommend that you use tooltips<br/>and other &quot;live&quot; help techniques similar to what plug-ins like ReVibe II, Reverb One, and Smack! use to help the<br/>user. For instance, when a user clicks on the &quot;Side-Chain EQ&quot; label of the Smack! Plug-In, here's what they see:<br/></p>
<p>Figure 7: Tooltip help in Avid's Smack! plug-in<br/></p>
<p>One of the major benefits of this technique is that it is supported across platforms and will work the same in all AAX<br/>hosts.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.62 VENUE Guide 365<br/></b></p>
<p><b>12.62.9 System details<br/></b></p>
<p><b>12.62.9.1 External dependencies<br/></b></p>
<p>AAX plug-ins may rely on the presence of the following items in VENUE systems:<br/></p>
<p>&#8226; All VENUE systems<br/></p>
<p><b>&#8211; </b>Bonjour service and library<br/><b>Note<br/></b></p>
<p>Plug-in installers are forbidden from installing over or modifying the pre-installed version of Bonjour<br/>on the VENUE system.<br/></p>
<p><b>&#8211; </b>VC 2005 x64 runtime<br/><b>&#8211; </b>VC 2008 x64 runtime<br/><b>&#8211; </b>VC 2010 x64 runtime<br/><b>&#8211; </b>VC 2012 x64 runtime<br/><b>&#8211; </b>VC 2013 x64 runtime<br/></p>
<p>&#8226; S6L versions 5.7 and higher<br/></p>
<p><b>&#8211; </b>VC 2015 x64 runtime<br/><b>&#8211; </b>VC 2017 x64 runtime<br/></p>
<p>&#8226; S6L versions 7.0 and higher<br/></p>
<p><b>&#8211; </b>VC 2015-2019 x64 runtime<br/></p>
<p>&#8226; S3L-X version 4.6.1 with &quot;S3L-X Touch Support Patch&quot; installed<br/></p>
<p><b>&#8211; </b>VC 2015-2019 x64 runtime<br/></p>
<p>Because VENUE does not execute standard software installers for plug-ins, Avid tries to keep VC runtime versions<br/>up to date relative to the moment of release of a particular VENUE Software version.<br/></p>
<p>As of the time of this writing, Venue S3L-X systems are no longer receiving software updates and thus the S3L<br/>software will not be updated to include any additional system components beyond VC 2019. The last runtime<br/>update done for S3L-X was provided by the optional &quot;S3L-X Touch Support Patch&quot;.<br/></p>
<p>If you would like to provide compatibility with Venue host software which does not include your plug-in's required<br/>runtime libraries then we recommend statically linking your plug-in to these runtime libraries.<br/></p>
<p><b>12.62.9.2 Environment variables<br/></b></p>
<p>Both plug-in installers and actual plug-ins may rely on a presence of the following environment variables in a VENUE<br/>system:<br/></p>
<p>&#8226; <b>DAEPLUGINSFOLDER </b>- is always set to the Installed Plug-ins location. Currently this is C:\Program<br/>Files\Common Files\Digidesign\DAE\Plug-Ins. Final backslash is absent.<br/></p>
<p>&#8226; <b>JEX_HOST_TYPE </b>- equals &quot;venue&quot;. If required, this may be used to provide a custom behavior of the plug-in<br/>when it's run on VENUE system.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>366 Module Documentation<br/></b></p>
<p><b>12.62.9.3 Plug-in file locations<br/></b></p>
<p>Installed Plug-Ins Located at C:\Program Files\Common Files\Digidesign\DAE\Plug-Ins<br/></p>
<p>This folder is the only location used by VENUE software to instantiate a plug-in.<br/></p>
<p>This location is different from the one used by Pro Tools and Media Composer for 64-bit AAX plug-ins. The only<br/>way for a plug-in to appear at that location is to be installed from VENUE Software's &quot;Options&quot;&gt;&quot;Plug-Ins&quot; page;<br/>standard plug-in installers will place the plug-in into a different directory.<br/></p>
<p><b>Note<br/></b>This location may change in future VENUE software releases. Plug-ins should not make any assumptions<br/>about the install directory and should rely on the VENUE plug-in installer to place them in the correct location.<br/></p>
<p>Plug-ins available for installation<br/></p>
<p>&#8226; Local: Located at C:\Program Files\Common Files\Avid\Audio\Plug-Ins<br/></p>
<p>&#8226; On USB drive: Located at (USB drive letter):\AAX Plug-Ins<br/></p>
<p>These locations can be chosen as sources for plug-in installation on VENUE Software's &quot;Options&quot;&gt;&quot;Plug-Ins&quot; page.<br/></p>
<p>Cached plug-in installers Located at D:\D-Show\Plug-In Installers<br/></p>
<p>Contains copies of plug-in installers installed via VENUE Software's &quot;Options&quot;&gt;&quot;Plug-Ins&quot; page.<br/></p>
<p>This location can be chosen as source for plug-in installation on VENUE Software's &quot;Options&quot;&gt;&quot;Plug-Ins&quot; page<br/>under the name &quot;Previous Installs&quot;.<br/></p>
<p>Factory presets Located at D:\D-Show\User Data\Effect Presets\Factory Presets<br/></p>
<p>Contains preset files for plug-ins, as well as for certain VENUE parameters. Presets are organized in folders.<br/></p>
<p>Each subfolder corresponds to a particular preset type. Plug-in presets are named after the plug-in's name and the<br/>plug-in's AAX_SPlugInChunkHeader::fProductID value. For example, for an Avid Channel Strip plug-in the subfolder<br/>name is Channel Strip [31313736], where &quot;31313736&quot; is an unsigned integer of the Channel Strip product ID.<br/></p>
<p>Contents of subfolders are .tfx files of plug-in presets. Each file name will be visible to end user as a preset name.<br/></p>
<p>Presets are copied into file location during a plug-in installation.<br/></p>
<p>Plug-in thumbnails Located at C:\Program Files\Digidesign\Plug-In Icons<br/></p>
<p>Contains .bmp files of plug-in thumbnails generated by VENUE Software as a result of saving current plug-in graph-<br/>ics into a bitmap. See Plug-in thumbnails.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.62 VENUE Guide 367<br/></b></p>
<p><b>12.62.9.4 Installation process<br/></b></p>
<p><b>12.62.9.4.1 Plug-in installation </b>These are the steps followed by VENUE when installing a plug-in:<br/></p>
<p>1. First, a VENUE plug-in installer is cached. This is done by copying a plug-in from installation source to the<br/>Cached VENUE Plug-In Installers location. All files are copied with an exception of the &quot;Documentation&quot; and<br/>&quot;Pro Tools&quot; folders.<br/>All of the following steps are executed from the cached installer location, not from the original source location.<br/></p>
<p>2. The pre-install batch script (&quot;Install_before.bat&quot;), if present, is executed. Execution assumes running the<br/>script without a console window.<br/><b>Note<br/></b></p>
<p>The pre-install script must not contain any installation steps, since it's executed before the plug-in license<br/>is accepted. In general, you should only use the pre-install script for pre-install checks.<br/></p>
<p>3. The pre-install executable (&quot;Install_before.exe&quot;), if present, is executed. Execution assumes running the<br/>executable without a console window.<br/><b>Note<br/></b></p>
<p>The pre-install executable must not perform any installation steps, since it's executed before the plug-in<br/>license is accepted. In general, you should only use the pre-install script for pre-install checks.<br/></p>
<p>4. A license (&quot;License.rtf&quot; or &quot;License.txt&quot;), if present, is shown to the user. If &quot;License.rtf&quot; is not found, &quot;&#8592;&#8617;<br/>License.txt&quot; is used. A license, if present, must be accepted by user; otherwise installation will be aborted.<br/></p>
<p>5. All files of the VENUE plug-in installer are copied to the system Installed Plug-Ins location, keeping the<br/>.aaxplugin folder structure. Failure to copy any of the items results in installation being aborted.<br/></p>
<p>6. If the plug-in installer contains a subfolder named &quot;Program Files&quot;, its contents are copied into &quot;C:\\Program<br/>Files&quot;. Failure to copy any of items results in installation being aborted.<br/></p>
<p>7. If the plug-in installer contains a subfolder named &quot;Contents\\Factory Presets&quot;, its contents are imported as<br/>plug-in presets. The &quot;Factory Presets&quot; folder must contain only valid plug-in .tfx preset files in an arbitrary<br/>folder structure. All preset files are read and copied into the system's Factory Presets location.<br/><b>Note<br/></b></p>
<p>It is important for a plug-in installer to contain only plug-in presets corresponding to plug-in being in-<br/>stalled.<br/></p>
<p>8. Plug-in thumbnails, if present, are copied from the &quot;Thumbnails&quot; subfolder of the installer to the system Plug-in<br/>Thumbnails location.<br/></p>
<p>9. Registry files, if any, are imported. Every file with .reg extension in the root of plug-in installer is treated as a<br/>Windows Registry file and gets imported by calling<br/>regedit /s &quot;&lt;file.reg&gt;&quot;<br/>No error checking is performed.<br/></p>
<p>10. The post-install batch script (&quot;Install_after.bat&quot;), if present, is executed. Execution assumes running the script<br/>without a console window.<br/></p>
<p>11. The post-install executable (&quot;Install_after.exe&quot;), if present, is executed. Execution assumes running the exe-<br/>cutable without a console window.<br/></p>
<p>12. The PACE software installer, if present, is run. If the version of the installer is not higher than the version<br/>installed in system, the installation is not performed.<br/>When installing multiple plug-ins at once, PACE installation happens only after installing the final plug-in.<br/>VENUE will use the PACE installer with the highest available version among the installed plug-ins.<br/></p>
<p>13. Plug-in installation is considered successful.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>368 Module Documentation<br/></b></p>
<p>If errors occur during installation, the following happens:<br/></p>
<p>1. Plug-in files are removed from the disk (see &quot;File removal&quot; section for details).<br/>2. Cached plug-in installer is removed from the Cached VENUE Plug-in Installers location.<br/></p>
<p><b>12.62.9.4.2 File removal </b>File removal happens either in case or plug-in uninstallation or in case of a failed<br/>installation cleanup.<br/></p>
<p>The following happens:<br/></p>
<p>1. Plug-in files, as present in Cached VENUE Plug-in Installers location, are removed from Installed Plug-Ins<br/>location.<br/></p>
<p>2. Plug-in Program Files files, as present in Cached VENUE Plug-in Installers location, are removed from In-<br/>stalled Plug-Ins location.<br/></p>
<p><b>12.62.9.4.3 Plug-in uninstallation </b>Plug-in installation process is done by VENUE Software. It removes a plug-in<br/>from the Installed Plugins location. Here's a step by step process of uninstalling plug-in:<br/></p>
<p>1. The pre-uninstall batch script (&quot;Uninstall_before.bat&quot;), if present, is executed. Execution assumes running the<br/>script without a console window. NO return code is examined. Instead, a script is allowed to report an error<br/>string that will be visible to Avid support when examining VENUE log files. The following line should be used<br/>to write an error message from a script:<br/>reg add HKCU\Software\Digidesign\tmp /f /v InstallResult /d &quot;Error description&quot;<br/>The presence of this string means an error has occurred and a plug-in uninstallation will abort.<br/></p>
<p>2. The pre-uninstall executable (&quot;Uninstall_before.exe&quot;), if present, is executed. Execution assumes running the<br/>executable without a console window. NO return code is examined. Instead, an executable is allowed to<br/>report an error string that will be visible to Avid support when examining VENUE log files. The error needs to<br/>be added to Windows registry as a REG_SZ value in HKEY_CURRENT_USER\Software\Digidesign\tmp and<br/>named InstallResult. The presence of this string means an error has occurred and a plug-in uninstallation will<br/>abort.<br/></p>
<p>3. Plug-in files are removed. See File removal for details.<br/>4. The post-uninstall batch script (&quot;Install_after.bat&quot;), if present, is executed. Execution assumes running the<br/></p>
<p>script without a console window. NO return code is examined. Instead, a script is allowed to report an error<br/>string that will be visible to Avid support when examining VENUE log files. The following line should be used<br/>to write an error message from a script:<br/>reg add HKCU\Software\Digidesign\tmp /f /v InstallResult /d &quot;Error description&quot;<br/>The presence of this string means an error has occurred and a plug-in uninstallation will abort.<br/></p>
<p>5. The post-uninstall executable (&quot;Install_after.exe&quot;), if present, is executed. Execution assumes running the<br/>executable without a console window. NO return code is examined. Instead, an executable is allowed to<br/>report an error string that will be visible to Avid support when examining VENUE log files. The error needs to<br/>be added to Windows registry as a REG_SZ value in HKEY_CURRENT_USER\Software\Digidesign\tmp and<br/>named InstallResult. The presence of this string means an error has occurred and a plug-in uninstallation will<br/>abort.<br/></p>
<p>6. Plug-in removal is complete.<br/></p>
<p>Please note that plug-in being uninstalled is not being removed from the cache. Removal from the Cached VENUE<br/>Plug-in Installers is possible for plug-ins being not installed. In order to accomplish this, end user needs to go to<br/>VENUE Software's &quot;Options&quot;&gt;&quot;Plug-Ins&quot; page, right click on cached installer, and choose &quot;Delete &lt;em&gt;plug-in<br/>name&lt;/em&gt;&quot;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>12.62 VENUE Guide 369<br/></b></p>
<p><b>12.62.10 Additional Information<br/></b></p>
<p><b>12.62.10.1 Metering<br/></b></p>
<p>For metering displays, VENUE uses dB units referenced to VENUE's nominal operating level of +4dBu. A signal at<br/>the nominal level in VENUE (i.e. registers 0dB on the VENUE meters) will, at unity gain, generate a +4dBu analog<br/>output signal (-20dBFS digital output signal).<br/></p>
<p>As a result, a signal that registers +20dB on the VENUE meters will register 0dBFS on the plug-in meters. A signal<br/>at 0 dB in VENUE will be -20dBFS in the plug-in.<br/></p>
<p>To map between dBFS units used in plug-ins and dB units used in VENUE the operator simply needs to add 20 to<br/>any plug-in dBFS value.<br/></p>
<p>Collaboration diagram for VENUE Guide:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>370 Module Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 13<br/></b></p>
<p><b>Namespace Documentation<br/></b></p>
<p><b>13.1 AAX Namespace Reference<br/></b></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; Exception<br/>AAX exception classes<br/></p>
<p>&#8226; internal<br/></p>
<p><b>Enumerations<br/></b></p>
<p>&#8226; enum EStatusNibble {<br/>eStatusNibble_NoteOff = 0x80 ,<br/>eStatusNibble_NoteOn = 0x90 ,<br/>eStatusNibble_KeyPressure = 0xA0 ,<br/>eStatusNibble_ControlChange = 0xB0 ,<br/>eStatusNibble_ChannelMode = 0xB0 ,<br/>eStatusNibble_ProgramChange = 0xC0 ,<br/>eStatusNibble_ChannelPressure = 0xD0 ,<br/>eStatusNibble_PitchBend = 0xE0 ,<br/>eStatusNibble_SystemCommon = 0xF0 ,<br/>eStatusNibble_SystemRealTime = 0xF0 }<br/></p>
<p>Values for the status nibble in a MIDI packet.<br/>&#8226; enum EStatusByte {<br/></p>
<p>eStatusByte_SysExBegin = 0xF0 ,<br/>eStatusByte_MTCQuarterFrame = 0xF1 ,<br/>eStatusByte_SongPosition = 0xF2 ,<br/>eStatusByte_SongSelect = 0xF3 ,<br/>eStatusByte_TuneRequest = 0xF6 ,<br/>eStatusByte_SysExEnd = 0xF7 ,<br/>eStatusByte_TimingClock = 0xF8 ,<br/>eStatusByte_Start = 0xFA ,<br/>eStatusByte_Continue = 0xFB ,<br/>eStatusByte_Stop = 0xFC ,<br/>eStatusByte_ActiveSensing = 0xFE ,<br/>eStatusByte_Reset = 0xFF }<br/></p>
<p>Values for the status byte in a MIDI packet.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>372 Namespace Documentation<br/></b></p>
<p>&#8226; enum EChannelModeData {<br/>eChannelModeData_AllSoundOff = 120 ,<br/>eChannelModeData_ResetControllers = 121 ,<br/>eChannelModeData_LocalControl = 122 ,<br/>eChannelModeData_AllNotesOff = 123 ,<br/>eChannelModeData_OmniOff = 124 ,<br/>eChannelModeData_OmniOn = 125 ,<br/>eChannelModeData_PolyOff = 126 ,<br/>eChannelModeData_PolyOn = 127 }<br/></p>
<p>Values for the first data byte in a Channel Mode Message MIDI packet.<br/>&#8226; enum ESpecialData {<br/></p>
<p>eSpecialData_AccentedClick = 0x00 ,<br/>eSpecialData_UnaccentedClick = 0x01 }<br/></p>
<p>Special message data for the first data byte in a message.<br/>&#8226; enum ESampleRates {<br/></p>
<p>e44100SampleRate = 44100 ,<br/>e48000SampleRate = 48000 ,<br/>e88200SampleRate = 88200 ,<br/>e96000SampleRate = 96000 ,<br/>e176400SampleRate = 176400 ,<br/>e192000SampleRate = 192000 }<br/></p>
<p><b>Functions<br/></b>&#8226; std::string AsString (const char &#8727;inStr)<br/>&#8226; const std::string &amp; AsString (const std::string &amp;inStr)<br/>&#8226; const std::string &amp; AsString (const Exception::Any &amp;inStr)<br/>&#8226; bool IsNoteOn (const AAX_CMidiPacket &#8727;inPacket)<br/></p>
<p>Returns true if inPacket is a Note On message.<br/>&#8226; bool IsNoteOff (const AAX_CMidiPacket &#8727;inPacket)<br/></p>
<p>Returns true if inPacket is a Note Off message, or a Note On message with velocity zero.<br/>&#8226; bool IsAllNotesOff (const AAX_CMidiPacket &#8727;inPacket)<br/></p>
<p>Returns true if inPacket is an All Sound Off or All Notes Off message.<br/>&#8226; bool IsAccentedClick (const AAX_CMidiPacket &#8727;inPacket)<br/></p>
<p>Returns true if inPacket is a special Pro Tools accented click message.<br/>&#8226; bool IsUnaccentedClick (const AAX_CMidiPacket &#8727;inPacket)<br/></p>
<p>Returns true if inPacket is a special Pro Tools unaccented click message.<br/>&#8226; bool IsClick (const AAX_CMidiPacket &#8727;inPacket)<br/></p>
<p>Returns true if inPacket is a special Pro Tools click message.<br/>&#8226; template&lt;class T1 , class T2 &gt;<br/></p>
<p>bool PageTableParameterMappingsAreEqual (const T1 &amp;inL, const T2 &amp;inR)<br/>&#8226; template&lt;class T1 , class T2 &gt;<br/></p>
<p>bool PageTableParameterNameVariationsAreEqual (const T1 &amp;inL, const T2 &amp;inR)<br/>&#8226; template&lt;class T1 , class T2 &gt;<br/></p>
<p>bool PageTablesAreEqual (const T1 &amp;inL, const T2 &amp;inR)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>void CopyPageTable (T &amp;to, const T &amp;from)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>std::vector&lt; std::pair&lt; int32_t, int32_t &gt; &gt; FindParameterMappingsInPageTable (const T &amp;inTable,<br/>AAX_CParamID inParameterID)<br/></p>
<p>&#8226; template&lt;class T &gt;<br/>void ClearMappedParameterByID (T &amp;ioTable, AAX_CParamID inParameterID)<br/></p>
<p>&#8226; void GetCStringOfLength (char &#8727;stringOut, const char &#8727;stringIn, int32_t aMaxChars)<br/>==============================================================<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 373<br/></b></p>
<p>&#8226; int32_t Caseless_strcmp (const char &#8727;cs, const char &#8727;ct)<br/>&#8226; std::string Binary2String (uint32_t binaryValue, int32_t numBits)<br/>&#8226; uint32_t String2Binary (const AAX_IString &amp;s)<br/>&#8226; bool IsASCII (char inChar)<br/>&#8226; bool IsFourCharASCII (uint32_t inFourChar)<br/>&#8226; std::string AsStringFourChar (uint32_t inFourChar)<br/>&#8226; std::string AsStringPropertyValue (AAX_EProperty inProperty, AAX_CPropertyValue inPropertyValue)<br/>&#8226; std::string AsStringInt32 (int32_t inInt32)<br/>&#8226; std::string AsStringUInt32 (uint32_t inUInt32)<br/>&#8226; std::string AsStringIDTriad (const AAX_SPlugInIdentifierTriad &amp;inIDTriad)<br/>&#8226; std::string AsStringStemFormat (AAX_EStemFormat inStemFormat, bool inAbbreviate=false)<br/>&#8226; std::string AsStringStemChannel (AAX_EStemFormat inStemFormat, uint32_t inChannelIndex, bool in&#8592;&#8617;<br/></p>
<p>Abbreviate)<br/>&#8226; std::string AsStringResult (AAX_Result inResult)<br/>&#8226; std::string AsStringSupportLevel (AAX_ESupportLevel inSupportLevel)<br/>&#8226; double SafeLog (double aValue)<br/></p>
<p>Double-precision safe log function. Returns zero for input values that are &lt;= 0.0.<br/>&#8226; float SafeLogf (float aValue)<br/></p>
<p>Single-precision safe log function. Returns zero for input values that are &lt;= 0.0.<br/>&#8226; AAX_CBoolean IsParameterIDEqual (AAX_CParamID iParam1, AAX_CParamID iParam2)<br/></p>
<p>Helper function to check if two parameter IDs are equivalent.<br/>&#8226; AAX_CBoolean IsEffectIDEqual (const AAX_IString &#8727;iEffectID1, const AAX_IString &#8727;iEffectID2)<br/></p>
<p>Helper function to check if two Effect IDs are equivalent.<br/>&#8226; AAX_CBoolean IsAvidNotification (AAX_CTypeID inNotificationID)<br/></p>
<p>Helper function to check if a notification ID is reserved for host notifications.<br/>&#8226; void alignFree (void &#8727;p)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T &#8727; alignMalloc (int iArraySize, int iAlignment)<br/>&#8226; void DeDenormal (double &amp;iValue)<br/></p>
<p>Clamps very small floating point values to zero.<br/>&#8226; void DeDenormal (float &amp;iValue)<br/></p>
<p>Clamps very small floating point values to zero.<br/>&#8226; void DeDenormalFine (float &amp;iValue)<br/>&#8226; void FilterDenormals (float &#8727;inSamples, int32_t inLength)<br/></p>
<p>Round all denormal/subnormal samples in a buffer to zero.<br/>&#8226; template&lt;class GFLOAT &gt;<br/></p>
<p>GFLOAT ClampToZero (GFLOAT iValue, GFLOAT iClampThreshold)<br/>&#8226; void ZeroMemorySW (void &#8727;iPointer, int iNumBytes)<br/>&#8226; void ZeroMemoryDW (void &#8727;iPointer, int iNumBytes)<br/>&#8226; template&lt;typename T , int N&gt;<br/></p>
<p>void Fill (T &#8727;iArray, const T &#8727;iVal)<br/>&#8226; template&lt;typename T , int M, int N&gt;<br/></p>
<p>void Fill (T &#8727;iArray, const T &#8727;iVal)<br/>&#8226; template&lt;typename T , int L, int M, int N&gt;<br/></p>
<p>void Fill (T &#8727;iArray, const T &#8727;iVal)<br/>&#8226; double fabs (double iVal)<br/>&#8226; float fabs (float iVal)<br/>&#8226; float fabsf (float iVal)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T AbsMax (const T &amp;iValue, const T &amp;iMax)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T MinMax (const T &amp;iValue, const T &amp;iMin, const T &amp;iMax)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T Max (const T &amp;iValue1, const T &amp;iValue2)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>374 Namespace Documentation<br/></b></p>
<p>&#8226; template&lt;class T &gt;<br/>T Min (const T &amp;iValue1, const T &amp;iValue2)<br/></p>
<p>&#8226; template&lt;class T &gt;<br/>T Sign (const T &amp;iValue)<br/></p>
<p>&#8226; double PolyEval (double x, const double &#8727;coefs, int numCoefs)<br/>&#8226; double CeilLog2 (double iValue)<br/>&#8226; void SinCosMix (float aLinearMix, float &amp;aSinMix, float &amp;aCosMix)<br/>&#8226; int32_t FastRound2Int32 (double iVal)<br/></p>
<p>Round to Int32.<br/>&#8226; int32_t FastRound2Int32 (float iVal)<br/></p>
<p>Round to Int32.<br/>&#8226; int32_t FastRndDbl2Int32 (double iVal)<br/>&#8226; int32_t FastTrunc2Int32 (double iVal)<br/></p>
<p>Float to Int conversion with truncation.<br/>&#8226; int32_t FastTrunc2Int32 (float iVal)<br/></p>
<p>Float to Int conversion with truncation.<br/>&#8226; int64_t FastRound2Int64 (double iVal)<br/></p>
<p>Round to Int64.<br/>&#8226; int32_t GetInt32RPDF (int32_t &#8727;iSeed)<br/>&#8226; int32_t GetFastInt32RPDF (int32_t &#8727;iSeed)<br/></p>
<p>CALL: Calculate pseudo-random 32 bit number based on linear congruential method.<br/>&#8226; float GetRPDFWithAmplitudeOneHalf (int32_t &#8727;iSeed)<br/>&#8226; float GetRPDFWithAmplitudeOne (int32_t &#8727;iSeed)<br/>&#8226; float GetFastRPDFWithAmplitudeOne (int32_t &#8727;iSeed)<br/>&#8226; float GetTPDFWithAmplitudeOne (int32_t &#8727;iSeed)<br/></p>
<p><b>MIDI logging utilities<br/></b></p>
<p>&#8226; void AsStringMIDIStream_Debug (const AAX_CMidiStream &amp;inStream, char &#8727;outBuffer, int32_t inBuffer&#8592;&#8617;<br/>Size)<br/></p>
<p><b>Filesystem utilities<br/></b></p>
<p>&#8226; bool GetPathToPlugInBundle (const char &#8727;iBundleName, int iMaxLength, char &#8727;oModuleName)<br/>Retrieve the file path of the .aaxplugin bundle.<br/></p>
<p><b>Variables<br/></b></p>
<p>&#8226; const int cBigEndian =0<br/>&#8226; const int cLittleEndian =1<br/>&#8226; const double cPi = 3.1415926535897932384626433832795<br/>&#8226; const double cTwoPi = 6.2831853071795862319959269370884<br/>&#8226; const double cHalfPi = 1.5707963267948965579989817342721<br/>&#8226; const double cQuarterPi = 0.78539816339744827899949086713605<br/>&#8226; const double cRootTwo = 1.4142135623730950488016887242097<br/>&#8226; const double cOneOverRootTwo = 0.70710678118654752440084436210485<br/>&#8226; const double cPos3dB =1.4142135623730950488016887242097<br/>&#8226; const double cNeg3dB =0.70710678118654752440084436210485<br/>&#8226; const double cPos6dB =2.0<br/>&#8226; const double cNeg6dB =0.5<br/>&#8226; const double cNormalizeLongToAmplitudeOneHalf = 0.00000000023283064365386962890625<br/>&#8226; const double cNormalizeLongToAmplitudeOne = 1.0/double(1&lt;&lt;31)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 375<br/></b></p>
<p>&#8226; const double cMilli =0.001<br/>&#8226; const double cMicro =0.001&#8727;0.001<br/>&#8226; const double cNano =0.001&#8727;0.001&#8727;0.001<br/>&#8226; const double cPico =0.001&#8727;0.001&#8727;0.001&#8727;0.001<br/>&#8226; const double cKilo =1000.0<br/>&#8226; const double cMega =1000.0&#8727;1000.0<br/>&#8226; const double cGiga =1000.0&#8727;1000.0&#8727;1000.0<br/>&#8226; const double cDenormalAvoidanceOffset =3.0e-34<br/>&#8226; const float cFloatDenormalAvoidanceOffset =3.0e-20f<br/>&#8226; const unsigned int kPowExtent = 9<br/>&#8226; const unsigned int kPowTableSize = 1 &lt;&lt; kPowExtent<br/>&#8226; const float cSeedDivisor = 1/127773.0f<br/>&#8226; const int32_t cInitialSeedValue =0x00F54321<br/></p>
<p><b>13.1.1 Enumeration Type Documentation<br/></b></p>
<p><b>13.1.1.1 EStatusNibble<br/></b></p>
<p>enum AAX::EStatusNibble<br/></p>
<p>Values for the status nibble in a MIDI packet.<br/></p>
<p><b>Enumerator<br/></b>eStatusNibble_NoteOff<br/>eStatusNibble_NoteOn<br/></p>
<p>eStatusNibble_KeyPressure<br/>eStatusNibble_ControlChange<br/>eStatusNibble_ChannelMode<br/></p>
<p>eStatusNibble_ProgramChange<br/>eStatusNibble_ChannelPressure<br/></p>
<p>eStatusNibble_PitchBend<br/>eStatusNibble_SystemCommon<br/>eStatusNibble_SystemRealTime<br/></p>
<p><b>13.1.1.2 EStatusByte<br/></b></p>
<p>enum AAX::EStatusByte<br/></p>
<p>Values for the status byte in a MIDI packet.<br/></p>
<p><b>Enumerator<br/></b>eStatusByte_SysExBegin<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>376 Namespace Documentation<br/></b></p>
<p><b>Enumerator<br/></b>eStatusByte_MTCQuarterFrame<br/></p>
<p>eStatusByte_SongPosition<br/>eStatusByte_SongSelect<br/></p>
<p>eStatusByte_TuneRequest<br/>eStatusByte_SysExEnd<br/></p>
<p>eStatusByte_TimingClock<br/>eStatusByte_Start<br/></p>
<p>eStatusByte_Continue<br/>eStatusByte_Stop<br/></p>
<p>eStatusByte_ActiveSensing<br/>eStatusByte_Reset<br/></p>
<p><b>13.1.1.3 EChannelModeData<br/></b></p>
<p>enum AAX::EChannelModeData<br/></p>
<p>Values for the first data byte in a Channel Mode Message MIDI packet.<br/></p>
<p><b>Enumerator<br/></b>eChannelModeData_AllSoundOff<br/></p>
<p>eChannelModeData_ResetControllers<br/>eChannelModeData_LocalControl<br/></p>
<p>eChannelModeData_AllNotesOff<br/>eChannelModeData_OmniOff<br/>eChannelModeData_OmniOn<br/>eChannelModeData_PolyOff<br/>eChannelModeData_PolyOn<br/></p>
<p><b>13.1.1.4 ESpecialData<br/></b></p>
<p>enum AAX::ESpecialData<br/></p>
<p>Special message data for the first data byte in a message.<br/></p>
<p><b>Enumerator<br/></b>eSpecialData_AccentedClick For use when the high status nibble is eStatusNibble_NoteOn and the low<br/></p>
<p>status nibble is zero.<br/>eSpecialData_UnaccentedClick For use when the high status nibble is eStatusNibble_NoteOn and the low<br/></p>
<p>status nibble is zero.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 377<br/></b></p>
<p><b>13.1.1.5 ESampleRates<br/></b></p>
<p>enum AAX::ESampleRates<br/></p>
<p><b>Enumerator<br/></b>e44100SampleRate<br/>e48000SampleRate<br/>e88200SampleRate<br/>e96000SampleRate<br/></p>
<p>e176400SampleRate<br/>e192000SampleRate<br/></p>
<p><b>13.1.2 Function Documentation<br/></b></p>
<p><b>13.1.2.1 AsString() [1/3]<br/></b></p>
<p>std::string AAX::AsString (<br/>const char &#8727; inStr ) [inline]<br/></p>
<p>Generic conversion of a string-like object to a std::string<br/></p>
<p><b>13.1.2.2 AsString() [2/3]<br/></b></p>
<p>const std::string &amp; AAX::AsString (<br/>const std::string &amp; inStr ) [inline]<br/></p>
<p>Generic conversion of a string-like object to a std::string<br/></p>
<p><b>13.1.2.3 AsString() [3/3]<br/></b></p>
<p>const std::string &amp; AAX::AsString (<br/>const Exception::Any &amp; inStr ) [inline]<br/></p>
<p>Generic conversion of a string-like object to a std::string<br/></p>
<p>References AAX::Exception::Any::What().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>378 Namespace Documentation<br/></b></p>
<p><b>13.1.2.4 IsNoteOn()<br/></b></p>
<p>bool AAX::IsNoteOn (<br/>const AAX_CMidiPacket &#8727; inPacket ) [inline]<br/></p>
<p>Returns true if inPacket is a Note On message.<br/></p>
<p>References eStatusNibble_NoteOn, and AAX_CMidiPacket::mData.<br/></p>
<p><b>13.1.2.5 IsNoteOff()<br/></b></p>
<p>bool AAX::IsNoteOff (<br/>const AAX_CMidiPacket &#8727; inPacket ) [inline]<br/></p>
<p>Returns true if inPacket is a Note Off message, or a Note On message with velocity zero.<br/></p>
<p>References eStatusNibble_NoteOff, eStatusNibble_NoteOn, and AAX_CMidiPacket::mData.<br/></p>
<p><b>13.1.2.6 IsAllNotesOff()<br/></b></p>
<p>bool AAX::IsAllNotesOff (<br/>const AAX_CMidiPacket &#8727; inPacket ) [inline]<br/></p>
<p>Returns true if inPacket is an All Sound Off or All Notes Off message.<br/></p>
<p>References eChannelModeData_AllNotesOff, eChannelModeData_AllSoundOff, eChannelModeData_Omni&#8592;&#8617;<br/>Off, eChannelModeData_OmniOn, eChannelModeData_PolyOff, eChannelModeData_PolyOn, eStatusNibble_&#8592;&#8617;<br/>ChannelMode, and AAX_CMidiPacket::mData.<br/></p>
<p><b>13.1.2.7 IsAccentedClick()<br/></b></p>
<p>bool AAX::IsAccentedClick (<br/>const AAX_CMidiPacket &#8727; inPacket ) [inline]<br/></p>
<p>Returns true if inPacket is a special Pro Tools accented click message.<br/></p>
<p>References eSpecialData_AccentedClick, eStatusNibble_NoteOn, and AAX_CMidiPacket::mData.<br/></p>
<p>Referenced by IsClick().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 379<br/></b></p>
<p><b>13.1.2.8 IsUnaccentedClick()<br/></b></p>
<p>bool AAX::IsUnaccentedClick (<br/>const AAX_CMidiPacket &#8727; inPacket ) [inline]<br/></p>
<p>Returns true if inPacket is a special Pro Tools unaccented click message.<br/></p>
<p>References eSpecialData_UnaccentedClick, eStatusNibble_NoteOn, and AAX_CMidiPacket::mData.<br/></p>
<p>Referenced by IsClick().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.9 IsClick()<br/></b></p>
<p>bool AAX::IsClick (<br/>const AAX_CMidiPacket &#8727; inPacket ) [inline]<br/></p>
<p>Returns true if inPacket is a special Pro Tools click message.<br/></p>
<p>References IsAccentedClick(), and IsUnaccentedClick().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.10 PageTableParameterMappingsAreEqual()<br/></b></p>
<p>template&lt;class T1 , class T2 &gt;<br/>bool AAX::PageTableParameterMappingsAreEqual (<br/></p>
<p>const T1 &amp; inL,<br/>const T2 &amp; inR ) [inline]<br/></p>
<p>Compare the parameter mappings in two page tables<br/></p>
<p>T1 and T2: Page table class types (e.g. AAX_IACFPageTable, AAX_IPageTable)<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p>Referenced by PageTablesAreEqual().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.11 PageTableParameterNameVariationsAreEqual()<br/></b></p>
<p>template&lt;class T1 , class T2 &gt;<br/>bool AAX::PageTableParameterNameVariationsAreEqual (<br/></p>
<p>const T1 &amp; inL,<br/>const T2 &amp; inR ) [inline]<br/></p>
<p>References AAX_SUCCESS, and AAX_CString::Get().<br/></p>
<p>Referenced by PageTablesAreEqual().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>380 Namespace Documentation<br/></b></p>
<p><b>13.1.2.12 PageTablesAreEqual()<br/></b></p>
<p>template&lt;class T1 , class T2 &gt;<br/>bool AAX::PageTablesAreEqual (<br/></p>
<p>const T1 &amp; inL,<br/>const T2 &amp; inR ) [inline]<br/></p>
<p>References PageTableParameterMappingsAreEqual(), and PageTableParameterNameVariationsAreEqual().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.13 CopyPageTable()<br/></b></p>
<p>template&lt;class T &gt;<br/>void AAX::CopyPageTable (<br/></p>
<p>T &amp; to,<br/>const T &amp; from ) [inline]<br/></p>
<p>Copy a page table<br/></p>
<p>T: A page table class type (e.g. AAX_IACFPageTable, AAX_IPageTable)<br/></p>
<p>References AAX_SUCCESS, AAX_CString::CString(), and AAX_CString::Get().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.14 FindParameterMappingsInPageTable()<br/></b></p>
<p>template&lt;class T &gt;<br/>std::vector&lt;std::pair&lt;int32_t, int32_t&gt; &gt; AAX::FindParameterMappingsInPageTable (<br/></p>
<p>const T &amp; inTable,<br/>AAX_CParamID inParameterID ) [inline]<br/></p>
<p>Find all slots where a particular parameter is mapped<br/></p>
<p>T: A page table class type (e.g. AAX_IACFPageTable, AAX_IPageTable)<br/></p>
<p><b>Returns<br/></b>A vector of pairs of [page index, slot index] each representing a single mapping of the parameter<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p>Referenced by ClearMappedParameterByID().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 381<br/></b></p>
<p><b>13.1.2.15 ClearMappedParameterByID()<br/></b></p>
<p>template&lt;class T &gt;<br/>void AAX::ClearMappedParameterByID (<br/></p>
<p>T &amp; ioTable,<br/>AAX_CParamID inParameterID ) [inline]<br/></p>
<p>Remove all mappings of a particular from a page table<br/></p>
<p>T: A page table class type (e.g. AAX_IACFPageTable, AAX_IPageTable)<br/></p>
<p>References FindParameterMappingsInPageTable().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.16 GetCStringOfLength()<br/></b></p>
<p>void AAX::GetCStringOfLength (<br/>char &#8727; stringOut,<br/>const char &#8727; stringIn,<br/>int32_t aMaxChars ) [inline]<br/></p>
<p>==============================================================<br/></p>
<p>References AAX_ASSERT.<br/></p>
<p><b>13.1.2.17 Caseless_strcmp()<br/></b></p>
<p>int32_t AAX::Caseless_strcmp (<br/>const char &#8727; cs,<br/>const char &#8727; ct ) [inline]<br/></p>
<p><b>13.1.2.18 Binary2String()<br/></b></p>
<p>std::string AAX::Binary2String (<br/>uint32_t binaryValue,<br/>int32_t numBits ) [inline]<br/></p>
<p>Referenced by AsStringPropertyValue().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.19 String2Binary()<br/></b></p>
<p>uint32_t AAX::String2Binary (<br/>const AAX_IString &amp; s ) [inline]<br/></p>
<p>References AAX_ASSERT, AAX_IString::Get(), and AAX_IString::Length().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>382 Namespace Documentation<br/></b></p>
<p><b>13.1.2.20 IsASCII()<br/></b></p>
<p>bool AAX::IsASCII (<br/>char inChar ) [inline]<br/></p>
<p>Referenced by AsStringFourChar(), and IsFourCharASCII().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.21 IsFourCharASCII()<br/></b></p>
<p>bool AAX::IsFourCharASCII (<br/>uint32_t inFourChar ) [inline]<br/></p>
<p>References IsASCII().<br/></p>
<p>Referenced by AsStringPropertyValue().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.22 AsStringFourChar()<br/></b></p>
<p>std::string AAX::AsStringFourChar (<br/>uint32_t inFourChar ) [inline]<br/></p>
<p>References AAX_CONSTEXPR, and IsASCII().<br/></p>
<p>Referenced by AsStringIDTriad(), and AsStringPropertyValue().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.23 AsStringPropertyValue()<br/></b></p>
<p>std::string AAX::AsStringPropertyValue (<br/>AAX_EProperty inProperty,<br/>AAX_CPropertyValue inPropertyValue ) [inline]<br/></p>
<p>References AAX_CONSTEXPR, AAX_eProperty_Constraint_Location, AAX_eProperty_SampleRate, AsString&#8592;&#8617;<br/>FourChar(), Binary2String(), IsFourCharASCII(), and AAX::internal::ToHexadecimal().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.24 AsStringInt32()<br/></b></p>
<p>std::string AAX::AsStringInt32 (<br/>int32_t inInt32 ) [inline]<br/></p>
<p>Referenced by AAX::Exception::ResultError::FormatResult().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 383<br/></b></p>
<p><b>13.1.2.25 AsStringUInt32()<br/></b></p>
<p>std::string AAX::AsStringUInt32 (<br/>uint32_t inUInt32 ) [inline]<br/></p>
<p><b>13.1.2.26 AsStringIDTriad()<br/></b></p>
<p>std::string AAX::AsStringIDTriad (<br/>const AAX_SPlugInIdentifierTriad &amp; inIDTriad ) [inline]<br/></p>
<p>References AsStringFourChar(), AAX_SPlugInIdentifierTriad::mManufacturerID, AAX_SPlugInIdentifierTriad::m&#8592;&#8617;<br/>PlugInID, and AAX_SPlugInIdentifierTriad::mProductID.<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.27 AsStringStemFormat()<br/></b></p>
<p>std::string AAX::AsStringStemFormat (<br/>AAX_EStemFormat inStemFormat,<br/>bool inAbbreviate = false ) [inline]<br/></p>
<p>References AAX_eStemFormat_5_0, AAX_eStemFormat_5_0_2, AAX_eStemFormat_5_0_4, AAX_eStem&#8592;&#8617;<br/>Format_5_1, AAX_eStemFormat_5_1_2, AAX_eStemFormat_5_1_4, AAX_eStemFormat_6_0, AAX_eStem&#8592;&#8617;<br/>Format_6_1, AAX_eStemFormat_7_0_2, AAX_eStemFormat_7_0_4, AAX_eStemFormat_7_0_6, AAX_e&#8592;&#8617;<br/>StemFormat_7_0_DTS, AAX_eStemFormat_7_0_SDDS, AAX_eStemFormat_7_1_2, AAX_eStemFormat_&#8592;&#8617;<br/>7_1_4, AAX_eStemFormat_7_1_6, AAX_eStemFormat_7_1_DTS, AAX_eStemFormat_7_1_SDDS, AAX_e&#8592;&#8617;<br/>StemFormat_9_0_4, AAX_eStemFormat_9_0_6, AAX_eStemFormat_9_1_4, AAX_eStemFormat_9_1_6, AAX&#8592;&#8617;<br/>_eStemFormat_Ambi_1_ACN, AAX_eStemFormat_Ambi_2_ACN, AAX_eStemFormat_Ambi_3_ACN, AAX_&#8592;&#8617;<br/>eStemFormat_Ambi_4_ACN, AAX_eStemFormat_Ambi_5_ACN, AAX_eStemFormat_Ambi_6_ACN, AAX_e&#8592;&#8617;<br/>StemFormat_Ambi_7_ACN, AAX_eStemFormat_Any, AAX_eStemFormat_INT32_MAX, AAX_eStemFormat_LCR,<br/>AAX_eStemFormat_LCRS, AAX_eStemFormat_Mono, AAX_eStemFormat_None, AAX_eStemFormat_Quad,<br/>AAX_eStemFormat_Stereo, and AAX_eStemFormatNum.<br/></p>
<p><b>13.1.2.28 AsStringStemChannel()<br/></b></p>
<p>std::string AAX::AsStringStemChannel (<br/>AAX_EStemFormat inStemFormat,<br/>uint32_t inChannelIndex,<br/>bool inAbbreviate ) [inline]<br/></p>
<p>References AAX_eStemFormat_5_0, AAX_eStemFormat_5_0_2, AAX_eStemFormat_5_0_4, AAX_eStem&#8592;&#8617;<br/>Format_5_1, AAX_eStemFormat_5_1_2, AAX_eStemFormat_5_1_4, AAX_eStemFormat_6_0, AAX_eStem&#8592;&#8617;<br/>Format_6_1, AAX_eStemFormat_7_0_2, AAX_eStemFormat_7_0_4, AAX_eStemFormat_7_0_6, AAX_e&#8592;&#8617;<br/>StemFormat_7_0_DTS, AAX_eStemFormat_7_0_SDDS, AAX_eStemFormat_7_1_2, AAX_eStemFormat_&#8592;&#8617;<br/>7_1_4, AAX_eStemFormat_7_1_6, AAX_eStemFormat_7_1_DTS, AAX_eStemFormat_7_1_SDDS, AAX_e&#8592;&#8617;<br/>StemFormat_9_0_4, AAX_eStemFormat_9_0_6, AAX_eStemFormat_9_1_4, AAX_eStemFormat_9_1_6, AAX&#8592;&#8617;<br/>_eStemFormat_Ambi_1_ACN, AAX_eStemFormat_Ambi_2_ACN, AAX_eStemFormat_Ambi_3_ACN, AAX_&#8592;&#8617;<br/>eStemFormat_Ambi_4_ACN, AAX_eStemFormat_Ambi_5_ACN, AAX_eStemFormat_Ambi_6_ACN, AAX_e&#8592;&#8617;<br/>StemFormat_Ambi_7_ACN, AAX_eStemFormat_Any, AAX_eStemFormat_INT32_MAX, AAX_eStemFormat_LCR,<br/>AAX_eStemFormat_LCRS, AAX_eStemFormat_Mono, AAX_eStemFormat_None, AAX_eStemFormat_Quad,<br/>AAX_eStemFormat_Stereo, and AAX_eStemFormatNum.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>384 Namespace Documentation<br/></b></p>
<p><b>13.1.2.29 AsStringResult()<br/></b></p>
<p>std::string AAX::AsStringResult (<br/>AAX_Result inResult ) [inline]<br/></p>
<p>References AAX_ERROR_ACF_ERROR, AAX_ERROR_ARGUMENT_BUFFER_OVERFLOW, AAX_ERROR_&#8592;&#8617;<br/>CONTEXT_ALREADY_HAS_METERS, AAX_ERROR_DIRECT_ACCESS_OUT_OF_BOUNDS, AAX_ERROR&#8592;&#8617;<br/>_DUPLICATE_EFFECT_ID, AAX_ERROR_DUPLICATE_TYPE_ID, AAX_ERROR_EMPTY_EFFECT_NAME,<br/>AAX_ERROR_FIELD_TYPE_DOES_NOT_SUPPORT_DIRECT_ACCESS, AAX_ERROR_FIFO_FULL, AAX&#8592;&#8617;<br/>_ERROR_INCORRECT_CHUNK_SIZE, AAX_ERROR_INITIALIZING_PACKET_STREAM_THREAD, AAX&#8592;&#8617;<br/>_ERROR_INVALID_ARGUMENT, AAX_ERROR_INVALID_CHUNK_ID, AAX_ERROR_INVALID_CHUNK_&#8592;&#8617;<br/>INDEX, AAX_ERROR_INVALID_FIELD_INDEX, AAX_ERROR_INVALID_INTERNAL_DATA, AAX_ERROR_&#8592;&#8617;<br/>INVALID_METER_INDEX, AAX_ERROR_INVALID_METER_TYPE, AAX_ERROR_INVALID_PARAMETER_&#8592;&#8617;<br/>ID, AAX_ERROR_INVALID_PARAMETER_INDEX, AAX_ERROR_INVALID_PATH, AAX_ERROR_INVALID_&#8592;&#8617;<br/>STRING_CONVERSION, AAX_ERROR_INVALID_VIEW_SIZE, AAX_ERROR_MALFORMED_CHUNK, AAX&#8592;&#8617;<br/>_ERROR_MIXER_THREAD_FALLING_BEHIND, AAX_ERROR_NO_COMPONENTS, AAX_ERROR_NOT&#8592;&#8617;<br/>_INITIALIZED, AAX_ERROR_NOTIFICATION_FAILED, AAX_ERROR_NULL_ARGUMENT, AAX_ERROR&#8592;&#8617;<br/>_NULL_COMPONENT, AAX_ERROR_NULL_OBJECT, AAX_ERROR_OLDER_VERSION, AAX_ERROR_&#8592;&#8617;<br/>PLUGIN_BEGIN, AAX_ERROR_PLUGIN_END, AAX_ERROR_PLUGIN_NOT_AUTHORIZED, AAX_ERROR&#8592;&#8617;<br/>_PLUGIN_NULL_PARAMETER, AAX_ERROR_PORT_ID_OUT_OF_RANGE, AAX_ERROR_POST_PACKET&#8592;&#8617;<br/>_FAILED, AAX_ERROR_PROPERTY_UNDEFINED, AAX_ERROR_SIGNED_INT_OVERFLOW, AAX_ERROR&#8592;&#8617;<br/>_TOD_BEHIND, AAX_ERROR_UNIMPLEMENTED, AAX_ERROR_UNKNOWN_EXCEPTION, AAX_ERROR&#8592;&#8617;<br/>_UNKNOWN_ID, AAX_ERROR_UNKNOWN_PLUGIN, AAX_RESULT_ADD_FIELD_UNSUPPORTED_FIELD&#8592;&#8617;<br/>_TYPE, AAX_RESULT_NEW_PACKET_POSTED, AAX_RESULT_PACKET_STREAM_NOT_EMPTY, AAX_&#8592;&#8617;<br/>SUCCESS, and DEFINE_AAX_ERROR_STRING.<br/></p>
<p>Referenced by AAX::Exception::ResultError::FormatResult().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.30 AsStringSupportLevel()<br/></b></p>
<p>std::string AAX::AsStringSupportLevel (<br/>AAX_ESupportLevel inSupportLevel ) [inline]<br/></p>
<p>References AAX_eSupportLevel_ByProperty, AAX_eSupportLevel_Disabled, AAX_eSupportLevel_Supported,<br/>AAX_eSupportLevel_Uninitialized, and AAX_eSupportLevel_Unsupported.<br/></p>
<p><b>13.1.2.31 SafeLog()<br/></b></p>
<p>double AAX::SafeLog (<br/>double aValue ) [inline]<br/></p>
<p>Double-precision safe log function. Returns zero for input values that are &lt;= 0.0.<br/></p>
<p>Referenced by AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;::NormalizedToReal(), and AAX_CLogTaper&#8592;&#8617;<br/>Delegate&lt; T, RealPrecision &gt;::RealToNormalized().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 385<br/></b></p>
<p><b>13.1.2.32 SafeLogf()<br/></b></p>
<p>float AAX::SafeLogf (<br/>float aValue ) [inline]<br/></p>
<p>Single-precision safe log function. Returns zero for input values that are &lt;= 0.0.<br/></p>
<p><b>13.1.2.33 IsParameterIDEqual()<br/></b></p>
<p>AAX_CBoolean AAX::IsParameterIDEqual (<br/>AAX_CParamID iParam1,<br/>AAX_CParamID iParam2 ) [inline]<br/></p>
<p>Helper function to check if two parameter IDs are equivalent.<br/></p>
<p><b>13.1.2.34 IsEffectIDEqual()<br/></b></p>
<p>AAX_CBoolean AAX::IsEffectIDEqual (<br/>const AAX_IString &#8727; iEffectID1,<br/>const AAX_IString &#8727; iEffectID2 ) [inline]<br/></p>
<p>Helper function to check if two Effect IDs are equivalent.<br/></p>
<p>References AAX_IString::Get().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.35 IsAvidNotification()<br/></b></p>
<p>AAX_CBoolean AAX::IsAvidNotification (<br/>AAX_CTypeID inNotificationID ) [inline]<br/></p>
<p>Helper function to check if a notification ID is reserved for host notifications.<br/></p>
<p><b>13.1.2.36 alignFree()<br/></b></p>
<p>void AAX::alignFree (<br/>void &#8727; p ) [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>386 Namespace Documentation<br/></b></p>
<p><b>13.1.2.37 alignMalloc()<br/></b></p>
<p>template&lt;class T &gt;<br/>T&#8727; AAX::alignMalloc (<br/></p>
<p>int iArraySize,<br/>int iAlignment )<br/></p>
<p><b>13.1.2.38 DeDenormal() [1/2]<br/></b></p>
<p>void AAX::DeDenormal (<br/>double &amp; iValue ) [inline]<br/></p>
<p>Clamps very small floating point values to zero.<br/></p>
<p>On Pentiums and Pentium IIs the generation of denormal floats causes enormous performance losses. This routine<br/>removes denormals by clamping very small values to zero. The clamping threshold is very small, but is not the<br/>absolute minimum. If absolute minimum clamping is desired, use AAX::DeDenormalFine()<br/></p>
<p>References cDenormalAvoidanceOffset.<br/></p>
<p><b>13.1.2.39 DeDenormal() [2/2]<br/></b></p>
<p>void AAX::DeDenormal (<br/>float &amp; iValue ) [inline]<br/></p>
<p>Clamps very small floating point values to zero.<br/></p>
<p>On Pentiums and Pentium IIs the generation of denormal floats causes enormous performance losses. This routine<br/>removes denormals by clamping very small values to zero. The clamping threshold is very small, but is not the<br/>absolute minimum. If absolute minimum clamping is desired, use AAX::DeDenormalFine()<br/></p>
<p>References cFloatDenormalAvoidanceOffset.<br/></p>
<p><b>13.1.2.40 DeDenormalFine()<br/></b></p>
<p>void AAX::DeDenormalFine (<br/>float &amp; iValue ) [inline]<br/></p>
<p>Similar to AAX::DeDenormal(), but uses the minimum possible normal float value as the clamping threshold<br/></p>
<p><b>13.1.2.41 FilterDenormals()<br/></b></p>
<p>void AAX::FilterDenormals (<br/>float &#8727; inSamples,<br/>int32_t inLength ) [inline]<br/></p>
<p>Round all denormal/subnormal samples in a buffer to zero.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 387<br/></b></p>
<p><b>Parameters<br/></b>in inSamples Samples to convert<br/>in inLength Number of samples in inSamples<br/></p>
<p>References fabsf().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.42 ClampToZero()<br/></b></p>
<p>template&lt;class GFLOAT &gt;<br/>GFLOAT AAX::ClampToZero (<br/></p>
<p>GFLOAT iValue,<br/>GFLOAT iClampThreshold ) [inline]<br/></p>
<p><b>13.1.2.43 ZeroMemorySW()<br/></b></p>
<p>void AAX::ZeroMemorySW (<br/>void &#8727; iPointer,<br/>int iNumBytes ) [inline]<br/></p>
<p><b>13.1.2.44 ZeroMemoryDW()<br/></b></p>
<p>void AAX::ZeroMemoryDW (<br/>void &#8727; iPointer,<br/>int iNumBytes ) [inline]<br/></p>
<p><b>13.1.2.45 Fill() [1/3]<br/></b></p>
<p>template&lt;typename T , int N&gt;<br/>void AAX::Fill (<br/></p>
<p>T &#8727; iArray,<br/>const T &#8727; iVal )<br/></p>
<p>Referenced by Fill().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>388 Namespace Documentation<br/></b></p>
<p><b>13.1.2.46 Fill() [2/3]<br/></b></p>
<p>template&lt;typename T , int M, int N&gt;<br/>void AAX::Fill (<br/></p>
<p>T &#8727; iArray,<br/>const T &#8727; iVal ) [inline]<br/></p>
<p>References Fill().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.47 Fill() [3/3]<br/></b></p>
<p>template&lt;typename T , int L, int M, int N&gt;<br/>void AAX::Fill (<br/></p>
<p>T &#8727; iArray,<br/>const T &#8727; iVal ) [inline]<br/></p>
<p>References Fill().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.48 fabs() [1/2]<br/></b></p>
<p>double AAX::fabs (<br/>double iVal ) [inline]<br/></p>
<p>References fabs().<br/></p>
<p>Referenced by fabsf().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.49 fabs() [2/2]<br/></b></p>
<p>float AAX::fabs (<br/>float iVal ) [inline]<br/></p>
<p>Referenced by AbsMax(), and fabs().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.50 fabsf()<br/></b></p>
<p>float AAX::fabsf (<br/>float iVal ) [inline]<br/></p>
<p>References fabs().<br/></p>
<p>Referenced by FilterDenormals(), and AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 389<br/></b></p>
<p><b>13.1.2.51 AbsMax()<br/></b></p>
<p>template&lt;class T &gt;<br/>T AAX::AbsMax (<br/></p>
<p>const T &amp; iValue,<br/>const T &amp; iMax ) [inline]<br/></p>
<p>References fabs().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.52 MinMax()<br/></b></p>
<p>template&lt;class T &gt;<br/>T AAX::MinMax (<br/></p>
<p>const T &amp; iValue,<br/>const T &amp; iMin,<br/>const T &amp; iMax ) [inline]<br/></p>
<p><b>13.1.2.53 Max()<br/></b></p>
<p>template&lt;class T &gt;<br/>T AAX::Max (<br/></p>
<p>const T &amp; iValue1,<br/>const T &amp; iValue2 ) [inline]<br/></p>
<p><b>13.1.2.54 Min()<br/></b></p>
<p>template&lt;class T &gt;<br/>T AAX::Min (<br/></p>
<p>const T &amp; iValue1,<br/>const T &amp; iValue2 ) [inline]<br/></p>
<p><b>13.1.2.55 Sign()<br/></b></p>
<p>template&lt;class T &gt;<br/>T AAX::Sign (<br/></p>
<p>const T &amp; iValue ) [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>390 Namespace Documentation<br/></b></p>
<p><b>13.1.2.56 PolyEval()<br/></b></p>
<p>double AAX::PolyEval (<br/>double x,<br/>const double &#8727; coefs,<br/>int numCoefs ) [inline]<br/></p>
<p><b>13.1.2.57 CeilLog2()<br/></b></p>
<p>double AAX::CeilLog2 (<br/>double iValue ) [inline]<br/></p>
<p><b>13.1.2.58 SinCosMix()<br/></b></p>
<p>void AAX::SinCosMix (<br/>float aLinearMix,<br/>float &amp; aSinMix,<br/>float &amp; aCosMix ) [inline]<br/></p>
<p>References cHalfPi.<br/></p>
<p><b>13.1.2.59 FastRound2Int32() [1/2]<br/></b></p>
<p>int32_t AAX::FastRound2Int32 (<br/>double iVal ) [inline]<br/></p>
<p>Round to Int32.<br/></p>
<p><b>Parameters<br/></b>in iVal Value to convert<br/></p>
<p>Referenced by FastRndDbl2Int32(), FastRound2Int32(), and FastTrunc2Int32().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.60 FastRound2Int32() [2/2]<br/></b></p>
<p>int32_t AAX::FastRound2Int32 (<br/>float iVal ) [inline]<br/></p>
<p>Round to Int32.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 391<br/></b></p>
<p><b>Parameters<br/></b>in iVal Value to convert<br/></p>
<p>References FastRound2Int32().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.61 FastRndDbl2Int32()<br/></b></p>
<p>int32_t AAX::FastRndDbl2Int32 (<br/>double iVal ) [inline]<br/></p>
<p><b>Deprecated<br/></b></p>
<p>References FastRound2Int32().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.62 FastTrunc2Int32() [1/2]<br/></b></p>
<p>int32_t AAX::FastTrunc2Int32 (<br/>double iVal ) [inline]<br/></p>
<p>Float to Int conversion with truncation.<br/></p>
<p><b>Parameters<br/></b>in iVal Value to convert<br/></p>
<p><b>Note<br/></b>This truncation is NOT identical to C style casting. Because the Intel (and I would assume PowerPC) proces-<br/>sors use convergent rounding by default, exactly whole odd numbers will truncate down by 1.0 (e.g. 0.0-&gt;0,<br/>1.0-&gt;0, 2.0-&gt;2, 3.0-&gt;2). Surprisingly, even with these limitations this fast float to int conversion is often very<br/>useful in practice, as long as one is aware of these issues.<br/></p>
<p>References FastRound2Int32().<br/></p>
<p>Referenced by AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt;::DoTableLookupExtraFast(), and AAX&#8592;&#8617;<br/>_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt;::DoTableLookupExtraFastMulti().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.63 FastTrunc2Int32() [2/2]<br/></b></p>
<p>int32_t AAX::FastTrunc2Int32 (<br/>float iVal ) [inline]<br/></p>
<p>Float to Int conversion with truncation.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>392 Namespace Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iVal Value to convert<br/></p>
<p><b>13.1.2.64 FastRound2Int64()<br/></b></p>
<p>int64_t AAX::FastRound2Int64 (<br/>double iVal ) [inline]<br/></p>
<p>Round to Int64.<br/></p>
<p>Taken from Paul V's implementation in Sys_VecUtils. This only works on values smaller than 2&#8743;52.<br/></p>
<p><b>Parameters<br/></b>in iVal Value to convert<br/></p>
<p><b>13.1.2.65 GetInt32RPDF()<br/></b></p>
<p>int32_t AAX::GetInt32RPDF (<br/>int32_t &#8727; iSeed ) [inline]<br/></p>
<p>References cSeedDivisor.<br/></p>
<p>Referenced by GetRPDFWithAmplitudeOne(), and GetRPDFWithAmplitudeOneHalf().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.66 GetFastInt32RPDF()<br/></b></p>
<p>int32_t AAX::GetFastInt32RPDF (<br/>int32_t &#8727; iSeed ) [inline]<br/></p>
<p>CALL: Calculate pseudo-random 32 bit number based on linear congruential method.<br/></p>
<p>This is required if you want our master bypass functionality in the host to hook up to your bypass parameters.<br/></p>
<p><b>Parameters<br/></b>in iSeed Seed for random generator<br/></p>
<p><b>Note<br/></b>This method produces lower quality random numbers (i.e. less random) than plain old GetInt32RPDF, but in<br/>many cases it should be plenty good.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 393<br/></b></p>
<p>Referenced by GetFastRPDFWithAmplitudeOne(), and GetTPDFWithAmplitudeOne().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>13.1.2.67 GetRPDFWithAmplitudeOneHalf()<br/></b></p>
<p>float AAX::GetRPDFWithAmplitudeOneHalf (<br/>int32_t &#8727; iSeed ) [inline]<br/></p>
<p>References cNormalizeLongToAmplitudeOneHalf, and GetInt32RPDF().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.68 GetRPDFWithAmplitudeOne()<br/></b></p>
<p>float AAX::GetRPDFWithAmplitudeOne (<br/>int32_t &#8727; iSeed ) [inline]<br/></p>
<p>References cNormalizeLongToAmplitudeOne, and GetInt32RPDF().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.69 GetFastRPDFWithAmplitudeOne()<br/></b></p>
<p>float AAX::GetFastRPDFWithAmplitudeOne (<br/>int32_t &#8727; iSeed ) [inline]<br/></p>
<p>References cNormalizeLongToAmplitudeOne, and GetFastInt32RPDF().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.2.70 GetTPDFWithAmplitudeOne()<br/></b></p>
<p>float AAX::GetTPDFWithAmplitudeOne (<br/>int32_t &#8727; iSeed ) [inline]<br/></p>
<p>References cNormalizeLongToAmplitudeOne, and GetFastInt32RPDF().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>13.1.3 Variable Documentation<br/></b></p>
<p><b>13.1.3.1 cBigEndian<br/></b></p>
<p>const int AAX::cBigEndian =0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>394 Namespace Documentation<br/></b></p>
<p><b>13.1.3.2 cLittleEndian<br/></b></p>
<p>const int AAX::cLittleEndian =1<br/></p>
<p><b>13.1.3.3 cPi<br/></b></p>
<p>const double AAX::cPi = 3.1415926535897932384626433832795<br/></p>
<p><b>13.1.3.4 cTwoPi<br/></b></p>
<p>const double AAX::cTwoPi = 6.2831853071795862319959269370884<br/></p>
<p><b>13.1.3.5 cHalfPi<br/></b></p>
<p>const double AAX::cHalfPi = 1.5707963267948965579989817342721<br/></p>
<p>Referenced by SinCosMix().<br/></p>
<p><b>13.1.3.6 cQuarterPi<br/></b></p>
<p>const double AAX::cQuarterPi = 0.78539816339744827899949086713605<br/></p>
<p><b>13.1.3.7 cRootTwo<br/></b></p>
<p>const double AAX::cRootTwo = 1.4142135623730950488016887242097<br/></p>
<p><b>13.1.3.8 cOneOverRootTwo<br/></b></p>
<p>const double AAX::cOneOverRootTwo = 0.70710678118654752440084436210485<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.1 AAX Namespace Reference 395<br/></b></p>
<p><b>13.1.3.9 cPos3dB<br/></b></p>
<p>const double AAX::cPos3dB =1.4142135623730950488016887242097<br/></p>
<p><b>13.1.3.10 cNeg3dB<br/></b></p>
<p>const double AAX::cNeg3dB =0.70710678118654752440084436210485<br/></p>
<p><b>13.1.3.11 cPos6dB<br/></b></p>
<p>const double AAX::cPos6dB =2.0<br/></p>
<p><b>13.1.3.12 cNeg6dB<br/></b></p>
<p>const double AAX::cNeg6dB =0.5<br/></p>
<p><b>13.1.3.13 cNormalizeLongToAmplitudeOneHalf<br/></b></p>
<p>const double AAX::cNormalizeLongToAmplitudeOneHalf = 0.00000000023283064365386962890625<br/></p>
<p>Referenced by GetRPDFWithAmplitudeOneHalf().<br/></p>
<p><b>13.1.3.14 cNormalizeLongToAmplitudeOne<br/></b></p>
<p>const double AAX::cNormalizeLongToAmplitudeOne = 1.0/double(1&lt;&lt;31)<br/></p>
<p>Referenced by GetFastRPDFWithAmplitudeOne(), GetRPDFWithAmplitudeOne(), and GetTPDFWithAmplitude&#8592;&#8617;<br/>One().<br/></p>
<p><b>13.1.3.15 cMilli<br/></b></p>
<p>const double AAX::cMilli =0.001<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>396 Namespace Documentation<br/></b></p>
<p><b>13.1.3.16 cMicro<br/></b></p>
<p>const double AAX::cMicro =0.001&#8727;0.001<br/></p>
<p><b>13.1.3.17 cNano<br/></b></p>
<p>const double AAX::cNano =0.001&#8727;0.001&#8727;0.001<br/></p>
<p><b>13.1.3.18 cPico<br/></b></p>
<p>const double AAX::cPico =0.001&#8727;0.001&#8727;0.001&#8727;0.001<br/></p>
<p><b>13.1.3.19 cKilo<br/></b></p>
<p>const double AAX::cKilo =1000.0<br/></p>
<p><b>13.1.3.20 cMega<br/></b></p>
<p>const double AAX::cMega =1000.0&#8727;1000.0<br/></p>
<p><b>13.1.3.21 cGiga<br/></b></p>
<p>const double AAX::cGiga =1000.0&#8727;1000.0&#8727;1000.0<br/></p>
<p><b>13.1.3.22 cDenormalAvoidanceOffset<br/></b></p>
<p>const double AAX::cDenormalAvoidanceOffset =3.0e-34<br/></p>
<p>Referenced by DeDenormal().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.2 AAX::Exception Namespace Reference 397<br/></b></p>
<p><b>13.1.3.23 cFloatDenormalAvoidanceOffset<br/></b></p>
<p>const float AAX::cFloatDenormalAvoidanceOffset =3.0e-20f<br/></p>
<p>Referenced by DeDenormal().<br/></p>
<p><b>13.1.3.24 kPowExtent<br/></b></p>
<p>const unsigned int AAX::kPowExtent = 9<br/></p>
<p><b>13.1.3.25 kPowTableSize<br/></b></p>
<p>const unsigned int AAX::kPowTableSize = 1 &lt;&lt; kPowExtent<br/></p>
<p><b>13.1.3.26 cSeedDivisor<br/></b></p>
<p>const float AAX::cSeedDivisor = 1/127773.0f<br/></p>
<p>Referenced by GetInt32RPDF().<br/></p>
<p><b>13.1.3.27 cInitialSeedValue<br/></b></p>
<p>const int32_t AAX::cInitialSeedValue =0x00F54321<br/></p>
<p><b>13.2 AAX::Exception Namespace Reference<br/></b></p>
<p><b>13.2.1 Description<br/></b></p>
<p>AAX exception classes<br/></p>
<p>All AAX exception classes inherit from AAX::Exception::Any<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class Any<br/>&#8226; class ResultError<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>398 Namespace Documentation<br/></b></p>
<p><b>13.3 AAX::internal Namespace Reference<br/></b></p>
<p><b>Functions<br/></b>&#8226; template&lt;typename T &gt;<br/></p>
<p>std::string ToHexadecimal (T inValue, bool inLeadingZeros=false)<br/></p>
<p><b>13.3.1 Function Documentation<br/></b></p>
<p><b>13.3.1.1 ToHexadecimal()<br/></b></p>
<p>template&lt;typename T &gt;<br/>std::string AAX::internal::ToHexadecimal (<br/></p>
<p>T inValue,<br/>bool inLeadingZeros = false )<br/></p>
<p>References AAX_CONSTEXPR.<br/>Referenced by AAX::AsStringPropertyValue().<br/>Here is the caller graph for this function:<br/></p>
<p><b>13.4 AAX_ChunkDataParserDefs Namespace Reference<br/></b></p>
<p><b>13.4.1 Description<br/></b></p>
<p>Constants used by ChunkDataParser class.<br/></p>
<p><b>Variables<br/></b>&#8226; const int32_t FLOAT_TYPE = 1<br/>&#8226; const char FLOAT_STRING_IDENTIFIER [ ] = &quot;f_&quot;<br/>&#8226; const int32_t LONG_TYPE = 2<br/>&#8226; const char LONG_STRING_IDENTIFIER [ ] = &quot;l_&quot;<br/>&#8226; const int32_t DOUBLE_TYPE = 3<br/>&#8226; const char DOUBLE_STRING_IDENTIFIER [ ] = &quot;d_&quot;<br/>&#8226; const size_t DOUBLE_TYPE_SIZE = 8<br/>&#8226; const size_t DOUBLE_TYPE_INCR = 8<br/>&#8226; const int32_t SHORT_TYPE = 4<br/>&#8226; const char SHORT_STRING_IDENTIFIER [ ] = &quot;s_&quot;<br/>&#8226; const size_t SHORT_TYPE_SIZE = 2<br/>&#8226; const size_t SHORT_TYPE_INCR = 4<br/>&#8226; const int32_t STRING_TYPE = 5<br/>&#8226; const char STRING_STRING_IDENTIFIER [ ] = &quot;r_&quot;<br/>&#8226; const size_t MAX_STRINGDATA_LENGTH = 255<br/>&#8226; const size_t DEFAULT32BIT_TYPE_SIZE = 4<br/>&#8226; const size_t DEFAULT32BIT_TYPE_INCR = 4<br/>&#8226; const size_t STRING_IDENTIFIER_SIZE = 2<br/>&#8226; const int32_t NAME_NOT_FOUND = -1<br/>&#8226; const size_t MAX_NAME_LENGTH = 255<br/>&#8226; const int32_t BUILD_DATA_FAILED = -333<br/>&#8226; const int32_t HEADER_SIZE = 4<br/>&#8226; const int32_t VERSION_ID_1 = 0x01010101<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.4 AAX_ChunkDataParserDefs Namespace Reference 399<br/></b></p>
<p><b>13.4.2 Variable Documentation<br/></b></p>
<p><b>13.4.2.1 FLOAT_TYPE<br/></b></p>
<p>const int32_t AAX_ChunkDataParserDefs::FLOAT_TYPE = 1<br/></p>
<p><b>13.4.2.2 FLOAT_STRING_IDENTIFIER<br/></b></p>
<p>const char AAX_ChunkDataParserDefs::FLOAT_STRING_IDENTIFIER[] = &quot;f_&quot;<br/></p>
<p><b>13.4.2.3 LONG_TYPE<br/></b></p>
<p>const int32_t AAX_ChunkDataParserDefs::LONG_TYPE = 2<br/></p>
<p><b>13.4.2.4 LONG_STRING_IDENTIFIER<br/></b></p>
<p>const char AAX_ChunkDataParserDefs::LONG_STRING_IDENTIFIER[] = &quot;l_&quot;<br/></p>
<p><b>13.4.2.5 DOUBLE_TYPE<br/></b></p>
<p>const int32_t AAX_ChunkDataParserDefs::DOUBLE_TYPE = 3<br/></p>
<p><b>13.4.2.6 DOUBLE_STRING_IDENTIFIER<br/></b></p>
<p>const char AAX_ChunkDataParserDefs::DOUBLE_STRING_IDENTIFIER[] = &quot;d_&quot;<br/></p>
<p><b>13.4.2.7 DOUBLE_TYPE_SIZE<br/></b></p>
<p>const size_t AAX_ChunkDataParserDefs::DOUBLE_TYPE_SIZE = 8<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>400 Namespace Documentation<br/></b></p>
<p><b>13.4.2.8 DOUBLE_TYPE_INCR<br/></b></p>
<p>const size_t AAX_ChunkDataParserDefs::DOUBLE_TYPE_INCR = 8<br/></p>
<p><b>13.4.2.9 SHORT_TYPE<br/></b></p>
<p>const int32_t AAX_ChunkDataParserDefs::SHORT_TYPE = 4<br/></p>
<p><b>13.4.2.10 SHORT_STRING_IDENTIFIER<br/></b></p>
<p>const char AAX_ChunkDataParserDefs::SHORT_STRING_IDENTIFIER[] = &quot;s_&quot;<br/></p>
<p><b>13.4.2.11 SHORT_TYPE_SIZE<br/></b></p>
<p>const size_t AAX_ChunkDataParserDefs::SHORT_TYPE_SIZE = 2<br/></p>
<p><b>13.4.2.12 SHORT_TYPE_INCR<br/></b></p>
<p>const size_t AAX_ChunkDataParserDefs::SHORT_TYPE_INCR = 4<br/></p>
<p><b>13.4.2.13 STRING_TYPE<br/></b></p>
<p>const int32_t AAX_ChunkDataParserDefs::STRING_TYPE = 5<br/></p>
<p><b>13.4.2.14 STRING_STRING_IDENTIFIER<br/></b></p>
<p>const char AAX_ChunkDataParserDefs::STRING_STRING_IDENTIFIER[] = &quot;r_&quot;<br/></p>
<p><b>13.4.2.15 MAX_STRINGDATA_LENGTH<br/></b></p>
<p>const size_t AAX_ChunkDataParserDefs::MAX_STRINGDATA_LENGTH = 255<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>13.4 AAX_ChunkDataParserDefs Namespace Reference 401<br/></b></p>
<p><b>13.4.2.16 DEFAULT32BIT_TYPE_SIZE<br/></b></p>
<p>const size_t AAX_ChunkDataParserDefs::DEFAULT32BIT_TYPE_SIZE = 4<br/></p>
<p><b>13.4.2.17 DEFAULT32BIT_TYPE_INCR<br/></b></p>
<p>const size_t AAX_ChunkDataParserDefs::DEFAULT32BIT_TYPE_INCR = 4<br/></p>
<p><b>13.4.2.18 STRING_IDENTIFIER_SIZE<br/></b></p>
<p>const size_t AAX_ChunkDataParserDefs::STRING_IDENTIFIER_SIZE = 2<br/></p>
<p><b>13.4.2.19 NAME_NOT_FOUND<br/></b></p>
<p>const int32_t AAX_ChunkDataParserDefs::NAME_NOT_FOUND = -1<br/></p>
<p><b>13.4.2.20 MAX_NAME_LENGTH<br/></b></p>
<p>const size_t AAX_ChunkDataParserDefs::MAX_NAME_LENGTH = 255<br/></p>
<p><b>13.4.2.21 BUILD_DATA_FAILED<br/></b></p>
<p>const int32_t AAX_ChunkDataParserDefs::BUILD_DATA_FAILED = -333<br/></p>
<p><b>13.4.2.22 HEADER_SIZE<br/></b></p>
<p>const int32_t AAX_ChunkDataParserDefs::HEADER_SIZE = 4<br/></p>
<p><b>13.4.2.23 VERSION_ID_1<br/></b></p>
<p>const int32_t AAX_ChunkDataParserDefs::VERSION_ID_1 = 0x01010101<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>402 Namespace Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 14<br/></b></p>
<p><b>Class Documentation<br/></b></p>
<p><b>14.1 _acfUID Struct Reference<br/></b></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; uint32_t Data1<br/>&#8226; uint16_t Data2<br/>&#8226; uint16_t Data3<br/>&#8226; uint8_t Data4 [8]<br/></p>
<p><b>14.1.1 Member Data Documentation<br/></b></p>
<p><b>14.1.1.1 Data1<br/></b></p>
<p>uint32_t _acfUID::Data1<br/></p>
<p><b>14.1.1.2 Data2<br/></b></p>
<p>uint16_t _acfUID::Data2<br/></p>
<p><b>14.1.1.3 Data3<br/></b></p>
<p>uint16_t _acfUID::Data3<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>404 Class Documentation<br/></b></p>
<p><b>14.1.1.4 Data4<br/></b></p>
<p>uint8_t _acfUID::Data4[8]<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_ACFInterface.doxygen<br/></p>
<p><b>14.2 AAX_AggregateResult Class Reference<br/></b></p>
<p>#include &lt;AAX_Exception.h&gt;<br/></p>
<p><b>14.2.1 Description<br/></b></p>
<p>RAII failure count convenience class for use with AAX_CAPTURE() or AAX_CAPTURE_MULT()<br/></p>
<p>Pass this object as the first argument in a series of AAX_CAPTURE() calls to count the number of failures that occur<br/>and to re-throw the last error if zero of the attempted calls succeed.<br/>// example A: throw if all operations fail<br/>AAX_AggregateResult agg;<br/>AAX_CAPTURE( agg, RegisterThingA(); );<br/>AAX_CAPTURE( agg, RegisterThingB(); );<br/>AAX_CAPTURE( agg, RegisterThingC(); );<br/></p>
<p>In this example, when agg goes out of scope it checks whether any of A, B, or C succeeded. If none succeeded<br/>then the last error that was encountered is raised via an AAX_CheckedResult::Exception. If at least one of the<br/>calls succeeded then any failures are swallowed and execution continues as normal. This approach can be useful<br/>in cases where you want to run every operation in a group and you only want a failure to be returned if all of the<br/>operations failed.<br/>// example B: throw if any operation fails<br/>AAX_AggregateResult agg;<br/>AAX_CAPTURE( agg, ImportantOperationW(); );<br/>AAX_CAPTURE( agg, ImportantOperationX(); );<br/>AAX_CAPTURE( agg, ImportantOperationY(); );<br/>AAX_CheckedResult err = agg;<br/></p>
<p>In this example, the last error encountered by agg is converted to an AAX_CheckedResult. This will result in an<br/>AAX_CheckedResult::Exception even if at least one of the attempted operations succeeded. This approach can<br/>be useful in cases where you want all operations in a group to be executed before an error is raised for any failure<br/>within the group.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_AggregateResult ()=default<br/>&#8226; &#8764;AAX_AggregateResult ()<br/>&#8226; AAX_AggregateResult &amp; operator= (AAX_Result inResult)<br/></p>
<p>Overloaded operator=() for conversion from AAX_Result.<br/>&#8226; operator AAX_Result ()<br/></p>
<p>Implicit conversion to AAX_Result clears the state.<br/>&#8226; void Check () const<br/>&#8226; void Clear ()<br/>&#8226; AAX_Result LastFailure () const<br/>&#8226; int NumFailed () const<br/>&#8226; int NumSucceeded () const<br/>&#8226; int NumAttempted () const<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.2 AAX_AggregateResult Class Reference 405<br/></b></p>
<p><b>14.2.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.2.2.1 AAX_AggregateResult()<br/></b></p>
<p>AAX_AggregateResult::AAX_AggregateResult ( ) [default]<br/></p>
<p><b>14.2.2.2 </b>&#8764;<b>AAX_AggregateResult()<br/></b></p>
<p>AAX_AggregateResult::&#8764;AAX_AggregateResult ( ) [inline]<br/></p>
<p>References Check().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.2.3 Member Function Documentation<br/></b></p>
<p><b>14.2.3.1 operator=()<br/></b></p>
<p>AAX_AggregateResult&amp; AAX_AggregateResult::operator= (<br/>AAX_Result inResult ) [inline]<br/></p>
<p>Overloaded operator=() for conversion from AAX_Result.<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>14.2.3.2 operator AAX_Result()<br/></b></p>
<p>AAX_AggregateResult::operator AAX_Result ( ) [inline]<br/></p>
<p>Implicit conversion to AAX_Result clears the state.<br/></p>
<p>References Clear(), and LastFailure().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.2.3.3 Check()<br/></b></p>
<p>void AAX_AggregateResult::Check ( ) const [inline]<br/></p>
<p>Referenced by &#8764;AAX_AggregateResult().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>406 Class Documentation<br/></b></p>
<p><b>14.2.3.4 Clear()<br/></b></p>
<p>void AAX_AggregateResult::Clear ( ) [inline]<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p>Referenced by operator AAX_Result().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.2.3.5 LastFailure()<br/></b></p>
<p>AAX_Result AAX_AggregateResult::LastFailure ( ) const [inline]<br/></p>
<p>Referenced by operator AAX_Result().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.2.3.6 NumFailed()<br/></b></p>
<p>int AAX_AggregateResult::NumFailed ( ) const [inline]<br/></p>
<p><b>14.2.3.7 NumSucceeded()<br/></b></p>
<p>int AAX_AggregateResult::NumSucceeded ( ) const [inline]<br/></p>
<p><b>14.2.3.8 NumAttempted()<br/></b></p>
<p>int AAX_AggregateResult::NumAttempted ( ) const [inline]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_Exception.h<br/></p>
<p><b>14.3 AAX_CArrayDataBuffer</b>&lt; <b>D </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CArrayDataBuffer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CArrayDataBuffer&lt; D &gt;:<br/></p>
<p>Collaboration diagram for AAX_CArrayDataBuffer&lt; D &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.3 AAX_CArrayDataBuffer</b>&lt; <b>D </b>&gt; <b>Class Template Reference 407<br/></b></p>
<p><b>14.3.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>class D</b>&gt;<br/><b>class AAX_CArrayDataBuffer</b>&lt; <b>D </b>&gt;<br/></p>
<p>A convenience class for array data buffers.<br/></p>
<p>The data payload is an array of D<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CArrayDataBuffer (AAX_CTypeID inType, std::vector&lt; D &gt; const &amp;inData)<br/>&#8226; AAX_CArrayDataBuffer (AAX_CTypeID inType, std::vector&lt; D &gt; &amp;&amp;inData)<br/>&#8226; AAX_CArrayDataBuffer (AAX_CArrayDataBuffer const &amp;)=default<br/>&#8226; AAX_CArrayDataBuffer (AAX_CArrayDataBuffer &amp;&amp;)=default<br/>&#8226; &#8764;AAX_CArrayDataBuffer (void) AAX_OVERRIDE=default<br/>&#8226; AAX_CArrayDataBuffer &amp; operator= (AAX_CArrayDataBuffer const &amp;other)=default<br/>&#8226; AAX_CArrayDataBuffer &amp; operator= (AAX_CArrayDataBuffer &amp;&amp;other)=default<br/>&#8226; AAX_Result Type (AAX_CTypeID &#8727;oType) const AAX_OVERRIDE<br/>&#8226; AAX_Result Size (int32_t &#8727;oSize) const AAX_OVERRIDE<br/>&#8226; AAX_Result Data (void const &#8727;&#8727;oBuffer) const AAX_OVERRIDE<br/></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.3.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.3.2.1 AAX_CArrayDataBuffer() [1/4]<br/></b></p>
<p>template&lt;class D &gt;<br/>AAX_CArrayDataBuffer&lt; D &gt;::AAX_CArrayDataBuffer (<br/></p>
<p>AAX_CTypeID inType,<br/>std::vector&lt; D &gt; const &amp; inData ) [inline]<br/></p>
<p><b>14.3.2.2 AAX_CArrayDataBuffer() [2/4]<br/></b></p>
<p>template&lt;class D &gt;<br/>AAX_CArrayDataBuffer&lt; D &gt;::AAX_CArrayDataBuffer (<br/></p>
<p>AAX_CTypeID inType,<br/>std::vector&lt; D &gt; &amp;&amp; inData ) [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>408 Class Documentation<br/></b></p>
<p><b>14.3.2.3 AAX_CArrayDataBuffer() [3/4]<br/></b></p>
<p>template&lt;class D &gt;<br/>AAX_CArrayDataBuffer&lt; D &gt;::AAX_CArrayDataBuffer (<br/></p>
<p>AAX_CArrayDataBuffer&lt; D &gt; const &amp; ) [default]<br/></p>
<p><b>14.3.2.4 AAX_CArrayDataBuffer() [4/4]<br/></b></p>
<p>template&lt;class D &gt;<br/>AAX_CArrayDataBuffer&lt; D &gt;::AAX_CArrayDataBuffer (<br/></p>
<p>AAX_CArrayDataBuffer&lt; D &gt; &amp;&amp; ) [default]<br/></p>
<p><b>14.3.2.5 </b>&#8764;<b>AAX_CArrayDataBuffer()<br/></b></p>
<p>template&lt;class D &gt;<br/>AAX_CArrayDataBuffer&lt; D &gt;::&#8764;AAX_CArrayDataBuffer (<br/></p>
<p>void ) [default]<br/></p>
<p><b>14.3.3 Member Function Documentation<br/></b></p>
<p><b>14.3.3.1 operator=() [1/2]<br/></b></p>
<p>template&lt;class D &gt;<br/>AAX_CArrayDataBuffer&amp; AAX_CArrayDataBuffer&lt; D &gt;::operator= (<br/></p>
<p>AAX_CArrayDataBuffer&lt; D &gt; const &amp; other ) [default]<br/></p>
<p><b>14.3.3.2 operator=() [2/2]<br/></b></p>
<p>template&lt;class D &gt;<br/>AAX_CArrayDataBuffer&amp; AAX_CArrayDataBuffer&lt; D &gt;::operator= (<br/></p>
<p>AAX_CArrayDataBuffer&lt; D &gt; &amp;&amp; other ) [default]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.4 AAX_CArrayDataBufferOfType</b>&lt; <b>T, D </b>&gt; <b>Class Template Reference 409<br/></b></p>
<p><b>14.3.3.3 Type()<br/></b></p>
<p>template&lt;class D &gt;<br/>AAX_Result AAX_CArrayDataBuffer&lt; D &gt;::Type (<br/></p>
<p>AAX_CTypeID &#8727; oType ) const [inline], [virtual]<br/></p>
<p>The type of data contained in this buffer<br/></p>
<p>This identifier must be sufficient for a client that knows the type to correctly interpret and use the data.<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, and AAX_SUCCESS.<br/></p>
<p><b>14.3.3.4 Size()<br/></b></p>
<p>template&lt;class D &gt;<br/>AAX_Result AAX_CArrayDataBuffer&lt; D &gt;::Size (<br/></p>
<p>int32_t &#8727; oSize ) const [inline], [virtual]<br/></p>
<p>The number of bytes of data in this buffer<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, AAX_ERROR_SIGNED_INT_OVERFLOW, and AAX_SUCCESS.<br/></p>
<p><b>14.3.3.5 Data()<br/></b></p>
<p>template&lt;class D &gt;<br/>AAX_Result AAX_CArrayDataBuffer&lt; D &gt;::Data (<br/></p>
<p>void const &#8727;&#8727; oBuffer ) const [inline], [virtual]<br/></p>
<p>The buffer of data<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, and AAX_SUCCESS.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CArrayDataBuffer.h<br/></p>
<p><b>14.4 AAX_CArrayDataBufferOfType</b>&lt; <b>T, D </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CArrayDataBuffer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CArrayDataBufferOfType&lt; T, D &gt;:<br/></p>
<p>Collaboration diagram for AAX_CArrayDataBufferOfType&lt; T, D &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>410 Class Documentation<br/></b></p>
<p><b>14.4.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>AAX_CTypeID T, class D</b>&gt;<br/><b>class AAX_CArrayDataBufferOfType</b>&lt; <b>T, D </b>&gt;<br/></p>
<p>A convenience class for array data buffers.<br/></p>
<p>The data payload is an array of D<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CArrayDataBufferOfType (std::vector&lt; D &gt; const &amp;inData)<br/>&#8226; AAX_CArrayDataBufferOfType (std::vector&lt; D &gt; &amp;&amp;inData)<br/>&#8226; AAX_CArrayDataBufferOfType (AAX_CArrayDataBufferOfType const &amp;)=default<br/>&#8226; AAX_CArrayDataBufferOfType (AAX_CArrayDataBufferOfType &amp;&amp;)=default<br/>&#8226; &#8764;AAX_CArrayDataBufferOfType (void) AAX_OVERRIDE=default<br/>&#8226; AAX_CArrayDataBufferOfType &amp; operator= (AAX_CArrayDataBufferOfType const &amp;other)=default<br/>&#8226; AAX_CArrayDataBufferOfType &amp; operator= (AAX_CArrayDataBufferOfType &amp;&amp;other)=default<br/>&#8226; AAX_Result Type (AAX_CTypeID &#8727;oType) const AAX_OVERRIDE<br/>&#8226; AAX_Result Size (int32_t &#8727;oSize) const AAX_OVERRIDE<br/>&#8226; AAX_Result Data (void const &#8727;&#8727;oBuffer) const AAX_OVERRIDE<br/></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.4.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.4.2.1 AAX_CArrayDataBufferOfType() [1/4]<br/></b></p>
<p>template&lt;AAX_CTypeID T, class D &gt;<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;::AAX_CArrayDataBufferOfType (<br/></p>
<p>std::vector&lt; D &gt; const &amp; inData ) [inline], [explicit]<br/></p>
<p><b>14.4.2.2 AAX_CArrayDataBufferOfType() [2/4]<br/></b></p>
<p>template&lt;AAX_CTypeID T, class D &gt;<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;::AAX_CArrayDataBufferOfType (<br/></p>
<p>std::vector&lt; D &gt; &amp;&amp; inData ) [inline], [explicit]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.4 AAX_CArrayDataBufferOfType</b>&lt; <b>T, D </b>&gt; <b>Class Template Reference 411<br/></b></p>
<p><b>14.4.2.3 AAX_CArrayDataBufferOfType() [3/4]<br/></b></p>
<p>template&lt;AAX_CTypeID T, class D &gt;<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;::AAX_CArrayDataBufferOfType (<br/></p>
<p>AAX_CArrayDataBufferOfType&lt; T, D &gt; const &amp; ) [default]<br/></p>
<p><b>14.4.2.4 AAX_CArrayDataBufferOfType() [4/4]<br/></b></p>
<p>template&lt;AAX_CTypeID T, class D &gt;<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;::AAX_CArrayDataBufferOfType (<br/></p>
<p>AAX_CArrayDataBufferOfType&lt; T, D &gt; &amp;&amp; ) [default]<br/></p>
<p><b>14.4.2.5 </b>&#8764;<b>AAX_CArrayDataBufferOfType()<br/></b></p>
<p>template&lt;AAX_CTypeID T, class D &gt;<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;::&#8764;AAX_CArrayDataBufferOfType (<br/></p>
<p>void ) [default]<br/></p>
<p><b>14.4.3 Member Function Documentation<br/></b></p>
<p><b>14.4.3.1 operator=() [1/2]<br/></b></p>
<p>template&lt;AAX_CTypeID T, class D &gt;<br/>AAX_CArrayDataBufferOfType&amp; AAX_CArrayDataBufferOfType&lt; T, D &gt;::operator= (<br/></p>
<p>AAX_CArrayDataBufferOfType&lt; T, D &gt; const &amp; other ) [default]<br/></p>
<p><b>14.4.3.2 operator=() [2/2]<br/></b></p>
<p>template&lt;AAX_CTypeID T, class D &gt;<br/>AAX_CArrayDataBufferOfType&amp; AAX_CArrayDataBufferOfType&lt; T, D &gt;::operator= (<br/></p>
<p>AAX_CArrayDataBufferOfType&lt; T, D &gt; &amp;&amp; other ) [default]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>412 Class Documentation<br/></b></p>
<p><b>14.4.3.3 Type()<br/></b></p>
<p>template&lt;AAX_CTypeID T, class D &gt;<br/>AAX_Result AAX_CArrayDataBufferOfType&lt; T, D &gt;::Type (<br/></p>
<p>AAX_CTypeID &#8727; oType ) const [inline], [virtual]<br/></p>
<p>The type of data contained in this buffer<br/></p>
<p>This identifier must be sufficient for a client that knows the type to correctly interpret and use the data.<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, and AAX_SUCCESS.<br/></p>
<p><b>14.4.3.4 Size()<br/></b></p>
<p>template&lt;AAX_CTypeID T, class D &gt;<br/>AAX_Result AAX_CArrayDataBufferOfType&lt; T, D &gt;::Size (<br/></p>
<p>int32_t &#8727; oSize ) const [inline], [virtual]<br/></p>
<p>The number of bytes of data in this buffer<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, AAX_ERROR_SIGNED_INT_OVERFLOW, and AAX_SUCCESS.<br/></p>
<p><b>14.4.3.5 Data()<br/></b></p>
<p>template&lt;AAX_CTypeID T, class D &gt;<br/>AAX_Result AAX_CArrayDataBufferOfType&lt; T, D &gt;::Data (<br/></p>
<p>void const &#8727;&#8727; oBuffer ) const [inline], [virtual]<br/></p>
<p>The buffer of data<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, and AAX_SUCCESS.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CArrayDataBuffer.h<br/></p>
<p><b>14.5 AAX_CAtomicQueue</b>&lt; <b>T, S </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CAtomicQueue.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CAtomicQueue&lt; T, S &gt;:<br/></p>
<p>Collaboration diagram for AAX_CAtomicQueue&lt; T, S &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.5 AAX_CAtomicQueue</b>&lt; <b>T, S </b>&gt; <b>Class Template Reference 413<br/></b></p>
<p><b>14.5.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T, size_t S</b>&gt;<br/><b>class AAX_CAtomicQueue</b>&lt; <b>T, S </b>&gt;<br/></p>
<p>Multi-writer, single-reader implementation of AAX_IPointerQueue<br/></p>
<p>Template parameters:<br/></p>
<p>&#8226; T: Type of the objects pointed to by this queue<br/></p>
<p>&#8226; S: Size of the queue's ring buffer. Should be a power of two less than UINT_32_MAX<br/></p>
<p>Properties:<br/></p>
<p>&#8226; Read operations are non-blocking<br/></p>
<p>&#8226; Write operations are synchronized, but very fast<br/></p>
<p>&#8226; Supports only one read thread - do not call Pop() or Peek() concurrently<br/></p>
<p>&#8226; Supports any number of write threads<br/></p>
<p>&#8226; Does not support placing NULL values onto the queue. Push will return eStatus_Unsupported if a NULL<br/>value is pushed onto the queue, and the value will be ignored.<br/></p>
<p><b>Public Types<br/></b></p>
<p>&#8226; typedef AAX_IPointerQueue&lt; T &gt;::template_type template_type<br/>The type used for this template instance.<br/></p>
<p>&#8226; typedef AAX_IPointerQueue&lt; T &gt;::value_type value_type<br/>The type of values stored in this queue.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_CAtomicQueue ()<br/>&#8226; AAX_CAtomicQueue ()<br/>&#8226; virtual void Clear ()<br/>&#8226; virtual AAX_IContainer::EStatus Push (value_type inElem)<br/>&#8226; virtual value_type Pop ()<br/>&#8226; virtual value_type Peek () const<br/></p>
<p><b>Static Public Attributes<br/></b></p>
<p>&#8226; static const size_t template_size = S<br/>The size used for this template instance.<br/></p>
<p><b>14.5.2 Member Typedef Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>414 Class Documentation<br/></b></p>
<p><b>14.5.2.1 template_type<br/></b></p>
<p>template&lt;typename T , size_t S&gt;<br/>typedef AAX_IPointerQueue&lt;T&gt;::template_type AAX_CAtomicQueue&lt; T, S &gt;::template_type<br/></p>
<p>The type used for this template instance.<br/></p>
<p><b>14.5.2.2 value_type<br/></b></p>
<p>template&lt;typename T , size_t S&gt;<br/>typedef AAX_IPointerQueue&lt;T&gt;::value_type AAX_CAtomicQueue&lt; T, S &gt;::value_type<br/></p>
<p>The type of values stored in this queue.<br/></p>
<p><b>14.5.3 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.5.3.1 </b>&#8764;<b>AAX_CAtomicQueue()<br/></b></p>
<p>template&lt;typename T , size_t S&gt;<br/>virtual AAX_CAtomicQueue&lt; T, S &gt;::&#8764;AAX_CAtomicQueue ( ) [inline], [virtual]<br/></p>
<p><b>14.5.3.2 AAX_CAtomicQueue()<br/></b></p>
<p>template&lt;typename T , size_t S&gt;<br/>AAX_CAtomicQueue&lt; T, S &gt;::AAX_CAtomicQueue ( )<br/></p>
<p><b>14.5.4 Member Function Documentation<br/></b></p>
<p><b>14.5.4.1 Clear()<br/></b></p>
<p>template&lt;typename T , size_t S&gt;<br/>virtual void AAX_CAtomicQueue&lt; T, S &gt;::Clear ( ) [virtual]<br/></p>
<p><b>Note<br/></b>This operation is NOT atomic<br/>This does NOT call the destructor for any pointed-to elements; it only clears the pointer values in the queue<br/></p>
<p>Implements AAX_IPointerQueue&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.5 AAX_CAtomicQueue</b>&lt; <b>T, S </b>&gt; <b>Class Template Reference 415<br/></b></p>
<p><b>14.5.4.2 Push()<br/></b></p>
<p>template&lt;typename T , size_t S&gt;<br/>virtual AAX_IContainer::EStatus AAX_CAtomicQueue&lt; T, S &gt;::Push (<br/></p>
<p>value_type inElem ) [virtual]<br/></p>
<p>Push an element onto the queue<br/></p>
<p>Call from: Write thread<br/></p>
<p><b>Returns<br/></b>AAX_IContainer::eStatus_Success if the push succeeded<br/></p>
<p>Implements AAX_IPointerQueue&lt; T &gt;.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::GenerateCoefficients(), and AAX_CMonolithicParameters::Static&#8592;&#8617;<br/>RenderAudio().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.5.4.3 Pop()<br/></b></p>
<p>template&lt;typename T , size_t S&gt;<br/>virtual value_type AAX_CAtomicQueue&lt; T, S &gt;::Pop ( ) [virtual]<br/></p>
<p>Pop the front element from the queue<br/></p>
<p>Call from: Read thread<br/></p>
<p><b>Returns<br/></b>NULL if no element is available<br/></p>
<p>Implements AAX_IPointerQueue&lt; T &gt;.<br/></p>
<p><b>14.5.4.4 Peek()<br/></b></p>
<p>template&lt;typename T , size_t S&gt;<br/>virtual value_type AAX_CAtomicQueue&lt; T, S &gt;::Peek ( ) const [virtual]<br/></p>
<p>Get the current top element without popping it off of the queue<br/></p>
<p>Call from: Read thread<br/></p>
<p><b>Note<br/></b>This value will change if another thread calls Pop()<br/></p>
<p>Implements AAX_IPointerQueue&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>416 Class Documentation<br/></b></p>
<p><b>14.5.5 Member Data Documentation<br/></b></p>
<p><b>14.5.5.1 template_size<br/></b></p>
<p>template&lt;typename T , size_t S&gt;<br/>const size_t AAX_CAtomicQueue&lt; T, S &gt;::template_size = S [static]<br/></p>
<p>The size used for this template instance.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CAtomicQueue.h<br/></p>
<p><b>14.6 AAX_CAutoreleasePool Class Reference<br/></b></p>
<p>#include &lt;AAX_CAutoreleasePool.h&gt;<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CAutoreleasePool ()<br/>&#8226; &#8764;AAX_CAutoreleasePool ()<br/></p>
<p><b>14.6.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.6.1.1 AAX_CAutoreleasePool()<br/></b></p>
<p>AAX_CAutoreleasePool::AAX_CAutoreleasePool ( )<br/></p>
<p><b>14.6.1.2 </b>&#8764;<b>AAX_CAutoreleasePool()<br/></b></p>
<p>AAX_CAutoreleasePool::&#8764;AAX_CAutoreleasePool ( )<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CAutoreleasePool.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.7 AAX_CBinaryDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 417<br/></b></p>
<p><b>14.7 AAX_CBinaryDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CBinaryDisplayDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CBinaryDisplayDelegate&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CBinaryDisplayDelegate&lt; T &gt;:<br/></p>
<p><b>14.7.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CBinaryDisplayDelegate</b>&lt; <b>T </b>&gt;<br/></p>
<p>A binary display format conforming to AAX_IDisplayDelegate.<br/></p>
<p>This display delegate converts a parameter value to one of two provided strings (e.g. &quot;True&quot; and &quot;False&quot;.)<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CBinaryDisplayDelegate (const char &#8727;falseString, const char &#8727;trueString)<br/>Constructor.<br/></p>
<p>&#8226; AAX_CBinaryDisplayDelegate (const AAX_CBinaryDisplayDelegate &amp;other)<br/>&#8226; AAX_IDisplayDelegate&lt; T &gt; &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/>&#8226; bool ValueToString (T value, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation.<br/>&#8226; bool ValueToString (T value, int32_t maxNumChars, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p>&#8226; bool StringToValue (const AAX_CString &amp;valueString, T &#8727;value) const AAX_OVERRIDE<br/>Converts a string to a real parameter value.<br/></p>
<p>&#8226; virtual void AddShortenedStrings (const char &#8727;falseString, const char &#8727;trueString, int iStrLength)<br/></p>
<p><b>14.7.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.7.2.1 AAX_CBinaryDisplayDelegate() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CBinaryDisplayDelegate&lt; T &gt;::AAX_CBinaryDisplayDelegate (<br/></p>
<p>const char &#8727; falseString,<br/>const char &#8727; trueString )<br/></p>
<p>Constructor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>418 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in falseString The string that will be associated with false parameter values<br/>in trueString The string that will be associated with true parameter values<br/></p>
<p>References AAX_CString::Length().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.7.2.2 AAX_CBinaryDisplayDelegate() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CBinaryDisplayDelegate&lt; T &gt;::AAX_CBinaryDisplayDelegate (<br/></p>
<p>const AAX_CBinaryDisplayDelegate&lt; T &gt; &amp; other )<br/></p>
<p><b>14.7.3 Member Function Documentation<br/></b></p>
<p><b>14.7.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_IDisplayDelegate&lt; T &gt; &#8727; AAX_CBinaryDisplayDelegate&lt; T &gt;::Clone ( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassDisplayDelegate&lt;T&gt;* AAX_CSubclassDisplayDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassDisplayDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.7.3.2 ValueToString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CBinaryDisplayDelegate&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>out valueString A string corresponding to value<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.7 AAX_CBinaryDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 419<br/></b></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.7.3.3 ValueToString() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CBinaryDisplayDelegate&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>int32_t maxNumChars,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>in maxNumChars Size hint for the desired maximum number of characters in the string (not including<br/></p>
<p>null termination)<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.7.3.4 StringToValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CBinaryDisplayDelegate&lt; T &gt;::StringToValue (<br/></p>
<p>const AAX_CString &amp; valueString,<br/>T &#8727; value ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>420 Class Documentation<br/></b></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.7.3.5 AddShortenedStrings()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CBinaryDisplayDelegate&lt; T &gt;::AddShortenedStrings (<br/></p>
<p>const char &#8727; falseString,<br/>const char &#8727; trueString,<br/>int iStrLength ) [virtual]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CBinaryDisplayDelegate.h<br/></p>
<p><b>14.8 AAX_CBinaryTaperDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CBinaryTaperDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CBinaryTaperDelegate&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CBinaryTaperDelegate&lt; T &gt;:<br/></p>
<p><b>14.8.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CBinaryTaperDelegate</b>&lt; <b>T </b>&gt;<br/></p>
<p>A binary taper conforming to AAX_ITaperDelegate.<br/></p>
<p>This taper maps positive real values to 1 and negative or zero real values to 0. This is the standard taper used on<br/>all bool parameters.<br/></p>
<p>When this taper is constructed with a bool template type, its normalized values are automatically typecast to the<br/>proper boolean value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.8 AAX_CBinaryTaperDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 421<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CBinaryTaperDelegate ()<br/>Constructs a Binary Taper.<br/></p>
<p>&#8226; AAX_ITaperDelegate&lt; T &gt; &#8727; Clone () const AAX_OVERRIDE<br/>Constructs and returns a copy of the taper delegate.<br/></p>
<p>&#8226; T GetMaximumValue () const AAX_OVERRIDE<br/>Returns the taper's maximum real value.<br/></p>
<p>&#8226; T GetMinimumValue () const AAX_OVERRIDE<br/>Returns the taper's minimum real value.<br/></p>
<p>&#8226; T ConstrainRealValue (T value) const AAX_OVERRIDE<br/>Applies a contraint to the value and returns the constrained value.<br/></p>
<p>&#8226; T NormalizedToReal (double normalizedValue) const AAX_OVERRIDE<br/>Converts a normalized value to a real value.<br/></p>
<p>&#8226; double RealToNormalized (T realValue) const AAX_OVERRIDE<br/>Normalizes a real parameter value.<br/></p>
<p><b>14.8.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.8.2.1 AAX_CBinaryTaperDelegate()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CBinaryTaperDelegate&lt; T &gt;::AAX_CBinaryTaperDelegate<br/></p>
<p>Constructs a Binary Taper.<br/></p>
<p><b>14.8.3 Member Function Documentation<br/></b></p>
<p><b>14.8.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_ITaperDelegate&lt; T &gt; &#8727; AAX_CBinaryTaperDelegate&lt; T &gt;::Clone ( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the taper delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassTaperDelegate&lt;T&gt;* AAX_CSubclassTaperDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassTaperDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>422 Class Documentation<br/></b></p>
<p><b>14.8.3.2 GetMaximumValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CBinaryTaperDelegate&lt; T &gt;::GetMaximumValue ( ) const [virtual]<br/></p>
<p>Returns the taper's maximum real value.<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.8.3.3 GetMinimumValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CBinaryTaperDelegate&lt; T &gt;::GetMinimumValue ( ) const [virtual]<br/></p>
<p>Returns the taper's minimum real value.<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.8.3.4 ConstrainRealValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CBinaryTaperDelegate&lt; T &gt;::ConstrainRealValue (<br/></p>
<p>T value ) const [virtual]<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/></p>
<p>This method is useful if the taper requires a contraint beyond simple minimum and maximum real value limits.<br/></p>
<p><b>Note<br/></b>This is the function that should actually enforces the constraints in NormalizeToReal() and RealToNormalized().<br/></p>
<p><b>Parameters<br/></b>in value The unconstrained value<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.8.3.5 NormalizedToReal()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CBinaryTaperDelegate&lt; T &gt;::NormalizedToReal (<br/></p>
<p>double normalizedValue ) const [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.9 AAX_CChunkDataParser Class Reference 423<br/></b></p>
<p>Converts a normalized value to a real value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of RealToNormalized(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value that will be converted<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.8.3.6 RealToNormalized()<br/></b></p>
<p>template&lt;typename T &gt;<br/>double AAX_CBinaryTaperDelegate&lt; T &gt;::RealToNormalized (<br/></p>
<p>T realValue ) const [virtual]<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of NormalizedToReal(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in realValue The real parameter value that will be normalized<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CBinaryTaperDelegate.h<br/></p>
<p><b>14.9 AAX_CChunkDataParser Class Reference<br/></b></p>
<p>#include &lt;AAX_CChunkDataParser.h&gt;<br/></p>
<p>Collaboration diagram for AAX_CChunkDataParser:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>424 Class Documentation<br/></b></p>
<p><b>14.9.1 Description<br/></b></p>
<p>Parser utility for plugin chunks.<br/></p>
<p><b>Todo </b>Update this documentation for AAX<br/></p>
<p>This class acts as generic repository for data that is stuffed into or extracted from a SFicPlugInChunk. It has an<br/>abstracted Add/Find interface to add or retrieve data values, each uniquely referenced by a c-string. In conjuction<br/>with the Effect Layer and the &quot;ControlManager&quot; aspects of the CProcess class, this provides a more transparent &amp;<br/>resilent system for performing save-and-restore on settings that won't break so easily from endian issues or from<br/>the hard-coded structs that have typically been used to build chunk data.<br/></p>
<p><b>Format of the Chunk Data<br/></b>The first 4 bytes of the data are the version number (repeated 4 times to be immune to byte swapping). Data<br/>follows next.<br/></p>
<p>Example: &quot;f_bypa %$#@d_gain #$!#@$%$s_omsi #$&quot;<br/>type name value<br/>----------------------------<br/>float bypa %$#@<br/>double gain #$!#@$%$<br/>int16_t omsi #$<br/></p>
<p>&#8226; The first character denotes the data type:<br/>&#8217;f&#8217; = float<br/>&#8217;d&#8217; = double<br/>&#8217;l&#8217; = int32<br/>&#8217;s&#8217; = int16<br/></p>
<p>&#8226; &quot;_&quot; is an empty placekeeper that could be used to addition future information. Currently, it's ignored<br/>when a chunk is parsed.<br/></p>
<p>&#8226; The string name identifier follows next, and can up to 255 characters int32_t. The Effect Layer builds<br/>chunks it always converts the AAX_FourCharCode of the control to a string. So, this will always be 4<br/>characters int32_t. The string is null terminated to indicate the start of the data value.<br/></p>
<p>&#8226; The data value follows next, but is possible shifted to aligned word aligned. The size of is determined, of<br/>course, by the data type.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; struct DataValue<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CChunkDataParser ()<br/>&#8226; virtual &#8764;AAX_CChunkDataParser ()<br/>&#8226; void AddFloat (const char &#8727;name, float value)<br/></p>
<p>CALL: Adds some data of type float with name and value to the current chunk.<br/>&#8226; void AddDouble (const char &#8727;name, double value)<br/></p>
<p>CALL: See AddFloat()<br/>&#8226; void AddInt32 (const char &#8727;name, int32_t value)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.9 AAX_CChunkDataParser Class Reference 425<br/></b></p>
<p>CALL: See AddFloat()<br/>&#8226; void AddInt16 (const char &#8727;name, int16_t value)<br/></p>
<p>CALL: See AddFloat()<br/>&#8226; void AddString (const char &#8727;name, AAX_CString value)<br/>&#8226; bool FindFloat (const char &#8727;name, float &#8727;value)<br/></p>
<p>CALL: Finds some data of type float with name and value in the current chunk.<br/>&#8226; bool FindDouble (const char &#8727;name, double &#8727;value)<br/></p>
<p>CALL: See FindFloat()<br/>&#8226; bool FindInt32 (const char &#8727;name, int32_t &#8727;value)<br/></p>
<p>CALL: See FindFloat()<br/>&#8226; bool FindInt16 (const char &#8727;name, int16_t &#8727;value)<br/></p>
<p>CALL: See FindFloat()<br/>&#8226; bool FindString (const char &#8727;name, AAX_CString &#8727;value)<br/>&#8226; bool ReplaceDouble (const char &#8727;name, double value)<br/>&#8226; int32_t GetChunkData (AAX_SPlugInChunk &#8727;chunk)<br/></p>
<p>CALL: Fills passed in chunk with data from current chunk; returns 0 if successful.<br/>&#8226; int32_t GetChunkDataSize ()<br/></p>
<p>CALL: Returns size of current chunk.<br/>&#8226; int32_t GetChunkVersion ()<br/></p>
<p>CALL: Lists fVersion in chunk header for convenience.<br/>&#8226; bool IsEmpty ()<br/></p>
<p>CALL: Returns true if no data is in the chunk.<br/>&#8226; void Clear ()<br/></p>
<p>Resets chunk.<br/></p>
<p><b>Internal Methods<br/></b></p>
<p>An Effect Layer plugin can ignore these methods. They are handled by or used internally by the Effect Layer.<br/></p>
<p>&#8226; int32_t mLastFoundIndex<br/>The last index found in the chunk.<br/></p>
<p>&#8226; char &#8727; mChunkData<br/>&#8226; int32_t mChunkVersion<br/></p>
<p>Equal to fVersion from the chunk header. Equal to -1 if no chunk is loaded.<br/>&#8226; std::vector&lt; DataValue &gt; mDataValues<br/>&#8226; void LoadChunk (const AAX_SPlugInChunk &#8727;chunk)<br/></p>
<p>Sets current chunk to data in chunk parameter.<br/>&#8226; void WordAlign (uint32_t &amp;index)<br/></p>
<p>sets index to 4-byte boundary<br/>&#8226; void WordAlign (int32_t &amp;index)<br/></p>
<p>sets index to 4-byte boundary<br/>&#8226; int32_t FindName (const AAX_CString &amp;Name)<br/></p>
<p>used by public Find methods<br/></p>
<p><b>14.9.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>426 Class Documentation<br/></b></p>
<p><b>14.9.2.1 AAX_CChunkDataParser()<br/></b></p>
<p>AAX_CChunkDataParser::AAX_CChunkDataParser ( )<br/></p>
<p><b>14.9.2.2 </b>&#8764;<b>AAX_CChunkDataParser()<br/></b></p>
<p>virtual AAX_CChunkDataParser::&#8764;AAX_CChunkDataParser ( ) [virtual]<br/></p>
<p><b>14.9.3 Member Function Documentation<br/></b></p>
<p><b>14.9.3.1 AddFloat()<br/></b></p>
<p>void AAX_CChunkDataParser::AddFloat (<br/>const char &#8727; name,<br/>float value )<br/></p>
<p>CALL: Adds some data of type float with name and value to the current chunk.<br/></p>
<p><b>See also<br/></b>AddDouble(), AddInt32(), and AddInt16() are the same but with different data types.<br/></p>
<p><b>14.9.3.2 AddDouble()<br/></b></p>
<p>void AAX_CChunkDataParser::AddDouble (<br/>const char &#8727; name,<br/>double value )<br/></p>
<p>CALL: See AddFloat()<br/></p>
<p><b>14.9.3.3 AddInt32()<br/></b></p>
<p>void AAX_CChunkDataParser::AddInt32 (<br/>const char &#8727; name,<br/>int32_t value )<br/></p>
<p>CALL: See AddFloat()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.9 AAX_CChunkDataParser Class Reference 427<br/></b></p>
<p><b>14.9.3.4 AddInt16()<br/></b></p>
<p>void AAX_CChunkDataParser::AddInt16 (<br/>const char &#8727; name,<br/>int16_t value )<br/></p>
<p>CALL: See AddFloat()<br/></p>
<p><b>14.9.3.5 AddString()<br/></b></p>
<p>void AAX_CChunkDataParser::AddString (<br/>const char &#8727; name,<br/>AAX_CString value )<br/></p>
<p><b>14.9.3.6 FindFloat()<br/></b></p>
<p>bool AAX_CChunkDataParser::FindFloat (<br/>const char &#8727; name,<br/>float &#8727; value )<br/></p>
<p>CALL: Finds some data of type float with name and value in the current chunk.<br/></p>
<p><b>See also<br/></b>FindDouble(), FindInt32(), and FindInt16() are the same but with different data types.<br/></p>
<p><b>14.9.3.7 FindDouble()<br/></b></p>
<p>bool AAX_CChunkDataParser::FindDouble (<br/>const char &#8727; name,<br/>double &#8727; value )<br/></p>
<p>CALL: See FindFloat()<br/></p>
<p><b>14.9.3.8 FindInt32()<br/></b></p>
<p>bool AAX_CChunkDataParser::FindInt32 (<br/>const char &#8727; name,<br/>int32_t &#8727; value )<br/></p>
<p>CALL: See FindFloat()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>428 Class Documentation<br/></b></p>
<p><b>14.9.3.9 FindInt16()<br/></b></p>
<p>bool AAX_CChunkDataParser::FindInt16 (<br/>const char &#8727; name,<br/>int16_t &#8727; value )<br/></p>
<p>CALL: See FindFloat()<br/></p>
<p><b>14.9.3.10 FindString()<br/></b></p>
<p>bool AAX_CChunkDataParser::FindString (<br/>const char &#8727; name,<br/>AAX_CString &#8727; value )<br/></p>
<p><b>14.9.3.11 ReplaceDouble()<br/></b></p>
<p>bool AAX_CChunkDataParser::ReplaceDouble (<br/>const char &#8727; name,<br/>double value )<br/></p>
<p><b>14.9.3.12 GetChunkData()<br/></b></p>
<p>int32_t AAX_CChunkDataParser::GetChunkData (<br/>AAX_SPlugInChunk &#8727; chunk )<br/></p>
<p>CALL: Fills passed in chunk with data from current chunk; returns 0 if successful.<br/></p>
<p><b>14.9.3.13 GetChunkDataSize()<br/></b></p>
<p>int32_t AAX_CChunkDataParser::GetChunkDataSize ( )<br/></p>
<p>CALL: Returns size of current chunk.<br/></p>
<p><b>14.9.3.14 GetChunkVersion()<br/></b></p>
<p>int32_t AAX_CChunkDataParser::GetChunkVersion ( ) [inline]<br/></p>
<p>CALL: Lists fVersion in chunk header for convenience.<br/></p>
<p>References mChunkVersion.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.9 AAX_CChunkDataParser Class Reference 429<br/></b></p>
<p><b>14.9.3.15 IsEmpty()<br/></b></p>
<p>bool AAX_CChunkDataParser::IsEmpty ( )<br/></p>
<p>CALL: Returns true if no data is in the chunk.<br/></p>
<p><b>14.9.3.16 Clear()<br/></b></p>
<p>void AAX_CChunkDataParser::Clear ( )<br/></p>
<p>Resets chunk.<br/></p>
<p><b>14.9.3.17 LoadChunk()<br/></b></p>
<p>void AAX_CChunkDataParser::LoadChunk (<br/>const AAX_SPlugInChunk &#8727; chunk )<br/></p>
<p>Sets current chunk to data in chunk parameter.<br/></p>
<p><b>14.9.3.18 WordAlign() [1/2]<br/></b></p>
<p>void AAX_CChunkDataParser::WordAlign (<br/>uint32_t &amp; index ) [protected]<br/></p>
<p>sets index to 4-byte boundary<br/></p>
<p><b>14.9.3.19 WordAlign() [2/2]<br/></b></p>
<p>void AAX_CChunkDataParser::WordAlign (<br/>int32_t &amp; index ) [protected]<br/></p>
<p>sets index to 4-byte boundary<br/></p>
<p><b>14.9.3.20 FindName()<br/></b></p>
<p>int32_t AAX_CChunkDataParser::FindName (<br/>const AAX_CString &amp; Name ) [protected]<br/></p>
<p>used by public Find methods<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>430 Class Documentation<br/></b></p>
<p><b>14.9.4 Member Data Documentation<br/></b></p>
<p><b>14.9.4.1 mLastFoundIndex<br/></b></p>
<p>int32_t AAX_CChunkDataParser::mLastFoundIndex [protected]<br/></p>
<p>The last index found in the chunk.<br/></p>
<p>Since control values in chunks should tend to stay in order and in sync with the way they're checked with controls<br/>within the plug-in, we'll keep track of the value index to speed up searching.<br/></p>
<p><b>14.9.4.2 mChunkData<br/></b></p>
<p>char&#8727; AAX_CChunkDataParser::mChunkData [protected]<br/></p>
<p><b>14.9.4.3 mChunkVersion<br/></b></p>
<p>int32_t AAX_CChunkDataParser::mChunkVersion [protected]<br/></p>
<p>Equal to fVersion from the chunk header. Equal to -1 if no chunk is loaded.<br/></p>
<p>Referenced by GetChunkVersion().<br/></p>
<p><b>14.9.4.4 mDataValues<br/></b></p>
<p>std::vector&lt;DataValue&gt; AAX_CChunkDataParser::mDataValues<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CChunkDataParser.h<br/></p>
<p><b>14.10 AAX_CDecibelDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template<br/>Reference<br/></b></p>
<p>#include &lt;AAX_CDecibelDisplayDelegateDecorator.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.10 AAX_CDecibelDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template Reference 431<br/></b></p>
<p><b>14.10.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CDecibelDisplayDelegateDecorator</b>&lt; <b>T </b>&gt;<br/></p>
<p>A percent decorator conforming to AAX_IDisplayDelegateDecorator.<br/></p>
<p>This class is an AAX_IDisplayDelegateDecorator, meaning that it acts as a wrapper for other display del-<br/>egates or concrete display types. For more information about display delegate decorators in AAX, see<br/>Display delegate decorators<br/></p>
<p>The behavior of this class it to provide conversion to and from dB values. It performs a decibel conversion on the<br/>square of the provided value (i.e. 20 log) before passing the value on to a concrete display delegate to get a value<br/>string. This class then appends the &quot;dB&quot; suffix to signify that the value was converted. This allows something like a<br/>gain value to remain internally linear at all times even though its display is converted to decibels.<br/></p>
<p>The inverse is also supported; this class can convert a decibel-formatted string into its associated real value. The<br/>string will first be converted to a number, then that number will have the inverse dB calculation applied to it to retrieve<br/>the parameter's real value.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CDecibelDisplayDelegateDecorator (const AAX_IDisplayDelegate&lt; T &gt; &amp;displayDelegate)<br/>&#8226; AAX_CDecibelDisplayDelegateDecorator&lt; T &gt; &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/>&#8226; bool ValueToString (T value, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation.<br/>&#8226; bool ValueToString (T value, int32_t maxNumChars, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p>&#8226; bool StringToValue (const AAX_CString &amp;valueString, T &#8727;value) const AAX_OVERRIDE<br/>Converts a string to a real parameter value.<br/></p>
<p><b>14.10.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.10.2.1 AAX_CDecibelDisplayDelegateDecorator()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;::AAX_CDecibelDisplayDelegateDecorator (<br/></p>
<p>const AAX_IDisplayDelegate&lt; T &gt; &amp; displayDelegate )<br/></p>
<p><b>14.10.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>432 Class Documentation<br/></b></p>
<p><b>14.10.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt; &#8727; AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;::Clone<br/>( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassDisplayDelegate&lt;T&gt;* AAX_CSubclassDisplayDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassDisplayDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.10.3.2 ValueToString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_IDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.10.3.3 ValueToString() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>int32_t maxNumChars,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.10 AAX_CDecibelDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template Reference 433<br/></b></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>in maxNumChars Size hint for the desired maximum number of characters in the string (not including<br/></p>
<p>null termination)<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_CString::Append(), AAX_CString::Length(), and AAX_IDisplayDelegateDecorator&lt; T &gt;::Value&#8592;&#8617;<br/>ToString().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.10.3.4 StringToValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;::StringToValue (<br/></p>
<p>const AAX_CString &amp; valueString,<br/>T &#8727; value ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_CString::Length(), AAX_IDisplayDelegateDecorator&lt; T &gt;::StringToValue(), and AAX_CString&#8592;&#8617;<br/>::SubString().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CDecibelDisplayDelegateDecorator.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>434 Class Documentation<br/></b></p>
<p><b>14.11 AAX_CEffectDirectData Class Reference<br/></b></p>
<p>#include &lt;AAX_CEffectDirectData.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CEffectDirectData:<br/></p>
<p>Collaboration diagram for AAX_CEffectDirectData:<br/></p>
<p><b>14.11.1 Description<br/></b></p>
<p>Default implementation of the AAX_IEffectDirectData interface.<br/></p>
<p>This class provides a default implementation of the AAX_IEffectDirectData interface.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CEffectDirectData (void)<br/>&#8226; virtual &#8764;AAX_CEffectDirectData (void)<br/></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; AAX_Result Initialize (IACFUnknown &#8727;iController) AAX_OVERRIDE AAX_FINAL<br/>Non-virtual implementation of AAX_IEfectDirectData::Initialize()<br/></p>
<p>&#8226; AAX_Result Uninitialize (void) AAX_OVERRIDE<br/>Main uninitialization.<br/></p>
<p><b>Data update callbacks<br/></b></p>
<p>&#8226; AAX_Result TimerWakeup (IACFUnknown &#8727;iDataAccessInterface) AAX_OVERRIDE<br/>Non-virtual implementation of AAX_IEfectDirectData::TimerWakeup()<br/></p>
<p><b>AAX host and plug-in event notification<br/></b></p>
<p>&#8226; AAX_Result NotificationReceived (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData,<br/>uint32_t inNotificationDataSize) AAX_OVERRIDE<br/></p>
<p>Notification Hook.<br/></p>
<p><b>Private member accessors<br/></b></p>
<p>&#8226; AAX_IController &#8727; Controller (void)<br/>Returns a pointer to the plug-in's controller interface.<br/></p>
<p>&#8226; AAX_IEffectParameters &#8727; EffectParameters (void)<br/>Returns a pointer to the plug-in's data model interface.<br/></p>
<p><b>AAX_CEffectDirectData virtual interface<br/></b>&#8226; virtual AAX_Result Initialize_PrivateDataAccess ()<br/></p>
<p>Initialization routine for classes that inherit from AAX_CEffectDirectData. This method is called by the default<br/>Initialize() implementation after all internal members have been initialized, and provides a safe location in which<br/>to perform any additional initialization tasks.<br/></p>
<p>&#8226; virtual AAX_Result TimerWakeup_PrivateDataAccess (AAX_IPrivateDataAccess &#8727;iPrivateDataAccess)<br/>Callback provided with an AAX_IPrivateDataAccess. Override this method to access the algorithm's private data<br/>using the AAX_IPrivateDataAccess interface.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.11 AAX_CEffectDirectData Class Reference 435<br/></b></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.11.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.11.2.1 AAX_CEffectDirectData()<br/></b></p>
<p>AAX_CEffectDirectData::AAX_CEffectDirectData (<br/>void )<br/></p>
<p><b>14.11.2.2 </b>&#8764;<b>AAX_CEffectDirectData()<br/></b></p>
<p>virtual AAX_CEffectDirectData::&#8764;AAX_CEffectDirectData (<br/>void ) [virtual]<br/></p>
<p><b>14.11.3 Member Function Documentation<br/></b></p>
<p><b>14.11.3.1 Initialize()<br/></b></p>
<p>AAX_Result AAX_CEffectDirectData::Initialize (<br/>IACFUnknown &#8727; iController ) [virtual]<br/></p>
<p>Non-virtual implementation of AAX_IEfectDirectData::Initialize()<br/></p>
<p>This implementation initializes all private AAX_CEffectDirectData members and calls Initialize_PrivateDataAccess().<br/>For custom initialization, inherited classes should override Initialize_PrivateDataAccess().<br/></p>
<p><b>Parameters<br/></b>in iController Unknown pointer that resolves to an AAX_IController.<br/></p>
<p>Implements AAX_IACFEffectDirectData.<br/></p>
<p><b>14.11.3.2 Uninitialize()<br/></b></p>
<p>AAX_Result AAX_CEffectDirectData::Uninitialize (<br/>void ) [virtual]<br/></p>
<p>Main uninitialization.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>436 Class Documentation<br/></b></p>
<p>Called when the interface is destroyed.<br/></p>
<p>Implements AAX_IACFEffectDirectData.<br/></p>
<p><b>14.11.3.3 TimerWakeup()<br/></b></p>
<p>AAX_Result AAX_CEffectDirectData::TimerWakeup (<br/>IACFUnknown &#8727; iDataAccessInterface ) [virtual]<br/></p>
<p>Non-virtual implementation of AAX_IEfectDirectData::TimerWakeup()<br/></p>
<p>This implementation interprets the IACFUnknown and forwards the resulting AAX_IPrivateDataAccess to<br/>TimerWakeup_PrivateDataAccess()<br/></p>
<p><b>Parameters<br/></b>in iDataAccessInterface Unknown pointer that resolves to an AAX_IPrivateDataAccess. This interface is<br/></p>
<p>only valid for the duration of this method's execution and is discarded when the<br/>method returns.<br/></p>
<p>Implements AAX_IACFEffectDirectData.<br/></p>
<p><b>14.11.3.4 NotificationReceived()<br/></b></p>
<p>AAX_Result AAX_CEffectDirectData::NotificationReceived (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [virtual]<br/></p>
<p>Notification Hook.<br/></p>
<p>Called from the host to deliver notifications to this object.<br/></p>
<p>Look at the AAX_ENotificationEvent enumeration to see a description of events you can listen for and the data they<br/>come with.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>some notifications are sent only to the plug-in GUI or plug-in data model while other notifications are<br/>sent only to the EffectDirectData. If you are not seeing an expected notification, try checking the other<br/>plug-in objects' NotificationReceived() methods.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>the host may dispatch notifications synchronously or asynchronously, and calls to this method may<br/>occur concurrently on multiple threads.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.11 AAX_CEffectDirectData Class Reference 437<br/></b></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification being received. Notifications form the host are one<br/></p>
<p>of AAX_ENotificationEvent<br/>in inNotificationData Block of incoming notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p>Implements AAX_IACFEffectDirectData_V2.<br/></p>
<p><b>14.11.3.5 Controller()<br/></b></p>
<p>AAX_IController&#8727; AAX_CEffectDirectData::Controller (<br/>void )<br/></p>
<p>Returns a pointer to the plug-in's controller interface.<br/></p>
<p><b>Todo </b>Change to GetController to match other AAX_CEffect modules<br/></p>
<p><b>14.11.3.6 EffectParameters()<br/></b></p>
<p>AAX_IEffectParameters&#8727; AAX_CEffectDirectData::EffectParameters (<br/>void )<br/></p>
<p>Returns a pointer to the plug-in's data model interface.<br/></p>
<p><b>Todo </b>Change to GetController to match other AAX_CEffect modules<br/></p>
<p><b>14.11.3.7 Initialize_PrivateDataAccess()<br/></b></p>
<p>virtual AAX_Result AAX_CEffectDirectData::Initialize_PrivateDataAccess ( ) [protected], [virtual]<br/></p>
<p>Initialization routine for classes that inherit from AAX_CEffectDirectData. This method is called by the default<br/>Initialize() implementation after all internal members have been initialized, and provides a safe location in which<br/>to perform any additional initialization tasks.<br/></p>
<p><b>14.11.3.8 TimerWakeup_PrivateDataAccess()<br/></b></p>
<p>virtual AAX_Result AAX_CEffectDirectData::TimerWakeup_PrivateDataAccess (<br/>AAX_IPrivateDataAccess &#8727; iPrivateDataAccess ) [protected], [virtual]<br/></p>
<p>Callback provided with an AAX_IPrivateDataAccess. Override this method to access the algorithm's private data<br/>using the AAX_IPrivateDataAccess interface.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>438 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iPrivateDataAccess Pointer to an AAX_IPrivateDataAccess interface. This interface is only valid for<br/></p>
<p>the duration of this method.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CEffectDirectData.h<br/></p>
<p><b>14.12 AAX_CEffectGUI Class Reference<br/></b></p>
<p>#include &lt;AAX_CEffectGUI.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CEffectGUI:<br/></p>
<p>Collaboration diagram for AAX_CEffectGUI:<br/></p>
<p><b>14.12.1 Description<br/></b></p>
<p>Default implementation of the AAX_IEffectGUI interface.<br/></p>
<p>This class provides a default implementation of the AAX_IEffectGUI interface.<br/></p>
<p><b>Legacy Porting Notes </b>The default implementations in this class are mostly derived from their equivalent imple-<br/>mentations in CProcess and CEffectProcess. For additional CProcess-derived implemen-<br/>tations, see AAX_CEffectParameters.<br/></p>
<p><b>Note<br/></b>See AAX_IACFEffectGUI for further information.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CEffectGUI (void)<br/>&#8226; &#8764;AAX_CEffectGUI (void) AAX_OVERRIDE<br/></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; AAX_Result Initialize (IACFUnknown &#8727;iController) AAX_OVERRIDE<br/>Main GUI initialization.<br/></p>
<p>&#8226; AAX_Result Uninitialize (void) AAX_OVERRIDE<br/>Main GUI uninitialization.<br/></p>
<p><b>AAX host and plug-in event notification<br/></b></p>
<p>&#8226; AAX_Result NotificationReceived (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData,<br/>uint32_t inNotificationDataSize) AAX_OVERRIDE<br/></p>
<p>Notification Hook.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.12 AAX_CEffectGUI Class Reference 439<br/></b></p>
<p><b>View accessors<br/></b>&#8226; AAX_Result SetViewContainer (IACFUnknown &#8727;iViewContainer) AAX_OVERRIDE<br/></p>
<p>Provides a handle to the main plug-in window.<br/>&#8226; AAX_Result GetViewSize (AAX_Point &#8727;) const AAX_OVERRIDE<br/></p>
<p>Retrieves the size of the plug-in window.<br/></p>
<p><b>GUI update methods<br/></b>&#8226; AAX_Result Draw (AAX_Rect &#8727;) AAX_OVERRIDE<br/></p>
<p>DEPRECATED, Not called from host any longer. Your chosen graphics framework should be directly handling draw<br/>events from the OS.<br/></p>
<p>&#8226; AAX_Result TimerWakeup (void) AAX_OVERRIDE<br/>Periodic wakeup callback for idle-time operations.<br/></p>
<p>&#8226; AAX_Result ParameterUpdated (AAX_CParamID paramID) AAX_OVERRIDE<br/>Notifies the GUI that a parameter value has changed.<br/></p>
<p><b>Host interface methods<br/></b>Miscellaneous methods to provide host-specific functionality<br/></p>
<p>&#8226; AAX_Result GetCustomLabel (AAX_EPlugInStrings iSelector, AAX_IString &#8727;oString) const AAX_OVERRIDE<br/>Called by host application to retrieve a custom plug-in string.<br/></p>
<p>&#8226; AAX_Result SetControlHighlightInfo (AAX_CParamID, AAX_CBoolean, AAX_EHighlightColor) AAX_OVERRIDE<br/>Called by host application. Indicates that a control widget should be updated with a highlight color.<br/></p>
<p><b>Protected Member Functions<br/>AAX_CEffectGUI pure virtual interface<br/></b></p>
<p>The implementations of these methods will be specific to the particular GUI framework that is being incorporated<br/>with AAX_CEffectGUI. Classes that inherit from AAX_CEffectGUI must override these methods with their own<br/>framework-specific implementations.<br/></p>
<p>&#8226; virtual void CreateViewContents (void)=0<br/>Creates any required top-level GUI components.<br/></p>
<p>&#8226; virtual void CreateViewContainer (void)=0<br/>Initializes the plug-in window and creates the main GUI view or frame.<br/></p>
<p>&#8226; virtual void DeleteViewContainer (void)=0<br/>Uninitializes the plug-in window and deletes the main GUI view or frame.<br/></p>
<p><b>Helper methods<br/></b>&#8226; virtual void UpdateAllParameters (void)<br/></p>
<p>Requests an update to the GUI for every parameter view.<br/></p>
<p><b>Private member accessors<br/></b>&#8226; AAX_IController &#8727; GetController (void)<br/></p>
<p>Retrieves a reference to the plug-in's controller interface.<br/>&#8226; const AAX_IController &#8727; GetController (void) const<br/>&#8226; AAX_IEffectParameters &#8727; GetEffectParameters (void)<br/></p>
<p>Retrieves a reference to the plug-in's data model interface.<br/>&#8226; const AAX_IEffectParameters &#8727; GetEffectParameters (void) const<br/>&#8226; AAX_IViewContainer &#8727; GetViewContainer (void)<br/></p>
<p>Retrieves a reference to the plug-in's view container interface.<br/>&#8226; const AAX_IViewContainer &#8727; GetViewContainer (void) const<br/>&#8226; AAX_ITransport &#8727; Transport ()<br/></p>
<p>Retrieves a reference to the plug-in's Transport interface.<br/>&#8226; const AAX_ITransport &#8727; Transport () const<br/>&#8226; AAX_EViewContainer_Type GetViewContainerType ()<br/></p>
<p>Retrieves the Container and it's type.<br/>&#8226; void &#8727; GetViewContainerPtr ()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>440 Class Documentation<br/></b></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.12.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.12.2.1 AAX_CEffectGUI()<br/></b></p>
<p>AAX_CEffectGUI::AAX_CEffectGUI (<br/>void )<br/></p>
<p><b>14.12.2.2 </b>&#8764;<b>AAX_CEffectGUI()<br/></b></p>
<p>AAX_CEffectGUI::&#8764;AAX_CEffectGUI (<br/>void )<br/></p>
<p><b>14.12.3 Member Function Documentation<br/></b></p>
<p><b>14.12.3.1 Initialize()<br/></b></p>
<p>AAX_Result AAX_CEffectGUI::Initialize (<br/>IACFUnknown &#8727; iController ) [virtual]<br/></p>
<p>Main GUI initialization.<br/></p>
<p>Called when the GUI is created<br/></p>
<p><b>Parameters<br/></b>in iController A versioned reference that resolves to an AAX_IController interface<br/></p>
<p>Implements AAX_IACFEffectGUI.<br/></p>
<p><b>14.12.3.2 Uninitialize()<br/></b></p>
<p>AAX_Result AAX_CEffectGUI::Uninitialize (<br/>void ) [virtual]<br/></p>
<p>Main GUI uninitialization.<br/>Called when the GUI is destroyed. Frees the GUI.<br/>Implements AAX_IACFEffectGUI.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.12 AAX_CEffectGUI Class Reference 441<br/></b></p>
<p><b>14.12.3.3 NotificationReceived()<br/></b></p>
<p>AAX_Result AAX_CEffectGUI::NotificationReceived (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [virtual]<br/></p>
<p>Notification Hook.<br/></p>
<p>Called from the host to deliver notifications to this object.<br/></p>
<p>Look at the AAX_ENotificationEvent enumeration to see a description of events you can listen for and the data they<br/>come with.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>some notifications are sent only to the plug-in GUI while other notifications are sent only to the plug-<br/>in data model. If you are not seeing an expected notification, try checking the other plug-in objects'<br/>NotificationReceived() methods.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>the host may dispatch notifications synchronously or asynchronously, and calls to this method may<br/>occur concurrently on multiple threads.<br/></p>
<p>A plug-in may also dispatch custom notifications using AAX_IController::SendNotification(). Custom notifi-<br/>cations will be posted back to the plug-in's other objects which support a NotificationReceived()<br/>method (e.g. the data model).<br/></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification being received. Notifications form the host are one of<br/></p>
<p>AAX_ENotificationEvent<br/>in inNotificationData Block of incoming notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p><b>Note<br/></b>The default implementation doesn't do anything at this point, but it is probably still a good idea to call into<br/>the base class AAX_CEffectGUI::NotificationReceived() function in case we want to implement some default<br/>behaviors in the future.<br/></p>
<p>Implements AAX_IACFEffectGUI.<br/></p>
<p><b>14.12.3.4 SetViewContainer()<br/></b></p>
<p>AAX_Result AAX_CEffectGUI::SetViewContainer (<br/>IACFUnknown &#8727; iViewContainer ) [virtual]<br/></p>
<p>Provides a handle to the main plug-in window.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>442 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iViewContainer An AAX_IViewContainer providing a native handle to the plug-in's window<br/></p>
<p>Implements AAX_IACFEffectGUI.<br/></p>
<p><b>14.12.3.5 GetViewSize()<br/></b></p>
<p>AAX_Result AAX_CEffectGUI::GetViewSize (<br/>AAX_Point &#8727; oViewSize ) const [inline], [virtual]<br/></p>
<p>Retrieves the size of the plug-in window.<br/></p>
<p><b>See also<br/></b>AAX_IViewContainer::SetViewSize()<br/></p>
<p><b>Parameters<br/></b>out oViewSize The size of the plug-in window as a point (width, height)<br/></p>
<p>Implements AAX_IACFEffectGUI.<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>14.12.3.6 Draw()<br/></b></p>
<p>AAX_Result AAX_CEffectGUI::Draw (<br/>AAX_Rect &#8727; iDrawRect ) [inline], [virtual]<br/></p>
<p>DEPRECATED, Not called from host any longer. Your chosen graphics framework should be directly handling draw<br/>events from the OS.<br/></p>
<p>Implements AAX_IACFEffectGUI.<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.12 AAX_CEffectGUI Class Reference 443<br/></b></p>
<p><b>14.12.3.7 TimerWakeup()<br/></b></p>
<p>AAX_Result AAX_CEffectGUI::TimerWakeup (<br/>void ) [inline], [virtual]<br/></p>
<p>Periodic wakeup callback for idle-time operations.<br/></p>
<p>GUI animation events such as meter updates should be triggered from this method.<br/></p>
<p>This method is called from the host's main thread. In general, it should be driven at approximately one call per 30<br/>ms. However, the wakeup is not guaranteed to be called at any regular interval - for example, it could be held off by<br/>a high real-time processing load - and there is no host contract regarding maximum latency between wakeup calls.<br/></p>
<p>This wakeup runs continuously and cannot be armed/disarmed by the plug-in.<br/></p>
<p>Implements AAX_IACFEffectGUI.<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>14.12.3.8 ParameterUpdated()<br/></b></p>
<p>AAX_Result AAX_CEffectGUI::ParameterUpdated (<br/>AAX_CParamID inParamID ) [virtual]<br/></p>
<p>Notifies the GUI that a parameter value has changed.<br/></p>
<p>This method is called by the host whenever a parameter value has been modified<br/></p>
<p>This method may be called on a non-main thread<br/></p>
<p>Implements AAX_IACFEffectGUI.<br/></p>
<p><b>14.12.3.9 GetCustomLabel()<br/></b></p>
<p>AAX_Result AAX_CEffectGUI::GetCustomLabel (<br/>AAX_EPlugInStrings iSelector,<br/>AAX_IString &#8727; oString ) const [virtual]<br/></p>
<p>Called by host application to retrieve a custom plug-in string.<br/></p>
<p>If no string is provided then the host's default will be used.<br/></p>
<p><b>Parameters<br/></b>in iSelector The requested strong. One of AAX_EPlugInStrings<br/>out oString The plug-in's custom value for the requested string<br/></p>
<p>Implements AAX_IACFEffectGUI.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>444 Class Documentation<br/></b></p>
<p><b>14.12.3.10 SetControlHighlightInfo()<br/></b></p>
<p>AAX_Result AAX_CEffectGUI::SetControlHighlightInfo (<br/>AAX_CParamID iParameterID,<br/>AAX_CBoolean iIsHighlighted,<br/>AAX_EHighlightColor iColor ) [inline], [virtual]<br/></p>
<p>Called by host application. Indicates that a control widget should be updated with a highlight color.<br/></p>
<p><b>Todo </b>Document this method<br/></p>
<p><b>Legacy Porting Notes </b>This method was re-named from SetControlHighliteInfo(), its name in the<br/>legacy plug-in SDK.<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of parameter whose widget(s) must be highlighted<br/>in iIsHighlighted True if turning highlight on, false if turning it off<br/>in iColor Desired highlight color. One of AAX_EHighlightColor<br/></p>
<p>Implements AAX_IACFEffectGUI.<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>14.12.3.11 CreateViewContents()<br/></b></p>
<p>virtual void AAX_CEffectGUI::CreateViewContents (<br/>void ) [protected], [pure virtual]<br/></p>
<p>Creates any required top-level GUI components.<br/></p>
<p>This method is called by default from AAX_CEffectGUI::Initialize()<br/></p>
<p><b>14.12.3.12 CreateViewContainer()<br/></b></p>
<p>virtual void AAX_CEffectGUI::CreateViewContainer (<br/>void ) [protected], [pure virtual]<br/></p>
<p>Initializes the plug-in window and creates the main GUI view or frame.<br/></p>
<p>This method is called by default from AAX_CEffectGUI::SetViewContainer() when a valid window is present<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.12 AAX_CEffectGUI Class Reference 445<br/></b></p>
<p><b>14.12.3.13 DeleteViewContainer()<br/></b></p>
<p>virtual void AAX_CEffectGUI::DeleteViewContainer (<br/>void ) [protected], [pure virtual]<br/></p>
<p>Uninitializes the plug-in window and deletes the main GUI view or frame.<br/></p>
<p>This method is called by default from AAX_CEffectGUI::SetViewContainer() when no valid window is present. It<br/>may also be appropriate for inheriting classes to call this method from their destructors, depending on their own<br/>internal implementation.<br/></p>
<p><b>14.12.3.14 UpdateAllParameters()<br/></b></p>
<p>virtual void AAX_CEffectGUI::UpdateAllParameters (<br/>void ) [protected], [virtual]<br/></p>
<p>Requests an update to the GUI for every parameter view.<br/></p>
<p>By default, calls AAX_CEffectGUI::ParameterUpdated() on every registered parameter.<br/></p>
<p>By default, called from AAX_CEffectGUI::SetViewContainer() after a new view container has been created.<br/></p>
<p><b>Todo </b>Rename to UpdateAllParameterViews() or another name that does not lead to confusion regarding<br/>what exactly this method should be doing.<br/></p>
<p><b>14.12.3.15 GetController() [1/2]<br/></b></p>
<p>AAX_IController&#8727; AAX_CEffectGUI::GetController (<br/>void )<br/></p>
<p>Retrieves a reference to the plug-in's controller interface.<br/></p>
<p><b>14.12.3.16 GetController() [2/2]<br/></b></p>
<p>const AAX_IController&#8727; AAX_CEffectGUI::GetController (<br/>void ) const<br/></p>
<p><b>14.12.3.17 GetEffectParameters() [1/2]<br/></b></p>
<p>AAX_IEffectParameters&#8727; AAX_CEffectGUI::GetEffectParameters (<br/>void )<br/></p>
<p>Retrieves a reference to the plug-in's data model interface.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>446 Class Documentation<br/></b></p>
<p><b>14.12.3.18 GetEffectParameters() [2/2]<br/></b></p>
<p>const AAX_IEffectParameters&#8727; AAX_CEffectGUI::GetEffectParameters (<br/>void ) const<br/></p>
<p><b>14.12.3.19 GetViewContainer() [1/2]<br/></b></p>
<p>AAX_IViewContainer&#8727; AAX_CEffectGUI::GetViewContainer (<br/>void )<br/></p>
<p>Retrieves a reference to the plug-in's view container interface.<br/></p>
<p><b>14.12.3.20 GetViewContainer() [2/2]<br/></b></p>
<p>const AAX_IViewContainer&#8727; AAX_CEffectGUI::GetViewContainer (<br/>void ) const<br/></p>
<p><b>14.12.3.21 Transport() [1/2]<br/></b></p>
<p>AAX_ITransport&#8727; AAX_CEffectGUI::Transport ( )<br/></p>
<p>Retrieves a reference to the plug-in's Transport interface.<br/></p>
<p><b>14.12.3.22 Transport() [2/2]<br/></b></p>
<p>const AAX_ITransport&#8727; AAX_CEffectGUI::Transport ( ) const<br/></p>
<p><b>14.12.3.23 GetViewContainerType()<br/></b></p>
<p>AAX_EViewContainer_Type AAX_CEffectGUI::GetViewContainerType ( )<br/></p>
<p>Retrieves the Container and it's type.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 447<br/></b></p>
<p><b>14.12.3.24 GetViewContainerPtr()<br/></b></p>
<p>void&#8727; AAX_CEffectGUI::GetViewContainerPtr ( )<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CEffectGUI.h<br/></p>
<p><b>14.13 AAX_CEffectParameters Class Reference<br/></b></p>
<p>#include &lt;AAX_CEffectParameters.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CEffectParameters:<br/></p>
<p>Collaboration diagram for AAX_CEffectParameters:<br/></p>
<p><b>14.13.1 Description<br/></b></p>
<p>Default implementation of the AAX_IEffectParameters interface.<br/></p>
<p>This class provides a default implementation of the AAX_IEffectParameters interface. In nearly all cases, your plug-<br/>in's data model should inherit from this class and override only those functions that you wish to explicitly customize.<br/></p>
<p><b>Legacy Porting Notes </b>The default implementations in this class are mostly derived from their equivalent imple-<br/>mentations in CProcess and CEffectProcess. For additional CProcess-derived implemen-<br/>tations, see AAX_CEffectGUI.<br/></p>
<p><b>14.13.2 Related classes<br/></b></p>
<p>AAX_IACFEffectParameters<br/></p>
<p>AAX_IEffectParameters<br/></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_IController AAX_IAutomationDelegate<br/></p>
<p>AAX_CEffectGUI<br/></p>
<p><b>Figure 14.1 Classes related to AAX_IEffectParameters by inheritance or composition<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>448 Class Documentation<br/></b></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_CParameterManager AAX_CChunkDataParser AAX_CPacketDispatcher<br/></p>
<p><b>Figure 14.2 Classes owned as member objects of AAX_CEffectParameters<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CEffectParameters (void)<br/>&#8226; &#8764;AAX_CEffectParameters (void) AAX_OVERRIDE<br/>&#8226; AAX_CEffectParameters &amp; operator= (const AAX_CEffectParameters &amp;other)<br/></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; AAX_Result Initialize (IACFUnknown &#8727;iController) AAX_OVERRIDE<br/>Main data model initialization. Called when plug-in instance is first instantiated.<br/></p>
<p>&#8226; AAX_Result Uninitialize (void) AAX_OVERRIDE<br/>Main data model uninitialization.<br/></p>
<p><b>AAX host and plug-in event notification<br/></b></p>
<p>&#8226; AAX_Result NotificationReceived (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData,<br/>uint32_t inNotificationDataSize) AAX_OVERRIDE<br/></p>
<p>Notification Hook.<br/></p>
<p><b>Parameter information<br/></b>These methods are used by the AAX host to retrieve information about the plug-in's data model. For in-<br/>formation about adding parameters to the plug-in and otherwise modifying the plug-in's data model, see<br/>AAX_CParameterManager. For information about parameters, see AAX_IParameter.<br/></p>
<p>&#8226; AAX_Result GetNumberOfParameters (int32_t &#8727;oNumControls) const AAX_OVERRIDE<br/>CALL: Retrieves the total number of plug-in parameters.<br/></p>
<p>&#8226; AAX_Result GetMasterBypassParameter (AAX_IString &#8727;oIDString) const AAX_OVERRIDE<br/>CALL: Retrieves the ID of the plug-in's Master Bypass parameter.<br/></p>
<p>&#8226; AAX_Result GetParameterIsAutomatable (AAX_CParamID iParameterID, AAX_CBoolean &#8727;oAutomatable)<br/>const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves information about a parameter's automatable status.<br/>&#8226; AAX_Result GetParameterNumberOfSteps (AAX_CParamID iParameterID, int32_t &#8727;oNumSteps) const<br/></p>
<p>AAX_OVERRIDE<br/>CALL: Retrieves the number of discrete steps for a parameter.<br/></p>
<p>&#8226; AAX_Result GetParameterName (AAX_CParamID iParameterID, AAX_IString &#8727;oName) const<br/>AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the full name for a parameter.<br/>&#8226; AAX_Result GetParameterNameOfLength (AAX_CParamID iParameterID, AAX_IString &#8727;oName, int32_t<br/></p>
<p>iNameLength) const AAX_OVERRIDE<br/>CALL: Retrieves an abbreviated name for a parameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 449<br/></b></p>
<p>&#8226; AAX_Result GetParameterDefaultNormalizedValue (AAX_CParamID iParameterID, double &#8727;oValue) const<br/>AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves default value of a parameter.<br/>&#8226; AAX_Result SetParameterDefaultNormalizedValue (AAX_CParamID iParameterID, double iValue)<br/></p>
<p>AAX_OVERRIDE<br/>CALL: Sets the default value of a parameter.<br/></p>
<p>&#8226; AAX_Result GetParameterType (AAX_CParamID iParameterID, AAX_EParameterType &#8727;oParameterType)<br/>const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the type of a parameter.<br/>&#8226; AAX_Result GetParameterOrientation (AAX_CParamID iParameterID, AAX_EParameterOrientation &#8727;o&#8592;&#8617;<br/></p>
<p>ParameterOrientation) const AAX_OVERRIDE<br/>CALL: Retrieves the orientation that should be applied to a parameter's controls.<br/></p>
<p>&#8226; AAX_Result GetParameter (AAX_CParamID iParameterID, AAX_IParameter &#8727;&#8727;oParameter) AAX_OVERRIDE<br/>CALL: Retrieves an arbitrary setting within a parameter.<br/></p>
<p>&#8226; AAX_Result GetParameterIndex (AAX_CParamID iParameterID, int32_t &#8727;oControlIndex) const<br/>AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the index of a parameter.<br/>&#8226; AAX_Result GetParameterIDFromIndex (int32_t iControlIndex, AAX_IString &#8727;oParameterIDString) const<br/></p>
<p>AAX_OVERRIDE<br/>CALL: Retrieves the ID of a parameter.<br/></p>
<p>&#8226; AAX_Result GetParameterValueInfo (AAX_CParamID iParameterID, int32_t iSelector, int32_t &#8727;oValue)<br/>const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves a property of a parameter.<br/></p>
<p><b>Parameter setters and getters<br/></b>These methods are used by the AAX host and by the plug-in's UI to retrieve and modify the values of the plug-in's<br/>parameters.<br/><b>Note<br/></b></p>
<p>The parameter setters in this section may generate asynchronous requests.<br/></p>
<p>&#8226; AAX_Result GetParameterValueFromString (AAX_CParamID iParameterID, double &#8727;oValue, const<br/>AAX_IString &amp;iValueString) const AAX_OVERRIDE<br/></p>
<p>CALL: Converts a value string to a value.<br/>&#8226; AAX_Result GetParameterStringFromValue (AAX_CParamID iParameterID, double iValue, AAX_IString<br/>&#8727;oValueString, int32_t iMaxLength) const AAX_OVERRIDE<br/></p>
<p>CALL: Converts a normalized parameter value into a string representing its corresponding real value.<br/>&#8226; AAX_Result GetParameterValueString (AAX_CParamID iParameterID, AAX_IString &#8727;oValueString,<br/></p>
<p>int32_t iMaxLength) const AAX_OVERRIDE<br/>CALL: Retrieves the value string associated with a parameter's current value.<br/></p>
<p>&#8226; AAX_Result GetParameterNormalizedValue (AAX_CParamID iParameterID, double &#8727;oValuePtr) const<br/>AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves a parameter's current value.<br/>&#8226; AAX_Result SetParameterNormalizedValue (AAX_CParamID iParameterID, double iValue) AAX_OVERRIDE<br/></p>
<p>CALL: Sets the specified parameter to a new value.<br/>&#8226; AAX_Result SetParameterNormalizedRelative (AAX_CParamID iParameterID, double iValue) AAX_OVERRIDE<br/></p>
<p>CALL: Sets the specified parameter to a new value relative to its current value.<br/></p>
<p><b>Automated parameter helpers<br/></b>These methods are used to lock and unlock automation system 'resources' when updating automatable param-<br/>eters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>450 Class Documentation<br/></b></p>
<p><b>Note<br/></b>You should never need to override these methods to extend their behavior beyond what is provided in<br/>AAX_CEffectParameters and AAX_IParameter<br/></p>
<p>&#8226; AAX_Result TouchParameter (AAX_CParamID iParameterID) AAX_OVERRIDE<br/>&quot;Touches&quot; (locks) a parameter in the automation system to a particular control in preparation for updates<br/></p>
<p>&#8226; AAX_Result ReleaseParameter (AAX_CParamID iParameterID) AAX_OVERRIDE<br/>Releases a parameter from a &quot;touched&quot; state.<br/></p>
<p>&#8226; AAX_Result UpdateParameterTouch (AAX_CParamID iParameterID, AAX_CBoolean iTouchState)<br/>AAX_OVERRIDE<br/></p>
<p>Sets a &quot;touched&quot; state on a parameter.<br/></p>
<p><b>Asynchronous parameter update methods<br/></b>These methods are called by the AAX host when parameter values have been updated. They are called by the<br/>host and can be triggered by other plug-in modules via calls to AAX_IParameter's SetValue methods, e.g.<br/>SetValueWithFloat()<br/>These methods are responsible for updating parameter values.<br/>Do not call these methods directly! To ensure proper synchronization and to avoid problematic dependency<br/>chains, other methods (e.g. SetParameterNormalizedValue()) and components (e.g. AAX_IEffectGUI) should<br/>always call a SetValue method on AAX_IParameter to update parameter values. The SetValue method<br/>will properly manage automation locks and other system resources.<br/></p>
<p>&#8226; AAX_Result UpdateParameterNormalizedValue (AAX_CParamID iParameterID, double iValue,<br/>AAX_EUpdateSource iSource) AAX_OVERRIDE<br/></p>
<p>Updates a single parameter's state to its current value.<br/>&#8226; AAX_Result UpdateParameterNormalizedRelative (AAX_CParamID iParameterID, double iValue)<br/></p>
<p>AAX_OVERRIDE<br/>Updates a single parameter's state to its current value, as a difference with the parameter's previous value.<br/></p>
<p>&#8226; AAX_Result GenerateCoefficients (void) AAX_OVERRIDE<br/>Generates and dispatches new coefficient packets.<br/></p>
<p><b>State reset handlers<br/></b></p>
<p>&#8226; AAX_Result ResetFieldData (AAX_CFieldIndex inFieldIndex, void &#8727;oData, uint32_t inDataSize) const<br/>AAX_OVERRIDE<br/></p>
<p>Called by the host to reset a private data field in the plug-in's algorithm.<br/></p>
<p><b>Chunk methods<br/></b>These methods are used to save and restore collections of plug-in state information, known as chunks. Chunks<br/>are used by the host when saving or restoring presets and session settings and when providing &quot;compare&quot;<br/>functionality for plug-ins.<br/>The default implementation of these methods in AAX_CEffectParameters supports a single chunk that includes<br/>state information for all of the plug-in's registered parameters. Override all of these methods to add support for<br/>additional chunks in your plug-in, for example if your plug-ni contains any persistent state that is not encapsulated<br/>by its set of registered parameters.<br/>For reference, see also:<br/></p>
<p>&#8226; AAX_CChunkDataParser<br/>&#8226; AAX_SPlugInChunk<br/></p>
<p>&#8226; AAX_Result GetNumberOfChunks (int32_t &#8727;oNumChunks) const AAX_OVERRIDE<br/>Retrieves the number of chunks used by this plug-in.<br/></p>
<p>&#8226; AAX_Result GetChunkIDFromIndex (int32_t iIndex, AAX_CTypeID &#8727;oChunkID) const AAX_OVERRIDE<br/>Retrieves the ID associated with a chunk index.<br/></p>
<p>&#8226; AAX_Result GetChunkSize (AAX_CTypeID iChunkID, uint32_t &#8727;oSize) const AAX_OVERRIDE<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 451<br/></b></p>
<p>Get the size of the data structure that can hold all of a chunk's information.<br/>&#8226; AAX_Result GetChunk (AAX_CTypeID iChunkID, AAX_SPlugInChunk &#8727;oChunk) const AAX_OVERRIDE<br/></p>
<p>Fills a block of data with chunk information representing the plug-in's current state.<br/>&#8226; AAX_Result SetChunk (AAX_CTypeID iChunkID, const AAX_SPlugInChunk &#8727;iChunk) AAX_OVERRIDE<br/></p>
<p>Restores a set of plug-in parameters based on chunk information.<br/>&#8226; AAX_Result CompareActiveChunk (const AAX_SPlugInChunk &#8727;iChunkP, AAX_CBoolean &#8727;oIsEqual)<br/></p>
<p>const AAX_OVERRIDE<br/>Determine if a chunk represents settings that are equivalent to the plug-in's current state.<br/></p>
<p>&#8226; AAX_Result GetNumberOfChanges (int32_t &#8727;oNumChanges) const AAX_OVERRIDE<br/>Retrieves the number of parameter changes made since the plug-in's creation.<br/></p>
<p><b>Threads<br/></b>Threading functions<br/></p>
<p>&#8226; AAX_Result TimerWakeup () AAX_OVERRIDE<br/>Periodic wakeup callback for idle-time operations.<br/></p>
<p><b>Auxiliary UI methods<br/></b>Methods defining the presentation of the plug-in on auxiliary UIs such as control surfaces<br/></p>
<p>&#8226; AAX_Result GetCurveData (AAX_CTypeID iCurveType, const float &#8727;iValues, uint32_t iNumValues, float<br/>&#8727;oValues) const AAX_OVERRIDE<br/></p>
<p>Generate a set of output values based on a set of given input values.<br/>&#8226; AAX_Result GetCurveDataMeterIds (AAX_CTypeID iCurveType, uint32_t &#8727;oXMeterId, uint32_t &#8727;o&#8592;&#8617;<br/></p>
<p>YMeterId) const AAX_OVERRIDE<br/>Indicates which meters correspond to the X and Y axes of the EQ or Dynamics graph.<br/></p>
<p>&#8226; AAX_Result GetCurveDataDisplayRange (AAX_CTypeID iCurveType, float &#8727;oXMin, float &#8727;oXMax, float<br/>&#8727;oYMin, float &#8727;oYMax) const AAX_OVERRIDE<br/></p>
<p>Determines the range of the graph shown by the plug-in.<br/>&#8226; AAX_Result UpdatePageTable (uint32_t inTableType, int32_t inTablePageSize, IACFUnknown &#8727;iHost&#8592;&#8617;<br/></p>
<p>Unknown, IACFUnknown &#8727;ioPageTableUnknown) const AAX_OVERRIDE AAX_FINAL<br/>Allow the plug-in to update its page tables.<br/></p>
<p><b>Custom Data Methods<br/></b>These functions exist as a proxiable way to move data between different modules (e.g. AAX_IEffectParameters<br/>and AAX_IEffectGUI.) Using these, the GUI can query any data through GetCustomData() with a plug-in defined<br/>typeID, void&#8727; and size. This has an advantage over just sharing memory in that this function can work as a<br/>remote proxy as we enable those sorts of features later in the platform. Likewise, the GUI can also set arbitrary<br/>data on the data model by using the SetCustomData() function with the same idea.<br/><b>Note<br/></b></p>
<p>These are plug-in internal only. They are not called from the host right now, or likely ever.<br/></p>
<p>&#8226; AAX_Result GetCustomData (AAX_CTypeID iDataBlockID, uint32_t inDataSize, void &#8727;oData, uint32_&#8592;&#8617;<br/>t &#8727;oDataWritten) const AAX_OVERRIDE<br/></p>
<p>An optional interface hook for getting custom data from another module.<br/>&#8226; AAX_Result SetCustomData (AAX_CTypeID iDataBlockID, uint32_t inDataSize, const void &#8727;iData)<br/></p>
<p>AAX_OVERRIDE<br/>An optional interface hook for setting custom data for use by another module.<br/></p>
<p><b>MIDI methods<br/></b></p>
<p>&#8226; AAX_Result DoMIDITransfers () AAX_OVERRIDE<br/>MIDI update callback.<br/></p>
<p>&#8226; AAX_Result UpdateMIDINodes (AAX_CFieldIndex inFieldIndex, AAX_CMidiPacket &amp;iPacket) AAX_OVERRIDE<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>452 Class Documentation<br/></b></p>
<p>MIDI update callback.<br/>&#8226; AAX_Result UpdateControlMIDINodes (AAX_CTypeID nodeID, AAX_CMidiPacket &amp;iPacket) AAX_OVERRIDE<br/></p>
<p>MIDI update callback for control MIDI nodes.<br/></p>
<p><b>Hybrid audio methods<br/></b></p>
<p>&#8226; AAX_Result RenderAudio_Hybrid (AAX_SHybridRenderInfo &#8727;ioRenderInfo) AAX_OVERRIDE<br/>Hybrid audio render function.<br/></p>
<p><b>Private data accessors<br/></b></p>
<p>&#8226; AAX_IController &#8727; Controller ()<br/>Access to the Effect controller.<br/></p>
<p>&#8226; const AAX_IController &#8727; Controller () const<br/>const access to the Effect controller<br/></p>
<p>&#8226; AAX_ITransport &#8727; Transport ()<br/>Access to the Transport object.<br/></p>
<p>&#8226; const AAX_ITransport &#8727; Transport () const<br/>const access to the Transport object<br/></p>
<p>&#8226; AAX_IAutomationDelegate &#8727; AutomationDelegate ()<br/>Access to the Effect's automation delegate.<br/></p>
<p>&#8226; const AAX_IAutomationDelegate &#8727; AutomationDelegate () const<br/>const access to the Effect's automation delegate<br/></p>
<p><b>Protected Member Functions<br/>Parameter management methods<br/></b></p>
<p>&#8226; AAX_Result SetTaperDelegate (AAX_CParamID iParameterID, AAX_ITaperDelegateBase &amp;iTaper&#8592;&#8617;<br/>Delegate, bool iPreserveValue)<br/></p>
<p>&#8226; AAX_Result SetDisplayDelegate (AAX_CParamID iParameterID, AAX_IDisplayDelegateBase &amp;iDisplay&#8592;&#8617;<br/>Delegate)<br/></p>
<p>&#8226; bool IsParameterTouched (AAX_CParamID iParameterID) const<br/>&#8226; bool IsParameterLinkReady (AAX_CParamID inParameterID, AAX_EUpdateSource inSource) const<br/></p>
<p><b>Convenience functions<br/></b></p>
<p>These convenience functions provide quick access to various aspects of the default AAX_CEffectParameters im-<br/>plementation.<br/></p>
<p>&#8226; int32_t mNumPlugInChanges<br/>&#8226; int32_t mChunkSize<br/>&#8226; AAX_CChunkDataParser mChunkParser<br/>&#8226; int32_t mNumChunkedParameters<br/>&#8226; AAX_CPacketDispatcher mPacketDispatcher<br/>&#8226; AAX_CParameterManager mParameterManager<br/>&#8226; std::set&lt; std::string &gt; mFilteredParameters<br/>&#8226; virtual AAX_Result EffectInit (void)<br/></p>
<p>Initialization helper routine. Called from AAX_CEffectParameters::Initialize.<br/>&#8226; virtual AAX_Result UpdatePageTable (uint32_t, int32_t, AAX_IPageTable &amp;) const<br/>&#8226; void FilterParameterIDOnSave (AAX_CParamID controlID)<br/></p>
<p>CALL: Indicates the indices of parameters that should not be saved in the default AAX_CEffectParameters chunk.<br/>&#8226; void BuildChunkData (void) const<br/></p>
<p>Clears out the current chunk in Chunk Parser and adds all of the new values. Used by default implementations of<br/>GetChunk() and GetChunkSize().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 453<br/></b></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.13.3 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.13.3.1 AAX_CEffectParameters()<br/></b></p>
<p>AAX_CEffectParameters::AAX_CEffectParameters (<br/>void )<br/></p>
<p><b>14.13.3.2 </b>&#8764;<b>AAX_CEffectParameters()<br/></b></p>
<p>AAX_CEffectParameters::&#8764;AAX_CEffectParameters (<br/>void )<br/></p>
<p><b>14.13.4 Member Function Documentation<br/></b></p>
<p><b>14.13.4.1 operator=()<br/></b></p>
<p>AAX_CEffectParameters&amp; AAX_CEffectParameters::operator= (<br/>const AAX_CEffectParameters &amp; other )<br/></p>
<p><b>14.13.4.2 Initialize()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::Initialize (<br/>IACFUnknown &#8727; iController ) [virtual]<br/></p>
<p>Main data model initialization. Called when plug-in instance is first instantiated.<br/></p>
<p><b>Note<br/></b>Most plug-ins should override AAX_CEffectParameters::EffectInit() rather than directly overriding this method<br/></p>
<p><b>Parameters<br/></b>in iController A versioned reference that resolves to an AAX_IController interface<br/></p>
<p>This default implementation calls EffectInit(). Only override Initialize() when additional initialization steps must be<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>454 Class Documentation<br/></b></p>
<p>performed prior to EffectInit().<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.3 Uninitialize()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::Uninitialize (<br/>void ) [virtual]<br/></p>
<p>Main data model uninitialization.<br/></p>
<p><b>Todo </b>Docs: When exactly is AAX_IACFEffectParameters::Uninitialize() called, and under what conditions?<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.4 NotificationReceived()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::NotificationReceived (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [virtual]<br/></p>
<p>Notification Hook.<br/></p>
<p>Called from the host to deliver notifications to this object.<br/></p>
<p>Look at the AAX_ENotificationEvent enumeration to see a description of events you can listen for and the data they<br/>come with.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>some notifications are sent only to the plug-in GUI while other notifications are sent only to the plug-<br/>in data model. If you are not seeing an expected notification, try checking the other plug-in objects'<br/>NotificationReceived() methods.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>the host may dispatch notifications synchronously or asynchronously, and calls to this method may<br/>occur concurrently on multiple threads.<br/></p>
<p>A plug-in may also dispatch custom notifications using AAX_IController::SendNotification(). Custom notifi-<br/>cations will be posted back to the plug-in's other objects which support a NotificationReceived()<br/>method (e.g. the GUI).<br/></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification being received. Notifications form the host are one of<br/></p>
<p>AAX_ENotificationEvent<br/>in inNotificationData Block of incoming notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 455<br/></b></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.5 GetNumberOfParameters()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetNumberOfParameters (<br/>int32_t &#8727; oNumControls ) const [virtual]<br/></p>
<p>CALL: Retrieves the total number of plug-in parameters.<br/></p>
<p><b>Parameters<br/></b>out oNumControls The number of parameters in the plug-in's Parameter Manager<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.6 GetMasterBypassParameter()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetMasterBypassParameter (<br/>AAX_IString &#8727; oIDString ) const [virtual]<br/></p>
<p>CALL: Retrieves the ID of the plug-in's Master Bypass parameter.<br/></p>
<p>This is required if you want our master bypass functionality in the host to hook up to your bypass parameters.<br/></p>
<p><b>Parameters<br/></b>out oIDString The ID of the plug-in's Master Bypass control<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.7 GetParameterIsAutomatable()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterIsAutomatable (<br/>AAX_CParamID iParameterID,<br/>AAX_CBoolean &#8727; oAutomatable ) const [virtual]<br/></p>
<p>CALL: Retrieves information about a parameter's automatable status.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oAutomatable True if the queried parameter is automatable, false if it is not<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>456 Class Documentation<br/></b></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.8 GetParameterNumberOfSteps()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterNumberOfSteps (<br/>AAX_CParamID iParameterID,<br/>int32_t &#8727; oNumSteps ) const [virtual]<br/></p>
<p>CALL: Retrieves the number of discrete steps for a parameter.<br/></p>
<p><b>Note<br/></b>The value returned for oNumSteps MUST be greater than zero. All other values will be considered an error<br/>by the host.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oNumSteps The number of steps for this parameter<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.9 GetParameterName()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterName (<br/>AAX_CParamID iParameterID,<br/>AAX_IString &#8727; oName ) const [virtual]<br/></p>
<p>CALL: Retrieves the full name for a parameter.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oName Reference to an AAX_IString owned by the host. The plug-in must set this string<br/></p>
<p>equal to the parameter's full name.<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.10 GetParameterNameOfLength()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterNameOfLength (<br/>AAX_CParamID iParameterID,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 457<br/></b></p>
<p>AAX_IString &#8727; oName,<br/>int32_t iNameLength ) const [virtual]<br/></p>
<p>CALL: Retrieves an abbreviated name for a parameter.<br/></p>
<p>In general, lengths of 3 through 8 and 31 should be specifically addressed.<br/></p>
<p><b>Host Compatibility Notes </b>In most cases, the AAX host will call GetParameterName() or GetParameterNameOfLength()<br/>to retrieve parameter names for display. However, when Pro Tools is retrieving a plug-in<br/>name for display on a control surface the XML data stored in the plug-in's page tables<br/>will be used in preference to values retrieved from these methods.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oName Reference to an AAX_IString owned by the host. The plug-in must set this string<br/></p>
<p>equal to an abbreviated name for the parameter, using iNameLength characters or<br/>fewer.<br/></p>
<p>in iNameLength The maximum number of characters in oName<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.11 GetParameterDefaultNormalizedValue()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterDefaultNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double &#8727; oValue ) const [virtual]<br/></p>
<p>CALL: Retrieves default value of a parameter.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oValue The parameter's default value<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.12 SetParameterDefaultNormalizedValue()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::SetParameterDefaultNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double iValue ) [virtual]<br/></p>
<p>CALL: Sets the default value of a parameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>458 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being updated<br/>out iValue The parameter's new default value<br/></p>
<p><b>Todo </b>THIS IS NOT CALLED FROM HOST. USEFUL FOR INTERNAL USE ONLY?<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.13 GetParameterType()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterType (<br/>AAX_CParamID iParameterID,<br/>AAX_EParameterType &#8727; oParameterType ) const [virtual]<br/></p>
<p>CALL: Retrieves the type of a parameter.<br/></p>
<p><b>Todo </b>The concept of parameter type needs more documentation<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oParameterType The parameter's type<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.14 GetParameterOrientation()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterOrientation (<br/>AAX_CParamID iParameterID,<br/>AAX_EParameterOrientation &#8727; oParameterOrientation ) const [virtual]<br/></p>
<p>CALL: Retrieves the orientation that should be applied to a parameter's controls.<br/></p>
<p><b>Todo </b>update this documentation<br/></p>
<p>This method allows you to specify the orientation of knob controls that are managed by the host (e.g. knobs on an<br/>attached control surface.)<br/></p>
<p>Here is an example override of this method that reverses the orientation of a control for a parameter:<br/>// AAX_IParameter* myBackwardsParameter<br/>if (iParameterID == myBackwardsParameter-&gt;Identifier())<br/>{<br/></p>
<p>*oParameterType =<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 459<br/></b></p>
<p>AAX_eParameterOrientation_BottomMinTopMax |<br/>AAX_eParameterOrientation_LeftMinRightMax |<br/>AAX_eParameterOrientation_RotaryWrapMode |<br/>AAX_eParameterOrientation_RotaryLeftMinRightMax;<br/></p>
<p>}<br/></p>
<p>The orientation options are set according to AAX_EParameterOrientationBits<br/></p>
<p><b>Legacy Porting Notes </b>AAX_IEffectParameters::GetParameterOrientation() corresponds to the GetControl&#8592;&#8617;<br/>Orientation() method in the legacy RTAS/TDM SDK.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oParameterOrientation The orientation of the parameter<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.15 GetParameter()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameter (<br/>AAX_CParamID iParameterID,<br/>AAX_IParameter &#8727;&#8727; oParameter ) [virtual]<br/></p>
<p>CALL: Retrieves an arbitrary setting within a parameter.<br/></p>
<p>This is a convenience function for accessing the richer parameter interface from the plug-in's other modules.<br/></p>
<p><b>Note<br/></b>This function must not be called by the host; AAX_IParameter is not safe for passing across the binary bound-<br/>ary with the host!<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oParameter A pointer to the returned parameter<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.16 GetParameterIndex()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterIndex (<br/>AAX_CParamID iParameterID,<br/>int32_t &#8727; oControlIndex ) const [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>460 Class Documentation<br/></b></p>
<p>CALL: Retrieves the index of a parameter.<br/></p>
<p>Although parameters are normally referenced by their AAX_CParamID, each parameter is also associated with a<br/>unique numeric index.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 461<br/></b></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oControlIndex The parameter's numeric index<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.17 GetParameterIDFromIndex()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterIDFromIndex (<br/>int32_t iControlIndex,<br/>AAX_IString &#8727; oParameterIDString ) const [virtual]<br/></p>
<p>CALL: Retrieves the ID of a parameter.<br/></p>
<p>This method can be used to convert a parameter's unique numeric index to its AAX_CParamID<br/></p>
<p><b>Parameters<br/></b>in iControlIndex The numeric index of the parameter that is being queried<br/>out oParameterIDString Reference to an AAX_IString owned by the host. The plug-in must set this<br/></p>
<p>string equal to the parameter's ID.<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.18 GetParameterValueInfo()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterValueInfo (<br/>AAX_CParamID iParameterID,<br/>int32_t iSelector,<br/>int32_t &#8727; oValue ) const [virtual]<br/></p>
<p>CALL: Retrieves a property of a parameter.<br/></p>
<p>This is a general purpose query that is specialized based on the value of iSelector. The currently supported<br/>selector values are described by AAX_EParameterValueInfoSelector . The meaning of oValue is dependent upon<br/>iSelector .<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>in iSelector The selector of the parameter value to retrieve. See AAX_EParameterValueInfoSelector<br/>out oValue The value of the specified parameter<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>462 Class Documentation<br/></b></p>
<p><b>14.13.4.19 GetParameterValueFromString()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterValueFromString (<br/>AAX_CParamID iParameterID,<br/>double &#8727; oValue,<br/>const AAX_IString &amp; iValueString ) const [virtual]<br/></p>
<p>CALL: Converts a value string to a value.<br/></p>
<p>This method uses the queried parameter's display delegate and taper to convert a char&#8727; string into its correspond-<br/>ing value. The formatting of valueString must be supported by the parameter's display delegate in order for this call<br/>to succeed.<br/></p>
<p><b>Legacy Porting Notes </b>This method corresponds to CProcess::MapControlStringToVal() in the RTAS/TDM SDK<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oValue The value associated with valueString<br/>in iValueString The formatted value string that will be converted into a value<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.20 GetParameterStringFromValue()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterStringFromValue (<br/>AAX_CParamID iParameterID,<br/>double iValue,<br/>AAX_IString &#8727; oValueString,<br/>int32_t iMaxLength ) const [virtual]<br/></p>
<p>CALL: Converts a normalized parameter value into a string representing its corresponding real value.<br/></p>
<p>This method uses the queried parameter's display delegate and taper to convert a normalized value into the corre-<br/>sponding char&#8727; value string for its real value.<br/></p>
<p><b>Legacy Porting Notes </b>This method corresponds to CProcess::MapControlValToString() in the RTAS/TDM SDK<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>in iValue The normalized value that will be converted to a formatted valueString<br/>out oValueString The formatted value string associated with value<br/>in iMaxLength The maximum length of valueString<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 463<br/></b></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.21 GetParameterValueString()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterValueString (<br/>AAX_CParamID iParameterID,<br/>AAX_IString &#8727; oValueString,<br/>int32_t iMaxLength ) const [virtual]<br/></p>
<p>CALL: Retrieves the value string associated with a parameter's current value.<br/></p>
<p>This method uses the queried parameter's display delegate and taper to convert its current value into a correspond-<br/>ing char&#8727; value string.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oValueString The formatted value string associated with the parameter's current value<br/>in iMaxLength The maximum length of valueString<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.22 GetParameterNormalizedValue()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetParameterNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double &#8727; oValuePtr ) const [virtual]<br/></p>
<p>CALL: Retrieves a parameter's current value.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oValuePtr The parameter's current value<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.23 SetParameterNormalizedValue()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::SetParameterNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double iValue ) [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>464 Class Documentation<br/></b></p>
<p>CALL: Sets the specified parameter to a new value.<br/></p>
<p>SetParameterNormalizedValue() is responsible for initiating any process that is required in order to update all of the<br/>parameter's controls (e.g. in the plug-in's GUI, on control surfaces, in automation lanes, etc.) In most cases, the<br/>parameter manager will handle this initiation step.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being set<br/>in iValue The value to which the parameter should be set<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.24 SetParameterNormalizedRelative()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::SetParameterNormalizedRelative (<br/>AAX_CParamID iParameterID,<br/>double iValue ) [virtual]<br/></p>
<p>CALL: Sets the specified parameter to a new value relative to its current value.<br/></p>
<p>This method is used in cases when a relative control value is more convenient, for example when updating a GUI<br/>control using a mouse wheel or the arrow keys. Note that the host may apply the parameter's step size prior to<br/>calling SetParameterNormalizedRelative() in order to determine the correct value for aValue.<br/></p>
<p>SetParameterNormalizedRelative() can be used to incorporate &quot;wrapping&quot; behavior in a parameter's controls, if<br/>desired. If this behavior is not desired, then this method must properly account for overflow of the parameter's<br/>normalized value.<br/></p>
<p>SetParameterNormalizedRelative() is responsible for initiating any process that is required in order to update all of<br/>the parameter's controls (e.g. in the plug-in's GUI, on control surfaces, in automation lanes, etc.) In most cases, the<br/>parameter manager will handle this initiation step.<br/></p>
<p>See also UpdateParameterNormalizedRelative().<br/></p>
<p><b>Todo </b>REMOVE THIS METHOD (?)<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>in iValue The change in value that should be applied to the parameter<br/></p>
<p><b>Todo </b>NOT CURRENTLY CALLED FROM THE HOST. USEFUL FOR INTERNAL USE ONLY?<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 465<br/></b></p>
<p><b>14.13.4.25 TouchParameter()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::TouchParameter (<br/>AAX_CParamID iParameterID ) [virtual]<br/></p>
<p>&quot;Touches&quot; (locks) a parameter in the automation system to a particular control in preparation for updates<br/></p>
<p>This method is called by the Parameter Manager to prime a parameter for receiving new automation data. When an<br/>automatable parameter is touched by a control, it will reject input from other controls until it is released.<br/></p>
<p><b>Note<br/></b>You should never need to override this method when using AAX_CEffectParameters.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The parameter that is being touched<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.26 ReleaseParameter()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::ReleaseParameter (<br/>AAX_CParamID iParameterID ) [virtual]<br/></p>
<p>Releases a parameter from a &quot;touched&quot; state.<br/></p>
<p>This method is called by the Parameter Manager to release a parameter so that any control may send updates to<br/>the parameter.<br/></p>
<p><b>Note<br/></b>You should never need to override this method when using AAX_CEffectParameters.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The parameter that is being released<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.27 UpdateParameterTouch()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::UpdateParameterTouch (<br/>AAX_CParamID iParameterID,<br/>AAX_CBoolean iTouchState ) [virtual]<br/></p>
<p>Sets a &quot;touched&quot; state on a parameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>466 Class Documentation<br/></b></p>
<p><b>Note<br/></b>This method should be overriden when dealing with linked parameters. Do NOT use this method to keep track<br/>of touch states. Use the automation delegate for that.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The parameter that is changing touch states.<br/>in iTouchState The touch state of the parameter.<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.28 UpdateParameterNormalizedValue()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::UpdateParameterNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double iValue,<br/>AAX_EUpdateSource iSource ) [virtual]<br/></p>
<p>Updates a single parameter's state to its current value.<br/></p>
<p><b>Note<br/></b>Do not call this method from the plug-in. This method should be called by the host only. To set parameter<br/>values from within the plug-in, use the AAX_IParameter interface.<br/></p>
<p><b>Todo </b>FLAGGED FOR CONSIDERATION OF REVISION<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being updated<br/>in iValue The parameter's current value, to which its internal state must be updated<br/>in iSource The source of the update<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p>Reimplemented in AAX_CMonolithicParameters.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::UpdateParameterNormalizedValue().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.13.4.29 UpdateParameterNormalizedRelative()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::UpdateParameterNormalizedRelative (<br/>AAX_CParamID iParameterID,<br/>double iValue ) [virtual]<br/></p>
<p>Updates a single parameter's state to its current value, as a difference with the parameter's previous value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 467<br/></b></p>
<p><b>Deprecated </b>This is not called from the host. It may still be useful for internal calls within the plug-in, though it<br/>should only ever be used to update non-automatable parameters. Automatable parameters should<br/>always be updated through the AAX_IParameter interface, which will ensure proper coordination with<br/>other automation clients.<br/></p>
<p>UpdateParameterNormalizedRelative() can be used to incorporate &quot;wraparound&quot; behavior in a parameter's controls,<br/>if desired. If this behavior is not desired, then this method must properly account for overflow of the parameter's<br/>normalized value.<br/></p>
<p><b>See also<br/></b>SetParameterNormalizedRelative()<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being updated<br/>in iValue The difference between the parameter's current value and its previous value<br/></p>
<p>(normalized). The parameter's state must be updated to reflect this difference.<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.30 GenerateCoefficients()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GenerateCoefficients (<br/>void ) [virtual]<br/></p>
<p>Generates and dispatches new coefficient packets.<br/></p>
<p>This method is responsible for updating the coefficient packets associated with all parameters whose states have<br/>changed since the last call to GenerateCoefficients(). The host may call this method once for every parameter<br/>update, or it may &quot;batch&quot; parameter updates such that changes for several parameters are all handled by a single<br/>call to GenerateCoefficients().<br/></p>
<p>For more information on tracking parameters' statuses using the AAX_CPacketDispatcher, helper class, see<br/>AAX_CPacketDispatcher::SetDirty().<br/></p>
<p><b>Note<br/></b>Do not call this method from the plug-in. This method should be called by the host only. To set parameter<br/>values from within the plug-in, use the AAX_IParameter interface.<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p>Reimplemented in AAX_CMonolithicParameters.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::GenerateCoefficients().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>468 Class Documentation<br/></b></p>
<p><b>14.13.4.31 ResetFieldData()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::ResetFieldData (<br/>AAX_CFieldIndex inFieldIndex,<br/>void &#8727; oData,<br/>uint32_t inDataSize ) const [virtual]<br/></p>
<p>Called by the host to reset a private data field in the plug-in's algorithm.<br/></p>
<p>This method is called sequentially for all private data fields on Effect initialization and during any &quot;reset&quot; event, such<br/>as priming for a non-real-time render. This method is called before the algorithm's optional initialization callback,<br/>and the initialized private data will be available within that callback via its context block.<br/></p>
<p><b>See also<br/></b>Algorithm initialization.<br/></p>
<p><b>Warning<br/></b>Any data structures that will be passed between platforms (for example, sent to a TI DSP in an AAX DSP<br/>plug-in) must be properly data-aligned for compatibility across both platforms. See AAX_ALIGN_FILE_ALG<br/>for more information about guaranteeing cross-platform compatibility of data structures used for algorithm<br/>processing.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex The index of the field that is being initialized<br/>out oData The pre-allocated block of data that should be initialized<br/>in inDataSize The size of the data block, in bytes<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p>Reimplemented in AAX_CMonolithicParameters.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::ResetFieldData().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.13.4.32 GetNumberOfChunks()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetNumberOfChunks (<br/>int32_t &#8727; oNumChunks ) const [virtual]<br/></p>
<p>Retrieves the number of chunks used by this plug-in.<br/></p>
<p><b>Parameters<br/></b>out oNumChunks The number of distinct chunks used by this plug-in<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 469<br/></b></p>
<p><b>14.13.4.33 GetChunkIDFromIndex()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetChunkIDFromIndex (<br/>int32_t iIndex,<br/>AAX_CTypeID &#8727; oChunkID ) const [virtual]<br/></p>
<p>Retrieves the ID associated with a chunk index.<br/></p>
<p><b>Parameters<br/></b>in iIndex Index of the queried chunk<br/>out oChunkID ID of the queried chunk<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.34 GetChunkSize()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetChunkSize (<br/>AAX_CTypeID iChunkID,<br/>uint32_t &#8727; oSize ) const [virtual]<br/></p>
<p>Get the size of the data structure that can hold all of a chunk's information.<br/></p>
<p>If chunkID is one of the plug-in's custom chunks, initialize &#8727;size to the size of the chunk's data in bytes.<br/></p>
<p>This method is invoked every time a chunk is saved, therefore it is possible to have dynamically sized chunks.<br/>However, note that each call to GetChunkSize() will correspond to a following call to GetChunk(). The chunk<br/>provided in GetChunk() must have the same size as the size provided by GetChunkSize().<br/></p>
<p><b>Legacy Porting Notes </b>In AAX, the value provided by GetChunkSize() should NOT include the size of the chunk<br/>header. The value should ONLY reflect the size of the chunk's data.<br/></p>
<p><b>Parameters<br/></b>in iChunkID ID of the queried chunk<br/>out oSize The chunk's size in bytes<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.35 GetChunk()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetChunk (<br/>AAX_CTypeID iChunkID,<br/>AAX_SPlugInChunk &#8727; oChunk ) const [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>470 Class Documentation<br/></b></p>
<p>Fills a block of data with chunk information representing the plug-in's current state.<br/></p>
<p>By calling this method, the host is requesting information about the current state of the plug-in. The following chunk<br/>fields should be explicitly populated in this method. Other fields will be populated by the host.<br/></p>
<p>&#8226; AAX_SPlugInChunk::fData<br/></p>
<p>&#8226; AAX_SPlugInChunk::fVersion<br/></p>
<p>&#8226; AAX_SPlugInChunk::fName (Optional)<br/></p>
<p>&#8226; AAX_SPlugInChunk::fSize (Data size only)<br/></p>
<p><b>Warning<br/></b>Remember that this chunk data may be loaded on a different platform from the one where it is saved. All<br/>data structures in the chunk must be properly data-aligned for compatibility across all platforms that the plug-<br/>in supports. See AAX_ALIGN_FILE_ALG for notes about common cross-platform pitfalls for data structure<br/>alignment.<br/></p>
<p><b>Parameters<br/></b>in iChunkID ID of the chunk that should be provided<br/>out oChunk A preallocated block of memory that should be populated with the chunk's data.<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.36 SetChunk()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::SetChunk (<br/>AAX_CTypeID iChunkID,<br/>const AAX_SPlugInChunk &#8727; iChunk ) [virtual]<br/></p>
<p>Restores a set of plug-in parameters based on chunk information.<br/></p>
<p>By calling this method, the host is attempting to update the plug-in's current state to match the data stored in a<br/>chunk. The plug-in should initialize itself to this new state by calling SetParameterNormalizedValue() for each of the<br/>relevant parameters.<br/></p>
<p><b>Parameters<br/></b>in iChunkID ID of the chunk that is being set<br/>in iChunk The chunk<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 471<br/></b></p>
<p><b>14.13.4.37 CompareActiveChunk()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::CompareActiveChunk (<br/>const AAX_SPlugInChunk &#8727; iChunkP,<br/>AAX_CBoolean &#8727; oIsEqual ) const [virtual]<br/></p>
<p>Determine if a chunk represents settings that are equivalent to the plug-in's current state.<br/></p>
<p><b>Host Compatibility Notes </b>In Pro Tools, this method will only be called if a prior call to GetNumberOfChanges()<br/>has indicated that the plug-in's state has changed. If the plug-in's current settings<br/>are different from the settings in aChunkP then the plug-in's Compare Light will be<br/>illuminated in the plug-in header, allowing users to toggle between the plug-in's custom<br/>state and its saved state.<br/></p>
<p><b>Parameters<br/></b>in iChunkP The chunk that is to be tested<br/>out oIsEqual True if the chunk represents equivalent settings when compared with the plug-in's current<br/></p>
<p>state. False if the chunk represents non-equivalent settings<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.38 GetNumberOfChanges()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetNumberOfChanges (<br/>int32_t &#8727; oNumChanges ) const [virtual]<br/></p>
<p>Retrieves the number of parameter changes made since the plug-in's creation.<br/></p>
<p>This method is polled regularly by the host, and can additionally be triggered by some events such as mouse<br/>clicks. When the number provided by this method changes, the host subsequently calls CompareActiveChunk() to<br/>determine if the plug-in's Compare light should be activated.<br/></p>
<p>The value provided by this method should increment with each call to UpdateParameterNormalizedValue()<br/></p>
<p><b>Parameters<br/></b>out oNumChanges Must be set to indicate the number of parameter changes that have occurred since<br/></p>
<p>plug-in initialization.<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.39 TimerWakeup()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::TimerWakeup ( ) [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>472 Class Documentation<br/></b></p>
<p>Periodic wakeup callback for idle-time operations.<br/></p>
<p>This method is called from the host using a non-main thread. In general, it should be driven at approximately one<br/>call per 30 ms. However, the wakeup is not guaranteed to be called at any regular interval - for example, it could<br/>be held off by a high real-time processing load - and there is no host contract regarding maximum latency between<br/>wakeup calls.<br/></p>
<p>This wakeup thread runs continuously and cannot be armed/disarmed or by the plug-in.<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p>Reimplemented in AAX_CMonolithicParameters.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::TimerWakeup().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.13.4.40 GetCurveData()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetCurveData (<br/>AAX_CTypeID iCurveType,<br/>const float &#8727; iValues,<br/>uint32_t iNumValues,<br/>float &#8727; oValues ) const [virtual]<br/></p>
<p>Generate a set of output values based on a set of given input values.<br/></p>
<p>This method is used by the host to generate graphical curves. Given a set of input values, e.g. frequencies in Hz,<br/>this method should generate a corresponding set of output values, e.g. dB gain at each frequency. The semantics<br/>of these input and output values are dictated by iCurveType. See AAX_ECurveType.<br/></p>
<p>Plug-ins may also define custom curve type IDs to use this method internally. For example, the plug-in's GUI could<br/>use this method to request curve data in an arbitrary format.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>This method may be called by the host simultaneously from multiple threads with differents iValues.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>oValues must be allocated by caller with the same size as iValues (iNumValues).<br/></p>
<p><b>Host Compatibility Notes </b>Versions of S6 software which support the GetCurveDataDisplayRange()<br/>method will not display a plug-in's curve data unless both GetCurveData()<br/>and GetCurveDataDisplayRange() are supported by the plug-in.<br/></p>
<p><b>Warning<br/></b>S6 currently polls this method to update a plug-in's EQ or dynamics curves based on changes to the<br/>parameters mapped to the plug-in's EQ or dynamics center section page tables. Parameters that are<br/>not included in these page tables will not trigger updates to the curves displayed on S6. (GWSW-7314,<br/>PTSW-195316 / PT-218485)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 473<br/></b></p>
<p><b>Parameters<br/></b>in iCurveType One of AAX_ECurveType<br/>in iValues An array of input values<br/>in iNumValues The size of iValues<br/>out oValues An array of ouptut values<br/></p>
<p><b>Returns<br/></b>This method must return AAX_ERROR_UNIMPLEMENTED if the plug-in does not support curve data for the<br/>requested iCurveType<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.41 GetCurveDataMeterIds()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetCurveDataMeterIds (<br/>AAX_CTypeID iCurveType,<br/>uint32_t &#8727; oXMeterId,<br/>uint32_t &#8727; oYMeterId ) const [virtual]<br/></p>
<p>Indicates which meters correspond to the X and Y axes of the EQ or Dynamics graph.<br/></p>
<p>These meters can be used by attached control surfaces to present an indicator in the same X/Y coordinate plane<br/>as the plug-in's curve data.<br/></p>
<p><b>Parameters<br/></b>in iCurveType One of AAX_ECurveType<br/>out oXMeterId Id of the X-axis meter<br/>out oYMeterId Id of the Y-axis meter<br/></p>
<p><b>Returns<br/></b>This method should return AAX_ERROR_UNIMPLEMENTED if the plug-in does not implement it.<br/></p>
<p>Implements AAX_IACFEffectParameters_V3.<br/></p>
<p><b>14.13.4.42 GetCurveDataDisplayRange()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetCurveDataDisplayRange (<br/>AAX_CTypeID iCurveType,<br/>float &#8727; oXMin,<br/>float &#8727; oXMax,<br/>float &#8727; oYMin,<br/>float &#8727; oYMax ) const [virtual]<br/></p>
<p>Determines the range of the graph shown by the plug-in.<br/>Min/max arguments define the range of the axes of the graph.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>474 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iCurveType One of AAX_ECurveType<br/>out oXMin Min value of X-axis range<br/>out oXMax Max value of X-axis range<br/>out oYMin Min value of Y-axis range<br/>out oYMax Max value of Y-axis range<br/></p>
<p><b>Returns<br/></b>This method should return AAX_ERROR_UNIMPLEMENTED if the plug-in does not implement it.<br/></p>
<p>Implements AAX_IACFEffectParameters_V3.<br/></p>
<p><b>14.13.4.43 UpdatePageTable() [1/2]<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::UpdatePageTable (<br/>uint32_t inTableType,<br/>int32_t inTablePageSize,<br/>IACFUnknown &#8727; iHostUnknown,<br/>IACFUnknown &#8727; ioPageTableUnknown ) const [virtual]<br/></p>
<p>Allow the plug-in to update its page tables.<br/></p>
<p>Called by the plug-in host, usually in response to a AAX_eNotificationEvent_ParameterMappingChanged notifica-<br/>tion sent from the plug-in.<br/></p>
<p>Use this method to change the page table mapping for the plug-in instance or to apply other changes to auxiliary<br/>UIs which use the plug-in page tables, such as setting focus to a new page.<br/></p>
<p>See Page Table Guide for more information about page tables.<br/></p>
<p><b>Parameters<br/></b>in inTableType Four-char type identifier for the table type (e.g. 'PgTL', 'Av81', etc.)<br/>in inTablePageSize Page size for the table<br/>in iHostUnknown Unknown interface from the host which may support interfaces providing<br/></p>
<p>additional features or information.<br/>All interfaces queried from this unknown will be valid only within the<br/>scope of this UpdatePageTable() execution and will be relevant for only<br/>the current plug-in instance.<br/></p>
<p>in,out ioPageTableUnknown Unknown interface which supports AAX_IPageTable. This object<br/>represents the page table data which is currently stored by the host for<br/>this plug-in instance for the given table type and page size. This data<br/>and may be edited within the scope of UpdatePageTable() to change the<br/>page table mapping for this plug-in instance.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 475<br/></b></p>
<p><b>Returns<br/></b>This method should return AAX_ERROR_UNIMPLEMENTED if the plug-in does not implement it or when no<br/>change is requested by the plug-in. This allows optimizations to be used in the host when no UI update is<br/>required following this call.<br/></p>
<p><b>See also<br/></b>AAX_eNotificationEvent_ParameterMappingChanged<br/></p>
<p><b>Note<br/></b>For convenience, do not override this method. Instead, override the protected overload which provides a<br/>prepared copy of the relevant AAX_IPageTable host interface.<br/></p>
<p>Implements AAX_IACFEffectParameters_V4.<br/></p>
<p><b>14.13.4.44 GetCustomData()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::GetCustomData (<br/>AAX_CTypeID iDataBlockID,<br/>uint32_t inDataSize,<br/>void &#8727; oData,<br/>uint32_t &#8727; oDataWritten ) const [virtual]<br/></p>
<p>An optional interface hook for getting custom data from another module.<br/></p>
<p><b>Parameters<br/></b>in iDataBlockID Identifier for the requested block of custom data<br/>in inDataSize Size of provided buffer, in bytes<br/>out oData Pointer to an allocated buffer. Data will be written here.<br/>out oDataWritten The number of bytes actually written<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.45 SetCustomData()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::SetCustomData (<br/>AAX_CTypeID iDataBlockID,<br/>uint32_t inDataSize,<br/>const void &#8727; iData ) [virtual]<br/></p>
<p>An optional interface hook for setting custom data for use by another module.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>476 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iDataBlockID Identifier for the provided block of custom data<br/>in inDataSize Size of provided buffer, in bytes<br/>in iData Pointer to the data buffer<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p><b>14.13.4.46 DoMIDITransfers()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::DoMIDITransfers ( ) [inline], [virtual]<br/></p>
<p>MIDI update callback.<br/></p>
<p>Call AAX_IController::GetNextMIDIPacket() from within this method to retrieve and process MIDI packets directly<br/>within the Effect's data model. MIDI data will also be delivered to the Effect algorithm.<br/></p>
<p>This method is called regularly by the host, similarly to AAX_IEffectParameters::TimerWakeup()<br/></p>
<p>Implements AAX_IACFEffectParameters.<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>14.13.4.47 UpdateMIDINodes()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::UpdateMIDINodes (<br/>AAX_CFieldIndex inFieldIndex,<br/>AAX_CMidiPacket &amp; iPacket ) [virtual]<br/></p>
<p>MIDI update callback.<br/></p>
<p>This method is called by the host for each pending MIDI packet for MIDI nodes in algorithm context structure.<br/>Overwrite this method in Plug-In's EffectParameter class if you want to receive MIDI data packets directly in the<br/>data model. MIDI data will also be delivered to the Effect algorithm.<br/></p>
<p>The host calls this method in Effects that register one or more MIDI nodes using AAX_IComponentDescriptor::AddMIDINode().<br/>Effects that do not require MIDI data to be sent to the plug-in algorithm should override UpdateControlMIDINodes().<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex MIDI node field index in algorithm context structure<br/>in iPacket The incoming MIDI packet for the node<br/></p>
<p>Implements AAX_IACFEffectParameters_V2.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 477<br/></b></p>
<p><b>14.13.4.48 UpdateControlMIDINodes()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::UpdateControlMIDINodes (<br/>AAX_CTypeID nodeID,<br/>AAX_CMidiPacket &amp; iPacket ) [virtual]<br/></p>
<p>MIDI update callback for control MIDI nodes.<br/></p>
<p>This method is called by the host for each pending MIDI packet for Control MIDI nodes. Overwrite this method in<br/>Plug-In's EffectParameter class if you want to receive MIDI data packets directly in the data model.<br/></p>
<p>The host calls this method in Effects that register one or more Control MIDI nodes using AAX_IEffectDescriptor::AddControlMIDINode().<br/>Effects with algorithms that use MIDI data nodes should override UpdateMIDINodes().<br/></p>
<p><b>Note<br/></b>This method will not be called if an Effect includes any MIDI nodes in its algorithm context structure.<br/></p>
<p><b>Parameters<br/></b>in nodeID Identifier for the MIDI node<br/>in iPacket The incoming MIDI packet for the node<br/></p>
<p>Implements AAX_IACFEffectParameters_V2.<br/></p>
<p><b>14.13.4.49 RenderAudio_Hybrid()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::RenderAudio_Hybrid (<br/>AAX_SHybridRenderInfo &#8727; ioRenderInfo ) [virtual]<br/></p>
<p>Hybrid audio render function.<br/></p>
<p>This method is called from the host to render audio for the hybrid piece of the algorithm.<br/></p>
<p><b>Note<br/></b>To use this method plug-in should register some hybrid inputs and ouputs in &quot;Describe&quot;<br/></p>
<p>Implements AAX_IACFEffectParameters_V2.<br/></p>
<p><b>14.13.4.50 Controller() [1/2]<br/></b></p>
<p>AAX_IController&#8727; AAX_CEffectParameters::Controller ( )<br/></p>
<p>Access to the Effect controller.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::GenerateCoefficients().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>478 Class Documentation<br/></b></p>
<p><b>14.13.4.51 Controller() [2/2]<br/></b></p>
<p>const AAX_IController&#8727; AAX_CEffectParameters::Controller ( ) const<br/></p>
<p>const access to the Effect controller<br/></p>
<p><b>14.13.4.52 Transport() [1/2]<br/></b></p>
<p>AAX_ITransport&#8727; AAX_CEffectParameters::Transport ( )<br/></p>
<p>Access to the Transport object.<br/></p>
<p><b>14.13.4.53 Transport() [2/2]<br/></b></p>
<p>const AAX_ITransport&#8727; AAX_CEffectParameters::Transport ( ) const<br/></p>
<p>const access to the Transport object<br/></p>
<p><b>14.13.4.54 AutomationDelegate() [1/2]<br/></b></p>
<p>AAX_IAutomationDelegate&#8727; AAX_CEffectParameters::AutomationDelegate ( )<br/></p>
<p>Access to the Effect's automation delegate.<br/></p>
<p><b>14.13.4.55 AutomationDelegate() [2/2]<br/></b></p>
<p>const AAX_IAutomationDelegate&#8727; AAX_CEffectParameters::AutomationDelegate ( ) const<br/></p>
<p>const access to the Effect's automation delegate<br/></p>
<p><b>14.13.4.56 SetTaperDelegate()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::SetTaperDelegate (<br/>AAX_CParamID iParameterID,<br/>AAX_ITaperDelegateBase &amp; iTaperDelegate,<br/>bool iPreserveValue ) [protected]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 479<br/></b></p>
<p><b>14.13.4.57 SetDisplayDelegate()<br/></b></p>
<p>AAX_Result AAX_CEffectParameters::SetDisplayDelegate (<br/>AAX_CParamID iParameterID,<br/>AAX_IDisplayDelegateBase &amp; iDisplayDelegate ) [protected]<br/></p>
<p><b>14.13.4.58 IsParameterTouched()<br/></b></p>
<p>bool AAX_CEffectParameters::IsParameterTouched (<br/>AAX_CParamID iParameterID ) const [protected]<br/></p>
<p><b>14.13.4.59 IsParameterLinkReady()<br/></b></p>
<p>bool AAX_CEffectParameters::IsParameterLinkReady (<br/>AAX_CParamID inParameterID,<br/>AAX_EUpdateSource inSource ) const [protected]<br/></p>
<p><b>14.13.4.60 EffectInit()<br/></b></p>
<p>virtual AAX_Result AAX_CEffectParameters::EffectInit (<br/>void ) [inline], [protected], [virtual]<br/></p>
<p>Initialization helper routine. Called from AAX_CEffectParameters::Initialize.<br/></p>
<p>Override to add parameters, packets, meters, and to do any other custom initialization.<br/></p>
<p>Add custom parameters:<br/></p>
<p>&#8226; Create an AAX_CParameter for each parameter in the plug-in<br/></p>
<p>&#8226; Call AAX_CParameterManager::AddParameter() using mParameterManager to add parameters to the Pa-<br/>rameter Manager<br/></p>
<p><b>Note<br/></b>See bug AAXSDK-897<br/></p>
<p>Register packets:<br/></p>
<p>&#8226; Call AAX_CPacketDispatcher::RegisterPacket() using mPacketDispatcher to register a packet and handling<br/>callback.<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>480 Class Documentation<br/></b></p>
<p><b>14.13.4.61 UpdatePageTable() [2/2]<br/></b></p>
<p>virtual AAX_Result AAX_CEffectParameters::UpdatePageTable (<br/>uint32_t ,<br/>int32_t ,<br/>AAX_IPageTable &amp; ) const [inline], [protected], [virtual]<br/></p>
<p>Protected overload of UpdatePageTable()<br/></p>
<p>Override this version of the method for convenience. This allows the default UpdatePageTable() implementation to<br/>handle the interface conversion from IACFUnknown to AAX_IPageTable.<br/></p>
<p><b>Returns<br/></b>This method should return AAX_ERROR_UNIMPLEMENTED if the plug-in does not implement it or when no<br/>change is made by the plug-in. This allows optimizations to be used in the host when no UI update is required<br/>following this call.<br/></p>
<p>References AAX_ERROR_UNIMPLEMENTED.<br/></p>
<p><b>14.13.4.62 FilterParameterIDOnSave()<br/></b></p>
<p>void AAX_CEffectParameters::FilterParameterIDOnSave (<br/>AAX_CParamID controlID ) [protected]<br/></p>
<p>CALL: Indicates the indices of parameters that should not be saved in the default AAX_CEffectParameters chunk.<br/></p>
<p>Allows specific parameters to filtered out of the default AAX_CEffectParameters &quot;Save Settings&quot; functionality. This<br/>call is automatically invoked on the Master Bypass control when specified by the DefineMasterBypassControlIndex()<br/>call.<br/></p>
<p><b>Parameters<br/></b>in controlID The ID of the parameter that should be removed from the default chunk<br/></p>
<p><b>14.13.4.63 BuildChunkData()<br/></b></p>
<p>void AAX_CEffectParameters::BuildChunkData (<br/>void ) const [protected]<br/></p>
<p>Clears out the current chunk in Chunk Parser and adds all of the new values. Used by default implementations of<br/>GetChunk() and GetChunkSize().<br/></p>
<p><b>14.13.5 Member Data Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.13 AAX_CEffectParameters Class Reference 481<br/></b></p>
<p><b>14.13.5.1 mNumPlugInChanges<br/></b></p>
<p>int32_t AAX_CEffectParameters::mNumPlugInChanges [protected]<br/></p>
<p><b>14.13.5.2 mChunkSize<br/></b></p>
<p>int32_t AAX_CEffectParameters::mChunkSize [mutable], [protected]<br/></p>
<p><b>14.13.5.3 mChunkParser<br/></b></p>
<p>AAX_CChunkDataParser AAX_CEffectParameters::mChunkParser [mutable], [protected]<br/></p>
<p><b>14.13.5.4 mNumChunkedParameters<br/></b></p>
<p>int32_t AAX_CEffectParameters::mNumChunkedParameters [protected]<br/></p>
<p><b>14.13.5.5 mPacketDispatcher<br/></b></p>
<p>AAX_CPacketDispatcher AAX_CEffectParameters::mPacketDispatcher [protected]<br/></p>
<p><b>14.13.5.6 mParameterManager<br/></b></p>
<p>AAX_CParameterManager AAX_CEffectParameters::mParameterManager [protected]<br/></p>
<p>Referenced by AAX_CMonolithicParameters::UpdateParameterNormalizedValue().<br/></p>
<p><b>14.13.5.7 mFilteredParameters<br/></b></p>
<p>std::set&lt;std::string&gt; AAX_CEffectParameters::mFilteredParameters [protected]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CEffectParameters.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>482 Class Documentation<br/></b></p>
<p><b>14.14 AAX_CheckedResult Class Reference<br/></b></p>
<p>#include &lt;AAX_Exception.h&gt;<br/></p>
<p><b>14.14.1 Description<br/></b></p>
<p>Error checker convenience class for AAX_Result<br/></p>
<p>Implicitly convertable to an AAX_Result.<br/></p>
<p>Provides an overloaded operator=() which will throw an AAX::Exception::ResultError if assigned a non-success<br/>result.<br/></p>
<p><b>Warning<br/></b>Never use this class outside of an exception catch scope<br/></p>
<p>If the host supports AAX_TRACE tracing, a log is emitted when the exception is thrown. A stacktrace is added if the<br/>host's trace priority filter level is set to kAAX_Trace_Priority_Lowest<br/></p>
<p>When an error is encountered, AAX_CheckedResult throws an AAX_CheckedResult::Exception exception and<br/>clears its internal result value.<br/>#include &quot;AAX_Exception.h&quot;<br/>AAX_Result SomeCheckedMethod()<br/>{<br/></p>
<p>AAX_Result result = AAX_SUCCESS;<br/>try {<br/>AAX_CheckedResult cr;<br/>cr = ResultFunc1();<br/>cr = ResultFunc2();<br/></p>
<p>}<br/>catch (const AAX_CheckedResult::Exception&amp; ex)<br/>{<br/>// handle exception; do not rethrow<br/>result = ex.Result();<br/></p>
<p>}<br/>catch (...)<br/>{<br/>result = AAX_ERROR_UNKNOWN_EXCEPTION;<br/></p>
<p>}<br/>return result;<br/></p>
<p>}<br/></p>
<p><b>Note<br/></b>The AAX Library method which calls GetEffectDescriptions() on the plug-in includes an appropriate<br/>exception handler, so AAX_CheckedResult objects may be used within a plug-in's describe code without<br/>additional catch scopes.<br/></p>
<p>#include &quot;AAX_Exception.h&quot;<br/>AAX_Result GetEffectDescriptions( AAX_ICollection * outCollection )<br/>{<br/></p>
<p>AAX_CheckedResult cr;<br/>cr = MyDescriptionSubroutine1();<br/>cr = outCollection-&gt;AddEffect(...);<br/>// etc.<br/>return cr;<br/></p>
<p>}<br/></p>
<p>It is assumed that the exception handler will resolve any error state and that the AAX_CheckedResult may therefore<br/>continue to be used from a clean state following the exception catch block.<br/></p>
<p>If the previous error value is required then it can be retrieved using AAX_CheckedResult::LastError().<br/>// in this example, the exception is handled and<br/>// success is returned from MyFunc1()<br/>AAX_Result MyFunc1()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.14 AAX_CheckedResult Class Reference 483<br/></b></p>
<p>{<br/>AAX_CheckedResult cr;<br/>try {<br/>cr = MethodThatReturnsError();<br/></p>
<p>} catch (const AAX::Exception::ResultError&amp; ex) {<br/>// exception is fully handled here<br/></p>
<p>}<br/></p>
<p>// cr now holds a success value<br/>return cr;<br/></p>
<p>}<br/>// in this example, MyFunc2() returns the first<br/>// non-successful value which was encountered<br/>AAX_Result MyFunc2()<br/>{<br/></p>
<p>AAX_CheckedResult cr;<br/>try {<br/>AAX_SWALLOW(cr = MethodThatMayReturnError1());<br/>AAX_SWALLOW(cr = MethodThatMayReturnError2());<br/>cr = MethodThatMayReturnError3();<br/></p>
<p>} catch (const AAX::Exception::ResultError&amp; ex) {<br/>// exception might not be fully handled<br/></p>
<p>}<br/></p>
<p>// pass the last error on to the caller<br/>return cr.LastError();<br/></p>
<p>}<br/></p>
<p>It is possible to add one or more accepted non-success values to an AAX_CheckedResult so that these values will<br/>not trigger exceptions:<br/>AAX_CheckedResult cr;<br/>try {<br/></p>
<p>cr.AddAcceptedResult(AcceptableErrCode);<br/>cr = MethodThatReturnsAcceptedError();<br/>cr = MethodThatReturnsAnotherError();<br/></p>
<p>} catch (const AAX::Exception::ResultError&amp; ex) {<br/>// handle the exception<br/></p>
<p>}<br/></p>
<p><b>Public Types<br/></b></p>
<p>&#8226; typedef AAX::Exception::ResultError Exception<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; &#8764;AAX_CheckedResult ()<br/>&#8226; AAX_CheckedResult ()<br/></p>
<p>Construct an AAX_CheckedResult in a success state.<br/>&#8226; AAX_CheckedResult (AAX_Result inResult)<br/></p>
<p>Implicit conversion constructor from AAX_Result.<br/>&#8226; void AddAcceptedResult (AAX_Result inResult)<br/></p>
<p>Add an expected result which will not result in a throw.<br/>&#8226; void ResetAcceptedResults ()<br/>&#8226; AAX_CheckedResult &amp; operator= (AAX_Result inResult)<br/></p>
<p>Assignment to AAX_Result.<br/>&#8226; AAX_CheckedResult &amp; operator|= (AAX_Result inResult)<br/></p>
<p>bitwise-or assignment to AAX_Result<br/>&#8226; operator AAX_Result () const<br/></p>
<p>Conversion to AAX_Result.<br/>&#8226; void Clear ()<br/></p>
<p>Clears the current result state.<br/>&#8226; AAX_Result LastError () const<br/></p>
<p>Get the last non-success result which was stored in this object, or AAX_SUCCESS if no non-success result was ever<br/>stored in this object.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>484 Class Documentation<br/></b></p>
<p><b>14.14.2 Member Typedef Documentation<br/></b></p>
<p><b>14.14.2.1 Exception<br/></b></p>
<p>typedef AAX::Exception::ResultError AAX_CheckedResult::Exception<br/></p>
<p><b>14.14.3 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.14.3.1 </b>&#8764;<b>AAX_CheckedResult()<br/></b></p>
<p>AAX_CheckedResult::&#8764;AAX_CheckedResult ( ) [inline]<br/></p>
<p><b>14.14.3.2 AAX_CheckedResult() [1/2]<br/></b></p>
<p>AAX_CheckedResult::AAX_CheckedResult ( ) [inline]<br/></p>
<p>Construct an AAX_CheckedResult in a success state.<br/></p>
<p><b>14.14.3.3 AAX_CheckedResult() [2/2]<br/></b></p>
<p>AAX_CheckedResult::AAX_CheckedResult (<br/>AAX_Result inResult ) [inline]<br/></p>
<p>Implicit conversion constructor from AAX_Result.<br/></p>
<p>Implicit conversion is OK in order to support AAX_CheckedResult cr = SomeFunc()<br/></p>
<p><b>14.14.4 Member Function Documentation<br/></b></p>
<p><b>14.14.4.1 AddAcceptedResult()<br/></b></p>
<p>void AAX_CheckedResult::AddAcceptedResult (<br/>AAX_Result inResult ) [inline]<br/></p>
<p>Add an expected result which will not result in a throw.<br/></p>
<p>It is acceptable for some methods to return certain non-success values such as AAX_RESULT_PACKET_STREAM_NOT_EMPTY<br/>or AAX_RESULT_NEW_PACKET_POSTED<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.14 AAX_CheckedResult Class Reference 485<br/></b></p>
<p><b>14.14.4.2 ResetAcceptedResults()<br/></b></p>
<p>void AAX_CheckedResult::ResetAcceptedResults ( ) [inline]<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>14.14.4.3 operator=()<br/></b></p>
<p>AAX_CheckedResult&amp; AAX_CheckedResult::operator= (<br/>AAX_Result inResult ) [inline]<br/></p>
<p>Assignment to AAX_Result.<br/></p>
<p>Referenced by operator|=().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.14.4.4 operator&quot;|=()<br/></b></p>
<p>AAX_CheckedResult&amp; AAX_CheckedResult::operator|= (<br/>AAX_Result inResult ) [inline]<br/></p>
<p>bitwise-or assignment to AAX_Result<br/></p>
<p>Sometimes used in legacy code to aggregate results into a single AAX_Result value<br/></p>
<p>References operator=().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.14.4.5 operator AAX_Result()<br/></b></p>
<p>AAX_CheckedResult::operator AAX_Result ( ) const [inline]<br/></p>
<p>Conversion to AAX_Result.<br/></p>
<p><b>14.14.4.6 Clear()<br/></b></p>
<p>void AAX_CheckedResult::Clear ( ) [inline]<br/></p>
<p>Clears the current result state.<br/></p>
<p>Does not affect the set of accepted results<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>486 Class Documentation<br/></b></p>
<p><b>14.14.4.7 LastError()<br/></b></p>
<p>AAX_Result AAX_CheckedResult::LastError ( ) const [inline]<br/></p>
<p>Get the last non-success result which was stored in this object, or AAX_SUCCESS if no non-success result was<br/>ever stored in this object.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_Exception.h<br/></p>
<p><b>14.15 AAX_CHostProcessor Class Reference<br/></b></p>
<p>#include &lt;AAX_CHostProcessor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CHostProcessor:<br/></p>
<p>Collaboration diagram for AAX_CHostProcessor:<br/></p>
<p><b>14.15.1 Description<br/></b></p>
<p>Concrete implementation of the AAX_IHostProcessor interface for non-real-time processing.<br/></p>
<p>Host processor objects are used to process regions of audio data in a non-real-time context.<br/></p>
<p>&#8226; Host processors must generate output samples linearly and incrementally, but may randomly access samples<br/>from the processing region on the timeline for input. See GetAudio() for more information.<br/></p>
<p>&#8226; Host processors may re-define the processing region using AAX_CHostProcessor::TranslateOutputBounds().<br/></p>
<p><b>See also<br/></b>AAX_IHostProcessorDelegate<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CHostProcessor (void)<br/>&#8226; virtual &#8764;AAX_CHostProcessor ()<br/></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; AAX_Result Initialize (IACFUnknown &#8727;iController) AAX_OVERRIDE<br/>Host Processor initialization.<br/></p>
<p>&#8226; AAX_Result Uninitialize () AAX_OVERRIDE<br/>Host Processor teardown.<br/></p>
<p><b>Host processor interface<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.15 AAX_CHostProcessor Class Reference 487<br/></b></p>
<p>&#8226; AAX_Result InitOutputBounds (int64_t iSrcStart, int64_t iSrcEnd, int64_t &#8727;oDstStart, int64_t &#8727;oDstEnd)<br/>AAX_OVERRIDE<br/></p>
<p>Sets the processing region.<br/>&#8226; AAX_Result SetLocation (int64_t iSample) AAX_OVERRIDE<br/></p>
<p>Updates the relative sample location of the current processing frame.<br/>&#8226; AAX_Result RenderAudio (const float &#8727;const inAudioIns[ ], int32_t inAudioInCount, float &#8727;const iAudio&#8592;&#8617;<br/></p>
<p>Outs[ ], int32_t iAudioOutCount, int32_t &#8727;ioWindowSize) AAX_OVERRIDE<br/>Perform the signal processing.<br/></p>
<p>&#8226; AAX_Result PreRender (int32_t inAudioInCount, int32_t iAudioOutCount, int32_t iWindowSize)<br/>AAX_OVERRIDE<br/></p>
<p>Invoked right before the start of a Preview or Render pass.<br/>&#8226; AAX_Result PostRender () AAX_OVERRIDE<br/></p>
<p>Invoked at the end of a Render pass.<br/>&#8226; AAX_Result AnalyzeAudio (const float &#8727;const inAudioIns[ ], int32_t inAudioInCount, int32_t &#8727;ioWindow&#8592;&#8617;<br/></p>
<p>Size) AAX_OVERRIDE<br/>Override this method if the plug-in needs to analyze the audio prior to a Render pass.<br/></p>
<p>&#8226; AAX_Result PreAnalyze (int32_t inAudioInCount, int32_t iWindowSize) AAX_OVERRIDE<br/>Invoked right before the start of an Analysis pass.<br/></p>
<p>&#8226; AAX_Result PostAnalyze () AAX_OVERRIDE<br/>Invoked at the end of an Analysis pass.<br/></p>
<p>&#8226; AAX_Result GetClipNameSuffix (int32_t inMaxLength, AAX_IString &#8727;outString) const AAX_OVERRIDE<br/>Called by host application to retrieve a custom string to be appended to the clip name.<br/></p>
<p><b>Convenience methods<br/></b></p>
<p>&#8226; AAX_IEffectParameters &#8727; GetEffectParameters ()<br/>&#8226; const AAX_IEffectParameters &#8727; GetEffectParameters () const<br/>&#8226; AAX_IHostProcessorDelegate &#8727; GetHostProcessorDelegate ()<br/>&#8226; const AAX_IHostProcessorDelegate &#8727; GetHostProcessorDelegate () const<br/>&#8226; int64_t GetLocation () const<br/></p>
<p>The relative sample location of the current processing frame.<br/>&#8226; int64_t GetInputRange () const<br/></p>
<p>The length (in samples) of the current timeline selection.<br/>&#8226; int64_t GetOutputRange () const<br/></p>
<p>The length (in samples) of the clip that will be rendered to the timeline.<br/>&#8226; int64_t GetSrcStart () const<br/></p>
<p>The sample position of the beginning of the current timeline selection relative to the beginning of the current input<br/>selection, i.e. 0.<br/></p>
<p>&#8226; int64_t GetSrcEnd () const<br/>The sample position of the end of the current timeline selection relative to the beginning of the current input selection.<br/></p>
<p>&#8226; int64_t GetDstStart () const<br/>The sample position of the beginning of the of the clip that will be rendered to the timeline relative to the beginning of<br/>the current input selection.<br/></p>
<p>&#8226; int64_t GetDstEnd () const<br/>The sample position of the end of the of the clip that will be rendered to the timeline relative to the beginning of the<br/>current input selection.<br/></p>
<p>&#8226; virtual AAX_Result TranslateOutputBounds (int64_t iSrcStart, int64_t iSrcEnd, int64_t &amp;oDstStart, int64_t<br/>&amp;oDstEnd)<br/></p>
<p>Define the boundaries of the clip that will be rendered to the timeline.<br/>&#8226; virtual AAX_Result GetAudio (const float &#8727;const inAudioIns[ ], int32_t inAudioInCount, int64_t inLocation,<br/></p>
<p>int32_t &#8727;ioNumSamples)<br/>Randomly access audio from the timeline.<br/></p>
<p>&#8226; virtual int32_t GetSideChainInputNum ()<br/>CALL: Returns the index of the side chain input buffer.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>488 Class Documentation<br/></b></p>
<p>&#8226; AAX_IController &#8727; Controller ()<br/>&#8226; const AAX_IController &#8727; Controller () const<br/>&#8226; AAX_IHostProcessorDelegate &#8727; HostProcessorDelegate ()<br/>&#8226; const AAX_IHostProcessorDelegate &#8727; HostProcessorDelegate () const<br/>&#8226; AAX_IEffectParameters &#8727; EffectParameters ()<br/>&#8226; const AAX_IEffectParameters &#8727; EffectParameters () const<br/></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.15.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.15.2.1 AAX_CHostProcessor()<br/></b></p>
<p>AAX_CHostProcessor::AAX_CHostProcessor (<br/>void )<br/></p>
<p><b>14.15.2.2 </b>&#8764;<b>AAX_CHostProcessor()<br/></b></p>
<p>virtual AAX_CHostProcessor::&#8764;AAX_CHostProcessor ( ) [virtual]<br/></p>
<p><b>14.15.3 Member Function Documentation<br/></b></p>
<p><b>14.15.3.1 Initialize()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::Initialize (<br/>IACFUnknown &#8727; iController ) [virtual]<br/></p>
<p>Host Processor initialization.<br/></p>
<p><b>Parameters<br/></b>in iController A versioned reference that can be resolved to both an AAX_IController interface and an<br/></p>
<p>AAX_IHostProcessorDelegate<br/></p>
<p>Implements AAX_IACFHostProcessor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.15 AAX_CHostProcessor Class Reference 489<br/></b></p>
<p><b>14.15.3.2 Uninitialize()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::Uninitialize ( ) [virtual]<br/></p>
<p>Host Processor teardown.<br/></p>
<p>Implements AAX_IACFHostProcessor.<br/></p>
<p><b>14.15.3.3 InitOutputBounds()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::InitOutputBounds (<br/>int64_t iSrcStart,<br/>int64_t iSrcEnd,<br/>int64_t &#8727; oDstStart,<br/>int64_t &#8727; oDstEnd ) [virtual]<br/></p>
<p>Sets the processing region.<br/></p>
<p>This method allows offline processing plug-ins to vary the length and/or start/end points of the audio processing<br/>region.<br/></p>
<p>This method is called in a few different scenarios:<br/></p>
<p>&#8226; Before an analyze, process or preview of data begins.<br/></p>
<p>&#8226; At the end of every preview loop.<br/></p>
<p>&#8226; After the user makes a new data selection on the timeline.<br/></p>
<p>Plug-ins that inherit from AAX_CHostProcessor should not override this method. Instead, use the following conve-<br/>nience functions:<br/></p>
<p>&#8226; To retrieve the length or boundaries of the processing region, use GetInputRange(), GetSrcStart(), etc.<br/></p>
<p>&#8226; To change the boundaries of the processing region before processing begins, use AAX_CHostProcessor::TranslateOutputBounds()<br/></p>
<p><b>Note<br/></b>Currently, a host processor may not randomly access samples outside of the boundary defined by oDst&#8592;&#8617;<br/>Start and oDstEnd<br/></p>
<p><b>Legacy Porting Notes </b>DAE no longer makes use of the mStartBound and mEndBounds member variables that ex-<br/>isted in the legacy RTAS/TDM SDK. Use oDstStart and oDstEnd instead (preferably<br/>by overriding TranslateOutputBounds().)<br/></p>
<p><b>Parameters<br/></b>in iSrcStart The selection start of the user selected region. This is will always return 0 for a given<br/></p>
<p>selection on the timeline.<br/>in iSrcEnd The selection end of the user selected region. This will always return the value of the<br/></p>
<p>selection length on the timeline.<br/>in oDstStart The starting sample location in the output audio region. By default, this is the same as<br/></p>
<p>iSrcStart.<br/>in oDstEnd The ending sample location in the output audio region. By default, this is the same as<br/></p>
<p>iSrcEnd.<br/></p>
<p><b>Generated by oxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>490 Class Documentation<br/></b></p>
<p>Implements AAX_IACFHostProcessor.<br/></p>
<p><b>14.15.3.4 SetLocation()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::SetLocation (<br/>int64_t iSample ) [virtual]<br/></p>
<p>Updates the relative sample location of the current processing frame.<br/></p>
<p>This method is called by the host to update the relative sample location of the current processing frame.<br/></p>
<p><b>Note<br/></b>Plug-ins should not override this method; instead, use AAX_CHostProcessor::GetLocation() to retrieve the<br/>current relative sample location.<br/></p>
<p><b>Parameters<br/></b>in iSample The sample location of the first sample in the current processing frame relative to the<br/></p>
<p>beginning of the full processing buffer<br/></p>
<p>Implements AAX_IACFHostProcessor.<br/></p>
<p><b>14.15.3.5 RenderAudio()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::RenderAudio (<br/>const float &#8727;const inAudioIns[],<br/>int32_t inAudioInCount,<br/>float &#8727;const iAudioOuts[],<br/>int32_t iAudioOutCount,<br/>int32_t &#8727; ioWindowSize ) [virtual]<br/></p>
<p>Perform the signal processing.<br/></p>
<p>This method is called by the host to invoke the plug-in's signal processing.<br/></p>
<p><b>Legacy Porting Notes </b>This method is a replacement for the AudioSuite ProcessAudio method<br/></p>
<p><b>Parameters<br/></b>in inAudioIns Input audio buffer<br/>in inAudioInCount The number if input channels<br/>in iAudioOuts The number of output channels<br/>in iAudioOutCount A user defined destination end of the ingested audio<br/>in ioWindowSize Window buffer length of the received audio<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.15 AAX_CHostProcessor Class Reference 491<br/></b></p>
<p>Implements AAX_IACFHostProcessor.<br/></p>
<p><b>14.15.3.6 PreRender()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::PreRender (<br/>int32_t inAudioInCount,<br/>int32_t iAudioOutCount,<br/>int32_t iWindowSize ) [virtual]<br/></p>
<p>Invoked right before the start of a Preview or Render pass.<br/></p>
<p>This method is called by the host to allow a plug-in to make any initializations before processing actually begins.<br/>Upon a Preview pass, PreRender will also be called at the beginning of every &quot;loop&quot;.<br/></p>
<p><b>See also<br/></b>AAX_eProcessingState_StartPass, AAX_eProcessingState_BeginPassGroup<br/></p>
<p><b>Parameters<br/></b>in inAudioInCount The number if input channels<br/>in iAudioOutCount The number of output channels<br/>in iWindowSize Window buffer length of the ingested audio<br/></p>
<p>Implements AAX_IACFHostProcessor.<br/></p>
<p><b>14.15.3.7 PostRender()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::PostRender ( ) [virtual]<br/></p>
<p>Invoked at the end of a Render pass.<br/></p>
<p><b>Note<br/></b>Upon a Preview pass, PostRender will not be called until Preview has stopped.<br/></p>
<p><b>See also<br/></b>AAX_eProcessingState_StopPass, AAX_eProcessingState_EndPassGroup<br/></p>
<p>Implements AAX_IACFHostProcessor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>492 Class Documentation<br/></b></p>
<p><b>14.15.3.8 AnalyzeAudio()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::AnalyzeAudio (<br/>const float &#8727;const inAudioIns[],<br/>int32_t inAudioInCount,<br/>int32_t &#8727; ioWindowSize ) [virtual]<br/></p>
<p>Override this method if the plug-in needs to analyze the audio prior to a Render pass.<br/></p>
<p>Use this after declaring the appropriate properties in Describe. See AAX_eProperty_RequiresAnalysis and<br/>AAX_eProperty_OptionalAnalysis<br/></p>
<p>To request an analysis pass from within a plug-in, use AAX_IHostProcessorDelegate::ForceAnalyze()<br/></p>
<p><b>Legacy Porting Notes </b>Ported from AudioSuite's AnalyzeAudio(bool isMasterBypassed) method<br/></p>
<p><b>Parameters<br/></b>in inAudioIns Input audio buffer<br/>in inAudioInCount The number of input channels<br/>in ioWindowSize Window buffer length of the ingested audio<br/></p>
<p>Implements AAX_IACFHostProcessor.<br/></p>
<p><b>14.15.3.9 PreAnalyze()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::PreAnalyze (<br/>int32_t inAudioInCount,<br/>int32_t iWindowSize ) [virtual]<br/></p>
<p>Invoked right before the start of an Analysis pass.<br/></p>
<p>This method is called by the host to allow a plug-in to make any initializations before an Analysis pass actually<br/>begins.<br/></p>
<p><b>See also<br/></b>AAX_eProcessingState_StartPass, AAX_eProcessingState_BeginPassGroup<br/></p>
<p><b>Parameters<br/></b>in inAudioInCount The number if input channels<br/>in iWindowSize Window buffer length of the ingested audio<br/></p>
<p>Implements AAX_IACFHostProcessor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.15 AAX_CHostProcessor Class Reference 493<br/></b></p>
<p><b>14.15.3.10 PostAnalyze()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::PostAnalyze ( ) [virtual]<br/></p>
<p>Invoked at the end of an Analysis pass.<br/></p>
<p><b>Note<br/></b>In Pro Tools, a long execution time for this method will hold off the main application thread and cause a visible<br/>hang. If the plug-in must perform any long running tasks before initiating processing then it is best to perform<br/>these tasks in AAX_IHostProcessor::PreRender()<br/></p>
<p><b>See also<br/></b>AAX_eProcessingState_StopPass, AAX_eProcessingState_EndPassGroup<br/></p>
<p>Implements AAX_IACFHostProcessor.<br/></p>
<p><b>14.15.3.11 GetClipNameSuffix()<br/></b></p>
<p>AAX_Result AAX_CHostProcessor::GetClipNameSuffix (<br/>int32_t inMaxLength,<br/>AAX_IString &#8727; outString ) const [virtual]<br/></p>
<p>Called by host application to retrieve a custom string to be appended to the clip name.<br/></p>
<p>If no string is provided then the host's default will be used.<br/></p>
<p><b>Parameters<br/></b>in inMaxLength The maximum allowed string length, not including the NULL terminating char<br/>out outString Add a value to this string to provide a custom clip suffix<br/></p>
<p>Implements AAX_IACFHostProcessor_V2.<br/></p>
<p><b>14.15.3.12 GetEffectParameters() [1/2]<br/></b></p>
<p>AAX_IEffectParameters&#8727; AAX_CHostProcessor::GetEffectParameters (<br/>void ) [inline]<br/></p>
<p><b>14.15.3.13 GetEffectParameters() [2/2]<br/></b></p>
<p>const AAX_IEffectParameters&#8727; AAX_CHostProcessor::GetEffectParameters (<br/>void ) const [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>494 Class Documentation<br/></b></p>
<p><b>14.15.3.14 GetHostProcessorDelegate() [1/2]<br/></b></p>
<p>AAX_IHostProcessorDelegate&#8727; AAX_CHostProcessor::GetHostProcessorDelegate ( ) [inline]<br/></p>
<p><b>14.15.3.15 GetHostProcessorDelegate() [2/2]<br/></b></p>
<p>const AAX_IHostProcessorDelegate&#8727; AAX_CHostProcessor::GetHostProcessorDelegate ( ) const [inline]<br/></p>
<p><b>14.15.3.16 GetLocation()<br/></b></p>
<p>int64_t AAX_CHostProcessor::GetLocation ( ) const [inline]<br/></p>
<p>The relative sample location of the current processing frame.<br/></p>
<p>This method returns the relative sample location for the current RenderAudio() processing frame. For example, if<br/>a value of 10 is provided for the RenderAudio() ioWindow parameter, then calls to this method from within each<br/>execution of RenderAudio() will return 0, 10, 20,...<br/></p>
<p><b>14.15.3.17 GetInputRange()<br/></b></p>
<p>int64_t AAX_CHostProcessor::GetInputRange ( ) const [inline]<br/></p>
<p>The length (in samples) of the current timeline selection.<br/></p>
<p><b>14.15.3.18 GetOutputRange()<br/></b></p>
<p>int64_t AAX_CHostProcessor::GetOutputRange ( ) const [inline]<br/></p>
<p>The length (in samples) of the clip that will be rendered to the timeline.<br/></p>
<p><b>14.15.3.19 GetSrcStart()<br/></b></p>
<p>int64_t AAX_CHostProcessor::GetSrcStart ( ) const [inline]<br/></p>
<p>The sample position of the beginning of the current timeline selection relative to the beginning of the current input<br/>selection, i.e. 0.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.15 AAX_CHostProcessor Class Reference 495<br/></b></p>
<p><b>14.15.3.20 GetSrcEnd()<br/></b></p>
<p>int64_t AAX_CHostProcessor::GetSrcEnd ( ) const [inline]<br/></p>
<p>The sample position of the end of the current timeline selection relative to the beginning of the current input selection.<br/></p>
<p><b>14.15.3.21 GetDstStart()<br/></b></p>
<p>int64_t AAX_CHostProcessor::GetDstStart ( ) const [inline]<br/></p>
<p>The sample position of the beginning of the of the clip that will be rendered to the timeline relative to the beginning<br/>of the current input selection.<br/></p>
<p>This value will be equal to the value returned by GetSrcStart() unless the selection boundaries have been modified<br/>by overriding TranslateOutputBounds()<br/></p>
<p><b>14.15.3.22 GetDstEnd()<br/></b></p>
<p>int64_t AAX_CHostProcessor::GetDstEnd ( ) const [inline]<br/></p>
<p>The sample position of the end of the of the clip that will be rendered to the timeline relative to the beginning of the<br/>current input selection.<br/></p>
<p>This value will be equal to the value returned by GetSrcStart() unless the selection boundaries have been modified<br/>by overriding TranslateOutputBounds()<br/></p>
<p><b>14.15.3.23 TranslateOutputBounds()<br/></b></p>
<p>virtual AAX_Result AAX_CHostProcessor::TranslateOutputBounds (<br/>int64_t iSrcStart,<br/>int64_t iSrcEnd,<br/>int64_t &amp; oDstStart,<br/>int64_t &amp; oDstEnd ) [protected], [virtual]<br/></p>
<p>Define the boundaries of the clip that will be rendered to the timeline.<br/></p>
<p>This method is called from AAX_CHostProcessor::InitOutputBounds(), providing a convenient hook for re-defining<br/>the processing region boundaries. See InitOutputBounds() for more information.<br/></p>
<p><b>Parameters<br/></b>in iSrcStart The selection start of the user selected region. This is will always return 0 for a given<br/></p>
<p>selection on the timeline.<br/>in iSrcEnd The selection end of the user selected region. This will always return the value of the<br/></p>
<p>selection length on the timeline.<br/>in oDstStart The starting sample location in the output audio region. By default, this is the same as<br/></p>
<p>iSrcStart.<br/>in oDstEnd The ending sample location in the output audio region. By default, this is the same as<br/></p>
<p>iSrcEnd.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>496 Class Documentation<br/></b></p>
<p><b>14.15.3.24 GetAudio()<br/></b></p>
<p>virtual AAX_Result AAX_CHostProcessor::GetAudio (<br/>const float &#8727;const inAudioIns[],<br/>int32_t inAudioInCount,<br/>int64_t inLocation,<br/>int32_t &#8727; ioNumSamples ) [protected], [virtual]<br/></p>
<p>Randomly access audio from the timeline.<br/></p>
<p>This is a convenience wrapper around AAX_IHostProcessorDelegate::GetAudio().<br/></p>
<p><b>Parameters<br/></b>in inAudioIns Timeline audio buffer(s). This must be set to inAudioIns from<br/></p>
<p>AAX_IHostProcessor::RenderAudio()<br/>in inAudioInCount Number of buffers in inAudioIns. This must be set to inAudioInCount<br/></p>
<p>from AAX_IHostProcessor::RenderAudio()<br/>in inLocation A sample location relative to the beginning of the currently processed region,<br/></p>
<p>e.g. a value of 0 corresponds to the timeline location returned by<br/>AAX_CHostProcessor::GetSrcStart()<br/></p>
<p>in,out ioNumSamples<br/>&#8226; Input: The maximum number of samples to read.<br/></p>
<p>&#8226; Output: The actual number of samples that were read from the timeline<br/></p>
<p><b>14.15.3.25 GetSideChainInputNum()<br/></b></p>
<p>virtual int32_t AAX_CHostProcessor::GetSideChainInputNum ( ) [protected], [virtual]<br/></p>
<p>CALL: Returns the index of the side chain input buffer.<br/></p>
<p>This is a convenience wrapper around AAX_IHostProcessorDelegate::GetSideChainInputNum()<br/></p>
<p><b>14.15.3.26 Controller() [1/2]<br/></b></p>
<p>AAX_IController&#8727; AAX_CHostProcessor::Controller (<br/>void ) [inline], [protected]<br/></p>
<p><b>14.15.3.27 Controller() [2/2]<br/></b></p>
<p>const AAX_IController&#8727; AAX_CHostProcessor::Controller (<br/>void ) const [inline], [protected]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.16 AAX_CHostServices Class Reference 497<br/></b></p>
<p><b>14.15.3.28 HostProcessorDelegate() [1/2]<br/></b></p>
<p>AAX_IHostProcessorDelegate&#8727; AAX_CHostProcessor::HostProcessorDelegate ( ) [inline], [protected]<br/></p>
<p><b>14.15.3.29 HostProcessorDelegate() [2/2]<br/></b></p>
<p>const AAX_IHostProcessorDelegate&#8727; AAX_CHostProcessor::HostProcessorDelegate ( ) const [inline],<br/>[protected]<br/></p>
<p><b>14.15.3.30 EffectParameters() [1/2]<br/></b></p>
<p>AAX_IEffectParameters&#8727; AAX_CHostProcessor::EffectParameters ( ) [inline], [protected]<br/></p>
<p><b>14.15.3.31 EffectParameters() [2/2]<br/></b></p>
<p>const AAX_IEffectParameters&#8727; AAX_CHostProcessor::EffectParameters ( ) const [inline], [protected]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CHostProcessor.h<br/></p>
<p><b>14.16 AAX_CHostServices Class Reference<br/></b></p>
<p>#include &lt;AAX_CHostServices.h&gt;<br/></p>
<p><b>14.16.1 Description<br/></b></p>
<p>Method access to a singleton implementation of the AAX_IHostServices interface.<br/></p>
<p><b>Static Public Member Functions<br/></b>&#8226; static void Set (IACFUnknown &#8727;pUnkHost)<br/>&#8226; static AAX_Result HandleAssertFailure (const char &#8727;iFile, int32_t iLine, const char &#8727;iNote, int32_t i&#8592;&#8617;<br/></p>
<p>Flags=AAX_eAssertFlags_Default)<br/>Handle an assertion failure.<br/></p>
<p>&#8226; static AAX_Result Trace (AAX_ETracePriorityHost iPriority, const char &#8727;iMessage,...)<br/>Log a trace message.<br/></p>
<p>&#8226; static AAX_Result StackTrace (AAX_ETracePriorityHost iTracePriority, AAX_ETracePriorityHost iStack&#8592;&#8617;<br/>TracePriority, const char &#8727;iMessage,...)<br/></p>
<p>Log a trace message or a stack trace.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>498 Class Documentation<br/></b></p>
<p><b>14.16.2 Member Function Documentation<br/></b></p>
<p><b>14.16.2.1 Set()<br/></b></p>
<p>static void AAX_CHostServices::Set (<br/>IACFUnknown &#8727; pUnkHost ) [static]<br/></p>
<p><b>14.16.2.2 HandleAssertFailure()<br/></b></p>
<p>static AAX_Result AAX_CHostServices::HandleAssertFailure (<br/>const char &#8727; iFile,<br/>int32_t iLine,<br/>const char &#8727; iNote,<br/>int32_t iFlags = AAX_eAssertFlags_Default ) [static]<br/></p>
<p>Handle an assertion failure.<br/></p>
<p>Use this method to delegate assertion failure handling to the host<br/></p>
<p>Use inFlags to request that specific behavior be included when handling the failure. This request may not be<br/>fulfilled by the host, and absence of a flag does not preclude the host from using that behavior when handling the<br/>failure.<br/></p>
<p><b>Parameters<br/></b>in iFile The name of the file containing the assert check. Usually<br/></p>
<p>__FILE__<br/>in iLine The line number of the assert check. Usually __LINE__<br/>in iNote Text to display related to the assert. Usually the condition which failed<br/>in iFlags Bitfield of AAX_EAssertFlags to request specific handling behavior<br/></p>
<p><b>14.16.2.3 Trace()<br/></b></p>
<p>static AAX_Result AAX_CHostServices::Trace (<br/>AAX_ETracePriorityHost iPriority,<br/>const char &#8727; iMessage,<br/>... ) [static]<br/></p>
<p>Log a trace message.<br/></p>
<p><b>Parameters<br/></b>in iPriority Priority of the trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iMessage Message string to log<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.17 AAX_CLinearTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template Reference 499<br/></b></p>
<p><b>14.16.2.4 StackTrace()<br/></b></p>
<p>static AAX_Result AAX_CHostServices::StackTrace (<br/>AAX_ETracePriorityHost iTracePriority,<br/>AAX_ETracePriorityHost iStackTracePriority,<br/>const char &#8727; iMessage,<br/>... ) [static]<br/></p>
<p>Log a trace message or a stack trace.<br/></p>
<p>If the logging output filtering is set to include logs with iStackTracePriority then both the logging message<br/>and a stack trace will be emitted, regardless of iTracePriority.<br/></p>
<p>If the logging output filtering is set to include logs with iTracePriority but to exclude logs with iStack&#8592;&#8617;<br/>TracePriority then this will emit a normal log with no stack trace.<br/></p>
<p><b>Parameters<br/></b>in iTracePriority Priority of the trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iStackTracePriority Priority of the stack trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iMessage Message string to log<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CHostServices.h<br/></p>
<p><b>14.17 AAX_CLinearTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template<br/>Reference<br/></b></p>
<p>#include &lt;AAX_CLinearTaperDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;:<br/></p>
<p>Collaboration diagram for AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;:<br/></p>
<p><b>14.17.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T, int32_t RealPrecision = 0</b>&gt;<br/><b>class AAX_CLinearTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt;<br/></p>
<p>A linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p>This taper spaces a parameter's real values evenly between its minimum and maximum, with a linear mapping<br/>between the parameter's real and normalized values.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>500 Class Documentation<br/></b></p>
<p><b>RealPrecision<br/></b>In addition to its type templatization, this taper includes a precision template parameter. RealPrecision is a<br/>multiplier that works in conjunction with the round() function to limit the precision of the real values provided<br/>by this taper. For example, if RealPrecision is 1000, it will round to the closest 0.001 when doing any sort of<br/>value conversion. If RealPrecision is 1, it will round to the nearest integer. If RealPrecision is 1000000, it will<br/>round to the nearest 0.000001. This is particularly useful for preventing things like 1.9999999 truncating down<br/>to 1 instead of rounding up to 2.<br/></p>
<p>To accomplish this behavior, the taper multiplies its unrounded parameter values by RealPrecision, rounds the result<br/>to the nearest valid value, then divides RealPrecision back out.<br/></p>
<p>Rounding will be disabled if RealPrecision is set to a value less than 1. This is the default.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CLinearTaperDelegate (T minValue=0, T maxValue=1)<br/></p>
<p>Constructs a Linear Taper with specified minimum and maximum values.<br/>&#8226; AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt; &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Constructs and returns a copy of the taper delegate.<br/>&#8226; T GetMinimumValue () const AAX_OVERRIDE<br/></p>
<p>Returns the taper's minimum real value.<br/>&#8226; T GetMaximumValue () const AAX_OVERRIDE<br/></p>
<p>Returns the taper's maximum real value.<br/>&#8226; T ConstrainRealValue (T value) const AAX_OVERRIDE<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/>&#8226; T NormalizedToReal (double normalizedValue) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized value to a real value.<br/>&#8226; double RealToNormalized (T realValue) const AAX_OVERRIDE<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p><b>Protected Member Functions<br/></b>&#8226; T Round (double iValue) const<br/></p>
<p><b>14.17.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.17.2.1 AAX_CLinearTaperDelegate()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;::AAX_CLinearTaperDelegate (<br/></p>
<p>T minValue = 0,<br/>T maxValue = 1 )<br/></p>
<p>Constructs a Linear Taper with specified minimum and maximum values.<br/></p>
<p><b>Note<br/></b>The parameter's default value should lie within the min to max range.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.17 AAX_CLinearTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template Reference 501<br/></b></p>
<p><b>Parameters<br/></b>in minValue<br/>in maxValue<br/></p>
<p><b>14.17.3 Member Function Documentation<br/></b></p>
<p><b>14.17.3.1 Clone()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt; &#8727; AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;&#8592;&#8617;<br/>::Clone ( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the taper delegate.<br/>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassTaperDelegate&lt;T&gt;* AAX_CSubclassTaperDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassTaperDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.17.3.2 GetMinimumValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision = 0&gt;<br/>T AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;::GetMinimumValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the taper's minimum real value.<br/>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.17.3.3 GetMaximumValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision = 0&gt;<br/>T AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;::GetMaximumValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the taper's maximum real value.<br/>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.17.3.4 ConstrainRealValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;::ConstrainRealValue (<br/></p>
<p>T value ) const [virtual]<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/>This method is useful if the taper requires a contraint beyond simple minimum and maximum real value limits.<br/><b>Note<br/></b></p>
<p>This is the function that should actually enforces the constraints in NormalizeToReal() and RealToNormalized().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>502 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in value The unconstrained value<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.17.3.5 NormalizedToReal()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;::NormalizedToReal (<br/></p>
<p>double normalizedValue ) const [virtual]<br/></p>
<p>Converts a normalized value to a real value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of RealToNormalized(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value that will be converted<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.17.3.6 RealToNormalized()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>double AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;::RealToNormalized (<br/></p>
<p>T realValue ) const [virtual]<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of NormalizedToReal(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in realValue The real parameter value that will be normalized<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.18 AAX_CLogTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template Reference 503<br/></b></p>
<p><b>14.17.3.7 Round()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;::Round (<br/></p>
<p>double iValue ) const [protected]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CLinearTaperDelegate.h<br/></p>
<p><b>14.18 AAX_CLogTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template<br/>Reference<br/></b></p>
<p>#include &lt;AAX_CLogTaperDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;:<br/></p>
<p>Collaboration diagram for AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;:<br/></p>
<p><b>14.18.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T, int32_t RealPrecision = 1000</b>&gt;<br/><b>class AAX_CLogTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt;<br/></p>
<p>A logarithmic taper conforming to AAX_ITaperDelegate.<br/></p>
<p>This taper spaces a parameter's real values between its minimum and maximum bounds, with a natural logarithmic<br/>mapping between the parameter's real and normalized values.<br/></p>
<p><b>RealPrecision<br/></b>In addition to its type templatization, this taper includes a precision template parameter. RealPrecision is a<br/>multiplier that works in conjunction with the round() function to limit the precision of the real values provided<br/>by this taper. For example, if RealPrecision is 1000, it will round to the closest 0.001 when doing any sort of<br/>value conversion. If RealPrecision is 1, it will round to the nearest integer. If RealPrecision is 1000000, it will<br/>round to the nearest 0.000001. This is particularly useful for preventing things like 1.9999999 truncating down<br/>to 1 instead of rounding up to 2.<br/></p>
<p>To accomplish this behavior, the taper multiplies its unrounded parameter values by RealPrecision, rounds the result<br/>to the nearest valid value, then divides RealPrecision back out.<br/></p>
<p>Rounding will be disabled if RealPrecision is set to a value less than 1<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>504 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CLogTaperDelegate (T minValue=0, T maxValue=1)<br/>Constructs a Log Taper with specified minimum and maximum values.<br/></p>
<p>&#8226; AAX_CLogTaperDelegate&lt; T, RealPrecision &gt; &#8727; Clone () const AAX_OVERRIDE<br/>Constructs and returns a copy of the taper delegate.<br/></p>
<p>&#8226; T GetMinimumValue () const AAX_OVERRIDE<br/>Returns the taper's minimum real value.<br/></p>
<p>&#8226; T GetMaximumValue () const AAX_OVERRIDE<br/>Returns the taper's maximum real value.<br/></p>
<p>&#8226; T ConstrainRealValue (T value) const AAX_OVERRIDE<br/>Applies a contraint to the value and returns the constrained value.<br/></p>
<p>&#8226; T NormalizedToReal (double normalizedValue) const AAX_OVERRIDE<br/>Converts a normalized value to a real value.<br/></p>
<p>&#8226; double RealToNormalized (T realValue) const AAX_OVERRIDE<br/>Normalizes a real parameter value.<br/></p>
<p><b>Protected Member Functions<br/></b></p>
<p>&#8226; T Round (double iValue) const<br/></p>
<p><b>14.18.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.18.2.1 AAX_CLogTaperDelegate()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;::AAX_CLogTaperDelegate (<br/></p>
<p>T minValue = 0,<br/>T maxValue = 1 )<br/></p>
<p>Constructs a Log Taper with specified minimum and maximum values.<br/></p>
<p><b>Note<br/></b>The parameter's default value should lie within the min to max range.<br/></p>
<p><b>Parameters<br/></b>in minValue<br/>in maxValue<br/></p>
<p><b>14.18.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.18 AAX_CLogTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template Reference 505<br/></b></p>
<p><b>14.18.3.1 Clone()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt; &#8727; AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;::Clone<br/>( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the taper delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassTaperDelegate&lt;T&gt;* AAX_CSubclassTaperDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassTaperDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.18.3.2 GetMinimumValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision = 1000&gt;<br/>T AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;::GetMinimumValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the taper's minimum real value.<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.18.3.3 GetMaximumValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision = 1000&gt;<br/>T AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;::GetMaximumValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the taper's maximum real value.<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.18.3.4 ConstrainRealValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;::ConstrainRealValue (<br/></p>
<p>T value ) const [virtual]<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/></p>
<p>This method is useful if the taper requires a contraint beyond simple minimum and maximum real value limits.<br/></p>
<p><b>Note<br/></b>This is the function that should actually enforces the constraints in NormalizeToReal() and RealToNormalized().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>506 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in value The unconstrained value<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.18.3.5 NormalizedToReal()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;::NormalizedToReal (<br/></p>
<p>double normalizedValue ) const [virtual]<br/></p>
<p>Converts a normalized value to a real value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of RealToNormalized(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value that will be converted<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p>References AAX::SafeLog().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.18.3.6 RealToNormalized()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>double AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;::RealToNormalized (<br/></p>
<p>T realValue ) const [virtual]<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of NormalizedToReal(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in realValue The real parameter value that will be normalized<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/>References AAX::SafeLog().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.19 AAX_CMidiPacket Struct Reference 507<br/></b></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.18.3.7 Round()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;::Round (<br/></p>
<p>double iValue ) const [protected]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CLogTaperDelegate.h<br/></p>
<p><b>14.19 AAX_CMidiPacket Struct Reference<br/></b></p>
<p>#include &lt;AAX.h&gt;<br/></p>
<p><b>14.19.1 Description<br/></b></p>
<p>Packet structure for MIDI data.<br/></p>
<p><b>See also<br/></b>AAX_CMidiStream<br/></p>
<p><b>Legacy Porting Notes </b>Corresponds to DirectMidiPacket in the legacy SDK<br/></p>
<p><b>Public Attributes<br/></b>&#8226; uint32_t mTimestamp<br/></p>
<p>This is the playback time at which the MIDI event should occur, relative to the beginning of the current audio buffer.<br/>&#8226; uint32_t mLength<br/></p>
<p>The length of MIDI message, in terms of bytes.<br/>&#8226; unsigned char mData [4]<br/></p>
<p>The MIDI message itself. Each array element is one byte of the message, with the 0th element being the first byte.<br/>&#8226; AAX_CBoolean mIsImmediate<br/></p>
<p>Indicates that the message is to be sent as soon as possible.<br/></p>
<p><b>14.19.2 Member Data Documentation<br/></b></p>
<p><b>14.19.2.1 mTimestamp<br/></b></p>
<p>uint32_t AAX_CMidiPacket::mTimestamp<br/></p>
<p>This is the playback time at which the MIDI event should occur, relative to the beginning of the current audio buffer.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>508 Class Documentation<br/></b></p>
<p><b>14.19.2.2 mLength<br/></b></p>
<p>uint32_t AAX_CMidiPacket::mLength<br/></p>
<p>The length of MIDI message, in terms of bytes.<br/></p>
<p><b>14.19.2.3 mData<br/></b></p>
<p>unsigned char AAX_CMidiPacket::mData[4]<br/></p>
<p>The MIDI message itself. Each array element is one byte of the message, with the 0th element being the first byte.<br/></p>
<p>Referenced by AAX::IsAccentedClick(), AAX::IsAllNotesOff(), AAX::IsNoteOff(), AAX::IsNoteOn(), and AAX::Is&#8592;&#8617;<br/>UnaccentedClick().<br/></p>
<p><b>14.19.2.4 mIsImmediate<br/></b></p>
<p>AAX_CBoolean AAX_CMidiPacket::mIsImmediate<br/></p>
<p>Indicates that the message is to be sent as soon as possible.<br/></p>
<p><b>Host Compatibility Notes </b>This value is not currently set. Use mTimestamp == 0 to detect immediate packets<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX.h<br/></p>
<p><b>14.20 AAX_CMidiStream Struct Reference<br/></b></p>
<p>#include &lt;AAX.h&gt;<br/></p>
<p>Collaboration diagram for AAX_CMidiStream:<br/></p>
<p><b>14.20.1 Description<br/></b></p>
<p>MIDI stream data structure used by AAX_IMIDINode.<br/></p>
<p>For MIDI input, mBufferSize is set by the AAX host when the buffer is filled.<br/></p>
<p>For MIDI output, the plug-in sets mBufferSize with the number of AAX_CMidiPacket objects it has filled mBuffer<br/>with. The AAX host will reset mBufferSize to 0 after it has received the buffer of MIDI.<br/></p>
<p>System Exclusive (SysEx) messages that are greater than 4 bytes in length can be transmitted via a series of<br/>concurrent AAX_CMidiPacket objects in mBuffer. In accordance with the MIDI Specification, 0xF0 indicates the<br/>beginning of a SysEx message and 0xF7 indicates its end.<br/></p>
<p><b>Legacy Porting Notes </b>Corresponds to DirectMidiNode in the legacy SDK<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.21 AAX_CMonolithicParameters Class Reference 509<br/></b></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; uint32_t mBufferSize<br/>The number of AAX_CMidiPacket objects contained in the node's buffer.<br/></p>
<p>&#8226; AAX_CMidiPacket &#8727; mBuffer<br/>Pointer to the first element of the node's buffer.<br/></p>
<p><b>14.20.2 Member Data Documentation<br/></b></p>
<p><b>14.20.2.1 mBufferSize<br/></b></p>
<p>uint32_t AAX_CMidiStream::mBufferSize<br/></p>
<p>The number of AAX_CMidiPacket objects contained in the node's buffer.<br/></p>
<p><b>14.20.2.2 mBuffer<br/></b></p>
<p>AAX_CMidiPacket&#8727; AAX_CMidiStream::mBuffer<br/></p>
<p>Pointer to the first element of the node's buffer.<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX.h<br/></p>
<p><b>14.21 AAX_CMonolithicParameters Class Reference<br/></b></p>
<p>#include &lt;AAX_CMonolithicParameters.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CMonolithicParameters:<br/></p>
<p>Collaboration diagram for AAX_CMonolithicParameters:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>510 Class Documentation<br/></b></p>
<p><b>14.21.1 Description<br/></b></p>
<p>Extension of the AAX_CEffectParameters class for monolithic VIs and effects.<br/></p>
<p>This extension to AAX_CEffectParameters adds some conveniences for Virtual Instrument (VI) plug-ins and for<br/>other plug-ins that use a monolithic processing object, i.e. an object that combines state data with the audio render<br/>routine in a single object.<br/></p>
<p>&#8226; The RenderAudio method provides a direct audio processing callback within the data model object. Perform<br/>all audio processing in this method.<br/></p>
<p>&#8226; The StaticDescribe method establishes a generic MIDI processing context for the Effect. Call this method<br/>from the plug-in's Description callback implementation.<br/></p>
<p>&#8226; The AddSynchronizedParameter method provides a mechanism for synchronizing parameter updates with<br/>the real-time thread, allowing deterministic, accurate automation playback. For more information abou this<br/>feature, see Fixing timing issues due to shared data<br/></p>
<p><b>Note<br/></b>This convenience class assumes a monolithic processing environment (i.e. AAX_eConstraintLocationMask_DataModel<br/>.) This precludes the use of AAX_CMonolithicParameters -derived Effects in distributed-processing formats<br/>such as AAX DSP.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CMonolithicParameters (void)<br/>&#8226; &#8764;AAX_CMonolithicParameters (void) AAX_OVERRIDE<br/></p>
<p><b>Protected Types<br/></b></p>
<p>&#8226; typedef std::pair&lt; AAX_CParamID const, const AAX_IParameterValue &#8727; &gt; TParamValPair<br/></p>
<p><b>Protected Member Functions<br/></b></p>
<p><b>Real-time functions<br/></b>Virtual functions called on the real-time thread<br/></p>
<p>&#8226; virtual void RenderAudio (AAX_SInstrumentRenderInfo &#8727;ioRenderInfo, const TParamValPair &#8727;in&#8592;&#8617;<br/>SynchronizedParamValues[ ], int32_t inNumSynchronizedParamValues)<br/></p>
<p><b>Configuration methods<br/></b></p>
<p>&#8226; void AddSynchronizedParameter (const AAX_IParameter &amp;inParameter)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.21 AAX_CMonolithicParameters Class Reference 511<br/></b></p>
<p><b>Convenience Layer Methods<br/></b></p>
<p><b>Note<br/></b>You should not need to override these methods, but if you do, make sure to call into the base class.<br/></p>
<p>&#8226; AAX_Result UpdateParameterNormalizedValue (AAX_CParamID iParamID, double aValue, AAX_EUpdateSource<br/>inSource) AAX_OVERRIDE<br/></p>
<p>Updates a single parameter's state to its current value.<br/>&#8226; AAX_Result GenerateCoefficients () AAX_OVERRIDE<br/></p>
<p>Generates and dispatches new coefficient packets.<br/>&#8226; AAX_Result ResetFieldData (AAX_CFieldIndex iFieldIndex, void &#8727;oData, uint32_t iDataSize) const<br/></p>
<p>AAX_OVERRIDE<br/>Called by the host to reset a private data field in the plug-in's algorithm.<br/></p>
<p>&#8226; AAX_Result TimerWakeup () AAX_OVERRIDE<br/>Periodic wakeup callback for idle-time operations.<br/></p>
<p>&#8226; static AAX_Result StaticDescribe (AAX_IEffectDescriptor &#8727;ioDescriptor, const AAX_SInstrumentSetupInfo<br/>&amp;setupInfo)<br/></p>
<p>&#8226; static void AAX_CALLBACK StaticRenderAudio (AAX_SInstrumentRenderInfo &#8727;const inInstancesBegin[ ],<br/>const void &#8727;inInstancesEnd)<br/></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.21.2 Member Typedef Documentation<br/></b></p>
<p><b>14.21.2.1 TParamValPair<br/></b></p>
<p>typedef std::pair&lt;AAX_CParamID const, const AAX_IParameterValue&#8727;&gt; AAX_CMonolithicParameters::TParamValPair<br/>[protected]<br/></p>
<p><b>14.21.3 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.21.3.1 AAX_CMonolithicParameters()<br/></b></p>
<p>AAX_CMonolithicParameters::AAX_CMonolithicParameters (<br/>void )<br/></p>
<p><b>14.21.3.2 </b>&#8764;<b>AAX_CMonolithicParameters()<br/></b></p>
<p>AAX_CMonolithicParameters::&#8764;AAX_CMonolithicParameters (<br/>void )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>512 Class Documentation<br/></b></p>
<p><b>14.21.4 Member Function Documentation<br/></b></p>
<p><b>14.21.4.1 RenderAudio()<br/></b></p>
<p>virtual void AAX_CMonolithicParameters::RenderAudio (<br/>AAX_SInstrumentRenderInfo &#8727; ioRenderInfo,<br/>const TParamValPair &#8727; inSynchronizedParamValues[],<br/>int32_t inNumSynchronizedParamValues ) [inline], [protected], [virtual]<br/></p>
<p>Perform audio render<br/></p>
<p><b>Parameters<br/></b>in,out ioRenderInfo State data for the current render buffer<br/>in inSynchronizedParamValues The parameter values which should be applied for the current<br/></p>
<p>render buffer<br/></p>
<p><b>See also<br/></b>AddSynchronizedParameter<br/></p>
<p><b>Parameters<br/></b>in inNumSynchronizedParamValues The number of parameter values provided in<br/></p>
<p>inSynchronizedParamValues<br/></p>
<p>Referenced by StaticRenderAudio().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.21.4.2 AddSynchronizedParameter()<br/></b></p>
<p>void AAX_CMonolithicParameters::AddSynchronizedParameter (<br/>const AAX_IParameter &amp; inParameter ) [protected]<br/></p>
<p>Add a parameter for state synchronization<br/></p>
<p>A parameter should be added for synchronization if:<br/></p>
<p>&#8226; It is important for the parameter's automation to be applied at the correct point on the timeline<br/></p>
<p>&#8226; It is possible to quickly update the plug-in's state to reflect a parameter change<br/></p>
<p>See Parameter update timing for more information<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.21 AAX_CMonolithicParameters Class Reference 513<br/></b></p>
<p><b>Parameters<br/></b>in inParameter The parameter to be synchronized. This string will be copied internally and is not<br/></p>
<p>required to persist<br/></p>
<p>References AAX_ASSERT, AAX_IParameter::Automatable(), AAX_IParameter::Identifier(), and kSynchronized&#8592;&#8617;<br/>ParameterQueueSize.<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.21.4.3 UpdateParameterNormalizedValue()<br/></b></p>
<p>AAX_Result AAX_CMonolithicParameters::UpdateParameterNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double iValue,<br/>AAX_EUpdateSource iSource ) [virtual]<br/></p>
<p>Updates a single parameter's state to its current value.<br/></p>
<p><b>Note<br/></b>Do not call this method from the plug-in. This method should be called by the host only. To set parameter<br/>values from within the plug-in, use the AAX_IParameter interface.<br/></p>
<p><b>Todo </b>FLAGGED FOR CONSIDERATION OF REVISION<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being updated<br/>in iValue The parameter's current value, to which its internal state must be updated<br/>in iSource The source of the update<br/></p>
<p>Reimplemented from AAX_CEffectParameters.<br/></p>
<p>References AAX_SUCCESS, AAX_CParameterManager::GetParameterByID(), AAX_CEffectParameters::m&#8592;&#8617;<br/>ParameterManager, and AAX_CEffectParameters::UpdateParameterNormalizedValue().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.21.4.4 GenerateCoefficients()<br/></b></p>
<p>AAX_Result AAX_CMonolithicParameters::GenerateCoefficients ( ) [virtual]<br/></p>
<p>Generates and dispatches new coefficient packets.<br/></p>
<p>This method is responsible for updating the coefficient packets associated with all parameters whose states have<br/>changed since the last call to GenerateCoefficients(). The host may call this method once for every parameter<br/>update, or it may &quot;batch&quot; parameter updates such that changes for several parameters are all handled by a single<br/>call to GenerateCoefficients().<br/></p>
<p>For more information on tracking parameters' statuses using the AAX_CPacketDispatcher, helper class, see<br/>AAX_CPacketDispatcher::SetDirty().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>514 Class Documentation<br/></b></p>
<p><b>Note<br/></b>Do not call this method from the plug-in. This method should be called by the host only. To set parameter<br/>values from within the plug-in, use the AAX_IParameter interface.<br/></p>
<p>Reimplemented from AAX_CEffectParameters.<br/></p>
<p>References AAX_ASSERT, AAX_FIELD_INDEX, AAX_SUCCESS, AAX_IParameter::CloneValue(), AAX&#8592;&#8617;<br/>_CEffectParameters::Controller(), AAX_IContainer::eStatus_Success, AAX_CEffectParameters::Generate&#8592;&#8617;<br/>Coefficients(), AAX_IParameter::Identifier(), AAX_IController::PostPacket(), and AAX_CAtomicQueue&lt; T, S &gt;::&#8592;&#8617;<br/>Push().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.21.4.5 ResetFieldData()<br/></b></p>
<p>AAX_Result AAX_CMonolithicParameters::ResetFieldData (<br/>AAX_CFieldIndex inFieldIndex,<br/>void &#8727; oData,<br/>uint32_t inDataSize ) const [virtual]<br/></p>
<p>Called by the host to reset a private data field in the plug-in's algorithm.<br/></p>
<p>This method is called sequentially for all private data fields on Effect initialization and during any &quot;reset&quot; event, such<br/>as priming for a non-real-time render. This method is called before the algorithm's optional initialization callback,<br/>and the initialized private data will be available within that callback via its context block.<br/></p>
<p><b>See also<br/></b>Algorithm initialization.<br/></p>
<p><b>Warning<br/></b>Any data structures that will be passed between platforms (for example, sent to a TI DSP in an AAX DSP<br/>plug-in) must be properly data-aligned for compatibility across both platforms. See AAX_ALIGN_FILE_ALG<br/>for more information about guaranteeing cross-platform compatibility of data structures used for algorithm<br/>processing.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex The index of the field that is being initialized<br/>out oData The pre-allocated block of data that should be initialized<br/>in inDataSize The size of the data block, in bytes<br/></p>
<p>Reimplemented from AAX_CEffectParameters.<br/></p>
<p>References AAX_ASSERT, AAX_FIELD_INDEX, AAX_SUCCESS, AAX_SInstrumentPrivateData::mMonolithic&#8592;&#8617;<br/>ParametersPtr, and AAX_CEffectParameters::ResetFieldData().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.21 AAX_CMonolithicParameters Class Reference 515<br/></b></p>
<p><b>14.21.4.6 TimerWakeup()<br/></b></p>
<p>AAX_Result AAX_CMonolithicParameters::TimerWakeup ( ) [virtual]<br/></p>
<p>Periodic wakeup callback for idle-time operations.<br/></p>
<p>This method is called from the host using a non-main thread. In general, it should be driven at approximately one<br/>call per 30 ms. However, the wakeup is not guaranteed to be called at any regular interval - for example, it could<br/>be held off by a high real-time processing load - and there is no host contract regarding maximum latency between<br/>wakeup calls.<br/></p>
<p>This wakeup thread runs continuously and cannot be armed/disarmed or by the plug-in.<br/></p>
<p>Reimplemented from AAX_CEffectParameters.<br/></p>
<p>References AAX_CEffectParameters::TimerWakeup().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.21.4.7 StaticDescribe()<br/></b></p>
<p>AAX_Result AAX_CMonolithicParameters::StaticDescribe (<br/>AAX_IEffectDescriptor &#8727; ioDescriptor,<br/>const AAX_SInstrumentSetupInfo &amp; setupInfo ) [static]<br/></p>
<p>Static description callback<br/></p>
<p>This method performs all of the basic context setup and pointer passing work<br/></p>
<p><b>Parameters<br/></b>in,out ioDescriptor<br/>in setupInfo<br/></p>
<p>References AAX_ASSERT, AAX_eConstraintLocationMask_DataModel, AAX_eMIDINodeType_Global, AAX_e&#8592;&#8617;<br/>MIDINodeType_LocalInput, AAX_eMIDINodeType_Transport, AAX_ePrivateDataOptions_DefaultOptions, AAX&#8592;&#8617;<br/>_eProperty_CanBypass, AAX_eProperty_Constraint_Location, AAX_eProperty_Constraint_MultiMonoSupport,<br/>AAX_eProperty_HybridInputStemFormat, AAX_eProperty_HybridOutputStemFormat, AAX_eProperty_Input&#8592;&#8617;<br/>StemFormat, AAX_eProperty_ManufacturerID, AAX_eProperty_OutputStemFormat, AAX_eProperty_PlugIn&#8592;&#8617;<br/>ID_AudioSuite, AAX_eProperty_PlugInID_RTAS, AAX_eProperty_ProductID, AAX_eProperty_UsesClientGUI,<br/>AAX_eProperty_UsesTransport, AAX_ERROR_NULL_OBJECT, AAX_eStemFormat_None, AAX_FIELD_&#8592;&#8617;<br/>INDEX, AAX_IComponentDescriptor::AddAudioBufferLength(), AAX_IComponentDescriptor::AddAudioIn(), AAX&#8592;&#8617;<br/>_IComponentDescriptor::AddAudioOut(), AAX_IComponentDescriptor::AddAuxOutputStem(), AAX_IComponent&#8592;&#8617;<br/>Descriptor::AddClock(), AAX_IEffectDescriptor::AddComponent(), AAX_IComponentDescriptor::AddDataInPort(),<br/>AAX_IComponentDescriptor::AddMeters(), AAX_IComponentDescriptor::AddMIDINode(), AAX_IComponent&#8592;&#8617;<br/>Descriptor::AddPrivateData(), AAX_IComponentDescriptor::AddProcessProc_Native(), AAX_IPropertyMap::&#8592;&#8617;<br/>AddProperty(), kMaxAdditionalMIDINodes, kMaxAuxOutputStems, AAX_SInstrumentSetupInfo::mAudiosuite&#8592;&#8617;<br/>ID, AAX_SInstrumentSetupInfo::mAuxOutputStemFormats, AAX_SInstrumentSetupInfo::mAuxOutputStem&#8592;&#8617;<br/>Names, AAX_SInstrumentSetupInfo::mCanBypass, AAX_SInstrumentSetupInfo::mGlobalMIDIEventMask, AAX_&#8592;&#8617;<br/>SInstrumentSetupInfo::mGlobalMIDINodeName, AAX_SInstrumentSetupInfo::mHybridInputStemFormat, AAX&#8592;&#8617;<br/>_SInstrumentSetupInfo::mHybridOutputStemFormat, AAX_SInstrumentSetupInfo::mInputMIDIChannelMask,<br/>AAX_SInstrumentSetupInfo::mInputMIDINodeName, AAX_SInstrumentSetupInfo::mInputStemFormat, AAX_&#8592;&#8617;<br/>SInstrumentSetupInfo::mManufacturerID, AAX_SInstrumentSetupInfo::mMeterIDs, AAX_SInstrumentSetupInfo&#8592;&#8617;<br/>::mMultiMonoSupport, AAX_SInstrumentSetupInfo::mNeedsGlobalMIDI, AAX_SInstrumentSetupInfo::mNeeds&#8592;&#8617;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>516 Class Documentation<br/></b></p>
<p>InputMIDI, AAX_SInstrumentSetupInfo::mNeedsTransport, AAX_SInstrumentSetupInfo::mNumAdditionalInput&#8592;&#8617;<br/>MIDINodes, AAX_SInstrumentSetupInfo::mNumAuxOutputStems, AAX_SInstrumentSetupInfo::mNumMeters,<br/>AAX_SInstrumentSetupInfo::mOutputStemFormat, AAX_SInstrumentSetupInfo::mPluginID, AAX_SInstrument&#8592;&#8617;<br/>SetupInfo::mProductID, AAX_SInstrumentSetupInfo::mUseHostGeneratedGUI, AAX_IEffectDescriptor::New&#8592;&#8617;<br/>ComponentDescriptor(), AAX_IComponentDescriptor::NewPropertyMap(), and StaticRenderAudio().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.21.4.8 StaticRenderAudio()<br/></b></p>
<p>void AAX_CALLBACK AAX_CMonolithicParameters::StaticRenderAudio (<br/>AAX_SInstrumentRenderInfo &#8727;const inInstancesBegin[],<br/>const void &#8727; inInstancesEnd ) [static]<br/></p>
<p>Static RenderAudio (Called by the host)<br/></p>
<p>Plug-ins should override AAX_CMonolithicParameters::RenderAudio()<br/></p>
<p><b>Parameters<br/></b>in inInstancesBegin<br/>in inInstancesEnd<br/></p>
<p>References AAX_ASSERT, AAX_IContainer::eStatus_Success, AAX_SInstrumentPrivateData::mMonolithic&#8592;&#8617;<br/>ParametersPtr, AAX_CAtomicQueue&lt; T, S &gt;::Push(), and RenderAudio().<br/></p>
<p>Referenced by StaticDescribe().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p>The documentation for this class was generated from the following files:<br/></p>
<p>&#8226; AAX_CMonolithicParameters.h<br/>&#8226; AAX_CMonolithicParameters.cpp<br/></p>
<p><b>14.22 AAX_CMutex Class Reference<br/></b></p>
<p>#include &lt;AAX_CMutex.h&gt;<br/></p>
<p><b>14.22.1 Description<br/></b></p>
<p>Mutex with try lock functionality.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CMutex ()<br/>&#8226; &#8764;AAX_CMutex ()<br/>&#8226; bool Lock ()<br/>&#8226; void Unlock ()<br/>&#8226; bool Try_Lock ()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.22 AAX_CMutex Class Reference 517<br/></b></p>
<p><b>14.22.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.22.2.1 AAX_CMutex()<br/></b></p>
<p>AAX_CMutex::AAX_CMutex ( )<br/></p>
<p><b>14.22.2.2 </b>&#8764;<b>AAX_CMutex()<br/></b></p>
<p>AAX_CMutex::&#8764;AAX_CMutex ( )<br/></p>
<p><b>14.22.3 Member Function Documentation<br/></b></p>
<p><b>14.22.3.1 Lock()<br/></b></p>
<p>bool AAX_CMutex::Lock ( )<br/></p>
<p>Referenced by AAX_StLock_Guard::AAX_StLock_Guard().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.22.3.2 Unlock()<br/></b></p>
<p>void AAX_CMutex::Unlock ( )<br/></p>
<p>Referenced by AAX_StLock_Guard::&#8764;AAX_StLock_Guard().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.22.3.3 Try_Lock()<br/></b></p>
<p>bool AAX_CMutex::Try_Lock ( )<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CMutex.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>518 Class Documentation<br/></b></p>
<p><b>14.23 AAX_CNumberDisplayDelegate</b>&lt; <b>T, Precision, SpaceAfter </b>&gt; <b>Class<br/>Template Reference<br/></b></p>
<p>#include &lt;AAX_CNumberDisplayDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;:<br/></p>
<p>Collaboration diagram for AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;:<br/></p>
<p><b>14.23.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T, uint32_t Precision = 2, uint32_t SpaceAfter = 0</b>&gt;<br/><b>class AAX_CNumberDisplayDelegate</b>&lt; <b>T, Precision, SpaceAfter </b>&gt;<br/></p>
<p>A numeric display format conforming to AAX_IDisplayDelegate.<br/></p>
<p>This display delegate converts a parameter value to a numeric string using a specified precision.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CNumberDisplayDelegate &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/>&#8226; bool ValueToString (T value, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation.<br/>&#8226; bool ValueToString (T value, int32_t maxNumChars, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p>&#8226; bool StringToValue (const AAX_CString &amp;valueString, T &#8727;value) const AAX_OVERRIDE<br/>Converts a string to a real parameter value.<br/></p>
<p><b>14.23.2 Member Function Documentation<br/></b></p>
<p><b>14.23.2.1 Clone()<br/></b></p>
<p>template&lt;typename T , uint32_t Precision, uint32_t SpaceAfter&gt;<br/>AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt; &#8727; AAX_CNumberDisplayDelegate&lt; T, Precision,<br/>SpaceAfter &gt;::Clone ( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassDisplayDelegate&lt;T&gt;* AAX_CSubclassDisplayDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassDisplayDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.23 AAX_CNumberDisplayDelegate</b>&lt; <b>T, Precision, SpaceAfter </b>&gt; <b>Class Template Reference 519<br/></b></p>
<p><b>14.23.2.2 ValueToString() [1/2]<br/></b></p>
<p>template&lt;typename T , uint32_t Precision, uint32_t SpaceAfter&gt;<br/>bool AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;::ValueToString (<br/></p>
<p>T value,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>520 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_CString::Append(), AAX_CString::AppendNumber(), and AAX_CString::Clear().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.23.2.3 ValueToString() [2/2]<br/></b></p>
<p>template&lt;typename T , uint32_t Precision, uint32_t SpaceAfter&gt;<br/>bool AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;::ValueToString (<br/></p>
<p>T value,<br/>int32_t maxNumChars,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>in maxNumChars Size hint for the desired maximum number of characters in the string (not including<br/></p>
<p>null termination)<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_CString::Append(), AAX_CString::AppendNumber(), AAX_CString::Clear(), AAX_CString::&#8592;&#8617;<br/>Erase(), and AAX_CString::Length().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.23.2.4 StringToValue()<br/></b></p>
<p>template&lt;typename T , uint32_t Precision, uint32_t SpaceAfter&gt;<br/>bool AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;::StringToValue (<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.24 AAX_Component</b>&lt; <b>aContextType </b>&gt; <b>Class Template Reference 521<br/></b></p>
<p>const AAX_CString &amp; valueString,<br/>T &#8727; value ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_CString::ToDouble().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CNumberDisplayDelegate.h<br/></p>
<p><b>14.24 AAX_Component</b>&lt; <b>aContextType </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_Callbacks.h&gt;<br/></p>
<p><b>14.24.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename aContextType</b>&gt;<br/><b>class AAX_Component</b>&lt; <b>aContextType </b>&gt;<br/></p>
<p>Empty class containing type declarations for the AAX algorithm and associated callbacks.<br/></p>
<p><b>Public Types<br/></b></p>
<p>&#8226; typedef void(AAX_CALLBACK &#8727;CProcessProc) (aContextType &#8727;const inContextPtrsBegin[ ], const void &#8727;in&#8592;&#8617;<br/>ContextPtrsEnd)<br/></p>
<p>&#8226; typedef void &#8727;(AAX_CALLBACK &#8727; CPacketAllocator) (const aContextType &#8727;inContextPtr, AAX_CFieldIndex<br/>inOutputPort, AAX_CTimestamp inTimestamp)<br/></p>
<p>&#8226; typedef int32_t(AAX_CALLBACK &#8727; CInstanceInitProc) (const aContextType &#8727;inInstanceContextPtr,<br/>AAX_EComponentInstanceInitAction iAction)<br/></p>
<p>&#8226; typedef int32_t(AAX_CALLBACK &#8727; CBackgroundProc) (void)<br/>&#8226; typedef void(AAX_CALLBACK &#8727; CInitPrivateDataProc) (AAX_CFieldIndex inFieldIndex, void &#8727;inNewBlock,<br/></p>
<p>int32_t inSize, IACFUnknown &#8727;const inController)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>522 Class Documentation<br/></b></p>
<p><b>14.24.2 Member Typedef Documentation<br/></b></p>
<p><b>14.24.2.1 CProcessProc<br/></b></p>
<p>template&lt;typename aContextType &gt;<br/>typedef void(AAX_CALLBACK &#8727; AAX_Component&lt; aContextType &gt;::CProcessProc) (aContextType &#8727;const<br/>inContextPtrsBegin[], const void &#8727;inContextPtrsEnd)<br/></p>
<p><b>14.24.2.2 CPacketAllocator<br/></b></p>
<p>template&lt;typename aContextType &gt;<br/>typedef void&#8727;(AAX_CALLBACK &#8727; AAX_Component&lt; aContextType &gt;::CPacketAllocator) (const aContext&#8592;&#8617;<br/>Type &#8727;inContextPtr, AAX_CFieldIndex inOutputPort, AAX_CTimestamp inTimestamp)<br/></p>
<p><b>14.24.2.3 CInstanceInitProc<br/></b></p>
<p>template&lt;typename aContextType &gt;<br/>typedef int32_t(AAX_CALLBACK &#8727; AAX_Component&lt; aContextType &gt;::CInstanceInitProc) (const a&#8592;&#8617;<br/>ContextType &#8727;inInstanceContextPtr, AAX_EComponentInstanceInitAction iAction)<br/></p>
<p><b>14.24.2.4 CBackgroundProc<br/></b></p>
<p>template&lt;typename aContextType &gt;<br/>typedef int32_t(AAX_CALLBACK &#8727; AAX_Component&lt; aContextType &gt;::CBackgroundProc) (void)<br/></p>
<p><b>14.24.2.5 CInitPrivateDataProc<br/></b></p>
<p>template&lt;typename aContextType &gt;<br/>typedef void(AAX_CALLBACK &#8727; AAX_Component&lt; aContextType &gt;::CInitPrivateDataProc) (AAX_CFieldIndex<br/>inFieldIndex, void &#8727;inNewBlock, int32_t inSize, IACFUnknown &#8727;const inController)<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_Callbacks.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.25 AAX_CPacket Class Reference 523<br/></b></p>
<p><b>14.25 AAX_CPacket Class Reference<br/></b></p>
<p>#include &lt;AAX_CPacketDispatcher.h&gt;<br/></p>
<p><b>14.25.1 Description<br/></b></p>
<p>Container for packet-related data.<br/></p>
<p>This class collects a number of packet-related data into the same object and provides a facility for tracking when the<br/>parameter is &quot;dirty&quot;, i.e. after its value has been updated and before an associated packet has not been posted.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CPacket (AAX_CFieldIndex inFieldIndex)<br/>&#8226; &#8764;AAX_CPacket ()<br/>&#8226; template&lt;typename DataType &gt;<br/></p>
<p>DataType &#8727; GetPtr ()<br/>&#8226; void SetDirty (bool iDirty)<br/>&#8226; bool IsDirty () const<br/>&#8226; AAX_CFieldIndex GetID () const<br/>&#8226; uint32_t GetSize () const<br/>&#8226; template&lt;&gt; const void &#8727; GetPtr ()<br/></p>
<p><b>14.25.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.25.2.1 AAX_CPacket()<br/></b></p>
<p>AAX_CPacket::AAX_CPacket (<br/>AAX_CFieldIndex inFieldIndex ) [inline]<br/></p>
<p><b>14.25.2.2 </b>&#8764;<b>AAX_CPacket()<br/></b></p>
<p>AAX_CPacket::&#8764;AAX_CPacket ( ) [inline]<br/></p>
<p><b>14.25.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>524 Class Documentation<br/></b></p>
<p><b>14.25.3.1 GetPtr() [1/2]<br/></b></p>
<p>template&lt;typename DataType &gt;<br/>DataType&#8727; AAX_CPacket::GetPtr ( ) [inline]<br/></p>
<p><b>14.25.3.2 SetDirty()<br/></b></p>
<p>void AAX_CPacket::SetDirty (<br/>bool iDirty ) [inline]<br/></p>
<p><b>14.25.3.3 IsDirty()<br/></b></p>
<p>bool AAX_CPacket::IsDirty ( ) const [inline]<br/></p>
<p><b>14.25.3.4 GetID()<br/></b></p>
<p>AAX_CFieldIndex AAX_CPacket::GetID ( ) const [inline]<br/></p>
<p><b>14.25.3.5 GetSize()<br/></b></p>
<p>uint32_t AAX_CPacket::GetSize ( ) const [inline]<br/></p>
<p><b>14.25.3.6 GetPtr() [2/2]<br/></b></p>
<p>template&lt;&gt;<br/>const void&#8727; AAX_CPacket::GetPtr ( ) [inline]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CPacketDispatcher.h<br/></p>
<p><b>14.26 AAX_CPacketDispatcher Class Reference<br/></b></p>
<p>#include &lt;AAX_CPacketDispatcher.h&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.26 AAX_CPacketDispatcher Class Reference 525<br/></b></p>
<p><b>14.26.1 Description<br/></b></p>
<p>Helper class for managing AAX packet posting.<br/></p>
<p>This optional class can be used to associate individual parameters with custom update callbacks. The update call-<br/>backs for all &quot;dirty&quot; parameters are triggered whenever AAX_CPacketDispatcher::Dispatch() is called. The resulting<br/>coefficient data is then posted to the AAX_IController automatically by the packet dispatcher.<br/></p>
<p>The packet dispatcher supports many-to-one relationships between parameters and handler callbacks, so a single<br/>callback may be registered for several related parameters.<br/></p>
<p><b>See also<br/></b>AAX_CEffectParameters::EffectInit()<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CPacketDispatcher ()<br/>&#8226; &#8764;AAX_CPacketDispatcher ()<br/>&#8226; void Initialize (AAX_IController &#8727;iPlugIn, AAX_IEffectParameters &#8727;iEffectParameters)<br/>&#8226; AAX_Result RegisterPacket (AAX_CParamID paramID, AAX_CFieldIndex portID, const AAX_IPacketHandler<br/>&#8727;iHandler)<br/></p>
<p>&#8226; template&lt;class TWorker , typename Func &gt;<br/>AAX_Result RegisterPacket (AAX_CParamID paramID, AAX_CFieldIndex portID, TWorker &#8727;iPt2Object, Func<br/>infPt)<br/></p>
<p>&#8226; AAX_Result RegisterPacket (AAX_CParamID paramID, AAX_CFieldIndex portID)<br/>&#8226; AAX_Result SetDirty (AAX_CParamID paramID, bool iDirty=true)<br/>&#8226; AAX_Result Dispatch ()<br/>&#8226; AAX_Result GenerateSingleValuePacket (AAX_CParamID iParam, AAX_CPacket &amp;ioPacket)<br/></p>
<p><b>14.26.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.26.2.1 AAX_CPacketDispatcher()<br/></b></p>
<p>AAX_CPacketDispatcher::AAX_CPacketDispatcher ( )<br/></p>
<p><b>14.26.2.2 </b>&#8764;<b>AAX_CPacketDispatcher()<br/></b></p>
<p>AAX_CPacketDispatcher::&#8764;AAX_CPacketDispatcher ( )<br/></p>
<p><b>14.26.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>526 Class Documentation<br/></b></p>
<p><b>14.26.3.1 Initialize()<br/></b></p>
<p>void AAX_CPacketDispatcher::Initialize (<br/>AAX_IController &#8727; iPlugIn,<br/>AAX_IEffectParameters &#8727; iEffectParameters )<br/></p>
<p><b>14.26.3.2 RegisterPacket() [1/3]<br/></b></p>
<p>AAX_Result AAX_CPacketDispatcher::RegisterPacket (<br/>AAX_CParamID paramID,<br/>AAX_CFieldIndex portID,<br/>const AAX_IPacketHandler &#8727; iHandler )<br/></p>
<p>Referenced by RegisterPacket().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.26.3.3 RegisterPacket() [2/3]<br/></b></p>
<p>template&lt;class TWorker , typename Func &gt;<br/>AAX_Result AAX_CPacketDispatcher::RegisterPacket (<br/></p>
<p>AAX_CParamID paramID,<br/>AAX_CFieldIndex portID,<br/>TWorker &#8727; iPt2Object,<br/>Func infPt ) [inline]<br/></p>
<p>References RegisterPacket().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.26.3.4 RegisterPacket() [3/3]<br/></b></p>
<p>AAX_Result AAX_CPacketDispatcher::RegisterPacket (<br/>AAX_CParamID paramID,<br/>AAX_CFieldIndex portID ) [inline]<br/></p>
<p>References GenerateSingleValuePacket(), and RegisterPacket().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.26.3.5 SetDirty()<br/></b></p>
<p>AAX_Result AAX_CPacketDispatcher::SetDirty (<br/>AAX_CParamID paramID,<br/>bool iDirty = true )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.27 AAX_CPacketHandler</b>&lt; <b>TWorker </b>&gt; <b>Class Template Reference 527<br/></b></p>
<p><b>14.26.3.6 Dispatch()<br/></b></p>
<p>AAX_Result AAX_CPacketDispatcher::Dispatch ( )<br/></p>
<p><b>14.26.3.7 GenerateSingleValuePacket()<br/></b></p>
<p>AAX_Result AAX_CPacketDispatcher::GenerateSingleValuePacket (<br/>AAX_CParamID iParam,<br/>AAX_CPacket &amp; ioPacket )<br/></p>
<p>Referenced by RegisterPacket().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CPacketDispatcher.h<br/></p>
<p><b>14.27 AAX_CPacketHandler</b>&lt; <b>TWorker </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CPacketDispatcher.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CPacketHandler&lt; TWorker &gt;:<br/></p>
<p>Collaboration diagram for AAX_CPacketHandler&lt; TWorker &gt;:<br/></p>
<p><b>14.27.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>class TWorker</b>&gt;<br/><b>class AAX_CPacketHandler</b>&lt; <b>TWorker </b>&gt;<br/></p>
<p>Callback container used by AAX_CPacketDispatcher.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CPacketHandler (TWorker &#8727;iPt2Object, fPt2Fn infPt)<br/>&#8226; AAX_CPacketHandler (TWorker &#8727;iPt2Object, fPt2FnEx infPt)<br/>&#8226; AAX_IPacketHandler &#8727; Clone () const<br/>&#8226; AAX_Result Call (AAX_CParamID inParamID, AAX_CPacket &amp;ioPacket) const<br/></p>
<p><b>Protected Attributes<br/></b></p>
<p>&#8226; TWorker &#8727; pt2Object<br/>&#8226; fPt2Fn fpt<br/>&#8226; fPt2FnEx fptEx<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>528 Class Documentation<br/></b></p>
<p><b>14.27.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.27.2.1 AAX_CPacketHandler() [1/2]<br/></b></p>
<p>template&lt;class TWorker &gt;<br/>AAX_CPacketHandler&lt; TWorker &gt;::AAX_CPacketHandler (<br/></p>
<p>TWorker &#8727; iPt2Object,<br/>fPt2Fn infPt ) [inline]<br/></p>
<p>Referenced by AAX_CPacketHandler&lt; TWorker &gt;::Clone().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.27.2.2 AAX_CPacketHandler() [2/2]<br/></b></p>
<p>template&lt;class TWorker &gt;<br/>AAX_CPacketHandler&lt; TWorker &gt;::AAX_CPacketHandler (<br/></p>
<p>TWorker &#8727; iPt2Object,<br/>fPt2FnEx infPt ) [inline]<br/></p>
<p><b>14.27.3 Member Function Documentation<br/></b></p>
<p><b>14.27.3.1 Clone()<br/></b></p>
<p>template&lt;class TWorker &gt;<br/>AAX_IPacketHandler&#8727; AAX_CPacketHandler&lt; TWorker &gt;::Clone ( ) const [inline], [virtual]<br/></p>
<p>Implements AAX_IPacketHandler.<br/></p>
<p>References AAX_CPacketHandler&lt; TWorker &gt;::AAX_CPacketHandler().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.27.3.2 Call()<br/></b></p>
<p>template&lt;class TWorker &gt;<br/>AAX_Result AAX_CPacketHandler&lt; TWorker &gt;::Call (<br/></p>
<p>AAX_CParamID inParamID,<br/>AAX_CPacket &amp; ioPacket ) const [inline], [virtual]<br/></p>
<p>Implements AAX_IPacketHandler.<br/></p>
<p>References AAX_ERROR_NULL_OBJECT, AAX_CPacketHandler&lt; TWorker &gt;::fpt, AAX_CPacketHandler&lt;<br/>TWorker &gt;::fptEx, and AAX_CPacketHandler&lt; TWorker &gt;::pt2Object.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 529<br/></b></p>
<p><b>14.27.4 Member Data Documentation<br/></b></p>
<p><b>14.27.4.1 pt2Object<br/></b></p>
<p>template&lt;class TWorker &gt;<br/>TWorker&#8727; AAX_CPacketHandler&lt; TWorker &gt;::pt2Object [protected]<br/></p>
<p>Referenced by AAX_CPacketHandler&lt; TWorker &gt;::Call().<br/></p>
<p><b>14.27.4.2 fpt<br/></b></p>
<p>template&lt;class TWorker &gt;<br/>fPt2Fn AAX_CPacketHandler&lt; TWorker &gt;::fpt [protected]<br/></p>
<p>Referenced by AAX_CPacketHandler&lt; TWorker &gt;::Call().<br/></p>
<p><b>14.27.4.3 fptEx<br/></b></p>
<p>template&lt;class TWorker &gt;<br/>fPt2FnEx AAX_CPacketHandler&lt; TWorker &gt;::fptEx [protected]<br/></p>
<p>Referenced by AAX_CPacketHandler&lt; TWorker &gt;::Call().<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CPacketDispatcher.h<br/></p>
<p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CParameter.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CParameter&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CParameter&lt; T &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>530 Class Documentation<br/></b></p>
<p><b>14.28.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CParameter</b>&lt; <b>T </b>&gt;<br/></p>
<p>Generic implementation of an AAX_IParameter.<br/></p>
<p>This is a concrete, templatized implementation of AAX_IParameter for parameters with standard types such as<br/>float, uint32, bool, etc.<br/></p>
<p>Many different behaviors can be composited into this class as delegates. AAX_ITaperDelegate and<br/>AAX_IDisplayDelegate are two examples of delegates that this class uses in order to apply custom behaviors<br/>to the AAX_IParameter interface.<br/></p>
<p>Plug-in developers can subclass these delegates to create adaptable, reusable parameter behaviors, which can<br/>then be &quot;mixed in&quot; to individual AAX_CParameter objects without the need to modify the objects themselves.<br/></p>
<p><b>Note<br/></b>Because AAX_CParameter is a C++ template, each AAX_CParameter template parameter that is used cre-<br/>ates a new subclass that adheres to the AAX_IParameter interface.<br/></p>
<p><b>Public Types<br/></b></p>
<p>&#8226; enum Type {<br/>eParameterTypeUndefined = 0 ,<br/>eParameterTypeBool = 1 ,<br/>eParameterTypeInt32 = 2 ,<br/>eParameterTypeFloat = 3 ,<br/>eParameterTypeCustom = 4 }<br/></p>
<p>&#8226; enum Defaults {<br/>eParameterDefaultNumStepsDiscrete = 2 ,<br/>eParameterDefaultNumStepsContinuous = 128 }<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CParameter (AAX_CParamID identifier, const AAX_IString &amp;name, T defaultValue, const AAX_ITaperDelegate&lt;<br/>T &gt; &amp;taperDelegate, const AAX_IDisplayDelegate&lt; T &gt; &amp;displayDelegate, bool automatable=false)<br/></p>
<p>Constructs an AAX_CParameter object using the specified taper and display delegates.<br/>&#8226; AAX_CParameter (const AAX_IString &amp;identifier, const AAX_IString &amp;name, T defaultValue, const<br/></p>
<p>AAX_ITaperDelegate&lt; T &gt; &amp;taperDelegate, const AAX_IDisplayDelegate&lt; T &gt; &amp;displayDelegate, bool<br/>automatable=false)<br/></p>
<p>Constructs an AAX_CParameter object using the specified taper and display delegates.<br/>&#8226; AAX_CParameter (const AAX_IString &amp;identifier, const AAX_IString &amp;name, T defaultValue, bool automat-<br/></p>
<p>able=false)<br/>Constructs an AAX_CParameter object with no delegates.<br/></p>
<p>&#8226; AAX_CParameter (const AAX_IString &amp;identifier, const AAX_IString &amp;name, bool automatable=false)<br/>Constructs an AAX_CParameter object with no delegates or default value.<br/></p>
<p>&#8226; AAX_DEFAULT_MOVE_CTOR (AAX_CParameter)<br/>&#8226; AAX_DEFAULT_MOVE_OPER (AAX_CParameter)<br/>&#8226; AAX_DELETE (AAX_CParameter())<br/>&#8226; AAX_DELETE (AAX_CParameter(const AAX_CParameter &amp;other))<br/>&#8226; AAX_DELETE (AAX_CParameter &amp;operator=(const AAX_CParameter &amp;other))<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 531<br/></b></p>
<p>&#8226; &#8764;AAX_CParameter () AAX_OVERRIDE<br/>Virtual destructor used to delete all locally allocated pointers.<br/></p>
<p>&#8226; AAX_IParameterValue &#8727; CloneValue () const AAX_OVERRIDE<br/>Clone the parameter's value to a new AAX_IParameterValue object.<br/></p>
<p>&#8226; bool GetValueAsString (AAX_IString &#8727;) const<br/>Retrieves the parameter's value as a string.<br/></p>
<p>&#8226; bool SetValueWithBool (bool value)<br/>Sets the parameter's value as a bool.<br/></p>
<p>&#8226; bool SetValueWithInt32 (int32_t value)<br/>Sets the parameter's value as an int32_t.<br/></p>
<p>&#8226; bool SetValueWithFloat (float value)<br/>Sets the parameter's value as a float.<br/></p>
<p>&#8226; bool SetValueWithDouble (double value)<br/>Sets the parameter's value as a double.<br/></p>
<p>&#8226; bool SetValueWithString (const AAX_IString &amp;value)<br/>Sets the parameter's value as a string.<br/></p>
<p>&#8226; bool GetNormalizedValueFromBool (bool value, double &#8727;normalizedValue) const<br/>Converts a bool to a normalized parameter value.<br/></p>
<p>&#8226; bool GetNormalizedValueFromInt32 (int32_t value, double &#8727;normalizedValue) const<br/>Converts an integer to a normalized parameter value.<br/></p>
<p>&#8226; bool GetNormalizedValueFromFloat (float value, double &#8727;normalizedValue) const<br/>Converts a float to a normalized parameter value.<br/></p>
<p>&#8226; bool GetNormalizedValueFromDouble (double value, double &#8727;normalizedValue) const<br/>Converts a double to a normalized parameter value.<br/></p>
<p>&#8226; bool GetBoolFromNormalizedValue (double inNormalizedValue, bool &#8727;value) const<br/>Converts a normalized parameter value to a bool representing the corresponding real value.<br/></p>
<p>&#8226; bool GetInt32FromNormalizedValue (double inNormalizedValue, int32_t &#8727;value) const<br/>Converts a normalized parameter value to an integer representing the corresponding real value.<br/></p>
<p>&#8226; bool GetFloatFromNormalizedValue (double inNormalizedValue, float &#8727;value) const<br/>Converts a normalized parameter value to a float representing the corresponding real value.<br/></p>
<p>&#8226; bool GetDoubleFromNormalizedValue (double inNormalizedValue, double &#8727;value) const<br/>Converts a normalized parameter value to a double representing the corresponding real value.<br/></p>
<p><b>Identification methods<br/></b></p>
<p>&#8226; AAX_CParamID Identifier () const AAX_OVERRIDE<br/>Returns the parameter's unique identifier.<br/></p>
<p>&#8226; void SetName (const AAX_CString &amp;name) AAX_OVERRIDE<br/>Sets the parameter's display name.<br/></p>
<p>&#8226; const AAX_CString &amp; Name () const AAX_OVERRIDE<br/>Returns the parameter's display name.<br/></p>
<p>&#8226; void AddShortenedName (const AAX_CString &amp;name) AAX_OVERRIDE<br/>Sets the parameter's shortened display name.<br/></p>
<p>&#8226; const AAX_CString &amp; ShortenedName (int32_t iNumCharacters) const AAX_OVERRIDE<br/>Returns the parameter's shortened display name.<br/></p>
<p>&#8226; void ClearShortenedNames () AAX_OVERRIDE<br/>Clears the internal list of shortened display names.<br/></p>
<p><b>Taper methods<br/></b></p>
<p>&#8226; void SetNormalizedDefaultValue (double normalizedDefault) AAX_OVERRIDE<br/>Sets the parameter's default value using its normalized representation.<br/></p>
<p>&#8226; double GetNormalizedDefaultValue () const AAX_OVERRIDE<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>532 Class Documentation<br/></b></p>
<p>Returns the normalized representation of the parameter's real default value.<br/>&#8226; void SetToDefaultValue () AAX_OVERRIDE<br/></p>
<p>Restores the state of this parameter to its default value.<br/>&#8226; void SetNormalizedValue (double newNormalizedValue) AAX_OVERRIDE<br/></p>
<p>Sets a parameter value using it's normalized representation.<br/>&#8226; double GetNormalizedValue () const AAX_OVERRIDE<br/></p>
<p>Returns the normalized representation of the parameter's current real value.<br/>&#8226; void SetNumberOfSteps (uint32_t numSteps) AAX_OVERRIDE<br/></p>
<p>Sets the number of discrete steps for this parameter.<br/>&#8226; uint32_t GetNumberOfSteps () const AAX_OVERRIDE<br/></p>
<p>Returns the number of discrete steps used by the parameter.<br/>&#8226; uint32_t GetStepValue () const AAX_OVERRIDE<br/></p>
<p>Returns the current step for the current value of the parameter.<br/>&#8226; double GetNormalizedValueFromStep (uint32_t iStep) const AAX_OVERRIDE<br/></p>
<p>Returns the normalized value for a given step.<br/>&#8226; uint32_t GetStepValueFromNormalizedValue (double normalizedValue) const AAX_OVERRIDE<br/></p>
<p>Returns the step value for a normalized value of the parameter.<br/>&#8226; void SetStepValue (uint32_t iStep) AAX_OVERRIDE<br/></p>
<p>Returns the current step for the current value of the parameter.<br/>&#8226; void SetType (AAX_EParameterType iControlType) AAX_OVERRIDE<br/></p>
<p>Sets the type of this parameter.<br/>&#8226; AAX_EParameterType GetType () const AAX_OVERRIDE<br/></p>
<p>Returns the type of this parameter as an AAX_EParameterType.<br/>&#8226; void SetOrientation (AAX_EParameterOrientation iOrientation) AAX_OVERRIDE<br/></p>
<p>Sets the orientation of this parameter.<br/>&#8226; AAX_EParameterOrientation GetOrientation () const AAX_OVERRIDE<br/></p>
<p>Returns the orientation of this parameter.<br/>&#8226; void SetTaperDelegate (AAX_ITaperDelegateBase &amp;inTaperDelegate, bool inPreserveValue=true)<br/></p>
<p>AAX_OVERRIDE<br/>Sets the parameter's taper delegate.<br/></p>
<p><b>Display methods<br/></b></p>
<p>&#8226; void SetDisplayDelegate (AAX_IDisplayDelegateBase &amp;inDisplayDelegate) AAX_OVERRIDE<br/>Sets the parameter's display delegate.<br/></p>
<p>&#8226; bool GetValueString (AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/>Serializes the parameter value into a string.<br/></p>
<p>&#8226; bool GetValueString (int32_t iMaxNumChars, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/>Serializes the parameter value into a string, size hint included.<br/></p>
<p>&#8226; bool GetNormalizedValueFromBool (bool value, double &#8727;normalizedValue) const AAX_OVERRIDE<br/>Converts a bool to a normalized parameter value.<br/></p>
<p>&#8226; bool GetNormalizedValueFromInt32 (int32_t value, double &#8727;normalizedValue) const AAX_OVERRIDE<br/>Converts an integer to a normalized parameter value.<br/></p>
<p>&#8226; bool GetNormalizedValueFromFloat (float value, double &#8727;normalizedValue) const AAX_OVERRIDE<br/>Converts a float to a normalized parameter value.<br/></p>
<p>&#8226; bool GetNormalizedValueFromDouble (double value, double &#8727;normalizedValue) const AAX_OVERRIDE<br/>Converts a double to a normalized parameter value.<br/></p>
<p>&#8226; bool GetNormalizedValueFromString (const AAX_CString &amp;valueString, double &#8727;normalizedValue) const<br/>AAX_OVERRIDE<br/></p>
<p>Converts a given string to a normalized parameter value.<br/>&#8226; bool GetBoolFromNormalizedValue (double normalizedValue, bool &#8727;value) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized parameter value to a bool representing the corresponding real value.<br/>&#8226; bool GetInt32FromNormalizedValue (double normalizedValue, int32_t &#8727;value) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized parameter value to an integer representing the corresponding real value.<br/>&#8226; bool GetFloatFromNormalizedValue (double normalizedValue, float &#8727;value) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized parameter value to a float representing the corresponding real value.<br/>&#8226; bool GetDoubleFromNormalizedValue (double normalizedValue, double &#8727;value) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized parameter value to a double representing the corresponding real value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 533<br/></b></p>
<p>&#8226; bool GetStringFromNormalizedValue (double normalizedValue, AAX_CString &amp;valueString) const<br/>AAX_OVERRIDE<br/></p>
<p>Converts a normalized parameter value to a string representing the corresponding real value.<br/>&#8226; bool GetStringFromNormalizedValue (double normalizedValue, int32_t iMaxNumChars, AAX_CString<br/></p>
<p>&amp;valueString) const AAX_OVERRIDE<br/>Converts a normalized parameter value to a string representing the corresponding real, size hint included. value.<br/></p>
<p>&#8226; bool SetValueFromString (const AAX_CString &amp;newValueString) AAX_OVERRIDE<br/>Converts a string to a real parameter value and sets the parameter to this value.<br/></p>
<p><b>Automation methods<br/></b></p>
<p>&#8226; void SetAutomationDelegate (AAX_IAutomationDelegate &#8727;iAutomationDelegate) AAX_OVERRIDE<br/>Sets the automation delegate (if one is required)<br/></p>
<p>&#8226; bool Automatable () const AAX_OVERRIDE<br/>Returns true if the parameter is automatable, false if it is not.<br/></p>
<p>&#8226; void Touch () AAX_OVERRIDE<br/>Signals the automation system that a control has been touched.<br/></p>
<p>&#8226; void Release () AAX_OVERRIDE<br/>Signals the automation system that a control has been released.<br/></p>
<p><b>Typed accessors<br/></b></p>
<p>&#8226; bool GetValueAsBool (bool &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a bool.<br/></p>
<p>&#8226; bool GetValueAsInt32 (int32_t &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as an int32_t.<br/></p>
<p>&#8226; bool GetValueAsFloat (float &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a float.<br/></p>
<p>&#8226; bool GetValueAsDouble (double &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a double.<br/></p>
<p>&#8226; bool GetValueAsString (AAX_IString &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a string.<br/></p>
<p>&#8226; bool SetValueWithBool (bool value) AAX_OVERRIDE<br/>Sets the parameter's value as a bool.<br/></p>
<p>&#8226; bool SetValueWithInt32 (int32_t value) AAX_OVERRIDE<br/>Sets the parameter's value as an int32_t.<br/></p>
<p>&#8226; bool SetValueWithFloat (float value) AAX_OVERRIDE<br/>Sets the parameter's value as a float.<br/></p>
<p>&#8226; bool SetValueWithDouble (double value) AAX_OVERRIDE<br/>Sets the parameter's value as a double.<br/></p>
<p>&#8226; bool SetValueWithString (const AAX_IString &amp;value) AAX_OVERRIDE<br/>Sets the parameter's value as a string.<br/></p>
<p><b>Host interface methods<br/></b></p>
<p>&#8226; void UpdateNormalizedValue (double newNormalizedValue) AAX_OVERRIDE<br/>Sets the parameter's state given a normalized value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>534 Class Documentation<br/></b></p>
<p><b>Direct methods on AAX_CParameter<br/></b></p>
<p>These methods can be used to access the parameter's state and properties. These methods are specific to the<br/>concrete AAX_CParameter class and are not part of the AAX_IParameter interface.<br/></p>
<p>&#8226; AAX_CStringAbbreviations mNames<br/>&#8226; bool mAutomatable<br/>&#8226; uint32_t mNumSteps<br/>&#8226; AAX_EParameterType mControlType<br/>&#8226; AAX_EParameterOrientation mOrientation<br/>&#8226; AAX_ITaperDelegate&lt; T &gt; &#8727; mTaperDelegate<br/>&#8226; AAX_IDisplayDelegate&lt; T &gt; &#8727; mDisplayDelegate<br/>&#8226; AAX_IAutomationDelegate &#8727; mAutomationDelegate<br/>&#8226; bool mNeedNotify<br/>&#8226; AAX_CParameterValue&lt; T &gt; mValue<br/>&#8226; T mDefaultValue<br/>&#8226; void SetValue (T newValue)<br/></p>
<p>Initiates a host request to set the parameter's value.<br/>&#8226; T GetValue () const<br/></p>
<p>Returns the parameter's value.<br/>&#8226; void SetDefaultValue (T newDefaultValue)<br/></p>
<p>Set the parameter's default value.<br/>&#8226; T GetDefaultValue () const<br/></p>
<p>Returns the parameter's default value.<br/>&#8226; const AAX_ITaperDelegate&lt; T &gt; &#8727; TaperDelegate () const<br/></p>
<p>Returns a reference to the parameter's taper delegate.<br/>&#8226; const AAX_IDisplayDelegate&lt; T &gt; &#8727; DisplayDelegate () const<br/></p>
<p>Returns a reference to the parameter's display delegate.<br/></p>
<p><b>14.28.2 Member Enumeration Documentation<br/></b></p>
<p><b>14.28.2.1 Type<br/></b></p>
<p>template&lt;typename T &gt;<br/>enum AAX_CParameter::Type<br/></p>
<p><b>Enumerator<br/></b>eParameterTypeUndefined<br/></p>
<p>eParameterTypeBool<br/>eParameterTypeInt32<br/>eParameterTypeFloat<br/></p>
<p>eParameterTypeCustom<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 535<br/></b></p>
<p><b>14.28.2.2 Defaults<br/></b></p>
<p>template&lt;typename T &gt;<br/>enum AAX_CParameter::Defaults<br/></p>
<p><b>Enumerator<br/></b>eParameterDefaultNumStepsDiscrete<br/></p>
<p>eParameterDefaultNumStepsContinuous<br/></p>
<p><b>14.28.3 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.28.3.1 AAX_CParameter() [1/4]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameter&lt; T &gt;::AAX_CParameter (<br/></p>
<p>AAX_CParamID identifier,<br/>const AAX_IString &amp; name,<br/>T defaultValue,<br/>const AAX_ITaperDelegate&lt; T &gt; &amp; taperDelegate,<br/>const AAX_IDisplayDelegate&lt; T &gt; &amp; displayDelegate,<br/>bool automatable = false )<br/></p>
<p>Constructs an AAX_CParameter object using the specified taper and display delegates.<br/></p>
<p>The delegates are passed in by reference to prevent ambiguities of object ownership. For more information about<br/>identifer and name, please consult the base AAX_IParameter interface.<br/></p>
<p><b>Parameters<br/></b>in identifier Unique ID for the parameter, these can only be 31 characters long at most. (the fixed<br/></p>
<p>length is a requirement for some optimizations in the host)<br/>in name The parameter's unabbreviated display name<br/>in defaultValue The parameter's default value<br/>in taperDelegate A delegate representing the parameter's taper behavior<br/>in displayDelegate A delegate representing the parameter's display conversion behavior<br/>in automatable A flag to set whether the parameter will be visible to the host's automation system<br/></p>
<p><b>Note<br/></b>Upon construction, the state (value) of the parameter will be the default value, as established by the provided<br/>taperDelegate.<br/></p>
<p><b>Host Compatibility Notes </b>As of Pro Tools 10.2, DAE will check for a matching parameter NAME and not an ID<br/>when reading in automation data from a session saved with an AAX plug-ins RTAS/&#8592;&#8617;<br/>TDM counter part.<br/>As of Pro Tools 11.1, AAE will first try to match ID. If that fails, AAE will fall back to<br/>matching by Name.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>536 Class Documentation<br/></b></p>
<p>References AAX_CParameter&lt; T &gt;::SetToDefaultValue().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.28.3.2 AAX_CParameter() [2/4]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameter&lt; T &gt;::AAX_CParameter (<br/></p>
<p>const AAX_IString &amp; identifier,<br/>const AAX_IString &amp; name,<br/>T defaultValue,<br/>const AAX_ITaperDelegate&lt; T &gt; &amp; taperDelegate,<br/>const AAX_IDisplayDelegate&lt; T &gt; &amp; displayDelegate,<br/>bool automatable = false )<br/></p>
<p>Constructs an AAX_CParameter object using the specified taper and display delegates.<br/></p>
<p>This constructor uses an AAX_IString for the parameter identifier, which can be a more flexible solution for some<br/>plug-ins.<br/></p>
<p>References AAX_CParameter&lt; T &gt;::SetToDefaultValue().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.28.3.3 AAX_CParameter() [3/4]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameter&lt; T &gt;::AAX_CParameter (<br/></p>
<p>const AAX_IString &amp; identifier,<br/>const AAX_IString &amp; name,<br/>T defaultValue,<br/>bool automatable = false )<br/></p>
<p>Constructs an AAX_CParameter object with no delegates.<br/></p>
<p>Delegates may be set on this object after construction. Most parameter operations will not work until after delegages<br/>have been set.<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_CParameter::SetTaperDelegate()<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_CParameter::SetDisplayDelegate()<br/></p>
<p>References AAX_CParameter&lt; T &gt;::SetToDefaultValue().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 537<br/></b></p>
<p><b>14.28.3.4 AAX_CParameter() [4/4]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameter&lt; T &gt;::AAX_CParameter (<br/></p>
<p>const AAX_IString &amp; identifier,<br/>const AAX_IString &amp; name,<br/>bool automatable = false )<br/></p>
<p>Constructs an AAX_CParameter object with no delegates or default value.<br/></p>
<p>Delegates and default value may be set on this object after construction. Most parameter operations will not work<br/>until after delegages have been set.<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_CParameter::SetDefaultValue()<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_CParameter::SetTaperDelegate()<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_CParameter::SetDisplayDelegate()<br/></p>
<p>References AAX_CParameter&lt; T &gt;::SetToDefaultValue().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.28.3.5 </b>&#8764;<b>AAX_CParameter()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameter&lt; T &gt;::&#8764;AAX_CParameter<br/></p>
<p>Virtual destructor used to delete all locally allocated pointers.<br/></p>
<p><b>14.28.4 Member Function Documentation<br/></b></p>
<p><b>14.28.4.1 AAX_DEFAULT_MOVE_CTOR()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameter&lt; T &gt;::AAX_DEFAULT_MOVE_CTOR (<br/></p>
<p>AAX_CParameter&lt; T &gt; )<br/></p>
<p>Move constructor and move assignment operator are allowed<br/></p>
<p><b>14.28.4.2 AAX_DEFAULT_MOVE_OPER()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameter&lt; T &gt;::AAX_DEFAULT_MOVE_OPER (<br/></p>
<p>AAX_CParameter&lt; T &gt; )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>538 Class Documentation<br/></b></p>
<p><b>14.28.4.3 AAX_DELETE() [1/3]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameter&lt; T &gt;::AAX_DELETE (<br/></p>
<p>AAX_CParameter&lt; T &gt;() )<br/></p>
<p>Default constructor not allowed, except by possible wrappering classes.<br/></p>
<p><b>14.28.4.4 AAX_DELETE() [2/3]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameter&lt; T &gt;::AAX_DELETE (<br/></p>
<p>AAX_CParameter&lt; T &gt;(const AAX_CParameter&lt; T &gt; &amp;other) )<br/></p>
<p><b>14.28.4.5 AAX_DELETE() [3/3]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameter&lt; T &gt;::AAX_DELETE (<br/></p>
<p>AAX_CParameter&lt; T &gt; &amp; operator = (const AAX_CParameter&lt; T &gt; &amp;other) )<br/></p>
<p><b>14.28.4.6 CloneValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_IParameterValue &#8727; AAX_CParameter&lt; T &gt;::CloneValue [virtual]<br/></p>
<p>Clone the parameter's value to a new AAX_IParameterValue object.<br/>The returned object is independent from the AAX_IParameter. For example, changing the state of the returned<br/>object will not result in a change to the original AAX_IParameter.<br/>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.7 Identifier()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParamID AAX_CParameter&lt; T &gt;::Identifier [virtual]<br/></p>
<p>Returns the parameter's unique identifier.<br/>This unique ID is used by the Parameter Manager and by outside applications to uniquely identify and target control<br/>messages. This value may not be changed after the parameter has been constructed.<br/>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.8 SetName()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetName (<br/></p>
<p>const AAX_CString &amp; name ) [virtual]<br/></p>
<p>Sets the parameter's display name.<br/>This name is used for display only, it is not used for indexing or identifying the parameter This name may be changed<br/>after the parameter has been created, but display name changes may not be recognized by all AAX hosts.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 539<br/></b></p>
<p><b>Parameters<br/></b>in name Display name that will be assigned to the parameter<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.9 Name()<br/></b></p>
<p>template&lt;typename T &gt;<br/>const AAX_CString &amp; AAX_CParameter&lt; T &gt;::Name [virtual]<br/></p>
<p>Returns the parameter's display name.<br/></p>
<p><b>Note<br/></b>This method returns a const reference in order to prevent a string copy. Do not cast away the const to change<br/>this value.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.10 AddShortenedName()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::AddShortenedName (<br/></p>
<p>const AAX_CString &amp; name ) [virtual]<br/></p>
<p>Sets the parameter's shortened display name.<br/></p>
<p>This name is used for display only, it is not used for indexing or identifying the parameter These names show<br/>up when the host asks for shorter length parameter names for display on Control Surfaces or other string length<br/>constrained situations.<br/></p>
<p><b>Parameters<br/></b>in name Shortened display names that will be assigned to the parameter<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.11 ShortenedName()<br/></b></p>
<p>template&lt;typename T &gt;<br/>const AAX_CString &amp; AAX_CParameter&lt; T &gt;::ShortenedName (<br/></p>
<p>int32_t iNumCharacters ) const [virtual]<br/></p>
<p>Returns the parameter's shortened display name.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>540 Class Documentation<br/></b></p>
<p><b>Note<br/></b>This method returns a const reference in order to prevent a string copy. Do not cast away the const to change<br/>this value.<br/></p>
<p>Implements AAX_IParameter.<br/>References AAX_CString::Get().<br/>Here is the call graph for this function:<br/></p>
<p><b>14.28.4.12 ClearShortenedNames()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::ClearShortenedNames [virtual]<br/></p>
<p>Clears the internal list of shortened display names.<br/>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.13 SetNormalizedDefaultValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetNormalizedDefaultValue (<br/></p>
<p>double normalizedDefault ) [virtual]<br/></p>
<p>Sets the parameter's default value using its normalized representation.<br/>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.14 GetNormalizedDefaultValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>double AAX_CParameter&lt; T &gt;::GetNormalizedDefaultValue [virtual]<br/></p>
<p>Returns the normalized representation of the parameter's real default value.<br/>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.15 SetToDefaultValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetToDefaultValue [virtual]<br/></p>
<p>Restores the state of this parameter to its default value.<br/>Implements AAX_IParameter.<br/>Referenced by AAX_CParameter&lt; T &gt;::AAX_CParameter().<br/>Here is the caller graph for this function:<br/></p>
<p><b>14.28.4.16 SetNormalizedValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetNormalizedValue (<br/></p>
<p>double newNormalizedValue ) [virtual]<br/></p>
<p>Sets a parameter value using it's normalized representation.<br/>For more information regarding normalized values, see Parameter Manager<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 541<br/></b></p>
<p><b>Parameters<br/></b>in newNormalizedValue New value (normalized) to which the parameter will be set<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.17 GetNormalizedValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>double AAX_CParameter&lt; T &gt;::GetNormalizedValue [virtual]<br/></p>
<p>Returns the normalized representation of the parameter's current real value.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.18 SetNumberOfSteps()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetNumberOfSteps (<br/></p>
<p>uint32_t numSteps ) [virtual]<br/></p>
<p>Sets the number of discrete steps for this parameter.<br/></p>
<p>Stepped parameter values are useful for discrete parameters and for &quot;jumping&quot; events such as mouse wheels, page<br/>up/down, etc. The parameter's step size is used to specify the coarseness of those changes.<br/></p>
<p><b>Note<br/></b>numSteps MUST be greater than zero. All other values may be considered an error by the host.<br/></p>
<p><b>Parameters<br/></b>in numSteps The number of steps that the parameter will use<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References AAX_ASSERT.<br/></p>
<p><b>14.28.4.19 GetNumberOfSteps()<br/></b></p>
<p>template&lt;typename T &gt;<br/>uint32_t AAX_CParameter&lt; T &gt;::GetNumberOfSteps [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>542 Class Documentation<br/></b></p>
<p>Returns the number of discrete steps used by the parameter.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.20 GetStepValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>uint32_t AAX_CParameter&lt; T &gt;::GetStepValue [virtual]<br/></p>
<p>Returns the current step for the current value of the parameter.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.21 GetNormalizedValueFromStep()<br/></b></p>
<p>template&lt;typename T &gt;<br/>double AAX_CParameter&lt; T &gt;::GetNormalizedValueFromStep (<br/></p>
<p>uint32_t iStep ) const [virtual]<br/></p>
<p>Returns the normalized value for a given step.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.22 GetStepValueFromNormalizedValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>uint32_t AAX_CParameter&lt; T &gt;::GetStepValueFromNormalizedValue (<br/></p>
<p>double normalizedValue ) const [virtual]<br/></p>
<p>Returns the step value for a normalized value of the parameter.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 543<br/></b></p>
<p><b>14.28.4.23 SetStepValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetStepValue (<br/></p>
<p>uint32_t iStep ) [virtual]<br/></p>
<p>Returns the current step for the current value of the parameter.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.24 SetType()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetType (<br/></p>
<p>AAX_EParameterType iControlType ) [virtual]<br/></p>
<p>Sets the type of this parameter.<br/></p>
<p>See GetType for use cases<br/></p>
<p><b>Parameters<br/></b>in iControlType The parameter's new type as an AAX_EParameterType<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.25 GetType()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_EParameterType AAX_CParameter&lt; T &gt;::GetType [virtual]<br/></p>
<p>Returns the type of this parameter as an AAX_EParameterType.<br/></p>
<p><b>Todo </b>Document use cases for control type<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.26 SetOrientation()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetOrientation (<br/></p>
<p>AAX_EParameterOrientation iOrientation ) [virtual]<br/></p>
<p>Sets the orientation of this parameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>544 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iOrientation The parameter's new orientation<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.27 GetOrientation()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_EParameterOrientation AAX_CParameter&lt; T &gt;::GetOrientation [virtual]<br/></p>
<p>Returns the orientation of this parameter.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.28 SetTaperDelegate()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetTaperDelegate (<br/></p>
<p>AAX_ITaperDelegateBase &amp; inTaperDelegate,<br/>bool inPreserveValue = true ) [virtual]<br/></p>
<p>Sets the parameter's taper delegate.<br/></p>
<p><b>Parameters<br/></b>in inTaperDelegate A reference to the parameter's new taper delegate<br/>in inPreserveValue<br/></p>
<p><b>Todo </b>Document this parameter<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References AAX_ITaperDelegate&lt; T &gt;::Clone().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.28.4.29 SetDisplayDelegate()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetDisplayDelegate (<br/></p>
<p>AAX_IDisplayDelegateBase &amp; inDisplayDelegate ) [virtual]<br/></p>
<p>Sets the parameter's display delegate.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 545<br/></b></p>
<p><b>Parameters<br/></b>in inDisplayDelegate A reference to the parameter's new display delegate<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References AAX_IDisplayDelegate&lt; T &gt;::Clone().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.28.4.30 GetValueString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetValueString (<br/></p>
<p>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Serializes the parameter value into a string.<br/></p>
<p><b>Parameters<br/></b>out valueString A string representing the parameter's real value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.31 GetValueString() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetValueString (<br/></p>
<p>int32_t iMaxNumChars,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Serializes the parameter value into a string, size hint included.<br/></p>
<p><b>Parameters<br/></b>in iMaxNumChars A size hint for the size of the string being requested. Useful for control surfaces and<br/></p>
<p>other limited area text fields. (make sure that size of desired string also has room<br/>for null termination)<br/></p>
<p>out valueString A string representing the parameter's real value<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>546 Class Documentation<br/></b></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.32 GetNormalizedValueFromBool() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetNormalizedValueFromBool (<br/></p>
<p>bool value,<br/>double &#8727; normalizedValue ) const [virtual]<br/></p>
<p>Converts a bool to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.33 GetNormalizedValueFromInt32() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetNormalizedValueFromInt32 (<br/></p>
<p>int32_t value,<br/>double &#8727; normalizedValue ) const [virtual]<br/></p>
<p>Converts an integer to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 547<br/></b></p>
<p><b>Return values<br/></b>false The value conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.34 GetNormalizedValueFromFloat() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetNormalizedValueFromFloat (<br/></p>
<p>float value,<br/>double &#8727; normalizedValue ) const [virtual]<br/></p>
<p>Converts a float to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.35 GetNormalizedValueFromDouble() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetNormalizedValueFromDouble (<br/></p>
<p>double value,<br/>double &#8727; normalizedValue ) const [virtual]<br/></p>
<p>Converts a double to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>548 Class Documentation<br/></b></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.36 GetNormalizedValueFromString()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetNormalizedValueFromString (<br/></p>
<p>const AAX_CString &amp; valueString,<br/>double &#8727; normalizedValue ) const [virtual]<br/></p>
<p>Converts a given string to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString A string representing a possible real value for the parameter<br/>out normalizedValue The normalized parameter value associated with valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.37 GetBoolFromNormalizedValue() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetBoolFromNormalizedValue (<br/></p>
<p>double normalizedValue,<br/>bool &#8727; value ) const [virtual]<br/></p>
<p>Converts a normalized parameter value to a bool representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to bool was successful<br/></p>
<p>false The conversion to bool was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 549<br/></b></p>
<p><b>14.28.4.38 GetInt32FromNormalizedValue() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetInt32FromNormalizedValue (<br/></p>
<p>double normalizedValue,<br/>int32_t &#8727; value ) const [virtual]<br/></p>
<p>Converts a normalized parameter value to an integer representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to int32_t was successful<br/></p>
<p>false The conversion to int32_t was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.39 GetFloatFromNormalizedValue() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetFloatFromNormalizedValue (<br/></p>
<p>double normalizedValue,<br/>float &#8727; value ) const [virtual]<br/></p>
<p>Converts a normalized parameter value to a float representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to float was successful<br/></p>
<p>false The conversion to float was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.40 GetDoubleFromNormalizedValue() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetDoubleFromNormalizedValue (<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>550 Class Documentation<br/></b></p>
<p>double normalizedValue,<br/>double &#8727; value ) const [virtual]<br/></p>
<p>Converts a normalized parameter value to a double representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to double was successful<br/></p>
<p>false The conversion to double was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.41 GetStringFromNormalizedValue() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetStringFromNormalizedValue (<br/></p>
<p>double normalizedValue,<br/>AAX_CString &amp; valueString ) const [virtual]<br/></p>
<p>Converts a normalized parameter value to a string representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue A normalized parameter value<br/>out valueString A string representing the parameter value associated with normalizedValue<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.42 GetStringFromNormalizedValue() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetStringFromNormalizedValue (<br/></p>
<p>double normalizedValue,<br/>int32_t iMaxNumChars,<br/>AAX_CString &amp; valueString ) const [virtual]<br/></p>
<p>Converts a normalized parameter value to a string representing the corresponding real, size hint included. value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 551<br/></b></p>
<p><b>Parameters<br/></b>in normalizedValue A normalized parameter value<br/>in iMaxNumChars A size hint for the size of the string being requested. Useful for control surfaces<br/></p>
<p>and other limited area text fields. (make sure that size of desired string also has<br/>room for null termination)<br/></p>
<p>out valueString A string representing the parameter value associated with normalizedValue<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.43 SetValueFromString()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::SetValueFromString (<br/></p>
<p>const AAX_CString &amp; newValueString ) [virtual]<br/></p>
<p>Converts a string to a real parameter value and sets the parameter to this value.<br/></p>
<p><b>Parameters<br/></b>in newValueString A string representing the parameter's new real value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.44 SetAutomationDelegate()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetAutomationDelegate (<br/></p>
<p>AAX_IAutomationDelegate &#8727; iAutomationDelegate ) [virtual]<br/></p>
<p>Sets the automation delegate (if one is required)<br/></p>
<p><b>Parameters<br/></b>in iAutomationDelegate A reference to the parameter manager's automation delegate interface<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>552 Class Documentation<br/></b></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References AAX_IAutomationDelegate::RegisterParameter().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.28.4.45 Automatable()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::Automatable [virtual]<br/></p>
<p>Returns true if the parameter is automatable, false if it is not.<br/></p>
<p><b>Note<br/></b>Subclasses that return true in this method must support host-based automation.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.46 Touch()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::Touch [virtual]<br/></p>
<p>Signals the automation system that a control has been touched.<br/></p>
<p>Call this method in response to GUI events that begin editing, such as a mouse down. After this method has been<br/>called you are free to call SetNormalizedValue() as much as you need, e.g. in order to respond to subsequent<br/>mouse moved events. Call Release() to free the parameter for updates from other controls.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.47 Release()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::Release (<br/></p>
<p>void ) [virtual]<br/></p>
<p>Signals the automation system that a control has been released.<br/></p>
<p>Call this method in response to GUI events that complete editing, such as a mouse up. Once this method has been<br/>called you should not call SetNormalizedValue() again until after the next call to Touch().<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.48 GetValueAsBool()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetValueAsBool (<br/></p>
<p>bool &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a bool.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 553<br/></b></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to bool was successful<br/></p>
<p>false The conversion to bool was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.49 GetValueAsInt32()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetValueAsInt32 (<br/></p>
<p>int32_t &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as an int32_t.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to int32_t was successful<br/></p>
<p>false The conversion to int32_t was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.50 GetValueAsFloat()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetValueAsFloat (<br/></p>
<p>float &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a float.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>554 Class Documentation<br/></b></p>
<p><b>Return values<br/></b>true The conversion to float was successful<br/></p>
<p>false The conversion to float was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.51 GetValueAsDouble()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetValueAsDouble (<br/></p>
<p>double &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a double.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to double was successful<br/></p>
<p>false The conversion to double was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.52 GetValueAsString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::GetValueAsString (<br/></p>
<p>AAX_IString &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a string.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to string was successful<br/></p>
<p>false The conversion to string was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 555<br/></b></p>
<p><b>14.28.4.53 SetValueWithBool() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::SetValueWithBool (<br/></p>
<p>bool value ) [virtual]<br/></p>
<p>Sets the parameter's value as a bool.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from bool was successful<br/></p>
<p>false The conversion from bool was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.54 SetValueWithInt32() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::SetValueWithInt32 (<br/></p>
<p>int32_t value ) [virtual]<br/></p>
<p>Sets the parameter's value as an int32_t.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from int32_t was successful<br/></p>
<p>false The conversion from int32_t was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.55 SetValueWithFloat() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::SetValueWithFloat (<br/></p>
<p>float value ) [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>556 Class Documentation<br/></b></p>
<p>Sets the parameter's value as a float.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from float was successful<br/></p>
<p>false The conversion from float was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.56 SetValueWithDouble() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::SetValueWithDouble (<br/></p>
<p>double value ) [virtual]<br/></p>
<p>Sets the parameter's value as a double.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from double was successful<br/></p>
<p>false The conversion from double was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.57 SetValueWithString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::SetValueWithString (<br/></p>
<p>const AAX_IString &amp; value ) [virtual]<br/></p>
<p>Sets the parameter's value as a string.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 557<br/></b></p>
<p><b>Return values<br/></b>true The conversion from string was successful<br/></p>
<p>false The conversion from string was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.58 UpdateNormalizedValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::UpdateNormalizedValue (<br/></p>
<p>double newNormalizedValue ) [virtual]<br/></p>
<p>Sets the parameter's state given a normalized value.<br/></p>
<p>This is the second half of the parameter setting operation that is initiated with a call to SetValue(). Parameters<br/>should not be set directly using this method; instead, use SetValue().<br/></p>
<p><b>Parameters<br/></b>in newNormalizedValue Normalized value that will be used to set the parameter's new state<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.59 SetValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetValue (<br/></p>
<p>T newValue )<br/></p>
<p>Initiates a host request to set the parameter's value.<br/></p>
<p>This method normalizes the provided value and sends a request for the value change to the AAX host. The host<br/>responds with a call to AAX_IParameter::UpdateNormalizedValue() to complete the set operation.<br/></p>
<p><b>Parameters<br/></b>in newValue The parameter's new value<br/></p>
<p><b>14.28.4.60 GetValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CParameter&lt; T &gt;::GetValue<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>558 Class Documentation<br/></b></p>
<p>Returns the parameter's value.<br/></p>
<p>This is the parameter's real, logical value and should not be normalized<br/></p>
<p><b>14.28.4.61 SetDefaultValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameter&lt; T &gt;::SetDefaultValue (<br/></p>
<p>T newDefaultValue )<br/></p>
<p>Set the parameter's default value.<br/></p>
<p>This is the parameter's real, logical value and should not be normalized<br/></p>
<p><b>Parameters<br/></b>in newDefaultValue The parameter's new default value<br/></p>
<p><b>14.28.4.62 GetDefaultValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CParameter&lt; T &gt;::GetDefaultValue<br/></p>
<p>Returns the parameter's default value.<br/></p>
<p>This is the parameter's real, logical value and should not be normalized<br/></p>
<p><b>14.28.4.63 TaperDelegate()<br/></b></p>
<p>template&lt;typename T &gt;<br/>const AAX_ITaperDelegate&lt; T &gt; &#8727; AAX_CParameter&lt; T &gt;::TaperDelegate<br/></p>
<p>Returns a reference to the parameter's taper delegate.<br/></p>
<p><b>14.28.4.64 DisplayDelegate()<br/></b></p>
<p>template&lt;typename T &gt;<br/>const AAX_IDisplayDelegate&lt; T &gt; &#8727; AAX_CParameter&lt; T &gt;::DisplayDelegate<br/></p>
<p>Returns a reference to the parameter's display delegate.<br/></p>
<p><b>14.28.4.65 GetValueAsString() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; AAX_CString &gt;::GetValueAsString (<br/>AAX_IString &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a string.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 559<br/></b></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to string was successful<br/></p>
<p>false The conversion to string was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.66 SetValueWithBool() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; bool &gt;::SetValueWithBool (<br/>bool value ) [virtual]<br/></p>
<p>Sets the parameter's value as a bool.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from bool was successful<br/></p>
<p>false The conversion from bool was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.67 SetValueWithInt32() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; int32_t &gt;::SetValueWithInt32 (<br/>int32_t value ) [virtual]<br/></p>
<p>Sets the parameter's value as an int32_t.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from int32_t was successful<br/></p>
<p>false The conversion from int32_t was unsuccessful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>560 Class Documentation<br/></b></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.68 SetValueWithFloat() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; float &gt;::SetValueWithFloat (<br/>float value ) [virtual]<br/></p>
<p>Sets the parameter's value as a float.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from float was successful<br/></p>
<p>false The conversion from float was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.69 SetValueWithDouble() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; double &gt;::SetValueWithDouble (<br/>double value ) [virtual]<br/></p>
<p>Sets the parameter's value as a double.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from double was successful<br/></p>
<p>false The conversion from double was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.70 SetValueWithString() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; AAX_CString &gt;::SetValueWithString (<br/>const AAX_IString &amp; value ) [virtual]<br/></p>
<p>Sets the parameter's value as a string.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 561<br/></b></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from string was successful<br/></p>
<p>false The conversion from string was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.71 GetNormalizedValueFromBool() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; bool &gt;::GetNormalizedValueFromBool (<br/>bool value,<br/>double &#8727; normalizedValue ) const [virtual]<br/></p>
<p>Converts a bool to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.72 GetNormalizedValueFromInt32() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; int32_t &gt;::GetNormalizedValueFromInt32 (<br/>int32_t value,<br/>double &#8727; normalizedValue ) const [virtual]<br/></p>
<p>Converts an integer to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>562 Class Documentation<br/></b></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.73 GetNormalizedValueFromFloat() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; float &gt;::GetNormalizedValueFromFloat (<br/>float value,<br/>double &#8727; normalizedValue ) const [virtual]<br/></p>
<p>Converts a float to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.74 GetNormalizedValueFromDouble() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; double &gt;::GetNormalizedValueFromDouble (<br/>double value,<br/>double &#8727; normalizedValue ) const [virtual]<br/></p>
<p>Converts a double to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 563<br/></b></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.75 GetBoolFromNormalizedValue() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; bool &gt;::GetBoolFromNormalizedValue (<br/>double normalizedValue,<br/>bool &#8727; value ) const [virtual]<br/></p>
<p>Converts a normalized parameter value to a bool representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to bool was successful<br/></p>
<p>false The conversion to bool was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.76 GetInt32FromNormalizedValue() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; int32_t &gt;::GetInt32FromNormalizedValue (<br/>double normalizedValue,<br/>int32_t &#8727; value ) const [virtual]<br/></p>
<p>Converts a normalized parameter value to an integer representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to int32_t was successful<br/></p>
<p>false The conversion to int32_t was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>564 Class Documentation<br/></b></p>
<p><b>14.28.4.77 GetFloatFromNormalizedValue() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; float &gt;::GetFloatFromNormalizedValue (<br/>double normalizedValue,<br/>float &#8727; value ) const [virtual]<br/></p>
<p>Converts a normalized parameter value to a float representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to float was successful<br/></p>
<p>false The conversion to float was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.4.78 GetDoubleFromNormalizedValue() [2/2]<br/></b></p>
<p>bool AAX_CParameter&lt; double &gt;::GetDoubleFromNormalizedValue (<br/>double normalizedValue,<br/>double &#8727; value ) const [virtual]<br/></p>
<p>Converts a normalized parameter value to a double representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to double was successful<br/></p>
<p>false The conversion to double was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.28.5 Member Data Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.28 AAX_CParameter</b>&lt; <b>T </b>&gt; <b>Class Template Reference 565<br/></b></p>
<p><b>14.28.5.1 mNames<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CStringAbbreviations AAX_CParameter&lt; T &gt;::mNames [protected]<br/></p>
<p><b>14.28.5.2 mAutomatable<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::mAutomatable [protected]<br/></p>
<p><b>14.28.5.3 mNumSteps<br/></b></p>
<p>template&lt;typename T &gt;<br/>uint32_t AAX_CParameter&lt; T &gt;::mNumSteps [protected]<br/></p>
<p><b>14.28.5.4 mControlType<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_EParameterType AAX_CParameter&lt; T &gt;::mControlType [protected]<br/></p>
<p><b>14.28.5.5 mOrientation<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_EParameterOrientation AAX_CParameter&lt; T &gt;::mOrientation [protected]<br/></p>
<p><b>14.28.5.6 mTaperDelegate<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_ITaperDelegate&lt;T&gt;&#8727; AAX_CParameter&lt; T &gt;::mTaperDelegate [protected]<br/></p>
<p><b>14.28.5.7 mDisplayDelegate<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_IDisplayDelegate&lt;T&gt;&#8727; AAX_CParameter&lt; T &gt;::mDisplayDelegate [protected]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>566 Class Documentation<br/></b></p>
<p><b>14.28.5.8 mAutomationDelegate<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_IAutomationDelegate&#8727; AAX_CParameter&lt; T &gt;::mAutomationDelegate [protected]<br/></p>
<p><b>14.28.5.9 mNeedNotify<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameter&lt; T &gt;::mNeedNotify [protected]<br/></p>
<p><b>14.28.5.10 mValue<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameterValue&lt;T&gt; AAX_CParameter&lt; T &gt;::mValue [protected]<br/></p>
<p><b>14.28.5.11 mDefaultValue<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CParameter&lt; T &gt;::mDefaultValue [protected]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CParameter.h<br/></p>
<p><b>14.29 AAX_CParameterManager Class Reference<br/></b></p>
<p>#include &lt;AAX_CParameterManager.h&gt;<br/></p>
<p>Collaboration diagram for AAX_CParameterManager:<br/></p>
<p><b>14.29.1 Description<br/></b></p>
<p>A container object for plug-in parameters.<br/></p>
<p>This implementation uses a STL vector to store a plug-in's set of parameters. This class contains a real implemen-<br/>tation of the Parameter Manager (as opposed to a proxy.)<br/></p>
<p>For more information, see Parameter Manager.<br/></p>
<p><b>Todo </b>Should the Parameter Manager return error codes?<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.29 AAX_CParameterManager Class Reference 567<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CParameterManager ()<br/>&#8226; &#8764;AAX_CParameterManager ()<br/>&#8226; void Initialize (AAX_IAutomationDelegate &#8727;iAutomationDelegateUnknown)<br/></p>
<p>Initialize the parameter manager.<br/>&#8226; int32_t NumParameters () const<br/></p>
<p>Returns the number of parameters in this instance of the parameter manager.<br/>&#8226; void RemoveParameterByID (AAX_CParamID identifier)<br/></p>
<p>Removes a parameter from the manager.<br/>&#8226; void RemoveAllParameters ()<br/></p>
<p>Removes all parameters from the manager.<br/>&#8226; AAX_IParameter &#8727; GetParameterByID (AAX_CParamID identifier)<br/></p>
<p>Given a parameter ID, retrieves a reference to the requested parameter.<br/>&#8226; const AAX_IParameter &#8727; GetParameterByID (AAX_CParamID identifier) const<br/></p>
<p>Given a parameter ID, retrieves a const reference to the requested parameter.<br/>&#8226; AAX_IParameter &#8727; GetParameterByName (const char &#8727;name)<br/></p>
<p>Given a parameter name, retrieves a reference to the requested parameter.<br/>&#8226; const AAX_IParameter &#8727; GetParameterByName (const char &#8727;name) const<br/></p>
<p>Given a parameter name, retrieves a const reference to the requested parameter.<br/>&#8226; AAX_IParameter &#8727; GetParameter (int32_t index)<br/></p>
<p>Given a parameter index, retrieves a reference to the requested parameter.<br/>&#8226; const AAX_IParameter &#8727; GetParameter (int32_t index) const<br/></p>
<p>Given a parameter index, retrieves a const reference to the requested parameter.<br/>&#8226; int32_t GetParameterIndex (AAX_CParamID identifier) const<br/>&#8226; void AddParameter (AAX_IParameter &#8727;param)<br/>&#8226; void RemoveParameter (AAX_IParameter &#8727;param)<br/></p>
<p><b>Protected Attributes<br/></b></p>
<p>&#8226; AAX_IAutomationDelegate &#8727; mAutomationDelegate<br/>&#8226; std::vector&lt; AAX_IParameter &#8727; &gt; mParameters<br/>&#8226; std::map&lt; std::string, AAX_IParameter &#8727; &gt; mParametersMap<br/></p>
<p><b>14.29.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.29.2.1 AAX_CParameterManager()<br/></b></p>
<p>AAX_CParameterManager::AAX_CParameterManager ( )<br/></p>
<p><b>14.29.2.2 </b>&#8764;<b>AAX_CParameterManager()<br/></b></p>
<p>AAX_CParameterManager::&#8764;AAX_CParameterManager ( )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>568 Class Documentation<br/></b></p>
<p><b>14.29.3 Member Function Documentation<br/></b></p>
<p><b>14.29.3.1 Initialize()<br/></b></p>
<p>void AAX_CParameterManager::Initialize (<br/>AAX_IAutomationDelegate &#8727; iAutomationDelegateUnknown )<br/></p>
<p>Initialize the parameter manager.<br/></p>
<p>Called when plug-in instance is first instantiated. This method will initialize the plug-in's automation delegate, among<br/>other set-up tasks.<br/></p>
<p><b>Parameters<br/></b>in iAutomationDelegateUnknown A reference to the plug-in's AAX_IAutomationDelegate interface<br/></p>
<p><b>14.29.3.2 NumParameters()<br/></b></p>
<p>int32_t AAX_CParameterManager::NumParameters ( ) const<br/></p>
<p>Returns the number of parameters in this instance of the parameter manager.<br/></p>
<p><b>14.29.3.3 RemoveParameterByID()<br/></b></p>
<p>void AAX_CParameterManager::RemoveParameterByID (<br/>AAX_CParamID identifier )<br/></p>
<p>Removes a parameter from the manager.<br/></p>
<p><b>Todo </b>Should this method return success/failure code?<br/></p>
<p><b>Parameters<br/></b>in identifier ID of the parameter that will be removed<br/></p>
<p><b>14.29.3.4 RemoveAllParameters()<br/></b></p>
<p>void AAX_CParameterManager::RemoveAllParameters ( )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.29 AAX_CParameterManager Class Reference 569<br/></b></p>
<p>Removes all parameters from the manager.<br/></p>
<p><b>Todo </b>Should this method return success/failure code?<br/></p>
<p><b>14.29.3.5 GetParameterByID() [1/2]<br/></b></p>
<p>AAX_IParameter&#8727; AAX_CParameterManager::GetParameterByID (<br/>AAX_CParamID identifier )<br/></p>
<p>Given a parameter ID, retrieves a reference to the requested parameter.<br/></p>
<p><b>Parameters<br/></b>in identifier ID of the parameter that will be retrieved<br/></p>
<p>Referenced by AAX_CMonolithicParameters::UpdateParameterNormalizedValue().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.29.3.6 GetParameterByID() [2/2]<br/></b></p>
<p>const AAX_IParameter&#8727; AAX_CParameterManager::GetParameterByID (<br/>AAX_CParamID identifier ) const<br/></p>
<p>Given a parameter ID, retrieves a const reference to the requested parameter.<br/></p>
<p><b>Parameters<br/></b>in identifier ID of the parameter that will be retrieved<br/></p>
<p><b>14.29.3.7 GetParameterByName() [1/2]<br/></b></p>
<p>AAX_IParameter&#8727; AAX_CParameterManager::GetParameterByName (<br/>const char &#8727; name )<br/></p>
<p>Given a parameter name, retrieves a reference to the requested parameter.<br/></p>
<p><b>Note<br/></b>Parameter names may be ambiguous<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>570 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in name Name of the parameter that will be retrieved<br/></p>
<p><b>14.29.3.8 GetParameterByName() [2/2]<br/></b></p>
<p>const AAX_IParameter&#8727; AAX_CParameterManager::GetParameterByName (<br/>const char &#8727; name ) const<br/></p>
<p>Given a parameter name, retrieves a const reference to the requested parameter.<br/></p>
<p><b>Note<br/></b>Parameter names may be ambiguous<br/></p>
<p><b>Parameters<br/></b>in name ID of the parameter that will be retrieved<br/></p>
<p><b>14.29.3.9 GetParameter() [1/2]<br/></b></p>
<p>AAX_IParameter&#8727; AAX_CParameterManager::GetParameter (<br/>int32_t index )<br/></p>
<p>Given a parameter index, retrieves a reference to the requested parameter.<br/></p>
<p>Parameter indices are incremented in the order that parameters are added to the manager. See AddParameter().<br/></p>
<p><b>Parameters<br/></b>in index Index of the parameter that will be retrieved<br/></p>
<p><b>14.29.3.10 GetParameter() [2/2]<br/></b></p>
<p>const AAX_IParameter&#8727; AAX_CParameterManager::GetParameter (<br/>int32_t index ) const<br/></p>
<p>Given a parameter index, retrieves a const reference to the requested parameter.<br/></p>
<p>Parameter indices are incremented in the order that parameters are added to the manager. See AddParameter().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.29 AAX_CParameterManager Class Reference 571<br/></b></p>
<p><b>Parameters<br/></b>in index Index of the parameter that will be retrieved<br/></p>
<p><b>14.29.3.11 GetParameterIndex()<br/></b></p>
<p>int32_t AAX_CParameterManager::GetParameterIndex (<br/>AAX_CParamID identifier ) const<br/></p>
<p>Given a parameter ID, retrieves the index for the specified parameter<br/></p>
<p><b>Parameters<br/></b>in identifier ID of the parameter that will be retrieved<br/></p>
<p><b>14.29.3.12 AddParameter()<br/></b></p>
<p>void AAX_CParameterManager::AddParameter (<br/>AAX_IParameter &#8727; param )<br/></p>
<p>Adds a parameter to the manager<br/></p>
<p><b>Todo </b>Should this method return success/failure code?<br/></p>
<p><b>Parameters<br/></b>in param Reference to the parameter that will be added<br/></p>
<p><b>14.29.3.13 RemoveParameter()<br/></b></p>
<p>void AAX_CParameterManager::RemoveParameter (<br/>AAX_IParameter &#8727; param )<br/></p>
<p>Removes a parameter to the manager<br/></p>
<p><b>Todo </b>Should this method return success/failure code?<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>572 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in param Reference to the parameter that will be removed<br/></p>
<p><b>14.29.4 Member Data Documentation<br/></b></p>
<p><b>14.29.4.1 mAutomationDelegate<br/></b></p>
<p>AAX_IAutomationDelegate&#8727; AAX_CParameterManager::mAutomationDelegate [protected]<br/></p>
<p><b>14.29.4.2 mParameters<br/></b></p>
<p>std::vector&lt;AAX_IParameter&#8727;&gt; AAX_CParameterManager::mParameters [protected]<br/></p>
<p><b>14.29.4.3 mParametersMap<br/></b></p>
<p>std::map&lt;std::string, AAX_IParameter&#8727;&gt; AAX_CParameterManager::mParametersMap [protected]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CParameterManager.h<br/></p>
<p><b>14.30 AAX_CParameterValue</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CParameter.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CParameterValue&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CParameterValue&lt; T &gt;:<br/></p>
<p><b>14.30.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CParameterValue</b>&lt; <b>T </b>&gt;<br/></p>
<p>Concrete implementation of AAX_IParameterValue.<br/></p>
<p>Used by AAX_CParameter<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.30 AAX_CParameterValue</b>&lt; <b>T </b>&gt; <b>Class Template Reference 573<br/></b></p>
<p><b>Public Types<br/></b></p>
<p>&#8226; enum Defaults {<br/>eParameterDefaultMaxIdentifierSize = kAAX_ParameterIdentifierMaxSize ,<br/>eParameterDefaultMaxIdentifierLength = eParameterDefaultMaxIdentifierSize - 1 }<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_DEFAULT_DTOR_OVERRIDE (AAX_CParameterValue)<br/>&#8226; AAX_DEFAULT_MOVE_CTOR (AAX_CParameterValue)<br/>&#8226; AAX_DEFAULT_MOVE_OPER (AAX_CParameterValue)<br/>&#8226; AAX_DELETE (AAX_CParameterValue &amp;operator=(const AAX_CParameterValue &amp;))<br/>&#8226; AAX_CParameterValue (AAX_CParamID identifier)<br/></p>
<p>Constructs an AAX_CParameterValue object.<br/>&#8226; AAX_CParameterValue (AAX_CParamID identifier, const T &amp;value)<br/></p>
<p>Constructs an AAX_CParameterValue object with a defined initial state.<br/>&#8226; AAX_CParameterValue (const AAX_CParameterValue&lt; T &gt; &amp;other)<br/></p>
<p>Copy constructor for AAX_CParameterValue.<br/>&#8226; const T &amp; Get () const<br/></p>
<p>Direct access to the template instance's value.<br/>&#8226; void Set (const T &amp;inValue)<br/></p>
<p>Direct access to the template instance's value.<br/>&#8226; AAX_IParameterValue &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Clones the parameter object.<br/>&#8226; AAX_CParamID Identifier () const AAX_OVERRIDE<br/></p>
<p>Returns the parameter's unique identifier.<br/>&#8226; bool GetValueAsBool (bool &#8727;value) const<br/></p>
<p>Retrieves the parameter's value as a bool.<br/>&#8226; bool GetValueAsInt32 (int32_t &#8727;value) const<br/></p>
<p>Retrieves the parameter's value as an int32_t.<br/>&#8226; bool GetValueAsFloat (float &#8727;value) const<br/></p>
<p>Retrieves the parameter's value as a float.<br/>&#8226; bool GetValueAsDouble (double &#8727;value) const<br/></p>
<p>Retrieves the parameter's value as a double.<br/>&#8226; bool GetValueAsString (AAX_IString &#8727;value) const<br/></p>
<p>Retrieves the parameter's value as a string.<br/></p>
<p><b>Typed accessors<br/></b></p>
<p>&#8226; bool GetValueAsBool (bool &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a bool.<br/></p>
<p>&#8226; bool GetValueAsInt32 (int32_t &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as an int32_t.<br/></p>
<p>&#8226; bool GetValueAsFloat (float &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a float.<br/></p>
<p>&#8226; bool GetValueAsDouble (double &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a double.<br/></p>
<p>&#8226; bool GetValueAsString (AAX_IString &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a string.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>574 Class Documentation<br/></b></p>
<p><b>14.30.2 Member Enumeration Documentation<br/></b></p>
<p><b>14.30.2.1 Defaults<br/></b></p>
<p>template&lt;typename T &gt;<br/>enum AAX_CParameterValue::Defaults<br/></p>
<p><b>Enumerator<br/></b>eParameterDefaultMaxIdentifierSize<br/></p>
<p>eParameterDefaultMaxIdentifierLength<br/></p>
<p><b>14.30.3 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.30.3.1 AAX_CParameterValue() [1/3]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameterValue&lt; T &gt;::AAX_CParameterValue (<br/></p>
<p>AAX_CParamID identifier ) [explicit]<br/></p>
<p>Constructs an AAX_CParameterValue object.<br/></p>
<p><b>Parameters<br/></b>in identifier Unique ID for the parameter value, these can only be 31 characters long at most. (the fixed<br/></p>
<p>length is a requirement for some optimizations in the host)<br/></p>
<p><b>Note<br/></b>The initial state of the parameter value is undefined<br/></p>
<p><b>14.30.3.2 AAX_CParameterValue() [2/3]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameterValue&lt; T &gt;::AAX_CParameterValue (<br/></p>
<p>AAX_CParamID identifier,<br/>const T &amp; value ) [explicit]<br/></p>
<p>Constructs an AAX_CParameterValue object with a defined initial state.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.30 AAX_CParameterValue</b>&lt; <b>T </b>&gt; <b>Class Template Reference 575<br/></b></p>
<p><b>Parameters<br/></b>in identifier Unique ID for the parameter value, these can only be 31 characters long at most. (the fixed<br/></p>
<p>length is a requirement for some optimizations in the host)<br/>in value Initial state of the parameter value<br/></p>
<p><b>14.30.3.3 AAX_CParameterValue() [3/3]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameterValue&lt; T &gt;::AAX_CParameterValue (<br/></p>
<p>const AAX_CParameterValue&lt; T &gt; &amp; other ) [explicit]<br/></p>
<p>Copy constructor for AAX_CParameterValue.<br/></p>
<p><b>14.30.4 Member Function Documentation<br/></b></p>
<p><b>14.30.4.1 AAX_DEFAULT_DTOR_OVERRIDE()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameterValue&lt; T &gt;::AAX_DEFAULT_DTOR_OVERRIDE (<br/></p>
<p>AAX_CParameterValue&lt; T &gt; )<br/></p>
<p><b>14.30.4.2 AAX_DEFAULT_MOVE_CTOR()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameterValue&lt; T &gt;::AAX_DEFAULT_MOVE_CTOR (<br/></p>
<p>AAX_CParameterValue&lt; T &gt; )<br/></p>
<p><b>14.30.4.3 AAX_DEFAULT_MOVE_OPER()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameterValue&lt; T &gt;::AAX_DEFAULT_MOVE_OPER (<br/></p>
<p>AAX_CParameterValue&lt; T &gt; )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>576 Class Documentation<br/></b></p>
<p><b>14.30.4.4 AAX_DELETE()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParameterValue&lt; T &gt;::AAX_DELETE (<br/></p>
<p>AAX_CParameterValue&lt; T &gt; &amp; operator = (const AAX_CParameterValue&lt; T &gt; &amp;) )<br/></p>
<p><b>14.30.4.5 Get()<br/></b></p>
<p>template&lt;typename T &gt;<br/>const T&amp; AAX_CParameterValue&lt; T &gt;::Get ( ) const [inline]<br/></p>
<p>Direct access to the template instance's value.<br/></p>
<p><b>14.30.4.6 Set()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CParameterValue&lt; T &gt;::Set (<br/></p>
<p>const T &amp; inValue ) [inline]<br/></p>
<p>Direct access to the template instance's value.<br/></p>
<p><b>14.30.4.7 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_IParameterValue&#8727; AAX_CParameterValue&lt; T &gt;::Clone ( ) const [inline], [virtual]<br/></p>
<p>Clones the parameter object.<br/><b>Note<br/></b></p>
<p>Does NOT set the automation delegate on the clone; ownership of the automation delegate and parameter<br/>registration/unregistration stays with the original parameter<br/></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p><b>14.30.4.8 Identifier()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CParamID AAX_CParameterValue&lt; T &gt;::Identifier ( ) const [inline], [virtual]<br/></p>
<p>Returns the parameter's unique identifier.<br/>This unique ID is used by the Parameter Manager and by outside applications to uniquely identify and target control<br/>messages. This value may not be changed after the parameter has been constructed.<br/>Implements AAX_IParameterValue.<br/></p>
<p><b>14.30.4.9 GetValueAsBool() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameterValue&lt; T &gt;::GetValueAsBool (<br/></p>
<p>bool &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a bool.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.30 AAX_CParameterValue</b>&lt; <b>T </b>&gt; <b>Class Template Reference 577<br/></b></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to bool was successful<br/></p>
<p>false The conversion to bool was unsuccessful<br/></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p><b>14.30.4.10 GetValueAsInt32() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameterValue&lt; T &gt;::GetValueAsInt32 (<br/></p>
<p>int32_t &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as an int32_t.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to int32_t was successful<br/></p>
<p>false The conversion to int32_t was unsuccessful<br/></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p><b>14.30.4.11 GetValueAsFloat() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameterValue&lt; T &gt;::GetValueAsFloat (<br/></p>
<p>float &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a float.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>578 Class Documentation<br/></b></p>
<p><b>Return values<br/></b>true The conversion to float was successful<br/></p>
<p>false The conversion to float was unsuccessful<br/></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p><b>14.30.4.12 GetValueAsDouble() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameterValue&lt; T &gt;::GetValueAsDouble (<br/></p>
<p>double &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a double.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to double was successful<br/></p>
<p>false The conversion to double was unsuccessful<br/></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p><b>14.30.4.13 GetValueAsString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CParameterValue&lt; T &gt;::GetValueAsString (<br/></p>
<p>AAX_IString &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a string.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to string was successful<br/></p>
<p>false The conversion to string was unsuccessful<br/></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.30 AAX_CParameterValue</b>&lt; <b>T </b>&gt; <b>Class Template Reference 579<br/></b></p>
<p><b>14.30.4.14 GetValueAsBool() [2/2]<br/></b></p>
<p>bool AAX_CParameterValue&lt; bool &gt;::GetValueAsBool (<br/>bool &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a bool.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to bool was successful<br/></p>
<p>false The conversion to bool was unsuccessful<br/></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p><b>14.30.4.15 GetValueAsInt32() [2/2]<br/></b></p>
<p>bool AAX_CParameterValue&lt; int32_t &gt;::GetValueAsInt32 (<br/>int32_t &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as an int32_t.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to int32_t was successful<br/></p>
<p>false The conversion to int32_t was unsuccessful<br/></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p><b>14.30.4.16 GetValueAsFloat() [2/2]<br/></b></p>
<p>bool AAX_CParameterValue&lt; float &gt;::GetValueAsFloat (<br/>float &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a float.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>580 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to float was successful<br/></p>
<p>false The conversion to float was unsuccessful<br/></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p><b>14.30.4.17 GetValueAsDouble() [2/2]<br/></b></p>
<p>bool AAX_CParameterValue&lt; double &gt;::GetValueAsDouble (<br/>double &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a double.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to double was successful<br/></p>
<p>false The conversion to double was unsuccessful<br/></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p><b>14.30.4.18 GetValueAsString() [2/2]<br/></b></p>
<p>bool AAX_CParameterValue&lt; AAX_CString &gt;::GetValueAsString (<br/>AAX_IString &#8727; value ) const [virtual]<br/></p>
<p>Retrieves the parameter's value as a string.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to string was successful<br/></p>
<p>false The conversion to string was unsuccessful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.31 AAX_CPercentDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template Reference 581<br/></b></p>
<p>Implements AAX_IParameterValue.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CParameter.h<br/></p>
<p><b>14.31 AAX_CPercentDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template<br/>Reference<br/></b></p>
<p>#include &lt;AAX_CPercentDisplayDelegateDecorator.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CPercentDisplayDelegateDecorator&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CPercentDisplayDelegateDecorator&lt; T &gt;:<br/></p>
<p><b>14.31.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CPercentDisplayDelegateDecorator</b>&lt; <b>T </b>&gt;<br/></p>
<p>A percent decorator conforming to AAX_IDisplayDelegateDecorator.<br/></p>
<p>This class is an AAX_IDisplayDelegateDecorator, meaning that it acts as a wrapper for other display del-<br/>egates or concrete display types. For more information about display delegate decorators in AAX, see<br/>Display delegate decorators<br/></p>
<p>The behavior of this class it to provide string conversion to and from percentage (%) values. When converting a<br/>parameter value to a string, it takes the real value and performs a % conversion before passing the value on to a<br/>concrete implementation to get a value string. It then adds on the &quot;%&quot; string at the end to signify that the value was<br/>converted. This allows something like a gain value to remain internally linear at all times even though its display is<br/>converted to a percentage.<br/></p>
<p>The inverse operation is also supported; this class can convert a percentage-formatted string into its associated real<br/>value. The string will first be converted to a number, then that number will have the inverse % calculation applied to<br/>it to retrieve the parameter's actual value.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CPercentDisplayDelegateDecorator (const AAX_IDisplayDelegate&lt; T &gt; &amp;displayDelegate)<br/>&#8226; AAX_CPercentDisplayDelegateDecorator&lt; T &gt; &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/>&#8226; bool ValueToString (T value, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation.<br/>&#8226; bool ValueToString (T value, int32_t maxNumChars, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p>&#8226; bool StringToValue (const AAX_CString &amp;valueString, T &#8727;value) const AAX_OVERRIDE<br/>Converts a string to a real parameter value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>582 Class Documentation<br/></b></p>
<p><b>14.31.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.31.2.1 AAX_CPercentDisplayDelegateDecorator()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;::AAX_CPercentDisplayDelegateDecorator (<br/></p>
<p>const AAX_IDisplayDelegate&lt; T &gt; &amp; displayDelegate )<br/></p>
<p><b>14.31.3 Member Function Documentation<br/></b></p>
<p><b>14.31.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt; &#8727; AAX_CPercentDisplayDelegateDecorator&lt; T &gt;::Clone<br/>( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassDisplayDelegate&lt;T&gt;* AAX_CSubclassDisplayDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassDisplayDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.31.3.2 ValueToString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CPercentDisplayDelegateDecorator&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.31 AAX_CPercentDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template Reference 583<br/></b></p>
<p><b>Return values<br/></b>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_IDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.31.3.3 ValueToString() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CPercentDisplayDelegateDecorator&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>int32_t maxNumChars,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>in maxNumChars Size hint for the desired maximum number of characters in the string (not including<br/></p>
<p>null termination)<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_IDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.31.3.4 StringToValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CPercentDisplayDelegateDecorator&lt; T &gt;::StringToValue (<br/></p>
<p>const AAX_CString &amp; valueString,<br/>T &#8727; value ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>584 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_CString::Length(), AAX_IDisplayDelegateDecorator&lt; T &gt;::StringToValue(), and AAX_CString&#8592;&#8617;<br/>::SubString().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CPercentDisplayDelegateDecorator.h<br/></p>
<p><b>14.32 AAX_CPieceWiseLinearTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class<br/>Template Reference<br/></b></p>
<p>#include &lt;AAX_CPieceWiseLinearTaperDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;:<br/></p>
<p>Collaboration diagram for AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;:<br/></p>
<p><b>14.32.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T, int32_t RealPrecision = 100</b>&gt;<br/><b>class AAX_CPieceWiseLinearTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt;<br/></p>
<p>A piece-wise linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p>This taper spaces a parameter's real values in a piecewise linear fashion.<br/></p>
<p><b>RealPrecision<br/></b>In addition to its type templatization, this taper includes a precision template parameter. RealPrecision is a<br/>multiplier that works in conjunction with the round() function to limit the precision of the real values provided<br/>by this taper. For example, if RealPrecision is 1000, it will round to the closest 0.001 when doing any sort of<br/>value conversion. If RealPrecision is 1, it will round to the nearest integer. If RealPrecision is 1000000, it will<br/>round to the nearest 0.000001. This is particularly useful for preventing things like 1.9999999 truncating down<br/>to 1 instead of rounding up to 2.<br/></p>
<p>To accomplish this behavior, the taper multiplies its unrounded parameter values by RealPrecision, rounds the result<br/>to the nearest valid value, then divides RealPrecision back out.<br/></p>
<p>Rounding will be disabled if RealPrecision is set to a value less than 1<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.32 AAX_CPieceWiseLinearTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template Reference 585<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CPieceWiseLinearTaperDelegate (const double &#8727;normalizedValues, const T &#8727;realValues, int32_&#8592;&#8617;<br/>t numValues)<br/></p>
<p>Constructs a Piece-wise Linear Taper with paired normalized and real values.<br/>&#8226; AAX_CPieceWiseLinearTaperDelegate (const AAX_CPieceWiseLinearTaperDelegate &amp;other)<br/>&#8226; &#8764;AAX_CPieceWiseLinearTaperDelegate ()<br/>&#8226; AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt; &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Constructs and returns a copy of the taper delegate.<br/>&#8226; T GetMinimumValue () const AAX_OVERRIDE<br/></p>
<p>Returns the taper's minimum real value.<br/>&#8226; T GetMaximumValue () const AAX_OVERRIDE<br/></p>
<p>Returns the taper's maximum real value.<br/>&#8226; T ConstrainRealValue (T value) const AAX_OVERRIDE<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/>&#8226; T NormalizedToReal (double normalizedValue) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized value to a real value.<br/>&#8226; double RealToNormalized (T realValue) const AAX_OVERRIDE<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p><b>Protected Member Functions<br/></b></p>
<p>&#8226; T Round (double iValue) const<br/></p>
<p><b>14.32.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.32.2.1 AAX_CPieceWiseLinearTaperDelegate() [1/2]<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;::AAX_CPieceWiseLinearTaperDelegate (<br/></p>
<p>const double &#8727; normalizedValues,<br/>const T &#8727; realValues,<br/>int32_t numValues )<br/></p>
<p>Constructs a Piece-wise Linear Taper with paired normalized and real values.<br/></p>
<p><b>Note<br/></b>The parameter's default value should lie within the min to max range.<br/></p>
<p><b>Parameters<br/></b>in normalizedValues is an array of the normalized values in sorted order. (make sure to include the full<br/></p>
<p>normalized range, 0.0-1.0 inclusive)<br/>in realValues is an array of the corresponding real values to the normalized values passed in.<br/>in numValues is the number of values that have been passed in (i.e. the element length of the<br/></p>
<p>other input arrays)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>586 Class Documentation<br/></b></p>
<p><b>14.32.2.2 AAX_CPieceWiseLinearTaperDelegate() [2/2]<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;::AAX_CPieceWiseLinearTaperDelegate (<br/></p>
<p>const AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt; &amp; other )<br/></p>
<p><b>14.32.2.3 </b>&#8764;<b>AAX_CPieceWiseLinearTaperDelegate()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;::&#8764;AAX_CPieceWiseLinearTaperDelegate<br/></p>
<p><b>14.32.3 Member Function Documentation<br/></b></p>
<p><b>14.32.3.1 Clone()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt; &#8727; AAX_CPieceWiseLinearTaperDelegate&lt; T,<br/>RealPrecision &gt;::Clone ( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the taper delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassTaperDelegate&lt;T&gt;* AAX_CSubclassTaperDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassTaperDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.32.3.2 GetMinimumValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision = 100&gt;<br/>T AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;::GetMinimumValue ( ) const [inline],<br/>[virtual]<br/></p>
<p>Returns the taper's minimum real value.<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.32 AAX_CPieceWiseLinearTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template Reference 587<br/></b></p>
<p><b>14.32.3.3 GetMaximumValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision = 100&gt;<br/>T AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;::GetMaximumValue ( ) const [inline],<br/>[virtual]<br/></p>
<p>Returns the taper's maximum real value.<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.32.3.4 ConstrainRealValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;::ConstrainRealValue (<br/></p>
<p>T value ) const [virtual]<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/></p>
<p>This method is useful if the taper requires a contraint beyond simple minimum and maximum real value limits.<br/></p>
<p><b>Note<br/></b>This is the function that should actually enforces the constraints in NormalizeToReal() and RealToNormalized().<br/></p>
<p><b>Parameters<br/></b>in value The unconstrained value<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.32.3.5 NormalizedToReal()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;::NormalizedToReal (<br/></p>
<p>double normalizedValue ) const [virtual]<br/></p>
<p>Converts a normalized value to a real value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of RealToNormalized(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value that will be converted<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>588 Class Documentation<br/></b></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.32.3.6 RealToNormalized()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>double AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;::RealToNormalized (<br/></p>
<p>T realValue ) const [virtual]<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of NormalizedToReal(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in realValue The real parameter value that will be normalized<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.32.3.7 Round()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;::Round (<br/></p>
<p>double iValue ) const [protected]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CPieceWiseLinearTaperDelegate.h<br/></p>
<p><b>14.33 AAX_CRangeTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template<br/>Reference<br/></b></p>
<p>#include &lt;AAX_CRangeTaperDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;:<br/></p>
<p>Collaboration diagram for AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.33 AAX_CRangeTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template Reference 589<br/></b></p>
<p><b>14.33.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T, int32_t RealPrecision = 1000</b>&gt;<br/><b>class AAX_CRangeTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt;<br/></p>
<p>A piecewise-linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p>This taper spaces a parameter's real values between its minimum and maximum using a series of linear regions to<br/>create the full mapping between the parameter's real and normalized values.<br/></p>
<p>Here is an example of how this taper can be used:<br/>float rangePoints[] = { 0.0, 1.0, 100.0, 1000.0, 2000.0 };<br/>double rangeSteps[] = { 0.1, 1.0, 10.0, 25.0 }; // number of steps per range: 10, 99, 90, 40<br/>const long cNumRanges = sizeof(rangeSteps)/sizeof(rangeSteps[0]);<br/>long numSteps = 0;<br/>for (int i = 0; i &lt; cNumRanges; i++)<br/>{<br/></p>
<p>numSteps += (rangePoints[i+1] - rangePoints[i]) / rangeSteps[i];<br/>}<br/>AAX_CRangeTaperDelegate&lt;float&gt; nonLinearTaper(rangePoints, rangeSteps, cNumRanges);<br/>float controlValue = 1.5;<br/>double normalized = nonLinearTaper.RealToNormalized(controlValue);<br/>float real = nonLinearTaper.NormalizedToReal(normalized);<br/></p>
<p><b>RealPrecision<br/></b>In addition to its type templatization, this taper includes a precision template parameter. RealPrecision is a<br/>multiplier that works in conjunction with the round() function to limit the precision of the real values provided<br/>by this taper. For example, if RealPrecision is 1000, it will round to the closest 0.001 when doing any sort of<br/>value conversion. If RealPrecision is 1, it will round to the nearest integer. If RealPrecision is 1000000, it will<br/>round to the nearest 0.000001. This is particularly useful for preventing things like 1.9999999 truncating down<br/>to 1 instead of rounding up to 2.<br/></p>
<p>To accomplish this behavior, the taper multiplies its unrounded parameter values by RealPrecision, rounds the result<br/>to the nearest valid value, then divides RealPrecision back out.<br/></p>
<p>Rounding will be disabled if RealPrecision is set to a value less than 1<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CRangeTaperDelegate (T &#8727;range, double &#8727;rangesSteps, unsigned long numRanges, bool useSmart&#8592;&#8617;<br/>Rounding=true)<br/></p>
<p>Constructs a Range Taper with specified minimum and maximum values.<br/>&#8226; AAX_CRangeTaperDelegate (const AAX_CRangeTaperDelegate &amp;rhs)<br/>&#8226; AAX_CRangeTaperDelegate &amp; operator= (AAX_CRangeTaperDelegate &amp;rhs)<br/>&#8226; AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt; &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Constructs and returns a copy of the taper delegate.<br/>&#8226; T GetMinimumValue () const AAX_OVERRIDE<br/></p>
<p>Returns the taper's minimum real value.<br/>&#8226; T GetMaximumValue () const AAX_OVERRIDE<br/></p>
<p>Returns the taper's maximum real value.<br/>&#8226; T ConstrainRealValue (T value) const AAX_OVERRIDE<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/>&#8226; T NormalizedToReal (double normalizedValue) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized value to a real value.<br/>&#8226; double RealToNormalized (T realValue) const AAX_OVERRIDE<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>590 Class Documentation<br/></b></p>
<p><b>Protected Member Functions<br/></b></p>
<p>&#8226; T Round (double iValue) const<br/>&#8226; T SmartRound (double value) const<br/></p>
<p><b>14.33.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.33.2.1 AAX_CRangeTaperDelegate() [1/2]<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;::AAX_CRangeTaperDelegate (<br/></p>
<p>T &#8727; range,<br/>double &#8727; rangesSteps,<br/>unsigned long numRanges,<br/>bool useSmartRounding = true )<br/></p>
<p>Constructs a Range Taper with specified minimum and maximum values.<br/></p>
<p><b>Note<br/></b>The parameter's default value should lie within the min to max range.<br/></p>
<p><b>Parameters<br/></b>in range An array of range endpoints along the taper's mapping range<br/>in rangesSteps Step values for each region in the taper's stepwise-linear map. No values in this<br/></p>
<p>array may be zero.<br/>in numRanges The total number of linear regions in the taper's map<br/>in useSmartRounding<br/></p>
<p><b>Todo </b>Document useSmartRounding parameter<br/></p>
<p><b>14.33.2.2 AAX_CRangeTaperDelegate() [2/2]<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;::AAX_CRangeTaperDelegate (<br/></p>
<p>const AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt; &amp; rhs )<br/></p>
<p><b>14.33.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.33 AAX_CRangeTaperDelegate</b>&lt; <b>T, RealPrecision </b>&gt; <b>Class Template Reference 591<br/></b></p>
<p><b>14.33.3.1 operator=()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt; &amp; AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;&#8592;&#8617;<br/>::operator= (<br/></p>
<p>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt; &amp; rhs )<br/></p>
<p><b>14.33.3.2 Clone()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt; &#8727; AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;&#8592;&#8617;<br/>::Clone ( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the taper delegate.<br/>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassTaperDelegate&lt;T&gt;* AAX_CSubclassTaperDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassTaperDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.33.3.3 GetMinimumValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision = 1000&gt;<br/>T AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;::GetMinimumValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the taper's minimum real value.<br/>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.33.3.4 GetMaximumValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision = 1000&gt;<br/>T AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;::GetMaximumValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the taper's maximum real value.<br/>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.33.3.5 ConstrainRealValue()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;::ConstrainRealValue (<br/></p>
<p>T value ) const [virtual]<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/>This method is useful if the taper requires a contraint beyond simple minimum and maximum real value limits.<br/></p>
<p><b>Note<br/></b>This is the function that should actually enforces the constraints in NormalizeToReal() and RealToNormalized().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>592 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in value The unconstrained value<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.33.3.6 NormalizedToReal()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;::NormalizedToReal (<br/></p>
<p>double normalizedValue ) const [virtual]<br/></p>
<p>Converts a normalized value to a real value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of RealToNormalized(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value that will be converted<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.33.3.7 RealToNormalized()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>double AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;::RealToNormalized (<br/></p>
<p>T realValue ) const [virtual]<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of NormalizedToReal(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in realValue The real parameter value that will be normalized<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.34 AAX_CSessionDocumentClient Class Reference 593<br/></b></p>
<p><b>14.33.3.8 Round()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;::Round (<br/></p>
<p>double iValue ) const [protected]<br/></p>
<p><b>14.33.3.9 SmartRound()<br/></b></p>
<p>template&lt;typename T , int32_t RealPrecision&gt;<br/>T AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;::SmartRound (<br/></p>
<p>double value ) const [protected]<br/></p>
<p><b>Todo </b>Document<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CRangeTaperDelegate.h<br/></p>
<p><b>14.34 AAX_CSessionDocumentClient Class Reference<br/></b></p>
<p>#include &lt;AAX_CSessionDocumentClient.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CSessionDocumentClient:<br/></p>
<p>Collaboration diagram for AAX_CSessionDocumentClient:<br/></p>
<p><b>14.34.1 Description<br/></b></p>
<p>Default implementation of the AAX_ISessionDocumentClient interface.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CSessionDocumentClient (void)<br/>&#8226; &#8764;AAX_CSessionDocumentClient (void) AAX_OVERRIDE<br/></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; AAX_Result Initialize (IACFUnknown &#8727;iUnknown) AAX_OVERRIDE<br/>&#8226; AAX_Result Uninitialize (void) AAX_OVERRIDE<br/></p>
<p><b>Session document access<br/></b></p>
<p>&#8226; AAX_Result SetSessionDocument (IACFUnknown &#8727;iSessionDocument) AAX_OVERRIDE<br/>Sets or removes a session document.<br/></p>
<p><b>AAX host and plug-in event notification<br/></b></p>
<p>&#8226; AAX_Result NotificationReceived (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData,<br/>uint32_t inNotificationDataSize) AAX_OVERRIDE<br/></p>
<p>Notification Hook.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>594 Class Documentation<br/></b></p>
<p><b>Protected Member Functions<br/></b></p>
<p><b>Session document change notifications<br/></b></p>
<p>&#8226; virtual AAX_Result SessionDocumentWillChange ()<br/>The session document interface is about to be added, replaced, or removed.<br/></p>
<p>&#8226; virtual AAX_Result SessionDocumentChanged ()<br/>The session document interface has been added, replaced, or removed.<br/></p>
<p><b>Private member accessors<br/></b></p>
<p>&#8226; AAX_IController &#8727; GetController (void)<br/>Retrieves a reference to the plug-in's controller interface.<br/></p>
<p>&#8226; const AAX_IController &#8727; GetController (void) const<br/>Retrieves a reference to the plug-in's controller interface.<br/></p>
<p>&#8226; AAX_IEffectParameters &#8727; GetEffectParameters (void)<br/>Retrieves a reference to the plug-in's data model interface.<br/></p>
<p>&#8226; const AAX_IEffectParameters &#8727; GetEffectParameters (void) const<br/>Retrieves a reference to the plug-in's data model interface.<br/></p>
<p>&#8226; std::shared_ptr&lt; AAX_ISessionDocument &gt; GetSessionDocument (void)<br/>Retrieves a reference to the session document interface.<br/></p>
<p>&#8226; std::shared_ptr&lt; const AAX_ISessionDocument &gt; GetSessionDocument (void) const<br/>Retrieves a reference to the session document interface.<br/></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.34.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.34.2.1 AAX_CSessionDocumentClient()<br/></b></p>
<p>AAX_CSessionDocumentClient::AAX_CSessionDocumentClient (<br/>void )<br/></p>
<p><b>14.34.2.2 </b>&#8764;<b>AAX_CSessionDocumentClient()<br/></b></p>
<p>AAX_CSessionDocumentClient::&#8764;AAX_CSessionDocumentClient (<br/>void )<br/></p>
<p><b>14.34.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.34 AAX_CSessionDocumentClient Class Reference 595<br/></b></p>
<p><b>14.34.3.1 Initialize()<br/></b></p>
<p>AAX_Result AAX_CSessionDocumentClient::Initialize (<br/>IACFUnknown &#8727; iUnknown ) [virtual]<br/></p>
<p>Implements AAX_IACFSessionDocumentClient.<br/></p>
<p><b>14.34.3.2 Uninitialize()<br/></b></p>
<p>AAX_Result AAX_CSessionDocumentClient::Uninitialize (<br/>void ) [virtual]<br/></p>
<p>Implements AAX_IACFSessionDocumentClient.<br/></p>
<p><b>14.34.3.3 SetSessionDocument()<br/></b></p>
<p>AAX_Result AAX_CSessionDocumentClient::SetSessionDocument (<br/>IACFUnknown &#8727; iSessionDocument ) [virtual]<br/></p>
<p>Sets or removes a session document.<br/></p>
<p><b>Parameters<br/></b>in iSessionDocument Interface supporting at least AAX_IACFSessionDocument, or nullptr to<br/></p>
<p>indicate that any session document that is currently held should be released.<br/></p>
<p>Implements AAX_IACFSessionDocumentClient.<br/></p>
<p><b>14.34.3.4 NotificationReceived()<br/></b></p>
<p>AAX_Result AAX_CSessionDocumentClient::NotificationReceived (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [inline], [virtual]<br/></p>
<p>Notification Hook.<br/></p>
<p>Called from the host to deliver notifications to this object.<br/></p>
<p>Look at the AAX_ENotificationEvent enumeration to see a description of events you can listen for and the data they<br/>come with.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>596 Class Documentation<br/></b></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>Different notifications are sent to different objects within a plug-in. If you are not seeing an expected<br/>notification, try checking the other plug-in objects' NotificationReceived() methods.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>the host may dispatch notifications synchronously or asynchronously, and calls to this method may<br/>occur concurrently on multiple threads.<br/></p>
<p>A plug-in may also dispatch custom notifications using AAX_IController::SendNotification(). Custom notifi-<br/>cations will be posted back to the plug-in's other objects which support a NotificationReceived()<br/>method (e.g. the data model).<br/></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification being received. Notifications form the host are one of<br/></p>
<p>AAX_ENotificationEvent<br/>in inNotificationData Block of incoming notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p>Implements AAX_IACFSessionDocumentClient.<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>14.34.3.5 SessionDocumentWillChange()<br/></b></p>
<p>virtual AAX_Result AAX_CSessionDocumentClient::SessionDocumentWillChange ( ) [inline], [protected],<br/>[virtual]<br/></p>
<p>The session document interface is about to be added, replaced, or removed.<br/></p>
<p>Custom implementations should stop using the current session document interface, which is about to become<br/>invalid.<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>14.34.3.6 SessionDocumentChanged()<br/></b></p>
<p>virtual AAX_Result AAX_CSessionDocumentClient::SessionDocumentChanged ( ) [inline], [protected],<br/>[virtual]<br/></p>
<p>The session document interface has been added, replaced, or removed.<br/></p>
<p>Custom implementations should update local references to the session document interface.<br/></p>
<p>References AAX_SUCCESS.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.34 AAX_CSessionDocumentClient Class Reference 597<br/></b></p>
<p><b>14.34.3.7 GetController() [1/2]<br/></b></p>
<p>AAX_IController&#8727; AAX_CSessionDocumentClient::GetController (<br/>void ) [protected]<br/></p>
<p>Retrieves a reference to the plug-in's controller interface.<br/></p>
<p><b>14.34.3.8 GetController() [2/2]<br/></b></p>
<p>const AAX_IController&#8727; AAX_CSessionDocumentClient::GetController (<br/>void ) const [protected]<br/></p>
<p>Retrieves a reference to the plug-in's controller interface.<br/></p>
<p><b>14.34.3.9 GetEffectParameters() [1/2]<br/></b></p>
<p>AAX_IEffectParameters&#8727; AAX_CSessionDocumentClient::GetEffectParameters (<br/>void ) [protected]<br/></p>
<p>Retrieves a reference to the plug-in's data model interface.<br/></p>
<p><b>14.34.3.10 GetEffectParameters() [2/2]<br/></b></p>
<p>const AAX_IEffectParameters&#8727; AAX_CSessionDocumentClient::GetEffectParameters (<br/>void ) const [protected]<br/></p>
<p>Retrieves a reference to the plug-in's data model interface.<br/></p>
<p><b>14.34.3.11 GetSessionDocument() [1/2]<br/></b></p>
<p>std::shared_ptr&lt;AAX_ISessionDocument&gt; AAX_CSessionDocumentClient::GetSessionDocument (<br/>void ) [protected]<br/></p>
<p>Retrieves a reference to the session document interface.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>598 Class Documentation<br/></b></p>
<p><b>14.34.3.12 GetSessionDocument() [2/2]<br/></b></p>
<p>std::shared_ptr&lt;const AAX_ISessionDocument&gt; AAX_CSessionDocumentClient::GetSessionDocument (<br/>void ) const [protected]<br/></p>
<p>Retrieves a reference to the session document interface.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CSessionDocumentClient.h<br/></p>
<p><b>14.35 AAX_CStateDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CStateDisplayDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CStateDisplayDelegate&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CStateDisplayDelegate&lt; T &gt;:<br/></p>
<p><b>14.35.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CStateDisplayDelegate</b>&lt; <b>T </b>&gt;<br/></p>
<p>A generic display format conforming to AAX_IDisplayDelegate.<br/></p>
<p>This display delegate is similar to AAX_CNumberDisplayDelegate, but does not include precision or spacing tem-<br/>platizations.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CStateDisplayDelegate (const char &#8727;iStateStrings[ ], T iMinState=0)<br/></p>
<p>Constructor taking a vector of C strings.<br/>&#8226; AAX_CStateDisplayDelegate (int32_t inNumStates, const char &#8727;iStateStrings[ ], T iMinState=0)<br/></p>
<p>Constructor taking a vector of C strings.<br/>&#8226; AAX_CStateDisplayDelegate (const std::vector&lt; AAX_IString &#8727; &gt; &amp;iStateStrings, T iMinState=0)<br/></p>
<p>Constructor taking a vector of AAX_IString objects.<br/>&#8226; AAX_CStateDisplayDelegate (const AAX_CStateDisplayDelegate &amp;other)<br/>&#8226; AAX_IDisplayDelegate&lt; T &gt; &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/>&#8226; bool ValueToString (T value, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation.<br/>&#8226; bool ValueToString (T value, int32_t maxNumChars, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p>&#8226; bool StringToValue (const AAX_CString &amp;valueString, T &#8727;value) const AAX_OVERRIDE<br/>Converts a string to a real parameter value.<br/></p>
<p>&#8226; void AddShortenedStrings (const char &#8727;iStateStrings[ ], int iLength)<br/>&#8226; bool Compare (const AAX_CString &amp;valueString, const AAX_CString &amp;stateString) const<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.35 AAX_CStateDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 599<br/></b></p>
<p><b>14.35.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.35.2.1 AAX_CStateDisplayDelegate() [1/4]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CStateDisplayDelegate&lt; T &gt;::AAX_CStateDisplayDelegate (<br/></p>
<p>const char &#8727; iStateStrings[],<br/>T iMinState = 0 ) [explicit]<br/></p>
<p>Constructor taking a vector of C strings.<br/></p>
<p>Each state name will be copied into the display delegate; the C strings may be disposed after construction.<br/></p>
<p><b>Note<br/></b>iStateStrings must be NULL-terminated<br/></p>
<p><b>14.35.2.2 AAX_CStateDisplayDelegate() [2/4]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CStateDisplayDelegate&lt; T &gt;::AAX_CStateDisplayDelegate (<br/></p>
<p>int32_t inNumStates,<br/>const char &#8727; iStateStrings[],<br/>T iMinState = 0 ) [explicit]<br/></p>
<p>Constructor taking a vector of C strings.<br/></p>
<p>Each state name will be copied into the display delegate; the C strings may be disposed after construction.<br/></p>
<p>State strings will be copied into the display delegate until either a NULL pointer is encountered or inNumStates<br/>strings have been copied<br/></p>
<p><b>14.35.2.3 AAX_CStateDisplayDelegate() [3/4]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CStateDisplayDelegate&lt; T &gt;::AAX_CStateDisplayDelegate (<br/></p>
<p>const std::vector&lt; AAX_IString &#8727; &gt; &amp; iStateStrings,<br/>T iMinState = 0 ) [explicit]<br/></p>
<p>Constructor taking a vector of AAX_IString objects.<br/></p>
<p>Each AAX_IString will be copied into the display delegate and may be disposed after construction. The AAX_IString<br/>will not be mutated.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>600 Class Documentation<br/></b></p>
<p><b>14.35.2.4 AAX_CStateDisplayDelegate() [4/4]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CStateDisplayDelegate&lt; T &gt;::AAX_CStateDisplayDelegate (<br/></p>
<p>const AAX_CStateDisplayDelegate&lt; T &gt; &amp; other )<br/></p>
<p><b>14.35.3 Member Function Documentation<br/></b></p>
<p><b>14.35.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_IDisplayDelegate&lt; T &gt; &#8727; AAX_CStateDisplayDelegate&lt; T &gt;::Clone ( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassDisplayDelegate&lt;T&gt;* AAX_CSubclassDisplayDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassDisplayDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.35.3.2 ValueToString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CStateDisplayDelegate&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.35 AAX_CStateDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 601<br/></b></p>
<p><b>14.35.3.3 ValueToString() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CStateDisplayDelegate&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>int32_t maxNumChars,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>in maxNumChars Size hint for the desired maximum number of characters in the string (not including<br/></p>
<p>null termination)<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.35.3.4 StringToValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CStateDisplayDelegate&lt; T &gt;::StringToValue (<br/></p>
<p>const AAX_CString &amp; valueString,<br/>T &#8727; value ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>602 Class Documentation<br/></b></p>
<p><b>14.35.3.5 AddShortenedStrings()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void AAX_CStateDisplayDelegate&lt; T &gt;::AddShortenedStrings (<br/></p>
<p>const char &#8727; iStateStrings[],<br/>int iLength )<br/></p>
<p><b>14.35.3.6 Compare()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CStateDisplayDelegate&lt; T &gt;::Compare (<br/></p>
<p>const AAX_CString &amp; valueString,<br/>const AAX_CString &amp; stateString ) const<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CStateDisplayDelegate.h<br/></p>
<p><b>14.36 AAX_CStatelessParameter Class Reference<br/></b></p>
<p>#include &lt;AAX_CParameter.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CStatelessParameter:<br/></p>
<p>Collaboration diagram for AAX_CStatelessParameter:<br/></p>
<p><b>14.36.1 Description<br/></b></p>
<p>A stateless parameter implementation.<br/></p>
<p>This can be useful for mapping event triggers to control surface buttons or to GUI switches.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CStatelessParameter (AAX_CParamID identifier, const AAX_IString &amp;name, const AAX_IString &amp;in&#8592;&#8617;<br/></p>
<p>ValueString)<br/>&#8226; AAX_CStatelessParameter (const AAX_IString &amp;identifier, const AAX_IString &amp;name, const AAX_IString<br/></p>
<p>&amp;inValueString)<br/>&#8226; AAX_DEFAULT_DTOR_OVERRIDE (AAX_CStatelessParameter)<br/>&#8226; AAX_IParameterValue &#8727; CloneValue () const AAX_OVERRIDE<br/></p>
<p>Clone the parameter's value to a new AAX_IParameterValue object.<br/></p>
<p><b>Identification methods<br/></b></p>
<p>&#8226; AAX_CParamID Identifier () const AAX_OVERRIDE<br/>Returns the parameter's unique identifier.<br/></p>
<p>&#8226; void SetName (const AAX_CString &amp;name) AAX_OVERRIDE<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 603<br/></b></p>
<p>Sets the parameter's display name.<br/>&#8226; const AAX_CString &amp; Name () const AAX_OVERRIDE<br/></p>
<p>Returns the parameter's display name.<br/>&#8226; void AddShortenedName (const AAX_CString &amp;name) AAX_OVERRIDE<br/></p>
<p>Sets the parameter's shortened display name.<br/>&#8226; const AAX_CString &amp; ShortenedName (int32_t iNumCharacters) const AAX_OVERRIDE<br/></p>
<p>Returns the parameter's shortened display name.<br/>&#8226; void ClearShortenedNames () AAX_OVERRIDE<br/></p>
<p>Clears the internal list of shortened display names.<br/></p>
<p><b>Automation methods<br/></b></p>
<p>&#8226; bool Automatable () const AAX_OVERRIDE<br/>Returns true if the parameter is automatable, false if it is not.<br/></p>
<p>&#8226; void SetAutomationDelegate (AAX_IAutomationDelegate &#8727;iAutomationDelegate) AAX_OVERRIDE<br/>Sets the automation delegate (if one is required)<br/></p>
<p>&#8226; void Touch () AAX_OVERRIDE<br/>Signals the automation system that a control has been touched.<br/></p>
<p>&#8226; void Release () AAX_OVERRIDE<br/>Signals the automation system that a control has been released.<br/></p>
<p><b>Taper methods<br/></b></p>
<p>&#8226; void SetNormalizedValue (double) AAX_OVERRIDE<br/>Sets a parameter value using it's normalized representation.<br/></p>
<p>&#8226; double GetNormalizedValue () const AAX_OVERRIDE<br/>Returns the normalized representation of the parameter's current real value.<br/></p>
<p>&#8226; void SetNormalizedDefaultValue (double) AAX_OVERRIDE<br/>Sets the parameter's default value using its normalized representation.<br/></p>
<p>&#8226; double GetNormalizedDefaultValue () const AAX_OVERRIDE<br/>Returns the normalized representation of the parameter's real default value.<br/></p>
<p>&#8226; void SetToDefaultValue () AAX_OVERRIDE<br/>Restores the state of this parameter to its default value.<br/></p>
<p>&#8226; void SetNumberOfSteps (uint32_t) AAX_OVERRIDE<br/>Sets the number of discrete steps for this parameter.<br/></p>
<p>&#8226; uint32_t GetNumberOfSteps () const AAX_OVERRIDE<br/>Returns the number of discrete steps used by the parameter.<br/></p>
<p>&#8226; uint32_t GetStepValue () const AAX_OVERRIDE<br/>Returns the current step for the current value of the parameter.<br/></p>
<p>&#8226; double GetNormalizedValueFromStep (uint32_t) const AAX_OVERRIDE<br/>Returns the normalized value for a given step.<br/></p>
<p>&#8226; uint32_t GetStepValueFromNormalizedValue (double) const AAX_OVERRIDE<br/>Returns the step value for a normalized value of the parameter.<br/></p>
<p>&#8226; void SetStepValue (uint32_t) AAX_OVERRIDE<br/>Returns the current step for the current value of the parameter.<br/></p>
<p><b>Display methods<br/></b>This functionality is most often used by GUIs, but can also be useful for state serialization.<br/></p>
<p>&#8226; bool GetValueString (AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/>Serializes the parameter value into a string.<br/></p>
<p>&#8226; bool GetValueString (int32_t, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/>Serializes the parameter value into a string, size hint included.<br/></p>
<p>&#8226; bool GetNormalizedValueFromBool (bool, double &#8727;normalizedValue) const AAX_OVERRIDE<br/>Converts a bool to a normalized parameter value.<br/></p>
<p>&#8226; bool GetNormalizedValueFromInt32 (int32_t, double &#8727;normalizedValue) const AAX_OVERRIDE<br/>Converts an integer to a normalized parameter value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>604 Class Documentation<br/></b></p>
<p>&#8226; bool GetNormalizedValueFromFloat (float, double &#8727;normalizedValue) const AAX_OVERRIDE<br/>Converts a float to a normalized parameter value.<br/></p>
<p>&#8226; bool GetNormalizedValueFromDouble (double, double &#8727;normalizedValue) const AAX_OVERRIDE<br/>Converts a double to a normalized parameter value.<br/></p>
<p>&#8226; bool GetNormalizedValueFromString (const AAX_CString &amp;, double &#8727;normalizedValue) const<br/>AAX_OVERRIDE<br/></p>
<p>Converts a given string to a normalized parameter value.<br/>&#8226; bool GetBoolFromNormalizedValue (double, bool &#8727;value) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized parameter value to a bool representing the corresponding real value.<br/>&#8226; bool GetInt32FromNormalizedValue (double, int32_t &#8727;) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized parameter value to an integer representing the corresponding real value.<br/>&#8226; bool GetFloatFromNormalizedValue (double, float &#8727;) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized parameter value to a float representing the corresponding real value.<br/>&#8226; bool GetDoubleFromNormalizedValue (double, double &#8727;) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized parameter value to a double representing the corresponding real value.<br/>&#8226; bool GetStringFromNormalizedValue (double, AAX_CString &amp;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a normalized parameter value to a string representing the corresponding real value.<br/>&#8226; bool GetStringFromNormalizedValue (double normalizedValue, int32_t, AAX_CString &amp;valueString) const<br/></p>
<p>AAX_OVERRIDE<br/>Converts a normalized parameter value to a string representing the corresponding real, size hint included. value.<br/></p>
<p>&#8226; bool SetValueFromString (const AAX_CString &amp;newValueString) AAX_OVERRIDE<br/>Converts a string to a real parameter value and sets the parameter to this value.<br/></p>
<p><b>Typed accessors<br/></b></p>
<p>&#8226; bool GetValueAsBool (bool &#8727;value) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a bool.<br/></p>
<p>&#8226; bool GetValueAsInt32 (int32_t &#8727;) const AAX_OVERRIDE<br/>Retrieves the parameter's value as an int32_t.<br/></p>
<p>&#8226; bool GetValueAsFloat (float &#8727;) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a float.<br/></p>
<p>&#8226; bool GetValueAsDouble (double &#8727;) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a double.<br/></p>
<p>&#8226; bool GetValueAsString (AAX_IString &#8727;) const AAX_OVERRIDE<br/>Retrieves the parameter's value as a string.<br/></p>
<p>&#8226; bool SetValueWithBool (bool) AAX_OVERRIDE<br/>Sets the parameter's value as a bool.<br/></p>
<p>&#8226; bool SetValueWithInt32 (int32_t) AAX_OVERRIDE<br/>Sets the parameter's value as an int32_t.<br/></p>
<p>&#8226; bool SetValueWithFloat (float) AAX_OVERRIDE<br/>Sets the parameter's value as a float.<br/></p>
<p>&#8226; bool SetValueWithDouble (double) AAX_OVERRIDE<br/>Sets the parameter's value as a double.<br/></p>
<p>&#8226; bool SetValueWithString (const AAX_IString &amp;value) AAX_OVERRIDE<br/>Sets the parameter's value as a string.<br/></p>
<p>&#8226; void SetType (AAX_EParameterType) AAX_OVERRIDE<br/>Sets the type of this parameter.<br/></p>
<p>&#8226; AAX_EParameterType GetType () const AAX_OVERRIDE<br/>Returns the type of this parameter as an AAX_EParameterType.<br/></p>
<p>&#8226; void SetOrientation (AAX_EParameterOrientation) AAX_OVERRIDE<br/>Sets the orientation of this parameter.<br/></p>
<p>&#8226; AAX_EParameterOrientation GetOrientation () const AAX_OVERRIDE<br/>Returns the orientation of this parameter.<br/></p>
<p>&#8226; void SetTaperDelegate (AAX_ITaperDelegateBase &amp;, bool) AAX_OVERRIDE<br/>Sets the parameter's taper delegate.<br/></p>
<p>&#8226; void SetDisplayDelegate (AAX_IDisplayDelegateBase &amp;) AAX_OVERRIDE<br/>Sets the parameter's display delegate.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 605<br/></b></p>
<p><b>Host interface methods<br/></b>&#8226; AAX_CStringAbbreviations mNames<br/>&#8226; AAX_CString mID<br/>&#8226; AAX_IAutomationDelegate &#8727; mAutomationDelegate<br/>&#8226; AAX_CString mValueString<br/>&#8226; void UpdateNormalizedValue (double) AAX_OVERRIDE<br/></p>
<p>Sets the parameter's state given a normalized value.<br/></p>
<p><b>14.36.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.36.2.1 AAX_CStatelessParameter() [1/2]<br/></b></p>
<p>AAX_CStatelessParameter::AAX_CStatelessParameter (<br/>AAX_CParamID identifier,<br/>const AAX_IString &amp; name,<br/>const AAX_IString &amp; inValueString ) [inline]<br/></p>
<p><b>14.36.2.2 AAX_CStatelessParameter() [2/2]<br/></b></p>
<p>AAX_CStatelessParameter::AAX_CStatelessParameter (<br/>const AAX_IString &amp; identifier,<br/>const AAX_IString &amp; name,<br/>const AAX_IString &amp; inValueString ) [inline]<br/></p>
<p><b>14.36.3 Member Function Documentation<br/></b></p>
<p><b>14.36.3.1 AAX_DEFAULT_DTOR_OVERRIDE()<br/></b></p>
<p>AAX_CStatelessParameter::AAX_DEFAULT_DTOR_OVERRIDE (<br/>AAX_CStatelessParameter )<br/></p>
<p><b>14.36.3.2 CloneValue()<br/></b></p>
<p>AAX_IParameterValue&#8727; AAX_CStatelessParameter::CloneValue ( ) const [inline], [virtual]<br/></p>
<p>Clone the parameter's value to a new AAX_IParameterValue object.<br/></p>
<p>The returned object is independent from the AAX_IParameter. For example, changing the state of the returned<br/>object will not result in a change to the original AAX_IParameter.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>606 Class Documentation<br/></b></p>
<p><b>14.36.3.3 Identifier()<br/></b></p>
<p>AAX_CParamID AAX_CStatelessParameter::Identifier ( ) const [inline], [virtual]<br/></p>
<p>Returns the parameter's unique identifier.<br/></p>
<p>This unique ID is used by the Parameter Manager and by outside applications to uniquely identify and target control<br/>messages. This value may not be changed after the parameter has been constructed.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References AAX_CString::CString(), and mID.<br/></p>
<p>Referenced by Release(), SetAutomationDelegate(), SetName(), and Touch().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>14.36.3.4 SetName()<br/></b></p>
<p>void AAX_CStatelessParameter::SetName (<br/>const AAX_CString &amp; name ) [inline], [virtual]<br/></p>
<p>Sets the parameter's display name.<br/></p>
<p>This name is used for display only, it is not used for indexing or identifying the parameter This name may be changed<br/>after the parameter has been created, but display name changes may not be recognized by all AAX hosts.<br/></p>
<p><b>Parameters<br/></b>in name Display name that will be assigned to the parameter<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References Identifier(), mAutomationDelegate, mNames, AAX_IAutomationDelegate::ParameterNameChanged(),<br/>and AAX_CStringAbbreviations::SetPrimary().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.36.3.5 Name()<br/></b></p>
<p>const AAX_CString&amp; AAX_CStatelessParameter::Name ( ) const [inline], [virtual]<br/></p>
<p>Returns the parameter's display name.<br/></p>
<p><b>Note<br/></b>This method returns a const reference in order to prevent a string copy. Do not cast away the const to change<br/>this value.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References mNames, and AAX_CStringAbbreviations::Primary().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 607<br/></b></p>
<p><b>14.36.3.6 AddShortenedName()<br/></b></p>
<p>void AAX_CStatelessParameter::AddShortenedName (<br/>const AAX_CString &amp; name ) [inline], [virtual]<br/></p>
<p>Sets the parameter's shortened display name.<br/></p>
<p>This name is used for display only, it is not used for indexing or identifying the parameter These names show<br/>up when the host asks for shorter length parameter names for display on Control Surfaces or other string length<br/>constrained situations.<br/></p>
<p><b>Parameters<br/></b>in name Shortened display names that will be assigned to the parameter<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References AAX_CStringAbbreviations::Add(), and mNames.<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.36.3.7 ShortenedName()<br/></b></p>
<p>const AAX_CString&amp; AAX_CStatelessParameter::ShortenedName (<br/>int32_t iNumCharacters ) const [inline], [virtual]<br/></p>
<p>Returns the parameter's shortened display name.<br/></p>
<p><b>Note<br/></b>This method returns a const reference in order to prevent a string copy. Do not cast away the const to change<br/>this value.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References AAX_CStringAbbreviations::Get(), and mNames.<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.36.3.8 ClearShortenedNames()<br/></b></p>
<p>void AAX_CStatelessParameter::ClearShortenedNames ( ) [inline], [virtual]<br/></p>
<p>Clears the internal list of shortened display names.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References AAX_CStringAbbreviations::Clear(), and mNames.<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>608 Class Documentation<br/></b></p>
<p><b>14.36.3.9 Automatable()<br/></b></p>
<p>bool AAX_CStatelessParameter::Automatable ( ) const [inline], [virtual]<br/></p>
<p>Returns true if the parameter is automatable, false if it is not.<br/></p>
<p><b>Note<br/></b>Subclasses that return true in this method must support host-based automation.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.10 SetAutomationDelegate()<br/></b></p>
<p>void AAX_CStatelessParameter::SetAutomationDelegate (<br/>AAX_IAutomationDelegate &#8727; iAutomationDelegate ) [inline], [virtual]<br/></p>
<p>Sets the automation delegate (if one is required)<br/></p>
<p><b>Parameters<br/></b>in iAutomationDelegate A reference to the parameter manager's automation delegate interface<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References Identifier(), mAutomationDelegate, AAX_IAutomationDelegate::RegisterParameter(), and AAX_&#8592;&#8617;<br/>IAutomationDelegate::UnregisterParameter().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.36.3.11 Touch()<br/></b></p>
<p>void AAX_CStatelessParameter::Touch ( ) [inline], [virtual]<br/></p>
<p>Signals the automation system that a control has been touched.<br/></p>
<p>Call this method in response to GUI events that begin editing, such as a mouse down. After this method has been<br/>called you are free to call SetNormalizedValue() as much as you need, e.g. in order to respond to subsequent<br/>mouse moved events. Call Release() to free the parameter for updates from other controls.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References Identifier(), mAutomationDelegate, and AAX_IAutomationDelegate::PostTouchRequest().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 609<br/></b></p>
<p><b>14.36.3.12 Release()<br/></b></p>
<p>void AAX_CStatelessParameter::Release ( ) [inline], [virtual]<br/></p>
<p>Signals the automation system that a control has been released.<br/></p>
<p>Call this method in response to GUI events that complete editing, such as a mouse up. Once this method has been<br/>called you should not call SetNormalizedValue() again until after the next call to Touch().<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References Identifier(), mAutomationDelegate, and AAX_IAutomationDelegate::PostReleaseRequest().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.36.3.13 SetNormalizedValue()<br/></b></p>
<p>void AAX_CStatelessParameter::SetNormalizedValue (<br/>double newNormalizedValue ) [inline], [virtual]<br/></p>
<p>Sets a parameter value using it's normalized representation.<br/></p>
<p>For more information regarding normalized values, see Parameter Manager<br/></p>
<p><b>Parameters<br/></b>in newNormalizedValue New value (normalized) to which the parameter will be set<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.14 GetNormalizedValue()<br/></b></p>
<p>double AAX_CStatelessParameter::GetNormalizedValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the normalized representation of the parameter's current real value.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.15 SetNormalizedDefaultValue()<br/></b></p>
<p>void AAX_CStatelessParameter::SetNormalizedDefaultValue (<br/>double normalizedDefault ) [inline], [virtual]<br/></p>
<p>Sets the parameter's default value using its normalized representation.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>610 Class Documentation<br/></b></p>
<p><b>14.36.3.16 GetNormalizedDefaultValue()<br/></b></p>
<p>double AAX_CStatelessParameter::GetNormalizedDefaultValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the normalized representation of the parameter's real default value.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.17 SetToDefaultValue()<br/></b></p>
<p>void AAX_CStatelessParameter::SetToDefaultValue ( ) [inline], [virtual]<br/></p>
<p>Restores the state of this parameter to its default value.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.18 SetNumberOfSteps()<br/></b></p>
<p>void AAX_CStatelessParameter::SetNumberOfSteps (<br/>uint32_t numSteps ) [inline], [virtual]<br/></p>
<p>Sets the number of discrete steps for this parameter.<br/></p>
<p>Stepped parameter values are useful for discrete parameters and for &quot;jumping&quot; events such as mouse wheels, page<br/>up/down, etc. The parameter's step size is used to specify the coarseness of those changes.<br/></p>
<p><b>Note<br/></b>numSteps MUST be greater than zero. All other values may be considered an error by the host.<br/></p>
<p><b>Parameters<br/></b>in numSteps The number of steps that the parameter will use<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.19 GetNumberOfSteps()<br/></b></p>
<p>uint32_t AAX_CStatelessParameter::GetNumberOfSteps ( ) const [inline], [virtual]<br/></p>
<p>Returns the number of discrete steps used by the parameter.<br/>See SetNumberOfSteps() for more information about parameter steps.<br/>Implements AAX_IParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 611<br/></b></p>
<p><b>14.36.3.20 GetStepValue()<br/></b></p>
<p>uint32_t AAX_CStatelessParameter::GetStepValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the current step for the current value of the parameter.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.21 GetNormalizedValueFromStep()<br/></b></p>
<p>double AAX_CStatelessParameter::GetNormalizedValueFromStep (<br/>uint32_t iStep ) const [inline], [virtual]<br/></p>
<p>Returns the normalized value for a given step.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.22 GetStepValueFromNormalizedValue()<br/></b></p>
<p>uint32_t AAX_CStatelessParameter::GetStepValueFromNormalizedValue (<br/>double normalizedValue ) const [inline], [virtual]<br/></p>
<p>Returns the step value for a normalized value of the parameter.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.23 SetStepValue()<br/></b></p>
<p>void AAX_CStatelessParameter::SetStepValue (<br/>uint32_t iStep ) [inline], [virtual]<br/></p>
<p>Returns the current step for the current value of the parameter.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.24 GetValueString() [1/2]<br/></b></p>
<p>bool AAX_CStatelessParameter::GetValueString (<br/>AAX_CString &#8727; valueString ) const [inline], [virtual]<br/></p>
<p>Serializes the parameter value into a string.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>612 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out valueString A string representing the parameter's real value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References mValueString.<br/></p>
<p><b>14.36.3.25 GetValueString() [2/2]<br/></b></p>
<p>bool AAX_CStatelessParameter::GetValueString (<br/>int32_t iMaxNumChars,<br/>AAX_CString &#8727; valueString ) const [inline], [virtual]<br/></p>
<p>Serializes the parameter value into a string, size hint included.<br/></p>
<p><b>Parameters<br/></b>in iMaxNumChars A size hint for the size of the string being requested. Useful for control surfaces and<br/></p>
<p>other limited area text fields. (make sure that size of desired string also has room<br/>for null termination)<br/></p>
<p>out valueString A string representing the parameter's real value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References GetValueString().<br/></p>
<p>Referenced by GetValueString().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>14.36.3.26 GetNormalizedValueFromBool()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetNormalizedValueFromBool (<br/>bool value,<br/>double &#8727; normalizedValue ) const [inline], [virtual]<br/></p>
<p>Converts a bool to a normalized parameter value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 613<br/></b></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.27 GetNormalizedValueFromInt32()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetNormalizedValueFromInt32 (<br/>int32_t value,<br/>double &#8727; normalizedValue ) const [inline], [virtual]<br/></p>
<p>Converts an integer to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.28 GetNormalizedValueFromFloat()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetNormalizedValueFromFloat (<br/>float value,<br/>double &#8727; normalizedValue ) const [inline], [virtual]<br/></p>
<p>Converts a float to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>614 Class Documentation<br/></b></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.29 GetNormalizedValueFromDouble()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetNormalizedValueFromDouble (<br/>double value,<br/>double &#8727; normalizedValue ) const [inline], [virtual]<br/></p>
<p>Converts a double to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.30 GetNormalizedValueFromString()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetNormalizedValueFromString (<br/>const AAX_CString &amp; valueString,<br/>double &#8727; normalizedValue ) const [inline], [virtual]<br/></p>
<p>Converts a given string to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString A string representing a possible real value for the parameter<br/>out normalizedValue The normalized parameter value associated with valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 615<br/></b></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.31 GetBoolFromNormalizedValue()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetBoolFromNormalizedValue (<br/>double normalizedValue,<br/>bool &#8727; value ) const [inline], [virtual]<br/></p>
<p>Converts a normalized parameter value to a bool representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to bool was successful<br/></p>
<p>false The conversion to bool was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.32 GetInt32FromNormalizedValue()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetInt32FromNormalizedValue (<br/>double normalizedValue,<br/>int32_t &#8727; value ) const [inline], [virtual]<br/></p>
<p>Converts a normalized parameter value to an integer representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to int32_t was successful<br/></p>
<p>false The conversion to int32_t was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>616 Class Documentation<br/></b></p>
<p><b>14.36.3.33 GetFloatFromNormalizedValue()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetFloatFromNormalizedValue (<br/>double normalizedValue,<br/>float &#8727; value ) const [inline], [virtual]<br/></p>
<p>Converts a normalized parameter value to a float representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to float was successful<br/></p>
<p>false The conversion to float was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.34 GetDoubleFromNormalizedValue()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetDoubleFromNormalizedValue (<br/>double normalizedValue,<br/>double &#8727; value ) const [inline], [virtual]<br/></p>
<p>Converts a normalized parameter value to a double representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to double was successful<br/></p>
<p>false The conversion to double was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.35 GetStringFromNormalizedValue() [1/2]<br/></b></p>
<p>bool AAX_CStatelessParameter::GetStringFromNormalizedValue (<br/>double normalizedValue,<br/>AAX_CString &amp; valueString ) const [inline], [virtual]<br/></p>
<p>Converts a normalized parameter value to a string representing the corresponding real value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 617<br/></b></p>
<p><b>Parameters<br/></b>in normalizedValue A normalized parameter value<br/>out valueString A string representing the parameter value associated with normalizedValue<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References mValueString.<br/></p>
<p><b>14.36.3.36 GetStringFromNormalizedValue() [2/2]<br/></b></p>
<p>bool AAX_CStatelessParameter::GetStringFromNormalizedValue (<br/>double normalizedValue,<br/>int32_t iMaxNumChars,<br/>AAX_CString &amp; valueString ) const [inline], [virtual]<br/></p>
<p>Converts a normalized parameter value to a string representing the corresponding real, size hint included. value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue A normalized parameter value<br/>in iMaxNumChars A size hint for the size of the string being requested. Useful for control surfaces<br/></p>
<p>and other limited area text fields. (make sure that size of desired string also has<br/>room for null termination)<br/></p>
<p>out valueString A string representing the parameter value associated with normalizedValue<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/>References GetStringFromNormalizedValue().<br/>Referenced by GetStringFromNormalizedValue().<br/>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>14.36.3.37 SetValueFromString()<br/></b></p>
<p>bool AAX_CStatelessParameter::SetValueFromString (<br/>const AAX_CString &amp; newValueString ) [inline], [virtual]<br/></p>
<p>Converts a string to a real parameter value and sets the parameter to this value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>618 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in newValueString A string representing the parameter's new real value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References mValueString.<br/></p>
<p><b>14.36.3.38 GetValueAsBool()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetValueAsBool (<br/>bool &#8727; value ) const [inline], [virtual]<br/></p>
<p>Retrieves the parameter's value as a bool.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to bool was successful<br/></p>
<p>false The conversion to bool was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.39 GetValueAsInt32()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetValueAsInt32 (<br/>int32_t &#8727; value ) const [inline], [virtual]<br/></p>
<p>Retrieves the parameter's value as an int32_t.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 619<br/></b></p>
<p><b>Return values<br/></b>true The conversion to int32_t was successful<br/></p>
<p>false The conversion to int32_t was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.40 GetValueAsFloat()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetValueAsFloat (<br/>float &#8727; value ) const [inline], [virtual]<br/></p>
<p>Retrieves the parameter's value as a float.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to float was successful<br/></p>
<p>false The conversion to float was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.41 GetValueAsDouble()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetValueAsDouble (<br/>double &#8727; value ) const [inline], [virtual]<br/></p>
<p>Retrieves the parameter's value as a double.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to double was successful<br/></p>
<p>false The conversion to double was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>620 Class Documentation<br/></b></p>
<p><b>14.36.3.42 GetValueAsString()<br/></b></p>
<p>bool AAX_CStatelessParameter::GetValueAsString (<br/>AAX_IString &#8727; value ) const [inline], [virtual]<br/></p>
<p>Retrieves the parameter's value as a string.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to string was successful<br/></p>
<p>false The conversion to string was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.43 SetValueWithBool()<br/></b></p>
<p>bool AAX_CStatelessParameter::SetValueWithBool (<br/>bool value ) [inline], [virtual]<br/></p>
<p>Sets the parameter's value as a bool.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from bool was successful<br/></p>
<p>false The conversion from bool was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.44 SetValueWithInt32()<br/></b></p>
<p>bool AAX_CStatelessParameter::SetValueWithInt32 (<br/>int32_t value ) [inline], [virtual]<br/></p>
<p>Sets the parameter's value as an int32_t.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 621<br/></b></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from int32_t was successful<br/></p>
<p>false The conversion from int32_t was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.45 SetValueWithFloat()<br/></b></p>
<p>bool AAX_CStatelessParameter::SetValueWithFloat (<br/>float value ) [inline], [virtual]<br/></p>
<p>Sets the parameter's value as a float.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from float was successful<br/></p>
<p>false The conversion from float was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.46 SetValueWithDouble()<br/></b></p>
<p>bool AAX_CStatelessParameter::SetValueWithDouble (<br/>double value ) [inline], [virtual]<br/></p>
<p>Sets the parameter's value as a double.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from double was successful<br/></p>
<p>false The conversion from double was unsuccessful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>622 Class Documentation<br/></b></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.47 SetValueWithString()<br/></b></p>
<p>bool AAX_CStatelessParameter::SetValueWithString (<br/>const AAX_IString &amp; value ) [inline], [virtual]<br/></p>
<p>Sets the parameter's value as a string.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from string was successful<br/></p>
<p>false The conversion from string was unsuccessful<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References mValueString.<br/></p>
<p><b>14.36.3.48 SetType()<br/></b></p>
<p>void AAX_CStatelessParameter::SetType (<br/>AAX_EParameterType iControlType ) [inline], [virtual]<br/></p>
<p>Sets the type of this parameter.<br/></p>
<p>See GetType for use cases<br/></p>
<p><b>Parameters<br/></b>in iControlType The parameter's new type as an AAX_EParameterType<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.49 GetType()<br/></b></p>
<p>AAX_EParameterType AAX_CStatelessParameter::GetType ( ) const [inline], [virtual]<br/></p>
<p>Returns the type of this parameter as an AAX_EParameterType.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.36 AAX_CStatelessParameter Class Reference 623<br/></b></p>
<p><b>Todo </b>Document use cases for control type<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References AAX_eParameterType_Discrete.<br/></p>
<p><b>14.36.3.50 SetOrientation()<br/></b></p>
<p>void AAX_CStatelessParameter::SetOrientation (<br/>AAX_EParameterOrientation iOrientation ) [inline], [virtual]<br/></p>
<p>Sets the orientation of this parameter.<br/></p>
<p><b>Parameters<br/></b>in iOrientation The parameter's new orientation<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.51 GetOrientation()<br/></b></p>
<p>AAX_EParameterOrientation AAX_CStatelessParameter::GetOrientation ( ) const [inline], [virtual]<br/></p>
<p>Returns the orientation of this parameter.<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p>References AAX_eParameterOrientation_Default.<br/></p>
<p><b>14.36.3.52 SetTaperDelegate()<br/></b></p>
<p>void AAX_CStatelessParameter::SetTaperDelegate (<br/>AAX_ITaperDelegateBase &amp; inTaperDelegate,<br/>bool inPreserveValue ) [inline], [virtual]<br/></p>
<p>Sets the parameter's taper delegate.<br/></p>
<p><b>Parameters<br/></b>in inTaperDelegate A reference to the parameter's new taper delegate<br/>in inPreserveValue<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>624 Class Documentation<br/></b></p>
<p><b>Todo </b>Document this parameter<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.53 SetDisplayDelegate()<br/></b></p>
<p>void AAX_CStatelessParameter::SetDisplayDelegate (<br/>AAX_IDisplayDelegateBase &amp; inDisplayDelegate ) [inline], [virtual]<br/></p>
<p>Sets the parameter's display delegate.<br/></p>
<p><b>Parameters<br/></b>in inDisplayDelegate A reference to the parameter's new display delegate<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.3.54 UpdateNormalizedValue()<br/></b></p>
<p>void AAX_CStatelessParameter::UpdateNormalizedValue (<br/>double newNormalizedValue ) [inline], [virtual]<br/></p>
<p>Sets the parameter's state given a normalized value.<br/></p>
<p>This is the second half of the parameter setting operation that is initiated with a call to SetValue(). Parameters<br/>should not be set directly using this method; instead, use SetValue().<br/></p>
<p><b>Parameters<br/></b>in newNormalizedValue Normalized value that will be used to set the parameter's new state<br/></p>
<p>Implements AAX_IParameter.<br/></p>
<p><b>14.36.4 Member Data Documentation<br/></b></p>
<p><b>14.36.4.1 mNames<br/></b></p>
<p>AAX_CStringAbbreviations AAX_CStatelessParameter::mNames [protected]<br/></p>
<p>Referenced by AddShortenedName(), ClearShortenedNames(), Name(), SetName(), and ShortenedName().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.37 AAX_CStateTaperDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 625<br/></b></p>
<p><b>14.36.4.2 mID<br/></b></p>
<p>AAX_CString AAX_CStatelessParameter::mID [protected]<br/></p>
<p>Referenced by Identifier().<br/></p>
<p><b>14.36.4.3 mAutomationDelegate<br/></b></p>
<p>AAX_IAutomationDelegate&#8727; AAX_CStatelessParameter::mAutomationDelegate [protected]<br/></p>
<p>Referenced by Release(), SetAutomationDelegate(), SetName(), and Touch().<br/></p>
<p><b>14.36.4.4 mValueString<br/></b></p>
<p>AAX_CString AAX_CStatelessParameter::mValueString [protected]<br/></p>
<p>Referenced by GetStringFromNormalizedValue(), GetValueString(), SetValueFromString(), and SetValueWith&#8592;&#8617;<br/>String().<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CParameter.h<br/></p>
<p><b>14.37 AAX_CStateTaperDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CStateTaperDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CStateTaperDelegate&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CStateTaperDelegate&lt; T &gt;:<br/></p>
<p><b>14.37.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CStateTaperDelegate</b>&lt; <b>T </b>&gt;<br/></p>
<p>A linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p>This taper spaces a parameter's real values evenly between its minimum and maximum, with a linear mapping<br/>between the parameter's real and normalized values. It is essentially a version of AAX_CLinearTaperDelegate<br/>without that class' additional RealPrecision templatization.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>626 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CStateTaperDelegate (T minValue=0, T maxValue=1)<br/>Constructs a State Taper with specified minimum and maximum values.<br/></p>
<p>&#8226; AAX_CStateTaperDelegate&lt; T &gt; &#8727; Clone () const AAX_OVERRIDE<br/>Constructs and returns a copy of the taper delegate.<br/></p>
<p>&#8226; T GetMinimumValue () const AAX_OVERRIDE<br/>Returns the taper's minimum real value.<br/></p>
<p>&#8226; T GetMaximumValue () const AAX_OVERRIDE<br/>Returns the taper's maximum real value.<br/></p>
<p>&#8226; T ConstrainRealValue (T value) const AAX_OVERRIDE<br/>Applies a contraint to the value and returns the constrained value.<br/></p>
<p>&#8226; T NormalizedToReal (double normalizedValue) const AAX_OVERRIDE<br/>Converts a normalized value to a real value.<br/></p>
<p>&#8226; double RealToNormalized (T realValue) const AAX_OVERRIDE<br/>Normalizes a real parameter value.<br/></p>
<p><b>14.37.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.37.2.1 AAX_CStateTaperDelegate()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CStateTaperDelegate&lt; T &gt;::AAX_CStateTaperDelegate (<br/></p>
<p>T minValue = 0,<br/>T maxValue = 1 )<br/></p>
<p>Constructs a State Taper with specified minimum and maximum values.<br/></p>
<p><b>Note<br/></b>The parameter's default value should lie within the min to max range.<br/></p>
<p><b>Parameters<br/></b>in minValue<br/>in maxValue<br/></p>
<p><b>14.37.3 Member Function Documentation<br/></b></p>
<p><b>14.37.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CStateTaperDelegate&lt; T &gt; &#8727; AAX_CStateTaperDelegate&lt; T &gt;::Clone ( ) const [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.37 AAX_CStateTaperDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 627<br/></b></p>
<p>Constructs and returns a copy of the taper delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassTaperDelegate&lt;T&gt;* AAX_CSubclassTaperDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassTaperDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.37.3.2 GetMinimumValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CStateTaperDelegate&lt; T &gt;::GetMinimumValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the taper's minimum real value.<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.37.3.3 GetMaximumValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CStateTaperDelegate&lt; T &gt;::GetMaximumValue ( ) const [inline], [virtual]<br/></p>
<p>Returns the taper's maximum real value.<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.37.3.4 ConstrainRealValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CStateTaperDelegate&lt; T &gt;::ConstrainRealValue (<br/></p>
<p>T value ) const [virtual]<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/></p>
<p>This method is useful if the taper requires a contraint beyond simple minimum and maximum real value limits.<br/></p>
<p><b>Note<br/></b>This is the function that should actually enforces the constraints in NormalizeToReal() and RealToNormalized().<br/></p>
<p><b>Parameters<br/></b>in value The unconstrained value<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>628 Class Documentation<br/></b></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.37.3.5 NormalizedToReal()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T AAX_CStateTaperDelegate&lt; T &gt;::NormalizedToReal (<br/></p>
<p>double normalizedValue ) const [virtual]<br/></p>
<p>Converts a normalized value to a real value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of RealToNormalized(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value that will be converted<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.37.3.6 RealToNormalized()<br/></b></p>
<p>template&lt;typename T &gt;<br/>double AAX_CStateTaperDelegate&lt; T &gt;::RealToNormalized (<br/></p>
<p>T realValue ) const [virtual]<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of NormalizedToReal(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in realValue The real parameter value that will be normalized<br/></p>
<p>Implements AAX_ITaperDelegate&lt; T &gt;.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CStateTaperDelegate.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.38 AAX_CString Class Reference 629<br/></b></p>
<p><b>14.38 AAX_CString Class Reference<br/></b></p>
<p>#include &lt;AAX_CString.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CString:<br/></p>
<p>Collaboration diagram for AAX_CString:<br/></p>
<p><b>14.38.1 Description<br/></b></p>
<p>A generic AAX string class with similar functionality to std::string<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; uint32_t Length () const AAX_OVERRIDE<br/>&#8226; uint32_t MaxLength () const AAX_OVERRIDE<br/>&#8226; const char &#8727; Get () const AAX_OVERRIDE<br/>&#8226; void Set (const char &#8727;iString) AAX_OVERRIDE<br/>&#8226; AAX_IString &amp; operator= (const AAX_IString &amp;iOther) AAX_OVERRIDE<br/>&#8226; AAX_IString &amp; operator= (const char &#8727;iString) AAX_OVERRIDE<br/>&#8226; AAX_CString ()<br/>&#8226; AAX_CString (const char &#8727;str)<br/>&#8226; AAX_CString (const std::string &amp;str)<br/>&#8226; AAX_CString (const AAX_CString &amp;other)<br/>&#8226; AAX_CString (const AAX_IString &amp;other)<br/>&#8226; AAX_DEFAULT_MOVE_CTOR (AAX_CString)<br/>&#8226; std::string &amp; StdString ()<br/>&#8226; const std::string &amp; StdString () const<br/>&#8226; AAX_CString &amp; operator= (const AAX_CString &amp;other)<br/>&#8226; AAX_CString &amp; operator= (const std::string &amp;other)<br/>&#8226; AAX_CString &amp; operator= (AAX_CString &amp;&amp;other)<br/>&#8226; void Clear ()<br/>&#8226; bool Empty () const<br/>&#8226; AAX_CString &amp; Erase (uint32_t pos, uint32_t n)<br/>&#8226; AAX_CString &amp; Append (const AAX_CString &amp;str)<br/>&#8226; AAX_CString &amp; Append (const char &#8727;str)<br/>&#8226; AAX_CString &amp; AppendNumber (double number, int32_t precision)<br/>&#8226; AAX_CString &amp; AppendNumber (int32_t number)<br/>&#8226; AAX_CString &amp; AppendHex (int32_t number, int32_t width)<br/>&#8226; AAX_CString &amp; Insert (uint32_t pos, const AAX_CString &amp;str)<br/>&#8226; AAX_CString &amp; Insert (uint32_t pos, const char &#8727;str)<br/>&#8226; AAX_CString &amp; InsertNumber (uint32_t pos, double number, int32_t precision)<br/>&#8226; AAX_CString &amp; InsertNumber (uint32_t pos, int32_t number)<br/>&#8226; AAX_CString &amp; InsertHex (uint32_t pos, int32_t number, int32_t width)<br/>&#8226; AAX_CString &amp; Replace (uint32_t pos, uint32_t n, const AAX_CString &amp;str)<br/>&#8226; AAX_CString &amp; Replace (uint32_t pos, uint32_t n, const char &#8727;str)<br/>&#8226; uint32_t FindFirst (const AAX_CString &amp;findStr) const<br/>&#8226; uint32_t FindFirst (const char &#8727;findStr) const<br/>&#8226; uint32_t FindFirst (char findChar) const<br/>&#8226; uint32_t FindLast (const AAX_CString &amp;findStr) const<br/>&#8226; uint32_t FindLast (const char &#8727;findStr) const<br/>&#8226; uint32_t FindLast (char findChar) const<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>630 Class Documentation<br/></b></p>
<p>&#8226; const char &#8727; CString () const<br/>&#8226; bool ToDouble (double &#8727;oValue) const<br/>&#8226; bool ToInteger (int32_t &#8727;oValue) const<br/>&#8226; void SubString (uint32_t pos, uint32_t n, AAX_IString &#8727;outputStr) const<br/>&#8226; bool Equals (const AAX_CString &amp;other) const<br/>&#8226; bool Equals (const char &#8727;other) const<br/>&#8226; bool Equals (const std::string &amp;other) const<br/>&#8226; bool operator== (const AAX_CString &amp;other) const<br/>&#8226; bool operator== (const char &#8727;otherStr) const<br/>&#8226; bool operator== (const std::string &amp;otherStr) const<br/>&#8226; bool operator!= (const AAX_CString &amp;other) const<br/>&#8226; bool operator!= (const char &#8727;otherStr) const<br/>&#8226; bool operator!= (const std::string &amp;otherStr) const<br/>&#8226; bool operator&lt; (const AAX_CString &amp;other) const<br/>&#8226; bool operator&gt; (const AAX_CString &amp;other) const<br/>&#8226; const char &amp; operator[ ] (uint32_t index) const<br/>&#8226; char &amp; operator[ ] (uint32_t index)<br/>&#8226; AAX_CString &amp; operator+= (const AAX_CString &amp;str)<br/>&#8226; AAX_CString &amp; operator+= (const std::string &amp;str)<br/>&#8226; AAX_CString &amp; operator+= (const char &#8727;str)<br/></p>
<p><b>Static Public Attributes<br/></b></p>
<p>&#8226; static const uint32_t kInvalidIndex = static_cast&lt;uint32_t&gt;(-1)<br/>&#8226; static const uint32_t kMaxStringLength = static_cast&lt;uint32_t&gt;(-2)<br/></p>
<p><b>Protected Attributes<br/></b></p>
<p>&#8226; std::string mString<br/></p>
<p><b>Friends<br/></b></p>
<p>&#8226; std::ostream &amp; operator&lt;&lt; (std::ostream &amp;os, const AAX_CString &amp;str)<br/>&#8226; std::istream &amp; operator&gt;&gt; (std::istream &amp;os, AAX_CString &amp;str)<br/></p>
<p><b>14.38.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.38.2.1 AAX_CString() [1/5]<br/></b></p>
<p>AAX_CString::AAX_CString ( )<br/></p>
<p>Constructs an empty string.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.38 AAX_CString Class Reference 631<br/></b></p>
<p><b>14.38.2.2 AAX_CString() [2/5]<br/></b></p>
<p>AAX_CString::AAX_CString (<br/>const char &#8727; str )<br/></p>
<p>Implicit conversion constructor: Constructs a string with a const char&#8727; pointer to copy.<br/></p>
<p><b>14.38.2.3 AAX_CString() [3/5]<br/></b></p>
<p>AAX_CString::AAX_CString (<br/>const std::string &amp; str ) [explicit]<br/></p>
<p>Copy constructor: Constructs a string from a std::string. Beware of STL variations across various binaries.<br/></p>
<p><b>14.38.2.4 AAX_CString() [4/5]<br/></b></p>
<p>AAX_CString::AAX_CString (<br/>const AAX_CString &amp; other )<br/></p>
<p>Copy constructor: Constructs a string with another concrete AAX_CString.<br/></p>
<p><b>14.38.2.5 AAX_CString() [5/5]<br/></b></p>
<p>AAX_CString::AAX_CString (<br/>const AAX_IString &amp; other )<br/></p>
<p>Copy constructor: Constructs a string from another string that meets the AAX_IString interface.<br/></p>
<p><b>14.38.3 Member Function Documentation<br/></b></p>
<p><b>14.38.3.1 Length()<br/></b></p>
<p>uint32_t AAX_CString::Length ( ) const [virtual]<br/></p>
<p>Length methods<br/></p>
<p>Implements AAX_IString.<br/></p>
<p>Referenced by AAX_CBinaryDisplayDelegate&lt; T &gt;::AAX_CBinaryDisplayDelegate(), AAX_CStringAbbreviations&#8592;&#8617;<br/>::Add(), AAX_CStringAbbreviations::Get(), AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;::StringToValue(),<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;::StringToValue(), AAX_CUnitDisplayDelegateDecorator&lt; T &gt;&#8592;&#8617;<br/>::StringToValue(), AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;::StringToValue(), AAX_CDecibelDisplay&#8592;&#8617;<br/>DelegateDecorator&lt; T &gt;::ValueToString(), AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;::Value&#8592;&#8617;<br/>ToString(), and AAX_CUnitDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>632 Class Documentation<br/></b></p>
<p><b>14.38.3.2 MaxLength()<br/></b></p>
<p>uint32_t AAX_CString::MaxLength ( ) const [virtual]<br/></p>
<p>Implements AAX_IString.<br/></p>
<p><b>14.38.3.3 Get()<br/></b></p>
<p>const char&#8727; AAX_CString::Get ( ) const [virtual]<br/></p>
<p>C string methods<br/></p>
<p>Implements AAX_IString.<br/></p>
<p>Referenced by AAX::CopyPageTable(), AAX::PageTableParameterNameVariationsAreEqual(), and AAX_&#8592;&#8617;<br/>CParameter&lt; T &gt;::ShortenedName().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.38.3.4 Set()<br/></b></p>
<p>void AAX_CString::Set (<br/>const char &#8727; iString ) [virtual]<br/></p>
<p>Implements AAX_IString.<br/></p>
<p><b>14.38.3.5 operator=() [1/5]<br/></b></p>
<p>AAX_IString&amp; AAX_CString::operator= (<br/>const AAX_IString &amp; iOther ) [virtual]<br/></p>
<p>Assignment operators<br/></p>
<p>Implements AAX_IString.<br/></p>
<p><b>14.38.3.6 operator=() [2/5]<br/></b></p>
<p>AAX_IString&amp; AAX_CString::operator= (<br/>const char &#8727; iString ) [virtual]<br/></p>
<p>Implements AAX_IString.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.38 AAX_CString Class Reference 633<br/></b></p>
<p><b>14.38.3.7 AAX_DEFAULT_MOVE_CTOR()<br/></b></p>
<p>AAX_CString::AAX_DEFAULT_MOVE_CTOR (<br/>AAX_CString )<br/></p>
<p>Default move constructor<br/></p>
<p><b>14.38.3.8 StdString() [1/2]<br/></b></p>
<p>std::string&amp; AAX_CString::StdString ( )<br/></p>
<p>Direct access to a std::string.<br/></p>
<p><b>14.38.3.9 StdString() [2/2]<br/></b></p>
<p>const std::string&amp; AAX_CString::StdString ( ) const<br/></p>
<p>Direct access to a const std::string.<br/></p>
<p><b>14.38.3.10 operator=() [3/5]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::operator= (<br/>const AAX_CString &amp; other )<br/></p>
<p>Assignment operator from another AAX_CString<br/></p>
<p><b>14.38.3.11 operator=() [4/5]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::operator= (<br/>const std::string &amp; other )<br/></p>
<p>Assignment operator from a std::string. Beware of STL variations across various binaries.<br/></p>
<p><b>14.38.3.12 operator=() [5/5]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::operator= (<br/>AAX_CString &amp;&amp; other )<br/></p>
<p>Move operator<br/></p>
<p><b>14.38.3.13 Clear()<br/></b></p>
<p>void AAX_CString::Clear ( )<br/></p>
<p>Referenced by AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;::ValueToString().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>634 Class Documentation<br/></b></p>
<p><b>14.38.3.14 Empty()<br/></b></p>
<p>bool AAX_CString::Empty ( ) const<br/></p>
<p><b>14.38.3.15 Erase()<br/></b></p>
<p>AAX_CString&amp; AAX_CString::Erase (<br/>uint32_t pos,<br/>uint32_t n )<br/></p>
<p>Referenced by AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;::StringToValue(), and AAX_CNumberDisplay&#8592;&#8617;<br/>Delegate&lt; T, Precision, SpaceAfter &gt;::ValueToString().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.38.3.16 Append() [1/2]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::Append (<br/>const AAX_CString &amp; str )<br/></p>
<p>Referenced by AAX_IMIDIMessageInfoDelegate::ToString_AppendByteRange(), AAX_IMIDIMessageInfo&#8592;&#8617;<br/>Delegate::ToString_AppendCStr(), AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;::ValueToString(),<br/>and AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.38.3.17 Append() [2/2]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::Append (<br/>const char &#8727; str )<br/></p>
<p><b>14.38.3.18 AppendNumber() [1/2]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::AppendNumber (<br/>double number,<br/>int32_t precision )<br/></p>
<p>Referenced by AAX_IMIDIMessageInfoDelegate::ToString_AppendNumber(), and AAX_CNumberDisplay&#8592;&#8617;<br/>Delegate&lt; T, Precision, SpaceAfter &gt;::ValueToString().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.38.3.19 AppendNumber() [2/2]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::AppendNumber (<br/>int32_t number )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.38 AAX_CString Class Reference 635<br/></b></p>
<p><b>14.38.3.20 AppendHex()<br/></b></p>
<p>AAX_CString&amp; AAX_CString::AppendHex (<br/>int32_t number,<br/>int32_t width )<br/></p>
<p>Referenced by AAX_IMIDIMessageInfoDelegate::ToString_AppendByteRange().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.38.3.21 Insert() [1/2]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::Insert (<br/>uint32_t pos,<br/>const AAX_CString &amp; str )<br/></p>
<p><b>14.38.3.22 Insert() [2/2]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::Insert (<br/>uint32_t pos,<br/>const char &#8727; str )<br/></p>
<p><b>14.38.3.23 InsertNumber() [1/2]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::InsertNumber (<br/>uint32_t pos,<br/>double number,<br/>int32_t precision )<br/></p>
<p><b>14.38.3.24 InsertNumber() [2/2]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::InsertNumber (<br/>uint32_t pos,<br/>int32_t number )<br/></p>
<p><b>14.38.3.25 InsertHex()<br/></b></p>
<p>AAX_CString&amp; AAX_CString::InsertHex (<br/>uint32_t pos,<br/>int32_t number,<br/>int32_t width )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>636 Class Documentation<br/></b></p>
<p><b>14.38.3.26 Replace() [1/2]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::Replace (<br/>uint32_t pos,<br/>uint32_t n,<br/>const AAX_CString &amp; str )<br/></p>
<p><b>14.38.3.27 Replace() [2/2]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::Replace (<br/>uint32_t pos,<br/>uint32_t n,<br/>const char &#8727; str )<br/></p>
<p><b>14.38.3.28 FindFirst() [1/3]<br/></b></p>
<p>uint32_t AAX_CString::FindFirst (<br/>const AAX_CString &amp; findStr ) const<br/></p>
<p><b>14.38.3.29 FindFirst() [2/3]<br/></b></p>
<p>uint32_t AAX_CString::FindFirst (<br/>const char &#8727; findStr ) const<br/></p>
<p><b>14.38.3.30 FindFirst() [3/3]<br/></b></p>
<p>uint32_t AAX_CString::FindFirst (<br/>char findChar ) const<br/></p>
<p><b>14.38.3.31 FindLast() [1/3]<br/></b></p>
<p>uint32_t AAX_CString::FindLast (<br/>const AAX_CString &amp; findStr ) const<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.38 AAX_CString Class Reference 637<br/></b></p>
<p><b>14.38.3.32 FindLast() [2/3]<br/></b></p>
<p>uint32_t AAX_CString::FindLast (<br/>const char &#8727; findStr ) const<br/></p>
<p><b>14.38.3.33 FindLast() [3/3]<br/></b></p>
<p>uint32_t AAX_CString::FindLast (<br/>char findChar ) const<br/></p>
<p><b>14.38.3.34 CString()<br/></b></p>
<p>const char&#8727; AAX_CString::CString ( ) const<br/></p>
<p>Referenced by AAX::CopyPageTable(), and AAX_CStatelessParameter::Identifier().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.38.3.35 ToDouble()<br/></b></p>
<p>bool AAX_CString::ToDouble (<br/>double &#8727; oValue ) const<br/></p>
<p>Referenced by AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;::StringToValue().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.38.3.36 ToInteger()<br/></b></p>
<p>bool AAX_CString::ToInteger (<br/>int32_t &#8727; oValue ) const<br/></p>
<p><b>14.38.3.37 SubString()<br/></b></p>
<p>void AAX_CString::SubString (<br/>uint32_t pos,<br/>uint32_t n,<br/>AAX_IString &#8727; outputStr ) const<br/></p>
<p>Referenced by AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;::StringToValue(), AAX_CPercentDisplayDelegate&#8592;&#8617;<br/>Decorator&lt; T &gt;::StringToValue(), and AAX_CUnitDisplayDelegateDecorator&lt; T &gt;::StringToValue().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>638 Class Documentation<br/></b></p>
<p><b>14.38.3.38 Equals() [1/3]<br/></b></p>
<p>bool AAX_CString::Equals (<br/>const AAX_CString &amp; other ) const [inline]<br/></p>
<p>References operator==().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.38.3.39 Equals() [2/3]<br/></b></p>
<p>bool AAX_CString::Equals (<br/>const char &#8727; other ) const [inline]<br/></p>
<p>References operator==().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.38.3.40 Equals() [3/3]<br/></b></p>
<p>bool AAX_CString::Equals (<br/>const std::string &amp; other ) const [inline]<br/></p>
<p>References operator==().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.38.3.41 operator==() [1/3]<br/></b></p>
<p>bool AAX_CString::operator== (<br/>const AAX_CString &amp; other ) const<br/></p>
<p>Referenced by Equals().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.38.3.42 operator==() [2/3]<br/></b></p>
<p>bool AAX_CString::operator== (<br/>const char &#8727; otherStr ) const<br/></p>
<p><b>14.38.3.43 operator==() [3/3]<br/></b></p>
<p>bool AAX_CString::operator== (<br/>const std::string &amp; otherStr ) const<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.38 AAX_CString Class Reference 639<br/></b></p>
<p><b>14.38.3.44 operator&quot;!=() [1/3]<br/></b></p>
<p>bool AAX_CString::operator!= (<br/>const AAX_CString &amp; other ) const<br/></p>
<p><b>14.38.3.45 operator&quot;!=() [2/3]<br/></b></p>
<p>bool AAX_CString::operator!= (<br/>const char &#8727; otherStr ) const<br/></p>
<p><b>14.38.3.46 operator&quot;!=() [3/3]<br/></b></p>
<p>bool AAX_CString::operator!= (<br/>const std::string &amp; otherStr ) const<br/></p>
<p><b>14.38.3.47 operator</b>&lt;<b>()<br/></b></p>
<p>bool AAX_CString::operator&lt; (<br/>const AAX_CString &amp; other ) const<br/></p>
<p><b>14.38.3.48 operator</b>&gt;<b>()<br/></b></p>
<p>bool AAX_CString::operator&gt; (<br/>const AAX_CString &amp; other ) const<br/></p>
<p><b>14.38.3.49 operator[]() [1/2]<br/></b></p>
<p>const char&amp; AAX_CString::operator[] (<br/>uint32_t index ) const<br/></p>
<p><b>14.38.3.50 operator[]() [2/2]<br/></b></p>
<p>char&amp; AAX_CString::operator[] (<br/>uint32_t index )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>640 Class Documentation<br/></b></p>
<p><b>14.38.3.51 operator+=() [1/3]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::operator+= (<br/>const AAX_CString &amp; str )<br/></p>
<p><b>14.38.3.52 operator+=() [2/3]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::operator+= (<br/>const std::string &amp; str )<br/></p>
<p><b>14.38.3.53 operator+=() [3/3]<br/></b></p>
<p>AAX_CString&amp; AAX_CString::operator+= (<br/>const char &#8727; str )<br/></p>
<p><b>14.38.4 Friends And Related Function Documentation<br/></b></p>
<p><b>14.38.4.1 operator</b>&lt;&lt;<br/></p>
<p>std::ostream&amp; operator&lt;&lt; (<br/>std::ostream &amp; os,<br/>const AAX_CString &amp; str ) [friend]<br/></p>
<p>output stream operator for concrete AAX_CString<br/></p>
<p><b>14.38.4.2 operator</b>&gt;&gt;<br/></p>
<p>std::istream&amp; operator&gt;&gt; (<br/>std::istream &amp; os,<br/>AAX_CString &amp; str ) [friend]<br/></p>
<p>input stream operator for concrete AAX_CString<br/></p>
<p><b>14.38.5 Member Data Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.39 AAX_CStringAbbreviations Class Reference 641<br/></b></p>
<p><b>14.38.5.1 kInvalidIndex<br/></b></p>
<p>const uint32_t AAX_CString::kInvalidIndex = static_cast&lt;uint32_t&gt;(-1) [static]<br/></p>
<p><b>14.38.5.2 kMaxStringLength<br/></b></p>
<p>const uint32_t AAX_CString::kMaxStringLength = static_cast&lt;uint32_t&gt;(-2) [static]<br/></p>
<p><b>14.38.5.3 mString<br/></b></p>
<p>std::string AAX_CString::mString [protected]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CString.h<br/></p>
<p><b>14.39 AAX_CStringAbbreviations Class Reference<br/></b></p>
<p>#include &lt;AAX_CString.h&gt;<br/></p>
<p><b>14.39.1 Description<br/></b></p>
<p>Helper class to store a collection of name abbreviations.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CStringAbbreviations (const AAX_CString &amp;inPrimary)<br/>&#8226; void SetPrimary (const AAX_CString &amp;inPrimary)<br/>&#8226; const AAX_CString &amp; Primary () const<br/>&#8226; void Add (const AAX_CString &amp;inAbbreviation)<br/>&#8226; const AAX_CString &amp; Get (int32_t inNumCharacters) const<br/>&#8226; void Clear ()<br/></p>
<p><b>14.39.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.39.2.1 AAX_CStringAbbreviations()<br/></b></p>
<p>AAX_CStringAbbreviations::AAX_CStringAbbreviations (<br/>const AAX_CString &amp; inPrimary ) [inline], [explicit]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>642 Class Documentation<br/></b></p>
<p><b>14.39.3 Member Function Documentation<br/></b></p>
<p><b>14.39.3.1 SetPrimary()<br/></b></p>
<p>void AAX_CStringAbbreviations::SetPrimary (<br/>const AAX_CString &amp; inPrimary ) [inline]<br/></p>
<p>Referenced by AAX_CStatelessParameter::SetName().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.39.3.2 Primary()<br/></b></p>
<p>const AAX_CString&amp; AAX_CStringAbbreviations::Primary ( ) const [inline]<br/></p>
<p>Referenced by AAX_CStatelessParameter::Name().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.39.3.3 Add()<br/></b></p>
<p>void AAX_CStringAbbreviations::Add (<br/>const AAX_CString &amp; inAbbreviation ) [inline]<br/></p>
<p>References AAX_CString::Length().<br/></p>
<p>Referenced by AAX_CStatelessParameter::AddShortenedName().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>14.39.3.4 Get()<br/></b></p>
<p>const AAX_CString&amp; AAX_CStringAbbreviations::Get (<br/>int32_t inNumCharacters ) const [inline]<br/></p>
<p>References AAX_CString::Length().<br/></p>
<p>Referenced by AAX_CStatelessParameter::ShortenedName().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>14.39.3.5 Clear()<br/></b></p>
<p>void AAX_CStringAbbreviations::Clear ( ) [inline]<br/></p>
<p>Referenced by AAX_CStatelessParameter::ClearShortenedNames().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CString.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.40 AAX_CStringDataBuffer Class Reference 643<br/></b></p>
<p><b>14.40 AAX_CStringDataBuffer Class Reference<br/></b></p>
<p>#include &lt;AAX_CStringDataBuffer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CStringDataBuffer:<br/></p>
<p>Collaboration diagram for AAX_CStringDataBuffer:<br/></p>
<p><b>14.40.1 Description<br/></b></p>
<p>A convenience class for string data buffers.<br/></p>
<p>The data payload is a char&#8727; C string<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CStringDataBuffer (AAX_CTypeID inType, std::string const &amp;inData)<br/>&#8226; AAX_CStringDataBuffer (AAX_CTypeID inType, std::string &amp;&amp;inData)<br/>&#8226; AAX_CStringDataBuffer (AAX_CTypeID inType, const char &#8727;inData)<br/>&#8226; AAX_CStringDataBuffer (AAX_CStringDataBuffer const &amp;)=delete<br/>&#8226; AAX_CStringDataBuffer (AAX_CStringDataBuffer &amp;&amp;)=delete<br/>&#8226; &#8764;AAX_CStringDataBuffer (void) AAX_OVERRIDE=default<br/>&#8226; AAX_CStringDataBuffer &amp; operator= (AAX_CStringDataBuffer const &amp;other)=delete<br/>&#8226; AAX_CStringDataBuffer &amp; operator= (AAX_CStringDataBuffer &amp;&amp;other)=delete<br/>&#8226; AAX_Result Type (AAX_CTypeID &#8727;oType) const AAX_OVERRIDE<br/>&#8226; AAX_Result Size (int32_t &#8727;oSize) const AAX_OVERRIDE<br/>&#8226; AAX_Result Data (void const &#8727;&#8727;oBuffer) const AAX_OVERRIDE<br/></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.40.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.40.2.1 AAX_CStringDataBuffer() [1/5]<br/></b></p>
<p>AAX_CStringDataBuffer::AAX_CStringDataBuffer (<br/>AAX_CTypeID inType,<br/>std::string const &amp; inData ) [inline]<br/></p>
<p><b>14.40.2.2 AAX_CStringDataBuffer() [2/5]<br/></b></p>
<p>AAX_CStringDataBuffer::AAX_CStringDataBuffer (<br/>AAX_CTypeID inType,<br/>std::string &amp;&amp; inData ) [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>644 Class Documentation<br/></b></p>
<p><b>14.40.2.3 AAX_CStringDataBuffer() [3/5]<br/></b></p>
<p>AAX_CStringDataBuffer::AAX_CStringDataBuffer (<br/>AAX_CTypeID inType,<br/>const char &#8727; inData ) [inline]<br/></p>
<p><b>14.40.2.4 AAX_CStringDataBuffer() [4/5]<br/></b></p>
<p>AAX_CStringDataBuffer::AAX_CStringDataBuffer (<br/>AAX_CStringDataBuffer const &amp; ) [delete]<br/></p>
<p><b>14.40.2.5 AAX_CStringDataBuffer() [5/5]<br/></b></p>
<p>AAX_CStringDataBuffer::AAX_CStringDataBuffer (<br/>AAX_CStringDataBuffer &amp;&amp; ) [delete]<br/></p>
<p><b>14.40.2.6 </b>&#8764;<b>AAX_CStringDataBuffer()<br/></b></p>
<p>AAX_CStringDataBuffer::&#8764;AAX_CStringDataBuffer (<br/>void ) [default]<br/></p>
<p><b>14.40.3 Member Function Documentation<br/></b></p>
<p><b>14.40.3.1 operator=() [1/2]<br/></b></p>
<p>AAX_CStringDataBuffer&amp; AAX_CStringDataBuffer::operator= (<br/>AAX_CStringDataBuffer const &amp; other ) [delete]<br/></p>
<p><b>14.40.3.2 operator=() [2/2]<br/></b></p>
<p>AAX_CStringDataBuffer&amp; AAX_CStringDataBuffer::operator= (<br/>AAX_CStringDataBuffer &amp;&amp; other ) [delete]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.41 AAX_CStringDataBufferOfType</b>&lt; <b>T </b>&gt; <b>Class Template Reference 645<br/></b></p>
<p><b>14.40.3.3 Type()<br/></b></p>
<p>AAX_Result AAX_CStringDataBuffer::Type (<br/>AAX_CTypeID &#8727; oType ) const [inline], [virtual]<br/></p>
<p>The type of data contained in this buffer<br/></p>
<p>This identifier must be sufficient for a client that knows the type to correctly interpret and use the data.<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, and AAX_SUCCESS.<br/></p>
<p><b>14.40.3.4 Size()<br/></b></p>
<p>AAX_Result AAX_CStringDataBuffer::Size (<br/>int32_t &#8727; oSize ) const [inline], [virtual]<br/></p>
<p>The number of bytes of data in this buffer<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, AAX_ERROR_SIGNED_INT_OVERFLOW, and AAX_SUCCESS.<br/></p>
<p><b>14.40.3.5 Data()<br/></b></p>
<p>AAX_Result AAX_CStringDataBuffer::Data (<br/>void const &#8727;&#8727; oBuffer ) const [inline], [virtual]<br/></p>
<p>The buffer of data<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, and AAX_SUCCESS.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CStringDataBuffer.h<br/></p>
<p><b>14.41 AAX_CStringDataBufferOfType</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CStringDataBuffer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CStringDataBufferOfType&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CStringDataBufferOfType&lt; T &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>646 Class Documentation<br/></b></p>
<p><b>14.41.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>AAX_CTypeID T</b>&gt;<br/><b>class AAX_CStringDataBufferOfType</b>&lt; <b>T </b>&gt;<br/></p>
<p>A convenience class for string data buffers.<br/></p>
<p>The data payload is a char&#8727; C string<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CStringDataBufferOfType (std::string const &amp;inData)<br/>&#8226; AAX_CStringDataBufferOfType (std::string &amp;&amp;inData)<br/>&#8226; AAX_CStringDataBufferOfType (const char &#8727;inData)<br/>&#8226; AAX_CStringDataBufferOfType (AAX_CStringDataBufferOfType const &amp;)=delete<br/>&#8226; AAX_CStringDataBufferOfType (AAX_CStringDataBufferOfType &amp;&amp;)=delete<br/>&#8226; &#8764;AAX_CStringDataBufferOfType (void) AAX_OVERRIDE=default<br/>&#8226; AAX_CStringDataBufferOfType &amp; operator= (AAX_CStringDataBufferOfType const &amp;other)=delete<br/>&#8226; AAX_CStringDataBufferOfType &amp; operator= (AAX_CStringDataBufferOfType &amp;&amp;other)=delete<br/>&#8226; AAX_Result Type (AAX_CTypeID &#8727;oType) const AAX_OVERRIDE<br/>&#8226; AAX_Result Size (int32_t &#8727;oSize) const AAX_OVERRIDE<br/>&#8226; AAX_Result Data (void const &#8727;&#8727;oBuffer) const AAX_OVERRIDE<br/></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.41.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.41.2.1 AAX_CStringDataBufferOfType() [1/5]<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_CStringDataBufferOfType&lt; T &gt;::AAX_CStringDataBufferOfType (<br/></p>
<p>std::string const &amp; inData ) [inline], [explicit]<br/></p>
<p><b>14.41.2.2 AAX_CStringDataBufferOfType() [2/5]<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_CStringDataBufferOfType&lt; T &gt;::AAX_CStringDataBufferOfType (<br/></p>
<p>std::string &amp;&amp; inData ) [inline], [explicit]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.41 AAX_CStringDataBufferOfType</b>&lt; <b>T </b>&gt; <b>Class Template Reference 647<br/></b></p>
<p><b>14.41.2.3 AAX_CStringDataBufferOfType() [3/5]<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_CStringDataBufferOfType&lt; T &gt;::AAX_CStringDataBufferOfType (<br/></p>
<p>const char &#8727; inData ) [inline], [explicit]<br/></p>
<p><b>14.41.2.4 AAX_CStringDataBufferOfType() [4/5]<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_CStringDataBufferOfType&lt; T &gt;::AAX_CStringDataBufferOfType (<br/></p>
<p>AAX_CStringDataBufferOfType&lt; T &gt; const &amp; ) [delete]<br/></p>
<p><b>14.41.2.5 AAX_CStringDataBufferOfType() [5/5]<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_CStringDataBufferOfType&lt; T &gt;::AAX_CStringDataBufferOfType (<br/></p>
<p>AAX_CStringDataBufferOfType&lt; T &gt; &amp;&amp; ) [delete]<br/></p>
<p><b>14.41.2.6 </b>&#8764;<b>AAX_CStringDataBufferOfType()<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_CStringDataBufferOfType&lt; T &gt;::&#8764;AAX_CStringDataBufferOfType (<br/></p>
<p>void ) [default]<br/></p>
<p><b>14.41.3 Member Function Documentation<br/></b></p>
<p><b>14.41.3.1 operator=() [1/2]<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_CStringDataBufferOfType&amp; AAX_CStringDataBufferOfType&lt; T &gt;::operator= (<br/></p>
<p>AAX_CStringDataBufferOfType&lt; T &gt; const &amp; other ) [delete]<br/></p>
<p><b>14.41.3.2 operator=() [2/2]<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_CStringDataBufferOfType&amp; AAX_CStringDataBufferOfType&lt; T &gt;::operator= (<br/></p>
<p>AAX_CStringDataBufferOfType&lt; T &gt; &amp;&amp; other ) [delete]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>648 Class Documentation<br/></b></p>
<p><b>14.41.3.3 Type()<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_Result AAX_CStringDataBufferOfType&lt; T &gt;::Type (<br/></p>
<p>AAX_CTypeID &#8727; oType ) const [inline], [virtual]<br/></p>
<p>The type of data contained in this buffer<br/></p>
<p>This identifier must be sufficient for a client that knows the type to correctly interpret and use the data.<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, and AAX_SUCCESS.<br/></p>
<p><b>14.41.3.4 Size()<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_Result AAX_CStringDataBufferOfType&lt; T &gt;::Size (<br/></p>
<p>int32_t &#8727; oSize ) const [inline], [virtual]<br/></p>
<p>The number of bytes of data in this buffer<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, AAX_ERROR_SIGNED_INT_OVERFLOW, and AAX_SUCCESS.<br/></p>
<p><b>14.41.3.5 Data()<br/></b></p>
<p>template&lt;AAX_CTypeID T&gt;<br/>AAX_Result AAX_CStringDataBufferOfType&lt; T &gt;::Data (<br/></p>
<p>void const &#8727;&#8727; oBuffer ) const [inline], [virtual]<br/></p>
<p>The buffer of data<br/></p>
<p>Implements AAX_IACFDataBuffer.<br/></p>
<p>References AAX_ERROR_NULL_ARGUMENT, and AAX_SUCCESS.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CStringDataBuffer.h<br/></p>
<p><b>14.42 AAX_CStringDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_CStringDisplayDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CStringDisplayDelegate&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CStringDisplayDelegate&lt; T &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.42 AAX_CStringDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 649<br/></b></p>
<p><b>14.42.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CStringDisplayDelegate</b>&lt; <b>T </b>&gt;<br/></p>
<p>A string, or list, display format conforming to AAX_IDisplayDelegate.<br/></p>
<p>This display delegate uses a string map to associate parameter values with specific strings. This kind of display<br/>delegate is most often used for control string or list parameters, which would internally use an integer parameter<br/>type. The int value would then be used as a lookup into this delegate, which would return a string for each valid int<br/>value.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CStringDisplayDelegate (const std::map&lt; T, AAX_CString &gt; &amp;stringMap)<br/></p>
<p>Constructor.<br/>&#8226; AAX_CStringDisplayDelegate&lt; T &gt; &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/>&#8226; bool ValueToString (T value, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation.<br/>&#8226; bool ValueToString (T value, int32_t maxNumChars, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p>&#8226; bool StringToValue (const AAX_CString &amp;valueString, T &#8727;value) const AAX_OVERRIDE<br/>Converts a string to a real parameter value.<br/></p>
<p><b>Protected Attributes<br/></b>&#8226; std::map&lt; T, AAX_CString &gt; mStringMap<br/>&#8226; std::map&lt; AAX_CString, T &gt; mInverseStringMap<br/></p>
<p><b>14.42.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.42.2.1 AAX_CStringDisplayDelegate()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CStringDisplayDelegate&lt; T &gt;::AAX_CStringDisplayDelegate (<br/></p>
<p>const std::map&lt; T, AAX_CString &gt; &amp; stringMap )<br/></p>
<p>Constructor.<br/></p>
<p>Constructs a String Display Delegate with a provided string map.<br/></p>
<p><b>Note<br/></b>The string map should already be populated with value-string pairs, as this constructor will copy the provided<br/>map into the delegate object's own memory.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>650 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in stringMap A populated map of value-string pairs<br/></p>
<p>References AAX_CStringDisplayDelegate&lt; T &gt;::mInverseStringMap, and AAX_CStringDisplayDelegate&lt; T &gt;&#8592;&#8617;<br/>::mStringMap.<br/></p>
<p><b>14.42.3 Member Function Documentation<br/></b></p>
<p><b>14.42.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CStringDisplayDelegate&lt; T &gt; &#8727; AAX_CStringDisplayDelegate&lt; T &gt;::Clone ( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassDisplayDelegate&lt;T&gt;* AAX_CSubclassDisplayDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassDisplayDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.42.3.2 ValueToString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CStringDisplayDelegate&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.42 AAX_CStringDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 651<br/></b></p>
<p><b>14.42.3.3 ValueToString() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CStringDisplayDelegate&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>int32_t maxNumChars,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>in maxNumChars Size hint for the desired maximum number of characters in the string (not including<br/></p>
<p>null termination)<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.42.3.4 StringToValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CStringDisplayDelegate&lt; T &gt;::StringToValue (<br/></p>
<p>const AAX_CString &amp; valueString,<br/>T &#8727; value ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>652 Class Documentation<br/></b></p>
<p><b>14.42.4 Member Data Documentation<br/></b></p>
<p><b>14.42.4.1 mStringMap<br/></b></p>
<p>template&lt;typename T &gt;<br/>std::map&lt;T, AAX_CString&gt; AAX_CStringDisplayDelegate&lt; T &gt;::mStringMap [protected]<br/></p>
<p>Referenced by AAX_CStringDisplayDelegate&lt; T &gt;::AAX_CStringDisplayDelegate().<br/></p>
<p><b>14.42.4.2 mInverseStringMap<br/></b></p>
<p>template&lt;typename T &gt;<br/>std::map&lt;AAX_CString, T&gt; AAX_CStringDisplayDelegate&lt; T &gt;::mInverseStringMap [protected]<br/></p>
<p>Referenced by AAX_CStringDisplayDelegate&lt; T &gt;::AAX_CStringDisplayDelegate().<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CStringDisplayDelegate.h<br/></p>
<p><b>14.43 AAX_CTask Class Reference<br/></b></p>
<p>#include &lt;AAX_CTask.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CTask:<br/></p>
<p>Collaboration diagram for AAX_CTask:<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; ACF_DECLARE_STANDARD_UNKNOWN () ACFMETHOD(InternalQueryInterface)(const acfIID &amp;riid<br/>&#8226; AAX_DELETE (AAX_CTask &amp;operator=(const AAX_CTask &amp;))<br/>&#8226; AAX_CTask (AAX_CTypeID iType)<br/>&#8226; AAX_DEFAULT_DTOR_OVERRIDE (AAX_CTask)<br/>&#8226; AAX_Result GetType (AAX_CTypeID &#8727;oType) const AAX_OVERRIDE<br/>&#8226; AAX_IACFDataBuffer const &#8727; GetArgumentOfType (AAX_CTypeID iType) const AAX_OVERRIDE<br/>&#8226; AAX_Result SetProgress (float iProgress) AAX_OVERRIDE<br/>&#8226; float GetProgress () const AAX_OVERRIDE<br/>&#8226; AAX_Result AddResult (AAX_IACFDataBuffer const &#8727;iResult) AAX_OVERRIDE<br/></p>
<p>Attach result data to this task.<br/>&#8226; AAX_Result SetDone (AAX_TaskCompletionStatus iStatus) AAX_OVERRIDE<br/></p>
<p>Inform the host that the task is completed.<br/>&#8226; AAX_TaskCompletionStatus Status () const<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.43 AAX_CTask Class Reference 653<br/></b></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; void &#8727;&#8727;ppvObjOut AAX_OVERRIDE<br/></p>
<p><b>14.43.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.43.1.1 AAX_CTask()<br/></b></p>
<p>AAX_CTask::AAX_CTask (<br/>AAX_CTypeID iType ) [explicit]<br/></p>
<p><b>14.43.2 Member Function Documentation<br/></b></p>
<p><b>14.43.2.1 ACF_DECLARE_STANDARD_UNKNOWN()<br/></b></p>
<p>AAX_CTask::ACF_DECLARE_STANDARD_UNKNOWN ( ) const &amp;<br/></p>
<p><b>14.43.2.2 AAX_DELETE()<br/></b></p>
<p>AAX_CTask::AAX_DELETE (<br/>AAX_CTask &amp; operator = (const AAX_CTask &amp;) )<br/></p>
<p><b>14.43.2.3 AAX_DEFAULT_DTOR_OVERRIDE()<br/></b></p>
<p>AAX_CTask::AAX_DEFAULT_DTOR_OVERRIDE (<br/>AAX_CTask )<br/></p>
<p><b>14.43.2.4 GetType()<br/></b></p>
<p>AAX_Result AAX_CTask::GetType (<br/>AAX_CTypeID &#8727; oType ) const [virtual]<br/></p>
<p>An identifier defining the type of the requested task<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>654 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out oType The type of this task request<br/></p>
<p>Implements AAX_IACFTask.<br/></p>
<p><b>14.43.2.5 GetArgumentOfType()<br/></b></p>
<p>AAX_IACFDataBuffer const&#8727; AAX_CTask::GetArgumentOfType (<br/>AAX_CTypeID iType ) const [virtual]<br/></p>
<p>Additional information defining the request, depending on the task type<br/></p>
<p><b>Parameters<br/></b>in iType The type of argument requested. Possible argument types, if any, and the resulting data buffer<br/></p>
<p>format must be defined per task type.<br/></p>
<p><b>Returns<br/></b>The requested argument data, or nullptr. This data buffer's type ID is expected to match iType . The caller<br/>takes ownership of this object.<br/></p>
<p>Implements AAX_IACFTask.<br/></p>
<p><b>14.43.2.6 SetProgress()<br/></b></p>
<p>AAX_Result AAX_CTask::SetProgress (<br/>float iProgress ) [virtual]<br/></p>
<p>Inform the host about the current status of the task<br/></p>
<p><b>Parameters<br/></b>in iProgress A value between 0 (no progress) and 1 (complete)<br/></p>
<p>Implements AAX_IACFTask.<br/></p>
<p><b>14.43.2.7 GetProgress()<br/></b></p>
<p>float AAX_CTask::GetProgress ( ) const [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.43 AAX_CTask Class Reference 655<br/></b></p>
<p>Returns the current progress<br/></p>
<p>Implements AAX_IACFTask.<br/></p>
<p><b>14.43.2.8 AddResult()<br/></b></p>
<p>AAX_Result AAX_CTask::AddResult (<br/>AAX_IACFDataBuffer const &#8727; iResult ) [virtual]<br/></p>
<p>Attach result data to this task.<br/></p>
<p>This can be called multiple times to add multiple types of results to a single task.<br/></p>
<p>The host may process the result data immediately or may wait for the task to complete.<br/></p>
<p>The plug-in is expected to release the data buffer upon making this call. At a minimum, the data buffer must not be<br/>changed after this call is made. See ACFPtr::inArg()<br/></p>
<p><b>Parameters<br/></b>in iResult A buffer containing the result data. Expected result types, if any, and their data buffer format<br/></p>
<p>must be defined per task type.<br/></p>
<p>Implements AAX_IACFTask.<br/></p>
<p><b>14.43.2.9 SetDone()<br/></b></p>
<p>AAX_Result AAX_CTask::SetDone (<br/>AAX_TaskCompletionStatus iStatus ) [virtual]<br/></p>
<p>Inform the host that the task is completed.<br/></p>
<p>If AAX_SUCCESS is returned, the object should be considered invalid and released by the caller.<br/></p>
<p><b>Parameters<br/></b>in iStatus The final status of the task. This indicates to the host whether or not the task was performed<br/></p>
<p>as requested.<br/></p>
<p>Implements AAX_IACFTask.<br/></p>
<p><b>14.43.2.10 Status()<br/></b></p>
<p>AAX_TaskCompletionStatus AAX_CTask::Status ( ) const [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>656 Class Documentation<br/></b></p>
<p><b>14.43.3 Member Data Documentation<br/></b></p>
<p><b>14.43.3.1 AAX_OVERRIDE<br/></b></p>
<p>void&#8727;&#8727; ppvObjOut AAX_CTask::AAX_OVERRIDE<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CTask.h<br/></p>
<p><b>14.44 AAX_CTaskAgent Class Reference<br/></b></p>
<p>#include &lt;AAX_CTaskAgent.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CTaskAgent:<br/></p>
<p>Collaboration diagram for AAX_CTaskAgent:<br/></p>
<p><b>14.44.1 Description<br/></b></p>
<p>Default implementation of the AAX_ITaskAgent interface.<br/></p>
<p>This class provides a default implementation of the AAX_ITaskAgent interface. Your plug-in's task agent implemen-<br/>tation should inherit from this class and override the remaining interface functions.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CTaskAgent (void)=default<br/>&#8226; &#8764;AAX_CTaskAgent (void) AAX_OVERRIDE<br/></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; AAX_Result Initialize (IACFUnknown &#8727;iController) AAX_OVERRIDE<br/>&#8226; AAX_Result Uninitialize (void) AAX_OVERRIDE<br/></p>
<p><b>Private member accessors<br/></b></p>
<p>&#8226; AAX_IController &#8727; GetController (void)<br/>Returns a pointer to the plug-in's controller interface.<br/></p>
<p>&#8226; AAX_IEffectParameters &#8727; GetEffectParameters (void)<br/>Returns a pointer to the plug-in's data model interface.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.44 AAX_CTaskAgent Class Reference 657<br/></b></p>
<p><b>Task management<br/></b></p>
<p>&#8226; AAX_Result AddTask (IACFUnknown &#8727;iTask) AAX_OVERRIDE<br/>Default implemenation of AddTask()<br/></p>
<p>&#8226; AAX_Result CancelAllTasks () AAX_OVERRIDE<br/>&#8226; virtual AAX_Result AddTask (std::unique_ptr&lt; AAX_ITask &gt; iTask)<br/></p>
<p>Convenience method for adding versioned tasks.<br/>&#8226; virtual AAX_Result ReceiveTask (std::unique_ptr&lt; AAX_ITask &gt; iTask)<br/></p>
<p>Convenience method for adding versioned tasks.<br/></p>
<p><b>Additional Inherited Members<br/></b></p>
<p><b>14.44.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.44.2.1 AAX_CTaskAgent()<br/></b></p>
<p>AAX_CTaskAgent::AAX_CTaskAgent (<br/>void ) [default]<br/></p>
<p><b>14.44.2.2 </b>&#8764;<b>AAX_CTaskAgent()<br/></b></p>
<p>AAX_CTaskAgent::&#8764;AAX_CTaskAgent (<br/>void )<br/></p>
<p><b>14.44.3 Member Function Documentation<br/></b></p>
<p><b>14.44.3.1 Initialize()<br/></b></p>
<p>AAX_Result AAX_CTaskAgent::Initialize (<br/>IACFUnknown &#8727; iController ) [virtual]<br/></p>
<p>Initialize the object<br/></p>
<p><b>Parameters<br/></b>in iController Interface allowing access to other objects in the object graph such as the plug-in's data<br/></p>
<p>model.<br/></p>
<p>Implements AAX_IACFTaskAgent.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>658 Class Documentation<br/></b></p>
<p><b>14.44.3.2 Uninitialize()<br/></b></p>
<p>AAX_Result AAX_CTaskAgent::Uninitialize (<br/>void ) [virtual]<br/></p>
<p>Uninitialize the object<br/></p>
<p>This method should release references to any shared objects<br/></p>
<p>Implements AAX_IACFTaskAgent.<br/></p>
<p><b>14.44.3.3 AddTask() [1/2]<br/></b></p>
<p>AAX_Result AAX_CTaskAgent::AddTask (<br/>IACFUnknown &#8727; iTask ) [virtual]<br/></p>
<p>Default implemenation of AddTask()<br/></p>
<p>Convenience implementation that converts the IACFUnknown into an AAX_ITask . Implementations should override<br/>the version that provides an AAX_ITask object.<br/></p>
<p>Implements AAX_IACFTaskAgent.<br/></p>
<p><b>14.44.3.4 CancelAllTasks()<br/></b></p>
<p>AAX_Result AAX_CTaskAgent::CancelAllTasks ( ) [virtual]<br/></p>
<p>Request that the agent cancel all outstanding tasks<br/></p>
<p>Implements AAX_IACFTaskAgent.<br/></p>
<p><b>14.44.3.5 AddTask() [2/2]<br/></b></p>
<p>virtual AAX_Result AAX_CTaskAgent::AddTask (<br/>std::unique_ptr&lt; AAX_ITask &gt; iTask ) [protected], [virtual]<br/></p>
<p>Convenience method for adding versioned tasks.<br/></p>
<p><b>Deprecated </b>Use ReceiveTask() instead<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.45 AAX_CTempoBreakpoint Struct Reference 659<br/></b></p>
<p><b>14.44.3.6 ReceiveTask()<br/></b></p>
<p>virtual AAX_Result AAX_CTaskAgent::ReceiveTask (<br/>std::unique_ptr&lt; AAX_ITask &gt; iTask ) [protected], [virtual]<br/></p>
<p>Convenience method for adding versioned tasks.<br/></p>
<p><b>14.44.3.7 GetController()<br/></b></p>
<p>AAX_IController&#8727; AAX_CTaskAgent::GetController (<br/>void ) [inline]<br/></p>
<p>Returns a pointer to the plug-in's controller interface.<br/></p>
<p><b>14.44.3.8 GetEffectParameters()<br/></b></p>
<p>AAX_IEffectParameters&#8727; AAX_CTaskAgent::GetEffectParameters (<br/>void ) [inline]<br/></p>
<p>Returns a pointer to the plug-in's data model interface.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CTaskAgent.h<br/></p>
<p><b>14.45 AAX_CTempoBreakpoint Struct Reference<br/></b></p>
<p>#include &lt;AAX_SessionDocumentTypes.h&gt;<br/></p>
<p><b>Public Attributes<br/></b>&#8226; int64_t mSampleLocation {0}<br/>&#8226; float mValue {0.f}<br/></p>
<p><b>14.45.1 Member Data Documentation<br/></b></p>
<p><b>14.45.1.1 mSampleLocation<br/></b></p>
<p>int64_t AAX_CTempoBreakpoint::mSampleLocation {0}<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>660 Class Documentation<br/></b></p>
<p><b>14.45.1.2 mValue<br/></b></p>
<p>float AAX_CTempoBreakpoint::mValue {0.f}<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_SessionDocumentTypes.h<br/></p>
<p><b>14.46 AAX_CUnitDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template<br/>Reference<br/></b></p>
<p>#include &lt;AAX_CUnitDisplayDelegateDecorator.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CUnitDisplayDelegateDecorator&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CUnitDisplayDelegateDecorator&lt; T &gt;:<br/></p>
<p><b>14.46.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CUnitDisplayDelegateDecorator</b>&lt; <b>T </b>&gt;<br/></p>
<p>A unit type decorator conforming to AAX_IDisplayDelegateDecorator.<br/></p>
<p>This class is an AAX_IDisplayDelegateDecorator, meaning that it acts as a wrapper for other display del-<br/>egates or concrete display types. For more information about display delegate decorators in AAX, see<br/>Display delegate decorators<br/></p>
<p>The behavior of this class it to decorate parameter value strings with arbitrary units, such as &quot;Hz&quot; or &quot;V&quot;. The inverse<br/>is also supported, so the unit string is pulled off of value strings when they are converted to real parameter values.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_CUnitDisplayDelegateDecorator (const AAX_IDisplayDelegate&lt; T &gt; &amp;displayDelegate, const<br/></p>
<p>AAX_CString &amp;unitString)<br/>Constructor.<br/></p>
<p>&#8226; AAX_CUnitDisplayDelegateDecorator&lt; T &gt; &#8727; Clone () const AAX_OVERRIDE<br/>Constructs and returns a copy of the display delegate.<br/></p>
<p>&#8226; bool ValueToString (T value, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/>Converts a real parameter value to a string representation.<br/></p>
<p>&#8226; bool ValueToString (T value, int32_t maxNumChars, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p>&#8226; bool StringToValue (const AAX_CString &amp;valueString, T &#8727;value) const AAX_OVERRIDE<br/>Converts a string to a real parameter value.<br/></p>
<p><b>Protected Attributes<br/></b>&#8226; const AAX_CString mUnitString<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.46 AAX_CUnitDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template Reference 661<br/></b></p>
<p><b>14.46.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.46.2.1 AAX_CUnitDisplayDelegateDecorator()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;::AAX_CUnitDisplayDelegateDecorator (<br/></p>
<p>const AAX_IDisplayDelegate&lt; T &gt; &amp; displayDelegate,<br/>const AAX_CString &amp; unitString )<br/></p>
<p>Constructor.<br/></p>
<p>Along with the standard decorator pattern argument, this class also takes a unit string. This is the string that will be<br/>added to the end of valueString.<br/></p>
<p><b>Parameters<br/></b>in displayDelegate<br/>in unitString<br/></p>
<p><b>14.46.3 Member Function Documentation<br/></b></p>
<p><b>14.46.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt; &#8727; AAX_CUnitDisplayDelegateDecorator&lt; T &gt;::Clone ( )<br/>const [virtual]<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassDisplayDelegate&lt;T&gt;* AAX_CSubclassDisplayDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassDisplayDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.46.3.2 ValueToString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CUnitDisplayDelegateDecorator&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>662 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_IDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.46.3.3 ValueToString() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CUnitDisplayDelegateDecorator&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>int32_t maxNumChars,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>in maxNumChars Size hint for the desired maximum number of characters in the string (not including<br/></p>
<p>null termination)<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_CString::Length(), and AAX_IDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.46.3.4 StringToValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CUnitDisplayDelegateDecorator&lt; T &gt;::StringToValue (<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.47 AAX_CUnitPrefixDisplayDelegateDecorator&lt; T </b>&gt; <b>Class Template Reference 663<br/></b></p>
<p>const AAX_CString &amp; valueString,<br/>T &#8727; value ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_CString::Length(), AAX_IDisplayDelegateDecorator&lt; T &gt;::StringToValue(), and AAX_CString&#8592;&#8617;<br/>::SubString().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.46.4 Member Data Documentation<br/></b></p>
<p><b>14.46.4.1 mUnitString<br/></b></p>
<p>template&lt;typename T &gt;<br/>const AAX_CString AAX_CUnitDisplayDelegateDecorator&lt; T &gt;::mUnitString [protected]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CUnitDisplayDelegateDecorator.h<br/></p>
<p><b>14.47 AAX_CUnitPrefixDisplayDelegateDecorator&lt; T </b>&gt; <b>Class Template<br/>Reference<br/></b></p>
<p>#include &lt;AAX_CUnitPrefixDisplayDelegateDecorator.h&gt;<br/></p>
<p>Inheritance diagram for AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>664 Class Documentation<br/></b></p>
<p><b>14.47.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_CUnitPrefixDisplayDelegateDecorator&lt; T </b>&gt;<br/></p>
<p>A unit prefix decorator conforming to AAX_IDisplayDelegateDecorator.<br/></p>
<p>This class is an AAX_IDisplayDelegateDecorator, meaning that it acts as a wrapper for other display del-<br/>egates or concrete display types. For more information about display delegate decorators in AAX, see<br/>Display delegate decorators<br/></p>
<p>The behavior of this class it to provide unit prefixes such as the k in kHz or the m in mm. It takes the value passed<br/>in and determines if the value is large or small enough to benefit from a unit modifier. If so, it adds that unit prefix<br/>character to the display string after scaling the number and calling deeper into the decorator pattern to get the<br/>concrete ValueToString() result.<br/></p>
<p>The inverse is also supported, so if you type 1.5k in a text box and this decorator is in place, it should find the k and<br/>multiply the value by 1000 before converting it to a real value.<br/></p>
<p>This decorator supports the following unit prefixes:<br/></p>
<p>&#8226; M (mega-)<br/></p>
<p>&#8226; k (kilo-)<br/></p>
<p>&#8226; m (milli-)<br/></p>
<p>&#8226; u (micro-)<br/></p>
<p><b>Note<br/></b>This class is not implemented for integer values as the conversions result in fractional numbers. Those would<br/>get truncated through the system and be pretty much useless.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_CUnitPrefixDisplayDelegateDecorator (const AAX_IDisplayDelegate&lt; T &gt; &amp;displayDelegate)<br/>&#8226; AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt; &#8727; Clone () const AAX_OVERRIDE<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/>&#8226; bool ValueToString (T value, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation.<br/>&#8226; bool ValueToString (T value, int32_t maxNumChars, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p>&#8226; bool StringToValue (const AAX_CString &amp;valueString, T &#8727;value) const AAX_OVERRIDE<br/>Converts a string to a real parameter value.<br/></p>
<p><b>14.47.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.47 AAX_CUnitPrefixDisplayDelegateDecorator&lt; T </b>&gt; <b>Class Template Reference 665<br/></b></p>
<p><b>14.47.2.1 AAX_CUnitPrefixDisplayDelegateDecorator()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;::AAX_CUnitPrefixDisplayDelegateDecorator (<br/></p>
<p>const AAX_IDisplayDelegate&lt; T &gt; &amp; displayDelegate )<br/></p>
<p><b>14.47.3 Member Function Documentation<br/></b></p>
<p><b>14.47.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt; &#8727; AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;&#8592;&#8617;<br/>::Clone ( ) const [virtual]<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassDisplayDelegate&lt;T&gt;* AAX_CSubclassDisplayDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassDisplayDelegate(*this);<br/>}<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.47.3.2 ValueToString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX::fabsf(), and AAX_IDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>666 Class Documentation<br/></b></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.47.3.3 ValueToString() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>int32_t maxNumChars,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>in maxNumChars Size hint for the desired maximum number of characters in the string (not including<br/></p>
<p>null termination)<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX::fabsf(), and AAX_IDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.47.3.4 StringToValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;::StringToValue (<br/></p>
<p>const AAX_CString &amp; valueString,<br/>T &#8727; value ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.48 AAX_FastInterpolatedTableLookup</b>&lt; <b>TFLOAT, DFLOAT </b>&gt; <b>Class Template Reference 667<br/></b></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>References AAX_CString::Erase(), AAX_CString::Length(), and AAX_IDisplayDelegateDecorator&lt; T &gt;::String&#8592;&#8617;<br/>ToValue().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CUnitPrefixDisplayDelegateDecorator.h<br/></p>
<p><b>14.48 AAX_FastInterpolatedTableLookup</b>&lt; <b>TFLOAT, DFLOAT </b>&gt; <b>Class<br/>Template Reference<br/></b></p>
<p>#include &lt;AAX_FastInterpolatedTableLookup.h&gt;<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; void SetParameters (int iTableSize, TFLOAT iMin=0.0, TFLOAT iMax=1.0, int iNumTables=1)<br/>Set the table lookup parameters.<br/></p>
<p>&#8226; DFLOAT DoTableLookupExtraFast (const TFLOAT &#8727;const iTable, DFLOAT iValue) const<br/>Perform an extra fast table lookup :)<br/></p>
<p>&#8226; void DoTableLookupExtraFastMulti (const TFLOAT &#8727;iTable, DFLOAT iValue, DFLOAT &#8727;oValues) const<br/>&#8226; void DoTableLookupExtraFast (const TFLOAT &#8727;const iTable, const TFLOAT &#8727;const inpBuf, DFLOAT &#8727;const<br/></p>
<p>outBuf, int blockSize)<br/>&#8226; TFLOAT GetMin ()<br/>&#8226; TFLOAT GetMaxMinusMin ()<br/></p>
<p><b>14.48.1 Member Function Documentation<br/></b></p>
<p><b>14.48.1.1 SetParameters()<br/></b></p>
<p>template&lt;class TFLOAT , class DFLOAT &gt;<br/>void AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt;::SetParameters (<br/></p>
<p>int iTableSize,<br/>TFLOAT iMin = 0.0,<br/>TFLOAT iMax = 1.0,<br/>int iNumTables = 1 ) [inline]<br/></p>
<p>Set the table lookup parameters.<br/></p>
<p><b>Parameters<br/></b>in iTableSize Size of the lookup table<br/>in iMin Minimum input value<br/>in iMax Maximum input value<br/>in iNumTables Number of tables to index<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>668 Class Documentation<br/></b></p>
<p><b>Note<br/></b>For future use...<br/></p>
<p><b>14.48.1.2 DoTableLookupExtraFast() [1/2]<br/></b></p>
<p>template&lt;class TFLOAT , class DFLOAT &gt;<br/>DFLOAT AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt;::DoTableLookupExtraFast (<br/></p>
<p>const TFLOAT &#8727;const iTable,<br/>DFLOAT iValue ) const [inline]<br/></p>
<p>Perform an extra fast table lookup :)<br/></p>
<p><b>Parameters<br/></b>in iTable Lookup table<br/>in iValue Table value<br/></p>
<p><b>Note<br/></b>This version requires that the lookup table is padded with one extra location so we can avoid one of the checks<br/>to see if our pointers are out of bounds.<br/></p>
<p>References AAX::FastTrunc2Int32().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.48.1.3 DoTableLookupExtraFastMulti()<br/></b></p>
<p>template&lt;class TFLOAT , class DFLOAT &gt;<br/>void AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt;::DoTableLookupExtraFastMulti (<br/></p>
<p>const TFLOAT &#8727; iTable,<br/>DFLOAT iValue,<br/>DFLOAT &#8727; oValues ) const [inline]<br/></p>
<p>References AAX::FastTrunc2Int32().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.48.1.4 DoTableLookupExtraFast() [2/2]<br/></b></p>
<p>template&lt;class TFLOAT , class DFLOAT &gt;<br/>void AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt;::DoTableLookupExtraFast (<br/></p>
<p>const TFLOAT &#8727;const iTable,<br/>const TFLOAT &#8727;const inpBuf,<br/>DFLOAT &#8727;const outBuf,<br/>int blockSize ) [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.49 AAX_IACFAutomationDelegate Class Reference 669<br/></b></p>
<p><b>14.48.1.5 GetMin()<br/></b></p>
<p>template&lt;class TFLOAT , class DFLOAT &gt;<br/>TFLOAT AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt;::GetMin ( ) [inline]<br/></p>
<p><b>14.48.1.6 GetMaxMinusMin()<br/></b></p>
<p>template&lt;class TFLOAT , class DFLOAT &gt;<br/>TFLOAT AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt;::GetMaxMinusMin ( ) [inline]<br/></p>
<p>The documentation for this class was generated from the following files:<br/></p>
<p>&#8226; AAX_FastInterpolatedTableLookup.h<br/>&#8226; AAX_FastInterpolatedTableLookup.hpp<br/></p>
<p><b>14.49 AAX_IACFAutomationDelegate Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFAutomationDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFAutomationDelegate:<br/></p>
<p>Collaboration diagram for AAX_IACFAutomationDelegate:<br/></p>
<p><b>14.49.1 Description<br/></b></p>
<p>Versioned interface allowing an AAX plug-in to interact with the host's automation system.<br/></p>
<p><b>See also<br/></b>Parameter updates<br/>AAX_IAutomationDelegate<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result RegisterParameter (AAX_CParamID iParameterID)=0<br/>&#8226; virtual AAX_Result UnregisterParameter (AAX_CParamID iParameterID)=0<br/>&#8226; virtual AAX_Result PostSetValueRequest (AAX_CParamID iParameterID, double normalizedValue) const =0<br/>&#8226; virtual AAX_Result PostCurrentValue (AAX_CParamID iParameterID, double normalizedValue) const =0<br/>&#8226; virtual AAX_Result PostTouchRequest (AAX_CParamID iParameterID)=0<br/>&#8226; virtual AAX_Result PostReleaseRequest (AAX_CParamID iParameterID)=0<br/>&#8226; virtual AAX_Result GetTouchState (AAX_CParamID iParameterID, AAX_CBoolean &#8727;oTouched)=0<br/></p>
<p><b>14.49.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>670 Class Documentation<br/></b></p>
<p><b>14.49.2.1 RegisterParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFAutomationDelegate::RegisterParameter (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>Register a control with the automation system using a char&#8727; based control identifier<br/></p>
<p>The automation delegate owns a list of the IDs of all of the parameters that have been registered with it. This list<br/>is used to set up listeners for all of the registered parameters such that the automation delegate may update the<br/>plug-in when the state of any of the registered parameters have been modified.<br/></p>
<p><b>See also<br/></b>AAX_IAutomationDelegate::UnregisterParameter()<br/></p>
<p><b>Parameters<br/></b>in iParameterID Parameter ID that is being registered<br/></p>
<p><b>14.49.2.2 UnregisterParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFAutomationDelegate::UnregisterParameter (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>Unregister a control with the automation system using a char&#8727; based control identifier<br/></p>
<p><b>Note<br/></b>All registered controls should be unregistered or the system might leak.<br/></p>
<p><b>See also<br/></b>AAX_IAutomationDelegate::RegisterParameter()<br/></p>
<p><b>Parameters<br/></b>in iParameterID Parameter ID that is being registered<br/></p>
<p><b>14.49.2.3 PostSetValueRequest()<br/></b></p>
<p>virtual AAX_Result AAX_IACFAutomationDelegate::PostSetValueRequest (<br/>AAX_CParamID iParameterID,<br/>double normalizedValue ) const [pure virtual]<br/></p>
<p>Submits a request for the given parameter's value to be changed<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.49 AAX_IACFAutomationDelegate Class Reference 671<br/></b></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter for which a change is requested<br/>in normalizedValue The requested new parameter value, formatted as a double and normalized to [0 1]<br/></p>
<p><b>14.49.2.4 PostCurrentValue()<br/></b></p>
<p>virtual AAX_Result AAX_IACFAutomationDelegate::PostCurrentValue (<br/>AAX_CParamID iParameterID,<br/>double normalizedValue ) const [pure virtual]<br/></p>
<p>Notifies listeners that a parameter's value has changed<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that has been updated<br/>in normalizedValue The current parameter value, formatted as a double and normalized to [0 1]<br/></p>
<p><b>14.49.2.5 PostTouchRequest()<br/></b></p>
<p>virtual AAX_Result AAX_IACFAutomationDelegate::PostTouchRequest (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>Requests that the given parameter be &quot;touched&quot;, i.e. locked for updates by the current client<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that will be touched<br/></p>
<p><b>14.49.2.6 PostReleaseRequest()<br/></b></p>
<p>virtual AAX_Result AAX_IACFAutomationDelegate::PostReleaseRequest (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>Requests that the given parameter be &quot;released&quot;, i.e. available for updates from any client<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that will be released<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>672 Class Documentation<br/></b></p>
<p><b>14.49.2.7 GetTouchState()<br/></b></p>
<p>virtual AAX_Result AAX_IACFAutomationDelegate::GetTouchState (<br/>AAX_CParamID iParameterID,<br/>AAX_CBoolean &#8727; oTouched ) [pure virtual]<br/></p>
<p>Gets the current touched state of a parameter<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that is being queried<br/>out oTouched The current touch state of the parameter<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFAutomationDelegate.h<br/></p>
<p><b>14.50 AAX_IACFCollection Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFCollection.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFCollection:<br/></p>
<p>Collaboration diagram for AAX_IACFCollection:<br/></p>
<p><b>14.50.1 Description<br/></b></p>
<p>Versioned interface to represent a plug-in binary's static description.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result AddEffect (const char &#8727;inEffectID, IACFUnknown &#8727;inEffectDescriptor)=0<br/>Add an Effect description to the collection.<br/></p>
<p>&#8226; virtual AAX_Result SetManufacturerName (const char &#8727;inPackageName)=0<br/>Set the plug-in manufacturer name.<br/></p>
<p>&#8226; virtual AAX_Result AddPackageName (const char &#8727;inPackageName)=0<br/>Set the plug-in package name.<br/></p>
<p>&#8226; virtual AAX_Result SetPackageVersion (uint32_t inVersion)=0<br/>Set the plug-in package version number.<br/></p>
<p>&#8226; virtual AAX_Result SetProperties (IACFUnknown &#8727;inProperties)=0<br/>Set the properties of the collection.<br/></p>
<p><b>14.50.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.50 AAX_IACFCollection Class Reference 673<br/></b></p>
<p><b>14.50.2.1 AddEffect()<br/></b></p>
<p>virtual AAX_Result AAX_IACFCollection::AddEffect (<br/>const char &#8727; inEffectID,<br/>IACFUnknown &#8727; inEffectDescriptor ) [pure virtual]<br/></p>
<p>Add an Effect description to the collection.<br/></p>
<p>Each Effect that a plug-in registers with AAX_ICollection::AddEffect() is considered a completely different user-<br/>facing product. For example, in Avid's Dynamics III plug-in the Expander, Compressor, and DeEsser are each<br/>registered as separate Effects. All stem format variations within each Effect are registered within that Effect's<br/>AAX_IEffectDescriptor using AddComponent().<br/></p>
<p>The AAX_eProperty_ProductID value for all ProcessProcs within a single Effect must be identical.<br/></p>
<p>This method passes ownership of an AAX_IEffectDescriptor object to the AAX_ICollection. The AAX_IEffectDescriptor<br/>must not be deleted by the AAX plug-in, nor should it be edited in any way after it is passed to the AAX_ICollection.<br/></p>
<p><b>Parameters<br/></b>in inEffectID The effect ID.<br/>in inEffectDescriptor The Effect descriptor.<br/></p>
<p><b>14.50.2.2 SetManufacturerName()<br/></b></p>
<p>virtual AAX_Result AAX_IACFCollection::SetManufacturerName (<br/>const char &#8727; inPackageName ) [pure virtual]<br/></p>
<p>Set the plug-in manufacturer name.<br/></p>
<p><b>Parameters<br/></b>in inPackageName The name of the manufacturer.<br/></p>
<p><b>14.50.2.3 AddPackageName()<br/></b></p>
<p>virtual AAX_Result AAX_IACFCollection::AddPackageName (<br/>const char &#8727; inPackageName ) [pure virtual]<br/></p>
<p>Set the plug-in package name.<br/></p>
<p>May be called multiple times to add abbreviated package names.<br/></p>
<p><b>Note<br/></b>Every plug-in must include at least one name variant with 16 or fewer characters, plus a null terminating<br/>character. Used for Presets folder.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>674 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inPackageName The name of the package.<br/></p>
<p><b>14.50.2.4 SetPackageVersion()<br/></b></p>
<p>virtual AAX_Result AAX_IACFCollection::SetPackageVersion (<br/>uint32_t inVersion ) [pure virtual]<br/></p>
<p>Set the plug-in package version number.<br/></p>
<p><b>Parameters<br/></b>in inVersion The package version numner.<br/></p>
<p><b>14.50.2.5 SetProperties()<br/></b></p>
<p>virtual AAX_Result AAX_IACFCollection::SetProperties (<br/>IACFUnknown &#8727; inProperties ) [pure virtual]<br/></p>
<p>Set the properties of the collection.<br/></p>
<p><b>Parameters<br/></b>in inProperties Collection properties<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFCollection.h<br/></p>
<p><b>14.51 AAX_IACFComponentDescriptor Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFComponentDescriptor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFComponentDescriptor:<br/></p>
<p>Collaboration diagram for AAX_IACFComponentDescriptor:<br/></p>
<p><b>14.51.1 Description<br/></b></p>
<p>Versioned description interface for an AAX plug-in algorithm callback.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.51 AAX_IACFComponentDescriptor Class Reference 675<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result Clear ()=0<br/>Clears the descriptor.<br/></p>
<p>&#8226; virtual AAX_Result AddReservedField (AAX_CFieldIndex inFieldIndex, uint32_t inFieldType)=0<br/>Subscribes a context field to host-provided services or information.<br/></p>
<p>&#8226; virtual AAX_Result AddAudioIn (AAX_CFieldIndex inFieldIndex)=0<br/>Subscribes an audio input context field.<br/></p>
<p>&#8226; virtual AAX_Result AddAudioOut (AAX_CFieldIndex inFieldIndex)=0<br/>Subscribes an audio output context field.<br/></p>
<p>&#8226; virtual AAX_Result AddAudioBufferLength (AAX_CFieldIndex inFieldIndex)=0<br/>Subscribes a buffer length context field.<br/></p>
<p>&#8226; virtual AAX_Result AddSampleRate (AAX_CFieldIndex inFieldIndex)=0<br/>Subscribes a sample rate context field.<br/></p>
<p>&#8226; virtual AAX_Result AddClock (AAX_CFieldIndex inFieldIndex)=0<br/>Subscribes a clock context field.<br/></p>
<p>&#8226; virtual AAX_Result AddSideChainIn (AAX_CFieldIndex inFieldIndex)=0<br/>Subscribes a side-chain input context field.<br/></p>
<p>&#8226; virtual AAX_Result AddDataInPort (AAX_CFieldIndex inFieldIndex, uint32_t inPacketSize, AAX_EDataInPortType<br/>inPortType)=0<br/></p>
<p>Adds a custom data port to the algorithm context.<br/>&#8226; virtual AAX_Result AddAuxOutputStem (AAX_CFieldIndex inFieldIndex, int32_t inStemFormat, const char<br/></p>
<p>inNameUTF8[ ])=0<br/>Adds an auxiliary output stem for a plug-in.<br/></p>
<p>&#8226; virtual AAX_Result AddPrivateData (AAX_CFieldIndex inFieldIndex, int32_t inDataSize, uint32_t in&#8592;&#8617;<br/>Options=AAX_ePrivateDataOptions_DefaultOptions)=0<br/></p>
<p>Adds a private data port to the algorithm context.<br/>&#8226; virtual AAX_Result AddDmaInstance (AAX_CFieldIndex inFieldIndex, AAX_IDma::EMode inDmaMode)=0<br/></p>
<p>Adds a DMA field to the plug-in's context.<br/>&#8226; virtual AAX_Result AddMIDINode (AAX_CFieldIndex inFieldIndex, AAX_EMIDINodeType inNodeType, const<br/></p>
<p>char inNodeName[ ], uint32_t channelMask)=0<br/>Adds a MIDI node field to the plug-in's context.<br/></p>
<p>&#8226; virtual AAX_Result AddProcessProc_Native (AAX_CProcessProc inProcessProc, IACFUnknown &#8727;in&#8592;&#8617;<br/>Properties, AAX_CInstanceInitProc inInstanceInitProc, AAX_CBackgroundProc inBackgroundProc,<br/>AAX_CSelector &#8727;outProcID)=0<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/>&#8226; virtual AAX_Result AddProcessProc_TI (const char inDLLFileNameUTF8[ ], const char inProcessProc&#8592;&#8617;<br/></p>
<p>Symbol[ ], IACFUnknown &#8727;inProperties, const char inInstanceInitProcSymbol[ ], const char inBackground&#8592;&#8617;<br/>ProcSymbol[ ], AAX_CSelector &#8727;outProcID)=0<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/>&#8226; virtual AAX_Result AddMeters (AAX_CFieldIndex inFieldIndex, const AAX_CTypeID &#8727;inMeterIDs, const<br/></p>
<p>uint32_t inMeterCount)=0<br/>Adds a meter field to the plug-in's context.<br/></p>
<p><b>14.51.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>676 Class Documentation<br/></b></p>
<p><b>14.51.2.1 Clear()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::Clear ( ) [pure virtual]<br/></p>
<p>Clears the descriptor.<br/></p>
<p>Clears the descriptor and readies it for the next algorithm description<br/></p>
<p><b>14.51.2.2 AddReservedField()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddReservedField (<br/>AAX_CFieldIndex inFieldIndex,<br/>uint32_t inFieldType ) [pure virtual]<br/></p>
<p>Subscribes a context field to host-provided services or information.<br/></p>
<p><b>Note<br/></b>Currently for internal use only.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/>in inFieldType Type of field that is being added<br/></p>
<p><b>14.51.2.3 AddAudioIn()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddAudioIn (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes an audio input context field.<br/></p>
<p>Defines an audio in port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: float&#8727;&#8727;<br/>&#8226; Data kind: An array of float arrays, one for each input channel<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.51 AAX_IACFComponentDescriptor Class Reference 677<br/></b></p>
<p><b>14.51.2.4 AddAudioOut()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddAudioOut (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes an audio output context field.<br/></p>
<p>Defines an audio out port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: float&#8727;&#8727;<br/>&#8226; Data kind: An array of float arrays, one for each output channel<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p><b>14.51.2.5 AddAudioBufferLength()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddAudioBufferLength (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes a buffer length context field.<br/></p>
<p>Defines a buffer length port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: int32_t&#8727;<br/>&#8226; Data kind: The number of samples in the current audio buffer<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p><b>14.51.2.6 AddSampleRate()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddSampleRate (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes a sample rate context field.<br/>Defines a sample rate port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: AAX_CSampleRate &#8727;<br/>&#8226; Data kind: The current sample rate<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>678 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p><b>14.51.2.7 AddClock()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddClock (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes a clock context field.<br/></p>
<p>Defines a clock port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: AAX_CTimestamp &#8727;<br/>&#8226; Data kind: A running counter which increments even when the transport is not playing. The counter incre-<br/></p>
<p>ments exactly once per sample quantum.<br/></p>
<p><b>Host Compatibility Notes </b>As of Pro Tools 11.1, this field may be used in both Native and DSP plug-ins. The<br/>DSP clock data is a 16-bit cycling counter. This field was only available for Native<br/>plug-ins in previous Pro Tools versions.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p><b>14.51.2.8 AddSideChainIn()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddSideChainIn (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes a side-chain input context field.<br/></p>
<p>Defines a side-chain input port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: int32_t&#8727;<br/>&#8226; Data kind: The index of the plug-in's first side-chain input channel within the array of input audio buffers<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.51 AAX_IACFComponentDescriptor Class Reference 679<br/></b></p>
<p><b>14.51.2.9 AddDataInPort()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddDataInPort (<br/>AAX_CFieldIndex inFieldIndex,<br/>uint32_t inPacketSize,<br/>AAX_EDataInPortType inPortType ) [pure virtual]<br/></p>
<p>Adds a custom data port to the algorithm context.<br/></p>
<p>Defines a read-only data port for plug-in information in the algorithm's context structure. The plug-in can send<br/>information to this port using AAX_IController::PostPacket().<br/></p>
<p>The host guarantees that all packets will be delivered to this port in the order in which they were posted, up to the<br/>point of a packet buffer overflow, though some packets may be dropped depending on the inPortType and host<br/>implementation.<br/></p>
<p><b>Note<br/></b>When a plug-in is operating in offline (AudioSuite) mode, all data ports operate as AAX_eDataInPortType_Unbuffered<br/>ports<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the port, generated using AAX_FIELD_INDEX<br/>in inPacketSize Size of the data packets that will be sent to this port<br/>in inPortType The requested packet delivery behavior for this port<br/></p>
<p><b>14.51.2.10 AddAuxOutputStem()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddAuxOutputStem (<br/>AAX_CFieldIndex inFieldIndex,<br/>int32_t inStemFormat,<br/>const char inNameUTF8[] ) [pure virtual]<br/></p>
<p>Adds an auxiliary output stem for a plug-in.<br/></p>
<p>Use this method to add additional output channels to the algorithm context.<br/></p>
<p>The aux output stem audio buffers will be added to the end of the audio outputs array in the order in which they are<br/>described. When writing audio data to a specific aux output, find the proper starting channel by accumulating all of<br/>the channels of the main output stem format and any previously-described aux output stems.<br/></p>
<p>The plug-in is responsible for providing a meaningful name for each aux outputs. At the very least, individual outputs<br/>should be labeled &quot;Output xx&quot;, where &quot;xx&quot; is the aux output number as it is defined in the plug-in. The output name<br/>should also include the words &quot;mono&quot; and &quot;stereo&quot; to support when users are looking for an output with a specific<br/>stem format.<br/></p>
<p><b>Host Compatibility Notes </b>There is a hard limit to the number of outputs that Pro Tools supports for a single plug-in<br/>instance. This limit is currently set at 256 channels, which includes all of the plug-in's<br/>output channels in addition to the sum total of all of its aux output stem channels.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools supports only mono and stereo auxiliary output stem formats<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>680 Class Documentation<br/></b></p>
<p><b>Warning<br/></b>This method will return an error code on hosts which do not support auxiliary output stems. This indicates that<br/>the host will not provide audio buffers for auxiliary output stems during processing. A plug-in must not attempt<br/>to write data into auxiliary output stem buffers which have not been provided by the host!<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex DEPRECATED: This parameter is no longer needed by the host, but is included in the<br/></p>
<p>interface for binary compatibility<br/>in inStemFormat The stem format of the new aux output<br/>in inNameUTF8 The name of the aux output. This name is static and cannot be changed after the<br/></p>
<p>descriptor is submitted to the host<br/></p>
<p><b>14.51.2.11 AddPrivateData()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddPrivateData (<br/>AAX_CFieldIndex inFieldIndex,<br/>int32_t inDataSize,<br/>uint32_t inOptions = AAX_ePrivateDataOptions_DefaultOptions ) [pure virtual]<br/></p>
<p>Adds a private data port to the algorithm context.<br/></p>
<p>Defines a read/write data port for private state data. Data written to this port will be maintained by the host between<br/>calls to the algorithm context.<br/></p>
<p><b>See also<br/></b>alg_pd_registration<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the port, generated using AAX_FIELD_INDEX<br/>in inDataSize Size of the data packets that will be sent to this port<br/>in inOptions Options that define the private data port's behavior<br/></p>
<p><b>14.51.2.12 AddDmaInstance()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddDmaInstance (<br/>AAX_CFieldIndex inFieldIndex,<br/>AAX_IDma::EMode inDmaMode ) [pure virtual]<br/></p>
<p>Adds a DMA field to the plug-in's context.<br/></p>
<p>DMA (direct memory access) provides efficient reads from and writes to external memory on the DSP. DMA behavior<br/>is emulated in host-based plug-ins for cross-platform portability.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.51 AAX_IACFComponentDescriptor Class Reference 681<br/></b></p>
<p><b>Note<br/></b>The order in which DMA instances are added defines their priority and therefore order of execution of DMA<br/>operations. In most plug-ins, Scatter fields should be placed first in order to achieve the lowest possible access<br/>latency.<br/></p>
<p>For more information, see Direct Memory Access .<br/></p>
<p><b>Todo </b>Update the DMA system management such that operation priority can be set arbitrarily<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/>in inDmaMode AAX_IDma::EMode that will apply to this field<br/></p>
<p><b>14.51.2.13 AddMIDINode()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddMIDINode (<br/>AAX_CFieldIndex inFieldIndex,<br/>AAX_EMIDINodeType inNodeType,<br/>const char inNodeName[],<br/>uint32_t channelMask ) [pure virtual]<br/></p>
<p>Adds a MIDI node field to the plug-in's context.<br/></p>
<p>&#8226; Data type: AAX_IMIDINode &#8727;<br/></p>
<p>The resulting MIDI node data will be available both in the algorithm context and in the plug-in's data model via<br/>UpdateMIDINodes().<br/></p>
<p>To add a MIDI node that is only accessible to the plug-in's data model, use AAX_IEffectDescriptor::AddControlMIDINode()<br/></p>
<p><b>Host Compatibility Notes </b>Due to current restrictions MIDI data won't be delivered to DSP algorithms, only to AAX<br/>Native.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex The ID of the port. MIDI node ports should formatted as a pointer to an<br/></p>
<p>AAX_IMIDINode.<br/>in inNodeType The type of MIDI node, as AAX_EMIDINodeType<br/>in inNodeName The name of the MIDI node as it should appear in the host's UI<br/>in channelMask The channel mask for the MIDI node. This parameter specifies used MIDI channels.<br/></p>
<p>For Global MIDI nodes, use a mask of AAX_EMidiGlobalNodeSelectors<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>682 Class Documentation<br/></b></p>
<p><b>14.51.2.14 AddProcessProc_Native()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddProcessProc_Native (<br/>AAX_CProcessProc inProcessProc,<br/>IACFUnknown &#8727; inProperties,<br/>AAX_CInstanceInitProc inInstanceInitProc,<br/>AAX_CBackgroundProc inBackgroundProc,<br/>AAX_CSelector &#8727; outProcID ) [pure virtual]<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/></p>
<p><b>Parameters<br/></b>in inProcessProc Symbol for this processing callback<br/>in inProperties A property map for this processing callback. The property map's values are<br/></p>
<p>copied by the host and associated with the new ProcessProc. The property map<br/>contents are unchanged and the map may be re-used when registering<br/>additional ProcessProcs.<br/></p>
<p>in inInstanceInitProc Initialization routine that will be called when a new instance of the Effect is<br/>created. See Algorithm initialization.<br/></p>
<p>in inBackgroundProc Background routine that will be called in an idle context within the same address<br/>space as the associated process procedure. See<br/>Background processing callback<br/></p>
<p>out outProcID<br/></p>
<p><b>Todo </b>document this parameter<br/></p>
<p><b>14.51.2.15 AddProcessProc_TI()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddProcessProc_TI (<br/>const char inDLLFileNameUTF8[],<br/>const char inProcessProcSymbol[],<br/>IACFUnknown &#8727; inProperties,<br/>const char inInstanceInitProcSymbol[],<br/>const char inBackgroundProcSymbol[],<br/>AAX_CSelector &#8727; outProcID ) [pure virtual]<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/></p>
<p><b>Parameters<br/></b>in inDLLFileNameUTF8 UTF-8 encoded filename for the ELF DLL containing the algorithm code<br/></p>
<p>fragment<br/>in inProcessProcSymbol Symbol for this processing callback<br/>in inProperties A property map for this processing callback. The property map's values<br/></p>
<p>are copied by the host and associated with the new ProcessProc. The<br/>property map contents are unchanged and the map may be re-used<br/>when registering additional ProcessProcs.<br/></p>
<p>in inInstanceInitProcSymbol Initialization routine that will be called when a new instance of the Effect<br/>is created. Must be included in the same DLL as the main algorithm<br/>entrypoint. See Algorithm initialization.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.52 AAX_IACFComponentDescriptor_V2 Class Reference 683<br/></b></p>
<p><b>Parameters<br/></b>in inBackgroundProcSymbol Background routine that will be called in an idle context within the same<br/></p>
<p>address space as the associated process procedure. Must be included in<br/>the same DLL as the main algorithm entrypoint. See<br/>Background processing callback<br/></p>
<p>out outProcID<br/></p>
<p><b>Todo </b>document this parameter<br/></p>
<p><b>14.51.2.16 AddMeters()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor::AddMeters (<br/>AAX_CFieldIndex inFieldIndex,<br/>const AAX_CTypeID &#8727; inMeterIDs,<br/>const uint32_t inMeterCount ) [pure virtual]<br/></p>
<p>Adds a meter field to the plug-in's context.<br/></p>
<p>Meter fields include an array of meter tap values, with one tap per meter per context. Only one meter field should<br/>be added per Component. Individual meter behaviors can be described at the Effect level.<br/></p>
<p>For more information, see Plug-in meters .<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/>in inMeterIDs Array of 32-bit IDs, one for each meter. Meter IDs must be unique within the Effect.<br/>in inMeterCount The number of meters included in this field<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFComponentDescriptor.h<br/></p>
<p><b>14.52 AAX_IACFComponentDescriptor_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFComponentDescriptor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFComponentDescriptor_V2:<br/></p>
<p>Collaboration diagram for AAX_IACFComponentDescriptor_V2:<br/></p>
<p><b>14.52.1 Description<br/></b></p>
<p>Versioned description interface for an AAX plug-in algorithm callback.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>684 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result AddTemporaryData (AAX_CFieldIndex inFieldIndex, uint32_t inDataElementSize)=0<br/>Adds a block of data to a context that is not saved between callbacks and is scaled by the system buffer size.<br/></p>
<p><b>14.52.2 Member Function Documentation<br/></b></p>
<p><b>14.52.2.1 AddTemporaryData()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor_V2::AddTemporaryData (<br/>AAX_CFieldIndex inFieldIndex,<br/>uint32_t inDataElementSize ) [pure virtual]<br/></p>
<p>Adds a block of data to a context that is not saved between callbacks and is scaled by the system buffer size.<br/></p>
<p>This can be very useful if you use block processing and need to store intermediate results. Just specify your base<br/>element size and the system will scale the overall block size by the buffer size. For example, to create a buffer of<br/>floats that is the length of the block, specify 4 bytes as the elementsize.<br/></p>
<p>This data block does not retain state across callback and can also be reused across instances on memory contrained<br/>systems.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the port, generated using AAX_FIELD_INDEX<br/>in inDataElementSize The size of a single piece of data in the block. This number will be multipied by<br/></p>
<p>the processing block size to determine total block size.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFComponentDescriptor.h<br/></p>
<p><b>14.53 AAX_IACFComponentDescriptor_V3 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFComponentDescriptor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFComponentDescriptor_V3:<br/></p>
<p>Collaboration diagram for AAX_IACFComponentDescriptor_V3:<br/></p>
<p><b>14.53.1 Description<br/></b></p>
<p>Versioned description interface for an AAX plug-in algorithm callback.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.53 AAX_IACFComponentDescriptor_V3 Class Reference 685<br/></b></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result AddProcessProc (IACFUnknown &#8727;inProperties, AAX_CSelector &#8727;outProcIDs, int32_t in&#8592;&#8617;<br/></p>
<p>ProcIDsSize)=0<br/>Registers one or more algorithm processing entrypoints (process procedures)<br/></p>
<p><b>14.53.2 Member Function Documentation<br/></b></p>
<p><b>14.53.2.1 AddProcessProc()<br/></b></p>
<p>virtual AAX_Result AAX_IACFComponentDescriptor_V3::AddProcessProc (<br/>IACFUnknown &#8727; inProperties,<br/>AAX_CSelector &#8727; outProcIDs,<br/>int32_t inProcIDsSize ) [pure virtual]<br/></p>
<p>Registers one or more algorithm processing entrypoints (process procedures)<br/></p>
<p>Any non-overlapping set of processing entrypoints may be specified. Typically this can be used to specify both<br/>Native and TI entrypoints using the same call.<br/></p>
<p>The AAX Library implementation of this method includes backwards compatibility logic to complete the Process&#8592;&#8617;<br/>Proc registration on hosts which do not support this method. Therefore plug-in code may use this single registration<br/>routine instead of separate calls to AddProcessProc_Native(), AddProcessProc_TI(), etc. regardless of the host<br/>version.<br/></p>
<p>The following properties replace the input arguments to the platform-specific registration methods:<br/></p>
<p>AddProcessProc_Native() (AAX_eProperty_PlugInID_Native, AAX_eProperty_PlugInID_AudioSuite)<br/></p>
<p>&#8226; AAX_CProcessProc iProcessProc: AAX_eProperty_NativeProcessProc (required)<br/>&#8226; AAX_CInstanceInitProc iInstanceInitProc: AAX_eProperty_NativeInstanceInitProc (optional)<br/>&#8226; AAX_CBackgroundProc iBackgroundProc: AAX_eProperty_NativeBackgroundProc (optional)<br/></p>
<p>AddProcessProc_TI() (AAX_eProperty_PlugInID_TI)<br/></p>
<p>&#8226; const char inDLLFileNameUTF8[]: AAX_eProperty_TIDLLFileName (required)<br/>&#8226; const char iProcessProcSymbol[]: AAX_eProperty_TIProcessProc (required)<br/>&#8226; const char iInstanceInitProcSymbol[]: AAX_eProperty_TIInstanceInitProc (optional)<br/>&#8226; const char iBackgroundProcSymbol[]: AAX_eProperty_TIBackgroundProc (optional)<br/></p>
<p>If any platform-specific plug-in ID property is present in iProperties then AddProcessProc() will check for the<br/>required properties for that platform.<br/></p>
<p><b>Note<br/></b>AAX_eProperty_AudioBufferLength will be ignored for the Native and AudioSuite ProcessProcs since it should<br/>only be used for AAX DSP.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>686 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inProperties A property map for this processing callback. The property map's values are copied by<br/></p>
<p>the host and associated with the new ProcessProc. The property map contents are<br/>unchanged and the map may be re-used when registering additional ProcessProcs.<br/></p>
<p>out outProcIDs<br/></p>
<p><b>Todo </b>document this parameter Returned array will be NULL-terminated<br/></p>
<p><b>Parameters<br/></b>in inProcIDsSize The size of the array provided to oProcIDs. If oProcIDs is non-NULL but<br/></p>
<p>iProcIDsSize is not large enough for all of the registered ProcessProcs (plus one<br/>for NULL termination) then this method will fail with<br/>AAX_ERROR_ARGUMENT_BUFFER_OVERFLOW<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFComponentDescriptor.h<br/></p>
<p><b>14.54 AAX_IACFController Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFController.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFController:<br/></p>
<p>Collaboration diagram for AAX_IACFController:<br/></p>
<p><b>14.54.1 Description<br/></b></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the AAXHost and by effect<br/>components.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result GetEffectID (AAX_IString &#8727;outEffectID) const =0<br/>&#8226; virtual AAX_Result GetSampleRate (AAX_CSampleRate &#8727;outSampleRate) const =0<br/></p>
<p>CALL: Returns the current literal sample rate.<br/>&#8226; virtual AAX_Result GetInputStemFormat (AAX_EStemFormat &#8727;outStemFormat) const =0<br/></p>
<p>CALL: Returns the plug-in's input stem format.<br/>&#8226; virtual AAX_Result GetOutputStemFormat (AAX_EStemFormat &#8727;outStemFormat) const =0<br/></p>
<p>CALL: Returns the plug-in's output stem format.<br/>&#8226; virtual AAX_Result GetSignalLatency (int32_t &#8727;outSamples) const =0<br/></p>
<p>CALL: Returns the most recent signal (algorithmic) latency that has been published by the plug-in.<br/>&#8226; virtual AAX_Result GetCycleCount (AAX_EProperty inWhichCycleCount, AAX_CPropertyValue &#8727;outNum&#8592;&#8617;<br/></p>
<p>Cycles) const =0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.54 AAX_IACFController Class Reference 687<br/></b></p>
<p>CALL: returns the plug-in's current real-time DSP cycle count.<br/>&#8226; virtual AAX_Result GetTODLocation (AAX_CTimeOfDay &#8727;outTODLocation) const =0<br/></p>
<p>CALL: Returns the current Time Of Day (TOD) of the system.<br/>&#8226; virtual AAX_Result SetSignalLatency (int32_t inNumSamples)=0<br/></p>
<p>CALL: Submits a request to change the delay compensation value that the host uses to account for the plug-in's<br/>signal (algorithmic) latency.<br/></p>
<p>&#8226; virtual AAX_Result SetCycleCount (AAX_EProperty &#8727;inWhichCycleCounts, AAX_CPropertyValue &#8727;iValues,<br/>int32_t numValues)=0<br/></p>
<p>CALL: Indicates a change in the plug-in's real-time DSP cycle count.<br/>&#8226; virtual AAX_Result PostPacket (AAX_CFieldIndex inFieldIndex, const void &#8727;inPayloadP, uint32_t inPayload&#8592;&#8617;<br/></p>
<p>Size)=0<br/>CALL: Posts a data packet to the host for routing between plug-in components.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentMeterValue (AAX_CTypeID inMeterID, float &#8727;outMeterValue) const =0<br/>CALL: Retrieves the current value of a host-managed plug-in meter.<br/></p>
<p>&#8226; virtual AAX_Result GetMeterPeakValue (AAX_CTypeID inMeterID, float &#8727;outMeterPeakValue) const =0<br/>CALL: Retrieves the currently held peak value of a host-managed plug-in meter.<br/></p>
<p>&#8226; virtual AAX_Result ClearMeterPeakValue (AAX_CTypeID inMeterID) const =0<br/>CALL: Clears the peak value from a host-managed plug-in meter.<br/></p>
<p>&#8226; virtual AAX_Result GetMeterClipped (AAX_CTypeID inMeterID, AAX_CBoolean &#8727;outClipped) const =0<br/>CALL: Retrieves the clipped flag from a host-managed plug-in meter.<br/></p>
<p>&#8226; virtual AAX_Result ClearMeterClipped (AAX_CTypeID inMeterID) const =0<br/>CALL: Clears the clipped flag from a host-managed plug-in meter.<br/></p>
<p>&#8226; virtual AAX_Result GetMeterCount (uint32_t &#8727;outMeterCount) const =0<br/>CALL: Retrieves the number of host-managed meters registered by a plug-in.<br/></p>
<p>&#8226; virtual AAX_Result GetNextMIDIPacket (AAX_CFieldIndex &#8727;outPort, AAX_CMidiPacket &#8727;outPacket)=0<br/>CALL: Retrieves MIDI packets for described MIDI nodes.<br/></p>
<p><b>14.54.2 Member Function Documentation<br/></b></p>
<p><b>14.54.2.1 GetEffectID()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetEffectID (<br/>AAX_IString &#8727; outEffectID ) const [pure virtual]<br/></p>
<p><b>14.54.2.2 GetSampleRate()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetSampleRate (<br/>AAX_CSampleRate &#8727; outSampleRate ) const [pure virtual]<br/></p>
<p>CALL: Returns the current literal sample rate.<br/></p>
<p><b>Parameters<br/></b>out outSampleRate The current sample rate<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>688 Class Documentation<br/></b></p>
<p><b>14.54.2.3 GetInputStemFormat()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetInputStemFormat (<br/>AAX_EStemFormat &#8727; outStemFormat ) const [pure virtual]<br/></p>
<p>CALL: Returns the plug-in's input stem format.<br/></p>
<p><b>Parameters<br/></b>out outStemFormat The current input stem format<br/></p>
<p><b>14.54.2.4 GetOutputStemFormat()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetOutputStemFormat (<br/>AAX_EStemFormat &#8727; outStemFormat ) const [pure virtual]<br/></p>
<p>CALL: Returns the plug-in's output stem format.<br/></p>
<p><b>Parameters<br/></b>out outStemFormat The current output stem format<br/></p>
<p><b>14.54.2.5 GetSignalLatency()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetSignalLatency (<br/>int32_t &#8727; outSamples ) const [pure virtual]<br/></p>
<p>CALL: Returns the most recent signal (algorithmic) latency that has been published by the plug-in.<br/></p>
<p>This method provides the most recently published signal latency. The host may not have updated its delay compen-<br/>sation to match this signal latency yet, so plug-ins that dynamically change their latency using SetSignalLatency()<br/>should always wait for an AAX_eNotificationEvent_SignalLatencyChanged notification before updating its algorithm<br/>to incur this latency.<br/></p>
<p><b>See also<br/></b>SetSignalLatency()<br/></p>
<p><b>Parameters<br/></b>out outSamples The number of samples of signal delay published by the plug-in<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.54 AAX_IACFController Class Reference 689<br/></b></p>
<p><b>14.54.2.6 GetCycleCount()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetCycleCount (<br/>AAX_EProperty inWhichCycleCount,<br/>AAX_CPropertyValue &#8727; outNumCycles ) const [pure virtual]<br/></p>
<p>CALL: returns the plug-in's current real-time DSP cycle count.<br/></p>
<p>This method provides the number of cycles that the AAX host expects the DSP plug-in to consume. The host uses<br/>this value when allocating DSP resources for the plug-in.<br/></p>
<p><b>Note<br/></b>A plug-in should never apply a DSP algorithm with more demanding resource requirements than<br/>what is currently accounted for by the host. To set a higher cycle count value, a plug-in must call<br/>AAX_IController::SetCycleCount(), then poll AAX_IController::GetCycleCount() until the new value has<br/>been applied. Once the host has recognized the new cycle count value, the plug-in may apply the more<br/>demanding algorithm.<br/></p>
<p><b>Parameters<br/></b>in inWhichCycleCount Selector for the requested cycle count metric. One<br/></p>
<p>of:<br/></p>
<p>&#8226; AAX_eProperty_TI_SharedCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_InstanceCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_MaxInstancesPerChip<br/></p>
<p>in outNumCycles The current value of the selected cycle count metric<br/></p>
<p><b>Todo </b>PLACEHOLDER - NOT CURRENTLY IMPLEMENTED IN HOST<br/></p>
<p><b>14.54.2.7 GetTODLocation()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetTODLocation (<br/>AAX_CTimeOfDay &#8727; outTODLocation ) const [pure virtual]<br/></p>
<p>CALL: Returns the current Time Of Day (TOD) of the system.<br/></p>
<p>This method provides a plug-in the TOD (in samples) of the current system. TOD is the number of samples that the<br/>playhead has traversed since the beginning of playback.<br/></p>
<p><b>Note<br/></b>The TOD value is the immediate value of the audio engine playhead. This value is incremented within the<br/>audio engine's real-time rendering context; it is not synchronized with non-real-time calls to plug-in interface<br/>methods.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>690 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out outTODLocation The current Time Of Day as set by the host<br/></p>
<p><b>14.54.2.8 SetSignalLatency()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::SetSignalLatency (<br/>int32_t inNumSamples ) [pure virtual]<br/></p>
<p>CALL: Submits a request to change the delay compensation value that the host uses to account for the plug-in's<br/>signal (algorithmic) latency.<br/></p>
<p>This method is used to request a change in the number of samples that the AAX host expects the plug-in to delay<br/>a signal.<br/></p>
<p>The host is not guaranteed to immediately apply the new latency value. A plug-in should avoid incurring an actual<br/>algorithmic latency that is different than the latency accounted for by the host.<br/></p>
<p>To set a new latency value, a plug-in must call AAX_IController::SetSignalLatency(), then wait for an<br/>AAX_eNotificationEvent_SignalLatencyChanged notification. Once this notification has been received,<br/>AAX_IController::GetSignalLatency() will reflect the updated latency value and the plug-in should immediately<br/>apply any relevant algorithmic changes that alter its latency to this new value.<br/></p>
<p><b>Warning<br/></b>Parameters which affect the latency of a plug-in should not be made available for control through automation.<br/>This will result in audible glitches when delay compensation is adjusted while playing back automation for<br/>these parameters.<br/></p>
<p><b>Parameters<br/></b>in inNumSamples The number of samples of signal delay that the plug-in requests to incur<br/></p>
<p><b>14.54.2.9 SetCycleCount()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::SetCycleCount (<br/>AAX_EProperty &#8727; inWhichCycleCounts,<br/>AAX_CPropertyValue &#8727; iValues,<br/>int32_t numValues ) [pure virtual]<br/></p>
<p>CALL: Indicates a change in the plug-in's real-time DSP cycle count.<br/></p>
<p>This method is used to request a change in the number of cycles that the AAX host expects the DSP plug-in to<br/>consume.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.54 AAX_IACFController Class Reference 691<br/></b></p>
<p><b>Note<br/></b>A plug-in should never apply a DSP algorithm with more demanding resource requirements than<br/>what is currently accounted for by the host. To set a higher cycle count value, a plug-in must call<br/>AAX_IController::SetCycleCount(), then poll AAX_IController::GetCycleCount() until the new value has<br/>been applied. Once the host has recognized the new cycle count value, the plug-in may apply the more<br/>demanding algorithm.<br/></p>
<p><b>Parameters<br/></b>in inWhichCycleCounts Array of selectors indicating the specific cycle count metrics that should be set.<br/></p>
<p>Each selector must be one of:<br/></p>
<p>&#8226; AAX_eProperty_TI_SharedCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_InstanceCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_MaxInstancesPerChip<br/></p>
<p>in iValues An array of values requested, one for each of the selected cycle count metrics.<br/>in numValues The size of iValues<br/></p>
<p><b>Todo </b>PLACEHOLDER - NOT CURRENTLY IMPLEMENTED IN HOST<br/></p>
<p><b>14.54.2.10 PostPacket()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::PostPacket (<br/>AAX_CFieldIndex inFieldIndex,<br/>const void &#8727; inPayloadP,<br/>uint32_t inPayloadSize ) [pure virtual]<br/></p>
<p>CALL: Posts a data packet to the host for routing between plug-in components.<br/></p>
<p>The posted packet is identified with a AAX_CFieldIndex packet index value, which is equivalent to the target data<br/>port's identifier. The packet's payload must have the expected size for the given packet index / data port, as defined<br/>when the port is created in Describe. See AAX_IComponentDescriptor::AddDataInPort().<br/></p>
<p><b>Warning<br/></b>Any data structures that will be passed between platforms (for example, sent to a TI DSP in an AAX DSP<br/>plug-in) must be properly data-aligned for compatibility across both platforms. See AAX_ALIGN_FILE_ALG<br/>for more information about guaranteeing cross-platform compatibility of data structures used for algorithm<br/>processing.<br/></p>
<p><b>Note<br/></b>All calls to this method should be made within the scope of AAX_IEffectParameters::GenerateCoefficients().<br/>Calls from outside this method may result in packets not being delivered. See PT-206161<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>692 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex The packet's destination port<br/>in inPayloadP A pointer to the packet's payload data<br/>in inPayloadSize The size, in bytes, of the payload data<br/></p>
<p><b>14.54.2.11 GetCurrentMeterValue()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetCurrentMeterValue (<br/>AAX_CTypeID inMeterID,<br/>float &#8727; outMeterValue ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the current value of a host-managed plug-in meter.<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being queried<br/>out outMeterValue The queried meter's current value<br/></p>
<p><b>14.54.2.12 GetMeterPeakValue()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetMeterPeakValue (<br/>AAX_CTypeID inMeterID,<br/>float &#8727; outMeterPeakValue ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the currently held peak value of a host-managed plug-in meter.<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being queried<br/>out outMeterPeakValue The queried meter's currently held peak value<br/></p>
<p><b>14.54.2.13 ClearMeterPeakValue()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::ClearMeterPeakValue (<br/>AAX_CTypeID inMeterID ) const [pure virtual]<br/></p>
<p>CALL: Clears the peak value from a host-managed plug-in meter.<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being cleared<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.54 AAX_IACFController Class Reference 693<br/></b></p>
<p><b>14.54.2.14 GetMeterClipped()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetMeterClipped (<br/>AAX_CTypeID inMeterID,<br/>AAX_CBoolean &#8727; outClipped ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the clipped flag from a host-managed plug-in meter.<br/></p>
<p>See AAX_IComponentDescriptor::AddMeters().<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being queried.<br/>out outClipped The queried meter's clipped flag.<br/></p>
<p><b>14.54.2.15 ClearMeterClipped()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::ClearMeterClipped (<br/>AAX_CTypeID inMeterID ) const [pure virtual]<br/></p>
<p>CALL: Clears the clipped flag from a host-managed plug-in meter.<br/></p>
<p>See AAX_IComponentDescriptor::AddMeters().<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being cleared.<br/></p>
<p><b>14.54.2.16 GetMeterCount()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetMeterCount (<br/>uint32_t &#8727; outMeterCount ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the number of host-managed meters registered by a plug-in.<br/></p>
<p>See AAX_IComponentDescriptor::AddMeters().<br/></p>
<p><b>Parameters<br/></b>out outMeterCount The number of registered plug-in meters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>694 Class Documentation<br/></b></p>
<p><b>14.54.2.17 GetNextMIDIPacket()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController::GetNextMIDIPacket (<br/>AAX_CFieldIndex &#8727; outPort,<br/>AAX_CMidiPacket &#8727; outPacket ) [pure virtual]<br/></p>
<p>CALL: Retrieves MIDI packets for described MIDI nodes.<br/></p>
<p><b>Parameters<br/></b>out outPort port ID of the MIDI node that has unhandled packet<br/>out outPacket The MIDI packet<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFController.h<br/></p>
<p><b>14.55 AAX_IACFController_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFController.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFController_V2:<br/></p>
<p>Collaboration diagram for AAX_IACFController_V2:<br/></p>
<p><b>14.55.1 Description<br/></b></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the AAXHost and by effect<br/>components.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result SendNotification (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData,<br/></p>
<p>uint32_t inNotificationDataSize)=0<br/>CALL: Dispatch a notification.<br/></p>
<p>&#8226; virtual AAX_Result GetHybridSignalLatency (int32_t &#8727;outSamples) const =0<br/>CALL: Returns the latency between the algorithm normal input samples and the inputs returning from the hyrbid<br/>component.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentAutomationTimestamp (AAX_CTransportCounter &#8727;outTimestamp) const =0<br/>CALL: Returns the current automation timestamp if called during the GenerateCoefficients() call AND the generation<br/>of coefficients is being triggered by an automation point instead of immediate changes.<br/></p>
<p>&#8226; virtual AAX_Result GetHostName (AAX_IString &#8727;outHostNameString) const =0<br/>CALL: Returns name of the host application this plug-in instance is being loaded by. This string also typically includes<br/>version information.<br/></p>
<p><b>14.55.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.55 AAX_IACFController_V2 Class Reference 695<br/></b></p>
<p><b>14.55.2.1 SendNotification()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController_V2::SendNotification (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [pure virtual]<br/></p>
<p>CALL: Dispatch a notification.<br/></p>
<p>The notification is handled by the host and may be delivered back to other plug-in components such as the GUI or<br/>data model (via AAX_IEffectGUI::NotificationReceived() or AAX_IEffectParameters::NotificationReceived(), respec-<br/>tively) depending on the notification type.<br/></p>
<p>The host may choose to dispatch the posted notification either synchronously or asynchronously.<br/></p>
<p>See the AAX_ENotificationEvent documentation for more information.<br/></p>
<p>This method is supported by AAX V2 Hosts only. Check the return code on the return of this function. If the error is<br/>AAX_ERROR_UNIMPLEMENTED, your plug-in is being loaded into a host that doesn't support this feature.<br/></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification to send<br/>in inNotificationData Block of notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p><b>14.55.2.2 GetHybridSignalLatency()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController_V2::GetHybridSignalLatency (<br/>int32_t &#8727; outSamples ) const [pure virtual]<br/></p>
<p>CALL: Returns the latency between the algorithm normal input samples and the inputs returning from the hyrbid<br/>component.<br/></p>
<p>This method provides the number of samples that the AAX host expects the plug-in to delay a signal. The host will<br/>use this value when accounting for latency across the system.<br/></p>
<p><b>Note<br/></b>This value will generally scale up with sample rate, although it's not a simple multiple due to some fixed<br/>overhead. This value will be fixed for any given sample rate regardless of other buffer size settings in the host<br/>app.<br/></p>
<p><b>Parameters<br/></b>out outSamples The number of samples of hybrid signal delay<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>696 Class Documentation<br/></b></p>
<p><b>14.55.2.3 GetCurrentAutomationTimestamp()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController_V2::GetCurrentAutomationTimestamp (<br/>AAX_CTransportCounter &#8727; outTimestamp ) const [pure virtual]<br/></p>
<p>CALL: Returns the current automation timestamp if called during the GenerateCoefficients() call AND the generation<br/>of coefficients is being triggered by an automation point instead of immediate changes.<br/></p>
<p><b>Note<br/></b>This function will return 0 if called from outside of GenerateCoefficients() or if the GenerateCoefficients()<br/>call was initiated due to a non-automated change. In those cases, you can get your sample offset from the<br/>transport start using GetTODLocation().<br/></p>
<p><b>Parameters<br/></b>out outTimestamp The current coefficient timestamp. Sample count from transport start.<br/></p>
<p><b>14.55.2.4 GetHostName()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController_V2::GetHostName (<br/>AAX_IString &#8727; outHostNameString ) const [pure virtual]<br/></p>
<p>CALL: Returns name of the host application this plug-in instance is being loaded by. This string also typically<br/>includes version information.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools versions from Pro Tools 11.0 to Pro Tools 12.3.1 will return a generic version<br/>string to this call. This issue is resolved beginning in Pro Tools 12.4.<br/></p>
<p><b>Parameters<br/></b>out outHostNameString The name of the current host application.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFController.h<br/></p>
<p><b>14.56 AAX_IACFController_V3 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFController.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFController_V3:<br/></p>
<p>Collaboration diagram for AAX_IACFController_V3:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.56 AAX_IACFController_V3 Class Reference 697<br/></b></p>
<p><b>14.56.1 Description<br/></b></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the AAXHost and by effect<br/>components.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result GetPlugInTargetPlatform (AAX_CTargetPlatform &#8727;outTargetPlatform) const =0<br/>CALL: Returns execution platform type, native or TI.<br/></p>
<p>&#8226; virtual AAX_Result GetIsAudioSuite (AAX_CBoolean &#8727;outIsAudioSuite) const =0<br/>CALL: Returns true for AudioSuite instances.<br/></p>
<p><b>14.56.2 Member Function Documentation<br/></b></p>
<p><b>14.56.2.1 GetPlugInTargetPlatform()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController_V3::GetPlugInTargetPlatform (<br/>AAX_CTargetPlatform &#8727; outTargetPlatform ) const [pure virtual]<br/></p>
<p>CALL: Returns execution platform type, native or TI.<br/></p>
<p><b>Parameters<br/></b>out outTargetPlatform The type of the current execution platform as one of AAX_ETargetPlatform.<br/></p>
<p><b>14.56.2.2 GetIsAudioSuite()<br/></b></p>
<p>virtual AAX_Result AAX_IACFController_V3::GetIsAudioSuite (<br/>AAX_CBoolean &#8727; outIsAudioSuite ) const [pure virtual]<br/></p>
<p>CALL: Returns true for AudioSuite instances.<br/></p>
<p><b>Parameters<br/></b>out outIsAudioSuite The boolean flag which indicate true for AudioSuite instances.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFController.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>698 Class Documentation<br/></b></p>
<p><b>14.57 AAX_IACFDataBuffer Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFDataBuffer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFDataBuffer:<br/></p>
<p>Collaboration diagram for AAX_IACFDataBuffer:<br/></p>
<p><b>14.57.1 Description<br/></b></p>
<p>Versioned interface for reference counted data buffers.<br/></p>
<p>This interface is intended to be used for passing arbitrary blocks of data across the binary boundary and allowing<br/>the receiver to take ownership of the allocated memory.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result Type (AAX_CTypeID &#8727;oType) const =0<br/>&#8226; virtual AAX_Result Size (int32_t &#8727;oSize) const =0<br/>&#8226; virtual AAX_Result Data (void const &#8727;&#8727;oBuffer) const =0<br/></p>
<p><b>14.57.2 Member Function Documentation<br/></b></p>
<p><b>14.57.2.1 Type()<br/></b></p>
<p>virtual AAX_Result AAX_IACFDataBuffer::Type (<br/>AAX_CTypeID &#8727; oType ) const [pure virtual]<br/></p>
<p>The type of data contained in this buffer<br/></p>
<p>This identifier must be sufficient for a client that knows the type to correctly interpret and use the data.<br/></p>
<p>Implemented in AAX_CStringDataBuffer, AAX_CStringDataBufferOfType&lt; T &gt;, AAX_CArrayDataBuffer&lt; D &gt;,<br/>and AAX_CArrayDataBufferOfType&lt; T, D &gt;.<br/></p>
<p><b>14.57.2.2 Size()<br/></b></p>
<p>virtual AAX_Result AAX_IACFDataBuffer::Size (<br/>int32_t &#8727; oSize ) const [pure virtual]<br/></p>
<p>The number of bytes of data in this buffer<br/></p>
<p>Implemented in AAX_CStringDataBuffer, AAX_CStringDataBufferOfType&lt; T &gt;, AAX_CArrayDataBuffer&lt; D &gt;,<br/>and AAX_CArrayDataBufferOfType&lt; T, D &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.58 AAX_IACFDescriptionHost Class Reference 699<br/></b></p>
<p><b>14.57.2.3 Data()<br/></b></p>
<p>virtual AAX_Result AAX_IACFDataBuffer::Data (<br/>void const &#8727;&#8727; oBuffer ) const [pure virtual]<br/></p>
<p>The buffer of data<br/></p>
<p>Implemented in AAX_CStringDataBuffer, AAX_CStringDataBufferOfType&lt; T &gt;, AAX_CArrayDataBuffer&lt; D &gt;,<br/>and AAX_CArrayDataBufferOfType&lt; T, D &gt;.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFDataBuffer.h<br/></p>
<p><b>14.58 AAX_IACFDescriptionHost Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFDescriptionHost.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFDescriptionHost:<br/></p>
<p>Collaboration diagram for AAX_IACFDescriptionHost:<br/></p>
<p><b>14.58.1 Description<br/></b></p>
<p>Interface to host services provided during plug-in description<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result AcquireFeatureProperties (const AAX_Feature_UID &amp;inFeatureID, IACFUnknown<br/>&#8727;&#8727;outFeatureProperties)=0<br/></p>
<p><b>14.58.2 Member Function Documentation<br/></b></p>
<p><b>14.58.2.1 AcquireFeatureProperties()<br/></b></p>
<p>virtual AAX_Result AAX_IACFDescriptionHost::AcquireFeatureProperties (<br/>const AAX_Feature_UID &amp; inFeatureID,<br/>IACFUnknown &#8727;&#8727; outFeatureProperties ) [pure virtual]<br/></p>
<p>outFeatureProperties must support AAX_IACFFeatureInfo const methods<br/></p>
<p><b>See also<br/></b>AAX_IDescriptionHost::AcquireFeatureProperties()<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFDescriptionHost.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>700 Class Documentation<br/></b></p>
<p><b>14.59 AAX_IACFEffectDescriptor Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFEffectDescriptor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFEffectDescriptor:<br/></p>
<p>Collaboration diagram for AAX_IACFEffectDescriptor:<br/></p>
<p><b>14.59.1 Description<br/></b></p>
<p>Versioned interface for an AAX_IEffectDescriptor.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result AddComponent (IACFUnknown &#8727;inComponentDescriptor)=0<br/>Add a component to an instance of a component descriptor.<br/></p>
<p>&#8226; virtual AAX_Result AddName (const char &#8727;inPlugInName)=0<br/>Add a name to the Effect.<br/></p>
<p>&#8226; virtual AAX_Result AddCategory (uint32_t inCategory)=0<br/>Add a category to your plug-in. See AAX_EPlugInCategory.<br/></p>
<p>&#8226; virtual AAX_Result AddCategoryBypassParameter (uint32_t inCategory, AAX_CParamID inParamID)=0<br/>Add a category to your plug-in. See AAX_EPlugInCategory.<br/></p>
<p>&#8226; virtual AAX_Result AddProcPtr (void &#8727;inProcPtr, AAX_CProcPtrID inProcID)=0<br/>Add a process pointer.<br/></p>
<p>&#8226; virtual AAX_Result SetProperties (IACFUnknown &#8727;inProperties)=0<br/>Set the properties of a new property map.<br/></p>
<p>&#8226; virtual AAX_Result AddResourceInfo (AAX_EResourceType inResourceType, const char &#8727;inInfo)=0<br/>Set resource file info.<br/></p>
<p>&#8226; virtual AAX_Result AddMeterDescription (AAX_CTypeID inMeterID, const char &#8727;inMeterName, IACFUnknown<br/>&#8727;inProperties)=0<br/></p>
<p>Add name and property map to meter with given ID.<br/></p>
<p><b>14.59.2 Member Function Documentation<br/></b></p>
<p><b>14.59.2.1 AddComponent()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDescriptor::AddComponent (<br/>IACFUnknown &#8727; inComponentDescriptor ) [pure virtual]<br/></p>
<p>Add a component to an instance of a component descriptor.<br/></p>
<p>Unlike with AAX_ICollection::AddEffect(), the AAX_IEffectDescriptor does not take ownership of the AAX_IComponentDescriptor<br/>that is passed to it in this method. The host copies out the contents of this descriptor, and thus the plug-in may<br/>re-use the same descriptor object when creating additional similar components.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.59 AAX_IACFEffectDescriptor Class Reference 701<br/></b></p>
<p><b>Parameters<br/></b>in inComponentDescriptor<br/></p>
<p><b>14.59.2.2 AddName()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDescriptor::AddName (<br/>const char &#8727; inPlugInName ) [pure virtual]<br/></p>
<p>Add a name to the Effect.<br/></p>
<p>May be called multiple times to add abbreviated Effect names.<br/></p>
<p><b>Note<br/></b>Every Effect must include at least one name variant with 31 or fewer characters, plus a null terminating<br/>character<br/></p>
<p><b>Parameters<br/></b>in inPlugInName The name assigned to the plug-in.<br/></p>
<p><b>14.59.2.3 AddCategory()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDescriptor::AddCategory (<br/>uint32_t inCategory ) [pure virtual]<br/></p>
<p>Add a category to your plug-in. See AAX_EPlugInCategory.<br/></p>
<p><b>Parameters<br/></b>in inCategory One of the categories for the plug-in.<br/></p>
<p><b>14.59.2.4 AddCategoryBypassParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDescriptor::AddCategoryBypassParameter (<br/>uint32_t inCategory,<br/>AAX_CParamID inParamID ) [pure virtual]<br/></p>
<p>Add a category to your plug-in. See AAX_EPlugInCategory.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>702 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inCategory One of the categories for the plug-in.<br/>in inParamID The parameter ID of the parameter used to bypass the category seciont of the plug-in.<br/></p>
<p><b>14.59.2.5 AddProcPtr()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDescriptor::AddProcPtr (<br/>void &#8727; inProcPtr,<br/>AAX_CProcPtrID inProcID ) [pure virtual]<br/></p>
<p>Add a process pointer.<br/></p>
<p><b>Parameters<br/></b>in inProcPtr A process pointer.<br/>in inProcID A process ID.<br/></p>
<p><b>14.59.2.6 SetProperties()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDescriptor::SetProperties (<br/>IACFUnknown &#8727; inProperties ) [pure virtual]<br/></p>
<p>Set the properties of a new property map.<br/></p>
<p><b>Parameters<br/></b>in inProperties Description<br/></p>
<p><b>14.59.2.7 AddResourceInfo()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDescriptor::AddResourceInfo (<br/>AAX_EResourceType inResourceType,<br/>const char &#8727; inInfo ) [pure virtual]<br/></p>
<p>Set resource file info.<br/></p>
<p><b>Parameters<br/></b>in inResourceType See AAX_EResourceType.<br/>in inInfo Definition varies on the resource type.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.60 AAX_IACFEffectDescriptor_V2 Class Reference 703<br/></b></p>
<p><b>14.59.2.8 AddMeterDescription()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDescriptor::AddMeterDescription (<br/>AAX_CTypeID inMeterID,<br/>const char &#8727; inMeterName,<br/>IACFUnknown &#8727; inProperties ) [pure virtual]<br/></p>
<p>Add name and property map to meter with given ID.<br/></p>
<p><b>Parameters<br/></b>in inMeterID The ID of the meter being described.<br/>in inMeterName The name of the meter.<br/>in inProperties The property map containing meter related data such as meter type, orientation, etc.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFEffectDescriptor.h<br/></p>
<p><b>14.60 AAX_IACFEffectDescriptor_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFEffectDescriptor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFEffectDescriptor_V2:<br/></p>
<p>Collaboration diagram for AAX_IACFEffectDescriptor_V2:<br/></p>
<p><b>14.60.1 Description<br/></b></p>
<p>Versioned interface for an AAX_IEffectDescriptor.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result AddControlMIDINode (AAX_CTypeID inNodeID, AAX_EMIDINodeType inNodeType,<br/>const char inNodeName[ ], uint32_t inChannelMask)=0<br/></p>
<p>Add a control MIDI node to the plug-in data model.<br/></p>
<p><b>14.60.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>704 Class Documentation<br/></b></p>
<p><b>14.60.2.1 AddControlMIDINode()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDescriptor_V2::AddControlMIDINode (<br/>AAX_CTypeID inNodeID,<br/>AAX_EMIDINodeType inNodeType,<br/>const char inNodeName[],<br/>uint32_t inChannelMask ) [pure virtual]<br/></p>
<p>Add a control MIDI node to the plug-in data model.<br/></p>
<p>&#8226; This MIDI node may receive note data as well as control data.<br/></p>
<p>&#8226; To send MIDI data to the plug-in's algorithm, use AAX_IComponentDescriptor::AddMIDINode().<br/></p>
<p><b>See also<br/></b>AAX_IACFEffectParameters_V2::UpdateControlMIDINodes()<br/></p>
<p><b>Parameters<br/></b>in inNodeID The ID for the new control MIDI node.<br/>in inNodeType The type of the node.<br/>in inNodeName The name of the node.<br/>in inChannelMask The bit mask for required nodes channels (up to 16) or required global events for<br/></p>
<p>global node.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFEffectDescriptor.h<br/></p>
<p><b>14.61 AAX_IACFEffectDirectData Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFEffectDirectData.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFEffectDirectData:<br/></p>
<p>Collaboration diagram for AAX_IACFEffectDirectData:<br/></p>
<p><b>14.61.1 Description<br/></b></p>
<p>Optional interface for direct access to a plug-in's alg memory.<br/></p>
<p>Direct data access allows a plug-in to directly manipulate the data in its algorithm's private data blocks. The callback<br/>methods in this interface provide a safe context from which this kind of access may be attempted.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.61 AAX_IACFEffectDirectData Class Reference 705<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; virtual AAX_Result Initialize (IACFUnknown &#8727;iController)=0<br/>Main initialization.<br/></p>
<p>&#8226; virtual AAX_Result Uninitialize ()=0<br/>Main uninitialization.<br/></p>
<p><b>Safe data update callbacks<br/></b>These callbacks provide a safe context from which to directly access the algorithm's private data blocks. Each<br/>callback is called regularly with roughly the schedule of its corresponding AAX_IEffectParameters counterpart.<br/><b>Note<br/></b></p>
<p>Do not attempt to directly access the algorithm's data from outside these callbacks. Instead, use the packet<br/>system to route data to the algorithm using the AAX host's buffered data transfer facilities.<br/></p>
<p>&#8226; virtual AAX_Result TimerWakeup (IACFUnknown &#8727;iDataAccessInterface)=0<br/>Periodic wakeup callback for idle-time operations.<br/></p>
<p><b>14.61.2 Member Function Documentation<br/></b></p>
<p><b>14.61.2.1 Initialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDirectData::Initialize (<br/>IACFUnknown &#8727; iController ) [pure virtual]<br/></p>
<p>Main initialization.<br/></p>
<p>Called when the interface is created<br/></p>
<p><b>Parameters<br/></b>in iController A versioned reference that resolves to an AAX_IController interface<br/></p>
<p>Implemented in AAX_CEffectDirectData.<br/></p>
<p><b>14.61.2.2 Uninitialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDirectData::Uninitialize ( ) [pure virtual]<br/></p>
<p>Main uninitialization.<br/></p>
<p>Called when the interface is destroyed.<br/></p>
<p>Implemented in AAX_CEffectDirectData.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>706 Class Documentation<br/></b></p>
<p><b>14.61.2.3 TimerWakeup()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDirectData::TimerWakeup (<br/>IACFUnknown &#8727; iDataAccessInterface ) [pure virtual]<br/></p>
<p>Periodic wakeup callback for idle-time operations.<br/></p>
<p>Direct alg data updates must be triggered from this method.<br/></p>
<p>This method is called from the host using a non-main thread. In general, it should be driven at approximately one<br/>call per 30 ms. However, the wakeup is not guaranteed to be called at any regular interval - for example, it could<br/>be held off by a high real-time processing load - and there is no host contract regarding maximum latency between<br/>wakeup calls.<br/></p>
<p>This wakeup thread runs continuously and cannot be armed/disarmed or by the plug-in.<br/></p>
<p><b>Parameters<br/></b>in iDataAccessInterface Reference to the direct access interface.<br/></p>
<p><b>Note<br/></b>It is not safe to save this address or call the methods in this interface from other threads.<br/></p>
<p>Implemented in AAX_CEffectDirectData.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFEffectDirectData.h<br/></p>
<p><b>14.62 AAX_IACFEffectDirectData_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFEffectDirectData.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFEffectDirectData_V2:<br/></p>
<p>Collaboration diagram for AAX_IACFEffectDirectData_V2:<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>AAX host and plug-in event notification<br/></b></p>
<p>&#8226; virtual AAX_Result NotificationReceived (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData,<br/>uint32_t inNotificationDataSize)=0<br/></p>
<p>Notification Hook.<br/></p>
<p><b>14.62.1 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.63 AAX_IACFEffectGUI Class Reference 707<br/></b></p>
<p><b>14.62.1.1 NotificationReceived()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectDirectData_V2::NotificationReceived (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [pure virtual]<br/></p>
<p>Notification Hook.<br/></p>
<p>Called from the host to deliver notifications to this object.<br/></p>
<p>Look at the AAX_ENotificationEvent enumeration to see a description of events you can listen for and the data they<br/>come with.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>some notifications are sent only to the plug-in GUI while other notifications are sent only to the plug-<br/>in data model. If you are not seeing an expected notification, try checking the other plug-in objects'<br/>NotificationReceived() methods.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>the host may dispatch notifications synchronously or asynchronously, and calls to this method may<br/>occur concurrently on multiple threads.<br/></p>
<p>A plug-in may also dispatch custom notifications using AAX_IController::SendNotification(). Custom notifi-<br/>cations will be posted back to the plug-in's other objects which support a NotificationReceived()<br/>method (e.g. the GUI).<br/></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification being received. Notifications form the host are one of<br/></p>
<p>AAX_ENotificationEvent<br/>in inNotificationData Block of incoming notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p>Implemented in AAX_CEffectDirectData.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFEffectDirectData.h<br/></p>
<p><b>14.63 AAX_IACFEffectGUI Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFEffectGUI.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFEffectGUI:<br/></p>
<p>Collaboration diagram for AAX_IACFEffectGUI:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>708 Class Documentation<br/></b></p>
<p><b>14.63.1 Description<br/></b></p>
<p>The interface for a AAX Plug-in's GUI (graphical user interface).<br/></p>
<p>This is the interface for an instance of a plug-in's GUI that gets exposed to the host application. The AAX host<br/>interacts with your plug-in's GUI via this interface. See GUI interface.<br/></p>
<p>The plug-in's implementation of this interface is responsible for managing the plug-in's window and graphics objects<br/>and for defining the interactions between GUI views and the plug-in's data model.<br/></p>
<p>At initialization, the host provides this interface with a reference to AAX_IController. The GUI may use this controller<br/>to retrieve a pointer to the plug-in's AAX_IEffectParameters interface, allowing the GUI to request changes to the<br/>plug-in's data model in response to view events. In addition, the controller provides a means of querying information<br/>from the host such as stem format or sample rate<br/></p>
<p>When managing a plug-in's GUI it is important to remember that this is just one of many possible sets of views<br/>for the plug-in's parameters. Other views and editors, such as automation lanes or control surfaces, also have the<br/>ability to synchronously interact with the plug-in's abstract data model interface. Therefore, the GUI should not take<br/>asymmetric control over the data model, act as a secondary data model, or otherwise assume exclusive ownership<br/>of the plug-in's state. In general, the data model's abstraction to a pure virtual interface will protect against such<br/>aberrations, but this remains an important consideration when managing sophisiticated GUI interactions.<br/></p>
<p>You will most likely inherit your implementation of this interface from AAX_CEffectGUI, a default implementation that<br/>provides basic GUI functionality and which you can override and customize as needed.<br/></p>
<p>The SDK includes several examples of how the GUI interface may be extended and implemented in order to provide<br/>support for third-party frameworks. These examples can be found in the /Extensions/GUI directory in the SDK.<br/></p>
<p><b>Note<br/></b>Your implementation of this interface must inherit from AAX_IEffectGUI.<br/></p>
<p><b>Legacy Porting Notes </b>In the legacy plug-in SDK, these methods were found in CProcess and CEffectProcess.<br/>For additional CProcess methods, see AAX_IEffectParameters.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; virtual AAX_Result Initialize (IACFUnknown &#8727;iController)=0<br/>Main GUI initialization.<br/></p>
<p>&#8226; virtual AAX_Result Uninitialize ()=0<br/>Main GUI uninitialization.<br/></p>
<p><b>AAX host and plug-in event notification<br/></b></p>
<p>&#8226; virtual AAX_Result NotificationReceived (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData,<br/>uint32_t inNotificationDataSize)=0<br/></p>
<p>Notification Hook.<br/></p>
<p><b>View accessors<br/></b></p>
<p>&#8226; virtual AAX_Result SetViewContainer (IACFUnknown &#8727;iViewContainer)=0<br/>Provides a handle to the main plug-in window.<br/></p>
<p>&#8226; virtual AAX_Result GetViewSize (AAX_Point &#8727;oViewSize) const =0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.63 AAX_IACFEffectGUI Class Reference 709<br/></b></p>
<p>Retrieves the size of the plug-in window.<br/></p>
<p><b>GUI update methods<br/></b></p>
<p>&#8226; virtual AAX_Result Draw (AAX_Rect &#8727;iDrawRect)=0<br/>DEPRECATED, Not called from host any longer. Your chosen graphics framework should be directly handling draw<br/>events from the OS.<br/></p>
<p>&#8226; virtual AAX_Result TimerWakeup ()=0<br/>Periodic wakeup callback for idle-time operations.<br/></p>
<p>&#8226; virtual AAX_Result ParameterUpdated (AAX_CParamID inParamID)=0<br/>Notifies the GUI that a parameter value has changed.<br/></p>
<p><b>Host interface methods<br/></b>Miscellaneous methods to provide host-specific functionality<br/></p>
<p>&#8226; virtual AAX_Result GetCustomLabel (AAX_EPlugInStrings iSelector, AAX_IString &#8727;oString) const =0<br/>Called by host application to retrieve a custom plug-in string.<br/></p>
<p>&#8226; virtual AAX_Result SetControlHighlightInfo (AAX_CParamID iParameterID, AAX_CBoolean iIsHighlighted,<br/>AAX_EHighlightColor iColor)=0<br/></p>
<p>Called by host application. Indicates that a control widget should be updated with a highlight color.<br/></p>
<p><b>14.63.2 Member Function Documentation<br/></b></p>
<p><b>14.63.2.1 Initialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectGUI::Initialize (<br/>IACFUnknown &#8727; iController ) [pure virtual]<br/></p>
<p>Main GUI initialization.<br/></p>
<p>Called when the GUI is created<br/></p>
<p><b>Parameters<br/></b>in iController A versioned reference that resolves to an AAX_IController interface<br/></p>
<p>Implemented in AAX_CEffectGUI.<br/></p>
<p><b>14.63.2.2 Uninitialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectGUI::Uninitialize ( ) [pure virtual]<br/></p>
<p>Main GUI uninitialization.<br/>Called when the GUI is destroyed. Frees the GUI.<br/>Implemented in AAX_CEffectGUI.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>710 Class Documentation<br/></b></p>
<p><b>14.63.2.3 NotificationReceived()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectGUI::NotificationReceived (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [pure virtual]<br/></p>
<p>Notification Hook.<br/></p>
<p>Called from the host to deliver notifications to this object.<br/></p>
<p>Look at the AAX_ENotificationEvent enumeration to see a description of events you can listen for and the data they<br/>come with.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>some notifications are sent only to the plug-in GUI while other notifications are sent only to the plug-<br/>in data model. If you are not seeing an expected notification, try checking the other plug-in objects'<br/>NotificationReceived() methods.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>the host may dispatch notifications synchronously or asynchronously, and calls to this method may<br/>occur concurrently on multiple threads.<br/></p>
<p>A plug-in may also dispatch custom notifications using AAX_IController::SendNotification(). Custom notifi-<br/>cations will be posted back to the plug-in's other objects which support a NotificationReceived()<br/>method (e.g. the data model).<br/></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification being received. Notifications form the host are one of<br/></p>
<p>AAX_ENotificationEvent<br/>in inNotificationData Block of incoming notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p>Implemented in AAX_CEffectGUI.<br/></p>
<p><b>14.63.2.4 SetViewContainer()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectGUI::SetViewContainer (<br/>IACFUnknown &#8727; iViewContainer ) [pure virtual]<br/></p>
<p>Provides a handle to the main plug-in window.<br/></p>
<p><b>Parameters<br/></b>in iViewContainer An AAX_IViewContainer providing a native handle to the plug-in's window<br/></p>
<p>Implemented in AAX_CEffectGUI.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.63 AAX_IACFEffectGUI Class Reference 711<br/></b></p>
<p><b>14.63.2.5 GetViewSize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectGUI::GetViewSize (<br/>AAX_Point &#8727; oViewSize ) const [pure virtual]<br/></p>
<p>Retrieves the size of the plug-in window.<br/></p>
<p><b>See also<br/></b>AAX_IViewContainer::SetViewSize()<br/></p>
<p><b>Parameters<br/></b>out oViewSize The size of the plug-in window as a point (width, height)<br/></p>
<p>Implemented in AAX_CEffectGUI.<br/></p>
<p><b>14.63.2.6 Draw()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectGUI::Draw (<br/>AAX_Rect &#8727; iDrawRect ) [pure virtual]<br/></p>
<p>DEPRECATED, Not called from host any longer. Your chosen graphics framework should be directly handling draw<br/>events from the OS.<br/></p>
<p>Implemented in AAX_CEffectGUI.<br/></p>
<p><b>14.63.2.7 TimerWakeup()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectGUI::TimerWakeup ( ) [pure virtual]<br/></p>
<p>Periodic wakeup callback for idle-time operations.<br/></p>
<p>GUI animation events such as meter updates should be triggered from this method.<br/></p>
<p>This method is called from the host's main thread. In general, it should be driven at approximately one call per 30<br/>ms. However, the wakeup is not guaranteed to be called at any regular interval - for example, it could be held off by<br/>a high real-time processing load - and there is no host contract regarding maximum latency between wakeup calls.<br/></p>
<p>This wakeup runs continuously and cannot be armed/disarmed by the plug-in.<br/></p>
<p>Implemented in AAX_CEffectGUI.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>712 Class Documentation<br/></b></p>
<p><b>14.63.2.8 ParameterUpdated()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectGUI::ParameterUpdated (<br/>AAX_CParamID inParamID ) [pure virtual]<br/></p>
<p>Notifies the GUI that a parameter value has changed.<br/></p>
<p>This method is called by the host whenever a parameter value has been modified<br/></p>
<p>This method may be called on a non-main thread<br/></p>
<p>Implemented in AAX_CEffectGUI.<br/></p>
<p><b>14.63.2.9 GetCustomLabel()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectGUI::GetCustomLabel (<br/>AAX_EPlugInStrings iSelector,<br/>AAX_IString &#8727; oString ) const [pure virtual]<br/></p>
<p>Called by host application to retrieve a custom plug-in string.<br/></p>
<p>If no string is provided then the host's default will be used.<br/></p>
<p><b>Parameters<br/></b>in iSelector The requested strong. One of AAX_EPlugInStrings<br/>out oString The plug-in's custom value for the requested string<br/></p>
<p>Implemented in AAX_CEffectGUI.<br/></p>
<p><b>14.63.2.10 SetControlHighlightInfo()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectGUI::SetControlHighlightInfo (<br/>AAX_CParamID iParameterID,<br/>AAX_CBoolean iIsHighlighted,<br/>AAX_EHighlightColor iColor ) [pure virtual]<br/></p>
<p>Called by host application. Indicates that a control widget should be updated with a highlight color.<br/></p>
<p><b>Todo </b>Document this method<br/></p>
<p><b>Legacy Porting Notes </b>This method was re-named from SetControlHighliteInfo(), its name in the<br/>legacy plug-in SDK.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 713<br/></b></p>
<p><b>Parameters<br/></b>in iParameterID ID of parameter whose widget(s) must be highlighted<br/>in iIsHighlighted True if turning highlight on, false if turning it off<br/>in iColor Desired highlight color. One of AAX_EHighlightColor<br/></p>
<p>Implemented in AAX_CEffectGUI.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFEffectGUI.h<br/></p>
<p><b>14.64 AAX_IACFEffectParameters Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFEffectParameters.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFEffectParameters:<br/></p>
<p>Collaboration diagram for AAX_IACFEffectParameters:<br/></p>
<p><b>14.64.1 Description<br/></b></p>
<p>The interface for an AAX Plug-in's data model.<br/></p>
<p>This is the interface for an instance of a plug-in's data model that gets exposed to the host application. The AAX<br/>host interacts with your plug-in's data model via this interface, which includes methods that store and update of your<br/>plug-in's internal data. See Data model interface.<br/></p>
<p><b>Note<br/></b>Your implementation of this interface must inherit from AAX_IEffectParameters.<br/></p>
<p><b>Todo </b>Add documentation for expected error state return values<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; virtual AAX_Result Initialize (IACFUnknown &#8727;iController)=0<br/>Main data model initialization. Called when plug-in instance is first instantiated.<br/></p>
<p>&#8226; virtual AAX_Result Uninitialize ()=0<br/>Main data model uninitialization.<br/></p>
<p><b>AAX host and plug-in event notification<br/></b></p>
<p>&#8226; virtual AAX_Result NotificationReceived (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData,<br/>uint32_t inNotificationDataSize)=0<br/></p>
<p>Notification Hook.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>714 Class Documentation<br/></b></p>
<p><b>Parameter information<br/></b>These methods are used by the AAX host to retrieve information about the plug-in's data model.<br/></p>
<p>For information about adding parameters to the plug-in and otherwise modifying the plug-in's data model,<br/>see AAX_CParameterManager. For information about parameters, see AAX_IParameter.<br/></p>
<p>&#8226; virtual AAX_Result GetNumberOfParameters (int32_t &#8727;oNumControls) const =0<br/>CALL: Retrieves the total number of plug-in parameters.<br/></p>
<p>&#8226; virtual AAX_Result GetMasterBypassParameter (AAX_IString &#8727;oIDString) const =0<br/>CALL: Retrieves the ID of the plug-in's Master Bypass parameter.<br/></p>
<p>&#8226; virtual AAX_Result GetParameterIsAutomatable (AAX_CParamID iParameterID, AAX_CBoolean &#8727;o&#8592;&#8617;<br/>Automatable) const =0<br/></p>
<p>CALL: Retrieves information about a parameter's automatable status.<br/>&#8226; virtual AAX_Result GetParameterNumberOfSteps (AAX_CParamID iParameterID, int32_t &#8727;oNumSteps)<br/></p>
<p>const =0<br/>CALL: Retrieves the number of discrete steps for a parameter.<br/></p>
<p>&#8226; virtual AAX_Result GetParameterName (AAX_CParamID iParameterID, AAX_IString &#8727;oName) const =0<br/>CALL: Retrieves the full name for a parameter.<br/></p>
<p>&#8226; virtual AAX_Result GetParameterNameOfLength (AAX_CParamID iParameterID, AAX_IString &#8727;oName,<br/>int32_t iNameLength) const =0<br/></p>
<p>CALL: Retrieves an abbreviated name for a parameter.<br/>&#8226; virtual AAX_Result GetParameterDefaultNormalizedValue (AAX_CParamID iParameterID, double &#8727;o&#8592;&#8617;<br/></p>
<p>Value) const =0<br/>CALL: Retrieves default value of a parameter.<br/></p>
<p>&#8226; virtual AAX_Result SetParameterDefaultNormalizedValue (AAX_CParamID iParameterID, double i&#8592;&#8617;<br/>Value)=0<br/></p>
<p>CALL: Sets the default value of a parameter.<br/>&#8226; virtual AAX_Result GetParameterType (AAX_CParamID iParameterID, AAX_EParameterType &#8727;o&#8592;&#8617;<br/></p>
<p>ParameterType) const =0<br/>CALL: Retrieves the type of a parameter.<br/></p>
<p>&#8226; virtual AAX_Result GetParameterOrientation (AAX_CParamID iParameterID, AAX_EParameterOrientation<br/>&#8727;oParameterOrientation) const =0<br/></p>
<p>CALL: Retrieves the orientation that should be applied to a parameter's controls.<br/>&#8226; virtual AAX_Result GetParameter (AAX_CParamID iParameterID, AAX_IParameter &#8727;&#8727;oParameter)=0<br/></p>
<p>CALL: Retrieves an arbitrary setting within a parameter.<br/>&#8226; virtual AAX_Result GetParameterIndex (AAX_CParamID iParameterID, int32_t &#8727;oControlIndex) const =0<br/></p>
<p>CALL: Retrieves the index of a parameter.<br/>&#8226; virtual AAX_Result GetParameterIDFromIndex (int32_t iControlIndex, AAX_IString &#8727;oParameterIDString)<br/></p>
<p>const =0<br/>CALL: Retrieves the ID of a parameter.<br/></p>
<p>&#8226; virtual AAX_Result GetParameterValueInfo (AAX_CParamID iParameterID, int32_t iSelector, int32_t &#8727;o&#8592;&#8617;<br/>Value) const =0<br/></p>
<p>CALL: Retrieves a property of a parameter.<br/></p>
<p><b>Parameter setters and getters<br/></b>These methods are used by the AAX host and by the plug-in's UI to retrieve and modify the values of the plug-in's<br/>parameters.<br/><b>Note<br/></b></p>
<p>The parameter setters in this section may generate asynchronous requests.<br/></p>
<p>&#8226; virtual AAX_Result GetParameterValueFromString (AAX_CParamID iParameterID, double &#8727;oValue, const<br/>AAX_IString &amp;iValueString) const =0<br/></p>
<p>CALL: Converts a value string to a value.<br/>&#8226; virtual AAX_Result GetParameterStringFromValue (AAX_CParamID iParameterID, double iValue,<br/></p>
<p>AAX_IString &#8727;oValueString, int32_t iMaxLength) const =0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 715<br/></b></p>
<p>CALL: Converts a normalized parameter value into a string representing its corresponding real value.<br/>&#8226; virtual AAX_Result GetParameterValueString (AAX_CParamID iParameterID, AAX_IString &#8727;oValueString,<br/></p>
<p>int32_t iMaxLength) const =0<br/>CALL: Retrieves the value string associated with a parameter's current value.<br/></p>
<p>&#8226; virtual AAX_Result GetParameterNormalizedValue (AAX_CParamID iParameterID, double &#8727;oValuePtr)<br/>const =0<br/></p>
<p>CALL: Retrieves a parameter's current value.<br/>&#8226; virtual AAX_Result SetParameterNormalizedValue (AAX_CParamID iParameterID, double iValue)=0<br/></p>
<p>CALL: Sets the specified parameter to a new value.<br/>&#8226; virtual AAX_Result SetParameterNormalizedRelative (AAX_CParamID iParameterID, double iValue)=0<br/></p>
<p>CALL: Sets the specified parameter to a new value relative to its current value.<br/></p>
<p><b>Automated parameter helpers<br/></b>These methods are used to lock and unlock automation system 'resources' when updating automatable param-<br/>eters.<br/><b>Note<br/></b></p>
<p>You should never need to override these methods to extend their behavior beyond what is provided in<br/>AAX_CEffectParameters and AAX_IParameter<br/></p>
<p>&#8226; virtual AAX_Result TouchParameter (AAX_CParamID iParameterID)=0<br/>&quot;Touches&quot; (locks) a parameter in the automation system to a particular control in preparation for updates<br/></p>
<p>&#8226; virtual AAX_Result ReleaseParameter (AAX_CParamID iParameterID)=0<br/>Releases a parameter from a &quot;touched&quot; state.<br/></p>
<p>&#8226; virtual AAX_Result UpdateParameterTouch (AAX_CParamID iParameterID, AAX_CBoolean iTouch&#8592;&#8617;<br/>State)=0<br/></p>
<p>Sets a &quot;touched&quot; state on a parameter.<br/></p>
<p><b>Asynchronous parameter update methods<br/></b>These methods are called by the AAX host when parameter values have been updated. They are called by the<br/>host and can be triggered by other plug-in modules via calls to AAX_IParameter's SetValue methods, e.g.<br/>SetValueWithFloat()<br/>These methods are responsible for updating parameter values.<br/>Do not call these methods directly! To ensure proper synchronization and to avoid problematic dependency<br/>chains, other methods (e.g. SetParameterNormalizedValue()) and components (e.g. AAX_IEffectGUI) should<br/>always call a SetValue method on AAX_IParameter to update parameter values. The SetValue method<br/>will properly manage automation locks and other system resources.<br/></p>
<p>&#8226; virtual AAX_Result UpdateParameterNormalizedValue (AAX_CParamID iParameterID, double iValue,<br/>AAX_EUpdateSource iSource)=0<br/></p>
<p>Updates a single parameter's state to its current value.<br/>&#8226; virtual AAX_Result UpdateParameterNormalizedRelative (AAX_CParamID iParameterID, double i&#8592;&#8617;<br/></p>
<p>Value)=0<br/>Updates a single parameter's state to its current value, as a difference with the parameter's previous value.<br/></p>
<p>&#8226; virtual AAX_Result GenerateCoefficients ()=0<br/>Generates and dispatches new coefficient packets.<br/></p>
<p><b>State reset handlers<br/></b></p>
<p>&#8226; virtual AAX_Result ResetFieldData (AAX_CFieldIndex inFieldIndex, void &#8727;oData, uint32_t inDataSize)<br/>const =0<br/></p>
<p>Called by the host to reset a private data field in the plug-in's algorithm.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>716 Class Documentation<br/></b></p>
<p><b>Chunk methods<br/></b>These methods are used to save and restore collections of plug-in state information, known as chunks. Chunks<br/>are used by the host when saving or restoring presets and session settings and when providing &quot;compare&quot;<br/>functionality for plug-ins.<br/>The default implementation of these methods in AAX_CEffectParameters supports a single chunk that includes<br/>state information for all of the plug-in's registered parameters. Override all of these methods to add support for<br/>additional chunks in your plug-in, for example if your plug-in contains any persistent state that is not encapsulated<br/>by its set of registered parameters.<br/></p>
<p><b>Warning<br/></b>Remember that plug-in chunk data may be loaded on a different platform from the one where it is saved.<br/>All data structures in the chunk must be properly data-aligned for compatibility across all platforms that<br/>the plug-in supports. See AAX_ALIGN_FILE_ALG for notes about common cross-platform pitfalls for data<br/>structure alignment.<br/></p>
<p>For reference, see also:<br/></p>
<p>&#8226; AAX_CChunkDataParser<br/>&#8226; AAX_SPlugInChunk<br/></p>
<p>&#8226; virtual AAX_Result GetNumberOfChunks (int32_t &#8727;oNumChunks) const =0<br/>Retrieves the number of chunks used by this plug-in.<br/></p>
<p>&#8226; virtual AAX_Result GetChunkIDFromIndex (int32_t iIndex, AAX_CTypeID &#8727;oChunkID) const =0<br/>Retrieves the ID associated with a chunk index.<br/></p>
<p>&#8226; virtual AAX_Result GetChunkSize (AAX_CTypeID iChunkID, uint32_t &#8727;oSize) const =0<br/>Get the size of the data structure that can hold all of a chunk's information.<br/></p>
<p>&#8226; virtual AAX_Result GetChunk (AAX_CTypeID iChunkID, AAX_SPlugInChunk &#8727;oChunk) const =0<br/>Fills a block of data with chunk information representing the plug-in's current state.<br/></p>
<p>&#8226; virtual AAX_Result SetChunk (AAX_CTypeID iChunkID, const AAX_SPlugInChunk &#8727;iChunk)=0<br/>Restores a set of plug-in parameters based on chunk information.<br/></p>
<p>&#8226; virtual AAX_Result CompareActiveChunk (const AAX_SPlugInChunk &#8727;iChunkP, AAX_CBoolean &#8727;oIs&#8592;&#8617;<br/>Equal) const =0<br/></p>
<p>Determine if a chunk represents settings that are equivalent to the plug-in's current state.<br/>&#8226; virtual AAX_Result GetNumberOfChanges (int32_t &#8727;oNumChanges) const =0<br/></p>
<p>Retrieves the number of parameter changes made since the plug-in's creation.<br/></p>
<p><b>Thread methods<br/></b></p>
<p>&#8226; virtual AAX_Result TimerWakeup ()=0<br/>Periodic wakeup callback for idle-time operations.<br/></p>
<p><b>Auxiliary UI methods<br/></b></p>
<p>&#8226; virtual AAX_Result GetCurveData (AAX_CTypeID iCurveType, const float &#8727;iValues, uint32_t iNumValues,<br/>float &#8727;oValues) const =0<br/></p>
<p>Generate a set of output values based on a set of given input values.<br/></p>
<p><b>Custom data methods<br/></b>These functions exist as a proxiable way to move data between different modules (e.g. AAX_IEffectParameters<br/>and AAX_IEffectGUI.) Using these, the GUI can query any data through GetCustomData() with a plug-in defined<br/>typeID, void&#8727; and size. This has an advantage over just sharing memory in that this function can work as a<br/>remote proxy as we enable those sorts of features later in the platform. Likewise, the GUI can also set arbitrary<br/>data on the data model by using the SetCustomData() function with the same idea.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 717<br/></b></p>
<p><b>Note<br/></b>These are plug-in internal only. They are not called from the host right now, or likely ever.<br/></p>
<p>&#8226; virtual AAX_Result GetCustomData (AAX_CTypeID iDataBlockID, uint32_t inDataSize, void &#8727;oData,<br/>uint32_t &#8727;oDataWritten) const =0<br/></p>
<p>An optional interface hook for getting custom data from another module.<br/>&#8226; virtual AAX_Result SetCustomData (AAX_CTypeID iDataBlockID, uint32_t inDataSize, const void &#8727;i&#8592;&#8617;<br/></p>
<p>Data)=0<br/>An optional interface hook for setting custom data for use by another module.<br/></p>
<p><b>MIDI methods<br/></b></p>
<p>&#8226; virtual AAX_Result DoMIDITransfers ()=0<br/>MIDI update callback.<br/></p>
<p><b>14.64.2 Member Function Documentation<br/></b></p>
<p><b>14.64.2.1 Initialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::Initialize (<br/>IACFUnknown &#8727; iController ) [pure virtual]<br/></p>
<p>Main data model initialization. Called when plug-in instance is first instantiated.<br/></p>
<p><b>Note<br/></b>Most plug-ins should override AAX_CEffectParameters::EffectInit() rather than directly overriding this method<br/></p>
<p><b>Parameters<br/></b>in iController A versioned reference that resolves to an AAX_IController interface<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.2 Uninitialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::Uninitialize ( ) [pure virtual]<br/></p>
<p>Main data model uninitialization.<br/></p>
<p><b>Todo </b>Docs: When exactly is AAX_IACFEffectParameters::Uninitialize() called, and under what conditions?<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>718 Class Documentation<br/></b></p>
<p><b>14.64.2.3 NotificationReceived()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::NotificationReceived (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [pure virtual]<br/></p>
<p>Notification Hook.<br/></p>
<p>Called from the host to deliver notifications to this object.<br/></p>
<p>Look at the AAX_ENotificationEvent enumeration to see a description of events you can listen for and the data they<br/>come with.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>some notifications are sent only to the plug-in GUI while other notifications are sent only to the plug-<br/>in data model. If you are not seeing an expected notification, try checking the other plug-in objects'<br/>NotificationReceived() methods.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>the host may dispatch notifications synchronously or asynchronously, and calls to this method may<br/>occur concurrently on multiple threads.<br/></p>
<p>A plug-in may also dispatch custom notifications using AAX_IController::SendNotification(). Custom notifi-<br/>cations will be posted back to the plug-in's other objects which support a NotificationReceived()<br/>method (e.g. the GUI).<br/></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification being received. Notifications form the host are one of<br/></p>
<p>AAX_ENotificationEvent<br/>in inNotificationData Block of incoming notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.4 GetNumberOfParameters()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetNumberOfParameters (<br/>int32_t &#8727; oNumControls ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the total number of plug-in parameters.<br/></p>
<p><b>Parameters<br/></b>out oNumControls The number of parameters in the plug-in's Parameter Manager<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 719<br/></b></p>
<p><b>14.64.2.5 GetMasterBypassParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetMasterBypassParameter (<br/>AAX_IString &#8727; oIDString ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the ID of the plug-in's Master Bypass parameter.<br/></p>
<p>This is required if you want our master bypass functionality in the host to hook up to your bypass parameters.<br/></p>
<p><b>Parameters<br/></b>out oIDString The ID of the plug-in's Master Bypass control<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.6 GetParameterIsAutomatable()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterIsAutomatable (<br/>AAX_CParamID iParameterID,<br/>AAX_CBoolean &#8727; oAutomatable ) const [pure virtual]<br/></p>
<p>CALL: Retrieves information about a parameter's automatable status.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oAutomatable True if the queried parameter is automatable, false if it is not<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.7 GetParameterNumberOfSteps()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterNumberOfSteps (<br/>AAX_CParamID iParameterID,<br/>int32_t &#8727; oNumSteps ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the number of discrete steps for a parameter.<br/></p>
<p><b>Note<br/></b>The value returned for oNumSteps MUST be greater than zero. All other values will be considered an error<br/>by the host.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oNumSteps The number of steps for this parameter<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>720 Class Documentation<br/></b></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.8 GetParameterName()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterName (<br/>AAX_CParamID iParameterID,<br/>AAX_IString &#8727; oName ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the full name for a parameter.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oName Reference to an AAX_IString owned by the host. The plug-in must set this string<br/></p>
<p>equal to the parameter's full name.<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.9 GetParameterNameOfLength()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterNameOfLength (<br/>AAX_CParamID iParameterID,<br/>AAX_IString &#8727; oName,<br/>int32_t iNameLength ) const [pure virtual]<br/></p>
<p>CALL: Retrieves an abbreviated name for a parameter.<br/></p>
<p>In general, lengths of 3 through 8 and 31 should be specifically addressed.<br/></p>
<p><b>Host Compatibility Notes </b>In most cases, the AAX host will call GetParameterName() or GetParameterNameOfLength()<br/>to retrieve parameter names for display. However, when Pro Tools is retrieving a plug-in<br/>name for display on a control surface the XML data stored in the plug-in's page tables<br/>will be used in preference to values retrieved from these methods.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oName Reference to an AAX_IString owned by the host. The plug-in must set this string<br/></p>
<p>equal to an abbreviated name for the parameter, using iNameLength characters or<br/>fewer.<br/></p>
<p>in iNameLength The maximum number of characters in oName<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 721<br/></b></p>
<p><b>14.64.2.10 GetParameterDefaultNormalizedValue()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterDefaultNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double &#8727; oValue ) const [pure virtual]<br/></p>
<p>CALL: Retrieves default value of a parameter.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oValue The parameter's default value<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.11 SetParameterDefaultNormalizedValue()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::SetParameterDefaultNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double iValue ) [pure virtual]<br/></p>
<p>CALL: Sets the default value of a parameter.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being updated<br/>out iValue The parameter's new default value<br/></p>
<p><b>Todo </b>THIS IS NOT CALLED FROM HOST. USEFUL FOR INTERNAL USE ONLY?<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.12 GetParameterType()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterType (<br/>AAX_CParamID iParameterID,<br/>AAX_EParameterType &#8727; oParameterType ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the type of a parameter.<br/></p>
<p><b>Todo </b>The concept of parameter type needs more documentation<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>722 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oParameterType The parameter's type<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.13 GetParameterOrientation()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterOrientation (<br/>AAX_CParamID iParameterID,<br/>AAX_EParameterOrientation &#8727; oParameterOrientation ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the orientation that should be applied to a parameter's controls.<br/></p>
<p><b>Todo </b>update this documentation<br/></p>
<p>This method allows you to specify the orientation of knob controls that are managed by the host (e.g. knobs on an<br/>attached control surface.)<br/></p>
<p>Here is an example override of this method that reverses the orientation of a control for a parameter:<br/>// AAX_IParameter* myBackwardsParameter<br/>if (iParameterID == myBackwardsParameter-&gt;Identifier())<br/>{<br/></p>
<p>*oParameterType =<br/>AAX_eParameterOrientation_BottomMinTopMax |<br/>AAX_eParameterOrientation_LeftMinRightMax |<br/>AAX_eParameterOrientation_RotaryWrapMode |<br/>AAX_eParameterOrientation_RotaryLeftMinRightMax;<br/></p>
<p>}<br/></p>
<p>The orientation options are set according to AAX_EParameterOrientationBits<br/></p>
<p><b>Legacy Porting Notes </b>AAX_IEffectParameters::GetParameterOrientation() corresponds to the GetControl&#8592;&#8617;<br/>Orientation() method in the legacy RTAS/TDM SDK.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oParameterOrientation The orientation of the parameter<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.14 GetParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameter (<br/>AAX_CParamID iParameterID,<br/>AAX_IParameter &#8727;&#8727; oParameter ) [pure virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 723<br/></b></p>
<p>CALL: Retrieves an arbitrary setting within a parameter.<br/></p>
<p>This is a convenience function for accessing the richer parameter interface from the plug-in's other modules.<br/></p>
<p><b>Note<br/></b>This function must not be called by the host; AAX_IParameter is not safe for passing across the binary bound-<br/>ary with the host!<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oParameter A pointer to the returned parameter<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.15 GetParameterIndex()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterIndex (<br/>AAX_CParamID iParameterID,<br/>int32_t &#8727; oControlIndex ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the index of a parameter.<br/></p>
<p>Although parameters are normally referenced by their AAX_CParamID, each parameter is also associated with a<br/>unique numeric index.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oControlIndex The parameter's numeric index<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.16 GetParameterIDFromIndex()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterIDFromIndex (<br/>int32_t iControlIndex,<br/>AAX_IString &#8727; oParameterIDString ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the ID of a parameter.<br/></p>
<p>This method can be used to convert a parameter's unique numeric index to its AAX_CParamID<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>724 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iControlIndex The numeric index of the parameter that is being queried<br/>out oParameterIDString Reference to an AAX_IString owned by the host. The plug-in must set this<br/></p>
<p>string equal to the parameter's ID.<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.17 GetParameterValueInfo()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterValueInfo (<br/>AAX_CParamID iParameterID,<br/>int32_t iSelector,<br/>int32_t &#8727; oValue ) const [pure virtual]<br/></p>
<p>CALL: Retrieves a property of a parameter.<br/></p>
<p>This is a general purpose query that is specialized based on the value of iSelector. The currently supported<br/>selector values are described by AAX_EParameterValueInfoSelector . The meaning of oValue is dependent upon<br/>iSelector .<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>in iSelector The selector of the parameter value to retrieve. See AAX_EParameterValueInfoSelector<br/>out oValue The value of the specified parameter<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.18 GetParameterValueFromString()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterValueFromString (<br/>AAX_CParamID iParameterID,<br/>double &#8727; oValue,<br/>const AAX_IString &amp; iValueString ) const [pure virtual]<br/></p>
<p>CALL: Converts a value string to a value.<br/></p>
<p>This method uses the queried parameter's display delegate and taper to convert a char&#8727; string into its correspond-<br/>ing value. The formatting of valueString must be supported by the parameter's display delegate in order for this call<br/>to succeed.<br/></p>
<p><b>Legacy Porting Notes </b>This method corresponds to CProcess::MapControlStringToVal() in the RTAS/TDM SDK<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 725<br/></b></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oValue The value associated with valueString<br/>in iValueString The formatted value string that will be converted into a value<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.19 GetParameterStringFromValue()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterStringFromValue (<br/>AAX_CParamID iParameterID,<br/>double iValue,<br/>AAX_IString &#8727; oValueString,<br/>int32_t iMaxLength ) const [pure virtual]<br/></p>
<p>CALL: Converts a normalized parameter value into a string representing its corresponding real value.<br/></p>
<p>This method uses the queried parameter's display delegate and taper to convert a normalized value into the corre-<br/>sponding char&#8727; value string for its real value.<br/></p>
<p><b>Legacy Porting Notes </b>This method corresponds to CProcess::MapControlValToString() in the RTAS/TDM SDK<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>in iValue The normalized value that will be converted to a formatted valueString<br/>out oValueString The formatted value string associated with value<br/>in iMaxLength The maximum length of valueString<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.20 GetParameterValueString()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterValueString (<br/>AAX_CParamID iParameterID,<br/>AAX_IString &#8727; oValueString,<br/>int32_t iMaxLength ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the value string associated with a parameter's current value.<br/></p>
<p>This method uses the queried parameter's display delegate and taper to convert its current value into a correspond-<br/>ing char&#8727; value string.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>726 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oValueString The formatted value string associated with the parameter's current value<br/>in iMaxLength The maximum length of valueString<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.21 GetParameterNormalizedValue()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetParameterNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double &#8727; oValuePtr ) const [pure virtual]<br/></p>
<p>CALL: Retrieves a parameter's current value.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>out oValuePtr The parameter's current value<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.22 SetParameterNormalizedValue()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::SetParameterNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double iValue ) [pure virtual]<br/></p>
<p>CALL: Sets the specified parameter to a new value.<br/></p>
<p>SetParameterNormalizedValue() is responsible for initiating any process that is required in order to update all of the<br/>parameter's controls (e.g. in the plug-in's GUI, on control surfaces, in automation lanes, etc.) In most cases, the<br/>parameter manager will handle this initiation step.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being set<br/>in iValue The value to which the parameter should be set<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 727<br/></b></p>
<p><b>14.64.2.23 SetParameterNormalizedRelative()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::SetParameterNormalizedRelative (<br/>AAX_CParamID iParameterID,<br/>double iValue ) [pure virtual]<br/></p>
<p>CALL: Sets the specified parameter to a new value relative to its current value.<br/></p>
<p>This method is used in cases when a relative control value is more convenient, for example when updating a GUI<br/>control using a mouse wheel or the arrow keys. Note that the host may apply the parameter's step size prior to<br/>calling SetParameterNormalizedRelative() in order to determine the correct value for aValue.<br/></p>
<p>SetParameterNormalizedRelative() can be used to incorporate &quot;wrapping&quot; behavior in a parameter's controls, if<br/>desired. If this behavior is not desired, then this method must properly account for overflow of the parameter's<br/>normalized value.<br/></p>
<p>SetParameterNormalizedRelative() is responsible for initiating any process that is required in order to update all of<br/>the parameter's controls (e.g. in the plug-in's GUI, on control surfaces, in automation lanes, etc.) In most cases, the<br/>parameter manager will handle this initiation step.<br/></p>
<p>See also UpdateParameterNormalizedRelative().<br/></p>
<p><b>Todo </b>REMOVE THIS METHOD (?)<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being queried<br/>in iValue The change in value that should be applied to the parameter<br/></p>
<p><b>Todo </b>NOT CURRENTLY CALLED FROM THE HOST. USEFUL FOR INTERNAL USE ONLY?<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.24 TouchParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::TouchParameter (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>&quot;Touches&quot; (locks) a parameter in the automation system to a particular control in preparation for updates<br/></p>
<p>This method is called by the Parameter Manager to prime a parameter for receiving new automation data. When an<br/>automatable parameter is touched by a control, it will reject input from other controls until it is released.<br/></p>
<p><b>Note<br/></b>You should never need to override this method when using AAX_CEffectParameters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>728 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iParameterID The parameter that is being touched<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.25 ReleaseParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::ReleaseParameter (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>Releases a parameter from a &quot;touched&quot; state.<br/></p>
<p>This method is called by the Parameter Manager to release a parameter so that any control may send updates to<br/>the parameter.<br/></p>
<p><b>Note<br/></b>You should never need to override this method when using AAX_CEffectParameters.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The parameter that is being released<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.26 UpdateParameterTouch()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::UpdateParameterTouch (<br/>AAX_CParamID iParameterID,<br/>AAX_CBoolean iTouchState ) [pure virtual]<br/></p>
<p>Sets a &quot;touched&quot; state on a parameter.<br/></p>
<p><b>Note<br/></b>This method should be overriden when dealing with linked parameters. Do NOT use this method to keep track<br/>of touch states. Use the automation delegate for that.<br/></p>
<p><b>Parameters<br/></b>in iParameterID The parameter that is changing touch states.<br/>in iTouchState The touch state of the parameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 729<br/></b></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.27 UpdateParameterNormalizedValue()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::UpdateParameterNormalizedValue (<br/>AAX_CParamID iParameterID,<br/>double iValue,<br/>AAX_EUpdateSource iSource ) [pure virtual]<br/></p>
<p>Updates a single parameter's state to its current value.<br/></p>
<p><b>Note<br/></b>Do not call this method from the plug-in. This method should be called by the host only. To set parameter<br/>values from within the plug-in, use the AAX_IParameter interface.<br/></p>
<p><b>Todo </b>FLAGGED FOR CONSIDERATION OF REVISION<br/></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being updated<br/>in iValue The parameter's current value, to which its internal state must be updated<br/>in iSource The source of the update<br/></p>
<p>Implemented in AAX_CMonolithicParameters, and AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.28 UpdateParameterNormalizedRelative()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::UpdateParameterNormalizedRelative (<br/>AAX_CParamID iParameterID,<br/>double iValue ) [pure virtual]<br/></p>
<p>Updates a single parameter's state to its current value, as a difference with the parameter's previous value.<br/></p>
<p><b>Deprecated </b>This is not called from the host. It may still be useful for internal calls within the plug-in, though it<br/>should only ever be used to update non-automatable parameters. Automatable parameters should<br/>always be updated through the AAX_IParameter interface, which will ensure proper coordination with<br/>other automation clients.<br/></p>
<p>UpdateParameterNormalizedRelative() can be used to incorporate &quot;wraparound&quot; behavior in a parameter's controls,<br/>if desired. If this behavior is not desired, then this method must properly account for overflow of the parameter's<br/>normalized value.<br/></p>
<p><b>See also<br/></b>SetParameterNormalizedRelative()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>730 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iParameterID The ID of the parameter that is being updated<br/>in iValue The difference between the parameter's current value and its previous value<br/></p>
<p>(normalized). The parameter's state must be updated to reflect this difference.<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.29 GenerateCoefficients()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GenerateCoefficients ( ) [pure virtual]<br/></p>
<p>Generates and dispatches new coefficient packets.<br/></p>
<p>This method is responsible for updating the coefficient packets associated with all parameters whose states have<br/>changed since the last call to GenerateCoefficients(). The host may call this method once for every parameter<br/>update, or it may &quot;batch&quot; parameter updates such that changes for several parameters are all handled by a single<br/>call to GenerateCoefficients().<br/></p>
<p>For more information on tracking parameters' statuses using the AAX_CPacketDispatcher, helper class, see<br/>AAX_CPacketDispatcher::SetDirty().<br/></p>
<p><b>Note<br/></b>Do not call this method from the plug-in. This method should be called by the host only. To set parameter<br/>values from within the plug-in, use the AAX_IParameter interface.<br/></p>
<p>Implemented in AAX_CEffectParameters, and AAX_CMonolithicParameters.<br/></p>
<p><b>14.64.2.30 ResetFieldData()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::ResetFieldData (<br/>AAX_CFieldIndex inFieldIndex,<br/>void &#8727; oData,<br/>uint32_t inDataSize ) const [pure virtual]<br/></p>
<p>Called by the host to reset a private data field in the plug-in's algorithm.<br/></p>
<p>This method is called sequentially for all private data fields on Effect initialization and during any &quot;reset&quot; event, such<br/>as priming for a non-real-time render. This method is called before the algorithm's optional initialization callback,<br/>and the initialized private data will be available within that callback via its context block.<br/></p>
<p><b>See also<br/></b>Algorithm initialization.<br/></p>
<p><b>Warning<br/></b>Any data structures that will be passed between platforms (for example, sent to a TI DSP in an AAX DSP<br/>plug-in) must be properly data-aligned for compatibility across both platforms. See AAX_ALIGN_FILE_ALG<br/>for more information about guaranteeing cross-platform compatibility of data structures used for algorithm<br/>processing.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 731<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex The index of the field that is being initialized<br/>out oData The pre-allocated block of data that should be initialized<br/>in inDataSize The size of the data block, in bytes<br/></p>
<p>Implemented in AAX_CEffectParameters, and AAX_CMonolithicParameters.<br/></p>
<p><b>14.64.2.31 GetNumberOfChunks()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetNumberOfChunks (<br/>int32_t &#8727; oNumChunks ) const [pure virtual]<br/></p>
<p>Retrieves the number of chunks used by this plug-in.<br/></p>
<p><b>Parameters<br/></b>out oNumChunks The number of distinct chunks used by this plug-in<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.32 GetChunkIDFromIndex()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetChunkIDFromIndex (<br/>int32_t iIndex,<br/>AAX_CTypeID &#8727; oChunkID ) const [pure virtual]<br/></p>
<p>Retrieves the ID associated with a chunk index.<br/></p>
<p><b>Parameters<br/></b>in iIndex Index of the queried chunk<br/>out oChunkID ID of the queried chunk<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.33 GetChunkSize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetChunkSize (<br/>AAX_CTypeID iChunkID,<br/>uint32_t &#8727; oSize ) const [pure virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>732 Class Documentation<br/></b></p>
<p>Get the size of the data structure that can hold all of a chunk's information.<br/></p>
<p>If chunkID is one of the plug-in's custom chunks, initialize &#8727;size to the size of the chunk's data in bytes.<br/></p>
<p>This method is invoked every time a chunk is saved, therefore it is possible to have dynamically sized chunks.<br/>However, note that each call to GetChunkSize() will correspond to a following call to GetChunk(). The chunk<br/>provided in GetChunk() must have the same size as the size provided by GetChunkSize().<br/></p>
<p><b>Legacy Porting Notes </b>In AAX, the value provided by GetChunkSize() should NOT include the size of the chunk<br/>header. The value should ONLY reflect the size of the chunk's data.<br/></p>
<p><b>Parameters<br/></b>in iChunkID ID of the queried chunk<br/>out oSize The chunk's size in bytes<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.34 GetChunk()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetChunk (<br/>AAX_CTypeID iChunkID,<br/>AAX_SPlugInChunk &#8727; oChunk ) const [pure virtual]<br/></p>
<p>Fills a block of data with chunk information representing the plug-in's current state.<br/></p>
<p>By calling this method, the host is requesting information about the current state of the plug-in. The following chunk<br/>fields should be explicitly populated in this method. Other fields will be populated by the host.<br/></p>
<p>&#8226; AAX_SPlugInChunk::fData<br/></p>
<p>&#8226; AAX_SPlugInChunk::fVersion<br/></p>
<p>&#8226; AAX_SPlugInChunk::fName (Optional)<br/></p>
<p>&#8226; AAX_SPlugInChunk::fSize (Data size only)<br/></p>
<p><b>Warning<br/></b>Remember that this chunk data may be loaded on a different platform from the one where it is saved. All<br/>data structures in the chunk must be properly data-aligned for compatibility across all platforms that the plug-<br/>in supports. See AAX_ALIGN_FILE_ALG for notes about common cross-platform pitfalls for data structure<br/>alignment.<br/></p>
<p><b>Parameters<br/></b>in iChunkID ID of the chunk that should be provided<br/>out oChunk A preallocated block of memory that should be populated with the chunk's data.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.64 AAX_IACFEffectParameters Class Reference 733<br/></b></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.35 SetChunk()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::SetChunk (<br/>AAX_CTypeID iChunkID,<br/>const AAX_SPlugInChunk &#8727; iChunk ) [pure virtual]<br/></p>
<p>Restores a set of plug-in parameters based on chunk information.<br/></p>
<p>By calling this method, the host is attempting to update the plug-in's current state to match the data stored in a<br/>chunk. The plug-in should initialize itself to this new state by calling SetParameterNormalizedValue() for each of the<br/>relevant parameters.<br/></p>
<p><b>Parameters<br/></b>in iChunkID ID of the chunk that is being set<br/>in iChunk The chunk<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.36 CompareActiveChunk()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::CompareActiveChunk (<br/>const AAX_SPlugInChunk &#8727; iChunkP,<br/>AAX_CBoolean &#8727; oIsEqual ) const [pure virtual]<br/></p>
<p>Determine if a chunk represents settings that are equivalent to the plug-in's current state.<br/></p>
<p><b>Host Compatibility Notes </b>In Pro Tools, this method will only be called if a prior call to GetNumberOfChanges()<br/>has indicated that the plug-in's state has changed. If the plug-in's current settings<br/>are different from the settings in aChunkP then the plug-in's Compare Light will be<br/>illuminated in the plug-in header, allowing users to toggle between the plug-in's custom<br/>state and its saved state.<br/></p>
<p><b>Parameters<br/></b>in iChunkP The chunk that is to be tested<br/>out oIsEqual True if the chunk represents equivalent settings when compared with the plug-in's current<br/></p>
<p>state. False if the chunk represents non-equivalent settings<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>734 Class Documentation<br/></b></p>
<p><b>14.64.2.37 TimerWakeup()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::TimerWakeup ( ) [pure virtual]<br/></p>
<p>Periodic wakeup callback for idle-time operations.<br/></p>
<p>This method is called from the host using a non-main thread. In general, it should be driven at approximately one<br/>call per 30 ms. However, the wakeup is not guaranteed to be called at any regular interval - for example, it could<br/>be held off by a high real-time processing load - and there is no host contract regarding maximum latency between<br/>wakeup calls.<br/></p>
<p>This wakeup thread runs continuously and cannot be armed/disarmed or by the plug-in.<br/></p>
<p>Implemented in AAX_CEffectParameters, and AAX_CMonolithicParameters.<br/></p>
<p><b>14.64.2.38 GetCustomData()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::GetCustomData (<br/>AAX_CTypeID iDataBlockID,<br/>uint32_t inDataSize,<br/>void &#8727; oData,<br/>uint32_t &#8727; oDataWritten ) const [pure virtual]<br/></p>
<p>An optional interface hook for getting custom data from another module.<br/></p>
<p><b>Parameters<br/></b>in iDataBlockID Identifier for the requested block of custom data<br/>in inDataSize Size of provided buffer, in bytes<br/>out oData Pointer to an allocated buffer. Data will be written here.<br/>out oDataWritten The number of bytes actually written<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.39 SetCustomData()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::SetCustomData (<br/>AAX_CTypeID iDataBlockID,<br/>uint32_t inDataSize,<br/>const void &#8727; iData ) [pure virtual]<br/></p>
<p>An optional interface hook for setting custom data for use by another module.<br/></p>
<p><b>Parameters<br/></b>in iDataBlockID Identifier for the provided block of custom data<br/>in inDataSize Size of provided buffer, in bytes<br/>in iData Pointer to the data buffer<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.65 AAX_IACFEffectParameters_V2 Class Reference 735<br/></b></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.64.2.40 DoMIDITransfers()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters::DoMIDITransfers ( ) [pure virtual]<br/></p>
<p>MIDI update callback.<br/></p>
<p>Call AAX_IController::GetNextMIDIPacket() from within this method to retrieve and process MIDI packets directly<br/>within the Effect's data model. MIDI data will also be delivered to the Effect algorithm.<br/></p>
<p>This method is called regularly by the host, similarly to AAX_IEffectParameters::TimerWakeup()<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFEffectParameters.h<br/></p>
<p><b>14.65 AAX_IACFEffectParameters_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFEffectParameters.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFEffectParameters_V2:<br/></p>
<p>Collaboration diagram for AAX_IACFEffectParameters_V2:<br/></p>
<p><b>14.65.1 Description<br/></b></p>
<p>Supplemental interface for an AAX Plug-in's data model.<br/></p>
<p>This is a supplemental interface for an instance of a plug-in's data model. This interface gets exposed to the<br/>host application. Host applications that support AAX versioned features may call into these methods. See<br/>Data model interface.<br/></p>
<p><b>Note<br/></b>Your implementation of this interface must inherit from AAX_IEffectParameters.<br/></p>
<p><b>Todo </b>Add documentation for expected error state return values<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>736 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>Hybrid audio methods<br/></b></p>
<p>&#8226; virtual AAX_Result RenderAudio_Hybrid (AAX_SHybridRenderInfo &#8727;ioRenderInfo)=0<br/>Hybrid audio render function.<br/></p>
<p><b>MIDI methods<br/></b></p>
<p>&#8226; virtual AAX_Result UpdateMIDINodes (AAX_CFieldIndex inFieldIndex, AAX_CMidiPacket &amp;iPacket)=0<br/>MIDI update callback.<br/></p>
<p>&#8226; virtual AAX_Result UpdateControlMIDINodes (AAX_CTypeID nodeID, AAX_CMidiPacket &amp;iPacket)=0<br/>MIDI update callback for control MIDI nodes.<br/></p>
<p><b>14.65.2 Member Function Documentation<br/></b></p>
<p><b>14.65.2.1 UpdateMIDINodes()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters_V2::UpdateMIDINodes (<br/>AAX_CFieldIndex inFieldIndex,<br/>AAX_CMidiPacket &amp; iPacket ) [pure virtual]<br/></p>
<p>MIDI update callback.<br/></p>
<p>This method is called by the host for each pending MIDI packet for MIDI nodes in algorithm context structure.<br/>Overwrite this method in Plug-In's EffectParameter class if you want to receive MIDI data packets directly in the<br/>data model. MIDI data will also be delivered to the Effect algorithm.<br/></p>
<p>The host calls this method in Effects that register one or more MIDI nodes using AAX_IComponentDescriptor::AddMIDINode().<br/>Effects that do not require MIDI data to be sent to the plug-in algorithm should override UpdateControlMIDINodes().<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex MIDI node field index in algorithm context structure<br/>in iPacket The incoming MIDI packet for the node<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p><b>14.65.2.2 UpdateControlMIDINodes()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters_V2::UpdateControlMIDINodes (<br/>AAX_CTypeID nodeID,<br/>AAX_CMidiPacket &amp; iPacket ) [pure virtual]<br/></p>
<p>MIDI update callback for control MIDI nodes.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.66 AAX_IACFEffectParameters_V3 Class Reference 737<br/></b></p>
<p>This method is called by the host for each pending MIDI packet for Control MIDI nodes. Overwrite this method in<br/>Plug-In's EffectParameter class if you want to receive MIDI data packets directly in the data model.<br/></p>
<p>The host calls this method in Effects that register one or more Control MIDI nodes using AAX_IEffectDescriptor::AddControlMIDINode().<br/>Effects with algorithms that use MIDI data nodes should override UpdateMIDINodes().<br/></p>
<p><b>Note<br/></b>This method will not be called if an Effect includes any MIDI nodes in its algorithm context structure.<br/></p>
<p><b>Parameters<br/></b>in nodeID Identifier for the MIDI node<br/>in iPacket The incoming MIDI packet for the node<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFEffectParameters.h<br/></p>
<p><b>14.66 AAX_IACFEffectParameters_V3 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFEffectParameters.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFEffectParameters_V3:<br/></p>
<p>Collaboration diagram for AAX_IACFEffectParameters_V3:<br/></p>
<p><b>14.66.1 Description<br/></b></p>
<p>Supplemental interface for an AAX Plug-in's data model.<br/></p>
<p>This is a supplemental interface for an instance of a plug-in's data model. This interface gets exposed to the<br/>host application. Host applications that support AAX versioned features may call into these methods. See<br/>Data model interface.<br/></p>
<p><b>Note<br/></b>Your implementation of this interface must inherit from AAX_IEffectParameters.<br/></p>
<p><b>Todo </b>Add documentation for expected error state return values<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>738 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>Auxiliary UI methods<br/></b></p>
<p>&#8226; virtual AAX_Result GetCurveDataMeterIds (AAX_CTypeID iCurveType, uint32_t &#8727;oXMeterId, uint32_&#8592;&#8617;<br/>t &#8727;oYMeterId) const =0<br/></p>
<p>Indicates which meters correspond to the X and Y axes of the EQ or Dynamics graph.<br/>&#8226; virtual AAX_Result GetCurveDataDisplayRange (AAX_CTypeID iCurveType, float &#8727;oXMin, float &#8727;oXMax,<br/></p>
<p>float &#8727;oYMin, float &#8727;oYMax) const =0<br/>Determines the range of the graph shown by the plug-in.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFEffectParameters.h<br/></p>
<p><b>14.67 AAX_IACFEffectParameters_V4 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFEffectParameters.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFEffectParameters_V4:<br/></p>
<p>Collaboration diagram for AAX_IACFEffectParameters_V4:<br/></p>
<p><b>14.67.1 Description<br/></b></p>
<p>Supplemental interface for an AAX Plug-in's data model.<br/></p>
<p>This is a supplemental interface for an instance of a plug-in's data model. This interface gets exposed to the<br/>host application. Host applications that support AAX versioned features may call into these methods. See<br/>Data model interface.<br/></p>
<p><b>Note<br/></b>Your implementation of this interface must inherit from AAX_IEffectParameters.<br/></p>
<p><b>Todo </b>Add documentation for expected error state return values<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>Auxiliary UI methods<br/></b></p>
<p>&#8226; virtual AAX_Result UpdatePageTable (uint32_t inTableType, int32_t inTablePageSize, IACFUnknown &#8727;i&#8592;&#8617;<br/>HostUnknown, IACFUnknown &#8727;ioPageTableUnknown) const =0<br/></p>
<p>Allow the plug-in to update its page tables.<br/></p>
<p><b>14.67.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.68 AAX_IACFFeatureInfo Class Reference 739<br/></b></p>
<p><b>14.67.2.1 UpdatePageTable()<br/></b></p>
<p>virtual AAX_Result AAX_IACFEffectParameters_V4::UpdatePageTable (<br/>uint32_t inTableType,<br/>int32_t inTablePageSize,<br/>IACFUnknown &#8727; iHostUnknown,<br/>IACFUnknown &#8727; ioPageTableUnknown ) const [pure virtual]<br/></p>
<p>Allow the plug-in to update its page tables.<br/></p>
<p>Called by the plug-in host, usually in response to a AAX_eNotificationEvent_ParameterMappingChanged notifica-<br/>tion sent from the plug-in.<br/></p>
<p>Use this method to change the page table mapping for the plug-in instance or to apply other changes to auxiliary<br/>UIs which use the plug-in page tables, such as setting focus to a new page.<br/></p>
<p>See Page Table Guide for more information about page tables.<br/></p>
<p><b>Parameters<br/></b>in inTableType Four-char type identifier for the table type (e.g. 'PgTL', 'Av81', etc.)<br/>in inTablePageSize Page size for the table<br/>in iHostUnknown Unknown interface from the host which may support interfaces providing<br/></p>
<p>additional features or information.<br/>All interfaces queried from this unknown will be valid only within the<br/>scope of this UpdatePageTable() execution and will be relevant for only<br/>the current plug-in instance.<br/></p>
<p>in,out ioPageTableUnknown Unknown interface which supports AAX_IPageTable. This object<br/>represents the page table data which is currently stored by the host for<br/>this plug-in instance for the given table type and page size. This data<br/>and may be edited within the scope of UpdatePageTable() to change the<br/>page table mapping for this plug-in instance.<br/></p>
<p><b>Returns<br/></b>This method should return AAX_ERROR_UNIMPLEMENTED if the plug-in does not implement it or when no<br/>change is requested by the plug-in. This allows optimizations to be used in the host when no UI update is<br/>required following this call.<br/></p>
<p><b>See also<br/></b>AAX_eNotificationEvent_ParameterMappingChanged<br/></p>
<p>Implemented in AAX_CEffectParameters.<br/>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFEffectParameters.h<br/></p>
<p><b>14.68 AAX_IACFFeatureInfo Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFFeatureInfo.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFFeatureInfo:<br/>Collaboration diagram for AAX_IACFFeatureInfo:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>740 Class Documentation<br/></b></p>
<p><b>14.68.1 Description<br/></b></p>
<p>Information about host support for a particular feature<br/></p>
<p>Acquired using AAX_IACFDescriptionHost::AcquireFeatureProperties()<br/></p>
<p>This interface is shared between multiple features. The specific feature which this object represents is the feature<br/>whose ID was used in the call to acquire this interface.<br/></p>
<p>See the feature UID documentation for which properties support additional property map data<br/></p>
<p>IID: IID_IAAXFeatureInfoV1<br/></p>
<p><b>Note<br/></b>Do not QueryInterface() for IID_IAAXFeatureInfoV1 since this does not indicate which specific feature<br/>is being requested. Instead, use AAX_IDescriptionHost::AcquireFeatureProperties()<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result SupportLevel (AAX_ESupportLevel &#8727;oSupportLevel) const =0<br/>&#8226; virtual AAX_Result AcquireProperties (IACFUnknown &#8727;&#8727;outProperties)=0<br/></p>
<p><b>14.68.2 Member Function Documentation<br/></b></p>
<p><b>14.68.2.1 SupportLevel()<br/></b></p>
<p>virtual AAX_Result AAX_IACFFeatureInfo::SupportLevel (<br/>AAX_ESupportLevel &#8727; oSupportLevel ) const [pure virtual]<br/></p>
<p>Determine the level of support for this feature by the host<br/></p>
<p><b>Note<br/></b>The host will not provide an underlying AAX_IACFFeatureInfo interface for features which it does not recognize<br/>at all, resulting in a AAX_ERROR_NULL_OBJECT error code<br/></p>
<p><b>See also<br/></b>AAX_IFeatureInfo::SupportLevel()<br/></p>
<p>Determine the level of support for this feature by the host<br/></p>
<p><b>Note<br/></b>The host will not provide an underlying AAX_IACFFeatureInfo interface for features which it does not recognize<br/>at all, resulting in a AAX_ERROR_NULL_OBJECT error code<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.69 AAX_IACFHostProcessor Class Reference 741<br/></b></p>
<p><b>14.68.2.2 AcquireProperties()<br/></b></p>
<p>virtual AAX_Result AAX_IACFFeatureInfo::AcquireProperties (<br/>IACFUnknown &#8727;&#8727; outProperties ) [pure virtual]<br/></p>
<p>outProperties must support AAX_IACFPropertyMap const methods<br/><b>See also<br/></b></p>
<p>AAX_IFeatureInfo::AcquireProperties()<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFFeatureInfo.h<br/></p>
<p><b>14.69 AAX_IACFHostProcessor Class Reference<br/></b>#include &lt;AAX_IACFHostProcessor.h&gt;<br/>Inheritance diagram for AAX_IACFHostProcessor:<br/>Collaboration diagram for AAX_IACFHostProcessor:<br/></p>
<p><b>14.69.1 Description<br/></b>Versioned interface for an AAX host processing component.<br/><b>Note<br/></b></p>
<p>This interface gets exposed to the host application. See AAX_CHostProcessor for method documentation.<br/></p>
<p><b>Legacy Porting Notes </b>This interface provides offline processing features analogous to the legacy AudioSuite plug-<br/>in architecture<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result Initialize (IACFUnknown &#8727;iController)=0<br/></p>
<p>Host Processor initialization.<br/>&#8226; virtual AAX_Result Uninitialize ()=0<br/></p>
<p>Host Processor teardown.<br/>&#8226; virtual AAX_Result InitOutputBounds (int64_t iSrcStart, int64_t iSrcEnd, int64_t &#8727;oDstStart, int64_t &#8727;oDst&#8592;&#8617;<br/></p>
<p>End)=0<br/>Sets the processing region.<br/></p>
<p>&#8226; virtual AAX_Result SetLocation (int64_t iSample)=0<br/>Updates the relative sample location of the current processing frame.<br/></p>
<p>&#8226; virtual AAX_Result RenderAudio (const float &#8727;const inAudioIns[ ], int32_t inAudioInCount, float &#8727;const i&#8592;&#8617;<br/>AudioOuts[ ], int32_t iAudioOutCount, int32_t &#8727;ioWindowSize)=0<br/></p>
<p>Perform the signal processing.<br/>&#8226; virtual AAX_Result PreRender (int32_t inAudioInCount, int32_t iAudioOutCount, int32_t iWindowSize)=0<br/></p>
<p>Invoked right before the start of a Preview or Render pass.<br/>&#8226; virtual AAX_Result PostRender ()=0<br/></p>
<p>Invoked at the end of a Render pass.<br/>&#8226; virtual AAX_Result AnalyzeAudio (const float &#8727;const inAudioIns[ ], int32_t inAudioInCount, int32_t &#8727;io&#8592;&#8617;<br/></p>
<p>WindowSize)=0<br/>Override this method if the plug-in needs to analyze the audio prior to a Render pass.<br/></p>
<p>&#8226; virtual AAX_Result PreAnalyze (int32_t inAudioInCount, int32_t iWindowSize)=0<br/>Invoked right before the start of an Analysis pass.<br/></p>
<p>&#8226; virtual AAX_Result PostAnalyze ()=0<br/>Invoked at the end of an Analysis pass.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>742 Class Documentation<br/></b></p>
<p><b>14.69.2 Member Function Documentation<br/></b></p>
<p><b>14.69.2.1 Initialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor::Initialize (<br/>IACFUnknown &#8727; iController ) [pure virtual]<br/></p>
<p>Host Processor initialization.<br/></p>
<p><b>Parameters<br/></b>in iController A versioned reference that can be resolved to both an AAX_IController interface and an<br/></p>
<p>AAX_IHostProcessorDelegate<br/></p>
<p>Implemented in AAX_CHostProcessor.<br/></p>
<p><b>14.69.2.2 Uninitialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor::Uninitialize ( ) [pure virtual]<br/></p>
<p>Host Processor teardown.<br/>Implemented in AAX_CHostProcessor.<br/></p>
<p><b>14.69.2.3 InitOutputBounds()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor::InitOutputBounds (<br/>int64_t iSrcStart,<br/>int64_t iSrcEnd,<br/>int64_t &#8727; oDstStart,<br/>int64_t &#8727; oDstEnd ) [pure virtual]<br/></p>
<p>Sets the processing region.<br/>This method allows offline processing plug-ins to vary the length and/or start/end points of the audio processing<br/>region.<br/>This method is called in a few different scenarios:<br/></p>
<p>&#8226; Before an analyze, process or preview of data begins.<br/>&#8226; At the end of every preview loop.<br/>&#8226; After the user makes a new data selection on the timeline.<br/></p>
<p>Plug-ins that inherit from AAX_CHostProcessor should not override this method. Instead, use the following conve-<br/>nience functions:<br/></p>
<p>&#8226; To retrieve the length or boundaries of the processing region, use GetInputRange(), GetSrcStart(), etc.<br/>&#8226; To change the boundaries of the processing region before processing begins, use AAX_CHostProcessor::TranslateOutputBounds()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.69 AAX_IACFHostProcessor Class Reference 743<br/></b></p>
<p><b>Note<br/></b>Currently, a host processor may not randomly access samples outside of the boundary defined by oDst&#8592;&#8617;<br/>Start and oDstEnd<br/></p>
<p><b>Legacy Porting Notes </b>DAE no longer makes use of the mStartBound and mEndBounds member variables that ex-<br/>isted in the legacy RTAS/TDM SDK. Use oDstStart and oDstEnd instead (preferably<br/>by overriding TranslateOutputBounds().)<br/></p>
<p><b>Parameters<br/></b>in iSrcStart The selection start of the user selected region. This is will always return 0 for a given<br/></p>
<p>selection on the timeline.<br/>in iSrcEnd The selection end of the user selected region. This will always return the value of the<br/></p>
<p>selection length on the timeline.<br/>in oDstStart The starting sample location in the output audio region. By default, this is the same as<br/></p>
<p>iSrcStart.<br/>in oDstEnd The ending sample location in the output audio region. By default, this is the same as<br/></p>
<p>iSrcEnd.<br/></p>
<p>Implemented in AAX_CHostProcessor.<br/></p>
<p><b>14.69.2.4 SetLocation()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor::SetLocation (<br/>int64_t iSample ) [pure virtual]<br/></p>
<p>Updates the relative sample location of the current processing frame.<br/></p>
<p>This method is called by the host to update the relative sample location of the current processing frame.<br/></p>
<p><b>Note<br/></b>Plug-ins should not override this method; instead, use AAX_CHostProcessor::GetLocation() to retrieve the<br/>current relative sample location.<br/></p>
<p><b>Parameters<br/></b>in iSample The sample location of the first sample in the current processing frame relative to the<br/></p>
<p>beginning of the full processing buffer<br/></p>
<p>Implemented in AAX_CHostProcessor.<br/></p>
<p><b>14.69.2.5 RenderAudio()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor::RenderAudio (<br/>const float &#8727;const inAudioIns[],<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>744 Class Documentation<br/></b></p>
<p>int32_t inAudioInCount,<br/>float &#8727;const iAudioOuts[],<br/>int32_t iAudioOutCount,<br/>int32_t &#8727; ioWindowSize ) [pure virtual]<br/></p>
<p>Perform the signal processing.<br/></p>
<p>This method is called by the host to invoke the plug-in's signal processing.<br/></p>
<p><b>Legacy Porting Notes </b>This method is a replacement for the AudioSuite ProcessAudio method<br/></p>
<p><b>Parameters<br/></b>in inAudioIns Input audio buffer<br/>in inAudioInCount The number if input channels<br/>in iAudioOuts The number of output channels<br/>in iAudioOutCount A user defined destination end of the ingested audio<br/>in ioWindowSize Window buffer length of the received audio<br/></p>
<p>Implemented in AAX_CHostProcessor.<br/></p>
<p><b>14.69.2.6 PreRender()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor::PreRender (<br/>int32_t inAudioInCount,<br/>int32_t iAudioOutCount,<br/>int32_t iWindowSize ) [pure virtual]<br/></p>
<p>Invoked right before the start of a Preview or Render pass.<br/></p>
<p>This method is called by the host to allow a plug-in to make any initializations before processing actually begins.<br/>Upon a Preview pass, PreRender will also be called at the beginning of every &quot;loop&quot;.<br/></p>
<p><b>See also<br/></b>AAX_eProcessingState_StartPass, AAX_eProcessingState_BeginPassGroup<br/></p>
<p><b>Parameters<br/></b>in inAudioInCount The number if input channels<br/>in iAudioOutCount The number of output channels<br/>in iWindowSize Window buffer length of the ingested audio<br/></p>
<p>Implemented in AAX_CHostProcessor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.69 AAX_IACFHostProcessor Class Reference 745<br/></b></p>
<p><b>14.69.2.7 PostRender()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor::PostRender ( ) [pure virtual]<br/></p>
<p>Invoked at the end of a Render pass.<br/></p>
<p><b>Note<br/></b>Upon a Preview pass, PostRender will not be called until Preview has stopped.<br/></p>
<p><b>See also<br/></b>AAX_eProcessingState_StopPass, AAX_eProcessingState_EndPassGroup<br/></p>
<p>Implemented in AAX_CHostProcessor.<br/></p>
<p><b>14.69.2.8 AnalyzeAudio()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor::AnalyzeAudio (<br/>const float &#8727;const inAudioIns[],<br/>int32_t inAudioInCount,<br/>int32_t &#8727; ioWindowSize ) [pure virtual]<br/></p>
<p>Override this method if the plug-in needs to analyze the audio prior to a Render pass.<br/></p>
<p>Use this after declaring the appropriate properties in Describe. See AAX_eProperty_RequiresAnalysis and<br/>AAX_eProperty_OptionalAnalysis<br/></p>
<p>To request an analysis pass from within a plug-in, use AAX_IHostProcessorDelegate::ForceAnalyze()<br/></p>
<p><b>Legacy Porting Notes </b>Ported from AudioSuite's AnalyzeAudio(bool isMasterBypassed) method<br/></p>
<p><b>Parameters<br/></b>in inAudioIns Input audio buffer<br/>in inAudioInCount The number of input channels<br/>in ioWindowSize Window buffer length of the ingested audio<br/></p>
<p>Implemented in AAX_CHostProcessor.<br/></p>
<p><b>14.69.2.9 PreAnalyze()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor::PreAnalyze (<br/>int32_t inAudioInCount,<br/>int32_t iWindowSize ) [pure virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>746 Class Documentation<br/></b></p>
<p>Invoked right before the start of an Analysis pass.<br/></p>
<p>This method is called by the host to allow a plug-in to make any initializations before an Analysis pass actually<br/>begins.<br/></p>
<p><b>See also<br/></b>AAX_eProcessingState_StartPass, AAX_eProcessingState_BeginPassGroup<br/></p>
<p><b>Parameters<br/></b>in inAudioInCount The number if input channels<br/>in iWindowSize Window buffer length of the ingested audio<br/></p>
<p>Implemented in AAX_CHostProcessor.<br/></p>
<p><b>14.69.2.10 PostAnalyze()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor::PostAnalyze ( ) [pure virtual]<br/></p>
<p>Invoked at the end of an Analysis pass.<br/></p>
<p><b>Note<br/></b>In Pro Tools, a long execution time for this method will hold off the main application thread and cause a visible<br/>hang. If the plug-in must perform any long running tasks before initiating processing then it is best to perform<br/>these tasks in AAX_IHostProcessor::PreRender()<br/></p>
<p><b>See also<br/></b>AAX_eProcessingState_StopPass, AAX_eProcessingState_EndPassGroup<br/></p>
<p>Implemented in AAX_CHostProcessor.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFHostProcessor.h<br/></p>
<p><b>14.70 AAX_IACFHostProcessor_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFHostProcessor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFHostProcessor_V2:<br/></p>
<p>Collaboration diagram for AAX_IACFHostProcessor_V2:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.71 AAX_IACFHostProcessorDelegate Class Reference 747<br/></b></p>
<p><b>14.70.1 Description<br/></b></p>
<p>Supplemental interface for an AAX host processing component.<br/></p>
<p><b>Note<br/></b>This interface gets exposed to the host application. See AAX_CHostProcessor for method documentation.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result GetClipNameSuffix (int32_t inMaxLength, AAX_IString &#8727;outString) const =0<br/>Called by host application to retrieve a custom string to be appended to the clip name.<br/></p>
<p><b>14.70.2 Member Function Documentation<br/></b></p>
<p><b>14.70.2.1 GetClipNameSuffix()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessor_V2::GetClipNameSuffix (<br/>int32_t inMaxLength,<br/>AAX_IString &#8727; outString ) const [pure virtual]<br/></p>
<p>Called by host application to retrieve a custom string to be appended to the clip name.<br/></p>
<p>If no string is provided then the host's default will be used.<br/></p>
<p><b>Parameters<br/></b>in inMaxLength The maximum allowed string length, not including the NULL terminating char<br/>out outString Add a value to this string to provide a custom clip suffix<br/></p>
<p>Implemented in AAX_CHostProcessor.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFHostProcessor.h<br/></p>
<p><b>14.71 AAX_IACFHostProcessorDelegate Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFHostProcessorDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFHostProcessorDelegate:<br/></p>
<p>Collaboration diagram for AAX_IACFHostProcessorDelegate:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>748 Class Documentation<br/></b></p>
<p><b>14.71.1 Description<br/></b></p>
<p>Versioned interface for host methods specific to offline processing.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result GetAudio (const float &#8727;const inAudioIns[ ], int32_t inAudioInCount, int64_t inLocation,<br/>int32_t &#8727;ioNumSamples)=0<br/></p>
<p>CALL: Randomly access audio from the timeline.<br/>&#8226; virtual int32_t GetSideChainInputNum ()=0<br/></p>
<p>CALL: Returns the index of the side chain input buffer.<br/></p>
<p><b>14.71.2 Member Function Documentation<br/></b></p>
<p><b>14.71.2.1 GetAudio()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessorDelegate::GetAudio (<br/>const float &#8727;const inAudioIns[],<br/>int32_t inAudioInCount,<br/>int64_t inLocation,<br/>int32_t &#8727; ioNumSamples ) [pure virtual]<br/></p>
<p>CALL: Randomly access audio from the timeline.<br/></p>
<p>Called from within AAX_IHostProcessor::RenderAudio(), this method fills a buffer of samples with randomly-<br/>accessed data from the current input processing region on the timeline, including any extra samples such as<br/>processing &quot;handles&quot;.<br/></p>
<p><b>Note<br/></b>Plug-ins that use this feature must set AAX_eProperty_UsesRandomAccess to true<br/>It is not possible to retrieve samples from outside of the current input processing region<br/>Always check the return value of this method before using the randomly-accessed samples<br/></p>
<p><b>Parameters<br/></b>in inAudioIns Timeline audio buffer(s). This must be set to inAudioIns from<br/></p>
<p>AAX_IHostProcessor::RenderAudio()<br/>in inAudioInCount Number of buffers in inAudioIns. This must be set to inAudioInCount<br/></p>
<p>from AAX_IHostProcessor::RenderAudio()<br/>in inLocation A sample location relative to the beginning of the currently processed region,<br/></p>
<p>e.g. a value of 0 corresponds to the timeline location returned by<br/>AAX_CHostProcessor::GetSrcStart()<br/></p>
<p>in,out ioNumSamples<br/>&#8226; Input: The maximum number of samples to read.<br/></p>
<p>&#8226; Output: The actual number of samples that were read from the timeline<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.72 AAX_IACFHostProcessorDelegate_V2 Class Reference 749<br/></b></p>
<p><b>14.71.2.2 GetSideChainInputNum()<br/></b></p>
<p>virtual int32_t AAX_IACFHostProcessorDelegate::GetSideChainInputNum ( ) [pure virtual]<br/></p>
<p>CALL: Returns the index of the side chain input buffer.<br/></p>
<p>Called from within AAX_IHostProcessor::RenderAudio(), this method returns the index of the side chain input sam-<br/>ple buffer within inAudioIns.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFHostProcessorDelegate.h<br/></p>
<p><b>14.72 AAX_IACFHostProcessorDelegate_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFHostProcessorDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFHostProcessorDelegate_V2:<br/></p>
<p>Collaboration diagram for AAX_IACFHostProcessorDelegate_V2:<br/></p>
<p><b>14.72.1 Description<br/></b></p>
<p>Versioned interface for host methods specific to offline processing.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result ForceAnalyze ()=0<br/></p>
<p>CALL: Request an analysis pass.<br/></p>
<p><b>14.72.2 Member Function Documentation<br/></b></p>
<p><b>14.72.2.1 ForceAnalyze()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessorDelegate_V2::ForceAnalyze ( ) [pure virtual]<br/></p>
<p>CALL: Request an analysis pass.<br/></p>
<p>Call this method to request an analysis pass from within the plug-in. Most plug-ins should rely on the host to trigger<br/>analysis passes when appropriate. However, plug-ins that require an analysis pass a) outside of the context of<br/>host-driven render or analysis, or b) when internal plug-in data changes may need to call ForceAnalyze().<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFHostProcessorDelegate.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>750 Class Documentation<br/></b></p>
<p><b>14.73 AAX_IACFHostProcessorDelegate_V3 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFHostProcessorDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFHostProcessorDelegate_V3:<br/></p>
<p>Collaboration diagram for AAX_IACFHostProcessorDelegate_V3:<br/></p>
<p><b>14.73.1 Description<br/></b></p>
<p>Versioned interface for host methods specific to offline processing.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result ForceProcess ()=0<br/></p>
<p>CALL: Request a process pass.<br/></p>
<p><b>14.73.2 Member Function Documentation<br/></b></p>
<p><b>14.73.2.1 ForceProcess()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostProcessorDelegate_V3::ForceProcess ( ) [pure virtual]<br/></p>
<p>CALL: Request a process pass.<br/></p>
<p>Call this method to request a process pass from within the plug-in. If AAX_eProperty_RequiresAnalysis is de-<br/>fined, the resulting process pass will be preceded by an analysis pass. This method should only be used in rare<br/>circumstances by plug-ins that must launch processing outside of the normal host AudioSuite workflow.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFHostProcessorDelegate.h<br/></p>
<p><b>14.74 AAX_IACFHostServices Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFHostServices.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFHostServices:<br/></p>
<p>Collaboration diagram for AAX_IACFHostServices:<br/></p>
<p><b>14.74.1 Description<br/></b></p>
<p>Versioned interface to diagnostic and debugging services provided by the AAX host.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.74 AAX_IACFHostServices Class Reference 751<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result Assert (const char &#8727;iFile, int32_t iLine, const char &#8727;iNote)=0<br/>&#8226; virtual AAX_Result Trace (int32_t iPriority, const char &#8727;iMessage)=0<br/></p>
<p>Log a trace message.<br/></p>
<p><b>14.74.2 Member Function Documentation<br/></b></p>
<p><b>14.74.2.1 Assert()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostServices::Assert (<br/>const char &#8727; iFile,<br/>int32_t iLine,<br/>const char &#8727; iNote ) [pure virtual]<br/></p>
<p><b>Deprecated </b>Legacy version of AAX_IACFHostServices_V3::HandleAssertFailure() implemented by older hosts<br/></p>
<p>Prior to AAX_IACFHostServices_V3::HandleAssertFailure(), the AAX_ASSERT macro, a wrapper around Assert(),<br/>was only compiled into debug plug-in builds. AAX_ASSERT is now compiled in to all plug-in builds and the original<br/>debug-only form is available through AAX_DEBUGASSERT.<br/></p>
<p>Because the implementation of Assert() in the host is not aware of the plug-in's build configuation, older hosts imple-<br/>mented this method with a warning dialog in all cases. Newer hosts - those which implement HandleAssertFailure()<br/>- will log assertion failures but will not present any user dialog in shipping builds of the host software.<br/></p>
<p>In order to prevent assertion failure dialogs from appearing to users who run new builds of plug-ins containing<br/>AAX_ASSERT calls in older hosts the deprecated Assert() method should only be called from debug plug-in builds.<br/></p>
<p><b>14.74.2.2 Trace()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostServices::Trace (<br/>int32_t iPriority,<br/>const char &#8727; iMessage ) [pure virtual]<br/></p>
<p>Log a trace message.<br/></p>
<p><b>Parameters<br/></b>in iPriority Priority of the trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iMessage Message string to log<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFHostServices.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>752 Class Documentation<br/></b></p>
<p><b>14.75 AAX_IACFHostServices_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFHostServices.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFHostServices_V2:<br/></p>
<p>Collaboration diagram for AAX_IACFHostServices_V2:<br/></p>
<p><b>14.75.1 Description<br/></b></p>
<p>V2 of versioned interface to diagnostic and debugging services provided by the AAX host.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result StackTrace (int32_t iTracePriority, int32_t iStackTracePriority, const char &#8727;iMessage)=0<br/>Log a trace message or a stack trace.<br/></p>
<p><b>14.75.2 Member Function Documentation<br/></b></p>
<p><b>14.75.2.1 StackTrace()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostServices_V2::StackTrace (<br/>int32_t iTracePriority,<br/>int32_t iStackTracePriority,<br/>const char &#8727; iMessage ) [pure virtual]<br/></p>
<p>Log a trace message or a stack trace.<br/></p>
<p>If the logging output filtering is set to include logs with iStackTracePriority then both the logging message<br/>and a stack trace will be emitted, regardless of iTracePriority.<br/></p>
<p>If the logging output filtering is set to include logs with iTracePriority but to exclude logs with iStack&#8592;&#8617;<br/>TracePriority then this will emit a normal log with no stack trace.<br/></p>
<p><b>Parameters<br/></b>in iTracePriority Priority of the trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iStackTracePriority Priority of the stack trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iMessage Message string to log<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFHostServices.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.76 AAX_IACFHostServices_V3 Class Reference 753<br/></b></p>
<p><b>14.76 AAX_IACFHostServices_V3 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFHostServices.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFHostServices_V3:<br/></p>
<p>Collaboration diagram for AAX_IACFHostServices_V3:<br/></p>
<p><b>14.76.1 Description<br/></b></p>
<p>V3 of versioned interface to diagnostic and debugging services provided by the AAX host.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result HandleAssertFailure (const char &#8727;iFile, int32_t iLine, const char &#8727;iNote, int32_t iFlags)<br/>const =0<br/></p>
<p>Handle an assertion failure.<br/></p>
<p><b>14.76.2 Member Function Documentation<br/></b></p>
<p><b>14.76.2.1 HandleAssertFailure()<br/></b></p>
<p>virtual AAX_Result AAX_IACFHostServices_V3::HandleAssertFailure (<br/>const char &#8727; iFile,<br/>int32_t iLine,<br/>const char &#8727; iNote,<br/>int32_t iFlags ) const [pure virtual]<br/></p>
<p>Handle an assertion failure.<br/></p>
<p>Use this method to delegate assertion failure handling to the host<br/></p>
<p>Use inFlags to request that specific behavior be included when handling the failure. This request may not be<br/>fulfilled by the host, and absence of a flag does not preclude the host from using that behavior when handling the<br/>failure.<br/></p>
<p><b>Parameters<br/></b>in iFile The name of the file containing the assert check. Usually<br/></p>
<p>__FILE__<br/>in iLine The line number of the assert check. Usually __LINE__<br/>in iNote Text to display related to the assert. Usually the condition which failed<br/>in iFlags Bitfield of AAX_EAssertFlags to request specific handling behavior<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>754 Class Documentation<br/></b></p>
<p>&#8226; AAX_IACFHostServices.h<br/></p>
<p><b>14.77 AAX_IACFPageTable Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFPageTable.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFPageTable:<br/></p>
<p>Collaboration diagram for AAX_IACFPageTable:<br/></p>
<p><b>14.77.1 Description<br/></b></p>
<p>Versioned interface to the host's representation of a plug-in instance's page table.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result Clear ()=0<br/></p>
<p>Clears all parameter mappings from the table.<br/>&#8226; virtual AAX_Result Empty (AAX_CBoolean &amp;oEmpty) const =0<br/></p>
<p>Indicates whether the table is empty.<br/>&#8226; virtual AAX_Result GetNumPages (int32_t &amp;oNumPages) const =0<br/></p>
<p>Get the number of pages currently in this table.<br/>&#8226; virtual AAX_Result InsertPage (int32_t iPage)=0<br/></p>
<p>Insert a new empty page before the page at index iPage.<br/>&#8226; virtual AAX_Result RemovePage (int32_t iPage)=0<br/></p>
<p>Remove the page at index iPage.<br/>&#8226; virtual AAX_Result GetNumMappedParameterIDs (int32_t iPage, int32_t &amp;oNumParameterIdentifiers) const<br/></p>
<p>=0<br/>Returns the total number of parameter IDs which are mapped to a page.<br/></p>
<p>&#8226; virtual AAX_Result ClearMappedParameter (int32_t iPage, int32_t iIndex)=0<br/>Clear the parameter at a particular index in this table.<br/></p>
<p>&#8226; virtual AAX_Result GetMappedParameterID (int32_t iPage, int32_t iIndex, AAX_IString &amp;oParameter&#8592;&#8617;<br/>Identifier) const =0<br/></p>
<p>Get the parameter identifier which is currently mapped to an index in this table.<br/>&#8226; virtual AAX_Result MapParameterID (AAX_CParamID iParameterIdentifier, int32_t iPage, int32_t iIndex)=0<br/></p>
<p>Map a parameter to this table.<br/></p>
<p><b>14.77.2 Member Function Documentation<br/></b></p>
<p><b>14.77.2.1 Clear()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable::Clear ( ) [pure virtual]<br/></p>
<p>Clears all parameter mappings from the table.<br/></p>
<p>This method does not clear any parameter name variations from the table. For that, use AAX_IPageTable::ClearParameterNameVariations()<br/>or AAX_IPageTable::ClearNameVariationsForParameter()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.77 AAX_IACFPageTable Class Reference 755<br/></b></p>
<p><b>14.77.2.2 Empty()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable::Empty (<br/>AAX_CBoolean &amp; oEmpty ) const [pure virtual]<br/></p>
<p>Indicates whether the table is empty.<br/></p>
<p>A table is empty if it contains no pages. A table which contains pages but no parameter assignments is not empty.<br/>A table which has associated parameter name variations but no pages is empty.<br/></p>
<p><b>Parameters<br/></b>out oEmpty true if this table is empty<br/></p>
<p><b>14.77.2.3 GetNumPages()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable::GetNumPages (<br/>int32_t &amp; oNumPages ) const [pure virtual]<br/></p>
<p>Get the number of pages currently in this table.<br/></p>
<p><b>Parameters<br/></b>out oNumPages The number of pages which are present in the page table. Some pages might not<br/></p>
<p>contain any parameter assignments.<br/></p>
<p><b>14.77.2.4 InsertPage()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable::InsertPage (<br/>int32_t iPage ) [pure virtual]<br/></p>
<p>Insert a new empty page before the page at index iPage.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the total number of pages<br/></p>
<p><b>Parameters<br/></b>in iPage The insertion point page index<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>756 Class Documentation<br/></b></p>
<p><b>14.77.2.5 RemovePage()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable::RemovePage (<br/>int32_t iPage ) [pure virtual]<br/></p>
<p>Remove the page at index iPage.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the index of the last existing page<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/></p>
<p><b>14.77.2.6 GetNumMappedParameterIDs()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable::GetNumMappedParameterIDs (<br/>int32_t iPage,<br/>int32_t &amp; oNumParameterIdentifiers ) const [pure virtual]<br/></p>
<p>Returns the total number of parameter IDs which are mapped to a page.<br/></p>
<p><b>Note<br/></b>The number of mapped parameter IDs does not correspond to the actual slot indices of the parameter assign-<br/>ments. For example, a page could have three total parameter assignments with parameters mapped to slots<br/>2, 4, and 6.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the index of the last existing page<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/>out oNumParameterIdentifiers The number of parameter identifiers which are mapped to the target page<br/></p>
<p><b>14.77.2.7 ClearMappedParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable::ClearMappedParameter (<br/>int32_t iPage,<br/>int32_t iIndex ) [pure virtual]<br/></p>
<p>Clear the parameter at a particular index in this table.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.77 AAX_IACFPageTable Class Reference 757<br/></b></p>
<p><b>Returns<br/></b>AAX_SUCCESS even if no parameter was mapped at the given index (the index is still clear)<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/>in iIndex The target parameter slot index within the target page<br/></p>
<p><b>14.77.2.8 GetMappedParameterID()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable::GetMappedParameterID (<br/>int32_t iPage,<br/>int32_t iIndex,<br/>AAX_IString &amp; oParameterIdentifier ) const [pure virtual]<br/></p>
<p>Get the parameter identifier which is currently mapped to an index in this table.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if no parameter is mapped at the specified page/index location<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/>in iIndex The target parameter slot index within the target page<br/>out oParameterIdentifier The identifier used for the mapped parameter in the page table (may be<br/></p>
<p>parameter name or ID)<br/></p>
<p><b>14.77.2.9 MapParameterID()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable::MapParameterID (<br/>AAX_CParamID iParameterIdentifier,<br/>int32_t iPage,<br/>int32_t iIndex ) [pure virtual]<br/></p>
<p>Map a parameter to this table.<br/></p>
<p>If iParameterIdentifier is an empty string then the parameter assignment will be cleared<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_NULL_ARGUMENT if iParameterIdentifier is null<br/>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the index of the last existing page<br/>AAX_ERROR_INVALID_ARGUMENT if iIndex is negative<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>758 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter which will be mapped<br/>in iPage The target page index<br/>in iIndex The target parameter slot index within the target page<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFPageTable.h<br/></p>
<p><b>14.78 AAX_IACFPageTable_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFPageTable.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFPageTable_V2:<br/></p>
<p>Collaboration diagram for AAX_IACFPageTable_V2:<br/></p>
<p><b>14.78.1 Description<br/></b></p>
<p>Versioned interface to the host's representation of a plug-in instance's page table.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result GetNumParametersWithNameVariations (int32_t &amp;oNumParameterIdentifiers) const =0<br/>&#8226; virtual AAX_Result GetNameVariationParameterIDAtIndex (int32_t iIndex, AAX_IString &amp;oParameter&#8592;&#8617;<br/></p>
<p>Identifier) const =0<br/>&#8226; virtual AAX_Result GetNumNameVariationsForParameter (AAX_CPageTableParamID iParameterIdentifier,<br/></p>
<p>int32_t &amp;oNumVariations) const =0<br/>&#8226; virtual AAX_Result GetParameterNameVariationAtIndex (AAX_CPageTableParamID iParameterIdentifier,<br/></p>
<p>int32_t iIndex, AAX_IString &amp;oNameVariation, int32_t &amp;oLength) const =0<br/>&#8226; virtual AAX_Result GetParameterNameVariationOfLength (AAX_CPageTableParamID iParameterIdentifier,<br/></p>
<p>int32_t iLength, AAX_IString &amp;oNameVariation) const =0<br/>&#8226; virtual AAX_Result ClearParameterNameVariations ()=0<br/>&#8226; virtual AAX_Result ClearNameVariationsForParameter (AAX_CPageTableParamID iParameterIdentifier)=0<br/>&#8226; virtual AAX_Result SetParameterNameVariation (AAX_CPageTableParamID iParameterIdentifier, const<br/></p>
<p>AAX_IString &amp;iNameVariation, int32_t iLength)=0<br/></p>
<p><b>14.78.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.78 AAX_IACFPageTable_V2 Class Reference 759<br/></b></p>
<p><b>14.78.2.1 GetNumParametersWithNameVariations()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable_V2::GetNumParametersWithNameVariations (<br/>int32_t &amp; oNumParameterIdentifiers ) const [pure virtual]<br/></p>
<p>Get the number of parameters with name variations defined for the current table type<br/></p>
<p>Provides the number of parameters with lt;ControlNameVariationslt; which are explicitly defined for<br/>the current page table type.<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetNameVariationParameterIDAtIndex()<br/></p>
<p><b>Parameters<br/></b>out oNumParameterIdentifiers The number of parameters with name variations explicitly<br/></p>
<p>associated with the current table type.<br/></p>
<p><b>14.78.2.2 GetNameVariationParameterIDAtIndex()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable_V2::GetNameVariationParameterIDAtIndex (<br/>int32_t iIndex,<br/>AAX_IString &amp; oParameterIdentifier ) const [pure virtual]<br/></p>
<p>Get the identifier for a parameter with name variations defined for the current table type<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetNumParametersWithNameVariations()<br/></p>
<p><b>Parameters<br/></b>in iIndex The target parameter index within the list of parameters with explicit<br/></p>
<p>name variations defined for this table type.<br/>out oParameterIdentifier The identifier used for the parameter in the page table name variations<br/></p>
<p>list (may be parameter name or ID)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>760 Class Documentation<br/></b></p>
<p><b>14.78.2.3 GetNumNameVariationsForParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable_V2::GetNumNameVariationsForParameter (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>int32_t &amp; oNumVariations ) const [pure virtual]<br/></p>
<p>Get the number of name variations defined for a parameter<br/></p>
<p>Provides the number of lt;ControlNameVariationslt; which are explicitly defined for iParameter&#8592;&#8617;<br/>Identifier for the current page table type. No fallback logic is used to resolve this to the list of variations which<br/>would actually be used for an attached control surface if no explicit variations are defined for the current table type.<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetParameterNameVariationAtIndex()<br/><b>Returns<br/></b></p>
<p>AAX_SUCCESS and provides zero to oNumVariations if iParameterIdentifier is not<br/>found<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>out oNumVariations The number of name variations which are defined for this parameter and<br/></p>
<p>explicitly associated with the current table type.<br/></p>
<p><b>14.78.2.4 GetParameterNameVariationAtIndex()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable_V2::GetParameterNameVariationAtIndex (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>int32_t iIndex,<br/>AAX_IString &amp; oNameVariation,<br/>int32_t &amp; oLength ) const [pure virtual]<br/></p>
<p>Get a parameter name variation from the page table<br/></p>
<p>Only returns lt;ControlNameVariationslt; which are explicitly defined for the current page table type.<br/>No fallback logic is used to resolve this to the abbreviation which would actually be shown on an attached control<br/>surface if no explicit variation is defined for the current table type.<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.78 AAX_IACFPageTable_V2 Class Reference 761<br/></b></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetNumNameVariationsForParameter()<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetParameterNameVariationOfLength()<br/><b>Returns<br/></b></p>
<p>AAX_ERROR_NO_ABBREVIATED_PARAMETER_NAME if no suitable variation is defined for this table<br/>AAX_ERROR_ARGUMENT_OUT_OF_RANGE if iIndex is out of range<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>in iIndex Index of the name variation<br/>out oNameVariation The name variation, if one is explicitly defined for this table type<br/>out oLength The length value for this name variation. This corresponds to the<br/></p>
<p>variation's sz attribute in the page table XML and may be different from<br/>the string length of iNameVariation.<br/></p>
<p><b>14.78.2.5 GetParameterNameVariationOfLength()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable_V2::GetParameterNameVariationOfLength (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>int32_t iLength,<br/>AAX_IString &amp; oNameVariation ) const [pure virtual]<br/></p>
<p>Get a parameter name variation of a particular length from the page table<br/></p>
<p>Only returns lt;ControlNameVariationslt; which are explicitly defined of iLength for the current page<br/>table type. No fallback logic is used to resolve this to the abbreviation which would actually be shown on an attached<br/>control surface if no explicit variation is defined for the specified length or current table type.<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetParameterNameVariationAtIndex()<br/><b>Returns<br/></b></p>
<p>AAX_ERROR_NO_ABBREVIATED_PARAMETER_NAME if no suitable variation is defined for this table<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>in iLength The variation length to check, i.e. the sz attribute for the name variation<br/></p>
<p>in the page table XML<br/>out oNameVariation The name variation, if one is explicitly defined for this table type and<br/></p>
<p>iLength<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>762 Class Documentation<br/></b></p>
<p><b>14.78.2.6 ClearParameterNameVariations()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable_V2::ClearParameterNameVariations ( ) [pure virtual]<br/></p>
<p>Clears all name variations for the current page table type<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p><b>See also<br/></b>AAX_IPageTable::Clear()<br/>AAX_IPageTable::ClearNameVariationsForParameter()<br/></p>
<p><b>14.78.2.7 ClearNameVariationsForParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable_V2::ClearNameVariationsForParameter (<br/>AAX_CPageTableParamID iParameterIdentifier ) [pure virtual]<br/></p>
<p>Clears all name variations for a single parameter for the current page table type<br/></p>
<p><b>Warning<br/></b>This will invalidate the list of parameter name variations indices, i.e. the parameter identifier associated with<br/>each index by AAX_IPageTable::GetNameVariationParameterIDAtIndex()<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p><b>See also<br/></b>AAX_IPageTable::Clear()<br/>AAX_IPageTable::ClearParameterNameVariations()<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS and provides zero to oNumVariations if iParameterIdentifier is not found<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.79 AAX_IACFPageTableController Class Reference 763<br/></b></p>
<p><b>14.78.2.8 SetParameterNameVariation()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTable_V2::SetParameterNameVariation (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>const AAX_IString &amp; iNameVariation,<br/>int32_t iLength ) [pure virtual]<br/></p>
<p>Sets a name variation explicitly for the current page table type<br/></p>
<p>This will add a new name variation or overwrite the existing name variation with the same length which is defined<br/>for the current table type.<br/></p>
<p><b>Warning<br/></b>If no name variation previously existed for this parameter then this will invalidate the list of parameter name<br/>variations indices, i.e. the parameter identifier associated with each index by AAX_IPageTable::GetNameVariationParameterIDAtIndex()<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iNameVariation is empty or if iLength is less than zero<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>in iNameVariation The new parameter name variation<br/>in iLength The length value for this name variation. This corresponds to the variation's sz<br/></p>
<p>attribute in the page table XML and is not required to match the length of<br/>iNameVariation.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFPageTable.h<br/></p>
<p><b>14.79 AAX_IACFPageTableController Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFPageTableController.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFPageTableController:<br/></p>
<p>Collaboration diagram for AAX_IACFPageTableController:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>764 Class Documentation<br/></b></p>
<p><b>14.79.1 Description<br/></b></p>
<p>Interface for host operations related to the page tables for this plug-in.<br/></p>
<p><b>Note<br/></b>In the AAX Library, access to this interface is provided through AAX_IController<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result CopyTableForEffect (AAX_CPropertyValue inManufacturerID, AAX_CPropertyValue in&#8592;&#8617;<br/>ProductID, AAX_CPropertyValue inPlugInID, uint32_t inTableType, int32_t inTablePageSize, IACFUnknown<br/>&#8727;oPageTable) const =0<br/></p>
<p>&#8226; virtual AAX_Result CopyTableOfLayoutForEffect (const char &#8727;inEffectID, const char &#8727;inLayoutName, uint32&#8592;&#8617;<br/>_t inTableType, int32_t inTablePageSize, IACFUnknown &#8727;oPageTable) const =0<br/></p>
<p><b>14.79.2 Member Function Documentation<br/></b></p>
<p><b>14.79.2.1 CopyTableForEffect()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTableController::CopyTableForEffect (<br/>AAX_CPropertyValue inManufacturerID,<br/>AAX_CPropertyValue inProductID,<br/>AAX_CPropertyValue inPlugInID,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize,<br/>IACFUnknown &#8727; oPageTable ) const [pure virtual]<br/></p>
<p>Copy the current page table data for a particular plug-in type.<br/></p>
<p>The host will reject the copy and return an error if the requested plug-in type is unkown, if inTableType is<br/>unknown or if inTablePageSize is not a supported size for the given table type.<br/></p>
<p>The host may also restrict plug-ins to only copying page table data from certain plug-in types, such as plug-ins from<br/>the same manufacturer or plug-in types within the same effect.<br/></p>
<p>See Page Table Guide for more information about page tables.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_NULL_ARGUMENT if oPageTable is null<br/>AAX_ERROR_INVALID_ARGUMENT if no valid page table mapping can be created due to the specified<br/>arguments<br/></p>
<p><b>Parameters<br/></b>in inManufacturerID Manufacturer ID of the desired plug-in type<br/>in inProductID Product ID of the desired plug-in type<br/>in inPlugInID Type ID of the desired plug-in type (AAX_eProperty_PlugInID_Native,<br/></p>
<p>AAX_eProperty_PlugInID_TI)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81',<br/></p>
<p>etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/>out oPageTable The page table object to which the page table data should be copied.<br/></p>
<p>oPageTable must support AAX_IACFPageTable<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.79 AAX_IACFPageTableController Class Reference 765<br/></b></p>
<p><b>See also<br/></b>AAX_IController::CreateTableCopyForEffect()<br/></p>
<p><b>14.79.2.2 CopyTableOfLayoutForEffect()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTableController::CopyTableOfLayoutForEffect (<br/>const char &#8727; inEffectID,<br/>const char &#8727; inLayoutName,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize,<br/>IACFUnknown &#8727; oPageTable ) const [pure virtual]<br/></p>
<p>Copy the current page table data for a particular plug-in effect and page table layout.<br/></p>
<p>The host will reject the copy and return an error if the requested effect ID is unkown or if inLayoutName is not a<br/>valid layout name for the page tables registered for the effect.<br/></p>
<p>The host may also restrict plug-ins to only copying page table data from certain effects, such as effects registered<br/>within the current AAX plug-in bundle.<br/></p>
<p>See Page Table Guide for more information about page tables.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_NULL_ARGUMENT if inEffectID, inLayoutName, or oPageTable is null<br/>AAX_ERROR_INVALID_ARGUMENT if no valid page table mapping can be created due to the specified<br/>arguments<br/></p>
<p><b>Parameters<br/></b>in inEffectID Effect ID for the desired effect. See AAX_ICollection::AddEffect()<br/>in inLayoutName Page table layout name (&quot;name&quot; attribute of the PTLayout XML tag)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81', etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/>out oPageTable The page table object to which the page table data should be copied.<br/></p>
<p>oPageTable must support AAX_IACFPageTable<br/></p>
<p><b>See also<br/></b>AAX_IController::CreateTableCopyForLayout()<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFPageTableController.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>766 Class Documentation<br/></b></p>
<p><b>14.80 AAX_IACFPageTableController_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFPageTableController.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFPageTableController_V2:<br/></p>
<p>Collaboration diagram for AAX_IACFPageTableController_V2:<br/></p>
<p><b>14.80.1 Description<br/></b></p>
<p>Interface for host operations related to the page tables for this plug-in.<br/></p>
<p><b>Note<br/></b>In the AAX Library, access to this interface is provided through AAX_IController<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result CopyTableForEffectFromFile (const char &#8727;inPageTableFilePath, AAX_ETextEncoding in&#8592;&#8617;<br/>FilePathEncoding, AAX_CPropertyValue inManufacturerID, AAX_CPropertyValue inProductID, AAX_CPropertyValue<br/>inPlugInID, uint32_t inTableType, int32_t inTablePageSize, IACFUnknown &#8727;oPageTable) const =0<br/></p>
<p>&#8226; virtual AAX_Result CopyTableOfLayoutFromFile (const char &#8727;inPageTableFilePath, AAX_ETextEncoding in&#8592;&#8617;<br/>FilePathEncoding, const char &#8727;inLayoutName, uint32_t inTableType, int32_t inTablePageSize, IACFUnknown<br/>&#8727;oPageTable) const =0<br/></p>
<p><b>14.80.2 Member Function Documentation<br/></b></p>
<p><b>14.80.2.1 CopyTableForEffectFromFile()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTableController_V2::CopyTableForEffectFromFile (<br/>const char &#8727; inPageTableFilePath,<br/>AAX_ETextEncoding inFilePathEncoding,<br/>AAX_CPropertyValue inManufacturerID,<br/>AAX_CPropertyValue inProductID,<br/>AAX_CPropertyValue inPlugInID,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize,<br/>IACFUnknown &#8727; oPageTable ) const [pure virtual]<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_NULL_ARGUMENT if inPageTableFilePath or oPageTable is null<br/>AAX_ERROR_UNSUPPORTED_ENCODING if inFilePathEncoding has unsupported encoding value<br/>AAX_ERROR_INVALID_ARGUMENT if no valid page table mapping can be created due to the specified<br/>arguments<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.80 AAX_IACFPageTableController_V2 Class Reference 767<br/></b></p>
<p><b>Parameters<br/></b>in inPageTableFilePath Path to XML page table file.<br/>in inFilePathEncoding File path text encoding.<br/>in inManufacturerID Manufacturer ID of the desired plug-in type<br/>in inProductID Product ID of the desired plug-in type<br/>in inPlugInID Type ID of the desired plug-in type (AAX_eProperty_PlugInID_Native,<br/></p>
<p>AAX_eProperty_PlugInID_TI)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81',<br/></p>
<p>etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/>out oPageTable The page table object to which the page table data should be copied.<br/></p>
<p>oPageTable must support AAX_IACFPageTable<br/></p>
<p><b>See also<br/></b>AAX_IController::CreateTableCopyForEffect()<br/></p>
<p><b>14.80.2.2 CopyTableOfLayoutFromFile()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPageTableController_V2::CopyTableOfLayoutFromFile (<br/>const char &#8727; inPageTableFilePath,<br/>AAX_ETextEncoding inFilePathEncoding,<br/>const char &#8727; inLayoutName,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize,<br/>IACFUnknown &#8727; oPageTable ) const [pure virtual]<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_NULL_ARGUMENT if inPageTableFilePath, inLayoutName, or oPageTable is<br/>null<br/>AAX_ERROR_UNSUPPORTED_ENCODING if inFilePathEncoding has unsupported encoding value<br/>AAX_ERROR_INVALID_ARGUMENT if no valid page table mapping can be created due to the specified<br/>arguments<br/></p>
<p><b>Parameters<br/></b>in inPageTableFilePath Path to XML page table file.<br/>in inFilePathEncoding File path text encoding.<br/>in inLayoutName Page table layout name (&quot;name&quot; attribute of the PTLayout XML tag)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81',<br/></p>
<p>etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/>out oPageTable The page table object to which the page table data should be copied.<br/></p>
<p>oPageTable must support AAX_IACFPageTable<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>768 Class Documentation<br/></b></p>
<p><b>See also<br/></b>AAX_IController::CreateTableCopyForLayout()<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFPageTableController.h<br/></p>
<p><b>14.81 AAX_IACFPrivateDataAccess Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFPrivateDataAccess.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFPrivateDataAccess:<br/></p>
<p>Collaboration diagram for AAX_IACFPrivateDataAccess:<br/></p>
<p><b>14.81.1 Description<br/></b></p>
<p>Interface for the AAX host's data access functionality.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result ReadPortDirect (AAX_CFieldIndex inFieldIndex, const uint32_t inOffset, const uint32_t<br/></p>
<p>inSize, void &#8727;outBuffer)=0<br/>Read data directly from DSP at the given port.<br/></p>
<p>&#8226; virtual AAX_Result WritePortDirect (AAX_CFieldIndex inFieldIndex, const uint32_t inOffset, const uint32_t<br/>inSize, const void &#8727;inBuffer)=0<br/></p>
<p>Write data directly to DSP at the given port.<br/></p>
<p><b>14.81.2 Member Function Documentation<br/></b></p>
<p><b>14.81.2.1 ReadPortDirect()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPrivateDataAccess::ReadPortDirect (<br/>AAX_CFieldIndex inFieldIndex,<br/>const uint32_t inOffset,<br/>const uint32_t inSize,<br/>void &#8727; outBuffer ) [pure virtual]<br/></p>
<p>Read data directly from DSP at the given port.<br/></p>
<p><b>Note<br/></b>Blocking<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.82 AAX_IACFPropertyMap Class Reference 769<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex The port to read from.<br/>in inOffset Offset into data to start reading.<br/>in inSize Amount of data to read (in bytes).<br/>out outBuffer Pointer to storage for data to be read into.<br/></p>
<p><b>14.81.2.2 WritePortDirect()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPrivateDataAccess::WritePortDirect (<br/>AAX_CFieldIndex inFieldIndex,<br/>const uint32_t inOffset,<br/>const uint32_t inSize,<br/>const void &#8727; inBuffer ) [pure virtual]<br/></p>
<p>Write data directly to DSP at the given port.<br/></p>
<p><b>Note<br/></b>Blocking<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex The port to write to.<br/>in inOffset Offset into data to begin writing.<br/>in inSize Amount of data to write (in bytes).<br/>in inBuffer Pointer to data being written.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFPrivateDataAccess.h<br/></p>
<p><b>14.82 AAX_IACFPropertyMap Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFPropertyMap.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFPropertyMap:<br/></p>
<p>Collaboration diagram for AAX_IACFPropertyMap:<br/></p>
<p><b>14.82.1 Description<br/></b></p>
<p>Versioned interface for an AAX_IPropertyMap.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>770 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_CBoolean GetProperty (AAX_EProperty inProperty, AAX_CPropertyValue &#8727;outValue) const =0<br/>Get a property value from a property map.<br/></p>
<p>&#8226; virtual AAX_Result AddProperty (AAX_EProperty inProperty, AAX_CPropertyValue inValue)=0<br/>Add a property to a property map.<br/></p>
<p>&#8226; virtual AAX_Result RemoveProperty (AAX_EProperty inProperty)=0<br/>Remove a property from a property map.<br/></p>
<p><b>14.82.2 Member Function Documentation<br/></b></p>
<p><b>14.82.2.1 GetProperty()<br/></b></p>
<p>virtual AAX_CBoolean AAX_IACFPropertyMap::GetProperty (<br/>AAX_EProperty inProperty,<br/>AAX_CPropertyValue &#8727; outValue ) const [pure virtual]<br/></p>
<p>Get a property value from a property map.<br/></p>
<p>Returns true if the selected property is supported, false if it is not<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID<br/>out outValue The property value<br/></p>
<p><b>14.82.2.2 AddProperty()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPropertyMap::AddProperty (<br/>AAX_EProperty inProperty,<br/>AAX_CPropertyValue inValue ) [pure virtual]<br/></p>
<p>Add a property to a property map.<br/></p>
<p><b>Note<br/></b>This method may return an error if adding the property was unsuccessful. If there is a failure when adding a<br/>required property then registration of the relevant description element must be abandoned and the plug-in's<br/>description logic should proceed to the next element.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inValue<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.83 AAX_IACFPropertyMap_V2 Class Reference 771<br/></b></p>
<p><b>14.82.2.3 RemoveProperty()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPropertyMap::RemoveProperty (<br/>AAX_EProperty inProperty ) [pure virtual]<br/></p>
<p>Remove a property from a property map.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFPropertyMap.h<br/></p>
<p><b>14.83 AAX_IACFPropertyMap_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFPropertyMap.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFPropertyMap_V2:<br/>Collaboration diagram for AAX_IACFPropertyMap_V2:<br/></p>
<p><b>14.83.1 Description<br/></b></p>
<p>Versioned interface for an AAX_IPropertyMap.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result AddPropertyWithIDArray (AAX_EProperty inProperty, const AAX_SPlugInIdentifierTriad<br/>&#8727;inPluginIDs, uint32_t inNumPluginIDs)=0<br/></p>
<p>Add an array of plug-in IDs to a property map.<br/>&#8226; virtual AAX_CBoolean GetPropertyWithIDArray (AAX_EProperty inProperty, const AAX_SPlugInIdentifierTriad<br/>&#8727;&#8727;outPluginIDs, uint32_t &#8727;outNumPluginIDs) const =0<br/></p>
<p>Get an array of plug-in IDs from a property map.<br/></p>
<p><b>14.83.2 Member Function Documentation<br/></b></p>
<p><b>14.83.2.1 AddPropertyWithIDArray()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPropertyMap_V2::AddPropertyWithIDArray (<br/>AAX_EProperty inProperty,<br/>const AAX_SPlugInIdentifierTriad &#8727; inPluginIDs,<br/>uint32_t inNumPluginIDs ) [pure virtual]<br/></p>
<p>Add an array of plug-in IDs to a property map.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>772 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inPluginIDs An array of AAX_SPlugInIdentifierTriad<br/>in inNumPluginIDs The length of iPluginIDs<br/></p>
<p><b>14.83.2.2 GetPropertyWithIDArray()<br/></b></p>
<p>virtual AAX_CBoolean AAX_IACFPropertyMap_V2::GetPropertyWithIDArray (<br/>AAX_EProperty inProperty,<br/>const AAX_SPlugInIdentifierTriad &#8727;&#8727; outPluginIDs,<br/>uint32_t &#8727; outNumPluginIDs ) const [pure virtual]<br/></p>
<p>Get an array of plug-in IDs from a property map.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>out outPluginIDs A pointer that will be set to reference an array of AAX_SPlugInIdentifierTriad<br/>in outNumPluginIDs The length of oPluginIDs<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFPropertyMap.h<br/></p>
<p><b>14.84 AAX_IACFPropertyMap_V3 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFPropertyMap.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFPropertyMap_V3:<br/></p>
<p>Collaboration diagram for AAX_IACFPropertyMap_V3:<br/></p>
<p><b>14.84.1 Description<br/></b></p>
<p>Versioned interface for an AAX_IPropertyMap.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_CBoolean GetProperty64 (AAX_EProperty inProperty, AAX_CPropertyValue64 &#8727;outValue) const<br/></p>
<p>=0<br/>Get a property value from a property map.<br/></p>
<p>&#8226; virtual AAX_Result AddProperty64 (AAX_EProperty inProperty, AAX_CPropertyValue64 inValue)=0<br/>Add a property to a property map.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.85 AAX_IACFSessionDocument Class Reference 773<br/></b></p>
<p><b>14.84.2 Member Function Documentation<br/></b></p>
<p><b>14.84.2.1 GetProperty64()<br/></b></p>
<p>virtual AAX_CBoolean AAX_IACFPropertyMap_V3::GetProperty64 (<br/>AAX_EProperty inProperty,<br/>AAX_CPropertyValue64 &#8727; outValue ) const [pure virtual]<br/></p>
<p>Get a property value from a property map.<br/></p>
<p>Returns true if the selected property is supported, false if it is not<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID<br/>out outValue The property value<br/></p>
<p><b>14.84.2.2 AddProperty64()<br/></b></p>
<p>virtual AAX_Result AAX_IACFPropertyMap_V3::AddProperty64 (<br/>AAX_EProperty inProperty,<br/>AAX_CPropertyValue64 inValue ) [pure virtual]<br/></p>
<p>Add a property to a property map.<br/></p>
<p><b>Note<br/></b>This method may return an error if adding the property was unsuccessful. If there is a failure when adding a<br/>required property then registration of the relevant description element must be abandoned and the plug-in's<br/>description logic should proceed to the next element.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inValue<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFPropertyMap.h<br/></p>
<p><b>14.85 AAX_IACFSessionDocument Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFSessionDocument.h&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>774 Class Documentation<br/></b></p>
<p>Inheritance diagram for AAX_IACFSessionDocument:<br/></p>
<p>Collaboration diagram for AAX_IACFSessionDocument:<br/></p>
<p><b>14.85.1 Description<br/></b></p>
<p>Interface representing information in a host session document.<br/></p>
<p>Plug-in implementations should use AAX_ISessionDocument , which provides specific convenience methods for<br/>supported data types.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result GetDocumentData (AAX_DocumentData_UID const &amp;inDataType, IACFUnknown<br/>&#8727;&#8727;outData)=0<br/></p>
<p>Get data from the document.<br/></p>
<p><b>14.85.2 Member Function Documentation<br/></b></p>
<p><b>14.85.2.1 GetDocumentData()<br/></b></p>
<p>virtual AAX_Result AAX_IACFSessionDocument::GetDocumentData (<br/>AAX_DocumentData_UID const &amp; inDataType,<br/>IACFUnknown &#8727;&#8727; outData ) [pure virtual]<br/></p>
<p>Get data from the document.<br/></p>
<p>Get document data of a generic type<br/></p>
<p>Similar to QueryInterface() but uses a data type identifier rather than a true IID<br/></p>
<p>The provided interface has already had a reference added, so be careful not to add an additional reference:<br/>ACFPtr&lt;MyType&gt; ptr;<br/>IACFUnknown * docDataPtr{nullptr};<br/>if (AAX_SUCCESS == doc-&gt;GetDocumentData(dataUID, &amp;docDataPtr) &amp;&amp; docDataPtr) {<br/></p>
<p>ptr.attach(std::static_cast&lt;MyType*&gt;(docDataPtr)); // attach does not AddRef<br/>}<br/></p>
<p><b>Parameters<br/></b>in inDataType The type of the document data requested<br/>out outData An interface providing the requested data, or nullptr if the host does not support or<br/></p>
<p>cannot provide the requested data type. The reference count has been incremented on<br/>this object on behalf of the caller, so the caller must not add an additional reference<br/>count and must decrement the reference count on this object to release it. For<br/>information about which interface to expect for each requested data type, see the<br/>documentation for that data type.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.86 AAX_IACFSessionDocumentClient Class Reference 775<br/></b></p>
<p>&#8226; AAX_IACFSessionDocument.h<br/></p>
<p><b>14.86 AAX_IACFSessionDocumentClient Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFSessionDocumentClient.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFSessionDocumentClient:<br/></p>
<p>Collaboration diagram for AAX_IACFSessionDocumentClient:<br/></p>
<p><b>14.86.1 Description<br/></b></p>
<p>Interface representing a client of the session document interface.<br/></p>
<p>For example, a plug-in implementation that makes calls on the session document interface provided by the host.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; virtual AAX_Result Initialize (IACFUnknown &#8727;iUnknown)=0<br/>&#8226; virtual AAX_Result Uninitialize (void)=0<br/></p>
<p><b>Session document access<br/></b></p>
<p>&#8226; virtual AAX_Result SetSessionDocument (IACFUnknown &#8727;iSessionDocument)=0<br/>Sets or removes a session document.<br/></p>
<p><b>AAX host and plug-in event notification<br/></b></p>
<p>&#8226; virtual AAX_Result NotificationReceived (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData,<br/>uint32_t inNotificationDataSize)=0<br/></p>
<p>Notification Hook.<br/></p>
<p><b>14.86.2 Member Function Documentation<br/></b></p>
<p><b>14.86.2.1 Initialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFSessionDocumentClient::Initialize (<br/>IACFUnknown &#8727; iUnknown ) [pure virtual]<br/></p>
<p>Implemented in AAX_CSessionDocumentClient.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>776 Class Documentation<br/></b></p>
<p><b>14.86.2.2 Uninitialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFSessionDocumentClient::Uninitialize (<br/>void ) [pure virtual]<br/></p>
<p>Implemented in AAX_CSessionDocumentClient.<br/></p>
<p><b>14.86.2.3 SetSessionDocument()<br/></b></p>
<p>virtual AAX_Result AAX_IACFSessionDocumentClient::SetSessionDocument (<br/>IACFUnknown &#8727; iSessionDocument ) [pure virtual]<br/></p>
<p>Sets or removes a session document.<br/></p>
<p><b>Parameters<br/></b>in iSessionDocument Interface supporting at least AAX_IACFSessionDocument, or nullptr to<br/></p>
<p>indicate that any session document that is currently held should be released.<br/></p>
<p>Implemented in AAX_CSessionDocumentClient.<br/></p>
<p><b>14.86.2.4 NotificationReceived()<br/></b></p>
<p>virtual AAX_Result AAX_IACFSessionDocumentClient::NotificationReceived (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [pure virtual]<br/></p>
<p>Notification Hook.<br/></p>
<p>Called from the host to deliver notifications to this object.<br/></p>
<p>Look at the AAX_ENotificationEvent enumeration to see a description of events you can listen for and the data they<br/>come with.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>Different notifications are sent to different objects within a plug-in. If you are not seeing an expected<br/>notification, try checking the other plug-in objects' NotificationReceived() methods.<br/></p>
<p>&#8226;<br/><b>Note<br/></b></p>
<p>the host may dispatch notifications synchronously or asynchronously, and calls to this method may<br/>occur concurrently on multiple threads.<br/></p>
<p>A plug-in may also dispatch custom notifications using AAX_IController::SendNotification(). Custom notifi-<br/>cations will be posted back to the plug-in's other objects which support a NotificationReceived()<br/>method (e.g. the data model).<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.87 AAX_IACFTask Class Reference 777<br/></b></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification being received. Notifications form the host are one of<br/></p>
<p>AAX_ENotificationEvent<br/>in inNotificationData Block of incoming notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p>Implemented in AAX_CSessionDocumentClient.<br/>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFSessionDocumentClient.h<br/></p>
<p><b>14.87 AAX_IACFTask Class Reference<br/></b>#include &lt;AAX_IACFTask.h&gt;<br/>Inheritance diagram for AAX_IACFTask:<br/>Collaboration diagram for AAX_IACFTask:<br/></p>
<p><b>14.87.1 Description<br/></b></p>
<p>Versioned interface for an asynchronous task.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>Used by the task agent.<br/>This interface describes a task request and provides a way for the agent to express one or more results of the task<br/>as well as the progress of the task.<br/>This interface is open-ended for both inputs and outputs. The host and agent must use common definitions for<br/>specific task types, their possible arguments, and the expected results.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result GetType (AAX_CTypeID &#8727;oType) const =0<br/>&#8226; virtual AAX_IACFDataBuffer const &#8727; GetArgumentOfType (AAX_CTypeID iType) const =0<br/>&#8226; virtual AAX_Result SetProgress (float iProgress)=0<br/>&#8226; virtual float GetProgress () const =0<br/>&#8226; virtual AAX_Result AddResult (AAX_IACFDataBuffer const &#8727;iResult)=0<br/></p>
<p>Attach result data to this task.<br/>&#8226; virtual AAX_Result SetDone (AAX_TaskCompletionStatus iStatus)=0<br/></p>
<p>Inform the host that the task is completed.<br/></p>
<p><b>14.87.2 Member Function Documentation<br/></b></p>
<p><b>14.87.2.1 GetType()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTask::GetType (<br/>AAX_CTypeID &#8727; oType ) const [pure virtual]<br/></p>
<p>An identifier defining the type of the requested task<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>778 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out oType The type of this task request<br/></p>
<p>Implemented in AAX_CTask.<br/></p>
<p><b>14.87.2.2 GetArgumentOfType()<br/></b></p>
<p>virtual AAX_IACFDataBuffer const&#8727; AAX_IACFTask::GetArgumentOfType (<br/>AAX_CTypeID iType ) const [pure virtual]<br/></p>
<p>Additional information defining the request, depending on the task type<br/></p>
<p><b>Parameters<br/></b>in iType The type of argument requested. Possible argument types, if any, and the resulting data buffer<br/></p>
<p>format must be defined per task type.<br/></p>
<p><b>Returns<br/></b>The requested argument data, or nullptr. This data buffer's type ID is expected to match iType . The caller<br/>takes ownership of this object.<br/></p>
<p>Implemented in AAX_CTask.<br/></p>
<p><b>14.87.2.3 SetProgress()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTask::SetProgress (<br/>float iProgress ) [pure virtual]<br/></p>
<p>Inform the host about the current status of the task<br/></p>
<p><b>Parameters<br/></b>in iProgress A value between 0 (no progress) and 1 (complete)<br/></p>
<p>Implemented in AAX_CTask.<br/></p>
<p><b>14.87.2.4 GetProgress()<br/></b></p>
<p>virtual float AAX_IACFTask::GetProgress ( ) const [pure virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.87 AAX_IACFTask Class Reference 779<br/></b></p>
<p>Returns the current progress<br/></p>
<p>Implemented in AAX_CTask.<br/></p>
<p><b>14.87.2.5 AddResult()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTask::AddResult (<br/>AAX_IACFDataBuffer const &#8727; iResult ) [pure virtual]<br/></p>
<p>Attach result data to this task.<br/></p>
<p>This can be called multiple times to add multiple types of results to a single task.<br/></p>
<p>The host may process the result data immediately or may wait for the task to complete.<br/></p>
<p>The plug-in is expected to release the data buffer upon making this call. At a minimum, the data buffer must not be<br/>changed after this call is made. See ACFPtr::inArg()<br/></p>
<p><b>Parameters<br/></b>in iResult A buffer containing the result data. Expected result types, if any, and their data buffer format<br/></p>
<p>must be defined per task type.<br/></p>
<p>Implemented in AAX_CTask.<br/></p>
<p><b>14.87.2.6 SetDone()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTask::SetDone (<br/>AAX_TaskCompletionStatus iStatus ) [pure virtual]<br/></p>
<p>Inform the host that the task is completed.<br/></p>
<p>If AAX_SUCCESS is returned, the object should be considered invalid and released by the caller.<br/></p>
<p><b>Parameters<br/></b>in iStatus The final status of the task. This indicates to the host whether or not the task was performed<br/></p>
<p>as requested.<br/></p>
<p>Implemented in AAX_CTask.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFTask.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>780 Class Documentation<br/></b></p>
<p><b>14.88 AAX_IACFTaskAgent Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFTaskAgent.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFTaskAgent:<br/></p>
<p>Collaboration diagram for AAX_IACFTaskAgent:<br/></p>
<p><b>14.88.1 Description<br/></b></p>
<p>Versioned interface for a component that accepts task requests.<br/></p>
<p><b>:Implemented by the Plug-In<br/></b></p>
<p>The task agent is expected to complete the requested tasks asynchronously and to provide progress and completion<br/>details via calls on the AAX_IACFTask interface as the tasks proceed.<br/></p>
<p><b>See also<br/></b>AAX_ITask<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>Initialization and uninitialization<br/></b></p>
<p>&#8226; virtual AAX_Result Initialize (IACFUnknown &#8727;iController)=0<br/>&#8226; virtual AAX_Result Uninitialize ()=0<br/></p>
<p><b>Task management<br/></b></p>
<p>&#8226; virtual AAX_Result AddTask (IACFUnknown &#8727;iTask)=0<br/>&#8226; virtual AAX_Result CancelAllTasks ()=0<br/></p>
<p><b>14.88.2 Member Function Documentation<br/></b></p>
<p><b>14.88.2.1 Initialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTaskAgent::Initialize (<br/>IACFUnknown &#8727; iController ) [pure virtual]<br/></p>
<p>Initialize the object<br/></p>
<p><b>Parameters<br/></b>in iController Interface allowing access to other objects in the object graph such as the plug-in's data<br/></p>
<p>model.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.89 AAX_IACFTransport Class Reference 781<br/></b></p>
<p>Implemented in AAX_CTaskAgent.<br/></p>
<p><b>14.88.2.2 Uninitialize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTaskAgent::Uninitialize ( ) [pure virtual]<br/></p>
<p>Uninitialize the object<br/></p>
<p>This method should release references to any shared objects<br/></p>
<p>Implemented in AAX_CTaskAgent.<br/></p>
<p><b>14.88.2.3 AddTask()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTaskAgent::AddTask (<br/>IACFUnknown &#8727; iTask ) [pure virtual]<br/></p>
<p>Request that the agent perform a task<br/></p>
<p><b>Parameters<br/></b>in iTask The task to perform. The agent must retain a reference to this task if it will be used beyond the<br/></p>
<p>scope of this method. This object should support at least AAX_IACFTask .<br/></p>
<p>Implemented in AAX_CTaskAgent.<br/></p>
<p><b>14.88.2.4 CancelAllTasks()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTaskAgent::CancelAllTasks ( ) [pure virtual]<br/></p>
<p>Request that the agent cancel all outstanding tasks<br/></p>
<p>Implemented in AAX_CTaskAgent.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFTaskAgent.h<br/></p>
<p><b>14.89 AAX_IACFTransport Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFTransport.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFTransport:<br/></p>
<p>Collaboration diagram for AAX_IACFTransport:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>782 Class Documentation<br/></b></p>
<p><b>14.89.1 Description<br/></b></p>
<p>Versioned interface to get information about the host's transport state.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result GetCurrentTempo (double &#8727;TempoBPM) const =0<br/>CALL: Gets the current tempo.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentMeter (int32_t &#8727;MeterNumerator, int32_t &#8727;MeterDenominator) const =0<br/>CALL: Gets the current meter.<br/></p>
<p>&#8226; virtual AAX_Result IsTransportPlaying (bool &#8727;isPlaying) const =0<br/>CALL: Indicates whether or not the transport is playing back.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentTickPosition (int64_t &#8727;TickPosition) const =0<br/>CALL: Gets the current tick position.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentLoopPosition (bool &#8727;bLooping, int64_t &#8727;LoopStartTick, int64_t &#8727;LoopEndTick)<br/>const =0<br/></p>
<p>CALL: Gets current information on loop playback.<br/>&#8226; virtual AAX_Result GetCurrentNativeSampleLocation (int64_t &#8727;SampleLocation) const =0<br/></p>
<p>CALL: Gets the current playback location of the native audio engine.<br/>&#8226; virtual AAX_Result GetCustomTickPosition (int64_t &#8727;oTickPosition, int64_t iSampleLocation) const =0<br/></p>
<p>CALL: Given an absolute sample position, gets the corresponding tick position.<br/>&#8226; virtual AAX_Result GetBarBeatPosition (int32_t &#8727;Bars, int32_t &#8727;Beats, int64_t &#8727;DisplayTicks, int64_&#8592;&#8617;<br/></p>
<p>t SampleLocation) const =0<br/>CALL: Given an absolute sample position, gets the corresponding bar and beat position.<br/></p>
<p>&#8226; virtual AAX_Result GetTicksPerQuarter (uint32_t &#8727;ticks) const =0<br/>CALL: Retrieves the number of ticks per quarter note.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentTicksPerBeat (uint32_t &#8727;ticks) const =0<br/>CALL: Retrieves the number of ticks per beat.<br/></p>
<p><b>14.89.2 Member Function Documentation<br/></b></p>
<p><b>14.89.2.1 GetCurrentTempo()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport::GetCurrentTempo (<br/>double &#8727; TempoBPM ) const [pure virtual]<br/></p>
<p>CALL: Gets the current tempo.<br/></p>
<p>Returns the tempo corresponding to the current position of the transport counter<br/></p>
<p><b>Note<br/></b>The resolution of the tempo returned here is based on the host's tempo resolution, so it will match the tempo<br/>displayed in the host. Use GetCurrentTicksPerBeat() to calculate the tempo resolution note.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.89 AAX_IACFTransport Class Reference 783<br/></b></p>
<p><b>Parameters<br/></b>out TempoBPM The current tempo in beats per minute<br/></p>
<p><b>14.89.2.2 GetCurrentMeter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport::GetCurrentMeter (<br/>int32_t &#8727; MeterNumerator,<br/>int32_t &#8727; MeterDenominator ) const [pure virtual]<br/></p>
<p>CALL: Gets the current meter.<br/></p>
<p>Returns the meter corresponding to the current position of the transport counter<br/></p>
<p><b>Parameters<br/></b>out MeterNumerator The numerator portion of the meter<br/>out MeterDenominator The denominator portion of the meter<br/></p>
<p><b>14.89.2.3 IsTransportPlaying()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport::IsTransportPlaying (<br/>bool &#8727; isPlaying ) const [pure virtual]<br/></p>
<p>CALL: Indicates whether or not the transport is playing back.<br/></p>
<p><b>Parameters<br/></b>out isPlaying true if the transport is currently in playback<br/></p>
<p><b>14.89.2.4 GetCurrentTickPosition()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport::GetCurrentTickPosition (<br/>int64_t &#8727; TickPosition ) const [pure virtual]<br/></p>
<p>CALL: Gets the current tick position.<br/></p>
<p>Returns the current tick position corresponding to the current transport position. One &quot;Tick&quot; is represented here as<br/>1/960000 of a quarter note. That is, there are 960,000 of these ticks in a quarter note.<br/></p>
<p><b>Host Compatibility Notes </b>The tick resolution here is different than that of the tick displayed in Pro Tools. &quot;Display<br/>ticks&quot; (as they are called) are 1/960 of a quarter note.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>784 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out TickPosition The tick position value<br/></p>
<p><b>14.89.2.5 GetCurrentLoopPosition()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport::GetCurrentLoopPosition (<br/>bool &#8727; bLooping,<br/>int64_t &#8727; LoopStartTick,<br/>int64_t &#8727; LoopEndTick ) const [pure virtual]<br/></p>
<p>CALL: Gets current information on loop playback.<br/></p>
<p><b>Host Compatibility Notes </b>This does not indicate anything about the status of the &quot;Loop Record&quot; option. Even<br/>when the host is configured to loop playback, looping may not occur if certain conditions<br/>are not met (i.e. the length of the selection is too short)<br/></p>
<p><b>Parameters<br/></b>out bLooping true if the host is configured to loop playback<br/>out LoopStartTick The starting tick position of the selection being looped (see GetCurrentTickPosition())<br/>out LoopEndTick The ending tick position of the selection being looped (see GetCurrentTickPosition())<br/></p>
<p><b>14.89.2.6 GetCurrentNativeSampleLocation()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport::GetCurrentNativeSampleLocation (<br/>int64_t &#8727; SampleLocation ) const [pure virtual]<br/></p>
<p>CALL: Gets the current playback location of the native audio engine.<br/></p>
<p>When called from a ProcessProc render callback, this method will provide the absolute sample location at the<br/>beginning of the callback's audio buffers.<br/></p>
<p>When called from AAX_IEffectParameters::RenderAudio_Hybrid(), this method will provide the absolute sample<br/>location for the samples in the method's <b>output </b>audio buffers. To calculate the absolute sample location for the<br/>sampels in the method's input buffers (i.e. the timelin location where the samples originated) subtract the value<br/>provided by AAX_IController::GetHybridSignalLatency() from this value.<br/></p>
<p>When called from a non-real-time thread, this method will provide the current location of the samples being pro-<br/>cessed by the plug-in's ProcessProc on its real-time processing thread.<br/></p>
<p><b>Note<br/></b>This method only returns a value during playback. It cannot be used to determine, e.g., the location of the<br/>timeline selector while the host is not in playback.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.89 AAX_IACFTransport Class Reference 785<br/></b></p>
<p><b>Parameters<br/></b>out SampleLocation Absolute sample location of the first sample in the current native processing buffer<br/></p>
<p><b>14.89.2.7 GetCustomTickPosition()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport::GetCustomTickPosition (<br/>int64_t &#8727; oTickPosition,<br/>int64_t iSampleLocation ) const [pure virtual]<br/></p>
<p>CALL: Given an absolute sample position, gets the corresponding tick position.<br/></p>
<p><b>Host Compatibility Notes </b>There is a minor performance cost associated with using this API in Pro Tools. It should<br/>not be used excessively without need.<br/></p>
<p><b>Parameters<br/></b>out oTickPosition the timeline tick position corresponding to iSampleLocation<br/>in iSampleLocation An absolute sample location (see GetCurrentNativeSampleLocation())<br/></p>
<p><b>14.89.2.8 GetBarBeatPosition()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport::GetBarBeatPosition (<br/>int32_t &#8727; Bars,<br/>int32_t &#8727; Beats,<br/>int64_t &#8727; DisplayTicks,<br/>int64_t SampleLocation ) const [pure virtual]<br/></p>
<p>CALL: Given an absolute sample position, gets the corresponding bar and beat position.<br/></p>
<p><b>Host Compatibility Notes </b>There is a minor performance cost associated with using this API in Pro Tools. It should<br/>not be used excessively without need.<br/></p>
<p><b>Parameters<br/></b>out Bars The bar corresponding to SampleLocation<br/>out Beats The beat corresponding to SampleLocation<br/>out DisplayTicks The ticks corresponding to SampleLocation<br/>in SampleLocation An absolute sample location (see GetCurrentNativeSampleLocation())<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>786 Class Documentation<br/></b></p>
<p><b>14.89.2.9 GetTicksPerQuarter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport::GetTicksPerQuarter (<br/>uint32_t &#8727; ticks ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the number of ticks per quarter note.<br/></p>
<p><b>Parameters<br/></b>out ticks<br/></p>
<p><b>14.89.2.10 GetCurrentTicksPerBeat()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport::GetCurrentTicksPerBeat (<br/>uint32_t &#8727; ticks ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the number of ticks per beat.<br/></p>
<p><b>Parameters<br/></b>out ticks<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFTransport.h<br/></p>
<p><b>14.90 AAX_IACFTransport_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFTransport.h&gt;<br/>Inheritance diagram for AAX_IACFTransport_V2:<br/>Collaboration diagram for AAX_IACFTransport_V2:<br/></p>
<p><b>14.90.1 Description<br/></b></p>
<p>Versioned interface to get information about the host's transport state.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result GetTimelineSelectionStartPosition (int64_t &#8727;oSampleLocation) const =0<br/></p>
<p>CALL: Retrieves the absolute sample position of the beginning of the current transport selection.<br/>&#8226; virtual AAX_Result GetTimeCodeInfo (AAX_EFrameRate &#8727;oFrameRate, int32_t &#8727;oOffset) const =0<br/></p>
<p>CALL: Retrieves the current time code frame rate and offset.<br/>&#8226; virtual AAX_Result GetFeetFramesInfo (AAX_EFeetFramesRate &#8727;oFeetFramesRate, int64_t &#8727;oOffset) const<br/></p>
<p>=0<br/>CALL: Retrieves the current timecode feet/frames rate and offset.<br/></p>
<p>&#8226; virtual AAX_Result IsMetronomeEnabled (int32_t &#8727;isEnabled) const =0<br/>Sets isEnabled to true if the metronome is enabled.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.90 AAX_IACFTransport_V2 Class Reference 787<br/></b></p>
<p><b>14.90.2 Member Function Documentation<br/></b></p>
<p><b>14.90.2.1 GetTimelineSelectionStartPosition()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport_V2::GetTimelineSelectionStartPosition (<br/>int64_t &#8727; oSampleLocation ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the absolute sample position of the beginning of the current transport selection.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out oSampleLocation<br/></p>
<p><b>14.90.2.2 GetTimeCodeInfo()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport_V2::GetTimeCodeInfo (<br/>AAX_EFrameRate &#8727; oFrameRate,<br/>int32_t &#8727; oOffset ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the current time code frame rate and offset.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out oFrameRate<br/>out oOffset<br/></p>
<p><b>14.90.2.3 GetFeetFramesInfo()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport_V2::GetFeetFramesInfo (<br/>AAX_EFeetFramesRate &#8727; oFeetFramesRate,<br/>int64_t &#8727; oOffset ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the current timecode feet/frames rate and offset.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>788 Class Documentation<br/></b></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out oFeetFramesRate<br/>out oOffset<br/></p>
<p><b>14.90.2.4 IsMetronomeEnabled()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport_V2::IsMetronomeEnabled (<br/>int32_t &#8727; isEnabled ) const [pure virtual]<br/></p>
<p>Sets isEnabled to true if the metronome is enabled.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out isEnabled<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFTransport.h<br/></p>
<p><b>14.91 AAX_IACFTransport_V3 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFTransport.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFTransport_V3:<br/></p>
<p>Collaboration diagram for AAX_IACFTransport_V3:<br/></p>
<p><b>14.91.1 Description<br/></b></p>
<p>Versioned interface to get information about the host's transport state.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result GetHDTimeCodeInfo (AAX_EFrameRate &#8727;oHDFrameRate, int64_t &#8727;oHDOffset) const =0<br/>CALL: Retrieves the current HD time code frame rate and offset.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.92 AAX_IACFTransport_V4 Class Reference 789<br/></b></p>
<p><b>14.91.2 Member Function Documentation<br/></b></p>
<p><b>14.91.2.1 GetHDTimeCodeInfo()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport_V3::GetHDTimeCodeInfo (<br/>AAX_EFrameRate &#8727; oHDFrameRate,<br/>int64_t &#8727; oHDOffset ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the current HD time code frame rate and offset.<br/></p>
<p><b>Note<br/></b>This method is part of the version 3 transport interface<br/></p>
<p><b>Parameters<br/></b>out oHDFrameRate<br/>out oHDOffset<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFTransport.h<br/></p>
<p><b>14.92 AAX_IACFTransport_V4 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFTransport.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFTransport_V4:<br/></p>
<p>Collaboration diagram for AAX_IACFTransport_V4:<br/></p>
<p><b>14.92.1 Description<br/></b></p>
<p>Versioned interface to get information about the host's transport state.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result GetTimelineSelectionEndPosition (int64_t &#8727;oSampleLocation) const =0<br/></p>
<p>CALL: Retrieves the absolute sample position of the end of the current transport selection.<br/></p>
<p><b>14.92.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>790 Class Documentation<br/></b></p>
<p><b>14.92.2.1 GetTimelineSelectionEndPosition()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport_V4::GetTimelineSelectionEndPosition (<br/>int64_t &#8727; oSampleLocation ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the absolute sample position of the end of the current transport selection.<br/></p>
<p><b>Note<br/></b>This method is part of the version 4 transport interface<br/></p>
<p><b>Parameters<br/></b>out oSampleLocation<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFTransport.h<br/></p>
<p><b>14.93 AAX_IACFTransport_V5 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFTransport.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFTransport_V5:<br/></p>
<p>Collaboration diagram for AAX_IACFTransport_V5:<br/></p>
<p><b>14.93.1 Description<br/></b></p>
<p>Versioned interface to get information about the host's transport state.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual AAX_Result GetKeySignature (int64_t iSampleLocation, uint32_t &#8727;oKeySignature) const =0<br/>CALL: Retrieves the key signature at a sample location.<br/></p>
<p><b>14.93.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.94 AAX_IACFTransportControl Class Reference 791<br/></b></p>
<p><b>14.93.2.1 GetKeySignature()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransport_V5::GetKeySignature (<br/>int64_t iSampleLocation,<br/>uint32_t &#8727; oKeySignature ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the key signature at a sample location.<br/></p>
<p>The signature is provided as a bitfield:<br/></p>
<p>&#8226; 31-20: Chromatic scale elements, ordered MSB (root) to LSB<br/></p>
<p>&#8226; 19-4: (Reserved)<br/></p>
<p>&#8226; 3-0: Root note (C natural = 0)<br/></p>
<p>For example<br/></p>
<p>* D# Major<br/>* Ionian D#<br/>* 0b 101011010101 0000 00000000 0000 0011<br/>*<br/>* E Phrygian<br/>* Phrygian E<br/>* 0b 110101011010 0000 00000000 0000 0100<br/>*<br/>* Chromatic<br/>* Chromatic C<br/>* 0b 111111111111 0000 00000000 0000 0000<br/>*<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFTransport.h<br/></p>
<p><b>14.94 AAX_IACFTransportControl Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFTransportControl.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFTransportControl:<br/></p>
<p>Collaboration diagram for AAX_IACFTransportControl:<br/></p>
<p><b>14.94.1 Description<br/></b></p>
<p>Versioned interface to control the host's transport state.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_Result RequestTransportStart ()=0<br/></p>
<p>CALL: Request that the host transport start playback.<br/>&#8226; virtual AAX_Result RequestTransportStop ()=0<br/></p>
<p>CALL: Request that the host transport stop playback.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>792 Class Documentation<br/></b></p>
<p><b>14.94.2 Member Function Documentation<br/></b></p>
<p><b>14.94.2.1 RequestTransportStart()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransportControl::RequestTransportStart ( ) [pure virtual]<br/></p>
<p>CALL: Request that the host transport start playback.<br/></p>
<p><b>Note<br/></b>This method is part of the AAX_IACFTransportControl interface<br/></p>
<p><b>14.94.2.2 RequestTransportStop()<br/></b></p>
<p>virtual AAX_Result AAX_IACFTransportControl::RequestTransportStop ( ) [pure virtual]<br/></p>
<p>CALL: Request that the host transport stop playback.<br/></p>
<p><b>Note<br/></b>This method is part of the AAX_IACFTransportControl interface<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFTransportControl.h<br/></p>
<p><b>14.95 AAX_IACFViewContainer Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFViewContainer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFViewContainer:<br/></p>
<p>Collaboration diagram for AAX_IACFViewContainer:<br/></p>
<p><b>14.95.1 Description<br/></b></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the host app and by effect<br/>components.<br/></p>
<p><b>See also<br/></b>AAX_IViewContainer<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.95 AAX_IACFViewContainer Class Reference 793<br/></b></p>
<p><b>Public Member Functions<br/>View and GUI state queries<br/></b></p>
<p>&#8226; virtual int32_t GetType ()=0<br/>Returns the raw view type as one of AAX_EViewContainer_Type.<br/></p>
<p>&#8226; virtual void &#8727; GetPtr ()=0<br/>Returns a pointer to the raw view.<br/></p>
<p>&#8226; virtual AAX_Result GetModifiers (uint32_t &#8727;outModifiers)=0<br/>Queries the host for the current modifier keys.<br/></p>
<p><b>View change requests<br/></b>&#8226; virtual AAX_Result SetViewSize (AAX_Point &amp;inSize)=0<br/></p>
<p>Request a change to the main view size.<br/></p>
<p><b>Host event handlers<br/></b>&#8226; virtual AAX_Result HandleParameterMouseDown (AAX_CParamID inParamID, uint32_t inModifiers)=0<br/></p>
<p>Alert the host to a mouse down event.<br/>&#8226; virtual AAX_Result HandleParameterMouseDrag (AAX_CParamID inParamID, uint32_t inModifiers)=0<br/></p>
<p>Alert the host to a mouse drag event.<br/>&#8226; virtual AAX_Result HandleParameterMouseUp (AAX_CParamID inParamID, uint32_t inModifiers)=0<br/></p>
<p>Alert the host to a mouse up event.<br/></p>
<p><b>14.95.2 Member Function Documentation<br/></b></p>
<p><b>14.95.2.1 GetType()<br/></b></p>
<p>virtual int32_t AAX_IACFViewContainer::GetType ( ) [pure virtual]<br/></p>
<p>Returns the raw view type as one of AAX_EViewContainer_Type.<br/></p>
<p><b>14.95.2.2 GetPtr()<br/></b></p>
<p>virtual void&#8727; AAX_IACFViewContainer::GetPtr ( ) [pure virtual]<br/></p>
<p>Returns a pointer to the raw view.<br/></p>
<p><b>14.95.2.3 GetModifiers()<br/></b></p>
<p>virtual AAX_Result AAX_IACFViewContainer::GetModifiers (<br/>uint32_t &#8727; outModifiers ) [pure virtual]<br/></p>
<p>Queries the host for the current modifier keys.<br/>This method returns a bit mask with bits set for each of the currently active modifier keys. This method does not<br/>return the state of the AAX_eModifiers_SecondaryButton.<br/></p>
<p><b>Host Compatibility Notes </b>Although this method allows plug-ins to acquire the current state of the Windows key<br/>(normally blocked by Pro Tools), plug-ins should not use key combinations that require<br/>this key.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>794 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out outModifiers Current modifiers as a bitmask of AAX_EModifiers<br/></p>
<p><b>14.95.2.4 SetViewSize()<br/></b></p>
<p>virtual AAX_Result AAX_IACFViewContainer::SetViewSize (<br/>AAX_Point &amp; inSize ) [pure virtual]<br/></p>
<p>Request a change to the main view size.<br/></p>
<p><b>Note<br/></b>&#8226; For compatibility with the smallest supported displays, plug-in GUI dimensions should not exceed<br/></p>
<p>749x617 pixels, or 749x565 pixels for plug-ins with sidechain support.<br/></p>
<p><b>Parameters<br/></b>in inSize The new size to which the plug-in view should be set<br/></p>
<p><b>14.95.2.5 HandleParameterMouseDown()<br/></b></p>
<p>virtual AAX_Result AAX_IACFViewContainer::HandleParameterMouseDown (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse down event.<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being edited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p><b>14.95.2.6 HandleParameterMouseDrag()<br/></b></p>
<p>virtual AAX_Result AAX_IACFViewContainer::HandleParameterMouseDrag (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse drag event.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.96 AAX_IACFViewContainer_V2 Class Reference 795<br/></b></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being edited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p><b>14.95.2.7 HandleParameterMouseUp()<br/></b></p>
<p>virtual AAX_Result AAX_IACFViewContainer::HandleParameterMouseUp (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse up event.<br/></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being edited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFViewContainer.h<br/></p>
<p><b>14.96 AAX_IACFViewContainer_V2 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFViewContainer.h&gt;<br/>Inheritance diagram for AAX_IACFViewContainer_V2:<br/>Collaboration diagram for AAX_IACFViewContainer_V2:<br/></p>
<p><b>14.96.1 Description<br/></b></p>
<p>Supplemental interface for the AAX host's view of a single instance of an effect. Used by both clients of the host<br/>app and by effect components.<br/></p>
<p><b>See also<br/></b>AAX_IViewContainer<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>796 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>Host event handlers<br/></b></p>
<p>&#8226; virtual AAX_Result HandleMultipleParametersMouseDown (const AAX_CParamID &#8727;inParamIDs, uint32&#8592;&#8617;<br/>_t inNumOfParams, uint32_t inModifiers)=0<br/></p>
<p>Alert the host to a mouse down event.<br/>&#8226; virtual AAX_Result HandleMultipleParametersMouseDrag (const AAX_CParamID &#8727;inParamIDs, uint32_t<br/></p>
<p>inNumOfParams, uint32_t inModifiers)=0<br/>Alert the host to a mouse drag event.<br/></p>
<p>&#8226; virtual AAX_Result HandleMultipleParametersMouseUp (const AAX_CParamID &#8727;inParamIDs, uint32_&#8592;&#8617;<br/>t inNumOfParams, uint32_t inModifiers)=0<br/></p>
<p>Alert the host to a mouse up event.<br/></p>
<p><b>14.96.2 Member Function Documentation<br/></b></p>
<p><b>14.96.2.1 HandleMultipleParametersMouseDown()<br/></b></p>
<p>virtual AAX_Result AAX_IACFViewContainer_V2::HandleMultipleParametersMouseDown (<br/>const AAX_CParamID &#8727; inParamIDs,<br/>uint32_t inNumOfParams,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse down event.<br/></p>
<p><b>Parameters<br/></b>in inParamIDs IDs of the parameters that belong to the same GUI element whose controls are<br/></p>
<p>being edited<br/>in inNumOfParams Number of parameter IDS<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p><b>14.96.2.2 HandleMultipleParametersMouseDrag()<br/></b></p>
<p>virtual AAX_Result AAX_IACFViewContainer_V2::HandleMultipleParametersMouseDrag (<br/>const AAX_CParamID &#8727; inParamIDs,<br/>uint32_t inNumOfParams,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse drag event.<br/></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.97 AAX_IACFViewContainer_V3 Class Reference 797<br/></b></p>
<p><b>Parameters<br/></b>in inParamIDs IDs of the parameters that belong to the same GUI element whose controls are<br/></p>
<p>being edited<br/>in inNumOfParams Number of parameter IDS<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p><b>14.96.2.3 HandleMultipleParametersMouseUp()<br/></b></p>
<p>virtual AAX_Result AAX_IACFViewContainer_V2::HandleMultipleParametersMouseUp (<br/>const AAX_CParamID &#8727; inParamIDs,<br/>uint32_t inNumOfParams,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse up event.<br/></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Parameters<br/></b>in inParamIDs IDs of the parameters that belong to the same GUI element whose controls are<br/></p>
<p>being edited<br/>in inNumOfParams Number of parameter IDS<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFViewContainer.h<br/></p>
<p><b>14.97 AAX_IACFViewContainer_V3 Class Reference<br/></b></p>
<p>#include &lt;AAX_IACFViewContainer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IACFViewContainer_V3:<br/></p>
<p>Collaboration diagram for AAX_IACFViewContainer_V3:<br/></p>
<p><b>14.97.1 Description<br/></b></p>
<p>Additional methods to track mouse as it moves over controls.<br/></p>
<p><b>See also<br/></b>AAX_IViewContainer<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>798 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p><b>Host event handlers<br/></b></p>
<p>&#8226; virtual AAX_Result HandleParameterMouseEnter (AAX_CParamID inParamID, uint32_t inModifiers)=0<br/>Alert the host to a mouse enter event to the parameter's control.<br/></p>
<p>&#8226; virtual AAX_Result HandleParameterMouseExit (AAX_CParamID inParamID, uint32_t inModifiers)=0<br/>Alert the host to a mouse exit event from the parameter's control.<br/></p>
<p><b>14.97.2 Member Function Documentation<br/></b></p>
<p><b>14.97.2.1 HandleParameterMouseEnter()<br/></b></p>
<p>virtual AAX_Result AAX_IACFViewContainer_V3::HandleParameterMouseEnter (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse enter event to the parameter's control.<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being entered<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Returns AAX_SUCCESS if event was processed successfully, otherwise an AAX_ERROR code<br/></p>
<p><b>14.97.2.2 HandleParameterMouseExit()<br/></b></p>
<p>virtual AAX_Result AAX_IACFViewContainer_V3::HandleParameterMouseExit (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse exit event from the parameter's control.<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being exited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Returns AAX_SUCCESS if event was processed successfully, otherwise an AAX_ERROR code<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFViewContainer.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.98 AAX_IAutomationDelegate Class Reference 799<br/></b></p>
<p><b>14.98 AAX_IAutomationDelegate Class Reference<br/></b></p>
<p>#include &lt;AAX_IAutomationDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IAutomationDelegate:<br/></p>
<p><b>14.98.1 Description<br/></b></p>
<p>Interface allowing an AAX plug-in to interact with the host's event system.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>This delegate provides a means of interacting with the host's event system in order to ensure that events such<br/>as parameter updates are properly arbitrated and broadcast to all listeners. The automation delegate is used<br/>regardless of whether or not an individual parameter is &quot;automatable&quot; or &quot;automation-enabled&quot;.<br/></p>
<p>A parameter must be registered with the automation delegate in order for updates to the parameter's control in the<br/>plug-in's GUI or other controller (control surface, etc.) to be successfully processed by the host and sent to the<br/>AAX_IEffectParameters object.<br/></p>
<p>The parameter identifiers used by this interface correspond to the control IDs used to identify parameters in the<br/>Parameter Mananger.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IAutomationDelegate ()<br/>&#8226; virtual AAX_Result RegisterParameter (AAX_CParamID iParameterID)=0<br/>&#8226; virtual AAX_Result UnregisterParameter (AAX_CParamID iParameterID)=0<br/>&#8226; virtual AAX_Result PostSetValueRequest (AAX_CParamID iParameterID, double normalizedValue) const =0<br/>&#8226; virtual AAX_Result PostCurrentValue (AAX_CParamID iParameterID, double normalizedValue) const =0<br/>&#8226; virtual AAX_Result PostTouchRequest (AAX_CParamID iParameterID)=0<br/>&#8226; virtual AAX_Result PostReleaseRequest (AAX_CParamID iParameterID)=0<br/>&#8226; virtual AAX_Result GetTouchState (AAX_CParamID iParameterID, AAX_CBoolean &#8727;oTouched)=0<br/>&#8226; virtual AAX_Result ParameterNameChanged (AAX_CParamID iParameterID)=0<br/></p>
<p><b>14.98.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.98.2.1 </b>&#8764;<b>AAX_IAutomationDelegate()<br/></b></p>
<p>virtual AAX_IAutomationDelegate::&#8764;AAX_IAutomationDelegate ( ) [inline], [virtual]<br/></p>
<p><b>14.98.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>800 Class Documentation<br/></b></p>
<p><b>14.98.3.1 RegisterParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IAutomationDelegate::RegisterParameter (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>Register a control with the automation system using a char&#8727; based control identifier<br/></p>
<p>The automation delegate owns a list of the IDs of all of the parameters that have been registered with it. This list<br/>is used to set up listeners for all of the registered parameters such that the automation delegate may update the<br/>plug-in when the state of any of the registered parameters have been modified.<br/></p>
<p><b>See also<br/></b>AAX_IAutomationDelegate::UnregisterParameter()<br/></p>
<p><b>Parameters<br/></b>in iParameterID Parameter ID that is being registered<br/></p>
<p>Implemented in AAX_VAutomationDelegate.<br/></p>
<p>Referenced by AAX_CParameter&lt; T &gt;::SetAutomationDelegate(), and AAX_CStatelessParameter::Set&#8592;&#8617;<br/>AutomationDelegate().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.98.3.2 UnregisterParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IAutomationDelegate::UnregisterParameter (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>Unregister a control with the automation system using a char&#8727; based control identifier<br/></p>
<p><b>Note<br/></b>All registered controls should be unregistered or the system might leak.<br/></p>
<p><b>See also<br/></b>AAX_IAutomationDelegate::RegisterParameter()<br/></p>
<p><b>Parameters<br/></b>in iParameterID Parameter ID that is being registered<br/></p>
<p>Implemented in AAX_VAutomationDelegate.<br/></p>
<p>Referenced by AAX_CStatelessParameter::SetAutomationDelegate().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.98 AAX_IAutomationDelegate Class Reference 801<br/></b></p>
<p><b>14.98.3.3 PostSetValueRequest()<br/></b></p>
<p>virtual AAX_Result AAX_IAutomationDelegate::PostSetValueRequest (<br/>AAX_CParamID iParameterID,<br/>double normalizedValue ) const [pure virtual]<br/></p>
<p>Submits a request for the given parameter's value to be changed<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter for which a change is requested<br/>in normalizedValue The requested new parameter value, formatted as a double and normalized to [0 1]<br/></p>
<p>Implemented in AAX_VAutomationDelegate.<br/></p>
<p><b>14.98.3.4 PostCurrentValue()<br/></b></p>
<p>virtual AAX_Result AAX_IAutomationDelegate::PostCurrentValue (<br/>AAX_CParamID iParameterID,<br/>double normalizedValue ) const [pure virtual]<br/></p>
<p>Notifies listeners that a parameter's value has changed<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that has been updated<br/>in normalizedValue The current parameter value, formatted as a double and normalized to [0 1]<br/></p>
<p>Implemented in AAX_VAutomationDelegate.<br/></p>
<p><b>14.98.3.5 PostTouchRequest()<br/></b></p>
<p>virtual AAX_Result AAX_IAutomationDelegate::PostTouchRequest (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>Requests that the given parameter be &quot;touched&quot;, i.e. locked for updates by the current client<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that will be touched<br/></p>
<p>Implemented in AAX_VAutomationDelegate.<br/></p>
<p>Referenced by AAX_CStatelessParameter::Touch().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>802 Class Documentation<br/></b></p>
<p><b>14.98.3.6 PostReleaseRequest()<br/></b></p>
<p>virtual AAX_Result AAX_IAutomationDelegate::PostReleaseRequest (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>Requests that the given parameter be &quot;released&quot;, i.e. available for updates from any client<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that will be released<br/></p>
<p>Implemented in AAX_VAutomationDelegate.<br/></p>
<p>Referenced by AAX_CStatelessParameter::Release().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.98.3.7 GetTouchState()<br/></b></p>
<p>virtual AAX_Result AAX_IAutomationDelegate::GetTouchState (<br/>AAX_CParamID iParameterID,<br/>AAX_CBoolean &#8727; oTouched ) [pure virtual]<br/></p>
<p>Gets the current touched state of a parameter<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that is being queried<br/>out oTouched The current touch state of the parameter<br/></p>
<p>Implemented in AAX_VAutomationDelegate.<br/></p>
<p><b>14.98.3.8 ParameterNameChanged()<br/></b></p>
<p>virtual AAX_Result AAX_IAutomationDelegate::ParameterNameChanged (<br/>AAX_CParamID iParameterID ) [pure virtual]<br/></p>
<p>Notify listeners that the parameter's display name has changed<br/></p>
<p>Note that this is not part of the underlying automation delegate interface with the host; it is converted on the AAX<br/>side to a notification posted to the host via the AAX_IController .<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that has been updated<br/></p>
<p>Implemented in AAX_VAutomationDelegate.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.99 AAX_ICollection Class Reference 803<br/></b></p>
<p>Referenced by AAX_CStatelessParameter::SetName().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IAutomationDelegate.h<br/></p>
<p><b>14.99 AAX_ICollection Class Reference<br/></b></p>
<p>#include &lt;AAX_ICollection.h&gt;<br/></p>
<p>Inheritance diagram for AAX_ICollection:<br/></p>
<p><b>14.99.1 Description<br/></b></p>
<p>Interface to represent a plug-in binary's static description.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>The AAX_ICollection interface provides a creation function for new plug-in descriptors, which in turn provides access<br/>to the various interfaces necessary for describing a plug-in. When a plug-in description is complete, it is added to<br/>the collection via the AddEffect method. The AAX_ICollection interface also provides some additional description<br/>methods that are used to describe the overall plug-in package. These methods can be used to describe the plug-in<br/>package's name, the name of the plug-in's manufacturer, and the plug-in package version.<br/></p>
<p><b>Legacy Porting Notes </b>The information in AAX_ICollection is roughly analogous to the information provided by<br/>CProcessGroup in the legacy plug-in library<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;AAX_ICollection ()<br/>&#8226; virtual AAX_IEffectDescriptor &#8727; NewDescriptor ()=0<br/></p>
<p>Create a new Effect descriptor.<br/>&#8226; virtual AAX_Result AddEffect (const char &#8727;inEffectID, AAX_IEffectDescriptor &#8727;inEffectDescriptor)=0<br/></p>
<p>Add an Effect description to the collection.<br/>&#8226; virtual AAX_Result SetManufacturerName (const char &#8727;inPackageName)=0<br/></p>
<p>Set the plug-in manufacturer name.<br/>&#8226; virtual AAX_Result AddPackageName (const char &#8727;inPackageName)=0<br/></p>
<p>Set the plug-in package name.<br/>&#8226; virtual AAX_Result SetPackageVersion (uint32_t inVersion)=0<br/></p>
<p>Set the plug-in package version number.<br/>&#8226; virtual AAX_IPropertyMap &#8727; NewPropertyMap ()=0<br/></p>
<p>Create a new property map.<br/>&#8226; virtual AAX_Result SetProperties (AAX_IPropertyMap &#8727;inProperties)=0<br/></p>
<p>Set the properties of the collection.<br/>&#8226; virtual AAX_Result GetHostVersion (uint32_t &#8727;outVersion) const =0<br/></p>
<p>Get the current version of the host.<br/>&#8226; virtual AAX_IDescriptionHost &#8727; DescriptionHost ()=0<br/>&#8226; virtual const AAX_IDescriptionHost &#8727; DescriptionHost () const =0<br/>&#8226; virtual IACFDefinition &#8727; HostDefinition () const =0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>804 Class Documentation<br/></b></p>
<p><b>14.99.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.99.2.1 </b>&#8764;<b>AAX_ICollection()<br/></b></p>
<p>virtual AAX_ICollection::&#8764;AAX_ICollection ( ) [inline], [virtual]<br/></p>
<p><b>14.99.3 Member Function Documentation<br/></b></p>
<p><b>14.99.3.1 NewDescriptor()<br/></b></p>
<p>virtual AAX_IEffectDescriptor&#8727; AAX_ICollection::NewDescriptor ( ) [pure virtual]<br/></p>
<p>Create a new Effect descriptor.<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p><b>14.99.3.2 AddEffect()<br/></b></p>
<p>virtual AAX_Result AAX_ICollection::AddEffect (<br/>const char &#8727; inEffectID,<br/>AAX_IEffectDescriptor &#8727; inEffectDescriptor ) [pure virtual]<br/></p>
<p>Add an Effect description to the collection.<br/></p>
<p>Each Effect that a plug-in registers with AAX_ICollection::AddEffect() is considered a completely different user-<br/>facing product. For example, in Avid's Dynamics III plug-in the Expander, Compressor, and DeEsser are each<br/>registered as separate Effects. All stem format variations within each Effect are registered within that Effect's<br/>AAX_IEffectDescriptor using AddComponent().<br/></p>
<p>The AAX_eProperty_ProductID value for all ProcessProcs within a single Effect must be identical.<br/></p>
<p>This method passes ownership of an AAX_IEffectDescriptor object to the AAX_ICollection. The AAX_IEffectDescriptor<br/>must not be deleted by the AAX plug-in, nor should it be edited in any way after it is passed to the AAX_ICollection.<br/></p>
<p><b>Parameters<br/></b>in inEffectID The effect ID.<br/>in inEffectDescriptor The Effect descriptor.<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.99 AAX_ICollection Class Reference 805<br/></b></p>
<p><b>14.99.3.3 SetManufacturerName()<br/></b></p>
<p>virtual AAX_Result AAX_ICollection::SetManufacturerName (<br/>const char &#8727; inPackageName ) [pure virtual]<br/></p>
<p>Set the plug-in manufacturer name.<br/></p>
<p><b>Parameters<br/></b>in inPackageName The name of the manufacturer.<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p><b>14.99.3.4 AddPackageName()<br/></b></p>
<p>virtual AAX_Result AAX_ICollection::AddPackageName (<br/>const char &#8727; inPackageName ) [pure virtual]<br/></p>
<p>Set the plug-in package name.<br/></p>
<p>May be called multiple times to add abbreviated package names.<br/></p>
<p><b>Note<br/></b>Every plug-in must include at least one name variant with 16 or fewer characters, plus a null terminating<br/>character. Used for Presets folder.<br/></p>
<p><b>Parameters<br/></b>in inPackageName The name of the package.<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p><b>14.99.3.5 SetPackageVersion()<br/></b></p>
<p>virtual AAX_Result AAX_ICollection::SetPackageVersion (<br/>uint32_t inVersion ) [pure virtual]<br/></p>
<p>Set the plug-in package version number.<br/></p>
<p><b>Parameters<br/></b>in inVersion The package version numner.<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>806 Class Documentation<br/></b></p>
<p><b>14.99.3.6 NewPropertyMap()<br/></b></p>
<p>virtual AAX_IPropertyMap&#8727; AAX_ICollection::NewPropertyMap ( ) [pure virtual]<br/></p>
<p>Create a new property map.<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p><b>14.99.3.7 SetProperties()<br/></b></p>
<p>virtual AAX_Result AAX_ICollection::SetProperties (<br/>AAX_IPropertyMap &#8727; inProperties ) [pure virtual]<br/></p>
<p>Set the properties of the collection.<br/></p>
<p><b>Parameters<br/></b>in inProperties Collection properties<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p><b>14.99.3.8 GetHostVersion()<br/></b></p>
<p>virtual AAX_Result AAX_ICollection::GetHostVersion (<br/>uint32_t &#8727; outVersion ) const [pure virtual]<br/></p>
<p>Get the current version of the host.<br/></p>
<p>See AAXATTR_Client_Version for information about the version data format<br/></p>
<p><b>Warning<br/></b>Do not use this method to infer host feature support. Instead, use AAX_IDescriptionHost to query the host for<br/>specific features.<br/>AAX plugin description details are cached and might not be re-scanned even if the host ver-<br/>sion changes. Be careful to avoid changing any cacheable information based on this data. See<br/>Host feature and environment checks for more information.<br/></p>
<p><b>Parameters<br/></b>in outVersion Host version<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.99 AAX_ICollection Class Reference 807<br/></b></p>
<p><b>14.99.3.9 DescriptionHost() [1/2]<br/></b></p>
<p>virtual AAX_IDescriptionHost&#8727; AAX_ICollection::DescriptionHost ( ) [pure virtual]<br/></p>
<p>Get a pointer to an AAX_IDescriptionHost, if supported by the host<br/></p>
<p>This interface is served by the AAX_ICollection in order to avoid requiring a new method prototype for the<br/>GetEffectDescriptions() method called from the AAX Library.<br/></p>
<p><b>See also<br/></b>AAX_UIDs.h for available feature UIDs, e.g. AAXATTR_ClientFeature_AuxOutputStem<br/></p>
<p><b>Warning<br/></b>AAX plugin description details are cached and might not be re-scanned even if attributes of the host<br/>description change. Be careful to avoid changing any cacheable information based on this data. See<br/>Host feature and environment checks for more information.<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p><b>14.99.3.10 DescriptionHost() [2/2]<br/></b></p>
<p>virtual const AAX_IDescriptionHost&#8727; AAX_ICollection::DescriptionHost ( ) const [pure virtual]<br/></p>
<p>Get a pointer to an AAX_IDescriptionHost, if supported by the host<br/></p>
<p>This interface is served by the AAX_ICollection in order to avoid requiring a new method prototype for the<br/>GetEffectDescriptions() method called from the AAX Library.<br/></p>
<p><b>See also<br/></b>AAX_UIDs.h for available feature UIDs, e.g. AAXATTR_ClientFeature_AuxOutputStem<br/></p>
<p><b>Warning<br/></b>AAX plugin description details are cached and might not be re-scanned even if attributes of the host<br/>description change. Be careful to avoid changing any cacheable information based on this data. See<br/>Host feature and environment checks for more information.<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>808 Class Documentation<br/></b></p>
<p><b>14.99.3.11 HostDefinition()<br/></b></p>
<p>virtual IACFDefinition&#8727; AAX_ICollection::HostDefinition ( ) const [pure virtual]<br/></p>
<p>Get a pointer to an IACFDefinition, if supported by the host<br/></p>
<p>This interface is served by the AAX_ICollection in order to avoid requiring a new method prototype for the<br/>GetEffectDescriptions() method called from the AAX Library.<br/></p>
<p><b>See also<br/></b>AAX_UIDs.h for available host attribute UIDs, e.g. AAXATTR_Client_Level<br/></p>
<p><b>Warning<br/></b>AAX plugin description details are cached and might not be re-scanned even if attributes of the host definition<br/>change, for example the host level. Be careful to avoid changing any cacheable information based on this<br/>data. See Host feature and environment checks for more information.<br/></p>
<p>The implementation of AAX_ICollection owns the referenced object. No AddRef occurs.<br/></p>
<p>IACFDefinition::DefineAttribute() is not supported on this object<br/></p>
<p>Implemented in AAX_VCollection.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_ICollection.h<br/></p>
<p><b>14.100 AAX_IComponentDescriptor Class Reference<br/></b></p>
<p>#include &lt;AAX_IComponentDescriptor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IComponentDescriptor:<br/></p>
<p><b>14.100.1 Description<br/></b></p>
<p>Description interface for an AAX plug-in component.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>This is an abstract interface containing everything needed to describe a single algorithm of an Effect. For more<br/>information about algorithm processing in AAX plug-ins, see Real-time algorithm callback.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.100 AAX_IComponentDescriptor Class Reference 809<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IComponentDescriptor ()<br/>&#8226; virtual AAX_Result Clear ()=0<br/></p>
<p>Clears the descriptor.<br/>&#8226; virtual AAX_Result AddAudioIn (AAX_CFieldIndex inFieldIndex)=0<br/></p>
<p>Subscribes an audio input context field.<br/>&#8226; virtual AAX_Result AddAudioOut (AAX_CFieldIndex inFieldIndex)=0<br/></p>
<p>Subscribes an audio output context field.<br/>&#8226; virtual AAX_Result AddAudioBufferLength (AAX_CFieldIndex inFieldIndex)=0<br/></p>
<p>Subscribes a buffer length context field.<br/>&#8226; virtual AAX_Result AddSampleRate (AAX_CFieldIndex inFieldIndex)=0<br/></p>
<p>Subscribes a sample rate context field.<br/>&#8226; virtual AAX_Result AddClock (AAX_CFieldIndex inFieldIndex)=0<br/></p>
<p>Subscribes a clock context field.<br/>&#8226; virtual AAX_Result AddSideChainIn (AAX_CFieldIndex inFieldIndex)=0<br/></p>
<p>Subscribes a side-chain input context field.<br/>&#8226; virtual AAX_Result AddDataInPort (AAX_CFieldIndex inFieldIndex, uint32_t inPacketSize, AAX_EDataInPortType<br/></p>
<p>inPortType=AAX_eDataInPortType_Buffered)=0<br/>Adds a custom data port to the algorithm context.<br/></p>
<p>&#8226; virtual AAX_Result AddAuxOutputStem (AAX_CFieldIndex inFieldIndex, int32_t inStemFormat, const char<br/>inNameUTF8[ ])=0<br/></p>
<p>Adds an auxiliary output stem for a plug-in.<br/>&#8226; virtual AAX_Result AddPrivateData (AAX_CFieldIndex inFieldIndex, int32_t inDataSize, uint32_t in&#8592;&#8617;<br/></p>
<p>Options=AAX_ePrivateDataOptions_DefaultOptions)=0<br/>Adds a private data port to the algorithm context.<br/></p>
<p>&#8226; virtual AAX_Result AddTemporaryData (AAX_CFieldIndex inFieldIndex, uint32_t inDataElementSize)=0<br/>Adds a block of data to a context that is not saved between callbacks and is scaled by the system buffer size.<br/></p>
<p>&#8226; virtual AAX_Result AddDmaInstance (AAX_CFieldIndex inFieldIndex, AAX_IDma::EMode inDmaMode)=0<br/>Adds a DMA field to the plug-in's context.<br/></p>
<p>&#8226; virtual AAX_Result AddMeters (AAX_CFieldIndex inFieldIndex, const AAX_CTypeID &#8727;inMeterIDs, const<br/>uint32_t inMeterCount)=0<br/></p>
<p>Adds a meter field to the plug-in's context.<br/>&#8226; virtual AAX_Result AddMIDINode (AAX_CFieldIndex inFieldIndex, AAX_EMIDINodeType inNodeType, const<br/></p>
<p>char inNodeName[ ], uint32_t channelMask)=0<br/>Adds a MIDI node field to the plug-in's context.<br/></p>
<p>&#8226; virtual AAX_Result AddReservedField (AAX_CFieldIndex inFieldIndex, uint32_t inFieldType)=0<br/>Subscribes a context field to host-provided services or information.<br/></p>
<p>&#8226; virtual AAX_IPropertyMap &#8727; NewPropertyMap () const =0<br/>Creates a new, empty property map.<br/></p>
<p>&#8226; virtual AAX_IPropertyMap &#8727; DuplicatePropertyMap (AAX_IPropertyMap &#8727;inPropertyMap) const =0<br/>Creates a new property map using an existing property map.<br/></p>
<p>&#8226; virtual AAX_Result AddProcessProc_Native (AAX_CProcessProc inProcessProc, AAX_IPropertyMap<br/>&#8727;inProperties=NULL, AAX_CInstanceInitProc inInstanceInitProc=NULL, AAX_CBackgroundProc in&#8592;&#8617;<br/>BackgroundProc=NULL, AAX_CSelector &#8727;outProcID=NULL)=0<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/>&#8226; virtual AAX_Result AddProcessProc_TI (const char inDLLFileNameUTF8[ ], const char inProcessProc&#8592;&#8617;<br/></p>
<p>Symbol[ ], AAX_IPropertyMap &#8727;inProperties, const char inInstanceInitProcSymbol[ ]=NULL, const char in&#8592;&#8617;<br/>BackgroundProcSymbol[ ]=NULL, AAX_CSelector &#8727;outProcID=NULL)=0<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/>&#8226; virtual AAX_Result AddProcessProc (AAX_IPropertyMap &#8727;inProperties, AAX_CSelector &#8727;outProc&#8592;&#8617;<br/></p>
<p>IDs=NULL, int32_t inProcIDsSize=0)=0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>810 Class Documentation<br/></b></p>
<p>Registers one or more algorithm processing entrypoints (process procedures)<br/>&#8226; template&lt;typename aContextType &gt;<br/></p>
<p>AAX_Result AddProcessProc_Native (void(AAX_CALLBACK &#8727;inProcessProc)(aContextType &#8727;const in&#8592;&#8617;<br/>InstancesBegin[ ], const void &#8727;inInstancesEnd), AAX_IPropertyMap &#8727;inProperties=NULL, int32_&#8592;&#8617;<br/>t(AAX_CALLBACK &#8727;inInstanceInitProc)(const aContextType &#8727;inInstanceContextPtr, AAX_EComponentInstanceInitAction<br/>inAction)=NULL, int32_t(AAX_CALLBACK &#8727;inBackgroundProc)(void)=NULL)<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/></p>
<p><b>14.100.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.100.2.1 </b>&#8764;<b>AAX_IComponentDescriptor()<br/></b></p>
<p>virtual AAX_IComponentDescriptor::&#8764;AAX_IComponentDescriptor ( ) [inline], [virtual]<br/></p>
<p><b>14.100.3 Member Function Documentation<br/></b></p>
<p><b>14.100.3.1 Clear()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::Clear ( ) [pure virtual]<br/></p>
<p>Clears the descriptor.<br/></p>
<p>Clears the descriptor and readies it for the next algorithm description<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p><b>14.100.3.2 AddAudioIn()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddAudioIn (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes an audio input context field.<br/></p>
<p>Defines an audio in port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: float&#8727;&#8727;<br/>&#8226; Data kind: An array of float arrays, one for each input channel<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.100 AAX_IComponentDescriptor Class Reference 811<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.100.3.3 AddAudioOut()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddAudioOut (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes an audio output context field.<br/></p>
<p>Defines an audio out port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: float&#8727;&#8727;<br/>&#8226; Data kind: An array of float arrays, one for each output channel<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.100.3.4 AddAudioBufferLength()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddAudioBufferLength (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes a buffer length context field.<br/></p>
<p>Defines a buffer length port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: int32_t&#8727;<br/>&#8226; Data kind: The number of samples in the current audio buffer<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>812 Class Documentation<br/></b></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.100.3.5 AddSampleRate()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddSampleRate (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes a sample rate context field.<br/></p>
<p>Defines a sample rate port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: AAX_CSampleRate &#8727;<br/>&#8226; Data kind: The current sample rate<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p><b>14.100.3.6 AddClock()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddClock (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes a clock context field.<br/></p>
<p>Defines a clock port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: AAX_CTimestamp &#8727;<br/>&#8226; Data kind: A running counter which increments even when the transport is not playing. The counter incre-<br/></p>
<p>ments exactly once per sample quantum.<br/></p>
<p><b>Host Compatibility Notes </b>As of Pro Tools 11.1, this field may be used in both Native and DSP plug-ins. The<br/>DSP clock data is a 16-bit cycling counter. This field was only available for Native<br/>plug-ins in previous Pro Tools versions.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.100 AAX_IComponentDescriptor Class Reference 813<br/></b></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.100.3.7 AddSideChainIn()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddSideChainIn (<br/>AAX_CFieldIndex inFieldIndex ) [pure virtual]<br/></p>
<p>Subscribes a side-chain input context field.<br/></p>
<p>Defines a side-chain input port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: int32_t&#8727;<br/>&#8226; Data kind: The index of the plug-in's first side-chain input channel within the array of input audio buffers<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p><b>14.100.3.8 AddDataInPort()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddDataInPort (<br/>AAX_CFieldIndex inFieldIndex,<br/>uint32_t inPacketSize,<br/>AAX_EDataInPortType inPortType = AAX_eDataInPortType_Buffered ) [pure virtual]<br/></p>
<p>Adds a custom data port to the algorithm context.<br/></p>
<p>Defines a read-only data port for plug-in information in the algorithm's context structure. The plug-in can send<br/>information to this port using AAX_IController::PostPacket().<br/></p>
<p>The host guarantees that all packets will be delivered to this port in the order in which they were posted, up to the<br/>point of a packet buffer overflow, though some packets may be dropped depending on the inPortType and host<br/>implementation.<br/></p>
<p><b>Note<br/></b>When a plug-in is operating in offline (AudioSuite) mode, all data ports operate as AAX_eDataInPortType_Unbuffered<br/>ports<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the port, generated using AAX_FIELD_INDEX<br/>in inPacketSize Size of the data packets that will be sent to this port<br/>in inPortType The requested packet delivery behavior for this port<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>814 Class Documentation<br/></b></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.100.3.9 AddAuxOutputStem()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddAuxOutputStem (<br/>AAX_CFieldIndex inFieldIndex,<br/>int32_t inStemFormat,<br/>const char inNameUTF8[] ) [pure virtual]<br/></p>
<p>Adds an auxiliary output stem for a plug-in.<br/></p>
<p>Use this method to add additional output channels to the algorithm context.<br/></p>
<p>The aux output stem audio buffers will be added to the end of the audio outputs array in the order in which they are<br/>described. When writing audio data to a specific aux output, find the proper starting channel by accumulating all of<br/>the channels of the main output stem format and any previously-described aux output stems.<br/></p>
<p>The plug-in is responsible for providing a meaningful name for each aux outputs. At the very least, individual outputs<br/>should be labeled &quot;Output xx&quot;, where &quot;xx&quot; is the aux output number as it is defined in the plug-in. The output name<br/>should also include the words &quot;mono&quot; and &quot;stereo&quot; to support when users are looking for an output with a specific<br/>stem format.<br/></p>
<p><b>Host Compatibility Notes </b>There is a hard limit to the number of outputs that Pro Tools supports for a single plug-in<br/>instance. This limit is currently set at 256 channels, which includes all of the plug-in's<br/>output channels in addition to the sum total of all of its aux output stem channels.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools supports only mono and stereo auxiliary output stem formats<br/></p>
<p><b>Warning<br/></b>This method will return an error code on hosts which do not support auxiliary output stems. This indicates that<br/>the host will not provide audio buffers for auxiliary output stems during processing. A plug-in must not attempt<br/>to write data into auxiliary output stem buffers which have not been provided by the host!<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex DEPRECATED: This parameter is no longer needed by the host, but is included in the<br/></p>
<p>interface for binary compatibility<br/>in inStemFormat The stem format of the new aux output<br/>in inNameUTF8 The name of the aux output. This name is static and cannot be changed after the<br/></p>
<p>descriptor is submitted to the host<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.100 AAX_IComponentDescriptor Class Reference 815<br/></b></p>
<p><b>14.100.3.10 AddPrivateData()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddPrivateData (<br/>AAX_CFieldIndex inFieldIndex,<br/>int32_t inDataSize,<br/>uint32_t inOptions = AAX_ePrivateDataOptions_DefaultOptions ) [pure virtual]<br/></p>
<p>Adds a private data port to the algorithm context.<br/></p>
<p>Defines a read/write data port for private state data. Data written to this port will be maintained by the host between<br/>calls to the algorithm context.<br/></p>
<p><b>See also<br/></b>alg_pd_registration<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the port, generated using AAX_FIELD_INDEX<br/>in inDataSize Size of the data packets that will be sent to this port<br/>in inOptions Options that define the private data port's behavior<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.100.3.11 AddTemporaryData()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddTemporaryData (<br/>AAX_CFieldIndex inFieldIndex,<br/>uint32_t inDataElementSize ) [pure virtual]<br/></p>
<p>Adds a block of data to a context that is not saved between callbacks and is scaled by the system buffer size.<br/></p>
<p>This can be very useful if you use block processing and need to store intermediate results. Just specify your base<br/>element size and the system will scale the overall block size by the buffer size. For example, to create a buffer of<br/>floats that is the length of the block, specify 4 bytes as the elementsize.<br/></p>
<p>This data block does not retain state across callback and can also be reused across instances on memory contrained<br/>systems.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the port, generated using AAX_FIELD_INDEX<br/>in inDataElementSize The size of a single piece of data in the block. This number will be multipied by<br/></p>
<p>the processing block size to determine total block size.<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>816 Class Documentation<br/></b></p>
<p><b>14.100.3.12 AddDmaInstance()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddDmaInstance (<br/>AAX_CFieldIndex inFieldIndex,<br/>AAX_IDma::EMode inDmaMode ) [pure virtual]<br/></p>
<p>Adds a DMA field to the plug-in's context.<br/></p>
<p>DMA (direct memory access) provides efficient reads from and writes to external memory on the DSP. DMA behavior<br/>is emulated in host-based plug-ins for cross-platform portability.<br/></p>
<p><b>Note<br/></b>The order in which DMA instances are added defines their priority and therefore order of execution of DMA<br/>operations. In most plug-ins, Scatter fields should be placed first in order to achieve the lowest possible access<br/>latency.<br/></p>
<p>For more information, see Direct Memory Access .<br/></p>
<p><b>Todo </b>Update the DMA system management such that operation priority can be set arbitrarily<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/>in inDmaMode AAX_IDma::EMode that will apply to this field<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p><b>14.100.3.13 AddMeters()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddMeters (<br/>AAX_CFieldIndex inFieldIndex,<br/>const AAX_CTypeID &#8727; inMeterIDs,<br/>const uint32_t inMeterCount ) [pure virtual]<br/></p>
<p>Adds a meter field to the plug-in's context.<br/></p>
<p>Meter fields include an array of meter tap values, with one tap per meter per context. Only one meter field should<br/>be added per Component. Individual meter behaviors can be described at the Effect level.<br/></p>
<p>For more information, see Plug-in meters .<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/>in inMeterIDs Array of 32-bit IDs, one for each meter. Meter IDs must be unique within the Effect.<br/>in inMeterCount The number of meters included in this field<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.100 AAX_IComponentDescriptor Class Reference 817<br/></b></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.100.3.14 AddMIDINode()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddMIDINode (<br/>AAX_CFieldIndex inFieldIndex,<br/>AAX_EMIDINodeType inNodeType,<br/>const char inNodeName[],<br/>uint32_t channelMask ) [pure virtual]<br/></p>
<p>Adds a MIDI node field to the plug-in's context.<br/></p>
<p>&#8226; Data type: AAX_IMIDINode &#8727;<br/></p>
<p>The resulting MIDI node data will be available both in the algorithm context and in the plug-in's data model via<br/>UpdateMIDINodes().<br/></p>
<p>To add a MIDI node that is only accessible to the plug-in's data model, use AAX_IEffectDescriptor::AddControlMIDINode()<br/></p>
<p><b>Host Compatibility Notes </b>Due to current restrictions MIDI data won't be delivered to DSP algorithms, only to AAX<br/>Native.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex The ID of the port. MIDI node ports should formatted as a pointer to an<br/></p>
<p>AAX_IMIDINode.<br/>in inNodeType The type of MIDI node, as AAX_EMIDINodeType<br/>in inNodeName The name of the MIDI node as it should appear in the host's UI<br/>in channelMask The channel mask for the MIDI node. This parameter specifies used MIDI channels.<br/></p>
<p>For Global MIDI nodes, use a mask of AAX_EMidiGlobalNodeSelectors<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/>Here is the caller graph for this function:<br/></p>
<p><b>14.100.3.15 AddReservedField()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddReservedField (<br/>AAX_CFieldIndex inFieldIndex,<br/>uint32_t inFieldType ) [pure virtual]<br/></p>
<p>Subscribes a context field to host-provided services or information.<br/></p>
<p><b>Note<br/></b>Currently for internal use only.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>818 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/>in inFieldType Type of field that is being added<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p><b>14.100.3.16 NewPropertyMap()<br/></b></p>
<p>virtual AAX_IPropertyMap&#8727; AAX_IComponentDescriptor::NewPropertyMap ( ) const [pure virtual]<br/></p>
<p>Creates a new, empty property map.<br/></p>
<p>The component descriptor owns the reference to the resulting property map, and the underlying property map is<br/>destroyed when the component descriptor is released.<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.100.3.17 DuplicatePropertyMap()<br/></b></p>
<p>virtual AAX_IPropertyMap&#8727; AAX_IComponentDescriptor::DuplicatePropertyMap (<br/>AAX_IPropertyMap &#8727; inPropertyMap ) const [pure virtual]<br/></p>
<p>Creates a new property map using an existing property map.<br/></p>
<p>The component descriptor owns the reference to the resulting property map, and the underlying property map is<br/>destroyed when the component descriptor is released.<br/></p>
<p><b>Parameters<br/></b>in inPropertyMap The property values in this map will be copied into the new map<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p><b>14.100.3.18 AddProcessProc_Native() [1/2]<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddProcessProc_Native (<br/>AAX_CProcessProc inProcessProc,<br/>AAX_IPropertyMap &#8727; inProperties = NULL,<br/>AAX_CInstanceInitProc inInstanceInitProc = NULL,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.100 AAX_IComponentDescriptor Class Reference 819<br/></b></p>
<p>AAX_CBackgroundProc inBackgroundProc = NULL,<br/>AAX_CSelector &#8727; outProcID = NULL ) [pure virtual]<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>820 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inProcessProc Symbol for this processing callback<br/>in inProperties A property map for this processing callback. The property map's values are<br/></p>
<p>copied by the host and associated with the new ProcessProc. The property map<br/>contents are unchanged and the map may be re-used when registering<br/>additional ProcessProcs.<br/></p>
<p>in inInstanceInitProc Initialization routine that will be called when a new instance of the Effect is<br/>created. See Algorithm initialization.<br/></p>
<p>in inBackgroundProc Background routine that will be called in an idle context within the same address<br/>space as the associated process procedure. See<br/>Background processing callback<br/></p>
<p>out outProcID<br/></p>
<p><b>Todo </b>document this parameter<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p>Referenced by AddProcessProc_Native(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.100.3.19 AddProcessProc_TI()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddProcessProc_TI (<br/>const char inDLLFileNameUTF8[],<br/>const char inProcessProcSymbol[],<br/>AAX_IPropertyMap &#8727; inProperties,<br/>const char inInstanceInitProcSymbol[] = NULL,<br/>const char inBackgroundProcSymbol[] = NULL,<br/>AAX_CSelector &#8727; outProcID = NULL ) [pure virtual]<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/></p>
<p><b>Parameters<br/></b>in inDLLFileNameUTF8 UTF-8 encoded filename for the ELF DLL containing the algorithm code<br/></p>
<p>fragment<br/>in inProcessProcSymbol Symbol for this processing callback<br/>in inProperties A property map for this processing callback. The property map's values<br/></p>
<p>are copied by the host and associated with the new ProcessProc. The<br/>property map contents are unchanged and the map may be re-used<br/>when registering additional ProcessProcs.<br/></p>
<p>in inInstanceInitProcSymbol Initialization routine that will be called when a new instance of the Effect<br/>is created. Must be included in the same DLL as the main algorithm<br/>entrypoint. See Algorithm initialization.<br/></p>
<p>in inBackgroundProcSymbol Background routine that will be called in an idle context within the same<br/>address space as the associated process procedure. Must be included in<br/>the same DLL as the main algorithm entrypoint. See<br/>Background processing callback<br/></p>
<p>out outProcID<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.100 AAX_IComponentDescriptor Class Reference 821<br/></b></p>
<p><b>Todo </b>document this parameter<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p><b>14.100.3.20 AddProcessProc()<br/></b></p>
<p>virtual AAX_Result AAX_IComponentDescriptor::AddProcessProc (<br/>AAX_IPropertyMap &#8727; inProperties,<br/>AAX_CSelector &#8727; outProcIDs = NULL,<br/>int32_t inProcIDsSize = 0 ) [pure virtual]<br/></p>
<p>Registers one or more algorithm processing entrypoints (process procedures)<br/></p>
<p>Any non-overlapping set of processing entrypoints may be specified. Typically this can be used to specify both<br/>Native and TI entrypoints using the same call.<br/></p>
<p>The AAX Library implementation of this method includes backwards compatibility logic to complete the Process&#8592;&#8617;<br/>Proc registration on hosts which do not support this method. Therefore plug-in code may use this single registration<br/>routine instead of separate calls to AddProcessProc_Native(), AddProcessProc_TI(), etc. regardless of the host<br/>version.<br/></p>
<p>The following properties replace the input arguments to the platform-specific registration methods:<br/></p>
<p>AddProcessProc_Native() (AAX_eProperty_PlugInID_Native, AAX_eProperty_PlugInID_AudioSuite)<br/></p>
<p>&#8226; AAX_CProcessProc iProcessProc: AAX_eProperty_NativeProcessProc (required)<br/></p>
<p>&#8226; AAX_CInstanceInitProc iInstanceInitProc: AAX_eProperty_NativeInstanceInitProc (optional)<br/></p>
<p>&#8226; AAX_CBackgroundProc iBackgroundProc: AAX_eProperty_NativeBackgroundProc (optional)<br/></p>
<p>AddProcessProc_TI() (AAX_eProperty_PlugInID_TI)<br/></p>
<p>&#8226; const char inDLLFileNameUTF8[]: AAX_eProperty_TIDLLFileName (required)<br/></p>
<p>&#8226; const char iProcessProcSymbol[]: AAX_eProperty_TIProcessProc (required)<br/></p>
<p>&#8226; const char iInstanceInitProcSymbol[]: AAX_eProperty_TIInstanceInitProc (optional)<br/></p>
<p>&#8226; const char iBackgroundProcSymbol[]: AAX_eProperty_TIBackgroundProc (optional)<br/></p>
<p>If any platform-specific plug-in ID property is present in iProperties then AddProcessProc() will check for the<br/>required properties for that platform.<br/></p>
<p><b>Note<br/></b>AAX_eProperty_AudioBufferLength will be ignored for the Native and AudioSuite ProcessProcs since it should<br/>only be used for AAX DSP.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>822 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inProperties A property map for this processing callback. The property map's values are copied by<br/></p>
<p>the host and associated with the new ProcessProc. The property map contents are<br/>unchanged and the map may be re-used when registering additional ProcessProcs.<br/></p>
<p>out outProcIDs<br/></p>
<p><b>Todo </b>document this parameter Returned array will be NULL-terminated<br/></p>
<p><b>Parameters<br/></b>in inProcIDsSize The size of the array provided to oProcIDs. If oProcIDs is non-NULL but<br/></p>
<p>iProcIDsSize is not large enough for all of the registered ProcessProcs (plus one<br/>for NULL termination) then this method will fail with<br/>AAX_ERROR_ARGUMENT_BUFFER_OVERFLOW<br/></p>
<p>Implemented in AAX_VComponentDescriptor.<br/></p>
<p><b>14.100.3.21 AddProcessProc_Native() [2/2]<br/></b></p>
<p>template&lt;typename aContextType &gt;<br/>AAX_Result AAX_IComponentDescriptor::AddProcessProc_Native (<br/></p>
<p>void(AAX_CALLBACK &#8727;inProcessProc)(aContextType &#8727;const inInstancesBegin[], const<br/>void &#8727;inInstancesEnd) ,<br/></p>
<p>AAX_IPropertyMap &#8727; inProperties = NULL,<br/>int32_t(AAX_CALLBACK &#8727;inInstanceInitProc)(const aContextType &#8727;inInstanceContext&#8592;&#8617;<br/></p>
<p>Ptr, AAX_EComponentInstanceInitAction inAction) = NULL,<br/>int32_t(AAX_CALLBACK &#8727;inBackgroundProc)(void) = NULL ) [inline]<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/></p>
<p>This template provides an AAX_CALLBACK based interface to the AddProcessProc_Native method.<br/></p>
<p><b>See also<br/></b>AAX_IComponentDescriptor::AddProcessProc_Native(AAX_CProcessProc,AAX_IPropertyMap&#8727;,AAX_CInstanceInitProc,AAX_CBackgroundProc,AAX_CSelector&#8727;)<br/></p>
<p><b>Parameters<br/></b>in inProperties A property map for this processing callback. The property map's values are copied by<br/></p>
<p>the host and associated with the new ProcessProc. The property map contents are<br/>unchanged and the map may be re-used when registering additional ProcessProcs.<br/></p>
<p>References AddProcessProc_Native().<br/>Here is the call graph for this function:<br/>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IComponentDescriptor.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.101 AAX_IContainer Class Reference 823<br/></b></p>
<p><b>14.101 AAX_IContainer Class Reference<br/></b></p>
<p>#include &lt;AAX_IContainer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IContainer:<br/></p>
<p><b>14.101.1 Description<br/></b></p>
<p>Abstract container interface<br/></p>
<p><b>Public Types<br/></b></p>
<p>&#8226; enum EStatus {<br/>eStatus_Success = 0 ,<br/>eStatus_Overflow = 1 ,<br/>eStatus_NotInitialized = 2 ,<br/>eStatus_Unavailable = 3 ,<br/>eStatus_Unsupported = 4 }<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IContainer ()<br/>&#8226; virtual void Clear ()=0<br/></p>
<p><b>14.101.2 Member Enumeration Documentation<br/></b></p>
<p><b>14.101.2.1 EStatus<br/></b></p>
<p>enum AAX_IContainer::EStatus<br/></p>
<p><b>Enumerator<br/></b>eStatus_Success Operation succeeded.<br/>eStatus_Overflow Internal buffer overflow.<br/></p>
<p>eStatus_NotInitialized Uninitialized container.<br/>eStatus_Unavailable An internal resource was not available.<br/></p>
<p>eStatus_Unsupported Operation is unsupported.<br/></p>
<p><b>14.101.3 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>824 Class Documentation<br/></b></p>
<p><b>14.101.3.1 </b>&#8764;<b>AAX_IContainer()<br/></b></p>
<p>virtual AAX_IContainer::&#8764;AAX_IContainer ( ) [inline], [virtual]<br/></p>
<p><b>14.101.4 Member Function Documentation<br/></b></p>
<p><b>14.101.4.1 Clear()<br/></b></p>
<p>virtual void AAX_IContainer::Clear ( ) [pure virtual]<br/></p>
<p>Clear the container<br/></p>
<p>Implemented in AAX_IPointerQueue&lt; T &gt;, AAX_CAtomicQueue&lt; T, S &gt;, AAX_CAtomicQueue&lt; TNumberedParamStateList, 256 &gt;,<br/>and AAX_CAtomicQueue&lt; const TParamValPair, 16 &#8727;kSynchronizedParameterQueueSize &gt;.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IContainer.h<br/></p>
<p><b>14.102 AAX_IController Class Reference<br/></b></p>
<p>#include &lt;AAX_IController.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IController:<br/></p>
<p><b>14.102.1 Description<br/></b></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the AAX host and by effect<br/>components.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.102 AAX_IController Class Reference 825<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IController (void)<br/></p>
<p><b>Host information getters<br/></b>Call these methods to retrieve environment and run-time information from the AAX host.<br/></p>
<p>&#8226; virtual AAX_Result GetEffectID (AAX_IString &#8727;outEffectID) const =0<br/>&#8226; virtual AAX_Result GetSampleRate (AAX_CSampleRate &#8727;outSampleRate) const =0<br/></p>
<p>CALL: Returns the current literal sample rate.<br/>&#8226; virtual AAX_Result GetInputStemFormat (AAX_EStemFormat &#8727;outStemFormat) const =0<br/></p>
<p>CALL: Returns the plug-in's input stem format.<br/>&#8226; virtual AAX_Result GetOutputStemFormat (AAX_EStemFormat &#8727;outStemFormat) const =0<br/></p>
<p>CALL: Returns the plug-in's output stem format.<br/>&#8226; virtual AAX_Result GetSignalLatency (int32_t &#8727;outSamples) const =0<br/></p>
<p>CALL: Returns the most recent signal (algorithmic) latency that has been published by the plug-in.<br/>&#8226; virtual AAX_Result GetCycleCount (AAX_EProperty inWhichCycleCount, AAX_CPropertyValue &#8727;out&#8592;&#8617;<br/></p>
<p>NumCycles) const =0<br/>CALL: returns the plug-in's current real-time DSP cycle count.<br/></p>
<p>&#8226; virtual AAX_Result GetTODLocation (AAX_CTimeOfDay &#8727;outTODLocation) const =0<br/>CALL: Returns the current Time Of Day (TOD) of the system.<br/></p>
<p><b>Host information setters<br/></b>Call these methods to set dynamic plug-in run-time information on the AAX host.<br/></p>
<p>&#8226; virtual AAX_Result SetSignalLatency (int32_t inNumSamples)=0<br/>CALL: Submits a request to change the delay compensation value that the host uses to account for the plug-in's<br/>signal (algorithmic) latency.<br/></p>
<p>&#8226; virtual AAX_Result SetCycleCount (AAX_EProperty &#8727;inWhichCycleCounts, AAX_CPropertyValue &#8727;i&#8592;&#8617;<br/>Values, int32_t numValues)=0<br/></p>
<p>CALL: Indicates a change in the plug-in's real-time DSP cycle count.<br/></p>
<p><b>Posting methods<br/></b>Call these methods to post new plug-in information to the host's data management system.<br/></p>
<p>&#8226; virtual AAX_Result PostPacket (AAX_CFieldIndex inFieldIndex, const void &#8727;inPayloadP, uint32_t in&#8592;&#8617;<br/>PayloadSize)=0<br/></p>
<p>CALL: Posts a data packet to the host for routing between plug-in components.<br/></p>
<p><b>Notification methods<br/></b>Call these methods to send events among plug-in components<br/></p>
<p>&#8226; virtual AAX_Result SendNotification (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData,<br/>uint32_t inNotificationDataSize)=0<br/></p>
<p>CALL: Dispatch a notification.<br/>&#8226; virtual AAX_Result SendNotification (AAX_CTypeID inNotificationType)=0<br/></p>
<p>CALL: Sends an event to the GUI (no payload)<br/></p>
<p><b>Metering methods<br/></b>Methods to access the plug-in's host-managed metering information.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>826 Class Documentation<br/></b></p>
<p><b>See also<br/></b>Plug-in meters<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentMeterValue (AAX_CTypeID inMeterID, float &#8727;outMeterValue) const =0<br/>CALL: Retrieves the current value of a host-managed plug-in meter.<br/></p>
<p>&#8226; virtual AAX_Result GetMeterPeakValue (AAX_CTypeID inMeterID, float &#8727;outMeterPeakValue) const =0<br/>CALL: Retrieves the currently held peak value of a host-managed plug-in meter.<br/></p>
<p>&#8226; virtual AAX_Result ClearMeterPeakValue (AAX_CTypeID inMeterID) const =0<br/>CALL: Clears the peak value from a host-managed plug-in meter.<br/></p>
<p>&#8226; virtual AAX_Result GetMeterCount (uint32_t &#8727;outMeterCount) const =0<br/>CALL: Retrieves the number of host-managed meters registered by a plug-in.<br/></p>
<p>&#8226; virtual AAX_Result GetMeterClipped (AAX_CTypeID inMeterID, AAX_CBoolean &#8727;outClipped) const =0<br/>CALL: Retrieves the clipped flag from a host-managed plug-in meter.<br/></p>
<p>&#8226; virtual AAX_Result ClearMeterClipped (AAX_CTypeID inMeterID) const =0<br/>CALL: Clears the clipped flag from a host-managed plug-in meter.<br/></p>
<p><b>MIDI methods<br/></b>Methods to access the plug-in's host-managed MIDI information.<br/></p>
<p>&#8226; virtual AAX_Result GetNextMIDIPacket (AAX_CFieldIndex &#8727;outPort, AAX_CMidiPacket &#8727;outPacket)=0<br/>CALL: Retrieves MIDI packets for described MIDI nodes.<br/></p>
<p>&#8226; virtual AAX_Result GetHybridSignalLatency (int32_t &#8727;outSamples) const =0<br/>CALL: Returns the latency between the algorithm normal input samples and the inputs returning from the hyrbid<br/>component.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentAutomationTimestamp (AAX_CTransportCounter &#8727;outTimestamp) const =0<br/>CALL: Returns the current automation timestamp if called during the GenerateCoefficients() call AND the genera-<br/>tion of coefficients is being triggered by an automation point instead of immediate changes.<br/></p>
<p>&#8226; virtual AAX_Result GetHostName (AAX_IString &#8727;outHostNameString) const =0<br/>CALL: Returns name of the host application this plug-in instance is being loaded by. This string also typically<br/>includes version information.<br/></p>
<p>&#8226; virtual AAX_Result GetPlugInTargetPlatform (AAX_CTargetPlatform &#8727;outTargetPlatform) const =0<br/>CALL: Returns execution platform type, native or TI.<br/></p>
<p>&#8226; virtual AAX_Result GetIsAudioSuite (AAX_CBoolean &#8727;outIsAudioSuite) const =0<br/>CALL: Returns true for AudioSuite instances.<br/></p>
<p>&#8226; virtual AAX_IPageTable &#8727;CreateTableCopyForEffect (AAX_CPropertyValue inManufacturerID, AAX_CPropertyValue<br/>inProductID, AAX_CPropertyValue inPlugInID, uint32_t inTableType, int32_t inTablePageSize) const =0<br/></p>
<p>Copy the current page table data for a particular plug-in type.<br/>&#8226; virtual AAX_IPageTable &#8727; CreateTableCopyForLayout (const char &#8727;inEffectID, const char &#8727;inLayoutName,<br/></p>
<p>uint32_t inTableType, int32_t inTablePageSize) const =0<br/>Copy the current page table data for a particular plug-in effect and page table layout.<br/></p>
<p>&#8226; virtual AAX_IPageTable &#8727; CreateTableCopyForEffectFromFile (const char &#8727;inPageTableFilePath,<br/>AAX_ETextEncoding inFilePathEncoding, AAX_CPropertyValue inManufacturerID, AAX_CPropertyValue<br/>inProductID, AAX_CPropertyValue inPlugInID, uint32_t inTableType, int32_t inTablePageSize) const =0<br/></p>
<p>Copy the current page table data for a particular plug-in type.<br/>&#8226; virtual AAX_IPageTable &#8727; CreateTableCopyForLayoutFromFile (const char &#8727;inPageTableFilePath,<br/></p>
<p>AAX_ETextEncoding inFilePathEncoding, const char &#8727;inLayoutName, uint32_t inTableType, int32_&#8592;&#8617;<br/>t inTablePageSize) const =0<br/></p>
<p>Copy the current page table data for a particular plug-in effect and page table layout.<br/></p>
<p><b>14.102.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.102.2.1 </b>&#8764;<b>AAX_IController()<br/></b></p>
<p>virtual AAX_IController::&#8764;AAX_IController (<br/>void ) [inline], [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.102 AAX_IController Class Reference 827<br/></b></p>
<p><b>14.102.3 Member Function Documentation<br/></b></p>
<p><b>14.102.3.1 GetEffectID()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetEffectID (<br/>AAX_IString &#8727; outEffectID ) const [pure virtual]<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.2 GetSampleRate()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetSampleRate (<br/>AAX_CSampleRate &#8727; outSampleRate ) const [pure virtual]<br/></p>
<p>CALL: Returns the current literal sample rate.<br/></p>
<p><b>Parameters<br/></b>out outSampleRate The current sample rate<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.3 GetInputStemFormat()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetInputStemFormat (<br/>AAX_EStemFormat &#8727; outStemFormat ) const [pure virtual]<br/></p>
<p>CALL: Returns the plug-in's input stem format.<br/></p>
<p><b>Parameters<br/></b>out outStemFormat The current input stem format<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.4 GetOutputStemFormat()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetOutputStemFormat (<br/>AAX_EStemFormat &#8727; outStemFormat ) const [pure virtual]<br/></p>
<p>CALL: Returns the plug-in's output stem format.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>828 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out outStemFormat The current output stem format<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.5 GetSignalLatency()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetSignalLatency (<br/>int32_t &#8727; outSamples ) const [pure virtual]<br/></p>
<p>CALL: Returns the most recent signal (algorithmic) latency that has been published by the plug-in.<br/></p>
<p>This method provides the most recently published signal latency. The host may not have updated its delay compen-<br/>sation to match this signal latency yet, so plug-ins that dynamically change their latency using SetSignalLatency()<br/>should always wait for an AAX_eNotificationEvent_SignalLatencyChanged notification before updating its algorithm<br/>to incur this latency.<br/></p>
<p><b>See also<br/></b>SetSignalLatency()<br/></p>
<p><b>Parameters<br/></b>out outSamples The number of samples of signal delay published by the plug-in<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.6 GetCycleCount()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetCycleCount (<br/>AAX_EProperty inWhichCycleCount,<br/>AAX_CPropertyValue &#8727; outNumCycles ) const [pure virtual]<br/></p>
<p>CALL: returns the plug-in's current real-time DSP cycle count.<br/></p>
<p>This method provides the number of cycles that the AAX host expects the DSP plug-in to consume. The host uses<br/>this value when allocating DSP resources for the plug-in.<br/></p>
<p><b>Note<br/></b>A plug-in should never apply a DSP algorithm with more demanding resource requirements than<br/>what is currently accounted for by the host. To set a higher cycle count value, a plug-in must call<br/>AAX_IController::SetCycleCount(), then poll AAX_IController::GetCycleCount() until the new value has<br/>been applied. Once the host has recognized the new cycle count value, the plug-in may apply the more<br/>demanding algorithm.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.102 AAX_IController Class Reference 829<br/></b></p>
<p><b>Parameters<br/></b>in inWhichCycleCount Selector for the requested cycle count metric. One<br/></p>
<p>of:<br/></p>
<p>&#8226; AAX_eProperty_TI_SharedCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_InstanceCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_MaxInstancesPerChip<br/></p>
<p>in outNumCycles The current value of the selected cycle count metric<br/></p>
<p><b>Todo </b>PLACEHOLDER - NOT CURRENTLY IMPLEMENTED IN HOST<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.7 GetTODLocation()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetTODLocation (<br/>AAX_CTimeOfDay &#8727; outTODLocation ) const [pure virtual]<br/></p>
<p>CALL: Returns the current Time Of Day (TOD) of the system.<br/></p>
<p>This method provides a plug-in the TOD (in samples) of the current system. TOD is the number of samples that the<br/>playhead has traversed since the beginning of playback.<br/></p>
<p><b>Note<br/></b>The TOD value is the immediate value of the audio engine playhead. This value is incremented within the<br/>audio engine's real-time rendering context; it is not synchronized with non-real-time calls to plug-in interface<br/>methods.<br/></p>
<p><b>Parameters<br/></b>out outTODLocation The current Time Of Day as set by the host<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.8 SetSignalLatency()<br/></b></p>
<p>virtual AAX_Result AAX_IController::SetSignalLatency (<br/>int32_t inNumSamples ) [pure virtual]<br/></p>
<p>CALL: Submits a request to change the delay compensation value that the host uses to account for the plug-in's<br/>signal (algorithmic) latency.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>830 Class Documentation<br/></b></p>
<p>This method is used to request a change in the number of samples that the AAX host expects the plug-in to delay<br/>a signal.<br/></p>
<p>The host is not guaranteed to immediately apply the new latency value. A plug-in should avoid incurring an actual<br/>algorithmic latency that is different than the latency accounted for by the host.<br/></p>
<p>To set a new latency value, a plug-in must call AAX_IController::SetSignalLatency(), then wait for an<br/>AAX_eNotificationEvent_SignalLatencyChanged notification. Once this notification has been received,<br/>AAX_IController::GetSignalLatency() will reflect the updated latency value and the plug-in should immediately<br/>apply any relevant algorithmic changes that alter its latency to this new value.<br/></p>
<p><b>Warning<br/></b>Parameters which affect the latency of a plug-in should not be made available for control through automation.<br/>This will result in audible glitches when delay compensation is adjusted while playing back automation for<br/>these parameters.<br/></p>
<p><b>Parameters<br/></b>in inNumSamples The number of samples of signal delay that the plug-in requests to incur<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.9 SetCycleCount()<br/></b></p>
<p>virtual AAX_Result AAX_IController::SetCycleCount (<br/>AAX_EProperty &#8727; inWhichCycleCounts,<br/>AAX_CPropertyValue &#8727; iValues,<br/>int32_t numValues ) [pure virtual]<br/></p>
<p>CALL: Indicates a change in the plug-in's real-time DSP cycle count.<br/></p>
<p>This method is used to request a change in the number of cycles that the AAX host expects the DSP plug-in to<br/>consume.<br/></p>
<p><b>Note<br/></b>A plug-in should never apply a DSP algorithm with more demanding resource requirements than<br/>what is currently accounted for by the host. To set a higher cycle count value, a plug-in must call<br/>AAX_IController::SetCycleCount(), then poll AAX_IController::GetCycleCount() until the new value has<br/>been applied. Once the host has recognized the new cycle count value, the plug-in may apply the more<br/>demanding algorithm.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.102 AAX_IController Class Reference 831<br/></b></p>
<p><b>Parameters<br/></b>in inWhichCycleCounts Array of selectors indicating the specific cycle count metrics that should be set.<br/></p>
<p>Each selector must be one of:<br/></p>
<p>&#8226; AAX_eProperty_TI_SharedCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_InstanceCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_MaxInstancesPerChip<br/></p>
<p>in iValues An array of values requested, one for each of the selected cycle count metrics.<br/>in numValues The size of iValues<br/></p>
<p><b>Todo </b>PLACEHOLDER - NOT CURRENTLY IMPLEMENTED IN HOST<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.10 PostPacket()<br/></b></p>
<p>virtual AAX_Result AAX_IController::PostPacket (<br/>AAX_CFieldIndex inFieldIndex,<br/>const void &#8727; inPayloadP,<br/>uint32_t inPayloadSize ) [pure virtual]<br/></p>
<p>CALL: Posts a data packet to the host for routing between plug-in components.<br/></p>
<p>The posted packet is identified with a AAX_CFieldIndex packet index value, which is equivalent to the target data<br/>port's identifier. The packet's payload must have the expected size for the given packet index / data port, as defined<br/>when the port is created in Describe. See AAX_IComponentDescriptor::AddDataInPort().<br/></p>
<p><b>Warning<br/></b>Any data structures that will be passed between platforms (for example, sent to a TI DSP in an AAX DSP<br/>plug-in) must be properly data-aligned for compatibility across both platforms. See AAX_ALIGN_FILE_ALG<br/>for more information about guaranteeing cross-platform compatibility of data structures used for algorithm<br/>processing.<br/></p>
<p><b>Note<br/></b>All calls to this method should be made within the scope of AAX_IEffectParameters::GenerateCoefficients().<br/>Calls from outside this method may result in packets not being delivered. See PT-206161<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex The packet's destination port<br/>in inPayloadP A pointer to the packet's payload data<br/>in inPayloadSize The size, in bytes, of the payload data<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>832 Class Documentation<br/></b></p>
<p>Implemented in AAX_VController.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::GenerateCoefficients().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.102.3.11 SendNotification() [1/2]<br/></b></p>
<p>virtual AAX_Result AAX_IController::SendNotification (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [pure virtual]<br/></p>
<p>CALL: Dispatch a notification.<br/></p>
<p>The notification is handled by the host and may be delivered back to other plug-in components such as the GUI or<br/>data model (via AAX_IEffectGUI::NotificationReceived() or AAX_IEffectParameters::NotificationReceived(), respec-<br/>tively) depending on the notification type.<br/></p>
<p>The host may choose to dispatch the posted notification either synchronously or asynchronously.<br/></p>
<p>See the AAX_ENotificationEvent documentation for more information.<br/></p>
<p>This method is supported by AAX V2 Hosts only. Check the return code on the return of this function. If the error is<br/>AAX_ERROR_UNIMPLEMENTED, your plug-in is being loaded into a host that doesn't support this feature.<br/></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification to send<br/>in inNotificationData Block of notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.12 SendNotification() [2/2]<br/></b></p>
<p>virtual AAX_Result AAX_IController::SendNotification (<br/>AAX_CTypeID inNotificationType ) [pure virtual]<br/></p>
<p>CALL: Sends an event to the GUI (no payload)<br/></p>
<p>This version of the notification method is a convenience for notifications which do not take any payload data. Inter-<br/>nally, it simply calls AAX_IController::SendNotification(AAX_CTypeID, const void&#8727;, uint32_t) with a null payload.<br/></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification to send<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.102 AAX_IController Class Reference 833<br/></b></p>
<p><b>14.102.3.13 GetCurrentMeterValue()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetCurrentMeterValue (<br/>AAX_CTypeID inMeterID,<br/>float &#8727; outMeterValue ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the current value of a host-managed plug-in meter.<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being queried<br/>out outMeterValue The queried meter's current value<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.14 GetMeterPeakValue()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetMeterPeakValue (<br/>AAX_CTypeID inMeterID,<br/>float &#8727; outMeterPeakValue ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the currently held peak value of a host-managed plug-in meter.<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being queried<br/>out outMeterPeakValue The queried meter's currently held peak value<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.15 ClearMeterPeakValue()<br/></b></p>
<p>virtual AAX_Result AAX_IController::ClearMeterPeakValue (<br/>AAX_CTypeID inMeterID ) const [pure virtual]<br/></p>
<p>CALL: Clears the peak value from a host-managed plug-in meter.<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being cleared<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>834 Class Documentation<br/></b></p>
<p><b>14.102.3.16 GetMeterCount()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetMeterCount (<br/>uint32_t &#8727; outMeterCount ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the number of host-managed meters registered by a plug-in.<br/></p>
<p>See AAX_IComponentDescriptor::AddMeters().<br/></p>
<p><b>Parameters<br/></b>out outMeterCount The number of registered plug-in meters.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.17 GetMeterClipped()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetMeterClipped (<br/>AAX_CTypeID inMeterID,<br/>AAX_CBoolean &#8727; outClipped ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the clipped flag from a host-managed plug-in meter.<br/></p>
<p>See AAX_IComponentDescriptor::AddMeters().<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being queried.<br/>out outClipped The queried meter's clipped flag.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.18 ClearMeterClipped()<br/></b></p>
<p>virtual AAX_Result AAX_IController::ClearMeterClipped (<br/>AAX_CTypeID inMeterID ) const [pure virtual]<br/></p>
<p>CALL: Clears the clipped flag from a host-managed plug-in meter.<br/></p>
<p>See AAX_IComponentDescriptor::AddMeters().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.102 AAX_IController Class Reference 835<br/></b></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being cleared.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.19 GetNextMIDIPacket()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetNextMIDIPacket (<br/>AAX_CFieldIndex &#8727; outPort,<br/>AAX_CMidiPacket &#8727; outPacket ) [pure virtual]<br/></p>
<p>CALL: Retrieves MIDI packets for described MIDI nodes.<br/></p>
<p><b>Parameters<br/></b>out outPort port ID of the MIDI node that has unhandled packet<br/>out outPacket The MIDI packet<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.20 GetCurrentAutomationTimestamp()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetCurrentAutomationTimestamp (<br/>AAX_CTransportCounter &#8727; outTimestamp ) const [pure virtual]<br/></p>
<p>CALL: Returns the current automation timestamp if called during the GenerateCoefficients() call AND the generation<br/>of coefficients is being triggered by an automation point instead of immediate changes.<br/></p>
<p><b>Note<br/></b>This function will return 0 if called from outside of GenerateCoefficients() or if the GenerateCoefficients()<br/>call was initiated due to a non-automated change. In those cases, you can get your sample offset from the<br/>transport start using GetTODLocation().<br/></p>
<p><b>Parameters<br/></b>out outTimestamp The current coefficient timestamp. Sample count from transport start.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>836 Class Documentation<br/></b></p>
<p><b>14.102.3.21 GetHostName()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetHostName (<br/>AAX_IString &#8727; outHostNameString ) const [pure virtual]<br/></p>
<p>CALL: Returns name of the host application this plug-in instance is being loaded by. This string also typically<br/>includes version information.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools versions from Pro Tools 11.0 to Pro Tools 12.3.1 will return a generic version<br/>string to this call. This issue is resolved beginning in Pro Tools 12.4.<br/></p>
<p><b>Parameters<br/></b>out outHostNameString The name of the current host application.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.22 GetPlugInTargetPlatform()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetPlugInTargetPlatform (<br/>AAX_CTargetPlatform &#8727; outTargetPlatform ) const [pure virtual]<br/></p>
<p>CALL: Returns execution platform type, native or TI.<br/></p>
<p><b>Parameters<br/></b>out outTargetPlatform The type of the current execution platform as one of AAX_ETargetPlatform.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.23 GetIsAudioSuite()<br/></b></p>
<p>virtual AAX_Result AAX_IController::GetIsAudioSuite (<br/>AAX_CBoolean &#8727; outIsAudioSuite ) const [pure virtual]<br/></p>
<p>CALL: Returns true for AudioSuite instances.<br/></p>
<p><b>Parameters<br/></b>out outIsAudioSuite The boolean flag which indicate true for AudioSuite instances.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.102 AAX_IController Class Reference 837<br/></b></p>
<p><b>14.102.3.24 CreateTableCopyForEffect()<br/></b></p>
<p>virtual AAX_IPageTable&#8727; AAX_IController::CreateTableCopyForEffect (<br/>AAX_CPropertyValue inManufacturerID,<br/>AAX_CPropertyValue inProductID,<br/>AAX_CPropertyValue inPlugInID,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize ) const [pure virtual]<br/></p>
<p>Copy the current page table data for a particular plug-in type.<br/></p>
<p>The host may restrict plug-ins to only copying page table data from certain plug-in types, such as plug-ins from the<br/>same manufacturer or plug-in types within the same effect.<br/></p>
<p>See Page Table Guide for more information about page tables.<br/></p>
<p><b>Returns<br/></b>A new page table object to which the requested page table data has been copied. Ownership of this object<br/>passes to the caller.<br/>a null pointer if the requested plug-in type is unknown, if inTableType is unknown or if inTablePage&#8592;&#8617;<br/>Size is not a supported size for the given table type.<br/></p>
<p><b>Parameters<br/></b>in inManufacturerID Manufacturer ID of the desired plug-in type<br/>in inProductID Product ID of the desired plug-in type<br/>in inPlugInID Type ID of the desired plug-in type (AAX_eProperty_PlugInID_Native,<br/></p>
<p>AAX_eProperty_PlugInID_TI)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81', etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.25 CreateTableCopyForLayout()<br/></b></p>
<p>virtual AAX_IPageTable&#8727; AAX_IController::CreateTableCopyForLayout (<br/>const char &#8727; inEffectID,<br/>const char &#8727; inLayoutName,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize ) const [pure virtual]<br/></p>
<p>Copy the current page table data for a particular plug-in effect and page table layout.<br/></p>
<p>The host may restrict plug-ins to only copying page table data from certain effects, such as effects registered within<br/>the current AAX plug-in bundle.<br/></p>
<p>See Page Table Guide for more information about page tables.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>838 Class Documentation<br/></b></p>
<p><b>Returns<br/></b>A new page table object to which the requested page table data has been copied. Ownership of this object<br/>passes to the caller.<br/>a null pointer if the requested effect ID is unknown or if inLayoutName is not a valid layout name for the<br/>page tables registered for the effect.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.102 AAX_IController Class Reference 839<br/></b></p>
<p><b>Parameters<br/></b>in inEffectID Effect ID for the desired effect. See AAX_ICollection::AddEffect()<br/>in inLayoutName Page table layout name (&quot;name&quot; attribute of the PTLayout XML tag)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81', etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.26 CreateTableCopyForEffectFromFile()<br/></b></p>
<p>virtual AAX_IPageTable&#8727; AAX_IController::CreateTableCopyForEffectFromFile (<br/>const char &#8727; inPageTableFilePath,<br/>AAX_ETextEncoding inFilePathEncoding,<br/>AAX_CPropertyValue inManufacturerID,<br/>AAX_CPropertyValue inProductID,<br/>AAX_CPropertyValue inPlugInID,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize ) const [pure virtual]<br/></p>
<p>Copy the current page table data for a particular plug-in type.<br/></p>
<p><b>Returns<br/></b>A new page table object to which the requested page table data has been copied. Ownership of this object<br/>passes to the caller.<br/>a null pointer if the requested plug-in type is unkown, if inTableType is unknown or if inTablePage&#8592;&#8617;<br/>Size is not a supported size for the given table type.<br/></p>
<p><b>Parameters<br/></b>in inPageTableFilePath Path to XML page table file.<br/>in inFilePathEncoding File path text encoding.<br/>in inManufacturerID Manufacturer ID of the desired plug-in type<br/>in inProductID Product ID of the desired plug-in type<br/>in inPlugInID Type ID of the desired plug-in type (AAX_eProperty_PlugInID_Native,<br/></p>
<p>AAX_eProperty_PlugInID_TI)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81',<br/></p>
<p>etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p><b>14.102.3.27 CreateTableCopyForLayoutFromFile()<br/></b></p>
<p>virtual AAX_IPageTable&#8727; AAX_IController::CreateTableCopyForLayoutFromFile (<br/>const char &#8727; inPageTableFilePath,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>840 Class Documentation<br/></b></p>
<p>AAX_ETextEncoding inFilePathEncoding,<br/>const char &#8727; inLayoutName,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize ) const [pure virtual]<br/></p>
<p>Copy the current page table data for a particular plug-in effect and page table layout.<br/></p>
<p><b>Returns<br/></b>A new page table object to which the requested page table data has been copied. Ownership of this object<br/>passes to the caller.<br/>a null pointer if inLayoutName is not a valid layout name for the page tables file.<br/></p>
<p><b>Parameters<br/></b>in inPageTableFilePath Path to XML page table file.<br/>in inFilePathEncoding File path text encoding.<br/>in inLayoutName Page table layout name (&quot;name&quot; attribute of the PTLayout XML tag)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81', etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/></p>
<p>Implemented in AAX_VController.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IController.h<br/></p>
<p><b>14.103 AAX_IDataBuffer Class Reference<br/></b></p>
<p>#include &lt;AAX_IDataBuffer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IDataBuffer:<br/></p>
<p>Collaboration diagram for AAX_IDataBuffer:<br/></p>
<p><b>14.103.1 Description<br/></b></p>
<p>Interface for reference counted data buffers.<br/></p>
<p>This interface is intended to be used for passing arbitrary blocks of data across the binary boundary and allowing<br/>the receiver to take ownership of the allocated memory.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; ACF_DECLARE_STANDARD_UNKNOWN () ACFMETHOD(InternalQueryInterface)(const acfIID &amp;riid<br/>&#8226; AAX_DELETE (AAX_IDataBuffer &amp;operator=(const AAX_IDataBuffer &amp;))<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.104 AAX_IDataBufferWrapper Class Reference 841<br/></b></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; void &#8727;&#8727;ppvObjOut AAX_OVERRIDE<br/></p>
<p><b>14.103.2 Member Function Documentation<br/></b></p>
<p><b>14.103.2.1 ACF_DECLARE_STANDARD_UNKNOWN()<br/></b></p>
<p>AAX_IDataBuffer::ACF_DECLARE_STANDARD_UNKNOWN ( ) const &amp;<br/></p>
<p><b>14.103.2.2 AAX_DELETE()<br/></b></p>
<p>AAX_IDataBuffer::AAX_DELETE (<br/>AAX_IDataBuffer &amp; operator = (const AAX_IDataBuffer &amp;) )<br/></p>
<p><b>14.103.3 Member Data Documentation<br/></b></p>
<p><b>14.103.3.1 AAX_OVERRIDE<br/></b></p>
<p>void&#8727;&#8727; ppvObjOut AAX_IDataBuffer::AAX_OVERRIDE<br/></p>
<p><b>Initial value:<br/></b>{<br/></p>
<p>if (riid == IID_IAAXDataBufferV1)<br/>{<br/></p>
<p>*ppvObjOut = static_cast&lt;IACFUnknown *&gt;(this);<br/>( static_cast&lt;IACFUnknown *&gt;(*ppvObjOut))-&gt;AddRef();<br/>return ACF_OK;<br/></p>
<p>}<br/></p>
<p>return this-&gt;CACFUnknown::InternalQueryInterface(riid, ppvObjOut)<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IDataBuffer.h<br/></p>
<p><b>14.104 AAX_IDataBufferWrapper Class Reference<br/></b></p>
<p>#include &lt;AAX_IDataBufferWrapper.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IDataBufferWrapper:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>842 Class Documentation<br/></b></p>
<p><b>14.104.1 Description<br/></b></p>
<p>Wrapper for an AAX_IDataBuffer.<br/></p>
<p>Like AAX_IController and similar classes, this class provides a non-ACF interface matching an ACF interface, in this<br/>case AAX_IACFDataBuffer .<br/></p>
<p>The implementation of this interface will contain a reference counted pointer to the underlying ACF interface. This<br/>interface may be extended with convenience functions that are not required on the underlying ACF interface.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;AAX_IDataBufferWrapper ()=default<br/>&#8226; virtual AAX_Result Type (AAX_CTypeID &#8727;oType) const =0<br/>&#8226; virtual AAX_Result Size (int32_t &#8727;oSize) const =0<br/>&#8226; virtual AAX_Result Data (void const &#8727;&#8727;oBuffer) const =0<br/></p>
<p><b>14.104.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.104.2.1 </b>&#8764;<b>AAX_IDataBufferWrapper()<br/></b></p>
<p>virtual AAX_IDataBufferWrapper::&#8764;AAX_IDataBufferWrapper ( ) [virtual], [default]<br/></p>
<p><b>14.104.3 Member Function Documentation<br/></b></p>
<p><b>14.104.3.1 Type()<br/></b></p>
<p>virtual AAX_Result AAX_IDataBufferWrapper::Type (<br/>AAX_CTypeID &#8727; oType ) const [pure virtual]<br/></p>
<p>The type of data contained in this buffer<br/></p>
<p>This identifier must be sufficient for a client that knows the type to correctly interpret and use the data.<br/></p>
<p>Implemented in AAX_VDataBufferWrapper.<br/></p>
<p><b>14.104.3.2 Size()<br/></b></p>
<p>virtual AAX_Result AAX_IDataBufferWrapper::Size (<br/>int32_t &#8727; oSize ) const [pure virtual]<br/></p>
<p>The number of bytes of data in this buffer<br/></p>
<p>Implemented in AAX_VDataBufferWrapper.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.105 AAX_IDescriptionHost Class Reference 843<br/></b></p>
<p><b>14.104.3.3 Data()<br/></b></p>
<p>virtual AAX_Result AAX_IDataBufferWrapper::Data (<br/>void const &#8727;&#8727; oBuffer ) const [pure virtual]<br/></p>
<p>The buffer of data<br/></p>
<p>Implemented in AAX_VDataBufferWrapper.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IDataBufferWrapper.h<br/></p>
<p><b>14.105 AAX_IDescriptionHost Class Reference<br/></b></p>
<p>#include &lt;AAX_IDescriptionHost.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IDescriptionHost:<br/></p>
<p><b>14.105.1 Description<br/></b></p>
<p>Interface to host services provided during plug-in description<br/></p>
<p><b>Warning<br/></b>AAX plugin description details are cached and might not be re-scanned even if attributes of the host<br/>description change. Be careful to avoid changing any cacheable information based on this data. See<br/>Host feature and environment checks for more information.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IDescriptionHost ()<br/>&#8226; virtual const AAX_IFeatureInfo &#8727; AcquireFeatureProperties (const AAX_Feature_UID &amp;inFeatureID) const =0<br/></p>
<p><b>14.105.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.105.2.1 </b>&#8764;<b>AAX_IDescriptionHost()<br/></b></p>
<p>virtual AAX_IDescriptionHost::&#8764;AAX_IDescriptionHost ( ) [inline], [virtual]<br/></p>
<p><b>14.105.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>844 Class Documentation<br/></b></p>
<p><b>14.105.3.1 AcquireFeatureProperties()<br/></b></p>
<p>virtual const AAX_IFeatureInfo&#8727; AAX_IDescriptionHost::AcquireFeatureProperties (<br/>const AAX_Feature_UID &amp; inFeatureID ) const [pure virtual]<br/></p>
<p>Get the client's feature object for a given feature ID<br/></p>
<p>Similar to QueryInterface() but uses a feature identifier rather than a true IID<br/></p>
<p>Ownership of the returned object is passed to the caller; the caller is responsible for destroying the object, e.g. by<br/>capturing the returned object in a smart pointer.<br/>// AAX_IDescriptionHost* descHost<br/>std::unique_ptr&lt;const AAX_IFeatureInfo&gt; featureInfoPtr(descHost-&gt;AcquireFeatureProperties(someFeatureUID);<br/></p>
<p><b>Returns<br/></b>An AAX_IFeatureInfo interface with access to the host's feature properties for this feature.<br/>NULL if the desired feature was not found or if an error occurred<br/></p>
<p><b>Note<br/></b>May return an AAX_IFeatureInfo object with limited method support, which would return an error such as<br/>AAX_ERROR_NULL_OBJECT or AAX_ERROR_UNIMPLEMENTED to interface calls.<br/>If no AAX_IFeatureInfo is provided then that may mean that the host is unaware of the feature, or it may mean<br/>that the host is aware of the feature but has not implemented the AAX feature support interface for this feature<br/>yet.<br/></p>
<p><b>Parameters<br/></b>in inFeatureID Identifier of the requested feature<br/></p>
<p>Implemented in AAX_VDescriptionHost.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IDescriptionHost.h<br/></p>
<p><b>14.106 AAX_IDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_IDisplayDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IDisplayDelegate&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_IDisplayDelegate&lt; T &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.106 AAX_IDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 845<br/></b></p>
<p><b>14.106.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_IDisplayDelegate</b>&lt; <b>T </b>&gt;<br/></p>
<p>Classes for parameter value string conversion.<br/></p>
<p>Display delegate interface template<br/></p>
<p>Display delegates are used to convert real parameter values to and from their formatted string representations. All<br/>display delegates implement the AAX_IDisplayDelegate interface, which contains two conversion functions:<br/>virtual bool ValueToString(T value, std::string&amp; valueString) const = 0;<br/>virtual bool StringToValue(const std::string&amp; valueString, T&amp; value) const = 0;<br/></p>
<p><b>14.106.2 Display delegate decorators<br/></b></p>
<p>The AAX SDK utilizes a decorator pattern in order to provide code re-use while accounting for a wide variety of<br/>possible parameter display formats. The SDK includes a number of sample display delegate decorator classes.<br/></p>
<p>Each concrete display delegate decorator implements AAX_IDisplayDelegateDecorator and adheres to the dec-<br/>orator pattern. The decorator pattern allows multiple display behaviors to be composited or wrapped to-<br/>gether at run time. For instance it is possible to implement a dBV (dB Volts) decorator, by wrapping an<br/>AAX_CDecibelDisplayDelegateDecorator with an AAX_CUnitDisplayDelegateDecorator.<br/></p>
<p><b>14.106.2.1 Display delegate decorator implementation<br/></b></p>
<p>By implementing AAX_IDisplayDelegateDecorator, each concrete display delegate decorator class implements the<br/>full AAX_IDisplayDelegate interface. In addition, it retains a pointer to the AAX_IDisplayDelegateDecorator that it<br/>wraps. When the decorator performs a conversion, it calls into its wrapped class so that the wrapped decorator may<br/>apply its own conversion formatting. By repeating this pattern in each decorator, all of the decorator subclasses call<br/>into their &quot;wrapper&quot; in turn, resulting in a final string to which all of the decorators' conversions have been applied in<br/>sequence.<br/></p>
<p>Here is the relevant implementation from AAX_IDisplayDelegateDecorator :<br/>template &lt;typename T&gt;<br/>AAX_IDisplayDelegateDecorator&lt;T&gt;::AAX_IDisplayDelegateDecorator(const AAX_IDisplayDelegate&lt;T&gt;&amp;<br/></p>
<p>displayDelegate) :<br/>AAX_IDisplayDelegate&lt;T&gt;(),<br/>mWrappedDisplayDelegate(displayDelegate.Clone())<br/></p>
<p>{<br/>}<br/>template &lt;typename T&gt;<br/>bool AAX_IDisplayDelegateDecorator&lt;T&gt;::ValueToString(T value, AAX_CString* valueString) const<br/>{<br/></p>
<p>return mWrappedDisplayDelegate-&gt;ValueToString(value, valueString);<br/>}<br/>template &lt;typename T&gt;<br/>bool AAX_IDisplayDelegateDecorator&lt;T&gt;::StringToValue(const AAX_CString&amp; valueString, T* value) const<br/>{<br/></p>
<p>return mWrappedDisplayDelegate-&gt;StringToValue(valueString, value);<br/>}<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>846 Class Documentation<br/></b></p>
<p><b>14.106.2.2 Decibel decorator example<br/></b></p>
<p>Here is a concrete example of how a decibel decorator might be implemented<br/>template &lt;typename T&gt;<br/>bool AAX_CDecibelDisplayDelegateDecorator&lt;T&gt;::ValueToString(T value, AAX_CString* valueString) const<br/>{<br/></p>
<p>if (value &lt;= 0)<br/>{<br/></p>
<p>*valueString = AAX_CString(&quot;--- dB&quot;);<br/>return true;<br/></p>
<p>}<br/></p>
<p>value = 20*log10(value);<br/>bool succeeded = AAX_IDisplayDelegateDecorator&lt;T&gt;::ValueToString(value, valueString);<br/>*valueString += AAX_CString(&quot;dB&quot;);<br/></p>
<p>return succeeded;<br/>}<br/></p>
<p>Notice in this example that the ValueToString() method is called in the parent class, AAX_IDisplayDelegateDecorator.<br/>This results in a call into the wrapped class' implementation of ValueToString(), which converts the decorated value<br/>to a redecorated string, and so forth for additional decorators.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_IDisplayDelegate &#8727; Clone () const =0<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/>&#8226; virtual bool ValueToString (T value, AAX_CString &#8727;valueString) const =0<br/></p>
<p>Converts a real parameter value to a string representation.<br/>&#8226; virtual bool ValueToString (T value, int32_t maxNumChars, AAX_CString &#8727;valueString) const =0<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p>&#8226; virtual bool StringToValue (const AAX_CString &amp;valueString, T &#8727;value) const =0<br/>Converts a string to a real parameter value.<br/></p>
<p><b>14.106.3 Member Function Documentation<br/></b></p>
<p><b>14.106.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual AAX_IDisplayDelegate&#8727; AAX_IDisplayDelegate&lt; T &gt;::Clone ( ) const [pure virtual]<br/></p>
<p>Constructs and returns a copy of the display delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassDisplayDelegate&lt;T&gt;* AAX_CSubclassDisplayDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassDisplayDelegate(*this);<br/>}<br/></p>
<p>Implemented in AAX_IDisplayDelegateDecorator&lt; T &gt;, AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;,<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;, AAX_CStringDisplayDelegate&lt; T &gt;, AAX_CStateDisplayDelegate&lt; T &gt;,<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;, AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;,<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;, and AAX_CBinaryDisplayDelegate&lt; T &gt;.<br/></p>
<p>Referenced by AAX_CParameter&lt; T &gt;::SetDisplayDelegate().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.106 AAX_IDisplayDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 847<br/></b></p>
<p><b>14.106.3.2 ValueToString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual bool AAX_IDisplayDelegate&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>AAX_CString &#8727; valueString ) const [pure virtual]<br/></p>
<p>Converts a real parameter value to a string representation.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implemented in AAX_IDisplayDelegateDecorator&lt; T &gt;, AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;,<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;, AAX_CStringDisplayDelegate&lt; T &gt;, AAX_CStateDisplayDelegate&lt; T &gt;,<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;, AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;,<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;, and AAX_CBinaryDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.106.3.3 ValueToString() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual bool AAX_IDisplayDelegate&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>int32_t maxNumChars,<br/>AAX_CString &#8727; valueString ) const [pure virtual]<br/></p>
<p>Converts a real parameter value to a string representation using a size hint, useful for control surfaces and other<br/>character limited displays.<br/></p>
<p><b>Parameters<br/></b>in value The real parameter value that will be converted<br/>in maxNumChars Size hint for the desired maximum number of characters in the string (not including<br/></p>
<p>null termination)<br/>out valueString A string corresponding to value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implemented in AAX_IDisplayDelegateDecorator&lt; T &gt;, AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>848 Class Documentation<br/></b></p>
<p>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;, AAX_CStringDisplayDelegate&lt; T &gt;, AAX_CStateDisplayDelegate&lt; T &gt;,<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;, AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;,<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;, and AAX_CBinaryDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.106.3.4 StringToValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual bool AAX_IDisplayDelegate&lt; T &gt;::StringToValue (<br/></p>
<p>const AAX_CString &amp; valueString,<br/>T &#8727; value ) const [pure virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implemented in AAX_IDisplayDelegateDecorator&lt; T &gt;, AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;,<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;, AAX_CStringDisplayDelegate&lt; T &gt;, AAX_CStateDisplayDelegate&lt; T &gt;,<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;, AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;,<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;, and AAX_CBinaryDisplayDelegate&lt; T &gt;.<br/>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IDisplayDelegate.h<br/></p>
<p><b>14.107 AAX_IDisplayDelegateBase Class Reference<br/></b>#include &lt;AAX_IDisplayDelegate.h&gt;<br/>Inheritance diagram for AAX_IDisplayDelegateBase:<br/></p>
<p><b>14.107.1 Description<br/></b></p>
<p>Defines the display behavior for a parameter.<br/>This interface represents a delegate class to be used in conjunction with AAX_IParameter. AAX_IParameter dele-<br/>gates all conversion operations between strings and real parameter values to classes that meet this interface. You<br/>can think of AAX_ITaperDelegate subclasses as simple string serialization routines that enable a specific string<br/>conversions for an arbitrary parameter.<br/>For more information about how parameter delegates operate, see the AAX_ITaperDelegate and Parameter Manager<br/>documentation.<br/><b>Note<br/></b></p>
<p>This class is not part of the AAX ABI and must not be passed between the plug-in and the host.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.108 AAX_IDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template Reference 849<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IDisplayDelegateBase ()<br/>Virtual destructor.<br/></p>
<p><b>14.107.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.107.2.1 </b>&#8764;<b>AAX_IDisplayDelegateBase()<br/></b></p>
<p>virtual AAX_IDisplayDelegateBase::&#8764;AAX_IDisplayDelegateBase ( ) [inline], [virtual]<br/></p>
<p>Virtual destructor.<br/></p>
<p><b>Note<br/></b>This destructor MUST be virtual to prevent memory leaks.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IDisplayDelegate.h<br/></p>
<p><b>14.108 AAX_IDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_IDisplayDelegateDecorator.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IDisplayDelegateDecorator&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_IDisplayDelegateDecorator&lt; T &gt;:<br/></p>
<p><b>14.108.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_IDisplayDelegateDecorator</b>&lt; <b>T </b>&gt;<br/></p>
<p>The base class for all concrete display delegate decorators.<br/></p>
<p>The AAX parameter display strategy uses a decorator pattern for parameter value formatting. This approach allows<br/>developers to maximize code re-use across display delegates with many different kinds of varying formatting, all<br/>without creating interdependencies between the different display delegates themselves.<br/></p>
<p>For more information, see Display delegate decorators. For even more information, about the Decorator design<br/>pattern, please consult the GOF design patterns book.<br/></p>
<p><b>Note<br/></b>This class is not part of the AAX ABI and must not be passed between the plug-in and the host.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>850 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_IDisplayDelegateDecorator (const AAX_IDisplayDelegate&lt; T &gt; &amp;displayDelegate)<br/>Constructor.<br/></p>
<p>&#8226; AAX_IDisplayDelegateDecorator (const AAX_IDisplayDelegateDecorator &amp;other)<br/>Copy constructor.<br/></p>
<p>&#8226; &#8764;AAX_IDisplayDelegateDecorator () AAX_OVERRIDE<br/>Virtual destructor.<br/></p>
<p>&#8226; AAX_IDisplayDelegateDecorator&lt; T &gt; &#8727; Clone () const AAX_OVERRIDE<br/>Constructs and returns a copy of the display delegate decorator.<br/></p>
<p>&#8226; bool ValueToString (T value, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/>Converts a string to a real parameter value.<br/></p>
<p>&#8226; bool ValueToString (T value, int32_t maxNumChars, AAX_CString &#8727;valueString) const AAX_OVERRIDE<br/>Converts a string to a real parameter value with a size constraint.<br/></p>
<p>&#8226; bool StringToValue (const AAX_CString &amp;valueString, T &#8727;value) const AAX_OVERRIDE<br/>Converts a string to a real parameter value.<br/></p>
<p><b>14.108.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.108.2.1 AAX_IDisplayDelegateDecorator() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_IDisplayDelegateDecorator&lt; T &gt;::AAX_IDisplayDelegateDecorator (<br/></p>
<p>const AAX_IDisplayDelegate&lt; T &gt; &amp; displayDelegate )<br/></p>
<p>Constructor.<br/></p>
<p>This class implements the decorator pattern, which is a sort of wrapper. The object that is being wrapped is passed<br/>into this constructor. This object is passed by reference because it must be copied to prevent any potential memory<br/>ambigities.<br/></p>
<p>This constructor sets the local mWrappedDisplayDelegate member to a clone of the provided AAX_IDisplayDelegate.<br/></p>
<p><b>Parameters<br/></b>in displayDelegate The decorated display delegate.<br/></p>
<p><b>14.108.2.2 AAX_IDisplayDelegateDecorator() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_IDisplayDelegateDecorator&lt; T &gt;::AAX_IDisplayDelegateDecorator (<br/></p>
<p>const AAX_IDisplayDelegateDecorator&lt; T &gt; &amp; other )<br/></p>
<p>Copy constructor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.108 AAX_IDisplayDelegateDecorator</b>&lt; <b>T </b>&gt; <b>Class Template Reference 851<br/></b></p>
<p>This class implements the decorator pattern, which is a sort of wrapper. The object that is being wrapped is passed<br/>into this constructor. This object is passed by reference because it must be copied to prevent any potential memory<br/>ambigities.<br/></p>
<p>This constructor sets the local mWrappedDisplayDelegate member to a clone of the provided AAX_IDisplayDelegateDecorator,<br/>allowing multiply-decorated display delegates.<br/></p>
<p><b>Parameters<br/></b>in other The display delegate decorator that will be set as the wrapped delegate of this object<br/></p>
<p><b>14.108.2.3 </b>&#8764;<b>AAX_IDisplayDelegateDecorator()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_IDisplayDelegateDecorator&lt; T &gt;::&#8764;AAX_IDisplayDelegateDecorator<br/></p>
<p>Virtual destructor.<br/></p>
<p><b>Note<br/></b>This destructor must be overriden here in order to delete the wrapped display delegate object upon decorator<br/>destruction.<br/></p>
<p><b>14.108.3 Member Function Documentation<br/></b></p>
<p><b>14.108.3.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>AAX_IDisplayDelegateDecorator&lt; T &gt; &#8727; AAX_IDisplayDelegateDecorator&lt; T &gt;::Clone [virtual]<br/></p>
<p>Constructs and returns a copy of the display delegate decorator.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassDisplayDelegate&lt;T&gt;* AAX_CSubclassDisplayDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassDisplayDelegate(*this);<br/>}<br/></p>
<p><b>Note<br/></b>This is an idiomatic method in the decorator pattern, so watch for potential problems if this method is ever<br/>changed or removed.<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>852 Class Documentation<br/></b></p>
<p><b>14.108.3.2 ValueToString() [1/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_IDisplayDelegateDecorator&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p>Override of the AAX_IDisplayDelegate implementation to call into the wrapped object. Display delegate decorators<br/>should call into this implementation to pass ValueToString() calls on to the wrapped object after applying their own<br/>value-to-string decoration.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>Referenced by AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;::ValueToString(), AAX_CPercentDisplayDelegate&#8592;&#8617;<br/>Decorator&lt; T &gt;::ValueToString(), AAX_CUnitDisplayDelegateDecorator&lt; T &gt;::ValueToString(), and AAX_CUnit&#8592;&#8617;<br/>PrefixDisplayDelegateDecorator&lt; T &gt;::ValueToString().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.108.3.3 ValueToString() [2/2]<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_IDisplayDelegateDecorator&lt; T &gt;::ValueToString (<br/></p>
<p>T value,<br/>int32_t maxNumChars,<br/>AAX_CString &#8727; valueString ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value with a size constraint.<br/></p>
<p>Override of the AAX_IDisplayDelegate implementation to call into the wrapped object. Display delegate decorators<br/>should call into this implementation to pass ValueToString() calls on to the wrapped object after applying their own<br/>value-to-string decoration.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>in maxNumChars Size hint for the desired maximum number of characters in the string (not including<br/></p>
<p>null termination)<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.109 AAX_IDma Class Reference 853<br/></b></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p><b>14.108.3.4 StringToValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>bool AAX_IDisplayDelegateDecorator&lt; T &gt;::StringToValue (<br/></p>
<p>const AAX_CString &amp; valueString,<br/>T &#8727; value ) const [virtual]<br/></p>
<p>Converts a string to a real parameter value.<br/></p>
<p>Override of the DisplayDecorator implementation to call into the wrapped object. Display delegate decorators should<br/>call into this implementation to pass StringToValue() calls on to the wrapped object after applying their own string-<br/>to-value decoding.<br/></p>
<p><b>Parameters<br/></b>in valueString The string that will be converted<br/>out value The real parameter value corresponding to valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implements AAX_IDisplayDelegate&lt; T &gt;.<br/></p>
<p>Referenced by AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;::StringToValue(), AAX_CPercentDisplayDelegate&#8592;&#8617;<br/>Decorator&lt; T &gt;::StringToValue(), AAX_CUnitDisplayDelegateDecorator&lt; T &gt;::StringToValue(), and AAX_CUnit&#8592;&#8617;<br/>PrefixDisplayDelegateDecorator&lt; T &gt;::StringToValue().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IDisplayDelegateDecorator.h<br/></p>
<p><b>14.109 AAX_IDma Class Reference<br/></b></p>
<p>#include &lt;AAX_IDma.h&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>854 Class Documentation<br/></b></p>
<p><b>14.109.1 Description<br/></b></p>
<p>Cross-platform interface for access to the host's direct memory access (DMA) facilities.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>This interface is provided via a DMA port in the plug-in's algorithm context.<br/></p>
<p><b>See also<br/></b>AAX_IComponentDescriptor::AddDmaInstance()<br/>Direct Memory Access<br/></p>
<p><b>Public Types<br/></b>&#8226; enum EState {<br/></p>
<p>eState_Error = -1 ,<br/>eState_Init = 0 ,<br/>eState_Running = 1 ,<br/>eState_Complete = 2 ,<br/>eState_Pending = 3 }<br/></p>
<p>&#8226; enum EMode {<br/>eMode_Error = -1 ,<br/>eMode_Burst = 6 ,<br/>eMode_Gather = 10 ,<br/>eMode_Scatter = 11 }<br/></p>
<p>DMA mode IDs.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;AAX_IDma ()<br/></p>
<p><b>Basic DMA operation<br/></b></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API PostRequest ()=0<br/>Posts the transfer request to the DMA server.<br/></p>
<p>&#8226; virtual int32_t AAX_DMA_API IsTransferComplete ()=0<br/>Query whether a transfer has completed.<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetDmaState (EState iState)=0<br/>Sets the DMA State.<br/></p>
<p>&#8226; virtual EState AAX_DMA_API GetDmaState () const =0<br/>Inquire to find the state of the DMA instance.<br/></p>
<p>&#8226; virtual EMode AAX_DMA_API GetDmaMode () const =0<br/>Inquire to find the mode of the DMA instance.<br/></p>
<p><b>Methods for Burst operation<br/></b>Use these methods in conjunction with AAX_IDma::eMode_Burst<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetSrc (int8_t &#8727;iSrc)=0<br/>Sets the address of the source buffer.<br/></p>
<p>&#8226; virtual int8_t &#8727;AAX_DMA_API GetSrc ()=0<br/>Gets the address of the source buffer.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.109 AAX_IDma Class Reference 855<br/></b></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetDst (int8_t &#8727;iDst)=0<br/>Sets the address of the destination buffer.<br/></p>
<p>&#8226; virtual int8_t &#8727;AAX_DMA_API GetDst ()=0<br/>Gets the address of the destination buffer.<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetBurstLength (int32_t iBurstLengthBytes)=0<br/>Sets the length of each burst.<br/></p>
<p>&#8226; virtual int32_t AAX_DMA_API GetBurstLength ()=0<br/>Gets the length of each burst.<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetNumBursts (int32_t iNumBursts)=0<br/>Sets the number of bursts to perform before giving up priority to other DMA transfers.<br/></p>
<p>&#8226; virtual int32_t AAX_DMA_API GetNumBursts ()=0<br/>Gets the number of bursts to perform before giving up priority to other DMA transfers.<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetTransferSize (int32_t iTransferSizeBytes)=0<br/>Sets the size of the whole transfer.<br/></p>
<p>&#8226; virtual int32_t AAX_DMA_API GetTransferSize ()=0<br/>Gets the size of the whole transfer, in Bytes.<br/></p>
<p><b>Methods for Scatter and Gather operation<br/></b>Use these methods in conjunction with AAX_IDma::eMode_Scatter and AAX_IDma::eMode_Gather<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetFifoBuffer (int8_t &#8727;iFifoBase)=0<br/>Sets the address of the FIFO buffer for the DMA transfer (usually the external memory block)<br/></p>
<p>&#8226; virtual int8_t &#8727;AAX_DMA_API GetFifoBuffer ()=0<br/>Gets the address of the FIFO buffer for the DMA transfer.<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetLinearBuffer (int8_t &#8727;iLinearBase)=0<br/>Sets the address of the linear buffer for the DMA transfer (usually the internal memory block)<br/></p>
<p>&#8226; virtual int8_t &#8727;AAX_DMA_API GetLinearBuffer ()=0<br/>Gets the address of the linear buffer for the DMA transfer.<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetOffsetTable (const int32_t &#8727;iOffsetTable)=0<br/>Sets the offset table for the DMA transfer.<br/></p>
<p>&#8226; virtual const int32_t &#8727;AAX_DMA_API GetOffsetTable ()=0<br/>Gets the offset table for the DMA transfer.<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetNumOffsets (int32_t iNumOffsets)=0<br/>Sets the number of offets in the offset table.<br/></p>
<p>&#8226; virtual int32_t AAX_DMA_API GetNumOffsets ()=0<br/>Gets the number of offets in the offset table.<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetBaseOffset (int32_t iBaseOffsetBytes)=0<br/>Sets the relative base offset into the FIFO where transfers will begin.<br/></p>
<p>&#8226; virtual int32_t AAX_DMA_API GetBaseOffset ()=0<br/>Gets the relative base offset into the FIFO where transfers will begin.<br/></p>
<p>&#8226; virtual AAX_Result AAX_DMA_API SetFifoSize (int32_t iSizeBytes)=0<br/>Sets the size of the FIFO buffer, in bytes.<br/></p>
<p>&#8226; virtual int32_t AAX_DMA_API GetFifoSize ()=0<br/>Gets the size of the FIFO buffer, in bytes.<br/></p>
<p><b>14.109.2 Member Enumeration Documentation<br/></b></p>
<p><b>14.109.2.1 EState<br/></b></p>
<p>enum AAX_IDma::EState<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>856 Class Documentation<br/></b></p>
<p><b>Enumerator<br/></b>eState_Error<br/></p>
<p>eState_Init<br/>eState_Running<br/></p>
<p>eState_Complete<br/>eState_Pending<br/></p>
<p><b>14.109.2.2 EMode<br/></b></p>
<p>enum AAX_IDma::EMode<br/></p>
<p>DMA mode IDs.<br/></p>
<p>These IDs are used to bind DMA context fields to a particular DMA mode when describing the fields with<br/>AAX_IComponentDescriptor::AddDmaInstance()<br/></p>
<p><b>Enumerator<br/></b>eMode_Error<br/>eMode_Burst Burst mode (uncommon)<br/></p>
<p>eMode_Gather Gather mode.<br/>eMode_Scatter Scatter mode.<br/></p>
<p><b>14.109.3 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.109.3.1 </b>&#8764;<b>AAX_IDma()<br/></b></p>
<p>virtual AAX_IDma::&#8764;AAX_IDma ( ) [inline], [virtual]<br/></p>
<p><b>14.109.4 Member Function Documentation<br/></b></p>
<p><b>14.109.4.1 PostRequest()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::PostRequest ( ) [pure virtual]<br/></p>
<p>Posts the transfer request to the DMA server.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.109 AAX_IDma Class Reference 857<br/></b></p>
<p><b>Note<br/></b>Whichever mode this method is called on first will be the first mode to start transferring. Most plug-ins should<br/>therefore call this method for their Scatter DMA fields before their Gather DMA fields so that the scattered data<br/>is available as quickly as possible for future gathers.<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>14.109.4.2 IsTransferComplete()<br/></b></p>
<p>virtual int32_t AAX_DMA_API AAX_IDma::IsTransferComplete ( ) [pure virtual]<br/></p>
<p>Query whether a transfer has completed.<br/></p>
<p>A return value of false indicates an error, and that the DMA missed its cycle count deadline<br/></p>
<p><b>Note<br/></b>This function should not be used for polling within a Process loop! Instead, it can be used as a test for DMA<br/>failure. This test is usually performed via a Debug-only assert.<br/></p>
<p><b>Todo </b>Clarify return value meaning &#8211; ambiguity in documentation<br/></p>
<p><b>Returns<br/>true </b>if all pending transfers are complete<br/><b>false </b>if pending transfers are not complete<br/></p>
<p><b>14.109.4.3 SetDmaState()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetDmaState (<br/>EState iState ) [pure virtual]<br/></p>
<p>Sets the DMA State.<br/></p>
<p><b>Note<br/></b>This method is part of the host interface and should not be used by plug-ins<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>858 Class Documentation<br/></b></p>
<p><b>14.109.4.4 GetDmaState()<br/></b></p>
<p>virtual EState AAX_DMA_API AAX_IDma::GetDmaState ( ) const [pure virtual]<br/></p>
<p>Inquire to find the state of the DMA instance.<br/></p>
<p><b>14.109.4.5 GetDmaMode()<br/></b></p>
<p>virtual EMode AAX_DMA_API AAX_IDma::GetDmaMode ( ) const [pure virtual]<br/></p>
<p>Inquire to find the mode of the DMA instance.<br/></p>
<p>This value does not change, so there is no setter.<br/></p>
<p><b>14.109.4.6 SetSrc()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetSrc (<br/>int8_t &#8727; iSrc ) [pure virtual]<br/></p>
<p>Sets the address of the source buffer.<br/></p>
<p><b>Parameters<br/></b>in iSrc Address of the location in the source buffer where the read transfer should begin<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>14.109.4.7 GetSrc()<br/></b></p>
<p>virtual int8_t&#8727; AAX_DMA_API AAX_IDma::GetSrc ( ) [pure virtual]<br/></p>
<p>Gets the address of the source buffer.<br/></p>
<p><b>14.109.4.8 SetDst()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetDst (<br/>int8_t &#8727; iDst ) [pure virtual]<br/></p>
<p>Sets the address of the destination buffer.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.109 AAX_IDma Class Reference 859<br/></b></p>
<p><b>Parameters<br/></b>in iDst Address of the location in the destination buffer where the write transfer should begin<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>14.109.4.9 GetDst()<br/></b></p>
<p>virtual int8_t&#8727; AAX_DMA_API AAX_IDma::GetDst ( ) [pure virtual]<br/></p>
<p>Gets the address of the destination buffer.<br/></p>
<p><b>14.109.4.10 SetBurstLength()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetBurstLength (<br/>int32_t iBurstLengthBytes ) [pure virtual]<br/></p>
<p>Sets the length of each burst.<br/></p>
<p><b>Note<br/></b>Burst length must be between 1 and 64 Bytes, inclusive<br/>64-Byte transfers are recommended for the fastest overall transfer speed<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>14.109.4.11 GetBurstLength()<br/></b></p>
<p>virtual int32_t AAX_DMA_API AAX_IDma::GetBurstLength ( ) [pure virtual]<br/></p>
<p>Gets the length of each burst.<br/></p>
<p><b>14.109.4.12 SetNumBursts()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetNumBursts (<br/>int32_t iNumBursts ) [pure virtual]<br/></p>
<p>Sets the number of bursts to perform before giving up priority to other DMA transfers.<br/></p>
<p>Valid values are 1, 2, 4, or 16.<br/></p>
<p>The full transmission may be broken up into several series of bursts, and thus the total size of the data being<br/>transferred is not bounded by the number of bursts times the burst length.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>860 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iNumBursts The number of bursts<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>14.109.4.13 GetNumBursts()<br/></b></p>
<p>virtual int32_t AAX_DMA_API AAX_IDma::GetNumBursts ( ) [pure virtual]<br/></p>
<p>Gets the number of bursts to perform before giving up priority to other DMA transfers.<br/></p>
<p><b>14.109.4.14 SetTransferSize()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetTransferSize (<br/>int32_t iTransferSizeBytes ) [pure virtual]<br/></p>
<p>Sets the size of the whole transfer.<br/></p>
<p><b>Parameters<br/></b>in iTransferSizeBytes The transfer size, in Bytes<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>14.109.4.15 GetTransferSize()<br/></b></p>
<p>virtual int32_t AAX_DMA_API AAX_IDma::GetTransferSize ( ) [pure virtual]<br/></p>
<p>Gets the size of the whole transfer, in Bytes.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.109 AAX_IDma Class Reference 861<br/></b></p>
<p><b>14.109.4.16 SetFifoBuffer()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetFifoBuffer (<br/>int8_t &#8727; iFifoBase ) [pure virtual]<br/></p>
<p>Sets the address of the FIFO buffer for the DMA transfer (usually the external memory block)<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>14.109.4.17 GetFifoBuffer()<br/></b></p>
<p>virtual int8_t&#8727; AAX_DMA_API AAX_IDma::GetFifoBuffer ( ) [pure virtual]<br/></p>
<p>Gets the address of the FIFO buffer for the DMA transfer.<br/></p>
<p><b>14.109.4.18 SetLinearBuffer()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetLinearBuffer (<br/>int8_t &#8727; iLinearBase ) [pure virtual]<br/></p>
<p>Sets the address of the linear buffer for the DMA transfer (usually the internal memory block)<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>14.109.4.19 GetLinearBuffer()<br/></b></p>
<p>virtual int8_t&#8727; AAX_DMA_API AAX_IDma::GetLinearBuffer ( ) [pure virtual]<br/></p>
<p>Gets the address of the linear buffer for the DMA transfer.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>862 Class Documentation<br/></b></p>
<p><b>14.109.4.20 SetOffsetTable()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetOffsetTable (<br/>const int32_t &#8727; iOffsetTable ) [pure virtual]<br/></p>
<p>Sets the offset table for the DMA transfer.<br/></p>
<p>The offset table provides a list of Byte-aligned memory offsets into the FIFO buffer. The transfer will be broken into<br/>a series of individual bursts, each beginning at the specified offset locations within the FIFO buffer. The size of each<br/>burst is set by SetBurstLength().<br/></p>
<p><b>See also<br/></b>AAX_IDma::SetNumOffsets()<br/>AAX_IDma::SetBaseOffset()<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>14.109.4.21 GetOffsetTable()<br/></b></p>
<p>virtual const int32_t&#8727; AAX_DMA_API AAX_IDma::GetOffsetTable ( ) [pure virtual]<br/></p>
<p>Gets the offset table for the DMA transfer.<br/></p>
<p><b>14.109.4.22 SetNumOffsets()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetNumOffsets (<br/>int32_t iNumOffsets ) [pure virtual]<br/></p>
<p>Sets the number of offets in the offset table.<br/></p>
<p><b>See also<br/></b>AAX_IDma::SetOffsetTable()<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.109 AAX_IDma Class Reference 863<br/></b></p>
<p><b>14.109.4.23 GetNumOffsets()<br/></b></p>
<p>virtual int32_t AAX_DMA_API AAX_IDma::GetNumOffsets ( ) [pure virtual]<br/></p>
<p>Gets the number of offets in the offset table.<br/></p>
<p><b>14.109.4.24 SetBaseOffset()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetBaseOffset (<br/>int32_t iBaseOffsetBytes ) [pure virtual]<br/></p>
<p>Sets the relative base offset into the FIFO where transfers will begin.<br/></p>
<p>The base offset will be added to each value in the offset table in order to determine the starting offset within the<br/>FIFO buffer for each burst.<br/></p>
<p><b>See also<br/></b>AAX_IDma::SetOffsetTable()<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>14.109.4.25 GetBaseOffset()<br/></b></p>
<p>virtual int32_t AAX_DMA_API AAX_IDma::GetBaseOffset ( ) [pure virtual]<br/></p>
<p>Gets the relative base offset into the FIFO where transfers will begin.<br/></p>
<p><b>14.109.4.26 SetFifoSize()<br/></b></p>
<p>virtual AAX_Result AAX_DMA_API AAX_IDma::SetFifoSize (<br/>int32_t iSizeBytes ) [pure virtual]<br/></p>
<p>Sets the size of the FIFO buffer, in bytes.<br/></p>
<p><b>Note<br/></b>The FIFO buffer must be padded with at least enough memory to accommodate one burst, as defined by<br/>SetBurstLength().<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS on success<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>864 Class Documentation<br/></b></p>
<p><b>14.109.4.27 GetFifoSize()<br/></b></p>
<p>virtual int32_t AAX_DMA_API AAX_IDma::GetFifoSize ( ) [pure virtual]<br/></p>
<p>Gets the size of the FIFO buffer, in bytes.<br/>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IDma.h<br/></p>
<p><b>14.110 AAX_IEffectDescriptor Class Reference<br/></b></p>
<p>#include &lt;AAX_IEffectDescriptor.h&gt;<br/>Inheritance diagram for AAX_IEffectDescriptor:<br/></p>
<p><b>14.110.1 Description<br/></b></p>
<p>Description interface for an effect's (plug-in type's) components.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>Each Effect represents a different &quot;type&quot; of plug-in. The host will present different Effects to the user as separate<br/>products, even if they are derived from the same AAX_ICollection description.<br/></p>
<p><b>See also<br/></b>AAX_ICollection::AddEffect()<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;AAX_IEffectDescriptor ()<br/>&#8226; virtual AAX_IComponentDescriptor &#8727; NewComponentDescriptor ()=0<br/></p>
<p>Create an instance of a component descriptor.<br/>&#8226; virtual AAX_Result AddComponent (AAX_IComponentDescriptor &#8727;inComponentDescriptor)=0<br/></p>
<p>Add a component to an instance of a component descriptor.<br/>&#8226; virtual AAX_Result AddName (const char &#8727;inPlugInName)=0<br/></p>
<p>Add a name to the Effect.<br/>&#8226; virtual AAX_Result AddCategory (uint32_t inCategory)=0<br/></p>
<p>Add a category to your plug-in. See AAX_EPlugInCategory.<br/>&#8226; virtual AAX_Result AddCategoryBypassParameter (uint32_t inCategory, AAX_CParamID inParamID)=0<br/></p>
<p>Add a category to your plug-in. See AAX_EPlugInCategory.<br/>&#8226; virtual AAX_Result AddProcPtr (void &#8727;inProcPtr, AAX_CProcPtrID inProcID)=0<br/></p>
<p>Add a process pointer.<br/>&#8226; virtual AAX_IPropertyMap &#8727; NewPropertyMap ()=0<br/></p>
<p>Create a new property map.<br/>&#8226; virtual AAX_Result SetProperties (AAX_IPropertyMap &#8727;inProperties)=0<br/></p>
<p>Set the properties of a new property map.<br/>&#8226; virtual AAX_Result AddResourceInfo (AAX_EResourceType inResourceType, const char &#8727;inInfo)=0<br/></p>
<p>Set resource file info.<br/>&#8226; virtual AAX_Result AddMeterDescription (AAX_CTypeID inMeterID, const char &#8727;inMeterName, AAX_IPropertyMap<br/>&#8727;inProperties)=0<br/></p>
<p>Add name and property map to meter with given ID.<br/>&#8226; virtual AAX_Result AddControlMIDINode (AAX_CTypeID inNodeID, AAX_EMIDINodeType inNodeType,<br/></p>
<p>const char inNodeName[ ], uint32_t inChannelMask)=0<br/>Add a control MIDI node to the plug-in data model.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.110 AAX_IEffectDescriptor Class Reference 865<br/></b></p>
<p><b>14.110.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.110.2.1 </b>&#8764;<b>AAX_IEffectDescriptor()<br/></b></p>
<p>virtual AAX_IEffectDescriptor::&#8764;AAX_IEffectDescriptor ( ) [inline], [virtual]<br/></p>
<p><b>14.110.3 Member Function Documentation<br/></b></p>
<p><b>14.110.3.1 NewComponentDescriptor()<br/></b></p>
<p>virtual AAX_IComponentDescriptor&#8727; AAX_IEffectDescriptor::NewComponentDescriptor ( ) [pure<br/>virtual]<br/></p>
<p>Create an instance of a component descriptor.<br/></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.110.3.2 AddComponent()<br/></b></p>
<p>virtual AAX_Result AAX_IEffectDescriptor::AddComponent (<br/>AAX_IComponentDescriptor &#8727; inComponentDescriptor ) [pure virtual]<br/></p>
<p>Add a component to an instance of a component descriptor.<br/></p>
<p>Unlike with AAX_ICollection::AddEffect(), the AAX_IEffectDescriptor does not take ownership of the AAX_IComponentDescriptor<br/>that is passed to it in this method. The host copies out the contents of this descriptor, and thus the plug-in may<br/>re-use the same descriptor object when creating additional similar components.<br/></p>
<p><b>Parameters<br/></b>in inComponentDescriptor<br/></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>866 Class Documentation<br/></b></p>
<p><b>14.110.3.3 AddName()<br/></b></p>
<p>virtual AAX_Result AAX_IEffectDescriptor::AddName (<br/>const char &#8727; inPlugInName ) [pure virtual]<br/></p>
<p>Add a name to the Effect.<br/></p>
<p>May be called multiple times to add abbreviated Effect names.<br/></p>
<p><b>Note<br/></b>Every Effect must include at least one name variant with 31 or fewer characters, plus a null terminating<br/>character<br/></p>
<p><b>Parameters<br/></b>in inPlugInName The name assigned to the plug-in.<br/></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p><b>14.110.3.4 AddCategory()<br/></b></p>
<p>virtual AAX_Result AAX_IEffectDescriptor::AddCategory (<br/>uint32_t inCategory ) [pure virtual]<br/></p>
<p>Add a category to your plug-in. See AAX_EPlugInCategory.<br/></p>
<p><b>Parameters<br/></b>in inCategory One of the categories for the plug-in.<br/></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p><b>14.110.3.5 AddCategoryBypassParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IEffectDescriptor::AddCategoryBypassParameter (<br/>uint32_t inCategory,<br/>AAX_CParamID inParamID ) [pure virtual]<br/></p>
<p>Add a category to your plug-in. See AAX_EPlugInCategory.<br/></p>
<p><b>Parameters<br/></b>in inCategory One of the categories for the plug-in.<br/>in inParamID The parameter ID of the parameter used to bypass the category seciont of the plug-in.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.110 AAX_IEffectDescriptor Class Reference 867<br/></b></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p><b>14.110.3.6 AddProcPtr()<br/></b></p>
<p>virtual AAX_Result AAX_IEffectDescriptor::AddProcPtr (<br/>void &#8727; inProcPtr,<br/>AAX_CProcPtrID inProcID ) [pure virtual]<br/></p>
<p>Add a process pointer.<br/></p>
<p><b>Parameters<br/></b>in inProcPtr A process pointer.<br/>in inProcID A process ID.<br/></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p><b>14.110.3.7 NewPropertyMap()<br/></b></p>
<p>virtual AAX_IPropertyMap&#8727; AAX_IEffectDescriptor::NewPropertyMap ( ) [pure virtual]<br/></p>
<p>Create a new property map.<br/></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p><b>14.110.3.8 SetProperties()<br/></b></p>
<p>virtual AAX_Result AAX_IEffectDescriptor::SetProperties (<br/>AAX_IPropertyMap &#8727; inProperties ) [pure virtual]<br/></p>
<p>Set the properties of a new property map.<br/></p>
<p><b>Parameters<br/></b>in inProperties Description<br/></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p><b>14.110.3.9 AddResourceInfo()<br/></b></p>
<p>virtual AAX_Result AAX_IEffectDescriptor::AddResourceInfo (<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>868 Class Documentation<br/></b></p>
<p>AAX_EResourceType inResourceType,<br/>const char &#8727; inInfo ) [pure virtual]<br/></p>
<p>Set resource file info.<br/></p>
<p><b>Parameters<br/></b>in inResourceType See AAX_EResourceType.<br/>in inInfo Definition varies on the resource type.<br/></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p><b>14.110.3.10 AddMeterDescription()<br/></b></p>
<p>virtual AAX_Result AAX_IEffectDescriptor::AddMeterDescription (<br/>AAX_CTypeID inMeterID,<br/>const char &#8727; inMeterName,<br/>AAX_IPropertyMap &#8727; inProperties ) [pure virtual]<br/></p>
<p>Add name and property map to meter with given ID.<br/></p>
<p><b>Parameters<br/></b>in inMeterID The ID of the meter being described.<br/>in inMeterName The name of the meter.<br/>in inProperties The property map containing meter related data such as meter type, orientation, etc.<br/></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p><b>14.110.3.11 AddControlMIDINode()<br/></b></p>
<p>virtual AAX_Result AAX_IEffectDescriptor::AddControlMIDINode (<br/>AAX_CTypeID inNodeID,<br/>AAX_EMIDINodeType inNodeType,<br/>const char inNodeName[],<br/>uint32_t inChannelMask ) [pure virtual]<br/></p>
<p>Add a control MIDI node to the plug-in data model.<br/></p>
<p>&#8226; This MIDI node may receive note data as well as control data.<br/>&#8226; To send MIDI data to the plug-in's algorithm, use AAX_IComponentDescriptor::AddMIDINode().<br/></p>
<p><b>See also<br/></b>AAX_IACFEffectParameters_V2::UpdateControlMIDINodes()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.111 AAX_IEffectDirectData Class Reference 869<br/></b></p>
<p><b>Parameters<br/></b>in inNodeID The ID for the new control MIDI node.<br/>in inNodeType The type of the node.<br/>in inNodeName The name of the node.<br/>in inChannelMask The bit mask for required nodes channels (up to 16) or required global events for<br/></p>
<p>global node.<br/></p>
<p>Implemented in AAX_VEffectDescriptor.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IEffectDescriptor.h<br/></p>
<p><b>14.111 AAX_IEffectDirectData Class Reference<br/></b></p>
<p>#include &lt;AAX_IEffectDirectData.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IEffectDirectData:<br/></p>
<p>Collaboration diagram for AAX_IEffectDirectData:<br/></p>
<p><b>14.111.1 Description<br/></b></p>
<p>The interface for a AAX Plug-in's direct data interface.<br/></p>
<p><b>:Implemented by the Plug-In<br/></b></p>
<p>This is the interface for an instance of a plug-in's direct data interface that gets exposed to the host application.<br/>A plug-in needs to inherit from this interface and override all of the virtual functions to support direct data access<br/>functionality.<br/></p>
<p>Direct data access allows a plug-in to directly manipulate the data in its algorithm's private data blocks. The callback<br/>methods in this interface provide a safe context from which this kind of access may be attempted.<br/></p>
<p><b>Note<br/></b>This class always inherits from the latest version of the interface and thus requires any subclass to implement<br/>all the methods in the latest version of the interface.<br/>See AAX_IACFEffectDirectData for further information.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; ACF_DECLARE_STANDARD_UNKNOWN () ACFMETHOD(InternalQueryInterface)(const acfIID &amp;riid<br/>&#8226; AAX_DELETE (AAX_IEffectDirectData &amp;operator=(const AAX_IEffectDirectData &amp;))<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>870 Class Documentation<br/></b></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; void &#8727;&#8727;ppvObjOut override<br/></p>
<p><b>14.111.2 Member Function Documentation<br/></b></p>
<p><b>14.111.2.1 ACF_DECLARE_STANDARD_UNKNOWN()<br/></b></p>
<p>AAX_IEffectDirectData::ACF_DECLARE_STANDARD_UNKNOWN ( ) const &amp;<br/></p>
<p><b>14.111.2.2 AAX_DELETE()<br/></b></p>
<p>AAX_IEffectDirectData::AAX_DELETE (<br/>AAX_IEffectDirectData &amp; operator = (const AAX_IEffectDirectData &amp;) )<br/></p>
<p><b>14.111.3 Member Data Documentation<br/></b></p>
<p><b>14.111.3.1 override<br/></b></p>
<p>void&#8727;&#8727; ppvObjOut AAX_IEffectDirectData::override<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IEffectDirectData.h<br/></p>
<p><b>14.112 AAX_IEffectGUI Class Reference<br/></b></p>
<p>#include &lt;AAX_IEffectGUI.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IEffectGUI:<br/></p>
<p>Collaboration diagram for AAX_IEffectGUI:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.112 AAX_IEffectGUI Class Reference 871<br/></b></p>
<p><b>14.112.1 Description<br/></b></p>
<p>The interface for a AAX Plug-in's user interface.<br/></p>
<p><b>:Implemented by the Plug-In<br/></b></p>
<p>This is the interface for an instance of a plug-in's GUI that gets exposed to the host application. You need to inherit<br/>from this interface and override all of the virtual functions to create a plug-in GUI.<br/></p>
<p>To create the GUI for an AAX plug-in it is required that you inherit from this interface and override all of the virtual<br/>functions from AAX_IACFEffectGUI. In nearly all cases you will be able to take advantage of the implementations<br/>in the AAX library's AAX_CEffectGUI class and only override the few specific methods that you want to explicitly<br/>customize.<br/></p>
<p><b>Note<br/></b>This class always inherits from the latest version of the interface and thus requires any subclass to implement<br/>all the methods in the latest version of the interface.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; ACF_DECLARE_STANDARD_UNKNOWN () ACFMETHOD(InternalQueryInterface)(const acfIID &amp;riid<br/>&#8226; AAX_DELETE (AAX_IEffectGUI &amp;operator=(const AAX_IEffectGUI &amp;))<br/></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; void &#8727;&#8727;ppvObjOut override<br/></p>
<p><b>14.112.2 Member Function Documentation<br/></b></p>
<p><b>14.112.2.1 ACF_DECLARE_STANDARD_UNKNOWN()<br/></b></p>
<p>AAX_IEffectGUI::ACF_DECLARE_STANDARD_UNKNOWN ( ) const &amp;<br/></p>
<p><b>14.112.2.2 AAX_DELETE()<br/></b></p>
<p>AAX_IEffectGUI::AAX_DELETE (<br/>AAX_IEffectGUI &amp; operator = (const AAX_IEffectGUI &amp;) )<br/></p>
<p><b>14.112.3 Member Data Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>872 Class Documentation<br/></b></p>
<p><b>14.112.3.1 override<br/></b></p>
<p>void&#8727;&#8727; ppvObjOut AAX_IEffectGUI::override<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IEffectGUI.h<br/></p>
<p><b>14.113 AAX_IEffectParameters Class Reference<br/></b></p>
<p>#include &lt;AAX_IEffectParameters.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IEffectParameters:<br/></p>
<p>Collaboration diagram for AAX_IEffectParameters:<br/></p>
<p><b>14.113.1 Description<br/></b></p>
<p>The interface for an AAX Plug-in's data model.<br/></p>
<p><b>:Implemented by the Plug-In<br/></b></p>
<p>The interface for an instance of a plug-in's data model. A plug-in's implementation of this interface is responsible<br/>for creating the plug-in's set of parameters and for defining how the plug-in will respond when these parameters are<br/>changed via control updates or preset loads. In order for information to be routed from the plug-in's data model to its<br/>algorithm, the parameters that are created here must be registered with the host in the plug-in's Description callback.<br/></p>
<p>At initialization, the host provides this interface with a reference to AAX_IController, which provides access from<br/>the data model back to the host. This reference provides a means of querying information from the host such as<br/>stem format or sample rate, and is also responsible for communication between the data model and the plug-in's<br/>(decoupled) algorithm. See Real-time algorithm callback.<br/></p>
<p>You will most likely inherit your implementation of this interface from AAX_CEffectParameters, a default implementa-<br/>tion that provides basic data model functionality such as adding custom parameters, setting control values, restoring<br/>state, generating coefficients, etc., which you can override and customize as needed.<br/></p>
<p>The following tags appear in the descriptions for methods of this class and its derived classes:<br/></p>
<p>&#8226; CALL: Components in the plug-in should call this method to get / set data in the data model.<br/></p>
<p><b>Note<br/></b>&#8226; This class always inherits from the latest version of the interface and thus requires any subclass to imple-<br/></p>
<p>ment all the methods in the latest version of the interface. The current version of AAX_CEffectParameters<br/>provides a convenient default implementation for all methods in the latest interface.<br/></p>
<p>&#8226; Except where noted otherwise, the parameter values referenced by the methods in this interface are<br/>normalized values. See Parameter Manager for more information.<br/></p>
<p><b>Legacy Porting Notes </b>In the legacy plug-in SDK, these methods were found in CProcess and CEffect&#8592;&#8617;<br/>Process. For additional CProcess methods, see AAX_IEffectGUI.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.113 AAX_IEffectParameters Class Reference 873<br/></b></p>
<p><b>14.113.2 Related classes<br/></b></p>
<p>AAX_IACFEffectParameters<br/></p>
<p>AAX_IEffectParameters<br/></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_IController AAX_IAutomationDelegate<br/></p>
<p>AAX_CEffectGUI<br/></p>
<p><b>Figure 14.3 Classes related to AAX_IEffectParameters by inheritance or composition<br/></b></p>
<p>AAX_CEffectParameters<br/></p>
<p>AAX_CParameterManager AAX_CChunkDataParser AAX_CPacketDispatcher<br/></p>
<p><b>Figure 14.4 Classes owned as member objects of AAX_CEffectParameters<br/></b></p>
<p><b>Public Member Functions<br/></b>&#8226; ACF_DECLARE_STANDARD_UNKNOWN () ACFMETHOD(InternalQueryInterface)(const acfIID &amp;riid<br/>&#8226; AAX_DELETE (AAX_IEffectParameters &amp;operator=(const AAX_IEffectParameters &amp;))<br/></p>
<p><b>Public Attributes<br/></b>&#8226; void &#8727;&#8727;ppvObjOut override<br/></p>
<p><b>14.113.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>874 Class Documentation<br/></b></p>
<p><b>14.113.3.1 ACF_DECLARE_STANDARD_UNKNOWN()<br/></b></p>
<p>AAX_IEffectParameters::ACF_DECLARE_STANDARD_UNKNOWN ( ) const &amp;<br/></p>
<p><b>14.113.3.2 AAX_DELETE()<br/></b></p>
<p>AAX_IEffectParameters::AAX_DELETE (<br/>AAX_IEffectParameters &amp; operator = (const AAX_IEffectParameters &amp;) )<br/></p>
<p><b>14.113.4 Member Data Documentation<br/></b></p>
<p><b>14.113.4.1 override<br/></b></p>
<p>void&#8727;&#8727; ppvObjOut AAX_IEffectParameters::override<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IEffectParameters.h<br/></p>
<p><b>14.114 AAX_IFeatureInfo Class Reference<br/></b></p>
<p>#include &lt;AAX_IFeatureInfo.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IFeatureInfo:<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IFeatureInfo ()<br/>&#8226; virtual AAX_Result SupportLevel (AAX_ESupportLevel &amp;oSupportLevel) const =0<br/>&#8226; virtual const AAX_IPropertyMap &#8727; AcquireProperties () const =0<br/>&#8226; virtual const AAX_Feature_UID &amp; ID () const =0<br/></p>
<p><b>14.114.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.114.1.1 </b>&#8764;<b>AAX_IFeatureInfo()<br/></b></p>
<p>virtual AAX_IFeatureInfo::&#8764;AAX_IFeatureInfo ( ) [inline], [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.114 AAX_IFeatureInfo Class Reference 875<br/></b></p>
<p><b>14.114.2 Member Function Documentation<br/></b></p>
<p><b>14.114.2.1 SupportLevel()<br/></b></p>
<p>virtual AAX_Result AAX_IFeatureInfo::SupportLevel (<br/>AAX_ESupportLevel &amp; oSupportLevel ) const [pure virtual]<br/></p>
<p>Determine the level of support for this feature by the host<br/></p>
<p><b>Note<br/></b>The host will not provide an underlying AAX_IACFFeatureInfo interface for features which it does not recognize<br/>at all, resulting in a AAX_ERROR_NULL_OBJECT error code<br/></p>
<p>Implemented in AAX_VFeatureInfo.<br/></p>
<p><b>14.114.2.2 AcquireProperties()<br/></b></p>
<p>virtual const AAX_IPropertyMap&#8727; AAX_IFeatureInfo::AcquireProperties ( ) const [pure virtual]<br/></p>
<p>Additional properties providing details of the feature support<br/></p>
<p>See the feature's UID for documentation of which features provide additional properties<br/></p>
<p>Ownership of the returned object is passed to the caller; the caller is responsible for destroying the object, e.g. by<br/>capturing the returned object in a smart pointer.<br/>// AAX_IFeatureInfo* featureInfo<br/>std::unique_ptr&lt;const AAX_IPropertyMap&gt; featurePropertiesPtr(featureInfo-&gt;AcquireProperties();<br/></p>
<p><b>Returns<br/></b>An AAX_IPropertyMap interface with access to the host's properties for this feature.<br/>NULL if the desired feature was not found or if an error occurred<br/></p>
<p><b>Note<br/></b>May return an AAX_IPropertyMap object with limited method support, which would return an error such as<br/>AAX_ERROR_NULL_OBJECT or AAX_ERROR_UNIMPLEMENTED to interface calls.<br/></p>
<p>Implemented in AAX_VFeatureInfo.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>876 Class Documentation<br/></b></p>
<p><b>14.114.2.3 ID()<br/></b></p>
<p>virtual const AAX_Feature_UID&amp; AAX_IFeatureInfo::ID ( ) const [pure virtual]<br/></p>
<p>Returns the ID of the feature which this object represents<br/></p>
<p>Implemented in AAX_VFeatureInfo.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IFeatureInfo.h<br/></p>
<p><b>14.115 AAX_IHostProcessor Class Reference<br/></b></p>
<p>#include &lt;AAX_IHostProcessor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IHostProcessor:<br/></p>
<p>Collaboration diagram for AAX_IHostProcessor:<br/></p>
<p><b>14.115.1 Description<br/></b></p>
<p>Base class for the host processor interface.<br/></p>
<p><b>:Implemented by the Plug-In<br/></b></p>
<p><b>Note<br/></b>This class always inherits from the latest version of the interface and thus requires any subclass to implement<br/>all the methods in the latest version of the interface. Most plug-ins will inherit from the AAX_CHostProcessor<br/>convenience class.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; ACF_DECLARE_STANDARD_UNKNOWN () ACFMETHOD(InternalQueryInterface)(const acfIID &amp;riid<br/>&#8226; AAX_DELETE (AAX_IHostProcessor &amp;operator=(const AAX_IHostProcessor &amp;))<br/></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; void &#8727;&#8727;ppvObjOut override<br/></p>
<p><b>14.115.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.116 AAX_IHostProcessorDelegate Class Reference 877<br/></b></p>
<p><b>14.115.2.1 ACF_DECLARE_STANDARD_UNKNOWN()<br/></b></p>
<p>AAX_IHostProcessor::ACF_DECLARE_STANDARD_UNKNOWN ( ) const &amp;<br/></p>
<p><b>14.115.2.2 AAX_DELETE()<br/></b></p>
<p>AAX_IHostProcessor::AAX_DELETE (<br/>AAX_IHostProcessor &amp; operator = (const AAX_IHostProcessor &amp;) )<br/></p>
<p><b>14.115.3 Member Data Documentation<br/></b></p>
<p><b>14.115.3.1 override<br/></b></p>
<p>void&#8727;&#8727; ppvObjOut AAX_IHostProcessor::override<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IHostProcessor.h<br/></p>
<p><b>14.116 AAX_IHostProcessorDelegate Class Reference<br/></b></p>
<p>#include &lt;AAX_IHostProcessorDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IHostProcessorDelegate:<br/></p>
<p><b>14.116.1 Description<br/></b></p>
<p>Versioned interface for host methods specific to offline processing.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>The host provides a host processor delegate to a plug-in's host processor object at initialization. The host processor<br/>object may make calls to this object to get information about the current render pass or to affect the plug-in's offline<br/>processing behavior.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>878 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IHostProcessorDelegate ()<br/>&#8226; virtual AAX_Result GetAudio (const float &#8727;const inAudioIns[ ], int32_t inAudioInCount, int64_t inLocation,<br/></p>
<p>int32_t &#8727;ioNumSamples)=0<br/>CALL: Randomly access audio from the timeline.<br/></p>
<p>&#8226; virtual int32_t GetSideChainInputNum ()=0<br/>CALL: Returns the index of the side chain input buffer.<br/></p>
<p>&#8226; virtual AAX_Result ForceAnalyze ()=0<br/>CALL: Request an analysis pass.<br/></p>
<p>&#8226; virtual AAX_Result ForceProcess ()=0<br/>CALL: Request a process pass.<br/></p>
<p><b>14.116.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.116.2.1 </b>&#8764;<b>AAX_IHostProcessorDelegate()<br/></b></p>
<p>virtual AAX_IHostProcessorDelegate::&#8764;AAX_IHostProcessorDelegate ( ) [inline], [virtual]<br/></p>
<p><b>14.116.3 Member Function Documentation<br/></b></p>
<p><b>14.116.3.1 GetAudio()<br/></b></p>
<p>virtual AAX_Result AAX_IHostProcessorDelegate::GetAudio (<br/>const float &#8727;const inAudioIns[],<br/>int32_t inAudioInCount,<br/>int64_t inLocation,<br/>int32_t &#8727; ioNumSamples ) [pure virtual]<br/></p>
<p>CALL: Randomly access audio from the timeline.<br/></p>
<p>Called from within AAX_IHostProcessor::RenderAudio(), this method fills a buffer of samples with randomly-<br/>accessed data from the current input processing region on the timeline, including any extra samples such as<br/>processing &quot;handles&quot;.<br/></p>
<p><b>Note<br/></b>Plug-ins that use this feature must set AAX_eProperty_UsesRandomAccess to true<br/>It is not possible to retrieve samples from outside of the current input processing region<br/>Always check the return value of this method before using the randomly-accessed samples<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.116 AAX_IHostProcessorDelegate Class Reference 879<br/></b></p>
<p><b>Parameters<br/></b>in inAudioIns Timeline audio buffer(s). This must be set to inAudioIns from<br/></p>
<p>AAX_IHostProcessor::RenderAudio()<br/>in inAudioInCount Number of buffers in inAudioIns. This must be set to inAudioInCount<br/></p>
<p>from AAX_IHostProcessor::RenderAudio()<br/>in inLocation A sample location relative to the beginning of the currently processed region,<br/></p>
<p>e.g. a value of 0 corresponds to the timeline location returned by<br/>AAX_CHostProcessor::GetSrcStart()<br/></p>
<p>in,out ioNumSamples<br/>&#8226; Input: The maximum number of samples to read.<br/></p>
<p>&#8226; Output: The actual number of samples that were read from the timeline<br/></p>
<p>Implemented in AAX_VHostProcessorDelegate.<br/></p>
<p><b>14.116.3.2 GetSideChainInputNum()<br/></b></p>
<p>virtual int32_t AAX_IHostProcessorDelegate::GetSideChainInputNum ( ) [pure virtual]<br/></p>
<p>CALL: Returns the index of the side chain input buffer.<br/></p>
<p>Called from within AAX_IHostProcessor::RenderAudio(), this method returns the index of the side chain input sam-<br/>ple buffer within inAudioIns.<br/></p>
<p>Implemented in AAX_VHostProcessorDelegate.<br/></p>
<p><b>14.116.3.3 ForceAnalyze()<br/></b></p>
<p>virtual AAX_Result AAX_IHostProcessorDelegate::ForceAnalyze ( ) [pure virtual]<br/></p>
<p>CALL: Request an analysis pass.<br/></p>
<p>Call this method to request an analysis pass from within the plug-in. Most plug-ins should rely on the host to trigger<br/>analysis passes when appropriate. However, plug-ins that require an analysis pass a) outside of the context of<br/>host-driven render or analysis, or b) when internal plug-in data changes may need to call ForceAnalyze().<br/></p>
<p>Implemented in AAX_VHostProcessorDelegate.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>880 Class Documentation<br/></b></p>
<p><b>14.116.3.4 ForceProcess()<br/></b></p>
<p>virtual AAX_Result AAX_IHostProcessorDelegate::ForceProcess ( ) [pure virtual]<br/></p>
<p>CALL: Request a process pass.<br/></p>
<p>Call this method to request a process pass from within the plug-in. If AAX_eProperty_RequiresAnalysis is de-<br/>fined, the resulting process pass will be preceded by an analysis pass. This method should only be used in rare<br/>circumstances by plug-ins that must launch processing outside of the normal host AudioSuite workflow.<br/></p>
<p>Implemented in AAX_VHostProcessorDelegate.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IHostProcessorDelegate.h<br/></p>
<p><b>14.117 AAX_IHostServices Class Reference<br/></b></p>
<p>#include &lt;AAX_IHostServices.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IHostServices:<br/></p>
<p><b>14.117.1 Description<br/></b></p>
<p>Interface to diagnostic and debugging services provided by the AAX host.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p><b>See also<br/></b>AAX_IACFHostServices<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IHostServices ()<br/>&#8226; virtual AAX_Result HandleAssertFailure (const char &#8727;iFile, int32_t iLine, const char &#8727;iNote, int32_t iFlags)<br/></p>
<p>const =0<br/>Handle an assertion failure.<br/></p>
<p>&#8226; virtual AAX_Result Trace (int32_t iPriority, const char &#8727;iMessage) const =0<br/>Log a trace message.<br/></p>
<p>&#8226; virtual AAX_Result StackTrace (int32_t iTracePriority, int32_t iStackTracePriority, const char &#8727;iMessage) const<br/>=0<br/></p>
<p>Log a trace message or a stack trace.<br/></p>
<p><b>14.117.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.117 AAX_IHostServices Class Reference 881<br/></b></p>
<p><b>14.117.2.1 </b>&#8764;<b>AAX_IHostServices()<br/></b></p>
<p>virtual AAX_IHostServices::&#8764;AAX_IHostServices ( ) [inline], [virtual]<br/></p>
<p><b>14.117.3 Member Function Documentation<br/></b></p>
<p><b>14.117.3.1 HandleAssertFailure()<br/></b></p>
<p>virtual AAX_Result AAX_IHostServices::HandleAssertFailure (<br/>const char &#8727; iFile,<br/>int32_t iLine,<br/>const char &#8727; iNote,<br/>int32_t iFlags ) const [pure virtual]<br/></p>
<p>Handle an assertion failure.<br/></p>
<p>Use this method to delegate assertion failure handling to the host<br/></p>
<p>Use inFlags to request that specific behavior be included when handling the failure. This request may not be<br/>fulfilled by the host, and absence of a flag does not preclude the host from using that behavior when handling the<br/>failure.<br/></p>
<p><b>Parameters<br/></b>in iFile The name of the file containing the assert check. Usually<br/></p>
<p>__FILE__<br/>in iLine The line number of the assert check. Usually __LINE__<br/>in iNote Text to display related to the assert. Usually the condition which failed<br/>in iFlags Bitfield of AAX_EAssertFlags to request specific handling behavior<br/></p>
<p>Implemented in AAX_VHostServices.<br/></p>
<p><b>14.117.3.2 Trace()<br/></b></p>
<p>virtual AAX_Result AAX_IHostServices::Trace (<br/>int32_t iPriority,<br/>const char &#8727; iMessage ) const [pure virtual]<br/></p>
<p>Log a trace message.<br/></p>
<p><b>Parameters<br/></b>in iPriority Priority of the trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iMessage Message string to log<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>882 Class Documentation<br/></b></p>
<p>Implemented in AAX_VHostServices.<br/></p>
<p><b>14.117.3.3 StackTrace()<br/></b></p>
<p>virtual AAX_Result AAX_IHostServices::StackTrace (<br/>int32_t iTracePriority,<br/>int32_t iStackTracePriority,<br/>const char &#8727; iMessage ) const [pure virtual]<br/></p>
<p>Log a trace message or a stack trace.<br/></p>
<p>If the logging output filtering is set to include logs with iStackTracePriority then both the logging message<br/>and a stack trace will be emitted, regardless of iTracePriority.<br/></p>
<p>If the logging output filtering is set to include logs with iTracePriority but to exclude logs with iStack&#8592;&#8617;<br/>TracePriority then this will emit a normal log with no stack trace.<br/></p>
<p><b>Parameters<br/></b>in iTracePriority Priority of the trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iStackTracePriority Priority of the stack trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iMessage Message string to log<br/></p>
<p>Implemented in AAX_VHostServices.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IHostServices.h<br/></p>
<p><b>14.118 AAX_IHostTaskAgent Class Reference<br/></b></p>
<p>#include &lt;AAX_IHostTaskAgent.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IHostTaskAgent:<br/></p>
<p><b>14.118.1 Description<br/></b></p>
<p>Interface to access an AAX_IACFTaskAgent object implemented by the host.<br/></p>
<p>The plugin may use this interface to add tasks to the host's agent, requesting that the host perform actions.<br/></p>
<p><b>See also<br/></b>AAX_IACFTaskAgent<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.118 AAX_IHostTaskAgent Class Reference 883<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IHostTaskAgent ()=default<br/>&#8226; virtual AAX_Result Initialize (IACFUnknown &#8727;iController)=0<br/>&#8226; virtual AAX_Result Uninitialize ()=0<br/>&#8226; virtual AAX_Result AddTask (IACFUnknown &#8727;iTask)=0<br/>&#8226; virtual AAX_Result CancelAllTasks ()=0<br/></p>
<p><b>14.118.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.118.2.1 </b>&#8764;<b>AAX_IHostTaskAgent()<br/></b></p>
<p>virtual AAX_IHostTaskAgent::&#8764;AAX_IHostTaskAgent ( ) [virtual], [default]<br/></p>
<p><b>14.118.3 Member Function Documentation<br/></b></p>
<p><b>14.118.3.1 Initialize()<br/></b></p>
<p>virtual AAX_Result AAX_IHostTaskAgent::Initialize (<br/>IACFUnknown &#8727; iController ) [pure virtual]<br/></p>
<p>Implemented in AAX_VHostTaskAgent.<br/></p>
<p><b>14.118.3.2 Uninitialize()<br/></b></p>
<p>virtual AAX_Result AAX_IHostTaskAgent::Uninitialize ( ) [pure virtual]<br/></p>
<p>Implemented in AAX_VHostTaskAgent.<br/></p>
<p><b>14.118.3.3 AddTask()<br/></b></p>
<p>virtual AAX_Result AAX_IHostTaskAgent::AddTask (<br/>IACFUnknown &#8727; iTask ) [pure virtual]<br/></p>
<p>Implemented in AAX_VHostTaskAgent.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>884 Class Documentation<br/></b></p>
<p><b>14.118.3.4 CancelAllTasks()<br/></b></p>
<p>virtual AAX_Result AAX_IHostTaskAgent::CancelAllTasks ( ) [pure virtual]<br/></p>
<p>Implemented in AAX_VHostTaskAgent.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IHostTaskAgent.h<br/></p>
<p><b>14.119 AAX_IMIDIMessageInfoDelegate Class Reference<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IMIDIMessageInfoDelegate ()<br/>&#8226; virtual uint32_t Mask () const =0<br/>&#8226; virtual uint32_t Length () const =0<br/>&#8226; virtual AAX_CString ToString (uint32_t inLength, const uint8_t &#8727;inData) const =0<br/>&#8226; virtual bool Accepts (uint32_t inLength, const uint8_t &#8727;inData) const<br/></p>
<p><b>Protected Member Functions<br/></b></p>
<p>&#8226; bool Accepts_ExactStatus (uint32_t inLength, const uint8_t &#8727;inData) const<br/></p>
<p><b>Static Protected Member Functions<br/></b></p>
<p>&#8226; static void ToString_AppendNumber (const char &#8727;inLabel, int32_t inData, AAX_CString &amp;outString)<br/>&#8226; static void ToString_AppendCStr (const char &#8727;inLabel, const char &#8727;inCStr, AAX_CString &amp;outString)<br/>&#8226; static void ToString_AppendByteRange (const char &#8727;inLabel, const uint8_t &#8727;inData, int32_t inNumBytes,<br/></p>
<p>AAX_CString &amp;outString)<br/>&#8226; static void ToString_AppendValid (bool inCheck, AAX_CString &amp;outString)<br/></p>
<p><b>14.119.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.119.1.1 </b>&#8764;<b>AAX_IMIDIMessageInfoDelegate()<br/></b></p>
<p>virtual AAX_IMIDIMessageInfoDelegate::&#8764;AAX_IMIDIMessageInfoDelegate ( ) [inline], [virtual]<br/></p>
<p><b>14.119.2 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.119 AAX_IMIDIMessageInfoDelegate Class Reference 885<br/></b></p>
<p><b>14.119.2.1 Mask()<br/></b></p>
<p>virtual uint32_t AAX_IMIDIMessageInfoDelegate::Mask ( ) const [pure virtual]<br/></p>
<p>Referenced by Accepts_ExactStatus().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.119.2.2 Length()<br/></b></p>
<p>virtual uint32_t AAX_IMIDIMessageInfoDelegate::Length ( ) const [pure virtual]<br/></p>
<p>Referenced by Accepts().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.119.2.3 ToString()<br/></b></p>
<p>virtual AAX_CString AAX_IMIDIMessageInfoDelegate::ToString (<br/>uint32_t inLength,<br/>const uint8_t &#8727; inData ) const [pure virtual]<br/></p>
<p><b>14.119.2.4 Accepts()<br/></b></p>
<p>virtual bool AAX_IMIDIMessageInfoDelegate::Accepts (<br/>uint32_t inLength,<br/>const uint8_t &#8727; inData ) const [inline], [virtual]<br/></p>
<p>References Length().<br/></p>
<p>Referenced by Accepts_ExactStatus().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>14.119.2.5 Accepts_ExactStatus()<br/></b></p>
<p>bool AAX_IMIDIMessageInfoDelegate::Accepts_ExactStatus (<br/>uint32_t inLength,<br/>const uint8_t &#8727; inData ) const [inline], [protected]<br/></p>
<p>References Accepts(), and Mask().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>886 Class Documentation<br/></b></p>
<p><b>14.119.2.6 ToString_AppendNumber()<br/></b></p>
<p>static void AAX_IMIDIMessageInfoDelegate::ToString_AppendNumber (<br/>const char &#8727; inLabel,<br/>int32_t inData,<br/>AAX_CString &amp; outString ) [inline], [static], [protected]<br/></p>
<p>References AAX_CString::AppendNumber().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.119.2.7 ToString_AppendCStr()<br/></b></p>
<p>static void AAX_IMIDIMessageInfoDelegate::ToString_AppendCStr (<br/>const char &#8727; inLabel,<br/>const char &#8727; inCStr,<br/>AAX_CString &amp; outString ) [inline], [static], [protected]<br/></p>
<p>References AAX_CString::Append().<br/></p>
<p>Referenced by ToString_AppendValid().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>14.119.2.8 ToString_AppendByteRange()<br/></b></p>
<p>static void AAX_IMIDIMessageInfoDelegate::ToString_AppendByteRange (<br/>const char &#8727; inLabel,<br/>const uint8_t &#8727; inData,<br/>int32_t inNumBytes,<br/>AAX_CString &amp; outString ) [inline], [static], [protected]<br/></p>
<p>References AAX_CString::Append(), and AAX_CString::AppendHex().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.119.2.9 ToString_AppendValid()<br/></b></p>
<p>static void AAX_IMIDIMessageInfoDelegate::ToString_AppendValid (<br/>bool inCheck,<br/>AAX_CString &amp; outString ) [inline], [static], [protected]<br/></p>
<p>References ToString_AppendCStr().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_MIDILogging.cpp<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.120 AAX_IMIDINode Class Reference 887<br/></b></p>
<p><b>14.120 AAX_IMIDINode Class Reference<br/></b></p>
<p>#include &lt;AAX_IMIDINode.h&gt;<br/></p>
<p><b>14.120.1 Description<br/></b></p>
<p>Interface for accessing information in a MIDI node.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p><b>See also<br/></b>AAX_IComponentDescriptor::AddMIDINode<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IMIDINode ()<br/>&#8226; virtual AAX_CMidiStream &#8727; GetNodeBuffer ()=0<br/></p>
<p>Returns a MIDI stream data structure.<br/>&#8226; virtual AAX_Result PostMIDIPacket (AAX_CMidiPacket &#8727;packet)=0<br/></p>
<p>Posts an AAX_CMidiPacket to an output MIDI node.<br/>&#8226; virtual AAX_ITransport &#8727; GetTransport ()=0<br/></p>
<p>Returns a transport object.<br/></p>
<p><b>14.120.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.120.2.1 </b>&#8764;<b>AAX_IMIDINode()<br/></b></p>
<p>virtual AAX_IMIDINode::&#8764;AAX_IMIDINode ( ) [inline], [virtual]<br/></p>
<p><b>14.120.3 Member Function Documentation<br/></b></p>
<p><b>14.120.3.1 GetNodeBuffer()<br/></b></p>
<p>virtual AAX_CMidiStream&#8727; AAX_IMIDINode::GetNodeBuffer ( ) [pure virtual]<br/></p>
<p>Returns a MIDI stream data structure.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>888 Class Documentation<br/></b></p>
<p><b>14.120.3.2 PostMIDIPacket()<br/></b></p>
<p>virtual AAX_Result AAX_IMIDINode::PostMIDIPacket (<br/>AAX_CMidiPacket &#8727; packet ) [pure virtual]<br/></p>
<p>Posts an AAX_CMidiPacket to an output MIDI node.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools supports the following MIDI events from plug-ins:<br/></p>
<p>&#8226; NoteOn<br/>&#8226; NoteOff<br/>&#8226; Pitch bend<br/>&#8226; Polyphonic key pressure<br/>&#8226; Bank select (controller #0)<br/>&#8226; Program change (no bank)<br/>&#8226; Channel pressure<br/></p>
<p><b>Parameters<br/></b>in packet The MIDI packet to be pushed to a MIDI output node<br/></p>
<p><b>14.120.3.3 GetTransport()<br/></b></p>
<p>virtual AAX_ITransport&#8727; AAX_IMIDINode::GetTransport ( ) [pure virtual]<br/></p>
<p>Returns a transport object.<br/></p>
<p><b>Warning<br/></b>The returned interface is not versioned. Calling a method on this interface that is not supported by the host<br/>will result in undefined behavior, usually a crash. You must either check the host version before using this<br/>interface or limit the use of this interface to V1 Transport interface methods.<br/></p>
<p>Wherever possible, use a versioned Transport object such as the one created in AAX_CEffectParameters::Initialize()<br/>rather than this unversioned interface.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IMIDINode.h<br/></p>
<p><b>14.121 AAX_IPacketHandler Struct Reference<br/></b></p>
<p>#include &lt;AAX_CPacketDispatcher.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IPacketHandler:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.121 AAX_IPacketHandler Struct Reference 889<br/></b></p>
<p><b>14.121.1 Description<br/></b></p>
<p>Callback container used by AAX_CPacketDispatcher.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IPacketHandler ()<br/>&#8226; virtual AAX_IPacketHandler &#8727; Clone () const =0<br/>&#8226; virtual AAX_Result Call (AAX_CParamID inParamID, AAX_CPacket &amp;ioPacket) const =0<br/></p>
<p><b>14.121.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.121.2.1 </b>&#8764;<b>AAX_IPacketHandler()<br/></b></p>
<p>virtual AAX_IPacketHandler::&#8764;AAX_IPacketHandler ( ) [inline], [virtual]<br/></p>
<p><b>14.121.3 Member Function Documentation<br/></b></p>
<p><b>14.121.3.1 Clone()<br/></b></p>
<p>virtual AAX_IPacketHandler&#8727; AAX_IPacketHandler::Clone ( ) const [pure virtual]<br/></p>
<p>Implemented in AAX_CPacketHandler&lt; TWorker &gt;.<br/></p>
<p><b>14.121.3.2 Call()<br/></b></p>
<p>virtual AAX_Result AAX_IPacketHandler::Call (<br/>AAX_CParamID inParamID,<br/>AAX_CPacket &amp; ioPacket ) const [pure virtual]<br/></p>
<p>Implemented in AAX_CPacketHandler&lt; TWorker &gt;.<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_CPacketDispatcher.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>890 Class Documentation<br/></b></p>
<p><b>14.122 AAX_IPageTable Class Reference<br/></b></p>
<p>#include &lt;AAX_IPageTable.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IPageTable:<br/></p>
<p><b>14.122.1 Description<br/></b></p>
<p>Interface to the host's representation of a plug-in instance's page table.<br/></p>
<p><b>See also<br/></b>AAX_IEffectParameters::UpdatePageTable()<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;AAX_IPageTable ()<br/></p>
<p>Virtual destructor.<br/>&#8226; virtual AAX_Result Clear ()=0<br/></p>
<p>Clears all parameter mappings from the table.<br/>&#8226; virtual AAX_Result Empty (AAX_CBoolean &amp;oEmpty) const =0<br/></p>
<p>Indicates whether the table is empty.<br/>&#8226; virtual AAX_Result GetNumPages (int32_t &amp;oNumPages) const =0<br/></p>
<p>Get the number of pages currently in this table.<br/>&#8226; virtual AAX_Result InsertPage (int32_t iPage)=0<br/></p>
<p>Insert a new empty page before the page at index iPage.<br/>&#8226; virtual AAX_Result RemovePage (int32_t iPage)=0<br/></p>
<p>Remove the page at index iPage.<br/>&#8226; virtual AAX_Result GetNumMappedParameterIDs (int32_t iPage, int32_t &amp;oNumParameterIdentifiers) const<br/></p>
<p>=0<br/>Returns the total number of parameter IDs which are mapped to a page.<br/></p>
<p>&#8226; virtual AAX_Result ClearMappedParameter (int32_t iPage, int32_t iIndex)=0<br/>Clear the parameter at a particular index in this table.<br/></p>
<p>&#8226; virtual AAX_Result GetMappedParameterID (int32_t iPage, int32_t iIndex, AAX_IString &amp;oParameter&#8592;&#8617;<br/>Identifier) const =0<br/></p>
<p>Get the parameter identifier which is currently mapped to an index in this table.<br/>&#8226; virtual AAX_Result MapParameterID (AAX_CPageTableParamID iParameterIdentifier, int32_t iPage, int32_t<br/></p>
<p>iIndex)=0<br/>Map a parameter to this table.<br/></p>
<p>&#8226; virtual AAX_Result GetNumParametersWithNameVariations (int32_t &amp;oNumParameterIdentifiers) const =0<br/>&#8226; virtual AAX_Result GetNameVariationParameterIDAtIndex (int32_t iIndex, AAX_IString &amp;oParameter&#8592;&#8617;<br/></p>
<p>Identifier) const =0<br/>&#8226; virtual AAX_Result GetNumNameVariationsForParameter (AAX_CPageTableParamID iParameterIdentifier,<br/></p>
<p>int32_t &amp;oNumVariations) const =0<br/>&#8226; virtual AAX_Result GetParameterNameVariationAtIndex (AAX_CPageTableParamID iParameterIdentifier,<br/></p>
<p>int32_t iIndex, AAX_IString &amp;oNameVariation, int32_t &amp;oLength) const =0<br/>&#8226; virtual AAX_Result GetParameterNameVariationOfLength (AAX_CPageTableParamID iParameterIdentifier,<br/></p>
<p>int32_t iLength, AAX_IString &amp;oNameVariation) const =0<br/>&#8226; virtual AAX_Result ClearParameterNameVariations ()=0<br/>&#8226; virtual AAX_Result ClearNameVariationsForParameter (AAX_CPageTableParamID iParameterIdentifier)=0<br/>&#8226; virtual AAX_Result SetParameterNameVariation (AAX_CPageTableParamID iParameterIdentifier, const<br/></p>
<p>AAX_IString &amp;iNameVariation, int32_t iLength)=0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.122 AAX_IPageTable Class Reference 891<br/></b></p>
<p><b>14.122.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.122.2.1 </b>&#8764;<b>AAX_IPageTable()<br/></b></p>
<p>virtual AAX_IPageTable::&#8764;AAX_IPageTable ( ) [inline], [virtual]<br/></p>
<p>Virtual destructor.<br/></p>
<p><b>Note<br/></b>This destructor MUST be virtual to prevent memory leaks.<br/></p>
<p><b>14.122.3 Member Function Documentation<br/></b></p>
<p><b>14.122.3.1 Clear()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::Clear ( ) [pure virtual]<br/></p>
<p>Clears all parameter mappings from the table.<br/></p>
<p>This method does not clear any parameter name variations from the table. For that, use AAX_IPageTable::ClearParameterNameVariations()<br/>or AAX_IPageTable::ClearNameVariationsForParameter()<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.2 Empty()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::Empty (<br/>AAX_CBoolean &amp; oEmpty ) const [pure virtual]<br/></p>
<p>Indicates whether the table is empty.<br/></p>
<p>A table is empty if it contains no pages. A table which contains pages but no parameter assignments is not empty.<br/>A table which has associated parameter name variations but no pages is empty.<br/></p>
<p><b>Parameters<br/></b>out oEmpty true if this table is empty<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>892 Class Documentation<br/></b></p>
<p><b>14.122.3.3 GetNumPages()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::GetNumPages (<br/>int32_t &amp; oNumPages ) const [pure virtual]<br/></p>
<p>Get the number of pages currently in this table.<br/></p>
<p><b>Parameters<br/></b>out oNumPages The number of pages which are present in the page table. Some pages might not<br/></p>
<p>contain any parameter assignments.<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.4 InsertPage()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::InsertPage (<br/>int32_t iPage ) [pure virtual]<br/></p>
<p>Insert a new empty page before the page at index iPage.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the total number of pages<br/></p>
<p><b>Parameters<br/></b>in iPage The insertion point page index<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.5 RemovePage()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::RemovePage (<br/>int32_t iPage ) [pure virtual]<br/></p>
<p>Remove the page at index iPage.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the index of the last existing page<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.122 AAX_IPageTable Class Reference 893<br/></b></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.6 GetNumMappedParameterIDs()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::GetNumMappedParameterIDs (<br/>int32_t iPage,<br/>int32_t &amp; oNumParameterIdentifiers ) const [pure virtual]<br/></p>
<p>Returns the total number of parameter IDs which are mapped to a page.<br/></p>
<p><b>Note<br/></b>The number of mapped parameter IDs does not correspond to the actual slot indices of the parameter assign-<br/>ments. For example, a page could have three total parameter assignments with parameters mapped to slots<br/>2, 4, and 6.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the index of the last existing page<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/>out oNumParameterIdentifiers The number of parameter identifiers which are mapped to the target page<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.7 ClearMappedParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::ClearMappedParameter (<br/>int32_t iPage,<br/>int32_t iIndex ) [pure virtual]<br/></p>
<p>Clear the parameter at a particular index in this table.<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS even if no parameter was mapped at the given index (the index is still clear)<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/>in iIndex The target parameter slot index within the target page<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>894 Class Documentation<br/></b></p>
<p><b>14.122.3.8 GetMappedParameterID()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::GetMappedParameterID (<br/>int32_t iPage,<br/>int32_t iIndex,<br/>AAX_IString &amp; oParameterIdentifier ) const [pure virtual]<br/></p>
<p>Get the parameter identifier which is currently mapped to an index in this table.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if no parameter is mapped at the specified page/index location<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/>in iIndex The target parameter slot index within the target page<br/>out oParameterIdentifier The identifier used for the mapped parameter in the page table (may be<br/></p>
<p>parameter name or ID)<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.9 MapParameterID()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::MapParameterID (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>int32_t iPage,<br/>int32_t iIndex ) [pure virtual]<br/></p>
<p>Map a parameter to this table.<br/></p>
<p>If iParameterIdentifier is an empty string then the parameter assignment will be cleared<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_NULL_ARGUMENT if iParameterIdentifier is null<br/>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the index of the last existing page<br/>AAX_ERROR_INVALID_ARGUMENT if iIndex is negative<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter which will be mapped<br/>in iPage The target page index<br/>in iIndex The target parameter slot index within the target page<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.122 AAX_IPageTable Class Reference 895<br/></b></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.10 GetNumParametersWithNameVariations()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::GetNumParametersWithNameVariations (<br/>int32_t &amp; oNumParameterIdentifiers ) const [pure virtual]<br/></p>
<p>Get the number of parameters with name variations defined for the current table type<br/></p>
<p>Provides the number of parameters with lt;ControlNameVariationslt; which are explicitly defined for<br/>the current page table type.<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetNameVariationParameterIDAtIndex()<br/></p>
<p><b>Parameters<br/></b>out oNumParameterIdentifiers The number of parameters with name variations explicitly<br/></p>
<p>associated with the current table type.<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.11 GetNameVariationParameterIDAtIndex()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::GetNameVariationParameterIDAtIndex (<br/>int32_t iIndex,<br/>AAX_IString &amp; oParameterIdentifier ) const [pure virtual]<br/></p>
<p>Get the identifier for a parameter with name variations defined for the current table type<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetNumParametersWithNameVariations()<br/></p>
<p><b>Parameters<br/></b>in iIndex The target parameter index within the list of parameters with explicit<br/></p>
<p>name variations defined for this table type.<br/>out oParameterIdentifier The identifier used for the parameter in the page table name variations<br/></p>
<p>list (may be parameter name or ID)<br/><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>896 Class Documentation<br/></b></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.12 GetNumNameVariationsForParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::GetNumNameVariationsForParameter (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>int32_t &amp; oNumVariations ) const [pure virtual]<br/></p>
<p>Get the number of name variations defined for a parameter<br/></p>
<p>Provides the number of lt;ControlNameVariationslt; which are explicitly defined for iParameter&#8592;&#8617;<br/>Identifier for the current page table type. No fallback logic is used to resolve this to the list of variations which<br/>would actually be used for an attached control surface if no explicit variations are defined for the current table type.<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetParameterNameVariationAtIndex()<br/><b>Returns<br/></b></p>
<p>AAX_SUCCESS and provides zero to oNumVariations if iParameterIdentifier is not<br/>found<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>out oNumVariations The number of name variations which are defined for this parameter and<br/></p>
<p>explicitly associated with the current table type.<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.13 GetParameterNameVariationAtIndex()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::GetParameterNameVariationAtIndex (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>int32_t iIndex,<br/>AAX_IString &amp; oNameVariation,<br/>int32_t &amp; oLength ) const [pure virtual]<br/></p>
<p>Get a parameter name variation from the page table<br/></p>
<p>Only returns lt;ControlNameVariationslt; which are explicitly defined for the current page table type.<br/>No fallback logic is used to resolve this to the abbreviation which would actually be shown on an attached control<br/>surface if no explicit variation is defined for the current table type.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.122 AAX_IPageTable Class Reference 897<br/></b></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetNumNameVariationsForParameter()<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetParameterNameVariationOfLength()<br/><b>Returns<br/></b></p>
<p>AAX_ERROR_NO_ABBREVIATED_PARAMETER_NAME if no suitable variation is defined for this table<br/>AAX_ERROR_ARGUMENT_OUT_OF_RANGE if iIndex is out of range<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>in iIndex Index of the name variation<br/>out oNameVariation The name variation, if one is explicitly defined for this table type<br/>out oLength The length value for this name variation. This corresponds to the<br/></p>
<p>variation's sz attribute in the page table XML and may be different from<br/>the string length of iNameVariation.<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.14 GetParameterNameVariationOfLength()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::GetParameterNameVariationOfLength (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>int32_t iLength,<br/>AAX_IString &amp; oNameVariation ) const [pure virtual]<br/></p>
<p>Get a parameter name variation of a particular length from the page table<br/></p>
<p>Only returns lt;ControlNameVariationslt; which are explicitly defined of iLength for the current page<br/>table type. No fallback logic is used to resolve this to the abbreviation which would actually be shown on an attached<br/>control surface if no explicit variation is defined for the specified length or current table type.<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetParameterNameVariationAtIndex()<br/><b>Returns<br/></b></p>
<p>AAX_ERROR_NO_ABBREVIATED_PARAMETER_NAME if no suitable variation is defined for this table<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>898 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>in iLength The variation length to check, i.e. the sz attribute for the name variation<br/></p>
<p>in the page table XML<br/>out oNameVariation The name variation, if one is explicitly defined for this table type and<br/></p>
<p>iLength<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.15 ClearParameterNameVariations()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::ClearParameterNameVariations ( ) [pure virtual]<br/></p>
<p>Clears all name variations for the current page table type<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p><b>See also<br/></b>AAX_IPageTable::Clear()<br/>AAX_IPageTable::ClearNameVariationsForParameter()<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.16 ClearNameVariationsForParameter()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::ClearNameVariationsForParameter (<br/>AAX_CPageTableParamID iParameterIdentifier ) [pure virtual]<br/></p>
<p>Clears all name variations for a single parameter for the current page table type<br/></p>
<p><b>Warning<br/></b>This will invalidate the list of parameter name variations indices, i.e. the parameter identifier associated with<br/>each index by AAX_IPageTable::GetNameVariationParameterIDAtIndex()<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p><b>See also<br/></b>AAX_IPageTable::Clear()<br/>AAX_IPageTable::ClearParameterNameVariations()<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS and provides zero to oNumVariations if iParameterIdentifier is not found<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.122 AAX_IPageTable Class Reference 899<br/></b></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p><b>14.122.3.17 SetParameterNameVariation()<br/></b></p>
<p>virtual AAX_Result AAX_IPageTable::SetParameterNameVariation (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>const AAX_IString &amp; iNameVariation,<br/>int32_t iLength ) [pure virtual]<br/></p>
<p>Sets a name variation explicitly for the current page table type<br/></p>
<p>This will add a new name variation or overwrite the existing name variation with the same length which is defined<br/>for the current table type.<br/></p>
<p><b>Warning<br/></b>If no name variation previously existed for this parameter then this will invalidate the list of parameter name<br/>variations indices, i.e. the parameter identifier associated with each index by AAX_IPageTable::GetNameVariationParameterIDAtIndex()<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iNameVariation is empty or if iLength is less than zero<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>in iNameVariation The new parameter name variation<br/>in iLength The length value for this name variation. This corresponds to the variation's sz<br/></p>
<p>attribute in the page table XML and is not required to match the length of<br/>iNameVariation.<br/></p>
<p>Implemented in AAX_VPageTable.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IPageTable.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>900 Class Documentation<br/></b></p>
<p><b>14.123 AAX_IParameter Class Reference<br/></b></p>
<p>#include &lt;AAX_IParameter.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IParameter:<br/></p>
<p><b>14.123.1 Description<br/></b></p>
<p>The base interface for all normalizable plug-in parameters.<br/></p>
<p><b>:Internal to the AAX SDK<br/></b></p>
<p>This class is an outside interface for an arbitrarily typed parameter. The subclasses of this generic interface hold<br/>the parameter's state and conversion functionality.<br/></p>
<p><b>Note<br/></b>This class is not part of the AAX ABI and must not be passed between the plug-in and the host. Version<br/>checking is recommended when passing references to this interface between plug-in modules (e.g. between<br/>the data model and the GUI)<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IParameter ()<br/>Virtual destructor.<br/></p>
<p>&#8226; virtual AAX_IParameterValue &#8727; CloneValue () const =0<br/>Clone the parameter's value to a new AAX_IParameterValue object.<br/></p>
<p><b>Identification methods<br/></b></p>
<p>&#8226; virtual AAX_CParamID Identifier () const =0<br/>Returns the parameter's unique identifier.<br/></p>
<p>&#8226; virtual void SetName (const AAX_CString &amp;name)=0<br/>Sets the parameter's display name.<br/></p>
<p>&#8226; virtual const AAX_CString &amp; Name () const =0<br/>Returns the parameter's display name.<br/></p>
<p>&#8226; virtual void AddShortenedName (const AAX_CString &amp;name)=0<br/>Sets the parameter's shortened display name.<br/></p>
<p>&#8226; virtual const AAX_CString &amp; ShortenedName (int32_t iNumCharacters) const =0<br/>Returns the parameter's shortened display name.<br/></p>
<p>&#8226; virtual void ClearShortenedNames ()=0<br/>Clears the internal list of shortened display names.<br/></p>
<p><b>Automation methods<br/></b></p>
<p>&#8226; virtual bool Automatable () const =0<br/>Returns true if the parameter is automatable, false if it is not.<br/></p>
<p>&#8226; virtual void SetAutomationDelegate (AAX_IAutomationDelegate &#8727;iAutomationDelegate)=0<br/>Sets the automation delegate (if one is required)<br/></p>
<p>&#8226; virtual void Touch ()=0<br/>Signals the automation system that a control has been touched.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.123 AAX_IParameter Class Reference 901<br/></b></p>
<p>&#8226; virtual void Release ()=0<br/>Signals the automation system that a control has been released.<br/></p>
<p><b>Taper methods<br/></b></p>
<p>&#8226; virtual void SetNormalizedValue (double newNormalizedValue)=0<br/>Sets a parameter value using it's normalized representation.<br/></p>
<p>&#8226; virtual double GetNormalizedValue () const =0<br/>Returns the normalized representation of the parameter's current real value.<br/></p>
<p>&#8226; virtual void SetNormalizedDefaultValue (double normalizedDefault)=0<br/>Sets the parameter's default value using its normalized representation.<br/></p>
<p>&#8226; virtual double GetNormalizedDefaultValue () const =0<br/>Returns the normalized representation of the parameter's real default value.<br/></p>
<p>&#8226; virtual void SetToDefaultValue ()=0<br/>Restores the state of this parameter to its default value.<br/></p>
<p>&#8226; virtual void SetNumberOfSteps (uint32_t numSteps)=0<br/>Sets the number of discrete steps for this parameter.<br/></p>
<p>&#8226; virtual uint32_t GetNumberOfSteps () const =0<br/>Returns the number of discrete steps used by the parameter.<br/></p>
<p>&#8226; virtual uint32_t GetStepValue () const =0<br/>Returns the current step for the current value of the parameter.<br/></p>
<p>&#8226; virtual double GetNormalizedValueFromStep (uint32_t iStep) const =0<br/>Returns the normalized value for a given step.<br/></p>
<p>&#8226; virtual uint32_t GetStepValueFromNormalizedValue (double normalizedValue) const =0<br/>Returns the step value for a normalized value of the parameter.<br/></p>
<p>&#8226; virtual void SetStepValue (uint32_t iStep)=0<br/>Returns the current step for the current value of the parameter.<br/></p>
<p><b>Display methods<br/></b>This functionality is most often used by GUIs, but can also be useful for state serialization.<br/></p>
<p>&#8226; virtual bool GetValueString (AAX_CString &#8727;valueString) const =0<br/>Serializes the parameter value into a string.<br/></p>
<p>&#8226; virtual bool GetValueString (int32_t iMaxNumChars, AAX_CString &#8727;valueString) const =0<br/>Serializes the parameter value into a string, size hint included.<br/></p>
<p>&#8226; virtual bool GetNormalizedValueFromBool (bool value, double &#8727;normalizedValue) const =0<br/>Converts a bool to a normalized parameter value.<br/></p>
<p>&#8226; virtual bool GetNormalizedValueFromInt32 (int32_t value, double &#8727;normalizedValue) const =0<br/>Converts an integer to a normalized parameter value.<br/></p>
<p>&#8226; virtual bool GetNormalizedValueFromFloat (float value, double &#8727;normalizedValue) const =0<br/>Converts a float to a normalized parameter value.<br/></p>
<p>&#8226; virtual bool GetNormalizedValueFromDouble (double value, double &#8727;normalizedValue) const =0<br/>Converts a double to a normalized parameter value.<br/></p>
<p>&#8226; virtual bool GetNormalizedValueFromString (const AAX_CString &amp;valueString, double &#8727;normalizedValue)<br/>const =0<br/></p>
<p>Converts a given string to a normalized parameter value.<br/>&#8226; virtual bool GetBoolFromNormalizedValue (double normalizedValue, bool &#8727;value) const =0<br/></p>
<p>Converts a normalized parameter value to a bool representing the corresponding real value.<br/>&#8226; virtual bool GetInt32FromNormalizedValue (double normalizedValue, int32_t &#8727;value) const =0<br/></p>
<p>Converts a normalized parameter value to an integer representing the corresponding real value.<br/>&#8226; virtual bool GetFloatFromNormalizedValue (double normalizedValue, float &#8727;value) const =0<br/></p>
<p>Converts a normalized parameter value to a float representing the corresponding real value.<br/>&#8226; virtual bool GetDoubleFromNormalizedValue (double normalizedValue, double &#8727;value) const =0<br/></p>
<p>Converts a normalized parameter value to a double representing the corresponding real value.<br/>&#8226; virtual bool GetStringFromNormalizedValue (double normalizedValue, AAX_CString &amp;valueString) const<br/></p>
<p>=0<br/>Converts a normalized parameter value to a string representing the corresponding real value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>902 Class Documentation<br/></b></p>
<p>&#8226; virtual bool GetStringFromNormalizedValue (double normalizedValue, int32_t iMaxNumChars,<br/>AAX_CString &amp;valueString) const =0<br/></p>
<p>Converts a normalized parameter value to a string representing the corresponding real, size hint included. value.<br/>&#8226; virtual bool SetValueFromString (const AAX_CString &amp;newValueString)=0<br/></p>
<p>Converts a string to a real parameter value and sets the parameter to this value.<br/></p>
<p><b>Typed accessors<br/></b></p>
<p>&#8226; virtual bool GetValueAsBool (bool &#8727;value) const =0<br/>Retrieves the parameter's value as a bool.<br/></p>
<p>&#8226; virtual bool GetValueAsInt32 (int32_t &#8727;value) const =0<br/>Retrieves the parameter's value as an int32_t.<br/></p>
<p>&#8226; virtual bool GetValueAsFloat (float &#8727;value) const =0<br/>Retrieves the parameter's value as a float.<br/></p>
<p>&#8226; virtual bool GetValueAsDouble (double &#8727;value) const =0<br/>Retrieves the parameter's value as a double.<br/></p>
<p>&#8226; virtual bool GetValueAsString (AAX_IString &#8727;value) const =0<br/>Retrieves the parameter's value as a string.<br/></p>
<p>&#8226; virtual bool SetValueWithBool (bool value)=0<br/>Sets the parameter's value as a bool.<br/></p>
<p>&#8226; virtual bool SetValueWithInt32 (int32_t value)=0<br/>Sets the parameter's value as an int32_t.<br/></p>
<p>&#8226; virtual bool SetValueWithFloat (float value)=0<br/>Sets the parameter's value as a float.<br/></p>
<p>&#8226; virtual bool SetValueWithDouble (double value)=0<br/>Sets the parameter's value as a double.<br/></p>
<p>&#8226; virtual bool SetValueWithString (const AAX_IString &amp;value)=0<br/>Sets the parameter's value as a string.<br/></p>
<p>&#8226; virtual void SetType (AAX_EParameterType iControlType)=0<br/>Sets the type of this parameter.<br/></p>
<p>&#8226; virtual AAX_EParameterType GetType () const =0<br/>Returns the type of this parameter as an AAX_EParameterType.<br/></p>
<p>&#8226; virtual void SetOrientation (AAX_EParameterOrientation iOrientation)=0<br/>Sets the orientation of this parameter.<br/></p>
<p>&#8226; virtual AAX_EParameterOrientation GetOrientation () const =0<br/>Returns the orientation of this parameter.<br/></p>
<p>&#8226; virtual void SetTaperDelegate (AAX_ITaperDelegateBase &amp;inTaperDelegate, bool inPreserveValue)=0<br/>Sets the parameter's taper delegate.<br/></p>
<p>&#8226; virtual void SetDisplayDelegate (AAX_IDisplayDelegateBase &amp;inDisplayDelegate)=0<br/>Sets the parameter's display delegate.<br/></p>
<p><b>Host interface methods<br/></b></p>
<p>&#8226; virtual void UpdateNormalizedValue (double newNormalizedValue)=0<br/>Sets the parameter's state given a normalized value.<br/></p>
<p><b>14.123.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.123.2.1 </b>&#8764;<b>AAX_IParameter()<br/></b></p>
<p>virtual AAX_IParameter::&#8764;AAX_IParameter ( ) [inline], [virtual]<br/></p>
<p>Virtual destructor.<br/></p>
<p><b>Note<br/></b>This destructor MUST be virtual to prevent memory leaks.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.123 AAX_IParameter Class Reference 903<br/></b></p>
<p><b>14.123.3 Member Function Documentation<br/></b></p>
<p><b>14.123.3.1 CloneValue()<br/></b></p>
<p>virtual AAX_IParameterValue&#8727; AAX_IParameter::CloneValue ( ) const [pure virtual]<br/></p>
<p>Clone the parameter's value to a new AAX_IParameterValue object.<br/></p>
<p>The returned object is independent from the AAX_IParameter. For example, changing the state of the returned<br/>object will not result in a change to the original AAX_IParameter.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::GenerateCoefficients().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.123.3.2 Identifier()<br/></b></p>
<p>virtual AAX_CParamID AAX_IParameter::Identifier ( ) const [pure virtual]<br/></p>
<p>Returns the parameter's unique identifier.<br/></p>
<p>This unique ID is used by the Parameter Manager and by outside applications to uniquely identify and target control<br/>messages. This value may not be changed after the parameter has been constructed.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::AddSynchronizedParameter(), and AAX_CMonolithicParameters::&#8592;&#8617;<br/>GenerateCoefficients().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.123.3.3 SetName()<br/></b></p>
<p>virtual void AAX_IParameter::SetName (<br/>const AAX_CString &amp; name ) [pure virtual]<br/></p>
<p>Sets the parameter's display name.<br/></p>
<p>This name is used for display only, it is not used for indexing or identifying the parameter This name may be changed<br/>after the parameter has been created, but display name changes may not be recognized by all AAX hosts.<br/></p>
<p><b>Parameters<br/></b>in name Display name that will be assigned to the parameter<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>904 Class Documentation<br/></b></p>
<p><b>14.123.3.4 Name()<br/></b></p>
<p>virtual const AAX_CString&amp; AAX_IParameter::Name ( ) const [pure virtual]<br/></p>
<p>Returns the parameter's display name.<br/></p>
<p><b>Note<br/></b>This method returns a const reference in order to prevent a string copy. Do not cast away the const to change<br/>this value.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.5 AddShortenedName()<br/></b></p>
<p>virtual void AAX_IParameter::AddShortenedName (<br/>const AAX_CString &amp; name ) [pure virtual]<br/></p>
<p>Sets the parameter's shortened display name.<br/></p>
<p>This name is used for display only, it is not used for indexing or identifying the parameter These names show<br/>up when the host asks for shorter length parameter names for display on Control Surfaces or other string length<br/>constrained situations.<br/></p>
<p><b>Parameters<br/></b>in name Shortened display names that will be assigned to the parameter<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.6 ShortenedName()<br/></b></p>
<p>virtual const AAX_CString&amp; AAX_IParameter::ShortenedName (<br/>int32_t iNumCharacters ) const [pure virtual]<br/></p>
<p>Returns the parameter's shortened display name.<br/></p>
<p><b>Note<br/></b>This method returns a const reference in order to prevent a string copy. Do not cast away the const to change<br/>this value.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.123 AAX_IParameter Class Reference 905<br/></b></p>
<p><b>14.123.3.7 ClearShortenedNames()<br/></b></p>
<p>virtual void AAX_IParameter::ClearShortenedNames ( ) [pure virtual]<br/></p>
<p>Clears the internal list of shortened display names.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.8 Automatable()<br/></b></p>
<p>virtual bool AAX_IParameter::Automatable ( ) const [pure virtual]<br/></p>
<p>Returns true if the parameter is automatable, false if it is not.<br/></p>
<p><b>Note<br/></b>Subclasses that return true in this method must support host-based automation.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::AddSynchronizedParameter().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.123.3.9 SetAutomationDelegate()<br/></b></p>
<p>virtual void AAX_IParameter::SetAutomationDelegate (<br/>AAX_IAutomationDelegate &#8727; iAutomationDelegate ) [pure virtual]<br/></p>
<p>Sets the automation delegate (if one is required)<br/></p>
<p><b>Parameters<br/></b>in iAutomationDelegate A reference to the parameter manager's automation delegate interface<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.10 Touch()<br/></b></p>
<p>virtual void AAX_IParameter::Touch ( ) [pure virtual]<br/></p>
<p>Signals the automation system that a control has been touched.<br/>Call this method in response to GUI events that begin editing, such as a mouse down. After this method has been<br/>called you are free to call SetNormalizedValue() as much as you need, e.g. in order to respond to subsequent<br/>mouse moved events. Call Release() to free the parameter for updates from other controls.<br/>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>906 Class Documentation<br/></b></p>
<p><b>14.123.3.11 Release()<br/></b></p>
<p>virtual void AAX_IParameter::Release ( ) [pure virtual]<br/></p>
<p>Signals the automation system that a control has been released.<br/></p>
<p>Call this method in response to GUI events that complete editing, such as a mouse up. Once this method has been<br/>called you should not call SetNormalizedValue() again until after the next call to Touch().<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.12 SetNormalizedValue()<br/></b></p>
<p>virtual void AAX_IParameter::SetNormalizedValue (<br/>double newNormalizedValue ) [pure virtual]<br/></p>
<p>Sets a parameter value using it's normalized representation.<br/></p>
<p>For more information regarding normalized values, see Parameter Manager<br/></p>
<p><b>Parameters<br/></b>in newNormalizedValue New value (normalized) to which the parameter will be set<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.13 GetNormalizedValue()<br/></b></p>
<p>virtual double AAX_IParameter::GetNormalizedValue ( ) const [pure virtual]<br/></p>
<p>Returns the normalized representation of the parameter's current real value.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.14 SetNormalizedDefaultValue()<br/></b></p>
<p>virtual void AAX_IParameter::SetNormalizedDefaultValue (<br/>double normalizedDefault ) [pure virtual]<br/></p>
<p>Sets the parameter's default value using its normalized representation.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.123 AAX_IParameter Class Reference 907<br/></b></p>
<p><b>14.123.3.15 GetNormalizedDefaultValue()<br/></b></p>
<p>virtual double AAX_IParameter::GetNormalizedDefaultValue ( ) const [pure virtual]<br/></p>
<p>Returns the normalized representation of the parameter's real default value.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.16 SetToDefaultValue()<br/></b></p>
<p>virtual void AAX_IParameter::SetToDefaultValue ( ) [pure virtual]<br/></p>
<p>Restores the state of this parameter to its default value.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.17 SetNumberOfSteps()<br/></b></p>
<p>virtual void AAX_IParameter::SetNumberOfSteps (<br/>uint32_t numSteps ) [pure virtual]<br/></p>
<p>Sets the number of discrete steps for this parameter.<br/></p>
<p>Stepped parameter values are useful for discrete parameters and for &quot;jumping&quot; events such as mouse wheels, page<br/>up/down, etc. The parameter's step size is used to specify the coarseness of those changes.<br/></p>
<p><b>Note<br/></b>numSteps MUST be greater than zero. All other values may be considered an error by the host.<br/></p>
<p><b>Parameters<br/></b>in numSteps The number of steps that the parameter will use<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.18 GetNumberOfSteps()<br/></b></p>
<p>virtual uint32_t AAX_IParameter::GetNumberOfSteps ( ) const [pure virtual]<br/></p>
<p>Returns the number of discrete steps used by the parameter.<br/>See SetNumberOfSteps() for more information about parameter steps.<br/>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>908 Class Documentation<br/></b></p>
<p><b>14.123.3.19 GetStepValue()<br/></b></p>
<p>virtual uint32_t AAX_IParameter::GetStepValue ( ) const [pure virtual]<br/></p>
<p>Returns the current step for the current value of the parameter.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.20 GetNormalizedValueFromStep()<br/></b></p>
<p>virtual double AAX_IParameter::GetNormalizedValueFromStep (<br/>uint32_t iStep ) const [pure virtual]<br/></p>
<p>Returns the normalized value for a given step.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.21 GetStepValueFromNormalizedValue()<br/></b></p>
<p>virtual uint32_t AAX_IParameter::GetStepValueFromNormalizedValue (<br/>double normalizedValue ) const [pure virtual]<br/></p>
<p>Returns the step value for a normalized value of the parameter.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.22 SetStepValue()<br/></b></p>
<p>virtual void AAX_IParameter::SetStepValue (<br/>uint32_t iStep ) [pure virtual]<br/></p>
<p>Returns the current step for the current value of the parameter.<br/></p>
<p>See SetNumberOfSteps() for more information about parameter steps.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.23 GetValueString() [1/2]<br/></b></p>
<p>virtual bool AAX_IParameter::GetValueString (<br/>AAX_CString &#8727; valueString ) const [pure virtual]<br/></p>
<p>Serializes the parameter value into a string.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.123 AAX_IParameter Class Reference 909<br/></b></p>
<p><b>Parameters<br/></b>out valueString A string representing the parameter's real value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.24 GetValueString() [2/2]<br/></b></p>
<p>virtual bool AAX_IParameter::GetValueString (<br/>int32_t iMaxNumChars,<br/>AAX_CString &#8727; valueString ) const [pure virtual]<br/></p>
<p>Serializes the parameter value into a string, size hint included.<br/></p>
<p><b>Parameters<br/></b>in iMaxNumChars A size hint for the size of the string being requested. Useful for control surfaces and<br/></p>
<p>other limited area text fields. (make sure that size of desired string also has room<br/>for null termination)<br/></p>
<p>out valueString A string representing the parameter's real value<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.25 GetNormalizedValueFromBool()<br/></b></p>
<p>virtual bool AAX_IParameter::GetNormalizedValueFromBool (<br/>bool value,<br/>double &#8727; normalizedValue ) const [pure virtual]<br/></p>
<p>Converts a bool to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>910 Class Documentation<br/></b></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.26 GetNormalizedValueFromInt32()<br/></b></p>
<p>virtual bool AAX_IParameter::GetNormalizedValueFromInt32 (<br/>int32_t value,<br/>double &#8727; normalizedValue ) const [pure virtual]<br/></p>
<p>Converts an integer to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.27 GetNormalizedValueFromFloat()<br/></b></p>
<p>virtual bool AAX_IParameter::GetNormalizedValueFromFloat (<br/>float value,<br/>double &#8727; normalizedValue ) const [pure virtual]<br/></p>
<p>Converts a float to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.123 AAX_IParameter Class Reference 911<br/></b></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.28 GetNormalizedValueFromDouble()<br/></b></p>
<p>virtual bool AAX_IParameter::GetNormalizedValueFromDouble (<br/>double value,<br/>double &#8727; normalizedValue ) const [pure virtual]<br/></p>
<p>Converts a double to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in value A value for the parameter<br/>out normalizedValue The normalized parameter value associated with value<br/></p>
<p><b>Return values<br/></b>true The value conversion was successful<br/></p>
<p>false The value conversion was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.29 GetNormalizedValueFromString()<br/></b></p>
<p>virtual bool AAX_IParameter::GetNormalizedValueFromString (<br/>const AAX_CString &amp; valueString,<br/>double &#8727; normalizedValue ) const [pure virtual]<br/></p>
<p>Converts a given string to a normalized parameter value.<br/></p>
<p><b>Parameters<br/></b>in valueString A string representing a possible real value for the parameter<br/>out normalizedValue The normalized parameter value associated with valueString<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implemented in AAX_CParameter&lt; T &gt;, and AAX_CStatelessParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>912 Class Documentation<br/></b></p>
<p><b>14.123.3.30 GetBoolFromNormalizedValue()<br/></b></p>
<p>virtual bool AAX_IParameter::GetBoolFromNormalizedValue (<br/>double normalizedValue,<br/>bool &#8727; value ) const [pure virtual]<br/></p>
<p>Converts a normalized parameter value to a bool representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to bool was successful<br/></p>
<p>false The conversion to bool was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.31 GetInt32FromNormalizedValue()<br/></b></p>
<p>virtual bool AAX_IParameter::GetInt32FromNormalizedValue (<br/>double normalizedValue,<br/>int32_t &#8727; value ) const [pure virtual]<br/></p>
<p>Converts a normalized parameter value to an integer representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to int32_t was successful<br/></p>
<p>false The conversion to int32_t was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.32 GetFloatFromNormalizedValue()<br/></b></p>
<p>virtual bool AAX_IParameter::GetFloatFromNormalizedValue (<br/>double normalizedValue,<br/>float &#8727; value ) const [pure virtual]<br/></p>
<p>Converts a normalized parameter value to a float representing the corresponding real value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.123 AAX_IParameter Class Reference 913<br/></b></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to float was successful<br/></p>
<p>false The conversion to float was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.33 GetDoubleFromNormalizedValue()<br/></b></p>
<p>virtual bool AAX_IParameter::GetDoubleFromNormalizedValue (<br/>double normalizedValue,<br/>double &#8727; value ) const [pure virtual]<br/></p>
<p>Converts a normalized parameter value to a double representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value to convert<br/>out value The converted value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to double was successful<br/></p>
<p>false The conversion to double was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.34 GetStringFromNormalizedValue() [1/2]<br/></b></p>
<p>virtual bool AAX_IParameter::GetStringFromNormalizedValue (<br/>double normalizedValue,<br/>AAX_CString &amp; valueString ) const [pure virtual]<br/></p>
<p>Converts a normalized parameter value to a string representing the corresponding real value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue A normalized parameter value<br/>out valueString A string representing the parameter value associated with normalizedValue<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>914 Class Documentation<br/></b></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.35 GetStringFromNormalizedValue() [2/2]<br/></b></p>
<p>virtual bool AAX_IParameter::GetStringFromNormalizedValue (<br/>double normalizedValue,<br/>int32_t iMaxNumChars,<br/>AAX_CString &amp; valueString ) const [pure virtual]<br/></p>
<p>Converts a normalized parameter value to a string representing the corresponding real, size hint included. value.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue A normalized parameter value<br/>in iMaxNumChars A size hint for the size of the string being requested. Useful for control surfaces<br/></p>
<p>and other limited area text fields. (make sure that size of desired string also has<br/>room for null termination)<br/></p>
<p>out valueString A string representing the parameter value associated with normalizedValue<br/></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.36 SetValueFromString()<br/></b></p>
<p>virtual bool AAX_IParameter::SetValueFromString (<br/>const AAX_CString &amp; newValueString ) [pure virtual]<br/></p>
<p>Converts a string to a real parameter value and sets the parameter to this value.<br/></p>
<p><b>Parameters<br/></b>in newValueString A string representing the parameter's new real value<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.123 AAX_IParameter Class Reference 915<br/></b></p>
<p><b>Return values<br/></b>true The string conversion was successful<br/></p>
<p>false The string conversion was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.37 GetValueAsBool()<br/></b></p>
<p>virtual bool AAX_IParameter::GetValueAsBool (<br/>bool &#8727; value ) const [pure virtual]<br/></p>
<p>Retrieves the parameter's value as a bool.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to bool was successful<br/></p>
<p>false The conversion to bool was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.38 GetValueAsInt32()<br/></b></p>
<p>virtual bool AAX_IParameter::GetValueAsInt32 (<br/>int32_t &#8727; value ) const [pure virtual]<br/></p>
<p>Retrieves the parameter's value as an int32_t.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to int32_t was successful<br/></p>
<p>false The conversion to int32_t was unsuccessful<br/></p>
<p>Implemented in AAX_CParameter&lt; T &gt;, and AAX_CStatelessParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>916 Class Documentation<br/></b></p>
<p><b>14.123.3.39 GetValueAsFloat()<br/></b></p>
<p>virtual bool AAX_IParameter::GetValueAsFloat (<br/>float &#8727; value ) const [pure virtual]<br/></p>
<p>Retrieves the parameter's value as a float.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to float was successful<br/></p>
<p>false The conversion to float was unsuccessful<br/></p>
<p>Implemented in AAX_CParameter&lt; T &gt;, and AAX_CStatelessParameter.<br/></p>
<p><b>14.123.3.40 GetValueAsDouble()<br/></b></p>
<p>virtual bool AAX_IParameter::GetValueAsDouble (<br/>double &#8727; value ) const [pure virtual]<br/></p>
<p>Retrieves the parameter's value as a double.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to double was successful<br/></p>
<p>false The conversion to double was unsuccessful<br/></p>
<p>Implemented in AAX_CParameter&lt; T &gt;, and AAX_CStatelessParameter.<br/></p>
<p><b>14.123.3.41 GetValueAsString()<br/></b></p>
<p>virtual bool AAX_IParameter::GetValueAsString (<br/>AAX_IString &#8727; value ) const [pure virtual]<br/></p>
<p>Retrieves the parameter's value as a string.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.123 AAX_IParameter Class Reference 917<br/></b></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to string was successful<br/></p>
<p>false The conversion to string was unsuccessful<br/></p>
<p>Implemented in AAX_CParameter&lt; T &gt;, AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.42 SetValueWithBool()<br/></b></p>
<p>virtual bool AAX_IParameter::SetValueWithBool (<br/>bool value ) [pure virtual]<br/></p>
<p>Sets the parameter's value as a bool.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from bool was successful<br/></p>
<p>false The conversion from bool was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.43 SetValueWithInt32()<br/></b></p>
<p>virtual bool AAX_IParameter::SetValueWithInt32 (<br/>int32_t value ) [pure virtual]<br/></p>
<p>Sets the parameter's value as an int32_t.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from int32_t was successful<br/></p>
<p>false The conversion from int32_t was unsuccessful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>918 Class Documentation<br/></b></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.44 SetValueWithFloat()<br/></b></p>
<p>virtual bool AAX_IParameter::SetValueWithFloat (<br/>float value ) [pure virtual]<br/></p>
<p>Sets the parameter's value as a float.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from float was successful<br/></p>
<p>false The conversion from float was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.45 SetValueWithDouble()<br/></b></p>
<p>virtual bool AAX_IParameter::SetValueWithDouble (<br/>double value ) [pure virtual]<br/></p>
<p>Sets the parameter's value as a double.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from double was successful<br/></p>
<p>false The conversion from double was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.46 SetValueWithString()<br/></b></p>
<p>virtual bool AAX_IParameter::SetValueWithString (<br/>const AAX_IString &amp; value ) [pure virtual]<br/></p>
<p>Sets the parameter's value as a string.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.123 AAX_IParameter Class Reference 919<br/></b></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion from string was successful<br/></p>
<p>false The conversion from string was unsuccessful<br/></p>
<p>Implemented in AAX_CStatelessParameter, AAX_CParameter&lt; T &gt;, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.47 SetType()<br/></b></p>
<p>virtual void AAX_IParameter::SetType (<br/>AAX_EParameterType iControlType ) [pure virtual]<br/></p>
<p>Sets the type of this parameter.<br/></p>
<p>See GetType for use cases<br/></p>
<p><b>Parameters<br/></b>in iControlType The parameter's new type as an AAX_EParameterType<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.48 GetType()<br/></b></p>
<p>virtual AAX_EParameterType AAX_IParameter::GetType ( ) const [pure virtual]<br/></p>
<p>Returns the type of this parameter as an AAX_EParameterType.<br/></p>
<p><b>Todo </b>Document use cases for control type<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.49 SetOrientation()<br/></b></p>
<p>virtual void AAX_IParameter::SetOrientation (<br/>AAX_EParameterOrientation iOrientation ) [pure virtual]<br/></p>
<p>Sets the orientation of this parameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>920 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in iOrientation The parameter's new orientation<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.50 GetOrientation()<br/></b></p>
<p>virtual AAX_EParameterOrientation AAX_IParameter::GetOrientation ( ) const [pure virtual]<br/></p>
<p>Returns the orientation of this parameter.<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p><b>14.123.3.51 SetTaperDelegate()<br/></b></p>
<p>virtual void AAX_IParameter::SetTaperDelegate (<br/>AAX_ITaperDelegateBase &amp; inTaperDelegate,<br/>bool inPreserveValue ) [pure virtual]<br/></p>
<p>Sets the parameter's taper delegate.<br/></p>
<p><b>Parameters<br/></b>in inTaperDelegate A reference to the parameter's new taper delegate<br/>in inPreserveValue<br/></p>
<p><b>Todo </b>Document this parameter<br/></p>
<p>Implemented in AAX_CParameter&lt; T &gt;, and AAX_CStatelessParameter.<br/></p>
<p><b>14.123.3.52 SetDisplayDelegate()<br/></b></p>
<p>virtual void AAX_IParameter::SetDisplayDelegate (<br/>AAX_IDisplayDelegateBase &amp; inDisplayDelegate ) [pure virtual]<br/></p>
<p>Sets the parameter's display delegate.<br/></p>
<p><b>Parameters<br/></b>in inDisplayDelegate A reference to the parameter's new display delegate<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.124 AAX_IParameterValue Class Reference 921<br/></b></p>
<p>Implemented in AAX_CParameter&lt; T &gt;, and AAX_CStatelessParameter.<br/></p>
<p><b>14.123.3.53 UpdateNormalizedValue()<br/></b></p>
<p>virtual void AAX_IParameter::UpdateNormalizedValue (<br/>double newNormalizedValue ) [pure virtual]<br/></p>
<p>Sets the parameter's state given a normalized value.<br/></p>
<p>This is the second half of the parameter setting operation that is initiated with a call to SetValue(). Parameters<br/>should not be set directly using this method; instead, use SetValue().<br/></p>
<p><b>Parameters<br/></b>in newNormalizedValue Normalized value that will be used to set the parameter's new state<br/></p>
<p>Implemented in AAX_CStatelessParameter, and AAX_CParameter&lt; T &gt;.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IParameter.h<br/></p>
<p><b>14.124 AAX_IParameterValue Class Reference<br/></b></p>
<p>#include &lt;AAX_IParameter.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IParameterValue:<br/></p>
<p><b>14.124.1 Description<br/></b></p>
<p>An abstract interface representing a parameter value of arbitrary type.<br/></p>
<p><b>:Internal to the AAX SDK<br/></b></p>
<p><b>See also<br/></b>AAX_IParameter<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>922 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;AAX_IParameterValue ()<br/></p>
<p>Virtual destructor.<br/>&#8226; virtual AAX_IParameterValue &#8727; Clone () const =0<br/></p>
<p>Clones the parameter object.<br/>&#8226; virtual AAX_CParamID Identifier () const =0<br/></p>
<p>Returns the parameter's unique identifier.<br/></p>
<p><b>Typed accessors<br/></b></p>
<p>&#8226; virtual bool GetValueAsBool (bool &#8727;value) const =0<br/>Retrieves the parameter's value as a bool.<br/></p>
<p>&#8226; virtual bool GetValueAsInt32 (int32_t &#8727;value) const =0<br/>Retrieves the parameter's value as an int32_t.<br/></p>
<p>&#8226; virtual bool GetValueAsFloat (float &#8727;value) const =0<br/>Retrieves the parameter's value as a float.<br/></p>
<p>&#8226; virtual bool GetValueAsDouble (double &#8727;value) const =0<br/>Retrieves the parameter's value as a double.<br/></p>
<p>&#8226; virtual bool GetValueAsString (AAX_IString &#8727;value) const =0<br/>Retrieves the parameter's value as a string.<br/></p>
<p><b>14.124.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.124.2.1 </b>&#8764;<b>AAX_IParameterValue()<br/></b></p>
<p>virtual AAX_IParameterValue::&#8764;AAX_IParameterValue ( ) [inline], [virtual]<br/></p>
<p>Virtual destructor.<br/></p>
<p><b>Note<br/></b>This destructor MUST be virtual to prevent memory leaks.<br/></p>
<p><b>14.124.3 Member Function Documentation<br/></b></p>
<p><b>14.124.3.1 Clone()<br/></b></p>
<p>virtual AAX_IParameterValue&#8727; AAX_IParameterValue::Clone ( ) const [pure virtual]<br/></p>
<p>Clones the parameter object.<br/></p>
<p><b>Note<br/></b>Does NOT set the automation delegate on the clone; ownership of the automation delegate and parameter<br/>registration/unregistration stays with the original parameter<br/></p>
<p>Implemented in AAX_CParameterValue&lt; T &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.124 AAX_IParameterValue Class Reference 923<br/></b></p>
<p><b>14.124.3.2 Identifier()<br/></b></p>
<p>virtual AAX_CParamID AAX_IParameterValue::Identifier ( ) const [pure virtual]<br/></p>
<p>Returns the parameter's unique identifier.<br/></p>
<p>This unique ID is used by the Parameter Manager and by outside applications to uniquely identify and target control<br/>messages. This value may not be changed after the parameter has been constructed.<br/></p>
<p>Implemented in AAX_CParameterValue&lt; T &gt;.<br/></p>
<p><b>14.124.3.3 GetValueAsBool()<br/></b></p>
<p>virtual bool AAX_IParameterValue::GetValueAsBool (<br/>bool &#8727; value ) const [pure virtual]<br/></p>
<p>Retrieves the parameter's value as a bool.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to bool was successful<br/></p>
<p>false The conversion to bool was unsuccessful<br/></p>
<p>Implemented in AAX_CParameterValue&lt; T &gt;, and AAX_CParameterValue&lt; T &gt;.<br/></p>
<p><b>14.124.3.4 GetValueAsInt32()<br/></b></p>
<p>virtual bool AAX_IParameterValue::GetValueAsInt32 (<br/>int32_t &#8727; value ) const [pure virtual]<br/></p>
<p>Retrieves the parameter's value as an int32_t.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to int32_t was successful<br/></p>
<p>false The conversion to int32_t was unsuccessful<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>924 Class Documentation<br/></b></p>
<p>Implemented in AAX_CParameterValue&lt; T &gt;, and AAX_CParameterValue&lt; T &gt;.<br/></p>
<p><b>14.124.3.5 GetValueAsFloat()<br/></b></p>
<p>virtual bool AAX_IParameterValue::GetValueAsFloat (<br/>float &#8727; value ) const [pure virtual]<br/></p>
<p>Retrieves the parameter's value as a float.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to float was successful<br/></p>
<p>false The conversion to float was unsuccessful<br/></p>
<p>Implemented in AAX_CParameterValue&lt; T &gt;, and AAX_CParameterValue&lt; T &gt;.<br/></p>
<p><b>14.124.3.6 GetValueAsDouble()<br/></b></p>
<p>virtual bool AAX_IParameterValue::GetValueAsDouble (<br/>double &#8727; value ) const [pure virtual]<br/></p>
<p>Retrieves the parameter's value as a double.<br/></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to double was successful<br/></p>
<p>false The conversion to double was unsuccessful<br/></p>
<p>Implemented in AAX_CParameterValue&lt; T &gt;, and AAX_CParameterValue&lt; T &gt;.<br/></p>
<p><b>14.124.3.7 GetValueAsString()<br/></b></p>
<p>virtual bool AAX_IParameterValue::GetValueAsString (<br/>AAX_IString &#8727; value ) const [pure virtual]<br/></p>
<p>Retrieves the parameter's value as a string.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.125 AAX_IPointerQueue</b>&lt; <b>T </b>&gt; <b>Class Template Reference 925<br/></b></p>
<p><b>Parameters<br/></b>out value The parameter's real value. Set only if conversion is successful.<br/></p>
<p><b>Return values<br/></b>true The conversion to string was successful<br/></p>
<p>false The conversion to string was unsuccessful<br/></p>
<p>Implemented in AAX_CParameterValue&lt; T &gt;, and AAX_CParameterValue&lt; T &gt;.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IParameter.h<br/></p>
<p><b>14.125 AAX_IPointerQueue</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_IPointerQueue.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IPointerQueue&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_IPointerQueue&lt; T &gt;:<br/></p>
<p><b>14.125.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_IPointerQueue</b>&lt; <b>T </b>&gt;<br/></p>
<p>Abstract interface for a basic FIFO queue of pointers-to-objects<br/></p>
<p><b>Public Types<br/></b></p>
<p>&#8226; typedef T template_type<br/>The type used for this template instance.<br/></p>
<p>&#8226; typedef T &#8727; value_type<br/>The type of values stored in this queue.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IPointerQueue ()<br/>&#8226; virtual void Clear ()=0<br/>&#8226; virtual AAX_IContainer::EStatus Push (value_type inElem)=0<br/>&#8226; virtual value_type Pop ()=0<br/>&#8226; virtual value_type Peek () const =0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>926 Class Documentation<br/></b></p>
<p><b>14.125.2 Member Typedef Documentation<br/></b></p>
<p><b>14.125.2.1 template_type<br/></b></p>
<p>template&lt;typename T &gt;<br/>typedef T AAX_IPointerQueue&lt; T &gt;::template_type<br/></p>
<p>The type used for this template instance.<br/></p>
<p><b>14.125.2.2 value_type<br/></b></p>
<p>template&lt;typename T &gt;<br/>typedef T&#8727; AAX_IPointerQueue&lt; T &gt;::value_type<br/></p>
<p>The type of values stored in this queue.<br/></p>
<p><b>14.125.3 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.125.3.1 </b>&#8764;<b>AAX_IPointerQueue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual AAX_IPointerQueue&lt; T &gt;::&#8764;AAX_IPointerQueue ( ) [inline], [virtual]<br/></p>
<p><b>14.125.4 Member Function Documentation<br/></b></p>
<p><b>14.125.4.1 Clear()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual void AAX_IPointerQueue&lt; T &gt;::Clear ( ) [pure virtual]<br/></p>
<p><b>Note<br/></b>This operation is NOT atomic<br/>This does NOT call the destructor for any pointed-to elements; it only clears the pointer values in the queue<br/></p>
<p>Implements AAX_IContainer.<br/></p>
<p>Implemented in AAX_CAtomicQueue&lt; T, S &gt;, AAX_CAtomicQueue&lt; TNumberedParamStateList, 256 &gt;, and<br/>AAX_CAtomicQueue&lt; const TParamValPair, 16 &#8727;kSynchronizedParameterQueueSize &gt;.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.125 AAX_IPointerQueue</b>&lt; <b>T </b>&gt; <b>Class Template Reference 927<br/></b></p>
<p><b>14.125.4.2 Push()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual AAX_IContainer::EStatus AAX_IPointerQueue&lt; T &gt;::Push (<br/></p>
<p>value_type inElem ) [pure virtual]<br/></p>
<p>Push an element onto the queue<br/></p>
<p>Call from: Write thread<br/></p>
<p><b>Returns<br/></b>AAX_IContainer::eStatus_Success if the push succeeded<br/></p>
<p>Implemented in AAX_CAtomicQueue&lt; T, S &gt;, AAX_CAtomicQueue&lt; TNumberedParamStateList, 256 &gt;, and<br/>AAX_CAtomicQueue&lt; const TParamValPair, 16 &#8727;kSynchronizedParameterQueueSize &gt;.<br/></p>
<p><b>14.125.4.3 Pop()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual value_type AAX_IPointerQueue&lt; T &gt;::Pop ( ) [pure virtual]<br/></p>
<p>Pop the front element from the queue<br/></p>
<p>Call from: Read thread<br/></p>
<p><b>Returns<br/></b>NULL if no element is available<br/></p>
<p>Implemented in AAX_CAtomicQueue&lt; T, S &gt;, AAX_CAtomicQueue&lt; TNumberedParamStateList, 256 &gt;, and<br/>AAX_CAtomicQueue&lt; const TParamValPair, 16 &#8727;kSynchronizedParameterQueueSize &gt;.<br/></p>
<p><b>14.125.4.4 Peek()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual value_type AAX_IPointerQueue&lt; T &gt;::Peek ( ) const [pure virtual]<br/></p>
<p>Get the current top element without popping it off of the queue<br/></p>
<p>Call from: Read thread<br/></p>
<p><b>Note<br/></b>This value will change if another thread calls Pop()<br/></p>
<p>Implemented in AAX_CAtomicQueue&lt; T, S &gt;, AAX_CAtomicQueue&lt; TNumberedParamStateList, 256 &gt;, and<br/>AAX_CAtomicQueue&lt; const TParamValPair, 16 &#8727;kSynchronizedParameterQueueSize &gt;.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IPointerQueue.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>928 Class Documentation<br/></b></p>
<p><b>14.126 AAX_IPrivateDataAccess Class Reference<br/></b></p>
<p>#include &lt;AAX_IPrivateDataAccess.h&gt;<br/>Inheritance diagram for AAX_IPrivateDataAccess:<br/></p>
<p><b>14.126.1 Description<br/></b></p>
<p>Interface to data access provided by host to plug-in.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>WARNING: AAX_IPrivateDataAccess objects are not reference counted and are not guaranteed to exist beyond the<br/>scope of the method(s) they are passed into.<br/></p>
<p><b>See also<br/></b>AAX_IACFEffectDirectData::TimerWakeup<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;AAX_IPrivateDataAccess ()<br/>&#8226; virtual AAX_Result ReadPortDirect (AAX_CFieldIndex inFieldIndex, const uint32_t inOffset, const uint32_t<br/></p>
<p>inSize, void &#8727;outBuffer)=0<br/>Read data directly from DSP at the given port.<br/></p>
<p>&#8226; virtual AAX_Result WritePortDirect (AAX_CFieldIndex inFieldIndex, const uint32_t inOffset, const uint32_t<br/>inSize, const void &#8727;inBuffer)=0<br/></p>
<p>Write data directly to DSP at the given port.<br/></p>
<p><b>14.126.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.126.2.1 </b>&#8764;<b>AAX_IPrivateDataAccess()<br/></b></p>
<p>virtual AAX_IPrivateDataAccess::&#8764;AAX_IPrivateDataAccess ( ) [inline], [virtual]<br/></p>
<p><b>14.126.3 Member Function Documentation<br/></b></p>
<p><b>14.126.3.1 ReadPortDirect()<br/></b></p>
<p>virtual AAX_Result AAX_IPrivateDataAccess::ReadPortDirect (<br/>AAX_CFieldIndex inFieldIndex,<br/>const uint32_t inOffset,<br/>const uint32_t inSize,<br/>void &#8727; outBuffer ) [pure virtual]<br/></p>
<p>Read data directly from DSP at the given port.<br/></p>
<p><b>Note<br/></b>Blocking<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.127 AAX_IPropertyMap Class Reference 929<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex The port to read from.<br/>in inOffset Offset into data to start reading.<br/>in inSize Amount of data to read (in bytes).<br/>out outBuffer Pointer to storage for data to be read into.<br/></p>
<p>Implemented in AAX_VPrivateDataAccess.<br/></p>
<p><b>14.126.3.2 WritePortDirect()<br/></b></p>
<p>virtual AAX_Result AAX_IPrivateDataAccess::WritePortDirect (<br/>AAX_CFieldIndex inFieldIndex,<br/>const uint32_t inOffset,<br/>const uint32_t inSize,<br/>const void &#8727; inBuffer ) [pure virtual]<br/></p>
<p>Write data directly to DSP at the given port.<br/></p>
<p><b>Note<br/></b>Blocking<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex The port to write to.<br/>in inOffset Offset into data to begin writing.<br/>in inSize Amount of data to write (in bytes).<br/>in inBuffer Pointer to data being written.<br/></p>
<p>Implemented in AAX_VPrivateDataAccess.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IPrivateDataAccess.h<br/></p>
<p><b>14.127 AAX_IPropertyMap Class Reference<br/></b></p>
<p>#include &lt;AAX_IPropertyMap.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IPropertyMap:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>930 Class Documentation<br/></b></p>
<p><b>14.127.1 Description<br/></b></p>
<p>Generic plug-in description property map.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>Property Maps are used to associate specific sets of properties with plug-in description interfaces. For example,<br/>an audio processing component might register mono and stereo callbacks, or Native and TI callbacks, assigning<br/>each ProcessProc the applicable property mapping. This allows the host to determine the correct callback to<br/>use depending on the environment in which the plug-in is instantiated.<br/></p>
<p>AAX does not require that every value in AAX IPropertyMap be assigned by the developer. Unassigned properties<br/>do not have defined default values; if a specific value is not assigned to one of an element's properties then the<br/>element must support any value for that property. For example, if an audio processing component does not define<br/>its callback's audio buffer length property, the host will assume that the callback will support any buffer length.<br/></p>
<p>&#8226; To create a new property map: AAX_IComponentDescriptor::NewPropertyMap()<br/>&#8226; To copy an existing property map: AAX_IComponentDescriptor::DuplicatePropertyMap()<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;AAX_IPropertyMap ()<br/>&#8226; virtual AAX_CBoolean GetProperty (AAX_EProperty inProperty, AAX_CPropertyValue &#8727;outValue) const =0<br/></p>
<p>Get a property value from a property map.<br/>&#8226; virtual AAX_CBoolean GetPointerProperty (AAX_EProperty inProperty, const void &#8727;&#8727;outValue) const =0<br/></p>
<p>Get a property value from a property map with a pointer-sized value.<br/>&#8226; virtual AAX_Result AddProperty (AAX_EProperty inProperty, AAX_CPropertyValue inValue)=0<br/></p>
<p>Add a property to a property map.<br/>&#8226; virtual AAX_Result AddPointerProperty (AAX_EProperty inProperty, const void &#8727;inValue)=0<br/></p>
<p>Add a property to a property map with a pointer-sized value.<br/>&#8226; virtual AAX_Result AddPointerProperty (AAX_EProperty inProperty, const char &#8727;inValue)=0<br/></p>
<p>Add a property to a property map with a pointer-sized value.<br/>&#8226; virtual AAX_Result RemoveProperty (AAX_EProperty inProperty)=0<br/></p>
<p>Remove a property from a property map.<br/>&#8226; virtual AAX_Result AddPropertyWithIDArray (AAX_EProperty inProperty, const AAX_SPlugInIdentifierTriad<br/>&#8727;inPluginIDs, uint32_t inNumPluginIDs)=0<br/></p>
<p>Add an array of plug-in IDs to a property map.<br/>&#8226; virtual AAX_CBoolean GetPropertyWithIDArray (AAX_EProperty inProperty, const AAX_SPlugInIdentifierTriad<br/>&#8727;&#8727;outPluginIDs, uint32_t &#8727;outNumPluginIDs) const =0<br/></p>
<p>Get an array of plug-in IDs from a property map.<br/>&#8226; virtual IACFUnknown &#8727; GetIUnknown ()=0<br/></p>
<p><b>14.127.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.127.2.1 </b>&#8764;<b>AAX_IPropertyMap()<br/></b></p>
<p>virtual AAX_IPropertyMap::&#8764;AAX_IPropertyMap ( ) [inline], [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.127 AAX_IPropertyMap Class Reference 931<br/></b></p>
<p><b>14.127.3 Member Function Documentation<br/></b></p>
<p><b>14.127.3.1 GetProperty()<br/></b></p>
<p>virtual AAX_CBoolean AAX_IPropertyMap::GetProperty (<br/>AAX_EProperty inProperty,<br/>AAX_CPropertyValue &#8727; outValue ) const [pure virtual]<br/></p>
<p>Get a property value from a property map.<br/></p>
<p>Returns true if the selected property is supported, false if it is not<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID<br/>out outValue The property value<br/></p>
<p>Implemented in AAX_VPropertyMap.<br/></p>
<p><b>14.127.3.2 GetPointerProperty()<br/></b></p>
<p>virtual AAX_CBoolean AAX_IPropertyMap::GetPointerProperty (<br/>AAX_EProperty inProperty,<br/>const void &#8727;&#8727; outValue ) const [pure virtual]<br/></p>
<p>Get a property value from a property map with a pointer-sized value.<br/></p>
<p>Returns true if the selected property is supported, false if it is not<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID<br/>out outValue The property value<br/></p>
<p>Implemented in AAX_VPropertyMap.<br/></p>
<p><b>14.127.3.3 AddProperty()<br/></b></p>
<p>virtual AAX_Result AAX_IPropertyMap::AddProperty (<br/>AAX_EProperty inProperty,<br/>AAX_CPropertyValue inValue ) [pure virtual]<br/></p>
<p>Add a property to a property map.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>932 Class Documentation<br/></b></p>
<p><b>Note<br/></b>This method may return an error if adding the property was unsuccessful. If there is a failure when adding a<br/>required property then registration of the relevant description element must be abandoned and the plug-in's<br/>description logic should proceed to the next element.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inValue<br/></p>
<p>Implemented in AAX_VPropertyMap.<br/></p>
<p>Referenced by AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.127.3.4 AddPointerProperty() [1/2]<br/></b></p>
<p>virtual AAX_Result AAX_IPropertyMap::AddPointerProperty (<br/>AAX_EProperty inProperty,<br/>const void &#8727; inValue ) [pure virtual]<br/></p>
<p>Add a property to a property map with a pointer-sized value.<br/></p>
<p>Use this method to add properties which require a pointer-sized value. Do not use this method to add a property<br/>unless a pointer-sized value is explicitly specified in the property documentation.<br/></p>
<p><b>Note<br/></b>This method may return an error if adding the property was unsuccessful. If there is a failure when adding a<br/>required property then registration of the relevant description element must be abandoned and the plug-in's<br/>description logic should proceed to the next element.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inValue<br/></p>
<p>Implemented in AAX_VPropertyMap.<br/></p>
<p><b>14.127.3.5 AddPointerProperty() [2/2]<br/></b></p>
<p>virtual AAX_Result AAX_IPropertyMap::AddPointerProperty (<br/>AAX_EProperty inProperty,<br/>const char &#8727; inValue ) [pure virtual]<br/></p>
<p>Add a property to a property map with a pointer-sized value.<br/>Use this method to add properties which require a pointer-sized value. Do not use this method to add a property<br/>unless a pointer-sized value is explicitly specified in the property documentation.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.127 AAX_IPropertyMap Class Reference 933<br/></b></p>
<p><b>Note<br/></b>This method may return an error if adding the property was unsuccessful. If there is a failure when adding a<br/>required property then registration of the relevant description element must be abandoned and the plug-in's<br/>description logic should proceed to the next element.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inValue<br/></p>
<p>Implemented in AAX_VPropertyMap.<br/></p>
<p><b>14.127.3.6 RemoveProperty()<br/></b></p>
<p>virtual AAX_Result AAX_IPropertyMap::RemoveProperty (<br/>AAX_EProperty inProperty ) [pure virtual]<br/></p>
<p>Remove a property from a property map.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/></p>
<p>Implemented in AAX_VPropertyMap.<br/></p>
<p><b>14.127.3.7 AddPropertyWithIDArray()<br/></b></p>
<p>virtual AAX_Result AAX_IPropertyMap::AddPropertyWithIDArray (<br/>AAX_EProperty inProperty,<br/>const AAX_SPlugInIdentifierTriad &#8727; inPluginIDs,<br/>uint32_t inNumPluginIDs ) [pure virtual]<br/></p>
<p>Add an array of plug-in IDs to a property map.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inPluginIDs An array of AAX_SPlugInIdentifierTriad<br/>in inNumPluginIDs The length of iPluginIDs<br/></p>
<p>Implemented in AAX_VPropertyMap.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>934 Class Documentation<br/></b></p>
<p><b>14.127.3.8 GetPropertyWithIDArray()<br/></b></p>
<p>virtual AAX_CBoolean AAX_IPropertyMap::GetPropertyWithIDArray (<br/>AAX_EProperty inProperty,<br/>const AAX_SPlugInIdentifierTriad &#8727;&#8727; outPluginIDs,<br/>uint32_t &#8727; outNumPluginIDs ) const [pure virtual]<br/></p>
<p>Get an array of plug-in IDs from a property map.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>out outPluginIDs A pointer that will be set to reference an array of AAX_SPlugInIdentifierTriad<br/>in outNumPluginIDs The length of oPluginIDs<br/></p>
<p>Implemented in AAX_VPropertyMap.<br/></p>
<p><b>14.127.3.9 GetIUnknown()<br/></b></p>
<p>virtual IACFUnknown&#8727; AAX_IPropertyMap::GetIUnknown ( ) [pure virtual]<br/></p>
<p>Returns the most up-to-date underlying interface<br/></p>
<p>Implemented in AAX_VPropertyMap.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IPropertyMap.h<br/></p>
<p><b>14.128 AAX_ISessionDocument Class Reference<br/></b></p>
<p>#include &lt;AAX_ISessionDocument.h&gt;<br/></p>
<p>Inheritance diagram for AAX_ISessionDocument:<br/></p>
<p><b>14.128.1 Description<br/></b></p>
<p>Interface representing information in a host session document.<br/></p>
<p>This interface wraps the versioned interfaces defined in AAX_IACFSessionDocument.h and provides additional<br/>convenience functions providing session data back in the expected format.<br/></p>
<p><b>See also<br/></b>AAX_ISessionDocumentClient<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.128 AAX_ISessionDocument Class Reference 935<br/></b></p>
<p><b>Classes<br/></b>&#8226; class TempoMap<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;AAX_ISessionDocument ()=default<br/>&#8226; virtual bool Valid () const =0<br/></p>
<p>Check whether this session document is valid.<br/>&#8226; virtual std::unique_ptr&lt; TempoMap const &gt; GetTempoMap ()=0<br/></p>
<p>Get a copy of the document's tempo map.<br/>&#8226; virtual AAX_Result GetDocumentData (AAX_DocumentData_UID const &amp;inDataType, IACFUnknown<br/>&#8727;&#8727;outData)=0<br/></p>
<p><b>14.128.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.128.2.1 </b>&#8764;<b>AAX_ISessionDocument()<br/></b></p>
<p>virtual AAX_ISessionDocument::&#8764;AAX_ISessionDocument ( ) [virtual], [default]<br/></p>
<p><b>14.128.3 Member Function Documentation<br/></b></p>
<p><b>14.128.3.1 Valid()<br/></b></p>
<p>virtual bool AAX_ISessionDocument::Valid ( ) const [pure virtual]<br/></p>
<p>Check whether this session document is valid.<br/></p>
<p>Implemented in AAX_VSessionDocument.<br/></p>
<p><b>14.128.3.2 GetTempoMap()<br/></b></p>
<p>virtual std::unique_ptr&lt;TempoMap const&gt; AAX_ISessionDocument::GetTempoMap ( ) [pure virtual]<br/></p>
<p>Get a copy of the document's tempo map.<br/></p>
<p><b>Returns<br/></b>A TempoMap interface representing a copy of the current tempo map.<br/>nullptr if the host does not support tempo map data or if an error occurred.<br/></p>
<p>Implemented in AAX_VSessionDocument.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>936 Class Documentation<br/></b></p>
<p><b>14.128.3.3 GetDocumentData()<br/></b></p>
<p>virtual AAX_Result AAX_ISessionDocument::GetDocumentData (<br/>AAX_DocumentData_UID const &amp; inDataType,<br/>IACFUnknown &#8727;&#8727; outData ) [pure virtual]<br/></p>
<p>Get document data of a generic type<br/></p>
<p>Similar to QueryInterface() but uses a data type identifier rather than a true IID<br/></p>
<p>The provided interface has already had a reference added, so be careful not to add an additional reference:<br/>ACFPtr&lt;MyType&gt; ptr;<br/>IACFUnknown * docDataPtr{nullptr};<br/>if (AAX_SUCCESS == doc-&gt;GetDocumentData(dataUID, &amp;docDataPtr) &amp;&amp; docDataPtr) {<br/></p>
<p>ptr.attach(std::static_cast&lt;MyType*&gt;(docDataPtr)); // attach does not AddRef<br/>}<br/></p>
<p><b>Parameters<br/></b>in inDataType The type of the document data requested<br/>out outData An interface providing the requested data, or nullptr if the host does not support or<br/></p>
<p>cannot provide the requested data type. The reference count has been incremented on<br/>this object on behalf of the caller, so the caller must not add an additional reference<br/>count and must decrement the reference count on this object to release it. For<br/>information about which interface to expect for each requested data type, see the<br/>documentation for that data type.<br/></p>
<p>Implemented in AAX_VSessionDocument.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_ISessionDocument.h<br/></p>
<p><b>14.129 AAX_ISessionDocumentClient Class Reference<br/></b></p>
<p>#include &lt;AAX_ISessionDocumentClient.h&gt;<br/></p>
<p>Inheritance diagram for AAX_ISessionDocumentClient:<br/></p>
<p>Collaboration diagram for AAX_ISessionDocumentClient:<br/></p>
<p><b>14.129.1 Description<br/></b></p>
<p>Interface representing a client of the session document interface.<br/></p>
<p>For example, a plug-in implementation that makes calls on the session document interface provided by the host.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; ACF_DECLARE_STANDARD_UNKNOWN () ACFMETHOD(InternalQueryInterface)(const acfIID &amp;riid<br/>&#8226; AAX_DELETE (AAX_ISessionDocumentClient &amp;operator=(const AAX_ISessionDocumentClient &amp;))<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.130 AAX_IString Class Reference 937<br/></b></p>
<p><b>Public Attributes<br/></b>&#8226; void &#8727;&#8727;ppvObjOut override<br/></p>
<p><b>14.129.2 Member Function Documentation<br/></b></p>
<p><b>14.129.2.1 ACF_DECLARE_STANDARD_UNKNOWN()<br/></b></p>
<p>AAX_ISessionDocumentClient::ACF_DECLARE_STANDARD_UNKNOWN ( ) const &amp;<br/></p>
<p><b>14.129.2.2 AAX_DELETE()<br/></b></p>
<p>AAX_ISessionDocumentClient::AAX_DELETE (<br/>AAX_ISessionDocumentClient &amp; operator = (const AAX_ISessionDocumentClient &amp;) )<br/></p>
<p><b>14.129.3 Member Data Documentation<br/></b></p>
<p><b>14.129.3.1 override<br/></b></p>
<p>void&#8727;&#8727; ppvObjOut AAX_ISessionDocumentClient::override<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_ISessionDocumentClient.h<br/></p>
<p><b>14.130 AAX_IString Class Reference<br/></b></p>
<p>#include &lt;AAX_IString.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IString:<br/></p>
<p><b>14.130.1 Description<br/></b></p>
<p>A simple string container that can be passed across a binary boundary. This class, for simplicity, is not versioned<br/>and thus can never change.<br/></p>
<p>For a real string implementation, see AAX_CString, which inherits from this interface, but provides a much richer<br/>string interface.<br/></p>
<p>This object is not versioned with ACF for a variety of reasons, but the biggest implication of that is that THIS<br/>INTERFACE CAN NEVER CHANGE!<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>938 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_IString ()<br/>&#8226; virtual uint32_t Length () const =0<br/>&#8226; virtual uint32_t MaxLength () const =0<br/>&#8226; virtual const char &#8727; Get () const =0<br/>&#8226; virtual void Set (const char &#8727;iString)=0<br/>&#8226; virtual AAX_IString &amp; operator= (const AAX_IString &amp;iOther)=0<br/>&#8226; virtual AAX_IString &amp; operator= (const char &#8727;iString)=0<br/></p>
<p><b>14.130.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.130.2.1 </b>&#8764;<b>AAX_IString()<br/></b></p>
<p>virtual AAX_IString::&#8764;AAX_IString ( ) [inline], [virtual]<br/></p>
<p>Virtual Destructor<br/></p>
<p><b>14.130.3 Member Function Documentation<br/></b></p>
<p><b>14.130.3.1 Length()<br/></b></p>
<p>virtual uint32_t AAX_IString::Length ( ) const [pure virtual]<br/></p>
<p>Length methods<br/></p>
<p>Implemented in AAX_CString.<br/></p>
<p>Referenced by AAX::String2Binary().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.130.3.2 MaxLength()<br/></b></p>
<p>virtual uint32_t AAX_IString::MaxLength ( ) const [pure virtual]<br/></p>
<p>Implemented in AAX_CString.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.131 AAX_ITaperDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 939<br/></b></p>
<p><b>14.130.3.3 Get()<br/></b></p>
<p>virtual const char&#8727; AAX_IString::Get ( ) const [pure virtual]<br/></p>
<p>C string methods<br/></p>
<p>Implemented in AAX_CString.<br/></p>
<p>Referenced by AAX::IsEffectIDEqual(), and AAX::String2Binary().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.130.3.4 Set()<br/></b></p>
<p>virtual void AAX_IString::Set (<br/>const char &#8727; iString ) [pure virtual]<br/></p>
<p>Implemented in AAX_CString.<br/></p>
<p><b>14.130.3.5 operator=() [1/2]<br/></b></p>
<p>virtual AAX_IString&amp; AAX_IString::operator= (<br/>const AAX_IString &amp; iOther ) [pure virtual]<br/></p>
<p>Assignment operators<br/></p>
<p>Implemented in AAX_CString.<br/></p>
<p><b>14.130.3.6 operator=() [2/2]<br/></b></p>
<p>virtual AAX_IString&amp; AAX_IString::operator= (<br/>const char &#8727; iString ) [pure virtual]<br/></p>
<p>Implemented in AAX_CString.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_IString.h<br/></p>
<p><b>14.131 AAX_ITaperDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference<br/></b></p>
<p>#include &lt;AAX_ITaperDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_ITaperDelegate&lt; T &gt;:<br/></p>
<p>Collaboration diagram for AAX_ITaperDelegate&lt; T &gt;:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>940 Class Documentation<br/></b></p>
<p><b>14.131.1 Description<br/></b></p>
<p><b>template</b>&lt;<b>typename T</b>&gt;<br/><b>class AAX_ITaperDelegate</b>&lt; <b>T </b>&gt;<br/></p>
<p>Classes for conversion to and from normalized parameter values.<br/></p>
<p>Taper delegate interface template<br/></p>
<p>Taper delegates are used to convert real parameter values to and from their normalized representations. All taper<br/>delegates implement the AAX_ITaperDelegate&lt;T&gt; interface template, which contains two conversion functions:<br/>virtual T NormalizedToReal(double normalizedValue) const = 0;<br/>virtual double RealToNormalized(T realValue) const = 0;<br/></p>
<p>In addition, tapers may incorporate logical value constraints via the following interface methods:<br/>virtual T GetMaximumValue() const = 0;<br/>virtual T GetMinimumValue() const = 0;<br/>virtual T ConstrainRealValue(T value) const = 0;<br/></p>
<p>For more information, see the AAX_ITaperDelegate class documentation.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual AAX_ITaperDelegate &#8727; Clone () const =0<br/></p>
<p>Constructs and returns a copy of the taper delegate.<br/>&#8226; virtual T GetMaximumValue () const =0<br/></p>
<p>Returns the taper's maximum real value.<br/>&#8226; virtual T GetMinimumValue () const =0<br/></p>
<p>Returns the taper's minimum real value.<br/>&#8226; virtual T ConstrainRealValue (T value) const =0<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/>&#8226; virtual T NormalizedToReal (double normalizedValue) const =0<br/></p>
<p>Converts a normalized value to a real value.<br/>&#8226; virtual double RealToNormalized (T realValue) const =0<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p><b>14.131.2 Member Function Documentation<br/></b></p>
<p><b>14.131.2.1 Clone()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual AAX_ITaperDelegate&#8727; AAX_ITaperDelegate&lt; T &gt;::Clone ( ) const [pure virtual]<br/></p>
<p>Constructs and returns a copy of the taper delegate.<br/></p>
<p>In general, this method's implementation can use a simple copy constructor:<br/>template &lt;typename T&gt;<br/>AAX_CSubclassTaperDelegate&lt;T&gt;* AAX_CSubclassTaperDelegate&lt;T&gt;::Clone() const<br/>{<br/></p>
<p>return new AAX_CSubclassTaperDelegate(*this);<br/>}<br/></p>
<p>Implemented in AAX_CStateTaperDelegate&lt; T &gt;, AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;, AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;, AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;, and AAX_CBinaryTaperDelegate&lt; T &gt;.<br/></p>
<p>Referenced by AAX_CParameter&lt; T &gt;::SetTaperDelegate().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.131 AAX_ITaperDelegate</b>&lt; <b>T </b>&gt; <b>Class Template Reference 941<br/></b></p>
<p><b>14.131.2.2 GetMaximumValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual T AAX_ITaperDelegate&lt; T &gt;::GetMaximumValue ( ) const [pure virtual]<br/></p>
<p>Returns the taper's maximum real value.<br/></p>
<p>Implemented in AAX_CStateTaperDelegate&lt; T &gt;, AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;, AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;, AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;, and AAX_CBinaryTaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.131.2.3 GetMinimumValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual T AAX_ITaperDelegate&lt; T &gt;::GetMinimumValue ( ) const [pure virtual]<br/></p>
<p>Returns the taper's minimum real value.<br/></p>
<p>Implemented in AAX_CStateTaperDelegate&lt; T &gt;, AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;, AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;, AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;, and AAX_CBinaryTaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.131.2.4 ConstrainRealValue()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual T AAX_ITaperDelegate&lt; T &gt;::ConstrainRealValue (<br/></p>
<p>T value ) const [pure virtual]<br/></p>
<p>Applies a contraint to the value and returns the constrained value.<br/></p>
<p>This method is useful if the taper requires a contraint beyond simple minimum and maximum real value limits.<br/></p>
<p><b>Note<br/></b>This is the function that should actually enforces the constraints in NormalizeToReal() and RealToNormalized().<br/></p>
<p><b>Parameters<br/></b>in value The unconstrained value<br/></p>
<p>Implemented in AAX_CStateTaperDelegate&lt; T &gt;, AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;, AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;, AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;, and AAX_CBinaryTaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.131.2.5 NormalizedToReal()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual T AAX_ITaperDelegate&lt; T &gt;::NormalizedToReal (<br/></p>
<p>double normalizedValue ) const [pure virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>942 Class Documentation<br/></b></p>
<p>Converts a normalized value to a real value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of RealToNormalized(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in normalizedValue The normalized value that will be converted<br/></p>
<p>Implemented in AAX_CStateTaperDelegate&lt; T &gt;, AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;, AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;, AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;, and AAX_CBinaryTaperDelegate&lt; T &gt;.<br/></p>
<p><b>14.131.2.6 RealToNormalized()<br/></b></p>
<p>template&lt;typename T &gt;<br/>virtual double AAX_ITaperDelegate&lt; T &gt;::RealToNormalized (<br/></p>
<p>T realValue ) const [pure virtual]<br/></p>
<p>Normalizes a real parameter value.<br/></p>
<p>This is where the actual taper algorithm is implemented.<br/></p>
<p>This function should perform the exact inverse of NormalizedToReal(), to within the roundoff precision of the individ-<br/>ual taper implementation.<br/></p>
<p><b>Parameters<br/></b>in realValue The real parameter value that will be normalized<br/></p>
<p>Implemented in AAX_CStateTaperDelegate&lt; T &gt;, AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;, AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;, AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;, and AAX_CBinaryTaperDelegate&lt; T &gt;.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_ITaperDelegate.h<br/></p>
<p><b>14.132 AAX_ITaperDelegateBase Class Reference<br/></b></p>
<p>#include &lt;AAX_ITaperDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_ITaperDelegateBase:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.132 AAX_ITaperDelegateBase Class Reference 943<br/></b></p>
<p><b>14.132.1 Description<br/></b></p>
<p>Defines the taper conversion behavior for a parameter.<br/></p>
<p><b>:Internal to the AAX SDK<br/></b></p>
<p>This interface represents a delegate class to be used in conjunction with AAX_IParameter. AAX_IParameter dele-<br/>gates all conversion operations between normalized and real parameter values to classes that meet this interface.<br/>You can think of AAX_ITaperDelegate subclasses as simple taper conversion routines that enable a specific taper<br/>or range conversion function on an arbitrary parameter.<br/></p>
<p>To demonstrate the use of this interface, we will examine a simple call routine into a parameter:<br/></p>
<p>1. The host application calls into the plug-in's AAX_CParameterManager with a Parameter ID and a new<br/>normalized parameter value. This new value could be coming from an automation lane, a control surface, or<br/>any other parameter control; from the plug-in's perspective, these are all identical.<br/></p>
<p>2. The AAX_CParameterManager finds the specified AAX_CParameter and calls AAX_IParameter::SetNormalizedValue()<br/>on that parameter<br/></p>
<p>3. AAX_IParameter::SetNormalizedValue() results in a call into the parameter's concrete taper delegate to<br/>convert the normalized value to a real value.<br/></p>
<p>Using this pattern, the parameter manager is able to use real parameter values without actually knowing how to<br/>perform the conversion between normalized and real values.<br/></p>
<p>The inverse of the above example can also happen, e.g. when a control is updated from within the data model. In<br/>this case, the parameter can call into its concrete taper delegate in order to normalize the updated value, which can<br/>then be passed on to any observers that require normalized values, such as the host app.<br/></p>
<p>For more information about the parameter manager, see the Parameter Manager documentation page.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_ITaperDelegateBase ()<br/>Virtual destructor.<br/></p>
<p><b>14.132.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>944 Class Documentation<br/></b></p>
<p><b>14.132.2.1 </b>&#8764;<b>AAX_ITaperDelegateBase()<br/></b></p>
<p>virtual AAX_ITaperDelegateBase::&#8764;AAX_ITaperDelegateBase ( ) [inline], [virtual]<br/></p>
<p>Virtual destructor.<br/></p>
<p><b>Note<br/></b>This destructor MUST be virtual to prevent memory leaks.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_ITaperDelegate.h<br/></p>
<p><b>14.133 AAX_ITask Class Reference<br/></b></p>
<p>#include &lt;AAX_ITask.h&gt;<br/></p>
<p>Inheritance diagram for AAX_ITask:<br/></p>
<p><b>14.133.1 Description<br/></b></p>
<p>Interface representing a request to perform a task.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>Used by the task agent.<br/></p>
<p>This interface describes a task request and provides a way for the agent to express one or more results of the task<br/>as well as the progress of the task.<br/></p>
<p>This interface is open-ended for both inputs and outputs. The host and agent must use common definitions for<br/>specific task types, their possible arguments, and the expected results.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_ITask ()=default<br/>&#8226; virtual AAX_Result GetType (AAX_CTypeID &#8727;oType) const =0<br/>&#8226; virtual AAX_IACFDataBuffer const &#8727; GetArgumentOfType (AAX_CTypeID iType) const =0<br/>&#8226; virtual AAX_Result SetProgress (float iProgress)=0<br/>&#8226; virtual float GetProgress () const =0<br/>&#8226; virtual AAX_Result AddResult (AAX_IACFDataBuffer const &#8727;iResult)=0<br/></p>
<p>Attach result data to this task.<br/>&#8226; virtual AAX_ITask &#8727; SetDone (AAX_TaskCompletionStatus iStatus)=0<br/></p>
<p>Inform the host that the task is completed.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.133 AAX_ITask Class Reference 945<br/></b></p>
<p><b>14.133.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.133.2.1 </b>&#8764;<b>AAX_ITask()<br/></b></p>
<p>virtual AAX_ITask::&#8764;AAX_ITask ( ) [virtual], [default]<br/></p>
<p><b>14.133.3 Member Function Documentation<br/></b></p>
<p><b>14.133.3.1 GetType()<br/></b></p>
<p>virtual AAX_Result AAX_ITask::GetType (<br/>AAX_CTypeID &#8727; oType ) const [pure virtual]<br/></p>
<p>An identifier defining the type of the requested task<br/></p>
<p><b>Parameters<br/></b>out oType The type of this task request<br/></p>
<p>Implemented in AAX_VTask.<br/></p>
<p><b>14.133.3.2 GetArgumentOfType()<br/></b></p>
<p>virtual AAX_IACFDataBuffer const&#8727; AAX_ITask::GetArgumentOfType (<br/>AAX_CTypeID iType ) const [pure virtual]<br/></p>
<p>Additional information defining the request, depending on the task type<br/></p>
<p><b>Parameters<br/></b>in iType The type of argument requested. Possible argument types, if any, and the resulting data buffer<br/></p>
<p>format must be defined per task type.<br/></p>
<p><b>Returns<br/></b>The requested argument data, or nullptr. This data buffer's type ID is expected to match iType . The caller<br/>takes ownership of this object.<br/></p>
<p>Implemented in AAX_VTask.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>946 Class Documentation<br/></b></p>
<p><b>14.133.3.3 SetProgress()<br/></b></p>
<p>virtual AAX_Result AAX_ITask::SetProgress (<br/>float iProgress ) [pure virtual]<br/></p>
<p>Inform the host about the current status of the task<br/></p>
<p><b>Parameters<br/></b>in iProgress A value between 0 (no progress) and 1 (complete)<br/></p>
<p>Implemented in AAX_VTask.<br/></p>
<p><b>14.133.3.4 GetProgress()<br/></b></p>
<p>virtual float AAX_ITask::GetProgress ( ) const [pure virtual]<br/></p>
<p>Returns the current progress<br/></p>
<p>Implemented in AAX_VTask.<br/></p>
<p><b>14.133.3.5 AddResult()<br/></b></p>
<p>virtual AAX_Result AAX_ITask::AddResult (<br/>AAX_IACFDataBuffer const &#8727; iResult ) [pure virtual]<br/></p>
<p>Attach result data to this task.<br/></p>
<p>This can be called multiple times to add multiple types of results to a single task.<br/></p>
<p>The host may process the result data immediately or may wait for the task to complete.<br/></p>
<p>The plug-in is expected to release the data buffer upon making this call. At a minimum, the data buffer must not be<br/>changed after this call is made. See ACFPtr::inArg()<br/></p>
<p><b>Parameters<br/></b>in iResult A buffer containing the result data. Expected result types, if any, and their data buffer format<br/></p>
<p>must be defined per task type.<br/></p>
<p>Implemented in AAX_VTask.<br/></p>
<p><b>14.133.3.6 SetDone()<br/></b></p>
<p>virtual AAX_ITask&#8727; AAX_ITask::SetDone (<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.134 AAX_ITaskAgent Class Reference 947<br/></b></p>
<p>AAX_TaskCompletionStatus iStatus ) [pure virtual]<br/></p>
<p>Inform the host that the task is completed.<br/></p>
<p>If successful, returns a null pointer. Otherwise, returns a pointer back to the same object. This is the expected<br/>usage pattern:<br/>// release the task on success, retain it on failure<br/>myTask = myTask-&gt;SetDone(status);<br/></p>
<p><b>Parameters<br/></b>in iStatus The final status of the task. This indicates to the host whether or not the task was performed<br/></p>
<p>as requested.<br/></p>
<p>Implemented in AAX_VTask.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_ITask.h<br/></p>
<p><b>14.134 AAX_ITaskAgent Class Reference<br/></b></p>
<p>#include &lt;AAX_ITaskAgent.h&gt;<br/></p>
<p>Inheritance diagram for AAX_ITaskAgent:<br/></p>
<p>Collaboration diagram for AAX_ITaskAgent:<br/></p>
<p><b>14.134.1 Description<br/></b></p>
<p>Interface for a component that accepts task requests.<br/></p>
<p><b>:Implemented by the Plug-In<br/></b></p>
<p>The task agent is expected to complete the requested tasks asynchronously and to provide progress and completion<br/>details via calls on the AAX_IACFTask interface as the tasks proceed.<br/></p>
<p><b>See also<br/></b>AAX_ITask<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; ACF_DECLARE_STANDARD_UNKNOWN () ACFMETHOD(InternalQueryInterface)(const acfIID &amp;riid<br/>&#8226; AAX_DELETE (AAX_ITaskAgent &amp;operator=(const AAX_ITaskAgent &amp;))<br/></p>
<p><b>Public Attributes<br/></b>&#8226; void &#8727;&#8727;ppvObjOut AAX_OVERRIDE<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>948 Class Documentation<br/></b></p>
<p><b>14.134.2 Member Function Documentation<br/></b></p>
<p><b>14.134.2.1 ACF_DECLARE_STANDARD_UNKNOWN()<br/></b></p>
<p>AAX_ITaskAgent::ACF_DECLARE_STANDARD_UNKNOWN ( ) const &amp;<br/></p>
<p><b>14.134.2.2 AAX_DELETE()<br/></b></p>
<p>AAX_ITaskAgent::AAX_DELETE (<br/>AAX_ITaskAgent &amp; operator = (const AAX_ITaskAgent &amp;) )<br/></p>
<p><b>14.134.3 Member Data Documentation<br/></b></p>
<p><b>14.134.3.1 AAX_OVERRIDE<br/></b></p>
<p>void&#8727;&#8727; ppvObjOut AAX_ITaskAgent::AAX_OVERRIDE<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_ITaskAgent.h<br/></p>
<p><b>14.135 AAX_ITransport Class Reference<br/></b></p>
<p>#include &lt;AAX_ITransport.h&gt;<br/></p>
<p>Inheritance diagram for AAX_ITransport:<br/></p>
<p><b>14.135.1 Description<br/></b></p>
<p>Interface to information about the host's transport state.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p>Plug-ins that use this interface should describe AAX_eProperty_UsesTransport as 1<br/></p>
<p>Classes that inherit from AAX_CEffectParameters or AAX_CEffectGUI can use AAX_CEffectParameters::Transport()<br/>/ AAX_CEffectGUI::Transport() to access this interface. This interface is used as a local interface to the<br/>AAX_VTransport versioned implemenation, which dispatches calls to the appropriate host-supplied versioned trans-<br/>port interface depending on which features are supported by the host. See AAX_CEffectParameters::Initialize() for<br/>an example.<br/></p>
<p>A copy of this interface may also be obtained directly from the host using AAX_IMIDINode::GetTransport(). However,<br/>in this case the interface is not versioned, so the host and the plugin may not agree on the interface. This can lead<br/>to undefined behavior. See the documentation at AAX_IMIDINode::GetTransport() for more information.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.135 AAX_ITransport Class Reference 949<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;AAX_ITransport ()<br/>Virtual destructor.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentTempo (double &#8727;TempoBPM) const =0<br/>CALL: Gets the current tempo.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentMeter (int32_t &#8727;MeterNumerator, int32_t &#8727;MeterDenominator) const =0<br/>CALL: Gets the current meter.<br/></p>
<p>&#8226; virtual AAX_Result IsTransportPlaying (bool &#8727;isPlaying) const =0<br/>CALL: Indicates whether or not the transport is playing back.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentTickPosition (int64_t &#8727;TickPosition) const =0<br/>CALL: Gets the current tick position.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentLoopPosition (bool &#8727;bLooping, int64_t &#8727;LoopStartTick, int64_t &#8727;LoopEndTick)<br/>const =0<br/></p>
<p>CALL: Gets current information on loop playback.<br/>&#8226; virtual AAX_Result GetCurrentNativeSampleLocation (int64_t &#8727;SampleLocation) const =0<br/></p>
<p>CALL: Gets the current playback location of the native audio engine.<br/>&#8226; virtual AAX_Result GetCustomTickPosition (int64_t &#8727;oTickPosition, int64_t iSampleLocation) const =0<br/></p>
<p>CALL: Given an absolute sample position, gets the corresponding tick position.<br/>&#8226; virtual AAX_Result GetBarBeatPosition (int32_t &#8727;Bars, int32_t &#8727;Beats, int64_t &#8727;DisplayTicks, int64_&#8592;&#8617;<br/></p>
<p>t SampleLocation) const =0<br/>CALL: Given an absolute sample position, gets the corresponding bar and beat position.<br/></p>
<p>&#8226; virtual AAX_Result GetTicksPerQuarter (uint32_t &#8727;ticks) const =0<br/>CALL: Retrieves the number of ticks per quarter note.<br/></p>
<p>&#8226; virtual AAX_Result GetCurrentTicksPerBeat (uint32_t &#8727;ticks) const =0<br/>CALL: Retrieves the number of ticks per beat.<br/></p>
<p>&#8226; virtual AAX_Result GetTimelineSelectionStartPosition (int64_t &#8727;oSampleLocation) const =0<br/>CALL: Retrieves the absolute sample position of the beginning of the current transport selection.<br/></p>
<p>&#8226; virtual AAX_Result GetTimeCodeInfo (AAX_EFrameRate &#8727;oFrameRate, int32_t &#8727;oOffset) const =0<br/>CALL: Retrieves the current time code frame rate and offset.<br/></p>
<p>&#8226; virtual AAX_Result GetFeetFramesInfo (AAX_EFeetFramesRate &#8727;oFeetFramesRate, int64_t &#8727;oOffset) const<br/>=0<br/></p>
<p>CALL: Retrieves the current timecode feet/frames rate and offset.<br/>&#8226; virtual AAX_Result IsMetronomeEnabled (int32_t &#8727;isEnabled) const =0<br/></p>
<p>Sets isEnabled to true if the metronome is enabled.<br/>&#8226; virtual AAX_Result GetHDTimeCodeInfo (AAX_EFrameRate &#8727;oHDFrameRate, int64_t &#8727;oHDOffset) const =0<br/></p>
<p>CALL: Retrieves the current HD time code frame rate and offset.<br/>&#8226; virtual AAX_Result RequestTransportStart ()=0<br/></p>
<p>CALL: Request that the host transport start playback.<br/>&#8226; virtual AAX_Result RequestTransportStop ()=0<br/></p>
<p>CALL: Request that the host transport stop playback.<br/>&#8226; virtual AAX_Result GetTimelineSelectionEndPosition (int64_t &#8727;oSampleLocation) const =0<br/></p>
<p>CALL: Retrieves the absolute sample position of the end of the current transport selection.<br/>&#8226; virtual AAX_Result GetKeySignature (int64_t iSampleLocation, uint32_t &#8727;oKeySignature) const =0<br/></p>
<p>CALL: Retrieves the key signature at a sample location.<br/></p>
<p><b>14.135.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>950 Class Documentation<br/></b></p>
<p><b>14.135.2.1 </b>&#8764;<b>AAX_ITransport()<br/></b></p>
<p>virtual AAX_ITransport::&#8764;AAX_ITransport ( ) [inline], [virtual]<br/></p>
<p>Virtual destructor.<br/></p>
<p><b>Note<br/></b>This destructor MUST be virtual to prevent memory leaks.<br/></p>
<p><b>14.135.3 Member Function Documentation<br/></b></p>
<p><b>14.135.3.1 GetCurrentTempo()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetCurrentTempo (<br/>double &#8727; TempoBPM ) const [pure virtual]<br/></p>
<p>CALL: Gets the current tempo.<br/></p>
<p>Returns the tempo corresponding to the current position of the transport counter<br/></p>
<p><b>Note<br/></b>The resolution of the tempo returned here is based on the host's tempo resolution, so it will match the tempo<br/>displayed in the host. Use GetCurrentTicksPerBeat() to calculate the tempo resolution note.<br/></p>
<p><b>Parameters<br/></b>out TempoBPM The current tempo in beats per minute<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.2 GetCurrentMeter()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetCurrentMeter (<br/>int32_t &#8727; MeterNumerator,<br/>int32_t &#8727; MeterDenominator ) const [pure virtual]<br/></p>
<p>CALL: Gets the current meter.<br/></p>
<p>Returns the meter corresponding to the current position of the transport counter<br/></p>
<p><b>Parameters<br/></b>out MeterNumerator The numerator portion of the meter<br/>out MeterDenominator The denominator portion of the meter<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.135 AAX_ITransport Class Reference 951<br/></b></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.3 IsTransportPlaying()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::IsTransportPlaying (<br/>bool &#8727; isPlaying ) const [pure virtual]<br/></p>
<p>CALL: Indicates whether or not the transport is playing back.<br/></p>
<p><b>Parameters<br/></b>out isPlaying true if the transport is currently in playback<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.4 GetCurrentTickPosition()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetCurrentTickPosition (<br/>int64_t &#8727; TickPosition ) const [pure virtual]<br/></p>
<p>CALL: Gets the current tick position.<br/></p>
<p>Returns the current tick position corresponding to the current transport position. One &quot;Tick&quot; is represented here as<br/>1/960000 of a quarter note. That is, there are 960,000 of these ticks in a quarter note.<br/></p>
<p><b>Host Compatibility Notes </b>The tick resolution here is different than that of the tick displayed in Pro Tools. &quot;Display<br/>ticks&quot; (as they are called) are 1/960 of a quarter note.<br/></p>
<p><b>Parameters<br/></b>out TickPosition The tick position value<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.5 GetCurrentLoopPosition()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetCurrentLoopPosition (<br/>bool &#8727; bLooping,<br/>int64_t &#8727; LoopStartTick,<br/>int64_t &#8727; LoopEndTick ) const [pure virtual]<br/></p>
<p>CALL: Gets current information on loop playback.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>952 Class Documentation<br/></b></p>
<p><b>Host Compatibility Notes </b>This does not indicate anything about the status of the &quot;Loop Record&quot; option. Even<br/>when the host is configured to loop playback, looping may not occur if certain conditions<br/>are not met (i.e. the length of the selection is too short)<br/></p>
<p><b>Parameters<br/></b>out bLooping true if the host is configured to loop playback<br/>out LoopStartTick The starting tick position of the selection being looped (see GetCurrentTickPosition())<br/>out LoopEndTick The ending tick position of the selection being looped (see GetCurrentTickPosition())<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.6 GetCurrentNativeSampleLocation()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetCurrentNativeSampleLocation (<br/>int64_t &#8727; SampleLocation ) const [pure virtual]<br/></p>
<p>CALL: Gets the current playback location of the native audio engine.<br/></p>
<p>When called from a ProcessProc render callback, this method will provide the absolute sample location at the<br/>beginning of the callback's audio buffers.<br/></p>
<p>When called from AAX_IEffectParameters::RenderAudio_Hybrid(), this method will provide the absolute sample<br/>location for the samples in the method's <b>output </b>audio buffers. To calculate the absolute sample location for the<br/>sampels in the method's input buffers (i.e. the timelin location where the samples originated) subtract the value<br/>provided by AAX_IController::GetHybridSignalLatency() from this value.<br/></p>
<p>When called from a non-real-time thread, this method will provide the current location of the samples being pro-<br/>cessed by the plug-in's ProcessProc on its real-time processing thread.<br/></p>
<p><b>Note<br/></b>This method only returns a value during playback. It cannot be used to determine, e.g., the location of the<br/>timeline selector while the host is not in playback.<br/></p>
<p><b>Parameters<br/></b>out SampleLocation Absolute sample location of the first sample in the current native processing buffer<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.7 GetCustomTickPosition()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetCustomTickPosition (<br/>int64_t &#8727; oTickPosition,<br/>int64_t iSampleLocation ) const [pure virtual]<br/></p>
<p>CALL: Given an absolute sample position, gets the corresponding tick position.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.135 AAX_ITransport Class Reference 953<br/></b></p>
<p><b>Host Compatibility Notes </b>There is a minor performance cost associated with using this API in Pro Tools. It should<br/>not be used excessively without need.<br/></p>
<p><b>Parameters<br/></b>out oTickPosition the timeline tick position corresponding to iSampleLocation<br/>in iSampleLocation An absolute sample location (see GetCurrentNativeSampleLocation())<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.8 GetBarBeatPosition()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetBarBeatPosition (<br/>int32_t &#8727; Bars,<br/>int32_t &#8727; Beats,<br/>int64_t &#8727; DisplayTicks,<br/>int64_t SampleLocation ) const [pure virtual]<br/></p>
<p>CALL: Given an absolute sample position, gets the corresponding bar and beat position.<br/></p>
<p><b>Host Compatibility Notes </b>There is a minor performance cost associated with using this API in Pro Tools. It should<br/>not be used excessively without need.<br/></p>
<p><b>Parameters<br/></b>out Bars The bar corresponding to SampleLocation<br/>out Beats The beat corresponding to SampleLocation<br/>out DisplayTicks The ticks corresponding to SampleLocation<br/>in SampleLocation An absolute sample location (see GetCurrentNativeSampleLocation())<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.9 GetTicksPerQuarter()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetTicksPerQuarter (<br/>uint32_t &#8727; ticks ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the number of ticks per quarter note.<br/></p>
<p><b>Parameters<br/></b>out ticks<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>954 Class Documentation<br/></b></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.10 GetCurrentTicksPerBeat()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetCurrentTicksPerBeat (<br/>uint32_t &#8727; ticks ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the number of ticks per beat.<br/></p>
<p><b>Parameters<br/></b>out ticks<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.11 GetTimelineSelectionStartPosition()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetTimelineSelectionStartPosition (<br/>int64_t &#8727; oSampleLocation ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the absolute sample position of the beginning of the current transport selection.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out oSampleLocation<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.12 GetTimeCodeInfo()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetTimeCodeInfo (<br/>AAX_EFrameRate &#8727; oFrameRate,<br/>int32_t &#8727; oOffset ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the current time code frame rate and offset.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.135 AAX_ITransport Class Reference 955<br/></b></p>
<p><b>Parameters<br/></b>out oFrameRate<br/>out oOffset<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.13 GetFeetFramesInfo()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetFeetFramesInfo (<br/>AAX_EFeetFramesRate &#8727; oFeetFramesRate,<br/>int64_t &#8727; oOffset ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the current timecode feet/frames rate and offset.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out oFeetFramesRate<br/>out oOffset<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.14 IsMetronomeEnabled()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::IsMetronomeEnabled (<br/>int32_t &#8727; isEnabled ) const [pure virtual]<br/></p>
<p>Sets isEnabled to true if the metronome is enabled.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out isEnabled<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>956 Class Documentation<br/></b></p>
<p><b>14.135.3.15 GetHDTimeCodeInfo()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetHDTimeCodeInfo (<br/>AAX_EFrameRate &#8727; oHDFrameRate,<br/>int64_t &#8727; oHDOffset ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the current HD time code frame rate and offset.<br/></p>
<p><b>Note<br/></b>This method is part of the version 3 transport interface<br/></p>
<p><b>Parameters<br/></b>out oHDFrameRate<br/>out oHDOffset<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.16 RequestTransportStart()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::RequestTransportStart ( ) [pure virtual]<br/></p>
<p>CALL: Request that the host transport start playback.<br/></p>
<p><b>Note<br/></b>This method is part of the AAX_IACFTransportControl interface<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.17 RequestTransportStop()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::RequestTransportStop ( ) [pure virtual]<br/></p>
<p>CALL: Request that the host transport stop playback.<br/></p>
<p><b>Note<br/></b>This method is part of the AAX_IACFTransportControl interface<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.18 GetTimelineSelectionEndPosition()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetTimelineSelectionEndPosition (<br/>int64_t &#8727; oSampleLocation ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the absolute sample position of the end of the current transport selection.<br/></p>
<p><b>Note<br/></b>This method is part of the version 4 transport interface<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.136 AAX_IViewContainer Class Reference 957<br/></b></p>
<p><b>Parameters<br/></b>out oSampleLocation<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p><b>14.135.3.19 GetKeySignature()<br/></b></p>
<p>virtual AAX_Result AAX_ITransport::GetKeySignature (<br/>int64_t iSampleLocation,<br/>uint32_t &#8727; oKeySignature ) const [pure virtual]<br/></p>
<p>CALL: Retrieves the key signature at a sample location.<br/></p>
<p>The signature is provided as a bitfield:<br/></p>
<p>&#8226; 31-20: Chromatic scale elements, ordered MSB (root) to LSB<br/></p>
<p>&#8226; 19-4: (Reserved)<br/></p>
<p>&#8226; 3-0: Root note (C natural = 0)<br/></p>
<p>For example<br/></p>
<p>* D# Major<br/>* Ionian D#<br/>* 0b 101011010101 0000 00000000 0000 0011<br/>*<br/>* E Phrygian<br/>* Phrygian E<br/>* 0b 110101011010 0000 00000000 0000 0100<br/>*<br/>* Chromatic<br/>* Chromatic C<br/>* 0b 111111111111 0000 00000000 0000 0000<br/>*<br/></p>
<p>Implemented in AAX_VTransport.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_ITransport.h<br/></p>
<p><b>14.136 AAX_IViewContainer Class Reference<br/></b></p>
<p>#include &lt;AAX_IViewContainer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_IViewContainer:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>958 Class Documentation<br/></b></p>
<p><b>14.136.1 Description<br/></b></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used both by clients of the AAX host and by effect<br/>components.<br/></p>
<p><b>:Implemented by the AAX Host<br/></b></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;AAX_IViewContainer (void)<br/></p>
<p><b>View and GUI state queries<br/></b></p>
<p>&#8226; virtual int32_t GetType ()=0<br/>Returns the raw view type as one of AAX_EViewContainer_Type.<br/></p>
<p>&#8226; virtual void &#8727; GetPtr ()=0<br/>Returns a pointer to the raw view.<br/></p>
<p>&#8226; virtual AAX_Result GetModifiers (uint32_t &#8727;outModifiers)=0<br/>Queries the host for the current modifier keys.<br/></p>
<p><b>View change requests<br/></b></p>
<p>&#8226; virtual AAX_Result SetViewSize (AAX_Point &amp;inSize)=0<br/>Request a change to the main view size.<br/></p>
<p><b>Host event handlers<br/></b>These methods are used to pass plug-in GUI events to the host for handling. Events should always be passed<br/>on in this way when there is a possibility of the host overriding the event with its own behavior.<br/>For example, in Pro Tools a command-control-option-click on any automatable plug-in parameter editor should<br/>bring up that parameter's automation pop-up menu, and a control-right click should display the parameter's<br/>automation lane in the Pro Tools Edit window. In order for Pro Tools to handle these events, the plug-in must<br/>pass them on using HandleParameterMouseDown()<br/>For each of these methods:<br/></p>
<p>&#8226; AAX_SUCCESS is returned if the event was successfully handled by the host. In most cases, no further<br/>action will be required from the plug-in after the host successfully handles an event.<br/></p>
<p>&#8226; AAX_ERROR_UNIMPLEMENTED is returned if the event was not handled by the host. In this case, the<br/>plug-in should perform its own event handling.<br/></p>
<p>&#8226; virtual AAX_Result HandleParameterMouseDown (AAX_CParamID inParamID, uint32_t inModifiers)=0<br/>Alert the host to a mouse down event.<br/></p>
<p>&#8226; virtual AAX_Result HandleParameterMouseDrag (AAX_CParamID inParamID, uint32_t inModifiers)=0<br/>Alert the host to a mouse drag event.<br/></p>
<p>&#8226; virtual AAX_Result HandleParameterMouseUp (AAX_CParamID inParamID, uint32_t inModifiers)=0<br/>Alert the host to a mouse up event.<br/></p>
<p>&#8226; virtual AAX_Result HandleParameterMouseEnter (AAX_CParamID inParamID, uint32_t inModifiers)=0<br/>Alert the host to a mouse enter event to the parameter's control.<br/></p>
<p>&#8226; virtual AAX_Result HandleParameterMouseExit (AAX_CParamID inParamID, uint32_t inModifiers)=0<br/>Alert the host to a mouse exit event from the parameter's control.<br/></p>
<p>&#8226; virtual AAX_Result HandleMultipleParametersMouseDown (const AAX_CParamID &#8727;inParamIDs, uint32&#8592;&#8617;<br/>_t inNumOfParams, uint32_t inModifiers)=0<br/></p>
<p>Alert the host to a mouse down event.<br/>&#8226; virtual AAX_Result HandleMultipleParametersMouseDrag (const AAX_CParamID &#8727;inParamIDs, uint32_t<br/></p>
<p>inNumOfParams, uint32_t inModifiers)=0<br/>Alert the host to a mouse drag event.<br/></p>
<p>&#8226; virtual AAX_Result HandleMultipleParametersMouseUp (const AAX_CParamID &#8727;inParamIDs, uint32_&#8592;&#8617;<br/>t inNumOfParams, uint32_t inModifiers)=0<br/></p>
<p>Alert the host to a mouse up event.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.136 AAX_IViewContainer Class Reference 959<br/></b></p>
<p><b>14.136.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.136.2.1 </b>&#8764;<b>AAX_IViewContainer()<br/></b></p>
<p>virtual AAX_IViewContainer::&#8764;AAX_IViewContainer (<br/>void ) [inline], [virtual]<br/></p>
<p><b>14.136.3 Member Function Documentation<br/></b></p>
<p><b>14.136.3.1 GetType()<br/></b></p>
<p>virtual int32_t AAX_IViewContainer::GetType ( ) [pure virtual]<br/></p>
<p>Returns the raw view type as one of AAX_EViewContainer_Type.<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>14.136.3.2 GetPtr()<br/></b></p>
<p>virtual void&#8727; AAX_IViewContainer::GetPtr ( ) [pure virtual]<br/></p>
<p>Returns a pointer to the raw view.<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>14.136.3.3 GetModifiers()<br/></b></p>
<p>virtual AAX_Result AAX_IViewContainer::GetModifiers (<br/>uint32_t &#8727; outModifiers ) [pure virtual]<br/></p>
<p>Queries the host for the current modifier keys.<br/></p>
<p>This method returns a bit mask with bits set for each of the currently active modifier keys. This method does not<br/>return the state of the AAX_eModifiers_SecondaryButton.<br/></p>
<p><b>Host Compatibility Notes </b>Although this method allows plug-ins to acquire the current state of the Windows key<br/>(normally blocked by Pro Tools), plug-ins should not use key combinations that require<br/>this key.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>960 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out outModifiers Current modifiers as a bitmask of AAX_EModifiers<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>14.136.3.4 SetViewSize()<br/></b></p>
<p>virtual AAX_Result AAX_IViewContainer::SetViewSize (<br/>AAX_Point &amp; inSize ) [pure virtual]<br/></p>
<p>Request a change to the main view size.<br/></p>
<p><b>Note<br/></b>&#8226; For compatibility with the smallest supported displays, plug-in GUI dimensions should not exceed<br/></p>
<p>749x617 pixels, or 749x565 pixels for plug-ins with sidechain support.<br/></p>
<p><b>Parameters<br/></b>in inSize The new size to which the plug-in view should be set<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>14.136.3.5 HandleParameterMouseDown()<br/></b></p>
<p>virtual AAX_Result AAX_IViewContainer::HandleParameterMouseDown (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse down event.<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being edited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>14.136.3.6 HandleParameterMouseDrag()<br/></b></p>
<p>virtual AAX_Result AAX_IViewContainer::HandleParameterMouseDrag (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.136 AAX_IViewContainer Class Reference 961<br/></b></p>
<p>Alert the host to a mouse drag event.<br/></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being edited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>14.136.3.7 HandleParameterMouseUp()<br/></b></p>
<p>virtual AAX_Result AAX_IViewContainer::HandleParameterMouseUp (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse up event.<br/></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being edited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>14.136.3.8 HandleParameterMouseEnter()<br/></b></p>
<p>virtual AAX_Result AAX_IViewContainer::HandleParameterMouseEnter (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse enter event to the parameter's control.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>962 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being entered<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Returns AAX_SUCCESS if event was processed successfully, otherwise an AAX_ERROR code<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>14.136.3.9 HandleParameterMouseExit()<br/></b></p>
<p>virtual AAX_Result AAX_IViewContainer::HandleParameterMouseExit (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse exit event from the parameter's control.<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being exited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Returns AAX_SUCCESS if event was processed successfully, otherwise an AAX_ERROR code<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>14.136.3.10 HandleMultipleParametersMouseDown()<br/></b></p>
<p>virtual AAX_Result AAX_IViewContainer::HandleMultipleParametersMouseDown (<br/>const AAX_CParamID &#8727; inParamIDs,<br/>uint32_t inNumOfParams,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse down event.<br/></p>
<p><b>Parameters<br/></b>in inParamIDs IDs of the parameters that belong to the same GUI element whose controls are<br/></p>
<p>being edited<br/>in inNumOfParams Number of parameter IDS<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.136 AAX_IViewContainer Class Reference 963<br/></b></p>
<p><b>14.136.3.11 HandleMultipleParametersMouseDrag()<br/></b></p>
<p>virtual AAX_Result AAX_IViewContainer::HandleMultipleParametersMouseDrag (<br/>const AAX_CParamID &#8727; inParamIDs,<br/>uint32_t inNumOfParams,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse drag event.<br/></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Parameters<br/></b>in inParamIDs IDs of the parameters that belong to the same GUI element whose controls are<br/></p>
<p>being edited<br/>in inNumOfParams Number of parameter IDS<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implemented in AAX_VViewContainer.<br/></p>
<p><b>14.136.3.12 HandleMultipleParametersMouseUp()<br/></b></p>
<p>virtual AAX_Result AAX_IViewContainer::HandleMultipleParametersMouseUp (<br/>const AAX_CParamID &#8727; inParamIDs,<br/>uint32_t inNumOfParams,<br/>uint32_t inModifiers ) [pure virtual]<br/></p>
<p>Alert the host to a mouse up event.<br/></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Parameters<br/></b>in inParamIDs IDs of the parameters that belong to the same GUI element whose controls are<br/></p>
<p>being edited<br/>in inNumOfParams Number of parameter IDS<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implemented in AAX_VViewContainer.<br/>The documentation for this class was generated from the following file:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>964 Class Documentation<br/></b></p>
<p>&#8226; AAX_IViewContainer.h<br/></p>
<p><b>14.137 AAX_Map Class Reference<br/></b></p>
<p>#include &lt;AAX_Map.h&gt;<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_Map ()<br/>&#8226; &#8764;AAX_Map ()<br/>&#8226; void SetCoefficients (int aSize, double &#8727;aInpX, double &#8727;aInpY)<br/>&#8226; void GetCoefficient (int aIndex, double &#8727;aOutX, double &#8727;aOutY)<br/>&#8226; int GetUpperBoundIndex (double inp)<br/>&#8226; double GetX (int aIndex)<br/>&#8226; double GetY (int aIndex)<br/>&#8226; double GetFirstX ()<br/>&#8226; double GetFirstY ()<br/>&#8226; double GetLastX ()<br/>&#8226; double GetLastY ()<br/>&#8226; int GetSize ()<br/></p>
<p><b>14.137.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.137.1.1 AAX_Map()<br/></b></p>
<p>AAX_Map::AAX_Map ( ) [inline]<br/></p>
<p><b>14.137.1.2 </b>&#8764;<b>AAX_Map()<br/></b></p>
<p>AAX_Map::&#8764;AAX_Map ( ) [inline]<br/></p>
<p><b>14.137.2 Member Function Documentation<br/></b></p>
<p><b>14.137.2.1 SetCoefficients()<br/></b></p>
<p>void AAX_Map::SetCoefficients (<br/>int aSize,<br/>double &#8727; aInpX,<br/>double &#8727; aInpY )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.137 AAX_Map Class Reference 965<br/></b></p>
<p><b>14.137.2.2 GetCoefficient()<br/></b></p>
<p>void AAX_Map::GetCoefficient (<br/>int aIndex,<br/>double &#8727; aOutX,<br/>double &#8727; aOutY )<br/></p>
<p><b>14.137.2.3 GetUpperBoundIndex()<br/></b></p>
<p>int AAX_Map::GetUpperBoundIndex (<br/>double inp )<br/></p>
<p><b>14.137.2.4 GetX()<br/></b></p>
<p>double AAX_Map::GetX (<br/>int aIndex ) [inline]<br/></p>
<p><b>14.137.2.5 GetY()<br/></b></p>
<p>double AAX_Map::GetY (<br/>int aIndex ) [inline]<br/></p>
<p><b>14.137.2.6 GetFirstX()<br/></b></p>
<p>double AAX_Map::GetFirstX ( ) [inline]<br/></p>
<p><b>14.137.2.7 GetFirstY()<br/></b></p>
<p>double AAX_Map::GetFirstY ( ) [inline]<br/></p>
<p><b>14.137.2.8 GetLastX()<br/></b></p>
<p>double AAX_Map::GetLastX ( ) [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>966 Class Documentation<br/></b></p>
<p><b>14.137.2.9 GetLastY()<br/></b></p>
<p>double AAX_Map::GetLastY ( ) [inline]<br/></p>
<p><b>14.137.2.10 GetSize()<br/></b></p>
<p>int AAX_Map::GetSize ( ) [inline]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_Map.h<br/></p>
<p><b>14.138 AAX_Point Struct Reference<br/></b></p>
<p>#include &lt;AAX_GUITypes.h&gt;<br/></p>
<p><b>14.138.1 Description<br/></b></p>
<p>Data structure representing a two-dimensional coordinate point.<br/></p>
<p>Comparison operators give preference to vert<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_Point (float v, float h)<br/>&#8226; AAX_Point (void)<br/></p>
<p><b>Public Attributes<br/></b>&#8226; float vert<br/>&#8226; float horz<br/></p>
<p><b>14.138.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.138.2.1 AAX_Point() [1/2]<br/></b></p>
<p>AAX_Point::AAX_Point (<br/>float v,<br/>float h ) [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.139 AAX_Rect Struct Reference 967<br/></b></p>
<p><b>14.138.2.2 AAX_Point() [2/2]<br/></b></p>
<p>AAX_Point::AAX_Point (<br/>void ) [inline]<br/></p>
<p><b>14.138.3 Member Data Documentation<br/></b></p>
<p><b>14.138.3.1 vert<br/></b></p>
<p>float AAX_Point::vert<br/></p>
<p>Referenced by operator&lt;(), operator&lt;=(), and operator==().<br/></p>
<p><b>14.138.3.2 horz<br/></b></p>
<p>float AAX_Point::horz<br/></p>
<p>Referenced by operator&lt;(), operator&lt;=(), and operator==().<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_GUITypes.h<br/></p>
<p><b>14.139 AAX_Rect Struct Reference<br/></b></p>
<p>#include &lt;AAX_GUITypes.h&gt;<br/></p>
<p><b>14.139.1 Description<br/></b></p>
<p>Data structure representing a rectangle in a two-dimensional coordinate plane.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_Rect (float t, float l, float w, float h)<br/>&#8226; AAX_Rect (void)<br/></p>
<p><b>Public Attributes<br/></b>&#8226; float top<br/>&#8226; float left<br/>&#8226; float width<br/>&#8226; float height<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>968 Class Documentation<br/></b></p>
<p><b>14.139.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.139.2.1 AAX_Rect() [1/2]<br/></b></p>
<p>AAX_Rect::AAX_Rect (<br/>float t,<br/>float l,<br/>float w,<br/>float h ) [inline]<br/></p>
<p><b>14.139.2.2 AAX_Rect() [2/2]<br/></b></p>
<p>AAX_Rect::AAX_Rect (<br/>void ) [inline]<br/></p>
<p><b>14.139.3 Member Data Documentation<br/></b></p>
<p><b>14.139.3.1 top<br/></b></p>
<p>float AAX_Rect::top<br/></p>
<p>Referenced by operator==().<br/></p>
<p><b>14.139.3.2 left<br/></b></p>
<p>float AAX_Rect::left<br/></p>
<p>Referenced by operator==().<br/></p>
<p><b>14.139.3.3 width<br/></b></p>
<p>float AAX_Rect::width<br/></p>
<p>Referenced by operator==().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.140 AAX_SHybridRenderInfo Struct Reference 969<br/></b></p>
<p><b>14.139.3.4 height<br/></b></p>
<p>float AAX_Rect::height<br/></p>
<p>Referenced by operator==().<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_GUITypes.h<br/></p>
<p><b>14.140 AAX_SHybridRenderInfo Struct Reference<br/></b></p>
<p>#include &lt;AAX_IACFEffectParameters.h&gt;<br/></p>
<p><b>14.140.1 Description<br/></b></p>
<p>Hybrid render processing context.<br/></p>
<p><b>See also<br/></b>AAX_IACFEffectParameters_V2::RenderAudio_Hybrid()<br/></p>
<p><b>Public Attributes<br/></b>&#8226; float &#8727;&#8727; mAudioInputs<br/>&#8226; int32_t &#8727; mNumAudioInputs<br/>&#8226; float &#8727;&#8727; mAudioOutputs<br/>&#8226; int32_t &#8727; mNumAudioOutputs<br/>&#8226; int32_t &#8727; mNumSamples<br/>&#8226; AAX_CTimestamp &#8727; mClock<br/></p>
<p><b>14.140.2 Member Data Documentation<br/></b></p>
<p><b>14.140.2.1 mAudioInputs<br/></b></p>
<p>float&#8727;&#8727; AAX_SHybridRenderInfo::mAudioInputs<br/></p>
<p><b>14.140.2.2 mNumAudioInputs<br/></b></p>
<p>int32_t&#8727; AAX_SHybridRenderInfo::mNumAudioInputs<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>970 Class Documentation<br/></b></p>
<p><b>14.140.2.3 mAudioOutputs<br/></b></p>
<p>float&#8727;&#8727; AAX_SHybridRenderInfo::mAudioOutputs<br/></p>
<p><b>14.140.2.4 mNumAudioOutputs<br/></b></p>
<p>int32_t&#8727; AAX_SHybridRenderInfo::mNumAudioOutputs<br/></p>
<p><b>14.140.2.5 mNumSamples<br/></b></p>
<p>int32_t&#8727; AAX_SHybridRenderInfo::mNumSamples<br/></p>
<p><b>14.140.2.6 mClock<br/></b></p>
<p>AAX_CTimestamp&#8727; AAX_SHybridRenderInfo::mClock<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_IACFEffectParameters.h<br/></p>
<p><b>14.141 AAX_SInstrumentPrivateData Struct Reference<br/></b></p>
<p>#include &lt;AAX_CMonolithicParameters.h&gt;<br/></p>
<p>Collaboration diagram for AAX_SInstrumentPrivateData:<br/></p>
<p><b>14.141.1 Description<br/></b></p>
<p>Utility struct for AAX_CMonolithicParameters.<br/></p>
<p>This is an implementation detail of AAX_CMonolithicParameters; you should never need to interact with this struc-<br/>ture directly.<br/></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; AAX_CMonolithicParameters &#8727; mMonolithicParametersPtr<br/>A pointer to the instrument's data model.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.142 AAX_SInstrumentRenderInfo Struct Reference 971<br/></b></p>
<p><b>14.141.2 Member Data Documentation<br/></b></p>
<p><b>14.141.2.1 mMonolithicParametersPtr<br/></b></p>
<p>AAX_CMonolithicParameters&#8727; AAX_SInstrumentPrivateData::mMonolithicParametersPtr<br/></p>
<p>A pointer to the instrument's data model.<br/>You should never need to use this since the data model is available directly from within the virtual<br/>AAX_CMonolithicParameters::RenderAudio() function.<br/>Referenced by AAX_CMonolithicParameters::ResetFieldData(), and AAX_CMonolithicParameters::StaticRender&#8592;&#8617;<br/>Audio().<br/>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_CMonolithicParameters.h<br/></p>
<p><b>14.142 AAX_SInstrumentRenderInfo Struct Reference<br/></b></p>
<p>#include &lt;AAX_CMonolithicParameters.h&gt;<br/>Collaboration diagram for AAX_SInstrumentRenderInfo:<br/></p>
<p><b>14.142.1 Description<br/></b></p>
<p>Information used to parameterize AAX_CMonolithicParameters::RenderAudio()<br/></p>
<p><b>Public Attributes<br/></b>&#8226; float &#8727;&#8727; mAudioInputs<br/></p>
<p>Audio input buffers.<br/>&#8226; float &#8727;&#8727; mAudioOutputs<br/></p>
<p>Audio output buffers, including any aux output stems.<br/>&#8226; int32_t &#8727; mNumSamples<br/></p>
<p>Number of samples in each buffer. Bounded as per AAE_EAudioBufferLengthNative. The exact value can vary from<br/>buffer to buffer.<br/></p>
<p>&#8226; AAX_CTimestamp &#8727; mClock<br/>Pointer to the global running time clock.<br/></p>
<p>&#8226; AAX_IMIDINode &#8727; mInputNode<br/>Buffered local MIDI input node. Used for incoming MIDI messages directed to the instrument.<br/></p>
<p>&#8226; AAX_IMIDINode &#8727; mGlobalNode<br/>Buffered global MIDI input node. Used for global events like beat updates in metronomes.<br/></p>
<p>&#8226; AAX_IMIDINode &#8727; mTransportNode<br/>Transport MIDI node. Used for querying the state of the MIDI transport.<br/></p>
<p>&#8226; AAX_IMIDINode &#8727; mAdditionalInputMIDINodes [kMaxAdditionalMIDINodes]<br/>List of additional input MIDI nodes, if your plugin needs them.<br/></p>
<p>&#8226; AAX_SInstrumentPrivateData &#8727; mPrivateData<br/>Struct containing private data relating to the instance. You should not need to use this data.<br/></p>
<p>&#8226; float &#8727;&#8727; mMeters<br/>Array of meter taps. One meter value should be entered per tap for each render call.<br/></p>
<p>&#8226; int64_t &#8727; mCurrentStateNum<br/>State counter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>972 Class Documentation<br/></b></p>
<p><b>14.142.2 Member Data Documentation<br/></b></p>
<p><b>14.142.2.1 mAudioInputs<br/></b></p>
<p>float&#8727;&#8727; AAX_SInstrumentRenderInfo::mAudioInputs<br/></p>
<p>Audio input buffers.<br/></p>
<p><b>14.142.2.2 mAudioOutputs<br/></b></p>
<p>float&#8727;&#8727; AAX_SInstrumentRenderInfo::mAudioOutputs<br/></p>
<p>Audio output buffers, including any aux output stems.<br/></p>
<p><b>14.142.2.3 mNumSamples<br/></b></p>
<p>int32_t&#8727; AAX_SInstrumentRenderInfo::mNumSamples<br/></p>
<p>Number of samples in each buffer. Bounded as per AAE_EAudioBufferLengthNative. The exact value can vary from<br/>buffer to buffer.<br/></p>
<p><b>14.142.2.4 mClock<br/></b></p>
<p>AAX_CTimestamp&#8727; AAX_SInstrumentRenderInfo::mClock<br/></p>
<p>Pointer to the global running time clock.<br/></p>
<p><b>14.142.2.5 mInputNode<br/></b></p>
<p>AAX_IMIDINode&#8727; AAX_SInstrumentRenderInfo::mInputNode<br/></p>
<p>Buffered local MIDI input node. Used for incoming MIDI messages directed to the instrument.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.142 AAX_SInstrumentRenderInfo Struct Reference 973<br/></b></p>
<p><b>14.142.2.6 mGlobalNode<br/></b></p>
<p>AAX_IMIDINode&#8727; AAX_SInstrumentRenderInfo::mGlobalNode<br/></p>
<p>Buffered global MIDI input node. Used for global events like beat updates in metronomes.<br/></p>
<p><b>14.142.2.7 mTransportNode<br/></b></p>
<p>AAX_IMIDINode&#8727; AAX_SInstrumentRenderInfo::mTransportNode<br/></p>
<p>Transport MIDI node. Used for querying the state of the MIDI transport.<br/></p>
<p><b>14.142.2.8 mAdditionalInputMIDINodes<br/></b></p>
<p>AAX_IMIDINode&#8727; AAX_SInstrumentRenderInfo::mAdditionalInputMIDINodes[kMaxAdditionalMIDINodes]<br/></p>
<p>List of additional input MIDI nodes, if your plugin needs them.<br/></p>
<p><b>14.142.2.9 mPrivateData<br/></b></p>
<p>AAX_SInstrumentPrivateData&#8727; AAX_SInstrumentRenderInfo::mPrivateData<br/></p>
<p>Struct containing private data relating to the instance. You should not need to use this data.<br/></p>
<p><b>14.142.2.10 mMeters<br/></b></p>
<p>float&#8727;&#8727; AAX_SInstrumentRenderInfo::mMeters<br/></p>
<p>Array of meter taps. One meter value should be entered per tap for each render call.<br/></p>
<p><b>14.142.2.11 mCurrentStateNum<br/></b></p>
<p>int64_t&#8727; AAX_SInstrumentRenderInfo::mCurrentStateNum<br/></p>
<p>State counter.<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_CMonolithicParameters.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>974 Class Documentation<br/></b></p>
<p><b>14.143 AAX_SInstrumentSetupInfo Struct Reference<br/></b></p>
<p>#include &lt;AAX_CMonolithicParameters.h&gt;<br/></p>
<p><b>14.143.1 Description<br/></b></p>
<p>Information used to describe the instrument.<br/></p>
<p><b>See also<br/></b>AAX_CMonolithicParameters::StaticDescribe()<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_SInstrumentSetupInfo ()<br/></p>
<p>Default constructor.<br/></p>
<p><b>Public Attributes<br/></b>&#8226; bool mNeedsGlobalMIDI<br/></p>
<p>Does the instrument use a global MIDI input node?<br/>&#8226; const char &#8727; mGlobalMIDINodeName<br/></p>
<p>Name of the global MIDI node, if used.<br/>&#8226; uint32_t mGlobalMIDIEventMask<br/></p>
<p>Global MIDI node event mask of AAX_EMidiGlobalNodeSelectors, if used.<br/>&#8226; bool mNeedsInputMIDI<br/></p>
<p>Does the instrument use a local MIDI input node?<br/>&#8226; const char &#8727; mInputMIDINodeName<br/></p>
<p>Name of the MIDI input node, if used.<br/>&#8226; uint32_t mInputMIDIChannelMask<br/></p>
<p>MIDI input node channel mask, if used.<br/>&#8226; int32_t mNumAdditionalInputMIDINodes<br/></p>
<p>Number of additional input MIDI Nodes. These will all share the same channelMask and base MIDINodeName, but<br/>the names will be appended with numbers 2,3,4,...<br/></p>
<p>&#8226; bool mNeedsTransport<br/>Does the instrument use the transport interface?<br/></p>
<p>&#8226; const char &#8727; mTransportMIDINodeName<br/>Name of the MIDI transport node, if used.<br/></p>
<p>&#8226; int32_t mNumMeters<br/>Number of meter taps used by the instrument. Must match the size of mMeterIDs.<br/></p>
<p>&#8226; const AAX_CTypeID &#8727; mMeterIDs<br/>Array of meter IDs.<br/></p>
<p>&#8226; int32_t mNumAuxOutputStems<br/>Number of aux output stems for the plug-in.<br/></p>
<p>&#8226; const char &#8727; mAuxOutputStemNames [kMaxAuxOutputStems]<br/>Names of the aux output stems.<br/></p>
<p>&#8226; AAX_EStemFormat mAuxOutputStemFormats [kMaxAuxOutputStems]<br/>Stem formats for the output stems.<br/></p>
<p>&#8226; AAX_EStemFormat mHybridInputStemFormat<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.143 AAX_SInstrumentSetupInfo Struct Reference 975<br/></b></p>
<p>Hybrid input stem format<br/>&#8226; AAX_EStemFormat mHybridOutputStemFormat<br/></p>
<p>Hybrid output stem format<br/>&#8226; AAX_EStemFormat mInputStemFormat<br/></p>
<p>Input stem format<br/>&#8226; AAX_EStemFormat mOutputStemFormat<br/></p>
<p>Output stem format<br/>&#8226; bool mUseHostGeneratedGUI<br/></p>
<p>Allow Pro Tools or other host to generate a generic GUI. This can be useful for early development.<br/>&#8226; bool mCanBypass<br/></p>
<p>Can this instrument be bypassed?<br/>&#8226; AAX_CTypeID mManufacturerID<br/></p>
<p>Manufacturer ID<br/>&#8226; AAX_CTypeID mProductID<br/></p>
<p>Product ID<br/>&#8226; AAX_CTypeID mPluginID<br/></p>
<p>Plug-In (Type) ID<br/>&#8226; AAX_CTypeID mAudiosuiteID<br/></p>
<p>AudioSuite ID<br/>&#8226; AAX_CBoolean mMultiMonoSupport<br/></p>
<p><b>14.143.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.143.2.1 AAX_SInstrumentSetupInfo()<br/></b></p>
<p>AAX_SInstrumentSetupInfo::AAX_SInstrumentSetupInfo ( ) [inline]<br/></p>
<p>Default constructor.<br/></p>
<p>Use this constructor if you want to enable a sub-set of features and don't need to fill out the whole struct.<br/></p>
<p>References AAX_eStemFormat_Mono, AAX_eStemFormat_None, kMaxAuxOutputStems, mAudiosuiteID, m&#8592;&#8617;<br/>AuxOutputStemFormats, mAuxOutputStemNames, mCanBypass, mGlobalMIDIEventMask, mGlobalMIDINode&#8592;&#8617;<br/>Name, mHybridInputStemFormat, mHybridOutputStemFormat, mInputMIDIChannelMask, mInputMIDINodeName,<br/>mInputStemFormat, mManufacturerID, mMeterIDs, mMultiMonoSupport, mNeedsGlobalMIDI, mNeedsInputMIDI,<br/>mNeedsTransport, mNumAdditionalInputMIDINodes, mNumAuxOutputStems, mNumMeters, mOutputStemFormat,<br/>mPluginID, mProductID, mTransportMIDINodeName, and mUseHostGeneratedGUI.<br/></p>
<p><b>14.143.3 Member Data Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>976 Class Documentation<br/></b></p>
<p><b>14.143.3.1 mNeedsGlobalMIDI<br/></b></p>
<p>bool AAX_SInstrumentSetupInfo::mNeedsGlobalMIDI<br/></p>
<p>Does the instrument use a global MIDI input node?<br/></p>
<p><b>See also<br/></b>MIDI<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.2 mGlobalMIDINodeName<br/></b></p>
<p>const char&#8727; AAX_SInstrumentSetupInfo::mGlobalMIDINodeName<br/></p>
<p>Name of the global MIDI node, if used.<br/></p>
<p><b>See also<br/></b>MIDI<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.3 mGlobalMIDIEventMask<br/></b></p>
<p>uint32_t AAX_SInstrumentSetupInfo::mGlobalMIDIEventMask<br/></p>
<p>Global MIDI node event mask of AAX_EMidiGlobalNodeSelectors, if used.<br/></p>
<p><b>See also<br/></b>MIDI<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.4 mNeedsInputMIDI<br/></b></p>
<p>bool AAX_SInstrumentSetupInfo::mNeedsInputMIDI<br/></p>
<p>Does the instrument use a local MIDI input node?<br/></p>
<p><b>See also<br/></b>MIDI<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.143 AAX_SInstrumentSetupInfo Struct Reference 977<br/></b></p>
<p><b>14.143.3.5 mInputMIDINodeName<br/></b></p>
<p>const char&#8727; AAX_SInstrumentSetupInfo::mInputMIDINodeName<br/></p>
<p>Name of the MIDI input node, if used.<br/></p>
<p><b>See also<br/></b>MIDI<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.6 mInputMIDIChannelMask<br/></b></p>
<p>uint32_t AAX_SInstrumentSetupInfo::mInputMIDIChannelMask<br/></p>
<p>MIDI input node channel mask, if used.<br/></p>
<p><b>See also<br/></b>MIDI<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.7 mNumAdditionalInputMIDINodes<br/></b></p>
<p>int32_t AAX_SInstrumentSetupInfo::mNumAdditionalInputMIDINodes<br/></p>
<p>Number of additional input MIDI Nodes. These will all share the same channelMask and base MIDINodeName, but<br/>the names will be appended with numbers 2,3,4,...<br/></p>
<p><b>See also<br/></b>MIDI<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.8 mNeedsTransport<br/></b></p>
<p>bool AAX_SInstrumentSetupInfo::mNeedsTransport<br/></p>
<p>Does the instrument use the transport interface?<br/></p>
<p><b>See also<br/></b>AAX_ITransport<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>978 Class Documentation<br/></b></p>
<p><b>14.143.3.9 mTransportMIDINodeName<br/></b></p>
<p>const char&#8727; AAX_SInstrumentSetupInfo::mTransportMIDINodeName<br/></p>
<p>Name of the MIDI transport node, if used.<br/></p>
<p><b>See also<br/></b>AAX_ITransport<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo().<br/></p>
<p><b>14.143.3.10 mNumMeters<br/></b></p>
<p>int32_t AAX_SInstrumentSetupInfo::mNumMeters<br/></p>
<p>Number of meter taps used by the instrument. Must match the size of mMeterIDs.<br/></p>
<p><b>See also<br/></b>Plug-in meters<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.11 mMeterIDs<br/></b></p>
<p>const AAX_CTypeID&#8727; AAX_SInstrumentSetupInfo::mMeterIDs<br/></p>
<p>Array of meter IDs.<br/></p>
<p><b>See also<br/></b>Plug-in meters<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.12 mNumAuxOutputStems<br/></b></p>
<p>int32_t AAX_SInstrumentSetupInfo::mNumAuxOutputStems<br/></p>
<p>Number of aux output stems for the plug-in.<br/></p>
<p><b>See also<br/></b>Auxiliary Output Stems<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.143 AAX_SInstrumentSetupInfo Struct Reference 979<br/></b></p>
<p><b>14.143.3.13 mAuxOutputStemNames<br/></b></p>
<p>const char&#8727; AAX_SInstrumentSetupInfo::mAuxOutputStemNames[kMaxAuxOutputStems]<br/></p>
<p>Names of the aux output stems.<br/></p>
<p><b>See also<br/></b>Auxiliary Output Stems<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.14 mAuxOutputStemFormats<br/></b></p>
<p>AAX_EStemFormat AAX_SInstrumentSetupInfo::mAuxOutputStemFormats[kMaxAuxOutputStems]<br/></p>
<p>Stem formats for the output stems.<br/></p>
<p><b>See also<br/></b>Auxiliary Output Stems<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.15 mHybridInputStemFormat<br/></b></p>
<p>AAX_EStemFormat AAX_SInstrumentSetupInfo::mHybridInputStemFormat<br/></p>
<p>Hybrid input stem format<br/></p>
<p>A plug-in that defines this value must also define mHybridOutputStemFormat and implement<br/>AAX_IEffectParameters::RenderAudio_Hybrid()<br/></p>
<p><b>See also<br/></b>Hybrid Processing architecture<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>980 Class Documentation<br/></b></p>
<p><b>14.143.3.16 mHybridOutputStemFormat<br/></b></p>
<p>AAX_EStemFormat AAX_SInstrumentSetupInfo::mHybridOutputStemFormat<br/></p>
<p>Hybrid output stem format<br/></p>
<p>A plug-in that defines this value must also define mHybridInputStemFormat and implement AAX_IEffectParameters::RenderAudio_Hybrid()<br/></p>
<p><b>See also<br/></b>Hybrid Processing architecture<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.17 mInputStemFormat<br/></b></p>
<p>AAX_EStemFormat AAX_SInstrumentSetupInfo::mInputStemFormat<br/></p>
<p>Input stem format<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.18 mOutputStemFormat<br/></b></p>
<p>AAX_EStemFormat AAX_SInstrumentSetupInfo::mOutputStemFormat<br/></p>
<p>Output stem format<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.19 mUseHostGeneratedGUI<br/></b></p>
<p>bool AAX_SInstrumentSetupInfo::mUseHostGeneratedGUI<br/></p>
<p>Allow Pro Tools or other host to generate a generic GUI. This can be useful for early development.<br/></p>
<p><b>See also<br/></b>AAX_eProperty_UsesClientGUI<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.143 AAX_SInstrumentSetupInfo Struct Reference 981<br/></b></p>
<p><b>14.143.3.20 mCanBypass<br/></b></p>
<p>bool AAX_SInstrumentSetupInfo::mCanBypass<br/></p>
<p>Can this instrument be bypassed?<br/></p>
<p><b>See also<br/></b>AAX_eProperty_CanBypass<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.21 mManufacturerID<br/></b></p>
<p>AAX_CTypeID AAX_SInstrumentSetupInfo::mManufacturerID<br/></p>
<p>Manufacturer ID<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.22 mProductID<br/></b></p>
<p>AAX_CTypeID AAX_SInstrumentSetupInfo::mProductID<br/></p>
<p>Product ID<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.23 mPluginID<br/></b></p>
<p>AAX_CTypeID AAX_SInstrumentSetupInfo::mPluginID<br/></p>
<p>Plug-In (Type) ID<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>14.143.3.24 mAudiosuiteID<br/></b></p>
<p>AAX_CTypeID AAX_SInstrumentSetupInfo::mAudiosuiteID<br/></p>
<p>AudioSuite ID<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>982 Class Documentation<br/></b></p>
<p><b>14.143.3.25 mMultiMonoSupport<br/></b></p>
<p>AAX_CBoolean AAX_SInstrumentSetupInfo::mMultiMonoSupport<br/></p>
<p>Multi-mono support<br/></p>
<p><b>Note<br/></b>It is recommended to un-set the mMultiMonoSupport flag for VIs and other plug-ins which rely on non-<br/>global MIDI input. For more information see AAX_eProperty_Constraint_MultiMonoSupport<br/></p>
<p>Referenced by AAX_SInstrumentSetupInfo(), and AAX_CMonolithicParameters::StaticDescribe().<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_CMonolithicParameters.h<br/></p>
<p><b>14.144 AAX_SPlugInChunk Struct Reference<br/></b></p>
<p>#include &lt;AAX.h&gt;<br/></p>
<p><b>14.144.1 Description<br/></b></p>
<p>Plug-in chunk header + data.<br/></p>
<p><b>See also<br/></b>AAX_SPlugInChunkHeader<br/></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; int32_t fSize<br/>The size of the chunk's fData member.<br/></p>
<p>&#8226; int32_t fVersion<br/>The chunk's version.<br/></p>
<p>&#8226; AAX_CTypeID fManufacturerID<br/>The Plug-In's manufacturer ID.<br/></p>
<p>&#8226; AAX_CTypeID fProductID<br/>The Plug-In file's product ID.<br/></p>
<p>&#8226; AAX_CTypeID fPlugInID<br/>The ID of a particular Plug-In within the file.<br/></p>
<p>&#8226; AAX_CTypeID fChunkID<br/>The ID of a particular Plug-In chunk.<br/></p>
<p>&#8226; unsigned char fName [32]<br/>A user defined name for this chunk.<br/></p>
<p>&#8226; char fData [1]<br/>The chunk's data.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.144 AAX_SPlugInChunk Struct Reference 983<br/></b></p>
<p><b>14.144.2 Member Data Documentation<br/></b></p>
<p><b>14.144.2.1 fSize<br/></b></p>
<p>int32_t AAX_SPlugInChunk::fSize<br/></p>
<p>The size of the chunk's fData member.<br/></p>
<p><b>14.144.2.2 fVersion<br/></b></p>
<p>int32_t AAX_SPlugInChunk::fVersion<br/></p>
<p>The chunk's version.<br/></p>
<p><b>14.144.2.3 fManufacturerID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInChunk::fManufacturerID<br/></p>
<p>The Plug-In's manufacturer ID.<br/></p>
<p><b>14.144.2.4 fProductID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInChunk::fProductID<br/></p>
<p>The Plug-In file's product ID.<br/></p>
<p><b>14.144.2.5 fPlugInID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInChunk::fPlugInID<br/></p>
<p>The ID of a particular Plug-In within the file.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>984 Class Documentation<br/></b></p>
<p><b>14.144.2.6 fChunkID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInChunk::fChunkID<br/></p>
<p>The ID of a particular Plug-In chunk.<br/></p>
<p><b>14.144.2.7 fName<br/></b></p>
<p>unsigned char AAX_SPlugInChunk::fName[32]<br/></p>
<p>A user defined name for this chunk.<br/></p>
<p><b>14.144.2.8 fData<br/></b></p>
<p>char AAX_SPlugInChunk::fData[1]<br/></p>
<p>The chunk's data.<br/></p>
<p><b>Note<br/></b>The fixed-size array definition here is historical, but misleading. Plug-ins actually write off the end of this block<br/>and are allowed to as long as they don't exceed their reported size.<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX.h<br/></p>
<p><b>14.145 AAX_SPlugInChunkHeader Struct Reference<br/></b></p>
<p>#include &lt;AAX.h&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.145 AAX_SPlugInChunkHeader Struct Reference 985<br/></b></p>
<p><b>14.145.1 Description<br/></b></p>
<p>Plug-in chunk header.<br/></p>
<p><b>Legacy Porting Notes </b>To ensure compatibility with TDM/RTAS plug-ins whose implementation requires fSize<br/>to be equal to the size of the chunk's header plus its data, AAE performs some behind-the-<br/>scenes record keeping.<br/></p>
<p>The following actions are only taken for AAX plug-ins, so, e.g., if a chunk is stored by<br/>an RTAS or TDM plug-in that reports data+header size in fSize and this chunk is then<br/>loaded by the AAX version of the plug-in, the header size will be cached as-is from the<br/>legacy plug-in and will be subtracted out before the chunk data is passed to the AAX<br/>plug-in. If a chunk is stored by an AAX plug-in and is then loaded by a legacy plug-in, the<br/>legacy plug-in will receive the cached plug-in header with fSize equal to the data+header<br/>size.<br/></p>
<p>These are the special actions that AAE takes to ensure backwards-compatibility when<br/>handling AAX chunk data:<br/></p>
<p>&#8226; When AAE retrieves the size of a chunk from an AAX plug-in using GetChunkSize(),<br/>it adds the chunk header size to the amount of memory that it allocates for the chunk<br/></p>
<p>&#8226; When AAE retrieves a chunk from an AAX plug-in using GetChunk(), it adds the<br/>chunk header size to fChunkSize before caching the chunk<br/></p>
<p>&#8226; Before calling SetChunk() or CompareActiveChunk(), AAE subtracts the chunk<br/>header size from the cached chunk's header's fChunkSize member<br/></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; int32_t fSize<br/>The size of the chunk's fData member.<br/></p>
<p>&#8226; int32_t fVersion<br/>The chunk's version.<br/></p>
<p>&#8226; AAX_CTypeID fManufacturerID<br/>The Plug-In's manufacturer ID.<br/></p>
<p>&#8226; AAX_CTypeID fProductID<br/>The Plug-In file's product ID.<br/></p>
<p>&#8226; AAX_CTypeID fPlugInID<br/>The ID of a particular Plug-In within the file.<br/></p>
<p>&#8226; AAX_CTypeID fChunkID<br/>The ID of a particular Plug-In chunk.<br/></p>
<p>&#8226; unsigned char fName [32]<br/>A user defined name for this chunk.<br/></p>
<p><b>14.145.2 Member Data Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>986 Class Documentation<br/></b></p>
<p><b>14.145.2.1 fSize<br/></b></p>
<p>int32_t AAX_SPlugInChunkHeader::fSize<br/></p>
<p>The size of the chunk's fData member.<br/></p>
<p><b>14.145.2.2 fVersion<br/></b></p>
<p>int32_t AAX_SPlugInChunkHeader::fVersion<br/></p>
<p>The chunk's version.<br/></p>
<p><b>14.145.2.3 fManufacturerID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInChunkHeader::fManufacturerID<br/></p>
<p>The Plug-In's manufacturer ID.<br/></p>
<p><b>14.145.2.4 fProductID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInChunkHeader::fProductID<br/></p>
<p>The Plug-In file's product ID.<br/></p>
<p><b>14.145.2.5 fPlugInID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInChunkHeader::fPlugInID<br/></p>
<p>The ID of a particular Plug-In within the file.<br/></p>
<p><b>14.145.2.6 fChunkID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInChunkHeader::fChunkID<br/></p>
<p>The ID of a particular Plug-In chunk.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.146 AAX_SPlugInIdentifierTriad Struct Reference 987<br/></b></p>
<p><b>14.145.2.7 fName<br/></b></p>
<p>unsigned char AAX_SPlugInChunkHeader::fName[32]<br/></p>
<p>A user defined name for this chunk.<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX.h<br/></p>
<p><b>14.146 AAX_SPlugInIdentifierTriad Struct Reference<br/></b></p>
<p>#include &lt;AAX.h&gt;<br/></p>
<p><b>14.146.1 Description<br/></b></p>
<p>Plug-in Identifier Triad.<br/></p>
<p>This set of identifiers are what uniquely identify a particular plug-in type.<br/></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; AAX_CTypeID mManufacturerID<br/>The Plug-In's manufacturer ID.<br/></p>
<p>&#8226; AAX_CTypeID mProductID<br/>The Plug-In's product (Effect) ID.<br/></p>
<p>&#8226; AAX_CTypeID mPlugInID<br/>The ID of a specific type in the product (Effect)<br/></p>
<p><b>14.146.2 Member Data Documentation<br/></b></p>
<p><b>14.146.2.1 mManufacturerID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInIdentifierTriad::mManufacturerID<br/></p>
<p>The Plug-In's manufacturer ID.<br/></p>
<p>Referenced by AAX::AsStringIDTriad().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>988 Class Documentation<br/></b></p>
<p><b>14.146.2.2 mProductID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInIdentifierTriad::mProductID<br/></p>
<p>The Plug-In's product (Effect) ID.<br/></p>
<p>Referenced by AAX::AsStringIDTriad().<br/></p>
<p><b>14.146.2.3 mPlugInID<br/></b></p>
<p>AAX_CTypeID AAX_SPlugInIdentifierTriad::mPlugInID<br/></p>
<p>The ID of a specific type in the product (Effect)<br/></p>
<p>Referenced by AAX::AsStringIDTriad().<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX.h<br/></p>
<p><b>14.147 AAX_StLock_Guard Class Reference<br/></b></p>
<p>#include &lt;AAX_CMutex.h&gt;<br/></p>
<p><b>14.147.1 Description<br/></b></p>
<p>Helper class for working with mutex.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_StLock_Guard (AAX_CMutex &amp;iMutex)<br/>&#8226; &#8764;AAX_StLock_Guard ()<br/></p>
<p><b>14.147.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.147.2.1 AAX_StLock_Guard()<br/></b></p>
<p>AAX_StLock_Guard::AAX_StLock_Guard (<br/>AAX_CMutex &amp; iMutex ) [inline], [explicit]<br/></p>
<p>References AAX_CMutex::Lock().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.148 AAX_TransportStateInfo_V1 Struct Reference 989<br/></b></p>
<p><b>14.147.2.2 </b>&#8764;<b>AAX_StLock_Guard()<br/></b></p>
<p>AAX_StLock_Guard::&#8764;AAX_StLock_Guard ( ) [inline]<br/></p>
<p>References AAX_CMutex::Unlock().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_CMutex.h<br/></p>
<p><b>14.148 AAX_TransportStateInfo_V1 Struct Reference<br/></b></p>
<p>#include &lt;AAX_TransportTypes.h&gt;<br/></p>
<p><b>14.148.1 Description<br/></b></p>
<p>Helper structure for payload data described transport state information.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_TransportStateInfo_V1 ()<br/>&#8226; std::string ToString () const<br/></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; AAX_ETransportState mTransportState<br/>&#8226; AAX_ERecordMode mRecordMode<br/>&#8226; AAX_CBoolean mIsRecordEnabled<br/>&#8226; AAX_CBoolean mIsRecording<br/>&#8226; AAX_CBoolean mIsLoopEnabled<br/></p>
<p><b>14.148.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.148.2.1 AAX_TransportStateInfo_V1()<br/></b></p>
<p>AAX_TransportStateInfo_V1::AAX_TransportStateInfo_V1 ( ) [inline]<br/></p>
<p><b>14.148.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>990 Class Documentation<br/></b></p>
<p><b>14.148.3.1 ToString()<br/></b></p>
<p>std::string AAX_TransportStateInfo_V1::ToString ( ) const [inline]<br/></p>
<p>References mIsLoopEnabled, mIsRecordEnabled, mIsRecording, mRecordMode, and mTransportState.<br/></p>
<p><b>14.148.4 Member Data Documentation<br/></b></p>
<p><b>14.148.4.1 mTransportState<br/></b></p>
<p>AAX_ETransportState AAX_TransportStateInfo_V1::mTransportState<br/></p>
<p>Referenced by operator==(), and ToString().<br/></p>
<p><b>14.148.4.2 mRecordMode<br/></b></p>
<p>AAX_ERecordMode AAX_TransportStateInfo_V1::mRecordMode<br/></p>
<p>Referenced by operator==(), and ToString().<br/></p>
<p><b>14.148.4.3 mIsRecordEnabled<br/></b></p>
<p>AAX_CBoolean AAX_TransportStateInfo_V1::mIsRecordEnabled<br/></p>
<p>Referenced by operator==(), and ToString().<br/></p>
<p><b>14.148.4.4 mIsRecording<br/></b></p>
<p>AAX_CBoolean AAX_TransportStateInfo_V1::mIsRecording<br/></p>
<p>Referenced by operator==(), and ToString().<br/></p>
<p><b>14.148.4.5 mIsLoopEnabled<br/></b></p>
<p>AAX_CBoolean AAX_TransportStateInfo_V1::mIsLoopEnabled<br/></p>
<p>Referenced by operator==(), and ToString().<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_TransportTypes.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.149 AAX_VAutomationDelegate Class Reference 991<br/></b></p>
<p><b>14.149 AAX_VAutomationDelegate Class Reference<br/></b></p>
<p>#include &lt;AAX_VAutomationDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VAutomationDelegate:<br/></p>
<p>Collaboration diagram for AAX_VAutomationDelegate:<br/></p>
<p><b>14.149.1 Description<br/></b></p>
<p>Version-managed concrete automation delegate class.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_VAutomationDelegate (IACFUnknown &#8727;pUnknown)<br/>&#8226; &#8764;AAX_VAutomationDelegate () AAX_OVERRIDE<br/>&#8226; IACFUnknown &#8727; GetUnknown () const<br/>&#8226; AAX_Result RegisterParameter (AAX_CParamID iParameterID) AAX_OVERRIDE<br/>&#8226; AAX_Result UnregisterParameter (AAX_CParamID iParameterID) AAX_OVERRIDE<br/>&#8226; AAX_Result PostSetValueRequest (AAX_CParamID iParameterID, double iNormalizedValue) const<br/></p>
<p>AAX_OVERRIDE<br/>&#8226; AAX_Result PostCurrentValue (AAX_CParamID iParameterID, double iNormalizedValue) const AAX_OVERRIDE<br/>&#8226; AAX_Result PostTouchRequest (AAX_CParamID iParameterID) AAX_OVERRIDE<br/>&#8226; AAX_Result PostReleaseRequest (AAX_CParamID iParameterID) AAX_OVERRIDE<br/>&#8226; AAX_Result GetTouchState (AAX_CParamID iParameterID, AAX_CBoolean &#8727;outTouched) AAX_OVERRIDE<br/>&#8226; AAX_Result ParameterNameChanged (AAX_CParamID iParameterID) AAX_OVERRIDE<br/></p>
<p><b>14.149.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.149.2.1 AAX_VAutomationDelegate()<br/></b></p>
<p>AAX_VAutomationDelegate::AAX_VAutomationDelegate (<br/>IACFUnknown &#8727; pUnknown )<br/></p>
<p><b>14.149.2.2 </b>&#8764;<b>AAX_VAutomationDelegate()<br/></b></p>
<p>AAX_VAutomationDelegate::&#8764;AAX_VAutomationDelegate ( )<br/></p>
<p><b>14.149.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>992 Class Documentation<br/></b></p>
<p><b>14.149.3.1 GetUnknown()<br/></b></p>
<p>IACFUnknown&#8727; AAX_VAutomationDelegate::GetUnknown ( ) const [inline]<br/></p>
<p><b>14.149.3.2 RegisterParameter()<br/></b></p>
<p>AAX_Result AAX_VAutomationDelegate::RegisterParameter (<br/>AAX_CParamID iParameterID ) [virtual]<br/></p>
<p>Register a control with the automation system using a char&#8727; based control identifier<br/></p>
<p>The automation delegate owns a list of the IDs of all of the parameters that have been registered with it. This list<br/>is used to set up listeners for all of the registered parameters such that the automation delegate may update the<br/>plug-in when the state of any of the registered parameters have been modified.<br/></p>
<p><b>See also<br/></b>AAX_IAutomationDelegate::UnregisterParameter()<br/></p>
<p><b>Parameters<br/></b>in iParameterID Parameter ID that is being registered<br/></p>
<p>Implements AAX_IAutomationDelegate.<br/></p>
<p><b>14.149.3.3 UnregisterParameter()<br/></b></p>
<p>AAX_Result AAX_VAutomationDelegate::UnregisterParameter (<br/>AAX_CParamID iParameterID ) [virtual]<br/></p>
<p>Unregister a control with the automation system using a char&#8727; based control identifier<br/></p>
<p><b>Note<br/></b>All registered controls should be unregistered or the system might leak.<br/></p>
<p><b>See also<br/></b>AAX_IAutomationDelegate::RegisterParameter()<br/></p>
<p><b>Parameters<br/></b>in iParameterID Parameter ID that is being registered<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.149 AAX_VAutomationDelegate Class Reference 993<br/></b></p>
<p>Implements AAX_IAutomationDelegate.<br/></p>
<p><b>14.149.3.4 PostSetValueRequest()<br/></b></p>
<p>AAX_Result AAX_VAutomationDelegate::PostSetValueRequest (<br/>AAX_CParamID iParameterID,<br/>double normalizedValue ) const [virtual]<br/></p>
<p>Submits a request for the given parameter's value to be changed<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter for which a change is requested<br/>in normalizedValue The requested new parameter value, formatted as a double and normalized to [0 1]<br/></p>
<p>Implements AAX_IAutomationDelegate.<br/></p>
<p><b>14.149.3.5 PostCurrentValue()<br/></b></p>
<p>AAX_Result AAX_VAutomationDelegate::PostCurrentValue (<br/>AAX_CParamID iParameterID,<br/>double normalizedValue ) const [virtual]<br/></p>
<p>Notifies listeners that a parameter's value has changed<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that has been updated<br/>in normalizedValue The current parameter value, formatted as a double and normalized to [0 1]<br/></p>
<p>Implements AAX_IAutomationDelegate.<br/></p>
<p><b>14.149.3.6 PostTouchRequest()<br/></b></p>
<p>AAX_Result AAX_VAutomationDelegate::PostTouchRequest (<br/>AAX_CParamID iParameterID ) [virtual]<br/></p>
<p>Requests that the given parameter be &quot;touched&quot;, i.e. locked for updates by the current client<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that will be touched<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>994 Class Documentation<br/></b></p>
<p>Implements AAX_IAutomationDelegate.<br/></p>
<p><b>14.149.3.7 PostReleaseRequest()<br/></b></p>
<p>AAX_Result AAX_VAutomationDelegate::PostReleaseRequest (<br/>AAX_CParamID iParameterID ) [virtual]<br/></p>
<p>Requests that the given parameter be &quot;released&quot;, i.e. available for updates from any client<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that will be released<br/></p>
<p>Implements AAX_IAutomationDelegate.<br/></p>
<p><b>14.149.3.8 GetTouchState()<br/></b></p>
<p>AAX_Result AAX_VAutomationDelegate::GetTouchState (<br/>AAX_CParamID iParameterID,<br/>AAX_CBoolean &#8727; oTouched ) [virtual]<br/></p>
<p>Gets the current touched state of a parameter<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that is being queried<br/>out oTouched The current touch state of the parameter<br/></p>
<p>Implements AAX_IAutomationDelegate.<br/></p>
<p><b>14.149.3.9 ParameterNameChanged()<br/></b></p>
<p>AAX_Result AAX_VAutomationDelegate::ParameterNameChanged (<br/>AAX_CParamID iParameterID ) [virtual]<br/></p>
<p>Notify listeners that the parameter's display name has changed<br/></p>
<p>Note that this is not part of the underlying automation delegate interface with the host; it is converted on the AAX<br/>side to a notification posted to the host via the AAX_IController .<br/></p>
<p><b>Parameters<br/></b>in iParameterID ID of the parameter that has been updated<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.150 AAX_VCollection Class Reference 995<br/></b></p>
<p>Implements AAX_IAutomationDelegate.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VAutomationDelegate.h<br/></p>
<p><b>14.150 AAX_VCollection Class Reference<br/></b></p>
<p>#include &lt;AAX_VCollection.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VCollection:<br/></p>
<p>Collaboration diagram for AAX_VCollection:<br/></p>
<p><b>14.150.1 Description<br/></b></p>
<p>Version-managed concrete AAX_ICollection class.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_VCollection (IACFUnknown &#8727;pUnkHost)<br/>&#8226; &#8764;AAX_VCollection () AAX_OVERRIDE<br/>&#8226; AAX_IEffectDescriptor &#8727; NewDescriptor () AAX_OVERRIDE<br/></p>
<p>Create a new Effect descriptor.<br/>&#8226; AAX_Result AddEffect (const char &#8727;inEffectID, AAX_IEffectDescriptor &#8727;inEffectDescriptor) AAX_OVERRIDE<br/></p>
<p>Add an Effect description to the collection.<br/>&#8226; AAX_Result SetManufacturerName (const char &#8727;inPackageName) AAX_OVERRIDE<br/></p>
<p>Set the plug-in manufacturer name.<br/>&#8226; AAX_Result AddPackageName (const char &#8727;inPackageName) AAX_OVERRIDE<br/></p>
<p>Set the plug-in package name.<br/>&#8226; AAX_Result SetPackageVersion (uint32_t inVersion) AAX_OVERRIDE<br/></p>
<p>Set the plug-in package version number.<br/>&#8226; AAX_IPropertyMap &#8727; NewPropertyMap () AAX_OVERRIDE<br/></p>
<p>Create a new property map.<br/>&#8226; AAX_Result SetProperties (AAX_IPropertyMap &#8727;inProperties) AAX_OVERRIDE<br/></p>
<p>Set the properties of the collection.<br/>&#8226; AAX_Result GetHostVersion (uint32_t &#8727;outVersion) const AAX_OVERRIDE<br/></p>
<p>Get the current version of the host.<br/>&#8226; AAX_IDescriptionHost &#8727; DescriptionHost () AAX_OVERRIDE<br/>&#8226; const AAX_IDescriptionHost &#8727; DescriptionHost () const AAX_OVERRIDE<br/>&#8226; IACFDefinition &#8727; HostDefinition () const AAX_OVERRIDE<br/>&#8226; IACFPluginDefinition &#8727; GetIUnknown () const<br/></p>
<p><b>14.150.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>996 Class Documentation<br/></b></p>
<p><b>14.150.2.1 AAX_VCollection()<br/></b></p>
<p>AAX_VCollection::AAX_VCollection (<br/>IACFUnknown &#8727; pUnkHost )<br/></p>
<p><b>14.150.2.2 </b>&#8764;<b>AAX_VCollection()<br/></b></p>
<p>AAX_VCollection::&#8764;AAX_VCollection ( )<br/></p>
<p><b>14.150.3 Member Function Documentation<br/></b></p>
<p><b>14.150.3.1 NewDescriptor()<br/></b></p>
<p>AAX_IEffectDescriptor&#8727; AAX_VCollection::NewDescriptor ( ) [virtual]<br/></p>
<p>Create a new Effect descriptor.<br/></p>
<p>This implementation retains each generated AAX_IEffectDescriptor and destroys the descriptor upon<br/>AAX_VCollection destruction<br/></p>
<p>Create a new Effect descriptor.<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>14.150.3.2 AddEffect()<br/></b></p>
<p>AAX_Result AAX_VCollection::AddEffect (<br/>const char &#8727; inEffectID,<br/>AAX_IEffectDescriptor &#8727; inEffectDescriptor ) [virtual]<br/></p>
<p>Add an Effect description to the collection.<br/></p>
<p>Each Effect that a plug-in registers with AAX_ICollection::AddEffect() is considered a completely different user-<br/>facing product. For example, in Avid's Dynamics III plug-in the Expander, Compressor, and DeEsser are each<br/>registered as separate Effects. All stem format variations within each Effect are registered within that Effect's<br/>AAX_IEffectDescriptor using AddComponent().<br/></p>
<p>The AAX_eProperty_ProductID value for all ProcessProcs within a single Effect must be identical.<br/></p>
<p>This method passes ownership of an AAX_IEffectDescriptor object to the AAX_ICollection. The AAX_IEffectDescriptor<br/>must not be deleted by the AAX plug-in, nor should it be edited in any way after it is passed to the AAX_ICollection.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.150 AAX_VCollection Class Reference 997<br/></b></p>
<p><b>Parameters<br/></b>in inEffectID The effect ID.<br/>in inEffectDescriptor The Effect descriptor.<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>14.150.3.3 SetManufacturerName()<br/></b></p>
<p>AAX_Result AAX_VCollection::SetManufacturerName (<br/>const char &#8727; inPackageName ) [virtual]<br/></p>
<p>Set the plug-in manufacturer name.<br/></p>
<p><b>Parameters<br/></b>in inPackageName The name of the manufacturer.<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>14.150.3.4 AddPackageName()<br/></b></p>
<p>AAX_Result AAX_VCollection::AddPackageName (<br/>const char &#8727; inPackageName ) [virtual]<br/></p>
<p>Set the plug-in package name.<br/></p>
<p>May be called multiple times to add abbreviated package names.<br/></p>
<p><b>Note<br/></b>Every plug-in must include at least one name variant with 16 or fewer characters, plus a null terminating<br/>character. Used for Presets folder.<br/></p>
<p><b>Parameters<br/></b>in inPackageName The name of the package.<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>14.150.3.5 SetPackageVersion()<br/></b></p>
<p>AAX_Result AAX_VCollection::SetPackageVersion (<br/>uint32_t inVersion ) [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>998 Class Documentation<br/></b></p>
<p>Set the plug-in package version number.<br/></p>
<p><b>Parameters<br/></b>in inVersion The package version numner.<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>14.150.3.6 NewPropertyMap()<br/></b></p>
<p>AAX_IPropertyMap&#8727; AAX_VCollection::NewPropertyMap ( ) [virtual]<br/></p>
<p>Create a new property map.<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>14.150.3.7 SetProperties()<br/></b></p>
<p>AAX_Result AAX_VCollection::SetProperties (<br/>AAX_IPropertyMap &#8727; inProperties ) [virtual]<br/></p>
<p>Set the properties of the collection.<br/></p>
<p><b>Parameters<br/></b>in inProperties Collection properties<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>14.150.3.8 GetHostVersion()<br/></b></p>
<p>AAX_Result AAX_VCollection::GetHostVersion (<br/>uint32_t &#8727; outVersion ) const [virtual]<br/></p>
<p>Get the current version of the host.<br/>See AAXATTR_Client_Version for information about the version data format<br/></p>
<p><b>Warning<br/></b>Do not use this method to infer host feature support. Instead, use AAX_IDescriptionHost to query the host for<br/>specific features.<br/>AAX plugin description details are cached and might not be re-scanned even if the host ver-<br/>sion changes. Be careful to avoid changing any cacheable information based on this data. See<br/>Host feature and environment checks for more information.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.150 AAX_VCollection Class Reference 999<br/></b></p>
<p><b>Parameters<br/></b>in outVersion Host version<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>14.150.3.9 DescriptionHost() [1/2]<br/></b></p>
<p>AAX_IDescriptionHost&#8727; AAX_VCollection::DescriptionHost ( ) [virtual]<br/></p>
<p>Get a pointer to an AAX_IDescriptionHost, if supported by the host<br/></p>
<p>This interface is served by the AAX_ICollection in order to avoid requiring a new method prototype for the<br/>GetEffectDescriptions() method called from the AAX Library.<br/></p>
<p><b>See also<br/></b>AAX_UIDs.h for available feature UIDs, e.g. AAXATTR_ClientFeature_AuxOutputStem<br/></p>
<p><b>Warning<br/></b>AAX plugin description details are cached and might not be re-scanned even if attributes of the host<br/>description change. Be careful to avoid changing any cacheable information based on this data. See<br/>Host feature and environment checks for more information.<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>14.150.3.10 DescriptionHost() [2/2]<br/></b></p>
<p>const AAX_IDescriptionHost&#8727; AAX_VCollection::DescriptionHost ( ) const [virtual]<br/></p>
<p>Get a pointer to an AAX_IDescriptionHost, if supported by the host<br/></p>
<p>This interface is served by the AAX_ICollection in order to avoid requiring a new method prototype for the<br/>GetEffectDescriptions() method called from the AAX Library.<br/></p>
<p><b>See also<br/></b>AAX_UIDs.h for available feature UIDs, e.g. AAXATTR_ClientFeature_AuxOutputStem<br/></p>
<p><b>Warning<br/></b>AAX plugin description details are cached and might not be re-scanned even if attributes of the host<br/>description change. Be careful to avoid changing any cacheable information based on this data. See<br/>Host feature and environment checks for more information.<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1000 Class Documentation<br/></b></p>
<p><b>14.150.3.11 HostDefinition()<br/></b></p>
<p>IACFDefinition&#8727; AAX_VCollection::HostDefinition ( ) const [virtual]<br/></p>
<p>Get a pointer to an IACFDefinition, if supported by the host<br/></p>
<p>This interface is served by the AAX_ICollection in order to avoid requiring a new method prototype for the<br/>GetEffectDescriptions() method called from the AAX Library.<br/></p>
<p><b>See also<br/></b>AAX_UIDs.h for available host attribute UIDs, e.g. AAXATTR_Client_Level<br/></p>
<p><b>Warning<br/></b>AAX plugin description details are cached and might not be re-scanned even if attributes of the host definition<br/>change, for example the host level. Be careful to avoid changing any cacheable information based on this<br/>data. See Host feature and environment checks for more information.<br/></p>
<p>The implementation of AAX_ICollection owns the referenced object. No AddRef occurs.<br/></p>
<p>IACFDefinition::DefineAttribute() is not supported on this object<br/></p>
<p>Implements AAX_ICollection.<br/></p>
<p><b>14.150.3.12 GetIUnknown()<br/></b></p>
<p>IACFPluginDefinition&#8727; AAX_VCollection::GetIUnknown ( ) const<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VCollection.h<br/></p>
<p><b>14.151 AAX_VComponentDescriptor Class Reference<br/></b></p>
<p>#include &lt;AAX_VComponentDescriptor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VComponentDescriptor:<br/></p>
<p>Collaboration diagram for AAX_VComponentDescriptor:<br/></p>
<p><b>14.151.1 Description<br/></b></p>
<p>Version-managed concrete AAX_IComponentDescriptor class.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.151 AAX_VComponentDescriptor Class Reference 1001<br/></b></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_VComponentDescriptor (IACFUnknown &#8727;pUnkHost)<br/>&#8226; &#8764;AAX_VComponentDescriptor () AAX_OVERRIDE<br/>&#8226; AAX_Result Clear () AAX_OVERRIDE<br/></p>
<p>Clears the descriptor.<br/>&#8226; AAX_Result AddReservedField (AAX_CFieldIndex inFieldIndex, uint32_t inFieldType) AAX_OVERRIDE<br/></p>
<p>Subscribes a context field to host-provided services or information.<br/>&#8226; AAX_Result AddAudioIn (AAX_CFieldIndex inFieldIndex) AAX_OVERRIDE<br/></p>
<p>Subscribes an audio input context field.<br/>&#8226; AAX_Result AddAudioOut (AAX_CFieldIndex inFieldIndex) AAX_OVERRIDE<br/></p>
<p>Subscribes an audio output context field.<br/>&#8226; AAX_Result AddAudioBufferLength (AAX_CFieldIndex inFieldIndex) AAX_OVERRIDE<br/></p>
<p>Subscribes a buffer length context field.<br/>&#8226; AAX_Result AddSampleRate (AAX_CFieldIndex inFieldIndex) AAX_OVERRIDE<br/></p>
<p>Subscribes a sample rate context field.<br/>&#8226; AAX_Result AddClock (AAX_CFieldIndex inFieldIndex) AAX_OVERRIDE<br/></p>
<p>Subscribes a clock context field.<br/>&#8226; AAX_Result AddSideChainIn (AAX_CFieldIndex inFieldIndex) AAX_OVERRIDE<br/></p>
<p>Subscribes a side-chain input context field.<br/>&#8226; AAX_Result AddDataInPort (AAX_CFieldIndex inFieldIndex, uint32_t inPacketSize, AAX_EDataInPortType<br/></p>
<p>inPortType) AAX_OVERRIDE<br/>Adds a custom data port to the algorithm context.<br/></p>
<p>&#8226; AAX_Result AddAuxOutputStem (AAX_CFieldIndex inFieldIndex, int32_t inStemFormat, const char in&#8592;&#8617;<br/>NameUTF8[ ]) AAX_OVERRIDE<br/></p>
<p>Adds an auxiliary output stem for a plug-in.<br/>&#8226; AAX_Result AddPrivateData (AAX_CFieldIndex inFieldIndex, int32_t inDataSize, uint32_t inOptions)<br/></p>
<p>AAX_OVERRIDE<br/>Adds a private data port to the algorithm context.<br/></p>
<p>&#8226; AAX_Result AddTemporaryData (AAX_CFieldIndex inFieldIndex, uint32_t inDataElementSize) AAX_OVERRIDE<br/>Adds a block of data to a context that is not saved between callbacks and is scaled by the system buffer size.<br/></p>
<p>&#8226; AAX_Result AddDmaInstance (AAX_CFieldIndex inFieldIndex, AAX_IDma::EMode inDmaMode) AAX_OVERRIDE<br/>Adds a DMA field to the plug-in's context.<br/></p>
<p>&#8226; AAX_Result AddMeters (AAX_CFieldIndex inFieldIndex, const AAX_CTypeID &#8727;inMeterIDs, const uint32_t<br/>inMeterCount) AAX_OVERRIDE<br/></p>
<p>Adds a meter field to the plug-in's context.<br/>&#8226; AAX_Result AddMIDINode (AAX_CFieldIndex inFieldIndex, AAX_EMIDINodeType inNodeType, const char<br/></p>
<p>inNodeName[ ], uint32_t channelMask) AAX_OVERRIDE<br/>Adds a MIDI node field to the plug-in's context.<br/></p>
<p>&#8226; AAX_IPropertyMap &#8727; NewPropertyMap () const AAX_OVERRIDE<br/>Creates a new, empty property map.<br/></p>
<p>&#8226; AAX_IPropertyMap &#8727; DuplicatePropertyMap (AAX_IPropertyMap &#8727;inPropertyMap) const AAX_OVERRIDE<br/>Creates a new property map using an existing property map.<br/></p>
<p>&#8226; virtual AAX_Result AddProcessProc_Native (AAX_CProcessProc inProcessProc, AAX_IPropertyMap<br/>&#8727;inProperties=NULL, AAX_CInstanceInitProc inInstanceInitProc=NULL, AAX_CBackgroundProc in&#8592;&#8617;<br/>BackgroundProc=NULL, AAX_CSelector &#8727;outProcID=NULL) AAX_OVERRIDE<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/>&#8226; virtual AAX_Result AddProcessProc_TI (const char inDLLFileNameUTF8[ ], const char inProcessProc&#8592;&#8617;<br/></p>
<p>Symbol[ ], AAX_IPropertyMap &#8727;inProperties=NULL, const char inInstanceInitProcSymbol[ ]=NULL, const<br/>char inBackgroundProcSymbol[ ]=NULL, AAX_CSelector &#8727;outProcID=NULL) AAX_OVERRIDE<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/>&#8226; virtual AAX_Result AddProcessProc (AAX_IPropertyMap &#8727;inProperties, AAX_CSelector &#8727;outProc&#8592;&#8617;<br/></p>
<p>IDs=NULL, int32_t inProcIDsSize=0) AAX_OVERRIDE<br/>Registers one or more algorithm processing entrypoints (process procedures)<br/></p>
<p>&#8226; IACFUnknown &#8727; GetIUnknown (void) const<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1002 Class Documentation<br/></b></p>
<p><b>Friends<br/></b>&#8226; class AAX_VPropertyMap<br/></p>
<p><b>14.151.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.151.2.1 AAX_VComponentDescriptor()<br/></b></p>
<p>AAX_VComponentDescriptor::AAX_VComponentDescriptor (<br/>IACFUnknown &#8727; pUnkHost )<br/></p>
<p><b>14.151.2.2 </b>&#8764;<b>AAX_VComponentDescriptor()<br/></b></p>
<p>AAX_VComponentDescriptor::&#8764;AAX_VComponentDescriptor ( )<br/></p>
<p><b>14.151.3 Member Function Documentation<br/></b></p>
<p><b>14.151.3.1 Clear()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::Clear ( ) [virtual]<br/></p>
<p>Clears the descriptor.<br/></p>
<p>Clears the descriptor and readies it for the next algorithm description<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.2 AddReservedField()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddReservedField (<br/>AAX_CFieldIndex inFieldIndex,<br/>uint32_t inFieldType ) [virtual]<br/></p>
<p>Subscribes a context field to host-provided services or information.<br/></p>
<p><b>Note<br/></b>Currently for internal use only.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.151 AAX_VComponentDescriptor Class Reference 1003<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/>in inFieldType Type of field that is being added<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.3 AddAudioIn()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddAudioIn (<br/>AAX_CFieldIndex inFieldIndex ) [virtual]<br/></p>
<p>Subscribes an audio input context field.<br/></p>
<p>Defines an audio in port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: float&#8727;&#8727;<br/>&#8226; Data kind: An array of float arrays, one for each input channel<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.4 AddAudioOut()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddAudioOut (<br/>AAX_CFieldIndex inFieldIndex ) [virtual]<br/></p>
<p>Subscribes an audio output context field.<br/></p>
<p>Defines an audio out port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: float&#8727;&#8727;<br/>&#8226; Data kind: An array of float arrays, one for each output channel<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1004 Class Documentation<br/></b></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.5 AddAudioBufferLength()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddAudioBufferLength (<br/>AAX_CFieldIndex inFieldIndex ) [virtual]<br/></p>
<p>Subscribes a buffer length context field.<br/></p>
<p>Defines a buffer length port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: int32_t&#8727;<br/>&#8226; Data kind: The number of samples in the current audio buffer<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.6 AddSampleRate()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddSampleRate (<br/>AAX_CFieldIndex inFieldIndex ) [virtual]<br/></p>
<p>Subscribes a sample rate context field.<br/></p>
<p>Defines a sample rate port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: AAX_CSampleRate &#8727;<br/>&#8226; Data kind: The current sample rate<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.7 AddClock()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddClock (<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.151 AAX_VComponentDescriptor Class Reference 1005<br/></b></p>
<p>AAX_CFieldIndex inFieldIndex ) [virtual]<br/></p>
<p>Subscribes a clock context field.<br/></p>
<p>Defines a clock port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: AAX_CTimestamp &#8727;<br/>&#8226; Data kind: A running counter which increments even when the transport is not playing. The counter incre-<br/></p>
<p>ments exactly once per sample quantum.<br/></p>
<p><b>Host Compatibility Notes </b>As of Pro Tools 11.1, this field may be used in both Native and DSP plug-ins. The<br/>DSP clock data is a 16-bit cycling counter. This field was only available for Native<br/>plug-ins in previous Pro Tools versions.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.8 AddSideChainIn()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddSideChainIn (<br/>AAX_CFieldIndex inFieldIndex ) [virtual]<br/></p>
<p>Subscribes a side-chain input context field.<br/></p>
<p>Defines a side-chain input port for host-provided information in the algorithm's context structure.<br/></p>
<p>&#8226; Data type: int32_t&#8727;<br/>&#8226; Data kind: The index of the plug-in's first side-chain input channel within the array of input audio buffers<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.9 AddDataInPort()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddDataInPort (<br/>AAX_CFieldIndex inFieldIndex,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1006 Class Documentation<br/></b></p>
<p>uint32_t inPacketSize,<br/>AAX_EDataInPortType inPortType ) [virtual]<br/></p>
<p>Adds a custom data port to the algorithm context.<br/></p>
<p>Defines a read-only data port for plug-in information in the algorithm's context structure. The plug-in can send<br/>information to this port using AAX_IController::PostPacket().<br/></p>
<p>The host guarantees that all packets will be delivered to this port in the order in which they were posted, up to the<br/>point of a packet buffer overflow, though some packets may be dropped depending on the inPortType and host<br/>implementation.<br/></p>
<p><b>Note<br/></b>When a plug-in is operating in offline (AudioSuite) mode, all data ports operate as AAX_eDataInPortType_Unbuffered<br/>ports<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the port, generated using AAX_FIELD_INDEX<br/>in inPacketSize Size of the data packets that will be sent to this port<br/>in inPortType The requested packet delivery behavior for this port<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.10 AddAuxOutputStem()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddAuxOutputStem (<br/>AAX_CFieldIndex inFieldIndex,<br/>int32_t inStemFormat,<br/>const char inNameUTF8[] ) [virtual]<br/></p>
<p>Adds an auxiliary output stem for a plug-in.<br/>Use this method to add additional output channels to the algorithm context.<br/>The aux output stem audio buffers will be added to the end of the audio outputs array in the order in which they are<br/>described. When writing audio data to a specific aux output, find the proper starting channel by accumulating all of<br/>the channels of the main output stem format and any previously-described aux output stems.<br/>The plug-in is responsible for providing a meaningful name for each aux outputs. At the very least, individual outputs<br/>should be labeled &quot;Output xx&quot;, where &quot;xx&quot; is the aux output number as it is defined in the plug-in. The output name<br/>should also include the words &quot;mono&quot; and &quot;stereo&quot; to support when users are looking for an output with a specific<br/>stem format.<br/></p>
<p><b>Host Compatibility Notes </b>There is a hard limit to the number of outputs that Pro Tools supports for a single plug-in<br/>instance. This limit is currently set at 256 channels, which includes all of the plug-in's<br/>output channels in addition to the sum total of all of its aux output stem channels.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools supports only mono and stereo auxiliary output stem formats<br/></p>
<p><b>Warning<br/></b>This method will return an error code on hosts which do not support auxiliary output stems. This indicates that<br/>the host will not provide audio buffers for auxiliary output stems during processing. A plug-in must not attempt<br/>to write data into auxiliary output stem buffers which have not been provided by the host!<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.151 AAX_VComponentDescriptor Class Reference 1007<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex DEPRECATED: This parameter is no longer needed by the host, but is included in the<br/></p>
<p>interface for binary compatibility<br/>in inStemFormat The stem format of the new aux output<br/>in inNameUTF8 The name of the aux output. This name is static and cannot be changed after the<br/></p>
<p>descriptor is submitted to the host<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.11 AddPrivateData()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddPrivateData (<br/>AAX_CFieldIndex inFieldIndex,<br/>int32_t inDataSize,<br/>uint32_t inOptions ) [virtual]<br/></p>
<p>Adds a private data port to the algorithm context.<br/></p>
<p>Defines a read/write data port for private state data. Data written to this port will be maintained by the host between<br/>calls to the algorithm context.<br/></p>
<p><b>See also<br/></b>alg_pd_registration<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the port, generated using AAX_FIELD_INDEX<br/>in inDataSize Size of the data packets that will be sent to this port<br/>in inOptions Options that define the private data port's behavior<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.12 AddTemporaryData()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddTemporaryData (<br/>AAX_CFieldIndex inFieldIndex,<br/>uint32_t inDataElementSize ) [virtual]<br/></p>
<p>Adds a block of data to a context that is not saved between callbacks and is scaled by the system buffer size.<br/>This can be very useful if you use block processing and need to store intermediate results. Just specify your base<br/>element size and the system will scale the overall block size by the buffer size. For example, to create a buffer of<br/>floats that is the length of the block, specify 4 bytes as the elementsize.<br/>This data block does not retain state across callback and can also be reused across instances on memory contrained<br/>systems.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1008 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the port, generated using AAX_FIELD_INDEX<br/>in inDataElementSize The size of a single piece of data in the block. This number will be multipied by<br/></p>
<p>the processing block size to determine total block size.<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.13 AddDmaInstance()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddDmaInstance (<br/>AAX_CFieldIndex inFieldIndex,<br/>AAX_IDma::EMode inDmaMode ) [virtual]<br/></p>
<p>Adds a DMA field to the plug-in's context.<br/></p>
<p>DMA (direct memory access) provides efficient reads from and writes to external memory on the DSP. DMA behavior<br/>is emulated in host-based plug-ins for cross-platform portability.<br/></p>
<p><b>Note<br/></b>The order in which DMA instances are added defines their priority and therefore order of execution of DMA<br/>operations. In most plug-ins, Scatter fields should be placed first in order to achieve the lowest possible access<br/>latency.<br/></p>
<p>For more information, see Direct Memory Access .<br/></p>
<p><b>Todo </b>Update the DMA system management such that operation priority can be set arbitrarily<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/>in inDmaMode AAX_IDma::EMode that will apply to this field<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.14 AddMeters()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddMeters (<br/>AAX_CFieldIndex inFieldIndex,<br/>const AAX_CTypeID &#8727; inMeterIDs,<br/>const uint32_t inMeterCount ) [virtual]<br/></p>
<p>Adds a meter field to the plug-in's context.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.151 AAX_VComponentDescriptor Class Reference 1009<br/></b></p>
<p>Meter fields include an array of meter tap values, with one tap per meter per context. Only one meter field should<br/>be added per Component. Individual meter behaviors can be described at the Effect level.<br/></p>
<p>For more information, see Plug-in meters .<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1010 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex Unique identifier for the field, generated using AAX_FIELD_INDEX<br/>in inMeterIDs Array of 32-bit IDs, one for each meter. Meter IDs must be unique within the Effect.<br/>in inMeterCount The number of meters included in this field<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.15 AddMIDINode()<br/></b></p>
<p>AAX_Result AAX_VComponentDescriptor::AddMIDINode (<br/>AAX_CFieldIndex inFieldIndex,<br/>AAX_EMIDINodeType inNodeType,<br/>const char inNodeName[],<br/>uint32_t channelMask ) [virtual]<br/></p>
<p>Adds a MIDI node field to the plug-in's context.<br/></p>
<p>&#8226; Data type: AAX_IMIDINode &#8727;<br/></p>
<p>The resulting MIDI node data will be available both in the algorithm context and in the plug-in's data model via<br/>UpdateMIDINodes().<br/></p>
<p>To add a MIDI node that is only accessible to the plug-in's data model, use AAX_IEffectDescriptor::AddControlMIDINode()<br/></p>
<p><b>Host Compatibility Notes </b>Due to current restrictions MIDI data won't be delivered to DSP algorithms, only to AAX<br/>Native.<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex The ID of the port. MIDI node ports should formatted as a pointer to an<br/></p>
<p>AAX_IMIDINode.<br/>in inNodeType The type of MIDI node, as AAX_EMIDINodeType<br/>in inNodeName The name of the MIDI node as it should appear in the host's UI<br/>in channelMask The channel mask for the MIDI node. This parameter specifies used MIDI channels.<br/></p>
<p>For Global MIDI nodes, use a mask of AAX_EMidiGlobalNodeSelectors<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.16 NewPropertyMap()<br/></b></p>
<p>AAX_IPropertyMap&#8727; AAX_VComponentDescriptor::NewPropertyMap ( ) const [virtual]<br/></p>
<p>Creates a new, empty property map.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.151 AAX_VComponentDescriptor Class Reference 1011<br/></b></p>
<p>The component descriptor owns the reference to the resulting property map, and the underlying property map is<br/>destroyed when the component descriptor is released.<br/></p>
<p>This implementation retains each generated AAX_IPropertyMap and destroys the property map upon<br/>AAX_VComponentDescriptor destruction<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.17 DuplicatePropertyMap()<br/></b></p>
<p>AAX_IPropertyMap&#8727; AAX_VComponentDescriptor::DuplicatePropertyMap (<br/>AAX_IPropertyMap &#8727; inPropertyMap ) const [virtual]<br/></p>
<p>Creates a new property map using an existing property map.<br/></p>
<p>The component descriptor owns the reference to the resulting property map, and the underlying property map is<br/>destroyed when the component descriptor is released.<br/></p>
<p><b>Parameters<br/></b>in inPropertyMap The property values in this map will be copied into the new map<br/></p>
<p>This implementation retains each generated AAX_IPropertyMap and destroys the property map upon<br/>AAX_VComponentDescriptor destruction<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.18 AddProcessProc_Native()<br/></b></p>
<p>virtual AAX_Result AAX_VComponentDescriptor::AddProcessProc_Native (<br/>AAX_CProcessProc inProcessProc,<br/>AAX_IPropertyMap &#8727; inProperties = NULL,<br/>AAX_CInstanceInitProc inInstanceInitProc = NULL,<br/>AAX_CBackgroundProc inBackgroundProc = NULL,<br/>AAX_CSelector &#8727; outProcID = NULL ) [virtual]<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/></p>
<p><b>Parameters<br/></b>in inProcessProc Symbol for this processing callback<br/>in inProperties A property map for this processing callback. The property map's values are<br/></p>
<p>copied by the host and associated with the new ProcessProc. The property map<br/>contents are unchanged and the map may be re-used when registering<br/>additional ProcessProcs.<br/></p>
<p>in inInstanceInitProc Initialization routine that will be called when a new instance of the Effect is<br/>created. See Algorithm initialization.<br/></p>
<p>in inBackgroundProc Background routine that will be called in an idle context within the same address<br/>space as the associated process procedure. See<br/>Background processing callback<br/></p>
<p>out outProcID<b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1012 Class Documentation<br/></b></p>
<p><b>Todo </b>document this parameter<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.19 AddProcessProc_TI()<br/></b></p>
<p>virtual AAX_Result AAX_VComponentDescriptor::AddProcessProc_TI (<br/>const char inDLLFileNameUTF8[],<br/>const char inProcessProcSymbol[],<br/>AAX_IPropertyMap &#8727; inProperties = NULL,<br/>const char inInstanceInitProcSymbol[] = NULL,<br/>const char inBackgroundProcSymbol[] = NULL,<br/>AAX_CSelector &#8727; outProcID = NULL ) [virtual]<br/></p>
<p>Registers an algorithm processing entrypoint (process procedure) for the native architecture.<br/></p>
<p><b>Parameters<br/></b>in inDLLFileNameUTF8 UTF-8 encoded filename for the ELF DLL containing the algorithm code<br/></p>
<p>fragment<br/>in inProcessProcSymbol Symbol for this processing callback<br/>in inProperties A property map for this processing callback. The property map's values<br/></p>
<p>are copied by the host and associated with the new ProcessProc. The<br/>property map contents are unchanged and the map may be re-used<br/>when registering additional ProcessProcs.<br/></p>
<p>in inInstanceInitProcSymbol Initialization routine that will be called when a new instance of the Effect<br/>is created. Must be included in the same DLL as the main algorithm<br/>entrypoint. See Algorithm initialization.<br/></p>
<p>in inBackgroundProcSymbol Background routine that will be called in an idle context within the same<br/>address space as the associated process procedure. Must be included in<br/>the same DLL as the main algorithm entrypoint. See<br/>Background processing callback<br/></p>
<p>out outProcID<br/></p>
<p><b>Todo </b>document this parameter<br/></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.20 AddProcessProc()<br/></b></p>
<p>virtual AAX_Result AAX_VComponentDescriptor::AddProcessProc (<br/>AAX_IPropertyMap &#8727; inProperties,<br/>AAX_CSelector &#8727; outProcIDs = NULL,<br/>int32_t inProcIDsSize = 0 ) [virtual]<br/></p>
<p>Registers one or more algorithm processing entrypoints (process procedures)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.151 AAX_VComponentDescriptor Class Reference 1013<br/></b></p>
<p>Any non-overlapping set of processing entrypoints may be specified. Typically this can be used to specify both<br/>Native and TI entrypoints using the same call.<br/></p>
<p>The AAX Library implementation of this method includes backwards compatibility logic to complete the Process&#8592;&#8617;<br/>Proc registration on hosts which do not support this method. Therefore plug-in code may use this single registration<br/>routine instead of separate calls to AddProcessProc_Native(), AddProcessProc_TI(), etc. regardless of the host<br/>version.<br/></p>
<p>The following properties replace the input arguments to the platform-specific registration methods:<br/></p>
<p>AddProcessProc_Native() (AAX_eProperty_PlugInID_Native, AAX_eProperty_PlugInID_AudioSuite)<br/></p>
<p>&#8226; AAX_CProcessProc iProcessProc: AAX_eProperty_NativeProcessProc (required)<br/></p>
<p>&#8226; AAX_CInstanceInitProc iInstanceInitProc: AAX_eProperty_NativeInstanceInitProc (optional)<br/></p>
<p>&#8226; AAX_CBackgroundProc iBackgroundProc: AAX_eProperty_NativeBackgroundProc (optional)<br/></p>
<p>AddProcessProc_TI() (AAX_eProperty_PlugInID_TI)<br/></p>
<p>&#8226; const char inDLLFileNameUTF8[]: AAX_eProperty_TIDLLFileName (required)<br/></p>
<p>&#8226; const char iProcessProcSymbol[]: AAX_eProperty_TIProcessProc (required)<br/></p>
<p>&#8226; const char iInstanceInitProcSymbol[]: AAX_eProperty_TIInstanceInitProc (optional)<br/></p>
<p>&#8226; const char iBackgroundProcSymbol[]: AAX_eProperty_TIBackgroundProc (optional)<br/></p>
<p>If any platform-specific plug-in ID property is present in iProperties then AddProcessProc() will check for the<br/>required properties for that platform.<br/></p>
<p><b>Note<br/></b>AAX_eProperty_AudioBufferLength will be ignored for the Native and AudioSuite ProcessProcs since it should<br/>only be used for AAX DSP.<br/></p>
<p><b>Parameters<br/></b>in inProperties A property map for this processing callback. The property map's values are copied by<br/></p>
<p>the host and associated with the new ProcessProc. The property map contents are<br/>unchanged and the map may be re-used when registering additional ProcessProcs.<br/></p>
<p>out outProcIDs<br/></p>
<p><b>Todo </b>document this parameter Returned array will be NULL-terminated<br/></p>
<p><b>Parameters<br/></b>in inProcIDsSize The size of the array provided to oProcIDs. If oProcIDs is non-NULL but<br/></p>
<p>iProcIDsSize is not large enough for all of the registered ProcessProcs (plus one<br/>for NULL termination) then this method will fail with<br/>AAX_ERROR_ARGUMENT_BUFFER_OVERFLOW<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1014 Class Documentation<br/></b></p>
<p>Implements AAX_IComponentDescriptor.<br/></p>
<p><b>14.151.3.21 GetIUnknown()<br/></b></p>
<p>IACFUnknown&#8727; AAX_VComponentDescriptor::GetIUnknown (<br/>void ) const<br/></p>
<p><b>14.151.4 Friends And Related Function Documentation<br/></b></p>
<p><b>14.151.4.1 AAX_VPropertyMap<br/></b></p>
<p>friend class AAX_VPropertyMap [friend]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VComponentDescriptor.h<br/></p>
<p><b>14.152 AAX_VController Class Reference<br/></b></p>
<p>#include &lt;AAX_VController.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VController:<br/></p>
<p>Collaboration diagram for AAX_VController:<br/></p>
<p><b>14.152.1 Description<br/></b></p>
<p>Version-managed concrete Controller class.<br/></p>
<p>For usage information, see Host-provided interfaces<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.152 AAX_VController Class Reference 1015<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_VController (IACFUnknown &#8727;pUnknown)<br/>&#8226; &#8764;AAX_VController () override<br/>&#8226; AAX_Result GetEffectID (AAX_IString &#8727;outEffectID) const AAX_OVERRIDE<br/>&#8226; AAX_Result GetSampleRate (AAX_CSampleRate &#8727;outSampleRate) const AAX_OVERRIDE<br/></p>
<p>CALL: Returns the current literal sample rate.<br/>&#8226; AAX_Result GetInputStemFormat (AAX_EStemFormat &#8727;outStemFormat) const AAX_OVERRIDE<br/></p>
<p>CALL: Returns the plug-in's input stem format.<br/>&#8226; AAX_Result GetOutputStemFormat (AAX_EStemFormat &#8727;outStemFormat) const AAX_OVERRIDE<br/></p>
<p>CALL: Returns the plug-in's output stem format.<br/>&#8226; AAX_Result GetSignalLatency (int32_t &#8727;outSamples) const AAX_OVERRIDE<br/></p>
<p>CALL: Returns the most recent signal (algorithmic) latency that has been published by the plug-in.<br/>&#8226; AAX_Result GetHybridSignalLatency (int32_t &#8727;outSamples) const AAX_OVERRIDE<br/></p>
<p>CALL: Returns the latency between the algorithm normal input samples and the inputs returning from the hyrbid<br/>component.<br/></p>
<p>&#8226; AAX_Result GetPlugInTargetPlatform (AAX_CTargetPlatform &#8727;outTargetPlatform) const AAX_OVERRIDE<br/>CALL: Returns execution platform type, native or TI.<br/></p>
<p>&#8226; AAX_Result GetIsAudioSuite (AAX_CBoolean &#8727;outIsAudioSuite) const AAX_OVERRIDE<br/>CALL: Returns true for AudioSuite instances.<br/></p>
<p>&#8226; AAX_Result GetCycleCount (AAX_EProperty inWhichCycleCount, AAX_CPropertyValue &#8727;outNumCycles)<br/>const AAX_OVERRIDE<br/></p>
<p>CALL: returns the plug-in's current real-time DSP cycle count.<br/>&#8226; AAX_Result GetTODLocation (AAX_CTimeOfDay &#8727;outTODLocation) const AAX_OVERRIDE<br/></p>
<p>CALL: Returns the current Time Of Day (TOD) of the system.<br/>&#8226; AAX_Result GetCurrentAutomationTimestamp (AAX_CTransportCounter &#8727;outTimestamp) const AAX_OVERRIDE<br/></p>
<p>CALL: Returns the current automation timestamp if called during the GenerateCoefficients() call AND the generation<br/>of coefficients is being triggered by an automation point instead of immediate changes.<br/></p>
<p>&#8226; AAX_Result GetHostName (AAX_IString &#8727;outHostNameString) const AAX_OVERRIDE<br/>CALL: Returns name of the host application this plug-in instance is being loaded by. This string also typically includes<br/>version information.<br/></p>
<p>&#8226; AAX_Result SetSignalLatency (int32_t inNumSamples) AAX_OVERRIDE<br/>CALL: Submits a request to change the delay compensation value that the host uses to account for the plug-in's<br/>signal (algorithmic) latency.<br/></p>
<p>&#8226; AAX_Result SetCycleCount (AAX_EProperty &#8727;inWhichCycleCounts, AAX_CPropertyValue &#8727;iValues, int32&#8592;&#8617;<br/>_t numValues) AAX_OVERRIDE<br/></p>
<p>CALL: Indicates a change in the plug-in's real-time DSP cycle count.<br/>&#8226; AAX_Result PostPacket (AAX_CFieldIndex inFieldIndex, const void &#8727;inPayloadP, uint32_t inPayloadSize)<br/></p>
<p>AAX_OVERRIDE<br/>CALL: Posts a data packet to the host for routing between plug-in components.<br/></p>
<p>&#8226; AAX_Result SendNotification (AAX_CTypeID inNotificationType, const void &#8727;inNotificationData, uint32_t in&#8592;&#8617;<br/>NotificationDataSize) AAX_OVERRIDE<br/></p>
<p>CALL: Dispatch a notification.<br/>&#8226; AAX_Result SendNotification (AAX_CTypeID inNotificationType) AAX_OVERRIDE<br/></p>
<p>CALL: Sends an event to the GUI (no payload)<br/><b>Note<br/></b></p>
<p>Not an AAX interface method<br/>&#8226; AAX_Result GetCurrentMeterValue (AAX_CTypeID inMeterID, float &#8727;outMeterValue) const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the current value of a host-managed plug-in meter.<br/>&#8226; AAX_Result GetMeterPeakValue (AAX_CTypeID inMeterID, float &#8727;outMeterPeakValue) const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the currently held peak value of a host-managed plug-in meter.<br/>&#8226; AAX_Result ClearMeterPeakValue (AAX_CTypeID inMeterID) const AAX_OVERRIDE<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1016 Class Documentation<br/></b></p>
<p>CALL: Clears the peak value from a host-managed plug-in meter.<br/>&#8226; AAX_Result GetMeterClipped (AAX_CTypeID inMeterID, AAX_CBoolean &#8727;outClipped) const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the clipped flag from a host-managed plug-in meter.<br/>&#8226; AAX_Result ClearMeterClipped (AAX_CTypeID inMeterID) const AAX_OVERRIDE<br/></p>
<p>CALL: Clears the clipped flag from a host-managed plug-in meter.<br/>&#8226; AAX_Result GetMeterCount (uint32_t &#8727;outMeterCount) const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the number of host-managed meters registered by a plug-in.<br/>&#8226; AAX_Result GetNextMIDIPacket (AAX_CFieldIndex &#8727;outPort, AAX_CMidiPacket &#8727;outPacket) AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves MIDI packets for described MIDI nodes.<br/>&#8226; AAX_IPageTable &#8727;CreateTableCopyForEffect (AAX_CPropertyValue inManufacturerID, AAX_CPropertyValue<br/></p>
<p>inProductID, AAX_CPropertyValue inPlugInID, uint32_t inTableType, int32_t inTablePageSize) const<br/>AAX_OVERRIDE<br/></p>
<p>Copy the current page table data for a particular plug-in type.<br/>&#8226; AAX_IPageTable &#8727; CreateTableCopyForLayout (const char &#8727;inEffectID, const char &#8727;inLayoutName, uint32_t<br/></p>
<p>inTableType, int32_t inTablePageSize) const AAX_OVERRIDE<br/>Copy the current page table data for a particular plug-in effect and page table layout.<br/></p>
<p>&#8226; AAX_IPageTable &#8727;CreateTableCopyForEffectFromFile (const char &#8727;inPageTableFilePath, AAX_ETextEncoding<br/>inFilePathEncoding, AAX_CPropertyValue inManufacturerID, AAX_CPropertyValue inProductID, AAX_CPropertyValue<br/>inPlugInID, uint32_t inTableType, int32_t inTablePageSize) const AAX_OVERRIDE<br/></p>
<p>Copy the current page table data for a particular plug-in type.<br/>&#8226; AAX_IPageTable &#8727;CreateTableCopyForLayoutFromFile (const char &#8727;inPageTableFilePath, AAX_ETextEncoding<br/></p>
<p>inFilePathEncoding, const char &#8727;inLayoutName, uint32_t inTableType, int32_t inTablePageSize) const<br/>AAX_OVERRIDE<br/></p>
<p>Copy the current page table data for a particular plug-in effect and page table layout.<br/></p>
<p><b>14.152.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.152.2.1 AAX_VController()<br/></b></p>
<p>AAX_VController::AAX_VController (<br/>IACFUnknown &#8727; pUnknown )<br/></p>
<p><b>14.152.2.2 </b>&#8764;<b>AAX_VController()<br/></b></p>
<p>AAX_VController::&#8764;AAX_VController ( ) [override]<br/></p>
<p><b>14.152.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.152 AAX_VController Class Reference 1017<br/></b></p>
<p><b>14.152.3.1 GetEffectID()<br/></b></p>
<p>AAX_Result AAX_VController::GetEffectID (<br/>AAX_IString &#8727; outEffectID ) const [virtual]<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.2 GetSampleRate()<br/></b></p>
<p>AAX_Result AAX_VController::GetSampleRate (<br/>AAX_CSampleRate &#8727; outSampleRate ) const [virtual]<br/></p>
<p>CALL: Returns the current literal sample rate.<br/></p>
<p><b>Parameters<br/></b>out outSampleRate The current sample rate<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.3 GetInputStemFormat()<br/></b></p>
<p>AAX_Result AAX_VController::GetInputStemFormat (<br/>AAX_EStemFormat &#8727; outStemFormat ) const [virtual]<br/></p>
<p>CALL: Returns the plug-in's input stem format.<br/></p>
<p><b>Parameters<br/></b>out outStemFormat The current input stem format<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.4 GetOutputStemFormat()<br/></b></p>
<p>AAX_Result AAX_VController::GetOutputStemFormat (<br/>AAX_EStemFormat &#8727; outStemFormat ) const [virtual]<br/></p>
<p>CALL: Returns the plug-in's output stem format.<br/></p>
<p><b>Parameters<br/></b>out outStemFormat The current output stem format<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1018 Class Documentation<br/></b></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.5 GetSignalLatency()<br/></b></p>
<p>AAX_Result AAX_VController::GetSignalLatency (<br/>int32_t &#8727; outSamples ) const [virtual]<br/></p>
<p>CALL: Returns the most recent signal (algorithmic) latency that has been published by the plug-in.<br/></p>
<p>This method provides the most recently published signal latency. The host may not have updated its delay compen-<br/>sation to match this signal latency yet, so plug-ins that dynamically change their latency using SetSignalLatency()<br/>should always wait for an AAX_eNotificationEvent_SignalLatencyChanged notification before updating its algorithm<br/>to incur this latency.<br/></p>
<p><b>See also<br/></b>SetSignalLatency()<br/></p>
<p><b>Parameters<br/></b>out outSamples The number of samples of signal delay published by the plug-in<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.6 GetHybridSignalLatency()<br/></b></p>
<p>AAX_Result AAX_VController::GetHybridSignalLatency (<br/>int32_t &#8727; outSamples ) const [virtual]<br/></p>
<p>CALL: Returns the latency between the algorithm normal input samples and the inputs returning from the hyrbid<br/>component.<br/></p>
<p>This method provides the number of samples that the AAX host expects the plug-in to delay a signal. The host will<br/>use this value when accounting for latency across the system.<br/></p>
<p><b>Note<br/></b>This value will generally scale up with sample rate, although it's not a simple multiple due to some fixed<br/>overhead. This value will be fixed for any given sample rate regardless of other buffer size settings in the host<br/>app.<br/></p>
<p><b>Parameters<br/></b>out outSamples The number of samples of hybrid signal delay<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.152 AAX_VController Class Reference 1019<br/></b></p>
<p><b>14.152.3.7 GetPlugInTargetPlatform()<br/></b></p>
<p>AAX_Result AAX_VController::GetPlugInTargetPlatform (<br/>AAX_CTargetPlatform &#8727; outTargetPlatform ) const [virtual]<br/></p>
<p>CALL: Returns execution platform type, native or TI.<br/></p>
<p><b>Parameters<br/></b>out outTargetPlatform The type of the current execution platform as one of AAX_ETargetPlatform.<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.8 GetIsAudioSuite()<br/></b></p>
<p>AAX_Result AAX_VController::GetIsAudioSuite (<br/>AAX_CBoolean &#8727; outIsAudioSuite ) const [virtual]<br/></p>
<p>CALL: Returns true for AudioSuite instances.<br/></p>
<p><b>Parameters<br/></b>out outIsAudioSuite The boolean flag which indicate true for AudioSuite instances.<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.9 GetCycleCount()<br/></b></p>
<p>AAX_Result AAX_VController::GetCycleCount (<br/>AAX_EProperty inWhichCycleCount,<br/>AAX_CPropertyValue &#8727; outNumCycles ) const [virtual]<br/></p>
<p>CALL: returns the plug-in's current real-time DSP cycle count.<br/></p>
<p>This method provides the number of cycles that the AAX host expects the DSP plug-in to consume. The host uses<br/>this value when allocating DSP resources for the plug-in.<br/></p>
<p><b>Note<br/></b>A plug-in should never apply a DSP algorithm with more demanding resource requirements than<br/>what is currently accounted for by the host. To set a higher cycle count value, a plug-in must call<br/>AAX_IController::SetCycleCount(), then poll AAX_IController::GetCycleCount() until the new value has<br/>been applied. Once the host has recognized the new cycle count value, the plug-in may apply the more<br/>demanding algorithm.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1020 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inWhichCycleCount Selector for the requested cycle count metric. One<br/></p>
<p>of:<br/></p>
<p>&#8226; AAX_eProperty_TI_SharedCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_InstanceCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_MaxInstancesPerChip<br/></p>
<p>in outNumCycles The current value of the selected cycle count metric<br/></p>
<p><b>Todo </b>PLACEHOLDER - NOT CURRENTLY IMPLEMENTED IN HOST<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.10 GetTODLocation()<br/></b></p>
<p>AAX_Result AAX_VController::GetTODLocation (<br/>AAX_CTimeOfDay &#8727; outTODLocation ) const [virtual]<br/></p>
<p>CALL: Returns the current Time Of Day (TOD) of the system.<br/></p>
<p>This method provides a plug-in the TOD (in samples) of the current system. TOD is the number of samples that the<br/>playhead has traversed since the beginning of playback.<br/></p>
<p><b>Note<br/></b>The TOD value is the immediate value of the audio engine playhead. This value is incremented within the<br/>audio engine's real-time rendering context; it is not synchronized with non-real-time calls to plug-in interface<br/>methods.<br/></p>
<p><b>Parameters<br/></b>out outTODLocation The current Time Of Day as set by the host<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.11 GetCurrentAutomationTimestamp()<br/></b></p>
<p>AAX_Result AAX_VController::GetCurrentAutomationTimestamp (<br/>AAX_CTransportCounter &#8727; outTimestamp ) const [virtual]<br/></p>
<p>CALL: Returns the current automation timestamp if called during the GenerateCoefficients() call AND the generation<br/>of coefficients is being triggered by an automation point instead of immediate changes.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.152 AAX_VController Class Reference 1021<br/></b></p>
<p><b>Note<br/></b>This function will return 0 if called from outside of GenerateCoefficients() or if the GenerateCoefficients()<br/>call was initiated due to a non-automated change. In those cases, you can get your sample offset from the<br/>transport start using GetTODLocation().<br/></p>
<p><b>Parameters<br/></b>out outTimestamp The current coefficient timestamp. Sample count from transport start.<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.12 GetHostName()<br/></b></p>
<p>AAX_Result AAX_VController::GetHostName (<br/>AAX_IString &#8727; outHostNameString ) const [virtual]<br/></p>
<p>CALL: Returns name of the host application this plug-in instance is being loaded by. This string also typically<br/>includes version information.<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools versions from Pro Tools 11.0 to Pro Tools 12.3.1 will return a generic version<br/>string to this call. This issue is resolved beginning in Pro Tools 12.4.<br/></p>
<p><b>Parameters<br/></b>out outHostNameString The name of the current host application.<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.13 SetSignalLatency()<br/></b></p>
<p>AAX_Result AAX_VController::SetSignalLatency (<br/>int32_t inNumSamples ) [virtual]<br/></p>
<p>CALL: Submits a request to change the delay compensation value that the host uses to account for the plug-in's<br/>signal (algorithmic) latency.<br/></p>
<p>This method is used to request a change in the number of samples that the AAX host expects the plug-in to delay<br/>a signal.<br/></p>
<p>The host is not guaranteed to immediately apply the new latency value. A plug-in should avoid incurring an actual<br/>algorithmic latency that is different than the latency accounted for by the host.<br/></p>
<p>To set a new latency value, a plug-in must call AAX_IController::SetSignalLatency(), then wait for an<br/>AAX_eNotificationEvent_SignalLatencyChanged notification. Once this notification has been received,<br/>AAX_IController::GetSignalLatency() will reflect the updated latency value and the plug-in should immediately<br/>apply any relevant algorithmic changes that alter its latency to this new value.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1022 Class Documentation<br/></b></p>
<p><b>Warning<br/></b>Parameters which affect the latency of a plug-in should not be made available for control through automation.<br/>This will result in audible glitches when delay compensation is adjusted while playing back automation for<br/>these parameters.<br/></p>
<p><b>Parameters<br/></b>in inNumSamples The number of samples of signal delay that the plug-in requests to incur<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.14 SetCycleCount()<br/></b></p>
<p>AAX_Result AAX_VController::SetCycleCount (<br/>AAX_EProperty &#8727; inWhichCycleCounts,<br/>AAX_CPropertyValue &#8727; iValues,<br/>int32_t numValues ) [virtual]<br/></p>
<p>CALL: Indicates a change in the plug-in's real-time DSP cycle count.<br/></p>
<p>This method is used to request a change in the number of cycles that the AAX host expects the DSP plug-in to<br/>consume.<br/></p>
<p><b>Note<br/></b>A plug-in should never apply a DSP algorithm with more demanding resource requirements than<br/>what is currently accounted for by the host. To set a higher cycle count value, a plug-in must call<br/>AAX_IController::SetCycleCount(), then poll AAX_IController::GetCycleCount() until the new value has<br/>been applied. Once the host has recognized the new cycle count value, the plug-in may apply the more<br/>demanding algorithm.<br/></p>
<p><b>Parameters<br/></b>in inWhichCycleCounts Array of selectors indicating the specific cycle count metrics that should be set.<br/></p>
<p>Each selector must be one of:<br/></p>
<p>&#8226; AAX_eProperty_TI_SharedCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_InstanceCycleCount<br/></p>
<p>&#8226; AAX_eProperty_TI_MaxInstancesPerChip<br/></p>
<p>in iValues An array of values requested, one for each of the selected cycle count metrics.<br/>in numValues The size of iValues<br/></p>
<p><b>Todo </b>PLACEHOLDER - NOT CURRENTLY IMPLEMENTED IN HOST<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.152 AAX_VController Class Reference 1023<br/></b></p>
<p><b>14.152.3.15 PostPacket()<br/></b></p>
<p>AAX_Result AAX_VController::PostPacket (<br/>AAX_CFieldIndex inFieldIndex,<br/>const void &#8727; inPayloadP,<br/>uint32_t inPayloadSize ) [virtual]<br/></p>
<p>CALL: Posts a data packet to the host for routing between plug-in components.<br/></p>
<p>The posted packet is identified with a AAX_CFieldIndex packet index value, which is equivalent to the target data<br/>port's identifier. The packet's payload must have the expected size for the given packet index / data port, as defined<br/>when the port is created in Describe. See AAX_IComponentDescriptor::AddDataInPort().<br/></p>
<p><b>Warning<br/></b>Any data structures that will be passed between platforms (for example, sent to a TI DSP in an AAX DSP<br/>plug-in) must be properly data-aligned for compatibility across both platforms. See AAX_ALIGN_FILE_ALG<br/>for more information about guaranteeing cross-platform compatibility of data structures used for algorithm<br/>processing.<br/></p>
<p><b>Note<br/></b>All calls to this method should be made within the scope of AAX_IEffectParameters::GenerateCoefficients().<br/>Calls from outside this method may result in packets not being delivered. See PT-206161<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex The packet's destination port<br/>in inPayloadP A pointer to the packet's payload data<br/>in inPayloadSize The size, in bytes, of the payload data<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.16 SendNotification() [1/2]<br/></b></p>
<p>AAX_Result AAX_VController::SendNotification (<br/>AAX_CTypeID inNotificationType,<br/>const void &#8727; inNotificationData,<br/>uint32_t inNotificationDataSize ) [virtual]<br/></p>
<p>CALL: Dispatch a notification.<br/></p>
<p>The notification is handled by the host and may be delivered back to other plug-in components such as the GUI or<br/>data model (via AAX_IEffectGUI::NotificationReceived() or AAX_IEffectParameters::NotificationReceived(), respec-<br/>tively) depending on the notification type.<br/></p>
<p>The host may choose to dispatch the posted notification either synchronously or asynchronously.<br/></p>
<p>See the AAX_ENotificationEvent documentation for more information.<br/></p>
<p>This method is supported by AAX V2 Hosts only. Check the return code on the return of this function. If the error is<br/>AAX_ERROR_UNIMPLEMENTED, your plug-in is being loaded into a host that doesn't support this feature.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1024 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification to send<br/>in inNotificationData Block of notification data<br/>in inNotificationDataSize Size of inNotificationData, in bytes<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.17 SendNotification() [2/2]<br/></b></p>
<p>AAX_Result AAX_VController::SendNotification (<br/>AAX_CTypeID inNotificationType ) [virtual]<br/></p>
<p>CALL: Sends an event to the GUI (no payload)<br/></p>
<p><b>Note<br/></b>Not an AAX interface method<br/></p>
<p>This version of the notification method is a convenience for notifications which do not take any payload data. Inter-<br/>nally, it simply calls AAX_IController::SendNotification(AAX_CTypeID, const void&#8727;, uint32_t) with a null payload.<br/></p>
<p><b>Parameters<br/></b>in inNotificationType Type of notification to send<br/></p>
<p><b>Note<br/></b>Not an AAX interface method<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.18 GetCurrentMeterValue()<br/></b></p>
<p>AAX_Result AAX_VController::GetCurrentMeterValue (<br/>AAX_CTypeID inMeterID,<br/>float &#8727; outMeterValue ) const [virtual]<br/></p>
<p>CALL: Retrieves the current value of a host-managed plug-in meter.<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being queried<br/>out outMeterValue The queried meter's current value<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.152 AAX_VController Class Reference 1025<br/></b></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.19 GetMeterPeakValue()<br/></b></p>
<p>AAX_Result AAX_VController::GetMeterPeakValue (<br/>AAX_CTypeID inMeterID,<br/>float &#8727; outMeterPeakValue ) const [virtual]<br/></p>
<p>CALL: Retrieves the currently held peak value of a host-managed plug-in meter.<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being queried<br/>out outMeterPeakValue The queried meter's currently held peak value<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.20 ClearMeterPeakValue()<br/></b></p>
<p>AAX_Result AAX_VController::ClearMeterPeakValue (<br/>AAX_CTypeID inMeterID ) const [virtual]<br/></p>
<p>CALL: Clears the peak value from a host-managed plug-in meter.<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being cleared<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.21 GetMeterClipped()<br/></b></p>
<p>AAX_Result AAX_VController::GetMeterClipped (<br/>AAX_CTypeID inMeterID,<br/>AAX_CBoolean &#8727; outClipped ) const [virtual]<br/></p>
<p>CALL: Retrieves the clipped flag from a host-managed plug-in meter.<br/></p>
<p>See AAX_IComponentDescriptor::AddMeters().<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being queried.<br/>out outClipped The queried meter's clipped flag.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1026 Class Documentation<br/></b></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.22 ClearMeterClipped()<br/></b></p>
<p>AAX_Result AAX_VController::ClearMeterClipped (<br/>AAX_CTypeID inMeterID ) const [virtual]<br/></p>
<p>CALL: Clears the clipped flag from a host-managed plug-in meter.<br/></p>
<p>See AAX_IComponentDescriptor::AddMeters().<br/></p>
<p><b>Parameters<br/></b>in inMeterID ID of the meter that is being cleared.<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.23 GetMeterCount()<br/></b></p>
<p>AAX_Result AAX_VController::GetMeterCount (<br/>uint32_t &#8727; outMeterCount ) const [virtual]<br/></p>
<p>CALL: Retrieves the number of host-managed meters registered by a plug-in.<br/></p>
<p>See AAX_IComponentDescriptor::AddMeters().<br/></p>
<p><b>Parameters<br/></b>out outMeterCount The number of registered plug-in meters.<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.24 GetNextMIDIPacket()<br/></b></p>
<p>AAX_Result AAX_VController::GetNextMIDIPacket (<br/>AAX_CFieldIndex &#8727; outPort,<br/>AAX_CMidiPacket &#8727; outPacket ) [virtual]<br/></p>
<p>CALL: Retrieves MIDI packets for described MIDI nodes.<br/></p>
<p><b>Parameters<br/></b>out outPort port ID of the MIDI node that has unhandled packet<br/>out outPacket The MIDI packet<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.152 AAX_VController Class Reference 1027<br/></b></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.25 CreateTableCopyForEffect()<br/></b></p>
<p>AAX_IPageTable&#8727; AAX_VController::CreateTableCopyForEffect (<br/>AAX_CPropertyValue inManufacturerID,<br/>AAX_CPropertyValue inProductID,<br/>AAX_CPropertyValue inPlugInID,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize ) const [virtual]<br/></p>
<p>Copy the current page table data for a particular plug-in type.<br/></p>
<p>The host may restrict plug-ins to only copying page table data from certain plug-in types, such as plug-ins from the<br/>same manufacturer or plug-in types within the same effect.<br/></p>
<p>See Page Table Guide for more information about page tables.<br/></p>
<p><b>Returns<br/></b>A new page table object to which the requested page table data has been copied. Ownership of this object<br/>passes to the caller.<br/>a null pointer if the requested plug-in type is unknown, if inTableType is unknown or if inTablePage&#8592;&#8617;<br/>Size is not a supported size for the given table type.<br/></p>
<p><b>Parameters<br/></b>in inManufacturerID Manufacturer ID of the desired plug-in type<br/>in inProductID Product ID of the desired plug-in type<br/>in inPlugInID Type ID of the desired plug-in type (AAX_eProperty_PlugInID_Native,<br/></p>
<p>AAX_eProperty_PlugInID_TI)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81', etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.26 CreateTableCopyForLayout()<br/></b></p>
<p>AAX_IPageTable&#8727; AAX_VController::CreateTableCopyForLayout (<br/>const char &#8727; inEffectID,<br/>const char &#8727; inLayoutName,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize ) const [virtual]<br/></p>
<p>Copy the current page table data for a particular plug-in effect and page table layout.<br/>The host may restrict plug-ins to only copying page table data from certain effects, such as effects registered within<br/>the current AAX plug-in bundle.<br/>See Page Table Guide for more information about page tables.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1028 Class Documentation<br/></b></p>
<p><b>Returns<br/></b>A new page table object to which the requested page table data has been copied. Ownership of this object<br/>passes to the caller.<br/>a null pointer if the requested effect ID is unknown or if inLayoutName is not a valid layout name for the<br/>page tables registered for the effect.<br/></p>
<p><b>Parameters<br/></b>in inEffectID Effect ID for the desired effect. See AAX_ICollection::AddEffect()<br/>in inLayoutName Page table layout name (&quot;name&quot; attribute of the PTLayout XML tag)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81', etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.27 CreateTableCopyForEffectFromFile()<br/></b></p>
<p>AAX_IPageTable&#8727; AAX_VController::CreateTableCopyForEffectFromFile (<br/>const char &#8727; inPageTableFilePath,<br/>AAX_ETextEncoding inFilePathEncoding,<br/>AAX_CPropertyValue inManufacturerID,<br/>AAX_CPropertyValue inProductID,<br/>AAX_CPropertyValue inPlugInID,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize ) const [virtual]<br/></p>
<p>Copy the current page table data for a particular plug-in type.<br/></p>
<p><b>Returns<br/></b>A new page table object to which the requested page table data has been copied. Ownership of this object<br/>passes to the caller.<br/>a null pointer if the requested plug-in type is unkown, if inTableType is unknown or if inTablePage&#8592;&#8617;<br/>Size is not a supported size for the given table type.<br/></p>
<p><b>Parameters<br/></b>in inPageTableFilePath Path to XML page table file.<br/>in inFilePathEncoding File path text encoding.<br/>in inManufacturerID Manufacturer ID of the desired plug-in type<br/>in inProductID Product ID of the desired plug-in type<br/>in inPlugInID Type ID of the desired plug-in type (AAX_eProperty_PlugInID_Native,<br/></p>
<p>AAX_eProperty_PlugInID_TI)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81',<br/></p>
<p>etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.153 AAX_VDataBufferWrapper Class Reference 1029<br/></b></p>
<p>Implements AAX_IController.<br/></p>
<p><b>14.152.3.28 CreateTableCopyForLayoutFromFile()<br/></b></p>
<p>AAX_IPageTable&#8727; AAX_VController::CreateTableCopyForLayoutFromFile (<br/>const char &#8727; inPageTableFilePath,<br/>AAX_ETextEncoding inFilePathEncoding,<br/>const char &#8727; inLayoutName,<br/>uint32_t inTableType,<br/>int32_t inTablePageSize ) const [virtual]<br/></p>
<p>Copy the current page table data for a particular plug-in effect and page table layout.<br/></p>
<p><b>Returns<br/></b>A new page table object to which the requested page table data has been copied. Ownership of this object<br/>passes to the caller.<br/>a null pointer if inLayoutName is not a valid layout name for the page tables file.<br/></p>
<p><b>Parameters<br/></b>in inPageTableFilePath Path to XML page table file.<br/>in inFilePathEncoding File path text encoding.<br/>in inLayoutName Page table layout name (&quot;name&quot; attribute of the PTLayout XML tag)<br/>in inTableType Four-char type identifier for the requested table type (e.g. 'PgTL', 'Av81', etc.)<br/>in inTablePageSize Page size for the requested table. Some tables support multiple page sizes.<br/></p>
<p>Implements AAX_IController.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VController.h<br/></p>
<p><b>14.153 AAX_VDataBufferWrapper Class Reference<br/></b></p>
<p>#include &lt;AAX_VDataBufferWrapper.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VDataBufferWrapper:<br/></p>
<p>Collaboration diagram for AAX_VDataBufferWrapper:<br/></p>
<p><b>14.153.1 Description<br/></b></p>
<p>Wrapper for an AAX_IDataBuffer.<br/></p>
<p>Like AAX_IController and similar classes, this class provides a non-ACF interface matching an ACF interface, in this<br/>case AAX_IACFDataBuffer .<br/></p>
<p>The implementation of this interface will contain a reference counted pointer to the underlying ACF interface. This<br/>interface may be extended with convenience functions that are not required on the underlying ACF interface.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1030 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_VDataBufferWrapper (IACFUnknown &#8727;iUnknown)<br/>&#8226; &#8764;AAX_VDataBufferWrapper () AAX_OVERRIDE<br/>&#8226; AAX_Result Type (AAX_CTypeID &#8727;oType) const AAX_OVERRIDE<br/>&#8226; AAX_Result Size (int32_t &#8727;oSize) const AAX_OVERRIDE<br/>&#8226; AAX_Result Data (void const &#8727;&#8727;oBuffer) const AAX_OVERRIDE<br/></p>
<p><b>14.153.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.153.2.1 AAX_VDataBufferWrapper()<br/></b></p>
<p>AAX_VDataBufferWrapper::AAX_VDataBufferWrapper (<br/>IACFUnknown &#8727; iUnknown ) [explicit]<br/></p>
<p><b>14.153.2.2 </b>&#8764;<b>AAX_VDataBufferWrapper()<br/></b></p>
<p>AAX_VDataBufferWrapper::&#8764;AAX_VDataBufferWrapper ( )<br/></p>
<p><b>14.153.3 Member Function Documentation<br/></b></p>
<p><b>14.153.3.1 Type()<br/></b></p>
<p>AAX_Result AAX_VDataBufferWrapper::Type (<br/>AAX_CTypeID &#8727; oType ) const [virtual]<br/></p>
<p>The type of data contained in this buffer<br/></p>
<p>This identifier must be sufficient for a client that knows the type to correctly interpret and use the data.<br/></p>
<p>Implements AAX_IDataBufferWrapper.<br/></p>
<p><b>14.153.3.2 Size()<br/></b></p>
<p>AAX_Result AAX_VDataBufferWrapper::Size (<br/>int32_t &#8727; oSize ) const [virtual]<br/></p>
<p>The number of bytes of data in this buffer<br/></p>
<p>Implements AAX_IDataBufferWrapper.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.154 AAX_VDescriptionHost Class Reference 1031<br/></b></p>
<p><b>14.153.3.3 Data()<br/></b></p>
<p>AAX_Result AAX_VDataBufferWrapper::Data (<br/>void const &#8727;&#8727; oBuffer ) const [virtual]<br/></p>
<p>The buffer of data<br/></p>
<p>Implements AAX_IDataBufferWrapper.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VDataBufferWrapper.h<br/></p>
<p><b>14.154 AAX_VDescriptionHost Class Reference<br/></b></p>
<p>#include &lt;AAX_VDescriptionHost.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VDescriptionHost:<br/></p>
<p>Collaboration diagram for AAX_VDescriptionHost:<br/></p>
<p><b>14.154.1 Description<br/></b></p>
<p>Versioned wrapper for access to host service interfaces provided during plug-in description<br/></p>
<p>This object aggregates access to AAX_IACFDescriptionHost and IACFDefinition, with support depending on the<br/>interface support level of the IACFUnknown which is passed to this object upon creation.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_VDescriptionHost (IACFUnknown &#8727;pUnknown)<br/>&#8226; &#8764;AAX_VDescriptionHost () AAX_OVERRIDE<br/>&#8226; const AAX_IFeatureInfo &#8727; AcquireFeatureProperties (const AAX_Feature_UID &amp;inFeatureID) const<br/></p>
<p>AAX_OVERRIDE<br/>&#8226; bool Supported () const<br/>&#8226; AAX_IACFDescriptionHost &#8727; DescriptionHost ()<br/>&#8226; const AAX_IACFDescriptionHost &#8727; DescriptionHost () const<br/>&#8226; IACFDefinition &#8727; HostDefinition () const<br/></p>
<p><b>14.154.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.154.2.1 AAX_VDescriptionHost()<br/></b></p>
<p>AAX_VDescriptionHost::AAX_VDescriptionHost (<br/>IACFUnknown &#8727; pUnknown ) [explicit]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1032 Class Documentation<br/></b></p>
<p><b>14.154.2.2 </b>&#8764;<b>AAX_VDescriptionHost()<br/></b></p>
<p>AAX_VDescriptionHost::&#8764;AAX_VDescriptionHost ( )<br/></p>
<p><b>14.154.3 Member Function Documentation<br/></b></p>
<p><b>14.154.3.1 AcquireFeatureProperties()<br/></b></p>
<p>const AAX_IFeatureInfo&#8727; AAX_VDescriptionHost::AcquireFeatureProperties (<br/>const AAX_Feature_UID &amp; inFeatureID ) const [virtual]<br/></p>
<p>Get the client's feature object for a given feature ID<br/></p>
<p>Similar to QueryInterface() but uses a feature identifier rather than a true IID<br/></p>
<p>Ownership of the returned object is passed to the caller; the caller is responsible for destroying the object, e.g. by<br/>capturing the returned object in a smart pointer.<br/>// AAX_IDescriptionHost* descHost<br/>std::unique_ptr&lt;const AAX_IFeatureInfo&gt; featureInfoPtr(descHost-&gt;AcquireFeatureProperties(someFeatureUID);<br/></p>
<p><b>Returns<br/></b>An AAX_IFeatureInfo interface with access to the host's feature properties for this feature.<br/>NULL if the desired feature was not found or if an error occurred<br/></p>
<p><b>Note<br/></b>May return an AAX_IFeatureInfo object with limited method support, which would return an error such as<br/>AAX_ERROR_NULL_OBJECT or AAX_ERROR_UNIMPLEMENTED to interface calls.<br/>If no AAX_IFeatureInfo is provided then that may mean that the host is unaware of the feature, or it may mean<br/>that the host is aware of the feature but has not implemented the AAX feature support interface for this feature<br/>yet.<br/></p>
<p><b>Parameters<br/></b>in inFeatureID Identifier of the requested feature<br/></p>
<p>Implements AAX_IDescriptionHost.<br/></p>
<p><b>14.154.3.2 Supported()<br/></b></p>
<p>bool AAX_VDescriptionHost::Supported ( ) const [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.155 AAX_VEffectDescriptor Class Reference 1033<br/></b></p>
<p><b>14.154.3.3 DescriptionHost() [1/2]<br/></b></p>
<p>AAX_IACFDescriptionHost&#8727; AAX_VDescriptionHost::DescriptionHost ( ) [inline]<br/></p>
<p><b>14.154.3.4 DescriptionHost() [2/2]<br/></b></p>
<p>const AAX_IACFDescriptionHost&#8727; AAX_VDescriptionHost::DescriptionHost ( ) const [inline]<br/></p>
<p><b>14.154.3.5 HostDefinition()<br/></b></p>
<p>IACFDefinition&#8727; AAX_VDescriptionHost::HostDefinition ( ) const [inline]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VDescriptionHost.h<br/></p>
<p><b>14.155 AAX_VEffectDescriptor Class Reference<br/></b></p>
<p>#include &lt;AAX_VEffectDescriptor.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VEffectDescriptor:<br/></p>
<p>Collaboration diagram for AAX_VEffectDescriptor:<br/></p>
<p><b>14.155.1 Description<br/></b></p>
<p>Version-managed concrete AAX_IEffectDescriptor class.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1034 Class Documentation<br/></b></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_VEffectDescriptor (IACFUnknown &#8727;pUnkHost)<br/>&#8226; &#8764;AAX_VEffectDescriptor () AAX_OVERRIDE<br/>&#8226; AAX_IComponentDescriptor &#8727; NewComponentDescriptor () AAX_OVERRIDE<br/></p>
<p>Create an instance of a component descriptor.<br/>&#8226; AAX_Result AddComponent (AAX_IComponentDescriptor &#8727;inComponentDescriptor) AAX_OVERRIDE<br/></p>
<p>Add a component to an instance of a component descriptor.<br/>&#8226; AAX_Result AddName (const char &#8727;inPlugInName) AAX_OVERRIDE<br/></p>
<p>Add a name to the Effect.<br/>&#8226; AAX_Result AddCategory (uint32_t inCategory) AAX_OVERRIDE<br/></p>
<p>Add a category to your plug-in. See AAX_EPlugInCategory.<br/>&#8226; AAX_Result AddCategoryBypassParameter (uint32_t inCategory, AAX_CParamID inParamID) AAX_OVERRIDE<br/></p>
<p>Add a category to your plug-in. See AAX_EPlugInCategory.<br/>&#8226; AAX_Result AddProcPtr (void &#8727;inProcPtr, AAX_CProcPtrID inProcID) AAX_OVERRIDE<br/></p>
<p>Add a process pointer.<br/>&#8226; AAX_IPropertyMap &#8727; NewPropertyMap () AAX_OVERRIDE<br/></p>
<p>Create a new property map.<br/>&#8226; AAX_Result SetProperties (AAX_IPropertyMap &#8727;inProperties) AAX_OVERRIDE<br/></p>
<p>Set the properties of a new property map.<br/>&#8226; AAX_Result AddResourceInfo (AAX_EResourceType inResourceType, const char &#8727;inInfo) AAX_OVERRIDE<br/></p>
<p>Set resource file info.<br/>&#8226; AAX_Result AddMeterDescription (AAX_CTypeID inMeterID, const char &#8727;inMeterName, AAX_IPropertyMap<br/>&#8727;inProperties) AAX_OVERRIDE<br/></p>
<p>Add name and property map to meter with given ID.<br/>&#8226; AAX_Result AddControlMIDINode (AAX_CTypeID inNodeID, AAX_EMIDINodeType inNodeType, const char<br/></p>
<p>inNodeName[ ], uint32_t inChannelMask) AAX_OVERRIDE<br/>Add a control MIDI node to the plug-in data model.<br/></p>
<p>&#8226; IACFUnknown &#8727; GetIUnknown (void) const<br/></p>
<p><b>14.155.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.155.2.1 AAX_VEffectDescriptor()<br/></b></p>
<p>AAX_VEffectDescriptor::AAX_VEffectDescriptor (<br/>IACFUnknown &#8727; pUnkHost )<br/></p>
<p><b>14.155.2.2 </b>&#8764;<b>AAX_VEffectDescriptor()<br/></b></p>
<p>AAX_VEffectDescriptor::&#8764;AAX_VEffectDescriptor ( )<br/></p>
<p><b>14.155.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.155 AAX_VEffectDescriptor Class Reference 1035<br/></b></p>
<p><b>14.155.3.1 NewComponentDescriptor()<br/></b></p>
<p>AAX_IComponentDescriptor&#8727; AAX_VEffectDescriptor::NewComponentDescriptor ( ) [virtual]<br/></p>
<p>Create an instance of a component descriptor.<br/></p>
<p>This implementation retains each generated AAX_IComponentDescriptor and destroys the property map upon<br/>AAX_VEffectDescriptor destruction<br/></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>14.155.3.2 AddComponent()<br/></b></p>
<p>AAX_Result AAX_VEffectDescriptor::AddComponent (<br/>AAX_IComponentDescriptor &#8727; inComponentDescriptor ) [virtual]<br/></p>
<p>Add a component to an instance of a component descriptor.<br/></p>
<p>Unlike with AAX_ICollection::AddEffect(), the AAX_IEffectDescriptor does not take ownership of the AAX_IComponentDescriptor<br/>that is passed to it in this method. The host copies out the contents of this descriptor, and thus the plug-in may<br/>re-use the same descriptor object when creating additional similar components.<br/></p>
<p><b>Parameters<br/></b>in inComponentDescriptor<br/></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>14.155.3.3 AddName()<br/></b></p>
<p>AAX_Result AAX_VEffectDescriptor::AddName (<br/>const char &#8727; inPlugInName ) [virtual]<br/></p>
<p>Add a name to the Effect.<br/></p>
<p>May be called multiple times to add abbreviated Effect names.<br/></p>
<p><b>Note<br/></b>Every Effect must include at least one name variant with 31 or fewer characters, plus a null terminating<br/>character<br/></p>
<p><b>Parameters<br/></b>in inPlugInName The name assigned to the plug-in.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1036 Class Documentation<br/></b></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>14.155.3.4 AddCategory()<br/></b></p>
<p>AAX_Result AAX_VEffectDescriptor::AddCategory (<br/>uint32_t inCategory ) [virtual]<br/></p>
<p>Add a category to your plug-in. See AAX_EPlugInCategory.<br/></p>
<p><b>Parameters<br/></b>in inCategory One of the categories for the plug-in.<br/></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>14.155.3.5 AddCategoryBypassParameter()<br/></b></p>
<p>AAX_Result AAX_VEffectDescriptor::AddCategoryBypassParameter (<br/>uint32_t inCategory,<br/>AAX_CParamID inParamID ) [virtual]<br/></p>
<p>Add a category to your plug-in. See AAX_EPlugInCategory.<br/></p>
<p><b>Parameters<br/></b>in inCategory One of the categories for the plug-in.<br/>in inParamID The parameter ID of the parameter used to bypass the category seciont of the plug-in.<br/></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>14.155.3.6 AddProcPtr()<br/></b></p>
<p>AAX_Result AAX_VEffectDescriptor::AddProcPtr (<br/>void &#8727; inProcPtr,<br/>AAX_CProcPtrID inProcID ) [virtual]<br/></p>
<p>Add a process pointer.<br/></p>
<p><b>Parameters<br/></b>in inProcPtr A process pointer.<br/>in inProcID A process ID.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.155 AAX_VEffectDescriptor Class Reference 1037<br/></b></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>14.155.3.7 NewPropertyMap()<br/></b></p>
<p>AAX_IPropertyMap&#8727; AAX_VEffectDescriptor::NewPropertyMap ( ) [virtual]<br/></p>
<p>Create a new property map.<br/></p>
<p>This implementation retains each generated AAX_IPropertyMap and destroys the property map upon<br/>AAX_VEffectDescriptor destruction<br/></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>14.155.3.8 SetProperties()<br/></b></p>
<p>AAX_Result AAX_VEffectDescriptor::SetProperties (<br/>AAX_IPropertyMap &#8727; inProperties ) [virtual]<br/></p>
<p>Set the properties of a new property map.<br/></p>
<p><b>Parameters<br/></b>in inProperties Description<br/></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>14.155.3.9 AddResourceInfo()<br/></b></p>
<p>AAX_Result AAX_VEffectDescriptor::AddResourceInfo (<br/>AAX_EResourceType inResourceType,<br/>const char &#8727; inInfo ) [virtual]<br/></p>
<p>Set resource file info.<br/></p>
<p><b>Parameters<br/></b>in inResourceType See AAX_EResourceType.<br/>in inInfo Definition varies on the resource type.<br/></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1038 Class Documentation<br/></b></p>
<p><b>14.155.3.10 AddMeterDescription()<br/></b></p>
<p>AAX_Result AAX_VEffectDescriptor::AddMeterDescription (<br/>AAX_CTypeID inMeterID,<br/>const char &#8727; inMeterName,<br/>AAX_IPropertyMap &#8727; inProperties ) [virtual]<br/></p>
<p>Add name and property map to meter with given ID.<br/></p>
<p><b>Parameters<br/></b>in inMeterID The ID of the meter being described.<br/>in inMeterName The name of the meter.<br/>in inProperties The property map containing meter related data such as meter type, orientation, etc.<br/></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>14.155.3.11 AddControlMIDINode()<br/></b></p>
<p>AAX_Result AAX_VEffectDescriptor::AddControlMIDINode (<br/>AAX_CTypeID inNodeID,<br/>AAX_EMIDINodeType inNodeType,<br/>const char inNodeName[],<br/>uint32_t inChannelMask ) [virtual]<br/></p>
<p>Add a control MIDI node to the plug-in data model.<br/></p>
<p>&#8226; This MIDI node may receive note data as well as control data.<br/></p>
<p>&#8226; To send MIDI data to the plug-in's algorithm, use AAX_IComponentDescriptor::AddMIDINode().<br/></p>
<p><b>See also<br/></b>AAX_IACFEffectParameters_V2::UpdateControlMIDINodes()<br/></p>
<p><b>Parameters<br/></b>in inNodeID The ID for the new control MIDI node.<br/>in inNodeType The type of the node.<br/>in inNodeName The name of the node.<br/>in inChannelMask The bit mask for required nodes channels (up to 16) or required global events for<br/></p>
<p>global node.<br/></p>
<p>Implements AAX_IEffectDescriptor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.156 AAX_VFeatureInfo Class Reference 1039<br/></b></p>
<p><b>14.155.3.12 GetIUnknown()<br/></b></p>
<p>IACFUnknown&#8727; AAX_VEffectDescriptor::GetIUnknown (<br/>void ) const<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VEffectDescriptor.h<br/></p>
<p><b>14.156 AAX_VFeatureInfo Class Reference<br/></b></p>
<p>#include &lt;AAX_VFeatureInfo.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VFeatureInfo:<br/></p>
<p>Collaboration diagram for AAX_VFeatureInfo:<br/></p>
<p><b>14.156.1 Description<br/></b></p>
<p>Concrete implementation of AAX_IFeatureInfo, which provides a version-controlled interface to host feature infor-<br/>mation<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_VFeatureInfo (IACFUnknown &#8727;pUnknown, const AAX_Feature_UID &amp;inFeatureID)<br/>&#8226; &#8764;AAX_VFeatureInfo () AAX_OVERRIDE<br/>&#8226; AAX_Result SupportLevel (AAX_ESupportLevel &amp;oSupportLevel) const AAX_OVERRIDE<br/>&#8226; const AAX_IPropertyMap &#8727; AcquireProperties () const AAX_OVERRIDE<br/>&#8226; const AAX_Feature_UID &amp; ID () const AAX_OVERRIDE<br/></p>
<p><b>14.156.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.156.2.1 AAX_VFeatureInfo()<br/></b></p>
<p>AAX_VFeatureInfo::AAX_VFeatureInfo (<br/>IACFUnknown &#8727; pUnknown,<br/>const AAX_Feature_UID &amp; inFeatureID ) [explicit]<br/></p>
<p><b>14.156.2.2 </b>&#8764;<b>AAX_VFeatureInfo()<br/></b></p>
<p>AAX_VFeatureInfo::&#8764;AAX_VFeatureInfo ( )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1040 Class Documentation<br/></b></p>
<p><b>14.156.3 Member Function Documentation<br/></b></p>
<p><b>14.156.3.1 SupportLevel()<br/></b></p>
<p>AAX_Result AAX_VFeatureInfo::SupportLevel (<br/>AAX_ESupportLevel &amp; oSupportLevel ) const [virtual]<br/></p>
<p>Determine the level of support for this feature by the host<br/></p>
<p><b>Note<br/></b>The host will not provide an underlying AAX_IACFFeatureInfo interface for features which it does not recognize<br/>at all, resulting in a AAX_ERROR_NULL_OBJECT error code<br/></p>
<p>Implements AAX_IFeatureInfo.<br/></p>
<p><b>14.156.3.2 AcquireProperties()<br/></b></p>
<p>const AAX_IPropertyMap&#8727; AAX_VFeatureInfo::AcquireProperties ( ) const [virtual]<br/></p>
<p>Additional properties providing details of the feature support<br/></p>
<p>See the feature's UID for documentation of which features provide additional properties<br/></p>
<p>Ownership of the returned object is passed to the caller; the caller is responsible for destroying the object, e.g. by<br/>capturing the returned object in a smart pointer.<br/>// AAX_IFeatureInfo* featureInfo<br/>std::unique_ptr&lt;const AAX_IPropertyMap&gt; featurePropertiesPtr(featureInfo-&gt;AcquireProperties();<br/></p>
<p><b>Returns<br/></b>An AAX_IPropertyMap interface with access to the host's properties for this feature.<br/>NULL if the desired feature was not found or if an error occurred<br/></p>
<p><b>Note<br/></b>May return an AAX_IPropertyMap object with limited method support, which would return an error such as<br/>AAX_ERROR_NULL_OBJECT or AAX_ERROR_UNIMPLEMENTED to interface calls.<br/></p>
<p>Implements AAX_IFeatureInfo.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.157 AAX_VHostProcessorDelegate Class Reference 1041<br/></b></p>
<p><b>14.156.3.3 ID()<br/></b></p>
<p>const AAX_Feature_UID&amp; AAX_VFeatureInfo::ID ( ) const [virtual]<br/></p>
<p>Returns the ID of the feature which this object represents<br/></p>
<p>Implements AAX_IFeatureInfo.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VFeatureInfo.h<br/></p>
<p><b>14.157 AAX_VHostProcessorDelegate Class Reference<br/></b></p>
<p>#include &lt;AAX_VHostProcessorDelegate.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VHostProcessorDelegate:<br/></p>
<p>Collaboration diagram for AAX_VHostProcessorDelegate:<br/></p>
<p><b>14.157.1 Description<br/></b></p>
<p>Version-managed concrete Host Processor delegate class.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_VHostProcessorDelegate (IACFUnknown &#8727;pUnknown)<br/>&#8226; AAX_Result GetAudio (const float &#8727;const inAudioIns[ ], int32_t inAudioInCount, int64_t inLocation, int32_t<br/>&#8727;ioNumSamples) AAX_OVERRIDE<br/></p>
<p>CALL: Randomly access audio from the timeline.<br/>&#8226; int32_t GetSideChainInputNum () AAX_OVERRIDE<br/></p>
<p>CALL: Returns the index of the side chain input buffer.<br/>&#8226; AAX_Result ForceAnalyze () AAX_OVERRIDE<br/></p>
<p>CALL: Request an analysis pass.<br/>&#8226; AAX_Result ForceProcess () AAX_OVERRIDE<br/></p>
<p>CALL: Request a process pass.<br/></p>
<p><b>14.157.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.157.2.1 AAX_VHostProcessorDelegate()<br/></b></p>
<p>AAX_VHostProcessorDelegate::AAX_VHostProcessorDelegate (<br/>IACFUnknown &#8727; pUnknown )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1042 Class Documentation<br/></b></p>
<p><b>14.157.3 Member Function Documentation<br/></b></p>
<p><b>14.157.3.1 GetAudio()<br/></b></p>
<p>AAX_Result AAX_VHostProcessorDelegate::GetAudio (<br/>const float &#8727;const inAudioIns[],<br/>int32_t inAudioInCount,<br/>int64_t inLocation,<br/>int32_t &#8727; ioNumSamples ) [virtual]<br/></p>
<p>CALL: Randomly access audio from the timeline.<br/></p>
<p>Called from within AAX_IHostProcessor::RenderAudio(), this method fills a buffer of samples with randomly-<br/>accessed data from the current input processing region on the timeline, including any extra samples such as<br/>processing &quot;handles&quot;.<br/></p>
<p><b>Note<br/></b>Plug-ins that use this feature must set AAX_eProperty_UsesRandomAccess to true<br/>It is not possible to retrieve samples from outside of the current input processing region<br/>Always check the return value of this method before using the randomly-accessed samples<br/></p>
<p><b>Parameters<br/></b>in inAudioIns Timeline audio buffer(s). This must be set to inAudioIns from<br/></p>
<p>AAX_IHostProcessor::RenderAudio()<br/>in inAudioInCount Number of buffers in inAudioIns. This must be set to inAudioInCount<br/></p>
<p>from AAX_IHostProcessor::RenderAudio()<br/>in inLocation A sample location relative to the beginning of the currently processed region,<br/></p>
<p>e.g. a value of 0 corresponds to the timeline location returned by<br/>AAX_CHostProcessor::GetSrcStart()<br/></p>
<p>in,out ioNumSamples<br/>&#8226; Input: The maximum number of samples to read.<br/></p>
<p>&#8226; Output: The actual number of samples that were read from the timeline<br/></p>
<p>Implements AAX_IHostProcessorDelegate.<br/></p>
<p><b>14.157.3.2 GetSideChainInputNum()<br/></b></p>
<p>int32_t AAX_VHostProcessorDelegate::GetSideChainInputNum ( ) [virtual]<br/></p>
<p>CALL: Returns the index of the side chain input buffer.<br/>Called from within AAX_IHostProcessor::RenderAudio(), this method returns the index of the side chain input sam-<br/>ple buffer within inAudioIns.<br/>Implements AAX_IHostProcessorDelegate.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.158 AAX_VHostServices Class Reference 1043<br/></b></p>
<p><b>14.157.3.3 ForceAnalyze()<br/></b></p>
<p>AAX_Result AAX_VHostProcessorDelegate::ForceAnalyze ( ) [virtual]<br/></p>
<p>CALL: Request an analysis pass.<br/></p>
<p>Call this method to request an analysis pass from within the plug-in. Most plug-ins should rely on the host to trigger<br/>analysis passes when appropriate. However, plug-ins that require an analysis pass a) outside of the context of<br/>host-driven render or analysis, or b) when internal plug-in data changes may need to call ForceAnalyze().<br/></p>
<p>Implements AAX_IHostProcessorDelegate.<br/></p>
<p><b>14.157.3.4 ForceProcess()<br/></b></p>
<p>AAX_Result AAX_VHostProcessorDelegate::ForceProcess ( ) [virtual]<br/></p>
<p>CALL: Request a process pass.<br/></p>
<p>Call this method to request a process pass from within the plug-in. If AAX_eProperty_RequiresAnalysis is de-<br/>fined, the resulting process pass will be preceded by an analysis pass. This method should only be used in rare<br/>circumstances by plug-ins that must launch processing outside of the normal host AudioSuite workflow.<br/></p>
<p>Implements AAX_IHostProcessorDelegate.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VHostProcessorDelegate.h<br/></p>
<p><b>14.158 AAX_VHostServices Class Reference<br/></b></p>
<p>#include &lt;AAX_VHostServices.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VHostServices:<br/></p>
<p>Collaboration diagram for AAX_VHostServices:<br/></p>
<p><b>14.158.1 Description<br/></b></p>
<p>Version-managed concrete AAX_IHostServices class.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_VHostServices (IACFUnknown &#8727;pUnkHost)<br/>&#8226; &#8764;AAX_VHostServices ()<br/>&#8226; AAX_Result HandleAssertFailure (const char &#8727;iFile, int32_t iLine, const char &#8727;iNote, int32_t iFlags) const<br/></p>
<p>AAX_OVERRIDE<br/>Handle an assertion failure.<br/></p>
<p>&#8226; AAX_Result Trace (int32_t iPriority, const char &#8727;iMessage) const AAX_OVERRIDE<br/>Log a trace message.<br/></p>
<p>&#8226; AAX_Result StackTrace (int32_t iTracePriority, int32_t iStackTracePriority, const char &#8727;iMessage) const<br/>AAX_OVERRIDE<br/></p>
<p>Log a trace message or a stack trace.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1044 Class Documentation<br/></b></p>
<p><b>14.158.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.158.2.1 AAX_VHostServices()<br/></b></p>
<p>AAX_VHostServices::AAX_VHostServices (<br/>IACFUnknown &#8727; pUnkHost )<br/></p>
<p><b>14.158.2.2 </b>&#8764;<b>AAX_VHostServices()<br/></b></p>
<p>AAX_VHostServices::&#8764;AAX_VHostServices ( )<br/></p>
<p><b>14.158.3 Member Function Documentation<br/></b></p>
<p><b>14.158.3.1 HandleAssertFailure()<br/></b></p>
<p>AAX_Result AAX_VHostServices::HandleAssertFailure (<br/>const char &#8727; iFile,<br/>int32_t iLine,<br/>const char &#8727; iNote,<br/>int32_t iFlags ) const [virtual]<br/></p>
<p>Handle an assertion failure.<br/></p>
<p>Use this method to delegate assertion failure handling to the host<br/></p>
<p>Use inFlags to request that specific behavior be included when handling the failure. This request may not be<br/>fulfilled by the host, and absence of a flag does not preclude the host from using that behavior when handling the<br/>failure.<br/></p>
<p><b>Parameters<br/></b>in iFile The name of the file containing the assert check. Usually<br/></p>
<p>__FILE__<br/>in iLine The line number of the assert check. Usually __LINE__<br/>in iNote Text to display related to the assert. Usually the condition which failed<br/>in iFlags Bitfield of AAX_EAssertFlags to request specific handling behavior<br/></p>
<p>Implements AAX_IHostServices.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.159 AAX_VHostTaskAgent Class Reference 1045<br/></b></p>
<p><b>14.158.3.2 Trace()<br/></b></p>
<p>AAX_Result AAX_VHostServices::Trace (<br/>int32_t iPriority,<br/>const char &#8727; iMessage ) const [virtual]<br/></p>
<p>Log a trace message.<br/></p>
<p><b>Parameters<br/></b>in iPriority Priority of the trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iMessage Message string to log<br/></p>
<p>Implements AAX_IHostServices.<br/></p>
<p><b>14.158.3.3 StackTrace()<br/></b></p>
<p>AAX_Result AAX_VHostServices::StackTrace (<br/>int32_t iTracePriority,<br/>int32_t iStackTracePriority,<br/>const char &#8727; iMessage ) const [virtual]<br/></p>
<p>Log a trace message or a stack trace.<br/></p>
<p>If the logging output filtering is set to include logs with iStackTracePriority then both the logging message<br/>and a stack trace will be emitted, regardless of iTracePriority.<br/></p>
<p>If the logging output filtering is set to include logs with iTracePriority but to exclude logs with iStack&#8592;&#8617;<br/>TracePriority then this will emit a normal log with no stack trace.<br/></p>
<p><b>Parameters<br/></b>in iTracePriority Priority of the trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iStackTracePriority Priority of the stack trace, used for log filtering. One of kAAX_Trace_Priority_Low,<br/></p>
<p>kAAX_Trace_Priority_Normal, kAAX_Trace_Priority_High<br/>in iMessage Message string to log<br/></p>
<p>Implements AAX_IHostServices.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VHostServices.h<br/></p>
<p><b>14.159 AAX_VHostTaskAgent Class Reference<br/></b></p>
<p>#include &lt;AAX_VHostTaskAgent.h&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1046 Class Documentation<br/></b></p>
<p>Inheritance diagram for AAX_VHostTaskAgent:<br/></p>
<p>Collaboration diagram for AAX_VHostTaskAgent:<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_VHostTaskAgent (IACFUnknown &#8727;iUnknown)<br/>&#8226; &#8764;AAX_VHostTaskAgent () override<br/>&#8226; AAX_Result Initialize (IACFUnknown &#8727;iController) override<br/>&#8226; AAX_Result Uninitialize () override<br/>&#8226; AAX_Result AddTask (IACFUnknown &#8727;iTask) override<br/>&#8226; AAX_Result CancelAllTasks () override<br/></p>
<p><b>14.159.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.159.1.1 AAX_VHostTaskAgent()<br/></b></p>
<p>AAX_VHostTaskAgent::AAX_VHostTaskAgent (<br/>IACFUnknown &#8727; iUnknown ) [explicit]<br/></p>
<p><b>14.159.1.2 </b>&#8764;<b>AAX_VHostTaskAgent()<br/></b></p>
<p>AAX_VHostTaskAgent::&#8764;AAX_VHostTaskAgent ( ) [override]<br/></p>
<p><b>14.159.2 Member Function Documentation<br/></b></p>
<p><b>14.159.2.1 Initialize()<br/></b></p>
<p>AAX_Result AAX_VHostTaskAgent::Initialize (<br/>IACFUnknown &#8727; iController ) [override], [virtual]<br/></p>
<p>Implements AAX_IHostTaskAgent.<br/></p>
<p><b>14.159.2.2 Uninitialize()<br/></b></p>
<p>AAX_Result AAX_VHostTaskAgent::Uninitialize ( ) [override], [virtual]<br/></p>
<p>Implements AAX_IHostTaskAgent.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.160 AAX_VPageTable Class Reference 1047<br/></b></p>
<p><b>14.159.2.3 AddTask()<br/></b></p>
<p>AAX_Result AAX_VHostTaskAgent::AddTask (<br/>IACFUnknown &#8727; iTask ) [override], [virtual]<br/></p>
<p>Implements AAX_IHostTaskAgent.<br/></p>
<p><b>14.159.2.4 CancelAllTasks()<br/></b></p>
<p>AAX_Result AAX_VHostTaskAgent::CancelAllTasks ( ) [override], [virtual]<br/></p>
<p>Implements AAX_IHostTaskAgent.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VHostTaskAgent.h<br/></p>
<p><b>14.160 AAX_VPageTable Class Reference<br/></b></p>
<p>#include &lt;AAX_VPageTable.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VPageTable:<br/></p>
<p>Collaboration diagram for AAX_VPageTable:<br/></p>
<p><b>14.160.1 Description<br/></b></p>
<p>Version-managed concrete AAX_IPageTable class.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_VPageTable (IACFUnknown &#8727;pUnknown)<br/>&#8226; &#8764;AAX_VPageTable () AAX_OVERRIDE<br/>&#8226; AAX_Result Clear () AAX_OVERRIDE<br/></p>
<p>Clears all parameter mappings from the table.<br/>&#8226; AAX_Result Empty (AAX_CBoolean &amp;oEmpty) const AAX_OVERRIDE<br/></p>
<p>Indicates whether the table is empty.<br/>&#8226; AAX_Result GetNumPages (int32_t &amp;oNumPages) const AAX_OVERRIDE<br/></p>
<p>Get the number of pages currently in this table.<br/>&#8226; AAX_Result InsertPage (int32_t iPage) AAX_OVERRIDE<br/></p>
<p>Insert a new empty page before the page at index iPage.<br/>&#8226; AAX_Result RemovePage (int32_t iPage) AAX_OVERRIDE<br/></p>
<p>Remove the page at index iPage.<br/>&#8226; AAX_Result GetNumMappedParameterIDs (int32_t iPage, int32_t &amp;oNumParameterIdentifiers) const<br/></p>
<p>AAX_OVERRIDE<br/>Returns the total number of parameter IDs which are mapped to a page.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1048 Class Documentation<br/></b></p>
<p>&#8226; AAX_Result ClearMappedParameter (int32_t iPage, int32_t iIndex) AAX_OVERRIDE<br/>Clear the parameter at a particular index in this table.<br/></p>
<p>&#8226; AAX_Result GetMappedParameterID (int32_t iPage, int32_t iIndex, AAX_IString &amp;oParameterIdentifier)<br/>const AAX_OVERRIDE<br/></p>
<p>Get the parameter identifier which is currently mapped to an index in this table.<br/>&#8226; AAX_Result MapParameterID (AAX_CParamID iParameterIdentifier, int32_t iPage, int32_t iIndex)<br/></p>
<p>AAX_OVERRIDE<br/>Map a parameter to this table.<br/></p>
<p>&#8226; AAX_Result GetNumParametersWithNameVariations (int32_t &amp;oNumParameterIdentifiers) const AAX_OVERRIDE<br/>&#8226; AAX_Result GetNameVariationParameterIDAtIndex (int32_t iIndex, AAX_IString &amp;oParameterIdentifier)<br/></p>
<p>const AAX_OVERRIDE<br/>&#8226; AAX_Result GetNumNameVariationsForParameter (AAX_CPageTableParamID iParameterIdentifier, int32&#8592;&#8617;<br/></p>
<p>_t &amp;oNumVariations) const AAX_OVERRIDE<br/>&#8226; AAX_Result GetParameterNameVariationAtIndex (AAX_CPageTableParamID iParameterIdentifier, int32_&#8592;&#8617;<br/></p>
<p>t iIndex, AAX_IString &amp;oNameVariation, int32_t &amp;oLength) const AAX_OVERRIDE<br/>&#8226; AAX_Result GetParameterNameVariationOfLength (AAX_CPageTableParamID iParameterIdentifier, int32&#8592;&#8617;<br/></p>
<p>_t iLength, AAX_IString &amp;oNameVariation) const AAX_OVERRIDE<br/>&#8226; AAX_Result ClearParameterNameVariations () AAX_OVERRIDE<br/>&#8226; AAX_Result ClearNameVariationsForParameter (AAX_CPageTableParamID iParameterIdentifier) AAX_OVERRIDE<br/>&#8226; AAX_Result SetParameterNameVariation (AAX_CPageTableParamID iParameterIdentifier, const AAX_IString<br/></p>
<p>&amp;iNameVariation, int32_t iLength) AAX_OVERRIDE<br/>&#8226; const IACFUnknown &#8727; AsUnknown () const<br/>&#8226; IACFUnknown &#8727; AsUnknown ()<br/>&#8226; bool IsSupported () const<br/></p>
<p><b>14.160.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.160.2.1 AAX_VPageTable()<br/></b></p>
<p>AAX_VPageTable::AAX_VPageTable (<br/>IACFUnknown &#8727; pUnknown )<br/></p>
<p><b>14.160.2.2 </b>&#8764;<b>AAX_VPageTable()<br/></b></p>
<p>AAX_VPageTable::&#8764;AAX_VPageTable ( )<br/></p>
<p><b>14.160.3 Member Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.160 AAX_VPageTable Class Reference 1049<br/></b></p>
<p><b>14.160.3.1 Clear()<br/></b></p>
<p>AAX_Result AAX_VPageTable::Clear ( ) [virtual]<br/></p>
<p>Clears all parameter mappings from the table.<br/></p>
<p>This method does not clear any parameter name variations from the table. For that, use AAX_IPageTable::ClearParameterNameVariations()<br/>or AAX_IPageTable::ClearNameVariationsForParameter()<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.2 Empty()<br/></b></p>
<p>AAX_Result AAX_VPageTable::Empty (<br/>AAX_CBoolean &amp; oEmpty ) const [virtual]<br/></p>
<p>Indicates whether the table is empty.<br/></p>
<p>A table is empty if it contains no pages. A table which contains pages but no parameter assignments is not empty.<br/>A table which has associated parameter name variations but no pages is empty.<br/></p>
<p><b>Parameters<br/></b>out oEmpty true if this table is empty<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.3 GetNumPages()<br/></b></p>
<p>AAX_Result AAX_VPageTable::GetNumPages (<br/>int32_t &amp; oNumPages ) const [virtual]<br/></p>
<p>Get the number of pages currently in this table.<br/></p>
<p><b>Parameters<br/></b>out oNumPages The number of pages which are present in the page table. Some pages might not<br/></p>
<p>contain any parameter assignments.<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.4 InsertPage()<br/></b></p>
<p>AAX_Result AAX_VPageTable::InsertPage (<br/>int32_t iPage ) [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1050 Class Documentation<br/></b></p>
<p>Insert a new empty page before the page at index iPage.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the total number of pages<br/></p>
<p><b>Parameters<br/></b>in iPage The insertion point page index<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.5 RemovePage()<br/></b></p>
<p>AAX_Result AAX_VPageTable::RemovePage (<br/>int32_t iPage ) [virtual]<br/></p>
<p>Remove the page at index iPage.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the index of the last existing page<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.6 GetNumMappedParameterIDs()<br/></b></p>
<p>AAX_Result AAX_VPageTable::GetNumMappedParameterIDs (<br/>int32_t iPage,<br/>int32_t &amp; oNumParameterIdentifiers ) const [virtual]<br/></p>
<p>Returns the total number of parameter IDs which are mapped to a page.<br/></p>
<p><b>Note<br/></b>The number of mapped parameter IDs does not correspond to the actual slot indices of the parameter assign-<br/>ments. For example, a page could have three total parameter assignments with parameters mapped to slots<br/>2, 4, and 6.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the index of the last existing page<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.160 AAX_VPageTable Class Reference 1051<br/></b></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/>out oNumParameterIdentifiers The number of parameter identifiers which are mapped to the target page<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.7 ClearMappedParameter()<br/></b></p>
<p>AAX_Result AAX_VPageTable::ClearMappedParameter (<br/>int32_t iPage,<br/>int32_t iIndex ) [virtual]<br/></p>
<p>Clear the parameter at a particular index in this table.<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS even if no parameter was mapped at the given index (the index is still clear)<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/>in iIndex The target parameter slot index within the target page<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.8 GetMappedParameterID()<br/></b></p>
<p>AAX_Result AAX_VPageTable::GetMappedParameterID (<br/>int32_t iPage,<br/>int32_t iIndex,<br/>AAX_IString &amp; oParameterIdentifier ) const [virtual]<br/></p>
<p>Get the parameter identifier which is currently mapped to an index in this table.<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if no parameter is mapped at the specified page/index location<br/></p>
<p><b>Parameters<br/></b>in iPage The target page index<br/>in iIndex The target parameter slot index within the target page<br/>out oParameterIdentifier The identifier used for the mapped parameter in the page table (may be<br/></p>
<p>parameter name or ID)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1052 Class Documentation<br/></b></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.9 MapParameterID()<br/></b></p>
<p>AAX_Result AAX_VPageTable::MapParameterID (<br/>AAX_CParamID iParameterIdentifier,<br/>int32_t iPage,<br/>int32_t iIndex ) [virtual]<br/></p>
<p>Map a parameter to this table.<br/></p>
<p>If iParameterIdentifier is an empty string then the parameter assignment will be cleared<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_NULL_ARGUMENT if iParameterIdentifier is null<br/>AAX_ERROR_INVALID_ARGUMENT if iPage is greater than the index of the last existing page<br/>AAX_ERROR_INVALID_ARGUMENT if iIndex is negative<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter which will be mapped<br/>in iPage The target page index<br/>in iIndex The target parameter slot index within the target page<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.10 GetNumParametersWithNameVariations()<br/></b></p>
<p>AAX_Result AAX_VPageTable::GetNumParametersWithNameVariations (<br/>int32_t &amp; oNumParameterIdentifiers ) const [virtual]<br/></p>
<p>Get the number of parameters with name variations defined for the current table type<br/></p>
<p>Provides the number of parameters with lt;ControlNameVariationslt; which are explicitly defined for<br/>the current page table type.<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetNameVariationParameterIDAtIndex()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.160 AAX_VPageTable Class Reference 1053<br/></b></p>
<p><b>Parameters<br/></b>out oNumParameterIdentifiers The number of parameters with name variations explicitly<br/></p>
<p>associated with the current table type.<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.11 GetNameVariationParameterIDAtIndex()<br/></b></p>
<p>AAX_Result AAX_VPageTable::GetNameVariationParameterIDAtIndex (<br/>int32_t iIndex,<br/>AAX_IString &amp; oParameterIdentifier ) const [virtual]<br/></p>
<p>Get the identifier for a parameter with name variations defined for the current table type<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetNumParametersWithNameVariations()<br/></p>
<p><b>Parameters<br/></b>in iIndex The target parameter index within the list of parameters with explicit<br/></p>
<p>name variations defined for this table type.<br/>out oParameterIdentifier The identifier used for the parameter in the page table name variations<br/></p>
<p>list (may be parameter name or ID)<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.12 GetNumNameVariationsForParameter()<br/></b></p>
<p>AAX_Result AAX_VPageTable::GetNumNameVariationsForParameter (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>int32_t &amp; oNumVariations ) const [virtual]<br/></p>
<p>Get the number of name variations defined for a parameter<br/></p>
<p>Provides the number of lt;ControlNameVariationslt; which are explicitly defined for iParameter&#8592;&#8617;<br/>Identifier for the current page table type. No fallback logic is used to resolve this to the list of variations which<br/>would actually be used for an attached control surface if no explicit variations are defined for the current table type.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1054 Class Documentation<br/></b></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetParameterNameVariationAtIndex()<br/><b>Returns<br/></b></p>
<p>AAX_SUCCESS and provides zero to oNumVariations if iParameterIdentifier is not<br/>found<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>out oNumVariations The number of name variations which are defined for this parameter and<br/></p>
<p>explicitly associated with the current table type.<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.13 GetParameterNameVariationAtIndex()<br/></b></p>
<p>AAX_Result AAX_VPageTable::GetParameterNameVariationAtIndex (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>int32_t iIndex,<br/>AAX_IString &amp; oNameVariation,<br/>int32_t &amp; oLength ) const [virtual]<br/></p>
<p>Get a parameter name variation from the page table<br/></p>
<p>Only returns lt;ControlNameVariationslt; which are explicitly defined for the current page table type.<br/>No fallback logic is used to resolve this to the abbreviation which would actually be shown on an attached control<br/>surface if no explicit variation is defined for the current table type.<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetNumNameVariationsForParameter()<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetParameterNameVariationOfLength()<br/><b>Returns<br/></b></p>
<p>AAX_ERROR_NO_ABBREVIATED_PARAMETER_NAME if no suitable variation is defined for this table<br/>AAX_ERROR_ARGUMENT_OUT_OF_RANGE if iIndex is out of range<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.160 AAX_VPageTable Class Reference 1055<br/></b></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>in iIndex Index of the name variation<br/>out oNameVariation The name variation, if one is explicitly defined for this table type<br/>out oLength The length value for this name variation. This corresponds to the<br/></p>
<p>variation's sz attribute in the page table XML and may be different from<br/>the string length of iNameVariation.<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.14 GetParameterNameVariationOfLength()<br/></b></p>
<p>AAX_Result AAX_VPageTable::GetParameterNameVariationOfLength (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>int32_t iLength,<br/>AAX_IString &amp; oNameVariation ) const [virtual]<br/></p>
<p>Get a parameter name variation of a particular length from the page table<br/></p>
<p>Only returns lt;ControlNameVariationslt; which are explicitly defined of iLength for the current page<br/>table type. No fallback logic is used to resolve this to the abbreviation which would actually be shown on an attached<br/>control surface if no explicit variation is defined for the specified length or current table type.<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p>&#8226;<br/><b>See also<br/></b></p>
<p>AAX_IPageTable::GetParameterNameVariationAtIndex()<br/><b>Returns<br/></b></p>
<p>AAX_ERROR_NO_ABBREVIATED_PARAMETER_NAME if no suitable variation is defined for this table<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>in iLength The variation length to check, i.e. the sz attribute for the name variation<br/></p>
<p>in the page table XML<br/>out oNameVariation The name variation, if one is explicitly defined for this table type and<br/></p>
<p>iLength<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1056 Class Documentation<br/></b></p>
<p><b>14.160.3.15 ClearParameterNameVariations()<br/></b></p>
<p>AAX_Result AAX_VPageTable::ClearParameterNameVariations ( ) [virtual]<br/></p>
<p>Clears all name variations for the current page table type<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p><b>See also<br/></b>AAX_IPageTable::Clear()<br/>AAX_IPageTable::ClearNameVariationsForParameter()<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.16 ClearNameVariationsForParameter()<br/></b></p>
<p>AAX_Result AAX_VPageTable::ClearNameVariationsForParameter (<br/>AAX_CPageTableParamID iParameterIdentifier ) [virtual]<br/></p>
<p>Clears all name variations for a single parameter for the current page table type<br/></p>
<p><b>Warning<br/></b>This will invalidate the list of parameter name variations indices, i.e. the parameter identifier associated with<br/>each index by AAX_IPageTable::GetNameVariationParameterIDAtIndex()<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p><b>See also<br/></b>AAX_IPageTable::Clear()<br/>AAX_IPageTable::ClearParameterNameVariations()<br/></p>
<p><b>Returns<br/></b>AAX_SUCCESS and provides zero to oNumVariations if iParameterIdentifier is not found<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.160 AAX_VPageTable Class Reference 1057<br/></b></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.17 SetParameterNameVariation()<br/></b></p>
<p>AAX_Result AAX_VPageTable::SetParameterNameVariation (<br/>AAX_CPageTableParamID iParameterIdentifier,<br/>const AAX_IString &amp; iNameVariation,<br/>int32_t iLength ) [virtual]<br/></p>
<p>Sets a name variation explicitly for the current page table type<br/></p>
<p>This will add a new name variation or overwrite the existing name variation with the same length which is defined<br/>for the current table type.<br/></p>
<p><b>Warning<br/></b>If no name variation previously existed for this parameter then this will invalidate the list of parameter name<br/>variations indices, i.e. the parameter identifier associated with each index by AAX_IPageTable::GetNameVariationParameterIDAtIndex()<br/></p>
<p><b>Note<br/></b>Normally parameter name variations are only used with the 'PgTL' table type<br/></p>
<p><b>Returns<br/></b>AAX_ERROR_INVALID_ARGUMENT if iNameVariation is empty or if iLength is less than zero<br/></p>
<p><b>Parameters<br/></b>in iParameterIdentifier The identifier for the parameter<br/>in iNameVariation The new parameter name variation<br/>in iLength The length value for this name variation. This corresponds to the variation's sz<br/></p>
<p>attribute in the page table XML and is not required to match the length of<br/>iNameVariation.<br/></p>
<p>Implements AAX_IPageTable.<br/></p>
<p><b>14.160.3.18 AsUnknown() [1/2]<br/></b></p>
<p>const IACFUnknown&#8727; AAX_VPageTable::AsUnknown ( ) const [inline]<br/></p>
<p>Returns the latest supported versioned ACF interface (e.g. an AAX_IACFPageTable) which is wrapped by this<br/>AAX_IPageTable<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1058 Class Documentation<br/></b></p>
<p><b>14.160.3.19 AsUnknown() [2/2]<br/></b></p>
<p>IACFUnknown&#8727; AAX_VPageTable::AsUnknown ( ) [inline]<br/></p>
<p>Returns the latest supported versioned ACF interface (e.g. an AAX_IACFPageTable) which is wrapped by this<br/>AAX_IPageTable<br/></p>
<p><b>14.160.3.20 IsSupported()<br/></b></p>
<p>bool AAX_VPageTable::IsSupported ( ) const [inline]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VPageTable.h<br/></p>
<p><b>14.161 AAX_VPrivateDataAccess Class Reference<br/></b></p>
<p>#include &lt;AAX_VPrivateDataAccess.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VPrivateDataAccess:<br/></p>
<p>Collaboration diagram for AAX_VPrivateDataAccess:<br/></p>
<p><b>14.161.1 Description<br/></b></p>
<p>Version-managed concrete AAX_IPrivateDataAccess class.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; AAX_VPrivateDataAccess (IACFUnknown &#8727;pUnknown)<br/>&#8226; &#8764;AAX_VPrivateDataAccess () AAX_OVERRIDE<br/>&#8226; AAX_Result ReadPortDirect (AAX_CFieldIndex inFieldIndex, const uint32_t inOffset, const uint32_t inSize,<br/></p>
<p>void &#8727;outBuffer) AAX_OVERRIDE<br/>Read data directly from DSP at the given port.<br/></p>
<p>&#8226; AAX_Result WritePortDirect (AAX_CFieldIndex inFieldIndex, const uint32_t inOffset, const uint32_t inSize,<br/>const void &#8727;inBuffer) AAX_OVERRIDE<br/></p>
<p>Write data directly to DSP at the given port.<br/></p>
<p><b>14.161.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.161.2.1 AAX_VPrivateDataAccess()<br/></b></p>
<p>AAX_VPrivateDataAccess::AAX_VPrivateDataAccess (<br/>IACFUnknown &#8727; pUnknown )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.161 AAX_VPrivateDataAccess Class Reference 1059<br/></b></p>
<p><b>14.161.2.2 </b>&#8764;<b>AAX_VPrivateDataAccess()<br/></b></p>
<p>AAX_VPrivateDataAccess::&#8764;AAX_VPrivateDataAccess ( )<br/></p>
<p><b>14.161.3 Member Function Documentation<br/></b></p>
<p><b>14.161.3.1 ReadPortDirect()<br/></b></p>
<p>AAX_Result AAX_VPrivateDataAccess::ReadPortDirect (<br/>AAX_CFieldIndex inFieldIndex,<br/>const uint32_t inOffset,<br/>const uint32_t inSize,<br/>void &#8727; outBuffer ) [virtual]<br/></p>
<p>Read data directly from DSP at the given port.<br/></p>
<p><b>Note<br/></b>Blocking<br/></p>
<p><b>Parameters<br/></b>in inFieldIndex The port to read from.<br/>in inOffset Offset into data to start reading.<br/>in inSize Amount of data to read (in bytes).<br/>out outBuffer Pointer to storage for data to be read into.<br/></p>
<p>Implements AAX_IPrivateDataAccess.<br/></p>
<p><b>14.161.3.2 WritePortDirect()<br/></b></p>
<p>AAX_Result AAX_VPrivateDataAccess::WritePortDirect (<br/>AAX_CFieldIndex inFieldIndex,<br/>const uint32_t inOffset,<br/>const uint32_t inSize,<br/>const void &#8727; inBuffer ) [virtual]<br/></p>
<p>Write data directly to DSP at the given port.<br/></p>
<p><b>Note<br/></b>Blocking<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1060 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inFieldIndex The port to write to.<br/>in inOffset Offset into data to begin writing.<br/>in inSize Amount of data to write (in bytes).<br/>in inBuffer Pointer to data being written.<br/></p>
<p>Implements AAX_IPrivateDataAccess.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VPrivateDataAccess.h<br/></p>
<p><b>14.162 AAX_VPropertyMap Class Reference<br/></b></p>
<p>#include &lt;AAX_VPropertyMap.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VPropertyMap:<br/></p>
<p>Collaboration diagram for AAX_VPropertyMap:<br/></p>
<p><b>14.162.1 Description<br/></b></p>
<p>Version-managed concrete AAX_IPropertyMap class.<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; &#8764;AAX_VPropertyMap (void) AAX_OVERRIDE<br/>&#8226; AAX_CBoolean GetProperty (AAX_EProperty inProperty, AAX_CPropertyValue &#8727;outValue) const<br/></p>
<p>AAX_OVERRIDE<br/>Get a property value from a property map.<br/></p>
<p>&#8226; AAX_CBoolean GetPointerProperty (AAX_EProperty inProperty, const void &#8727;&#8727;outValue) const AAX_OVERRIDE<br/>Get a property value from a property map with a pointer-sized value.<br/></p>
<p>&#8226; AAX_Result AddProperty (AAX_EProperty inProperty, AAX_CPropertyValue inValue) AAX_OVERRIDE<br/>Add a property to a property map.<br/></p>
<p>&#8226; AAX_Result AddPointerProperty (AAX_EProperty inProperty, const void &#8727;inValue) AAX_OVERRIDE<br/>Add a property to a property map with a pointer-sized value.<br/></p>
<p>&#8226; AAX_Result AddPointerProperty (AAX_EProperty inProperty, const char &#8727;inValue) AAX_OVERRIDE<br/>Add a property to a property map with a pointer-sized value.<br/></p>
<p>&#8226; AAX_Result RemoveProperty (AAX_EProperty inProperty) AAX_OVERRIDE<br/>Remove a property from a property map.<br/></p>
<p>&#8226; AAX_Result AddPropertyWithIDArray (AAX_EProperty inProperty, const AAX_SPlugInIdentifierTriad &#8727;in&#8592;&#8617;<br/>PluginIDs, uint32_t inNumPluginIDs) AAX_OVERRIDE<br/></p>
<p>Add an array of plug-in IDs to a property map.<br/>&#8226; AAX_CBoolean GetPropertyWithIDArray (AAX_EProperty inProperty, const AAX_SPlugInIdentifierTriad<br/>&#8727;&#8727;outPluginIDs, uint32_t &#8727;outNumPluginIDs) const AAX_OVERRIDE<br/></p>
<p>Get an array of plug-in IDs from a property map.<br/>&#8226; IACFUnknown &#8727; GetIUnknown () AAX_OVERRIDE<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.162 AAX_VPropertyMap Class Reference 1061<br/></b></p>
<p><b>Static Public Member Functions<br/></b>&#8226; static AAX_VPropertyMap &#8727; Create (IACFUnknown &#8727;inComponentFactory)<br/></p>
<p>inComponentFactory must support IID_IACFComponentFactory - otherwise NULL is returned<br/>&#8226; static AAX_VPropertyMap &#8727; Acquire (IACFUnknown &#8727;inPropertyMapUnknown)<br/></p>
<p>inPropertyMapUnknownmust support at least one AAX_IPropertyMap interface - otherwise an AAX_VPropertyMap<br/>object with no backing interface is returned<br/></p>
<p><b>14.162.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.162.2.1 </b>&#8764;<b>AAX_VPropertyMap()<br/></b></p>
<p>AAX_VPropertyMap::&#8764;AAX_VPropertyMap (<br/>void )<br/></p>
<p><b>14.162.3 Member Function Documentation<br/></b></p>
<p><b>14.162.3.1 Create()<br/></b></p>
<p>static AAX_VPropertyMap&#8727; AAX_VPropertyMap::Create (<br/>IACFUnknown &#8727; inComponentFactory ) [static]<br/></p>
<p>inComponentFactory must support IID_IACFComponentFactory - otherwise NULL is returned<br/></p>
<p><b>14.162.3.2 Acquire()<br/></b></p>
<p>static AAX_VPropertyMap&#8727; AAX_VPropertyMap::Acquire (<br/>IACFUnknown &#8727; inPropertyMapUnknown ) [static]<br/></p>
<p>inPropertyMapUnknown must support at least one AAX_IPropertyMap interface - otherwise an<br/>AAX_VPropertyMap object with no backing interface is returned<br/></p>
<p><b>14.162.3.3 GetProperty()<br/></b></p>
<p>AAX_CBoolean AAX_VPropertyMap::GetProperty (<br/>AAX_EProperty inProperty,<br/>AAX_CPropertyValue &#8727; outValue ) const [virtual]<br/></p>
<p>Get a property value from a property map.<br/></p>
<p>Returns true if the selected property is supported, false if it is not<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1062 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inProperty The property ID<br/>out outValue The property value<br/></p>
<p>Implements AAX_IPropertyMap.<br/></p>
<p><b>14.162.3.4 GetPointerProperty()<br/></b></p>
<p>AAX_CBoolean AAX_VPropertyMap::GetPointerProperty (<br/>AAX_EProperty inProperty,<br/>const void &#8727;&#8727; outValue ) const [virtual]<br/></p>
<p>Get a property value from a property map with a pointer-sized value.<br/></p>
<p>Returns true if the selected property is supported, false if it is not<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID<br/>out outValue The property value<br/></p>
<p>Implements AAX_IPropertyMap.<br/></p>
<p><b>14.162.3.5 AddProperty()<br/></b></p>
<p>AAX_Result AAX_VPropertyMap::AddProperty (<br/>AAX_EProperty inProperty,<br/>AAX_CPropertyValue inValue ) [virtual]<br/></p>
<p>Add a property to a property map.<br/></p>
<p><b>Note<br/></b>This method may return an error if adding the property was unsuccessful. If there is a failure when adding a<br/>required property then registration of the relevant description element must be abandoned and the plug-in's<br/>description logic should proceed to the next element.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inValue<br/></p>
<p>Implements AAX_IPropertyMap.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.162 AAX_VPropertyMap Class Reference 1063<br/></b></p>
<p><b>14.162.3.6 AddPointerProperty() [1/2]<br/></b></p>
<p>AAX_Result AAX_VPropertyMap::AddPointerProperty (<br/>AAX_EProperty inProperty,<br/>const void &#8727; inValue ) [virtual]<br/></p>
<p>Add a property to a property map with a pointer-sized value.<br/></p>
<p>Use this method to add properties which require a pointer-sized value. Do not use this method to add a property<br/>unless a pointer-sized value is explicitly specified in the property documentation.<br/></p>
<p><b>Note<br/></b>This method may return an error if adding the property was unsuccessful. If there is a failure when adding a<br/>required property then registration of the relevant description element must be abandoned and the plug-in's<br/>description logic should proceed to the next element.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inValue<br/></p>
<p>Implements AAX_IPropertyMap.<br/></p>
<p><b>14.162.3.7 AddPointerProperty() [2/2]<br/></b></p>
<p>AAX_Result AAX_VPropertyMap::AddPointerProperty (<br/>AAX_EProperty inProperty,<br/>const char &#8727; inValue ) [virtual]<br/></p>
<p>Add a property to a property map with a pointer-sized value.<br/></p>
<p>Use this method to add properties which require a pointer-sized value. Do not use this method to add a property<br/>unless a pointer-sized value is explicitly specified in the property documentation.<br/></p>
<p><b>Note<br/></b>This method may return an error if adding the property was unsuccessful. If there is a failure when adding a<br/>required property then registration of the relevant description element must be abandoned and the plug-in's<br/>description logic should proceed to the next element.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inValue<br/></p>
<p>Implements AAX_IPropertyMap.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1064 Class Documentation<br/></b></p>
<p><b>14.162.3.8 RemoveProperty()<br/></b></p>
<p>AAX_Result AAX_VPropertyMap::RemoveProperty (<br/>AAX_EProperty inProperty ) [virtual]<br/></p>
<p>Remove a property from a property map.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/></p>
<p>Implements AAX_IPropertyMap.<br/></p>
<p><b>14.162.3.9 AddPropertyWithIDArray()<br/></b></p>
<p>AAX_Result AAX_VPropertyMap::AddPropertyWithIDArray (<br/>AAX_EProperty inProperty,<br/>const AAX_SPlugInIdentifierTriad &#8727; inPluginIDs,<br/>uint32_t inNumPluginIDs ) [virtual]<br/></p>
<p>Add an array of plug-in IDs to a property map.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>in inPluginIDs An array of AAX_SPlugInIdentifierTriad<br/>in inNumPluginIDs The length of iPluginIDs<br/></p>
<p>Implements AAX_IPropertyMap.<br/></p>
<p><b>14.162.3.10 GetPropertyWithIDArray()<br/></b></p>
<p>AAX_CBoolean AAX_VPropertyMap::GetPropertyWithIDArray (<br/>AAX_EProperty inProperty,<br/>const AAX_SPlugInIdentifierTriad &#8727;&#8727; outPluginIDs,<br/>uint32_t &#8727; outNumPluginIDs ) const [virtual]<br/></p>
<p>Get an array of plug-in IDs from a property map.<br/></p>
<p><b>Parameters<br/></b>in inProperty The property ID.<br/>out outPluginIDs A pointer that will be set to reference an array of AAX_SPlugInIdentifierTriad<br/>in outNumPluginIDs The length of oPluginIDs<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.163 AAX_VSessionDocument Class Reference 1065<br/></b></p>
<p>Implements AAX_IPropertyMap.<br/></p>
<p><b>14.162.3.11 GetIUnknown()<br/></b></p>
<p>IACFUnknown&#8727; AAX_VPropertyMap::GetIUnknown ( ) [virtual]<br/></p>
<p>Returns the most up-to-date underlying interface<br/></p>
<p>Implements AAX_IPropertyMap.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VPropertyMap.h<br/></p>
<p><b>14.163 AAX_VSessionDocument Class Reference<br/></b></p>
<p>#include &lt;AAX_VSessionDocument.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VSessionDocument:<br/></p>
<p>Collaboration diagram for AAX_VSessionDocument:<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class VTempoMap<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_VSessionDocument (IACFUnknown &#8727;iUnknown)<br/>&#8226; &#8764;AAX_VSessionDocument () AAX_OVERRIDE<br/>&#8226; void Clear ()<br/></p>
<p>Release all interface references.<br/>&#8226; bool Valid () const AAX_OVERRIDE<br/></p>
<p>Check whether this session document is valid.<br/>&#8226; std::unique_ptr&lt; AAX_ISessionDocument::TempoMap const &gt; GetTempoMap () AAX_OVERRIDE<br/></p>
<p>Get a copy of the document's tempo map.<br/>&#8226; AAX_Result GetDocumentData (AAX_DocumentData_UID const &amp;inDataType, IACFUnknown &#8727;&#8727;outData)<br/></p>
<p>AAX_OVERRIDE<br/></p>
<p><b>14.163.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1066 Class Documentation<br/></b></p>
<p><b>14.163.1.1 AAX_VSessionDocument()<br/></b></p>
<p>AAX_VSessionDocument::AAX_VSessionDocument (<br/>IACFUnknown &#8727; iUnknown ) [explicit]<br/></p>
<p><b>14.163.1.2 </b>&#8764;<b>AAX_VSessionDocument()<br/></b></p>
<p>AAX_VSessionDocument::&#8764;AAX_VSessionDocument ( )<br/></p>
<p><b>14.163.2 Member Function Documentation<br/></b></p>
<p><b>14.163.2.1 Clear()<br/></b></p>
<p>void AAX_VSessionDocument::Clear ( )<br/></p>
<p>Release all interface references.<br/></p>
<p><b>14.163.2.2 Valid()<br/></b></p>
<p>bool AAX_VSessionDocument::Valid ( ) const [virtual]<br/></p>
<p>Check whether this session document is valid.<br/></p>
<p>Implements AAX_ISessionDocument.<br/></p>
<p><b>14.163.2.3 GetTempoMap()<br/></b></p>
<p>std::unique_ptr&lt;AAX_ISessionDocument::TempoMap const&gt; AAX_VSessionDocument::GetTempoMap ( )<br/>[virtual]<br/></p>
<p>Get a copy of the document's tempo map.<br/></p>
<p><b>Returns<br/></b>A TempoMap interface representing a copy of the current tempo map.<br/>nullptr if the host does not support tempo map data or if an error occurred.<br/></p>
<p>Implements AAX_ISessionDocument.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.163 AAX_VSessionDocument Class Reference 1067<br/></b></p>
<p><b>14.163.2.4 GetDocumentData()<br/></b></p>
<p>AAX_Result AAX_VSessionDocument::GetDocumentData (<br/>AAX_DocumentData_UID const &amp; inDataType,<br/>IACFUnknown &#8727;&#8727; outData ) [virtual]<br/></p>
<p>Get document data of a generic type<br/></p>
<p>Similar to QueryInterface() but uses a data type identifier rather than a true IID<br/></p>
<p>The provided interface has already had a reference added, so be careful not to add an additional reference:<br/>ACFPtr&lt;MyType&gt; ptr;<br/>IACFUnknown * docDataPtr{nullptr};<br/>if (AAX_SUCCESS == doc-&gt;GetDocumentData(dataUID, &amp;docDataPtr) &amp;&amp; docDataPtr) {<br/></p>
<p>ptr.attach(std::static_cast&lt;MyType*&gt;(docDataPtr)); // attach does not AddRef<br/>}<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1068 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inDataType The type of the document data requested<br/>out outData An interface providing the requested data, or nullptr if the host does not support or<br/></p>
<p>cannot provide the requested data type. The reference count has been incremented on<br/>this object on behalf of the caller, so the caller must not add an additional reference<br/>count and must decrement the reference count on this object to release it. For<br/>information about which interface to expect for each requested data type, see the<br/>documentation for that data type.<br/></p>
<p>Implements AAX_ISessionDocument.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VSessionDocument.h<br/></p>
<p><b>14.164 AAX_VTask Class Reference<br/></b></p>
<p>#include &lt;AAX_VTask.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VTask:<br/></p>
<p>Collaboration diagram for AAX_VTask:<br/></p>
<p><b>14.164.1 Description<br/></b></p>
<p>Version-managed concrete AAX_ITask.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_VTask (IACFUnknown &#8727;pUnknown)<br/>&#8226; &#8764;AAX_VTask () AAX_OVERRIDE<br/>&#8226; AAX_Result GetType (AAX_CTypeID &#8727;oType) const AAX_OVERRIDE<br/>&#8226; AAX_IACFDataBuffer const &#8727; GetArgumentOfType (AAX_CTypeID iType) const AAX_OVERRIDE<br/>&#8226; AAX_Result SetProgress (float iProgress) AAX_OVERRIDE<br/>&#8226; float GetProgress () const AAX_OVERRIDE<br/>&#8226; AAX_Result AddResult (AAX_IACFDataBuffer const &#8727;iResult) AAX_OVERRIDE<br/></p>
<p>Attach result data to this task.<br/>&#8226; AAX_ITask &#8727; SetDone (AAX_TaskCompletionStatus iStatus) AAX_OVERRIDE<br/></p>
<p>Inform the host that the task is completed.<br/></p>
<p><b>14.164.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.164 AAX_VTask Class Reference 1069<br/></b></p>
<p><b>14.164.2.1 AAX_VTask()<br/></b></p>
<p>AAX_VTask::AAX_VTask (<br/>IACFUnknown &#8727; pUnknown ) [explicit]<br/></p>
<p><b>14.164.2.2 </b>&#8764;<b>AAX_VTask()<br/></b></p>
<p>AAX_VTask::&#8764;AAX_VTask ( )<br/></p>
<p><b>14.164.3 Member Function Documentation<br/></b></p>
<p><b>14.164.3.1 GetType()<br/></b></p>
<p>AAX_Result AAX_VTask::GetType (<br/>AAX_CTypeID &#8727; oType ) const [virtual]<br/></p>
<p>An identifier defining the type of the requested task<br/></p>
<p><b>Parameters<br/></b>out oType The type of this task request<br/></p>
<p>Implements AAX_ITask.<br/></p>
<p><b>14.164.3.2 GetArgumentOfType()<br/></b></p>
<p>AAX_IACFDataBuffer const&#8727; AAX_VTask::GetArgumentOfType (<br/>AAX_CTypeID iType ) const [virtual]<br/></p>
<p>Additional information defining the request, depending on the task type<br/></p>
<p><b>Parameters<br/></b>in iType The type of argument requested. Possible argument types, if any, and the resulting data buffer<br/></p>
<p>format must be defined per task type.<br/></p>
<p><b>Returns<br/></b>The requested argument data, or nullptr. This data buffer's type ID is expected to match iType . The caller<br/>takes ownership of this object.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1070 Class Documentation<br/></b></p>
<p>Implements AAX_ITask.<br/></p>
<p><b>14.164.3.3 SetProgress()<br/></b></p>
<p>AAX_Result AAX_VTask::SetProgress (<br/>float iProgress ) [virtual]<br/></p>
<p>Inform the host about the current status of the task<br/></p>
<p><b>Parameters<br/></b>in iProgress A value between 0 (no progress) and 1 (complete)<br/></p>
<p>Implements AAX_ITask.<br/></p>
<p><b>14.164.3.4 GetProgress()<br/></b></p>
<p>float AAX_VTask::GetProgress ( ) const [virtual]<br/></p>
<p>Returns the current progress<br/></p>
<p>Implements AAX_ITask.<br/></p>
<p><b>14.164.3.5 AddResult()<br/></b></p>
<p>AAX_Result AAX_VTask::AddResult (<br/>AAX_IACFDataBuffer const &#8727; iResult ) [virtual]<br/></p>
<p>Attach result data to this task.<br/></p>
<p>This can be called multiple times to add multiple types of results to a single task.<br/></p>
<p>The host may process the result data immediately or may wait for the task to complete.<br/></p>
<p>The plug-in is expected to release the data buffer upon making this call. At a minimum, the data buffer must not be<br/>changed after this call is made. See ACFPtr::inArg()<br/></p>
<p><b>Parameters<br/></b>in iResult A buffer containing the result data. Expected result types, if any, and their data buffer format<br/></p>
<p>must be defined per task type.<br/></p>
<p>Implements AAX_ITask.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.165 AAX_VTransport Class Reference 1071<br/></b></p>
<p><b>14.164.3.6 SetDone()<br/></b></p>
<p>AAX_ITask&#8727; AAX_VTask::SetDone (<br/>AAX_TaskCompletionStatus iStatus ) [virtual]<br/></p>
<p>Inform the host that the task is completed.<br/></p>
<p>If successful, returns a null pointer. Otherwise, returns a pointer back to the same object. This is the expected<br/>usage pattern:<br/>// release the task on success, retain it on failure<br/>myTask = myTask-&gt;SetDone(status);<br/></p>
<p><b>Parameters<br/></b>in iStatus The final status of the task. This indicates to the host whether or not the task was performed<br/></p>
<p>as requested.<br/></p>
<p>Implements AAX_ITask.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VTask.h<br/></p>
<p><b>14.165 AAX_VTransport Class Reference<br/></b></p>
<p>#include &lt;AAX_VTransport.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VTransport:<br/></p>
<p>Collaboration diagram for AAX_VTransport:<br/></p>
<p><b>14.165.1 Description<br/></b></p>
<p>Version-managed concrete AAX_ITransport class.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_VTransport (IACFUnknown &#8727;pUnknown)<br/>&#8226; &#8764;AAX_VTransport () AAX_OVERRIDE<br/>&#8226; AAX_Result GetCurrentTempo (double &#8727;TempoBPM) const AAX_OVERRIDE<br/></p>
<p>CALL: Gets the current tempo.<br/>&#8226; AAX_Result GetCurrentMeter (int32_t &#8727;MeterNumerator, int32_t &#8727;MeterDenominator) const AAX_OVERRIDE<br/></p>
<p>CALL: Gets the current meter.<br/>&#8226; AAX_Result IsTransportPlaying (bool &#8727;isPlaying) const AAX_OVERRIDE<br/></p>
<p>CALL: Indicates whether or not the transport is playing back.<br/>&#8226; AAX_Result GetCurrentTickPosition (int64_t &#8727;TickPosition) const AAX_OVERRIDE<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1072 Class Documentation<br/></b></p>
<p>CALL: Gets the current tick position.<br/>&#8226; AAX_Result GetCurrentLoopPosition (bool &#8727;bLooping, int64_t &#8727;LoopStartTick, int64_t &#8727;LoopEndTick) const<br/></p>
<p>AAX_OVERRIDE<br/>CALL: Gets current information on loop playback.<br/></p>
<p>&#8226; AAX_Result GetCurrentNativeSampleLocation (int64_t &#8727;SampleLocation) const AAX_OVERRIDE<br/>CALL: Gets the current playback location of the native audio engine.<br/></p>
<p>&#8226; AAX_Result GetCustomTickPosition (int64_t &#8727;oTickPosition, int64_t iSampleLocation) const AAX_OVERRIDE<br/>CALL: Given an absolute sample position, gets the corresponding tick position.<br/></p>
<p>&#8226; AAX_Result GetBarBeatPosition (int32_t &#8727;Bars, int32_t &#8727;Beats, int64_t &#8727;DisplayTicks, int64_t Sample&#8592;&#8617;<br/>Location) const AAX_OVERRIDE<br/></p>
<p>CALL: Given an absolute sample position, gets the corresponding bar and beat position.<br/>&#8226; AAX_Result GetTicksPerQuarter (uint32_t &#8727;ticks) const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the number of ticks per quarter note.<br/>&#8226; AAX_Result GetCurrentTicksPerBeat (uint32_t &#8727;ticks) const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the number of ticks per beat.<br/>&#8226; AAX_Result GetTimelineSelectionStartPosition (int64_t &#8727;oSampleLocation) const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the absolute sample position of the beginning of the current transport selection.<br/>&#8226; AAX_Result GetTimeCodeInfo (AAX_EFrameRate &#8727;oFrameRate, int32_t &#8727;oOffset) const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the current time code frame rate and offset.<br/>&#8226; AAX_Result GetFeetFramesInfo (AAX_EFeetFramesRate &#8727;oFeetFramesRate, int64_t &#8727;oOffset) const<br/></p>
<p>AAX_OVERRIDE<br/>CALL: Retrieves the current timecode feet/frames rate and offset.<br/></p>
<p>&#8226; AAX_Result IsMetronomeEnabled (int32_t &#8727;isEnabled) const AAX_OVERRIDE<br/>Sets isEnabled to true if the metronome is enabled.<br/></p>
<p>&#8226; AAX_Result GetHDTimeCodeInfo (AAX_EFrameRate &#8727;oHDFrameRate, int64_t &#8727;oHDOffset) const<br/>AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the current HD time code frame rate and offset.<br/>&#8226; AAX_Result GetTimelineSelectionEndPosition (int64_t &#8727;oSampleLocation) const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the absolute sample position of the end of the current transport selection.<br/>&#8226; AAX_Result GetKeySignature (int64_t iSampleLocation, uint32_t &#8727;oKeySignature) const AAX_OVERRIDE<br/></p>
<p>CALL: Retrieves the key signature at a sample location.<br/>&#8226; AAX_Result RequestTransportStart () AAX_OVERRIDE<br/></p>
<p>CALL: Request that the host transport start playback.<br/>&#8226; AAX_Result RequestTransportStop () AAX_OVERRIDE<br/></p>
<p>CALL: Request that the host transport stop playback.<br/></p>
<p><b>14.165.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.165.2.1 AAX_VTransport()<br/></b></p>
<p>AAX_VTransport::AAX_VTransport (<br/>IACFUnknown &#8727; pUnknown )<br/></p>
<p><b>14.165.2.2 </b>&#8764;<b>AAX_VTransport()<br/></b></p>
<p>AAX_VTransport::&#8764;AAX_VTransport ( )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.165 AAX_VTransport Class Reference 1073<br/></b></p>
<p><b>14.165.3 Member Function Documentation<br/></b></p>
<p><b>14.165.3.1 GetCurrentTempo()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetCurrentTempo (<br/>double &#8727; TempoBPM ) const [virtual]<br/></p>
<p>CALL: Gets the current tempo.<br/></p>
<p>Returns the tempo corresponding to the current position of the transport counter<br/></p>
<p><b>Note<br/></b>The resolution of the tempo returned here is based on the host's tempo resolution, so it will match the tempo<br/>displayed in the host. Use GetCurrentTicksPerBeat() to calculate the tempo resolution note.<br/></p>
<p><b>Parameters<br/></b>out TempoBPM The current tempo in beats per minute<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.2 GetCurrentMeter()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetCurrentMeter (<br/>int32_t &#8727; MeterNumerator,<br/>int32_t &#8727; MeterDenominator ) const [virtual]<br/></p>
<p>CALL: Gets the current meter.<br/></p>
<p>Returns the meter corresponding to the current position of the transport counter<br/></p>
<p><b>Parameters<br/></b>out MeterNumerator The numerator portion of the meter<br/>out MeterDenominator The denominator portion of the meter<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.3 IsTransportPlaying()<br/></b></p>
<p>AAX_Result AAX_VTransport::IsTransportPlaying (<br/>bool &#8727; isPlaying ) const [virtual]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1074 Class Documentation<br/></b></p>
<p>CALL: Indicates whether or not the transport is playing back.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.165 AAX_VTransport Class Reference 1075<br/></b></p>
<p><b>Parameters<br/></b>out isPlaying true if the transport is currently in playback<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.4 GetCurrentTickPosition()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetCurrentTickPosition (<br/>int64_t &#8727; TickPosition ) const [virtual]<br/></p>
<p>CALL: Gets the current tick position.<br/></p>
<p>Returns the current tick position corresponding to the current transport position. One &quot;Tick&quot; is represented here as<br/>1/960000 of a quarter note. That is, there are 960,000 of these ticks in a quarter note.<br/></p>
<p><b>Host Compatibility Notes </b>The tick resolution here is different than that of the tick displayed in Pro Tools. &quot;Display<br/>ticks&quot; (as they are called) are 1/960 of a quarter note.<br/></p>
<p><b>Parameters<br/></b>out TickPosition The tick position value<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.5 GetCurrentLoopPosition()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetCurrentLoopPosition (<br/>bool &#8727; bLooping,<br/>int64_t &#8727; LoopStartTick,<br/>int64_t &#8727; LoopEndTick ) const [virtual]<br/></p>
<p>CALL: Gets current information on loop playback.<br/></p>
<p><b>Host Compatibility Notes </b>This does not indicate anything about the status of the &quot;Loop Record&quot; option. Even<br/>when the host is configured to loop playback, looping may not occur if certain conditions<br/>are not met (i.e. the length of the selection is too short)<br/></p>
<p><b>Parameters<br/></b>out bLooping true if the host is configured to loop playback<br/>out LoopStartTick The starting tick position of the selection being looped (see GetCurrentTickPosition())<br/>out LoopEndTick The ending tick position of the selection being looped (see GetCurrentTickPosition())<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1076 Class Documentation<br/></b></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.6 GetCurrentNativeSampleLocation()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetCurrentNativeSampleLocation (<br/>int64_t &#8727; SampleLocation ) const [virtual]<br/></p>
<p>CALL: Gets the current playback location of the native audio engine.<br/></p>
<p>When called from a ProcessProc render callback, this method will provide the absolute sample location at the<br/>beginning of the callback's audio buffers.<br/></p>
<p>When called from AAX_IEffectParameters::RenderAudio_Hybrid(), this method will provide the absolute sample<br/>location for the samples in the method's <b>output </b>audio buffers. To calculate the absolute sample location for the<br/>sampels in the method's input buffers (i.e. the timelin location where the samples originated) subtract the value<br/>provided by AAX_IController::GetHybridSignalLatency() from this value.<br/></p>
<p>When called from a non-real-time thread, this method will provide the current location of the samples being pro-<br/>cessed by the plug-in's ProcessProc on its real-time processing thread.<br/></p>
<p><b>Note<br/></b>This method only returns a value during playback. It cannot be used to determine, e.g., the location of the<br/>timeline selector while the host is not in playback.<br/></p>
<p><b>Parameters<br/></b>out SampleLocation Absolute sample location of the first sample in the current native processing buffer<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.7 GetCustomTickPosition()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetCustomTickPosition (<br/>int64_t &#8727; oTickPosition,<br/>int64_t iSampleLocation ) const [virtual]<br/></p>
<p>CALL: Given an absolute sample position, gets the corresponding tick position.<br/></p>
<p><b>Host Compatibility Notes </b>There is a minor performance cost associated with using this API in Pro Tools. It should<br/>not be used excessively without need.<br/></p>
<p><b>Parameters<br/></b>out oTickPosition the timeline tick position corresponding to iSampleLocation<br/>in iSampleLocation An absolute sample location (see GetCurrentNativeSampleLocation())<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.165 AAX_VTransport Class Reference 1077<br/></b></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.8 GetBarBeatPosition()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetBarBeatPosition (<br/>int32_t &#8727; Bars,<br/>int32_t &#8727; Beats,<br/>int64_t &#8727; DisplayTicks,<br/>int64_t SampleLocation ) const [virtual]<br/></p>
<p>CALL: Given an absolute sample position, gets the corresponding bar and beat position.<br/></p>
<p><b>Host Compatibility Notes </b>There is a minor performance cost associated with using this API in Pro Tools. It should<br/>not be used excessively without need.<br/></p>
<p><b>Parameters<br/></b>out Bars The bar corresponding to SampleLocation<br/>out Beats The beat corresponding to SampleLocation<br/>out DisplayTicks The ticks corresponding to SampleLocation<br/>in SampleLocation An absolute sample location (see GetCurrentNativeSampleLocation())<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.9 GetTicksPerQuarter()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetTicksPerQuarter (<br/>uint32_t &#8727; ticks ) const [virtual]<br/></p>
<p>CALL: Retrieves the number of ticks per quarter note.<br/></p>
<p><b>Parameters<br/></b>out ticks<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.10 GetCurrentTicksPerBeat()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetCurrentTicksPerBeat (<br/>uint32_t &#8727; ticks ) const [virtual]<br/></p>
<p>CALL: Retrieves the number of ticks per beat.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1078 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out ticks<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.11 GetTimelineSelectionStartPosition()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetTimelineSelectionStartPosition (<br/>int64_t &#8727; oSampleLocation ) const [virtual]<br/></p>
<p>CALL: Retrieves the absolute sample position of the beginning of the current transport selection.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out oSampleLocation<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.12 GetTimeCodeInfo()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetTimeCodeInfo (<br/>AAX_EFrameRate &#8727; oFrameRate,<br/>int32_t &#8727; oOffset ) const [virtual]<br/></p>
<p>CALL: Retrieves the current time code frame rate and offset.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out oFrameRate<br/>out oOffset<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.165 AAX_VTransport Class Reference 1079<br/></b></p>
<p><b>14.165.3.13 GetFeetFramesInfo()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetFeetFramesInfo (<br/>AAX_EFeetFramesRate &#8727; oFeetFramesRate,<br/>int64_t &#8727; oOffset ) const [virtual]<br/></p>
<p>CALL: Retrieves the current timecode feet/frames rate and offset.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out oFeetFramesRate<br/>out oOffset<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.14 IsMetronomeEnabled()<br/></b></p>
<p>AAX_Result AAX_VTransport::IsMetronomeEnabled (<br/>int32_t &#8727; isEnabled ) const [virtual]<br/></p>
<p>Sets isEnabled to true if the metronome is enabled.<br/></p>
<p><b>Note<br/></b>This method is part of the version 2 transport interface<br/></p>
<p><b>Parameters<br/></b>out isEnabled<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.15 GetHDTimeCodeInfo()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetHDTimeCodeInfo (<br/>AAX_EFrameRate &#8727; oHDFrameRate,<br/>int64_t &#8727; oHDOffset ) const [virtual]<br/></p>
<p>CALL: Retrieves the current HD time code frame rate and offset.<br/></p>
<p><b>Note<br/></b>This method is part of the version 3 transport interface<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1080 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>out oHDFrameRate<br/>out oHDOffset<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.16 GetTimelineSelectionEndPosition()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetTimelineSelectionEndPosition (<br/>int64_t &#8727; oSampleLocation ) const [virtual]<br/></p>
<p>CALL: Retrieves the absolute sample position of the end of the current transport selection.<br/></p>
<p><b>Note<br/></b>This method is part of the version 4 transport interface<br/></p>
<p><b>Parameters<br/></b>out oSampleLocation<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.17 GetKeySignature()<br/></b></p>
<p>AAX_Result AAX_VTransport::GetKeySignature (<br/>int64_t iSampleLocation,<br/>uint32_t &#8727; oKeySignature ) const [virtual]<br/></p>
<p>CALL: Retrieves the key signature at a sample location.<br/></p>
<p>The signature is provided as a bitfield:<br/></p>
<p>&#8226; 31-20: Chromatic scale elements, ordered MSB (root) to LSB<br/></p>
<p>&#8226; 19-4: (Reserved)<br/></p>
<p>&#8226; 3-0: Root note (C natural = 0)<br/></p>
<p>For example<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.166 AAX_VViewContainer Class Reference 1081<br/></b></p>
<p>* D# Major<br/>* Ionian D#<br/>* 0b 101011010101 0000 00000000 0000 0011<br/>*<br/>* E Phrygian<br/>* Phrygian E<br/>* 0b 110101011010 0000 00000000 0000 0100<br/>*<br/>* Chromatic<br/>* Chromatic C<br/>* 0b 111111111111 0000 00000000 0000 0000<br/>*<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.18 RequestTransportStart()<br/></b></p>
<p>AAX_Result AAX_VTransport::RequestTransportStart ( ) [virtual]<br/></p>
<p>CALL: Request that the host transport start playback.<br/></p>
<p><b>Note<br/></b>This method is part of the AAX_IACFTransportControl interface<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p><b>14.165.3.19 RequestTransportStop()<br/></b></p>
<p>AAX_Result AAX_VTransport::RequestTransportStop ( ) [virtual]<br/></p>
<p>CALL: Request that the host transport stop playback.<br/></p>
<p><b>Note<br/></b>This method is part of the AAX_IACFTransportControl interface<br/></p>
<p>Implements AAX_ITransport.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VTransport.h<br/></p>
<p><b>14.166 AAX_VViewContainer Class Reference<br/></b></p>
<p>#include &lt;AAX_VViewContainer.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VViewContainer:<br/></p>
<p>Collaboration diagram for AAX_VViewContainer:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1082 Class Documentation<br/></b></p>
<p><b>14.166.1 Description<br/></b></p>
<p>Version-managed concrete AAX_IViewContainer class.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; AAX_VViewContainer (IACFUnknown &#8727;pUnknown)<br/>&#8226; &#8764;AAX_VViewContainer () AAX_OVERRIDE<br/>&#8226; int32_t GetType () AAX_OVERRIDE<br/></p>
<p>Returns the raw view type as one of AAX_EViewContainer_Type.<br/>&#8226; void &#8727; GetPtr () AAX_OVERRIDE<br/></p>
<p>Returns a pointer to the raw view.<br/>&#8226; AAX_Result GetModifiers (uint32_t &#8727;outModifiers) AAX_OVERRIDE<br/></p>
<p>Queries the host for the current modifier keys.<br/>&#8226; AAX_Result SetViewSize (AAX_Point &amp;inSize) AAX_OVERRIDE<br/></p>
<p>Request a change to the main view size.<br/>&#8226; AAX_Result HandleParameterMouseDown (AAX_CParamID inParamID, uint32_t inModifiers) AAX_OVERRIDE<br/></p>
<p>Alert the host to a mouse down event.<br/>&#8226; AAX_Result HandleParameterMouseDrag (AAX_CParamID inParamID, uint32_t inModifiers) AAX_OVERRIDE<br/></p>
<p>Alert the host to a mouse drag event.<br/>&#8226; AAX_Result HandleParameterMouseUp (AAX_CParamID inParamID, uint32_t inModifiers) AAX_OVERRIDE<br/></p>
<p>Alert the host to a mouse up event.<br/>&#8226; AAX_Result HandleParameterMouseEnter (AAX_CParamID inParamID, uint32_t inModifiers) AAX_OVERRIDE<br/></p>
<p>Alert the host to a mouse enter event to the parameter's control.<br/>&#8226; AAX_Result HandleParameterMouseExit (AAX_CParamID inParamID, uint32_t inModifiers) AAX_OVERRIDE<br/></p>
<p>Alert the host to a mouse exit event from the parameter's control.<br/>&#8226; AAX_Result HandleMultipleParametersMouseDown (const AAX_CParamID &#8727;inParamIDs, uint32_t inNum&#8592;&#8617;<br/></p>
<p>OfParams, uint32_t inModifiers) AAX_OVERRIDE<br/>Alert the host to a mouse down event.<br/></p>
<p>&#8226; AAX_Result HandleMultipleParametersMouseDrag (const AAX_CParamID &#8727;inParamIDs, uint32_t inNum&#8592;&#8617;<br/>OfParams, uint32_t inModifiers) AAX_OVERRIDE<br/></p>
<p>Alert the host to a mouse drag event.<br/>&#8226; AAX_Result HandleMultipleParametersMouseUp (const AAX_CParamID &#8727;inParamIDs, uint32_t inNumOf&#8592;&#8617;<br/></p>
<p>Params, uint32_t inModifiers) AAX_OVERRIDE<br/>Alert the host to a mouse up event.<br/></p>
<p><b>14.166.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.166.2.1 AAX_VViewContainer()<br/></b></p>
<p>AAX_VViewContainer::AAX_VViewContainer (<br/>IACFUnknown &#8727; pUnknown )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.166 AAX_VViewContainer Class Reference 1083<br/></b></p>
<p><b>14.166.2.2 </b>&#8764;<b>AAX_VViewContainer()<br/></b></p>
<p>AAX_VViewContainer::&#8764;AAX_VViewContainer ( )<br/></p>
<p><b>14.166.3 Member Function Documentation<br/></b></p>
<p><b>14.166.3.1 GetType()<br/></b></p>
<p>int32_t AAX_VViewContainer::GetType ( ) [virtual]<br/></p>
<p>Returns the raw view type as one of AAX_EViewContainer_Type.<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p><b>14.166.3.2 GetPtr()<br/></b></p>
<p>void&#8727; AAX_VViewContainer::GetPtr ( ) [virtual]<br/></p>
<p>Returns a pointer to the raw view.<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p><b>14.166.3.3 GetModifiers()<br/></b></p>
<p>AAX_Result AAX_VViewContainer::GetModifiers (<br/>uint32_t &#8727; outModifiers ) [virtual]<br/></p>
<p>Queries the host for the current modifier keys.<br/></p>
<p>This method returns a bit mask with bits set for each of the currently active modifier keys. This method does not<br/>return the state of the AAX_eModifiers_SecondaryButton.<br/></p>
<p><b>Host Compatibility Notes </b>Although this method allows plug-ins to acquire the current state of the Windows key<br/>(normally blocked by Pro Tools), plug-ins should not use key combinations that require<br/>this key.<br/></p>
<p><b>Parameters<br/></b>out outModifiers Current modifiers as a bitmask of AAX_EModifiers<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1084 Class Documentation<br/></b></p>
<p><b>14.166.3.4 SetViewSize()<br/></b></p>
<p>AAX_Result AAX_VViewContainer::SetViewSize (<br/>AAX_Point &amp; inSize ) [virtual]<br/></p>
<p>Request a change to the main view size.<br/></p>
<p><b>Note<br/></b>&#8226; For compatibility with the smallest supported displays, plug-in GUI dimensions should not exceed<br/></p>
<p>749x617 pixels, or 749x565 pixels for plug-ins with sidechain support.<br/></p>
<p><b>Parameters<br/></b>in inSize The new size to which the plug-in view should be set<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p><b>14.166.3.5 HandleParameterMouseDown()<br/></b></p>
<p>AAX_Result AAX_VViewContainer::HandleParameterMouseDown (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [virtual]<br/></p>
<p>Alert the host to a mouse down event.<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being edited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p><b>14.166.3.6 HandleParameterMouseDrag()<br/></b></p>
<p>AAX_Result AAX_VViewContainer::HandleParameterMouseDrag (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [virtual]<br/></p>
<p>Alert the host to a mouse drag event.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.166 AAX_VViewContainer Class Reference 1085<br/></b></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1086 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being edited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p><b>14.166.3.7 HandleParameterMouseUp()<br/></b></p>
<p>AAX_Result AAX_VViewContainer::HandleParameterMouseUp (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [virtual]<br/></p>
<p>Alert the host to a mouse up event.<br/></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being edited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p><b>14.166.3.8 HandleParameterMouseEnter()<br/></b></p>
<p>AAX_Result AAX_VViewContainer::HandleParameterMouseEnter (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [virtual]<br/></p>
<p>Alert the host to a mouse enter event to the parameter's control.<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being entered<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Returns AAX_SUCCESS if event was processed successfully, otherwise an AAX_ERROR code<br/>Implements AAX_IViewContainer.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.166 AAX_VViewContainer Class Reference 1087<br/></b></p>
<p><b>14.166.3.9 HandleParameterMouseExit()<br/></b></p>
<p>AAX_Result AAX_VViewContainer::HandleParameterMouseExit (<br/>AAX_CParamID inParamID,<br/>uint32_t inModifiers ) [virtual]<br/></p>
<p>Alert the host to a mouse exit event from the parameter's control.<br/></p>
<p><b>Parameters<br/></b>in inParamID ID of the parameter whose control is being exited<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Returns AAX_SUCCESS if event was processed successfully, otherwise an AAX_ERROR code<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p><b>14.166.3.10 HandleMultipleParametersMouseDown()<br/></b></p>
<p>AAX_Result AAX_VViewContainer::HandleMultipleParametersMouseDown (<br/>const AAX_CParamID &#8727; inParamIDs,<br/>uint32_t inNumOfParams,<br/>uint32_t inModifiers ) [virtual]<br/></p>
<p>Alert the host to a mouse down event.<br/></p>
<p><b>Parameters<br/></b>in inParamIDs IDs of the parameters that belong to the same GUI element whose controls are<br/></p>
<p>being edited<br/>in inNumOfParams Number of parameter IDS<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p><b>14.166.3.11 HandleMultipleParametersMouseDrag()<br/></b></p>
<p>AAX_Result AAX_VViewContainer::HandleMultipleParametersMouseDrag (<br/>const AAX_CParamID &#8727; inParamIDs,<br/>uint32_t inNumOfParams,<br/>uint32_t inModifiers ) [virtual]<br/></p>
<p>Alert the host to a mouse drag event.<br/></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1088 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>in inParamIDs IDs of the parameters that belong to the same GUI element whose controls are<br/></p>
<p>being edited<br/>in inNumOfParams Number of parameter IDS<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p><b>14.166.3.12 HandleMultipleParametersMouseUp()<br/></b></p>
<p>AAX_Result AAX_VViewContainer::HandleMultipleParametersMouseUp (<br/>const AAX_CParamID &#8727; inParamIDs,<br/>uint32_t inNumOfParams,<br/>uint32_t inModifiers ) [virtual]<br/></p>
<p>Alert the host to a mouse up event.<br/></p>
<p><b>Warning<br/></b>The host may return AAX_ERROR_UNIMPLEMENTED for this event even if the host did handle the corre-<br/>sponding mouse down event. A plug-in should ignore any following mouse drag and mouse up events that<br/>correspond to a host-managed mouse down event. (PTSW-195209 / PT-218474)<br/></p>
<p><b>Parameters<br/></b>in inParamIDs IDs of the parameters that belong to the same GUI element whose controls are<br/></p>
<p>being edited<br/>in inNumOfParams Number of parameter IDS<br/>in inModifiers A bitmask of AAX_EModifiers values<br/></p>
<p>Implements AAX_IViewContainer.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VViewContainer.h<br/></p>
<p><b>14.167 AAX::Exception::Any Class Reference<br/></b></p>
<p>#include &lt;AAX_Exception.h&gt;<br/></p>
<p>Inheritance diagram for AAX::Exception::Any:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.167 AAX::Exception::Any Class Reference 1089<br/></b></p>
<p><b>14.167.1 Description<br/></b></p>
<p>Base class for AAX exceptions<br/></p>
<p>This class is defined within the AAX Library and is always handled within the AAX plug-in. Objects of this class are<br/>never passed between the plug-in and the AAX host.<br/></p>
<p>The definition of this class may change between versions of the AAX SDK. This class does not include any form of<br/>version safety for cross-version compatibility.<br/></p>
<p><b>Warning<br/></b>Do not use multiple inheritance in any sub-classes within the AAX::Exception::Any inheritance tree<br/>Never pass exceptions across the library boundary to the AAX host<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual &#8764;Any ()<br/>&#8226; template&lt;class C &gt;<br/></p>
<p>Any (const C &amp;inWhat)<br/>&#8226; template&lt;class C1 , class C2 , class C3 &gt;<br/></p>
<p>Any (const C1 &amp;inWhat, const C2 &amp;inFunction, const C3 &amp;inLine)<br/>&#8226; Any (const Any &amp;inOther)<br/>&#8226; Any &amp; operator= (const Any &amp;inOther)<br/>&#8226; AAX_DEFAULT_MOVE_CTOR (Any)<br/>&#8226; AAX_DEFAULT_MOVE_OPER (Any)<br/>&#8226; const std::string &amp; What () const<br/>&#8226; const std::string &amp; Desc () const<br/>&#8226; const std::string &amp; Function () const<br/>&#8226; const std::string &amp; Line () const<br/></p>
<p><b>14.167.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.167.2.1 </b>&#8764;<b>Any()<br/></b></p>
<p>virtual AAX::Exception::Any::&#8764;Any ( ) [inline], [virtual]<br/></p>
<p><b>14.167.2.2 Any() [1/3]<br/></b></p>
<p>template&lt;class C &gt;<br/>AAX::Exception::Any::Any (<br/></p>
<p>const C &amp; inWhat ) [inline], [explicit]<br/></p>
<p>Explicit conversion from a string-like object<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1090 Class Documentation<br/></b></p>
<p><b>14.167.2.3 Any() [2/3]<br/></b></p>
<p>template&lt;class C1 , class C2 , class C3 &gt;<br/>AAX::Exception::Any::Any (<br/></p>
<p>const C1 &amp; inWhat,<br/>const C2 &amp; inFunction,<br/>const C3 &amp; inLine ) [inline], [explicit]<br/></p>
<p>Explicit conversion from a string-like object with function name and line number<br/></p>
<p><b>14.167.2.4 Any() [3/3]<br/></b></p>
<p>AAX::Exception::Any::Any (<br/>const Any &amp; inOther ) [inline]<br/></p>
<p><b>14.167.3 Member Function Documentation<br/></b></p>
<p><b>14.167.3.1 operator=()<br/></b></p>
<p>Any&amp; AAX::Exception::Any::operator= (<br/>const Any &amp; inOther ) [inline]<br/></p>
<p><b>14.167.3.2 AAX_DEFAULT_MOVE_CTOR()<br/></b></p>
<p>AAX::Exception::Any::AAX_DEFAULT_MOVE_CTOR (<br/>Any )<br/></p>
<p><b>14.167.3.3 AAX_DEFAULT_MOVE_OPER()<br/></b></p>
<p>AAX::Exception::Any::AAX_DEFAULT_MOVE_OPER (<br/>Any )<br/></p>
<p><b>14.167.3.4 What()<br/></b></p>
<p>const std::string&amp; AAX::Exception::Any::What ( ) const [inline]<br/></p>
<p>Referenced by AAX::AsString().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.168 AAX_CChunkDataParser::DataValue Struct Reference 1091<br/></b></p>
<p><b>14.167.3.5 Desc()<br/></b></p>
<p>const std::string&amp; AAX::Exception::Any::Desc ( ) const [inline]<br/></p>
<p><b>14.167.3.6 Function()<br/></b></p>
<p>const std::string&amp; AAX::Exception::Any::Function ( ) const [inline]<br/></p>
<p><b>14.167.3.7 Line()<br/></b></p>
<p>const std::string&amp; AAX::Exception::Any::Line ( ) const [inline]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_Exception.h<br/></p>
<p><b>14.168 AAX_CChunkDataParser::DataValue Struct Reference<br/></b></p>
<p>#include &lt;AAX_CChunkDataParser.h&gt;<br/></p>
<p>Collaboration diagram for AAX_CChunkDataParser::DataValue:<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; DataValue ()<br/></p>
<p><b>Public Attributes<br/></b></p>
<p>&#8226; int32_t mDataType<br/>&#8226; AAX_CString mDataName<br/></p>
<p>name of the stored data<br/>&#8226; int64_t mIntValue<br/></p>
<p>used if this DataValue is not a string<br/>&#8226; AAX_CString mStringValue<br/></p>
<p>used if this DataValue is a string<br/></p>
<p><b>14.168.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1092 Class Documentation<br/></b></p>
<p><b>14.168.1.1 DataValue()<br/></b></p>
<p>AAX_CChunkDataParser::DataValue::DataValue ( ) [inline]<br/></p>
<p><b>14.168.2 Member Data Documentation<br/></b></p>
<p><b>14.168.2.1 mDataType<br/></b></p>
<p>int32_t AAX_CChunkDataParser::DataValue::mDataType<br/></p>
<p><b>14.168.2.2 mDataName<br/></b></p>
<p>AAX_CString AAX_CChunkDataParser::DataValue::mDataName<br/></p>
<p>name of the stored data<br/></p>
<p><b>14.168.2.3 mIntValue<br/></b></p>
<p>int64_t AAX_CChunkDataParser::DataValue::mIntValue<br/></p>
<p>used if this DataValue is not a string<br/></p>
<p><b>14.168.2.4 mStringValue<br/></b></p>
<p>AAX_CString AAX_CChunkDataParser::DataValue::mStringValue<br/></p>
<p>used if this DataValue is a string<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_CChunkDataParser.h<br/></p>
<p><b>14.169 IACFDefinition Interface Reference<br/></b></p>
<p>Inheritance diagram for IACFDefinition:<br/></p>
<p>Collaboration diagram for IACFDefinition:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.169 IACFDefinition Interface Reference 1093<br/></b></p>
<p><b>14.169.1 Description<br/></b></p>
<p>Publicly inherits from IACFUnknown.This abstract interface is used to indentify all of the plug-in components in the<br/>host.<br/></p>
<p><b>Remarks<br/></b>This interface is the base class for both plug-in and component definitions. All defined attributes are read only.<br/></p>
<p><b>Note<br/></b>This interface does not provide any attribute enumeration. You must know the uid of the associated with the<br/>attribute that you need to find.<br/>This interface is implemented by the host. The plug-in will use this interface to define optional attributes for<br/>both plug-in and component implementations classes.<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; virtual ACFRESULT ACFMETHODCALLTYPE DefineAttribute (const acfUID &amp;attributeID, const acfUID<br/>&amp;typeID, const void &#8727;attrData, acfUInt32 attrDataSize)=0<br/></p>
<p>Add a read only attribute to the definition.<br/>&#8226; virtual ACFRESULT ACFMETHODCALLTYPE GetAttributeInfo (const acfUID &amp;attributeID, acfUID &#8727;typeID,<br/></p>
<p>acfUInt32 &#8727;attrDataSize)=0<br/>Returns information about the given attribute.<br/></p>
<p>&#8226; virtual ACFRESULT ACFMETHODCALLTYPE CopyAttribute (const acfUID &amp;attributeID, const acfUID<br/>&amp;typeID, void &#8727;attrData, acfUInt32 attrDataSize)=0<br/></p>
<p>Copy the a given attribute.<br/></p>
<p><b>14.169.2 Member Function Documentation<br/></b></p>
<p><b>14.169.2.1 DefineAttribute()<br/></b></p>
<p>virtual ACFRESULT ACFMETHODCALLTYPE IACFDefinition::DefineAttribute (<br/>const acfUID &amp; attributeID,<br/>const acfUID &amp; typeID,<br/>const void &#8727; attrData,<br/>acfUInt32 attrDataSize ) [pure virtual]<br/></p>
<p>Add a read only attribute to the definition.<br/></p>
<p><b>DefineAttribute<br/></b></p>
<p><b>Remarks<br/></b>Use the method to define additional global attributes for you component. This method will fail if the attribute<br/>has already been defined.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1094 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>attributeID Unique identifier for attribute<br/>typeID Indicates the type of the attribute data<br/>attrData Pointer to buffer that contains the attribute data<br/>attrDataSize Size of the attribute buffer<br/></p>
<p><b>14.169.2.2 GetAttributeInfo()<br/></b></p>
<p>virtual ACFRESULT ACFMETHODCALLTYPE IACFDefinition::GetAttributeInfo (<br/>const acfUID &amp; attributeID,<br/>acfUID &#8727; typeID,<br/>acfUInt32 &#8727; attrDataSize ) [pure virtual]<br/></p>
<p>Returns information about the given attribute.<br/></p>
<p><b>Remarks<br/></b>Use this method to retrieve the type and size of a given attribute.<br/></p>
<p><b>Parameters<br/></b>attributeID Unique identifier for attribute<br/>typeID Indicates the type of the attribute data<br/>attrDataSize Size of the attribute data<br/></p>
<p><b>14.169.2.3 CopyAttribute()<br/></b></p>
<p>virtual ACFRESULT ACFMETHODCALLTYPE IACFDefinition::CopyAttribute (<br/>const acfUID &amp; attributeID,<br/>const acfUID &amp; typeID,<br/>void &#8727; attrData,<br/>acfUInt32 attrDataSize ) [pure virtual]<br/></p>
<p>Copy the a given attribute.<br/></p>
<p><b>CopyAttribute<br/></b></p>
<p><b>Remarks<br/></b>Use this method to access the contents of a given attribute.<br/></p>
<p><b>Parameters<br/></b>attributeID Unique identifier for attribute<br/>typeID Indicates the type of the attribute data<br/>attrData Pointer to buffer to copy the attribute data<br/>attrDataSize Size of the attribute buffer<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.170 IACFUnknown Interface Reference 1095<br/></b></p>
<p>The documentation for this interface was generated from the following file:<br/></p>
<p>&#8226; AAX_ACFInterface.doxygen<br/></p>
<p><b>14.170 IACFUnknown Interface Reference<br/></b>Inheritance diagram for IACFUnknown:<br/></p>
<p><b>14.170.1 Description<br/></b>COM compatible IUnknown C++ interface.<br/><b>Remarks<br/></b></p>
<p>The methods of the IACFUnknown interface, implemented by all ACF objects, supports general inter-object<br/>protocol negotiation via the QueryInterface method, and object lifetime management with the AddRef<br/>and Release methods.<br/></p>
<p><b>Note<br/></b>Because AddRef and Release are not required to return accurate values, callers of these methods must<br/>not use the return values to determine if an object is still valid or has been destroyed. (Standard M&#8727;cr&#8727;s&#8727;ft<br/>disclaimer)<br/></p>
<p>For further information please refer to the Microsoft documentation for IUnknown.<br/><b>Note<br/></b></p>
<p>This class will work only with compilers that can produce COM-compatible object layouts for C++ classes.<br/>egcs can not do this. Metrowerks can do this (if you subclass from __comobject).<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual BEGIN_ACFINTERFACE ACFRESULT ACFMETHODCALLTYPE QueryInterface (const acfIID &amp;iid,<br/></p>
<p>void &#8727;&#8727;ppOut)=0<br/>Returns pointers to supported interfaces.<br/></p>
<p>&#8226; virtual acfUInt32 ACFMETHODCALLTYPE AddRef (void)=0<br/>Increments reference count.<br/></p>
<p>&#8226; virtual acfUInt32 ACFMETHODCALLTYPE Release (void)=0<br/>Decrements reference count.<br/></p>
<p><b>14.170.2 Member Function Documentation<br/></b></p>
<p><b>14.170.2.1 QueryInterface()<br/></b></p>
<p>virtual BEGIN_ACFINTERFACE ACFRESULT ACFMETHODCALLTYPE IACFUnknown::QueryInterface (<br/>const acfIID &amp; iid,<br/>void &#8727;&#8727; ppOut ) [pure virtual]<br/></p>
<p>Returns pointers to supported interfaces.<br/><b>Remarks<br/></b></p>
<p>The QueryInterface method gives a client access to alternate interfaces implemented by an object. The<br/>returned interface pointer will have already had its reference count incremented so the caller will be required<br/>to call the Release method.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1096 Class Documentation<br/></b></p>
<p><b>Parameters<br/></b>iid Identifier of the requested interface<br/>ppOut Address of variable that receives the interface pointer associated with iid.<br/></p>
<p><b>14.170.2.2 AddRef()<br/></b></p>
<p>virtual acfUInt32 ACFMETHODCALLTYPE IACFUnknown::AddRef (<br/>void ) [pure virtual]<br/></p>
<p>Increments reference count.<br/></p>
<p><b>Remarks<br/></b>The AddRef method should be called every time a new copy of an interface is made. When this copy is no<br/>longer referenced it must be released with the Release method.<br/></p>
<p><b>14.170.2.3 Release()<br/></b></p>
<p>virtual acfUInt32 ACFMETHODCALLTYPE IACFUnknown::Release (<br/>void ) [pure virtual]<br/></p>
<p>Decrements reference count.<br/></p>
<p><b>Remarks<br/></b>Use this method to decrement the reference count. When the reference count reaches zero the object that<br/>implements the interface will be deleted.<br/></p>
<p>The documentation for this interface was generated from the following file:<br/></p>
<p>&#8226; AAX_ACFInterface.doxygen<br/></p>
<p><b>14.171 AAX::Exception::ResultError Class Reference<br/></b></p>
<p>#include &lt;AAX_Exception.h&gt;<br/></p>
<p>Inheritance diagram for AAX::Exception::ResultError:<br/></p>
<p>Collaboration diagram for AAX::Exception::ResultError:<br/></p>
<p><b>14.171.1 Description<br/></b></p>
<p>Exception class for AAX_EError results<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.171 AAX::Exception::ResultError Class Reference 1097<br/></b></p>
<p><b>Public Member Functions<br/></b>&#8226; ResultError (AAX_Result inWhatResult)<br/>&#8226; template&lt;class C &gt;<br/></p>
<p>ResultError (AAX_Result inWhatResult, const C &amp;inFunction)<br/>&#8226; template&lt;class C1 , class C2 &gt;<br/></p>
<p>ResultError (AAX_Result inWhatResult, const C1 &amp;inFunction, const C2 &amp;inLine)<br/>&#8226; ResultError (const ResultError &amp;inOther)<br/>&#8226; AAX_Result Result () const<br/></p>
<p><b>Static Public Member Functions<br/></b>&#8226; static std::string FormatResult (AAX_Result inResult)<br/></p>
<p><b>14.171.2 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.171.2.1 ResultError() [1/4]<br/></b></p>
<p>AAX::Exception::ResultError::ResultError (<br/>AAX_Result inWhatResult ) [inline], [explicit]<br/></p>
<p><b>14.171.2.2 ResultError() [2/4]<br/></b></p>
<p>template&lt;class C &gt;<br/>AAX::Exception::ResultError::ResultError (<br/></p>
<p>AAX_Result inWhatResult,<br/>const C &amp; inFunction ) [inline], [explicit]<br/></p>
<p><b>14.171.2.3 ResultError() [3/4]<br/></b></p>
<p>template&lt;class C1 , class C2 &gt;<br/>AAX::Exception::ResultError::ResultError (<br/></p>
<p>AAX_Result inWhatResult,<br/>const C1 &amp; inFunction,<br/>const C2 &amp; inLine ) [inline], [explicit]<br/></p>
<p><b>14.171.2.4 ResultError() [4/4]<br/></b></p>
<p>AAX::Exception::ResultError::ResultError (<br/>const ResultError &amp; inOther ) [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1098 Class Documentation<br/></b></p>
<p><b>14.171.3 Member Function Documentation<br/></b></p>
<p><b>14.171.3.1 FormatResult()<br/></b></p>
<p>static std::string AAX::Exception::ResultError::FormatResult (<br/>AAX_Result inResult ) [inline], [static]<br/></p>
<p>References AAX::AsStringInt32(), and AAX::AsStringResult().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.171.3.2 Result()<br/></b></p>
<p>AAX_Result AAX::Exception::ResultError::Result ( ) const [inline]<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_Exception.h<br/></p>
<p><b>14.172 SAutoArray</b>&lt; <b>T </b>&gt; <b>Struct Template Reference<br/></b></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; SAutoArray ()<br/>&#8226; &#8764;SAutoArray ()<br/>&#8226; void Reset (T &#8727;inData)<br/>&#8226; T &#8727; Get ()<br/></p>
<p><b>14.172.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>14.172.1.1 SAutoArray()<br/></b></p>
<p>template&lt;typename T &gt;<br/>SAutoArray&lt; T &gt;::SAutoArray ( ) [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.173 AAX_ISessionDocument::TempoMap Class Reference 1099<br/></b></p>
<p><b>14.172.1.2 </b>&#8764;<b>SAutoArray()<br/></b></p>
<p>template&lt;typename T &gt;<br/>SAutoArray&lt; T &gt;::&#8764;SAutoArray ( ) [inline]<br/></p>
<p>References SAutoArray&lt; T &gt;::Reset().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>14.172.2 Member Function Documentation<br/></b></p>
<p><b>14.172.2.1 Reset()<br/></b></p>
<p>template&lt;typename T &gt;<br/>void SAutoArray&lt; T &gt;::Reset (<br/></p>
<p>T &#8727; inData ) [inline]<br/></p>
<p>Referenced by SAutoArray&lt; T &gt;::&#8764;SAutoArray().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>14.172.2.2 Get()<br/></b></p>
<p>template&lt;typename T &gt;<br/>T&#8727; SAutoArray&lt; T &gt;::Get ( ) [inline]<br/></p>
<p>The documentation for this struct was generated from the following file:<br/></p>
<p>&#8226; AAX_MIDILogging.cpp<br/></p>
<p><b>14.173 AAX_ISessionDocument::TempoMap Class Reference<br/></b></p>
<p>#include &lt;AAX_ISessionDocument.h&gt;<br/></p>
<p>Inheritance diagram for AAX_ISessionDocument::TempoMap:<br/></p>
<p><b>Public Member Functions<br/></b>&#8226; virtual &#8764;TempoMap ()=default<br/>&#8226; virtual int32_t Size () const =0<br/>&#8226; virtual AAX_CTempoBreakpoint const &#8727; Data () const =0<br/></p>
<p><b>14.173.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1100 Class Documentation<br/></b></p>
<p><b>14.173.1.1 </b>&#8764;<b>TempoMap()<br/></b></p>
<p>virtual AAX_ISessionDocument::TempoMap::&#8764;TempoMap ( ) [virtual], [default]<br/></p>
<p><b>14.173.2 Member Function Documentation<br/></b></p>
<p><b>14.173.2.1 Size()<br/></b></p>
<p>virtual int32_t AAX_ISessionDocument::TempoMap::Size ( ) const [pure virtual]<br/></p>
<p>Implemented in AAX_VSessionDocument::VTempoMap.<br/></p>
<p><b>14.173.2.2 Data()<br/></b></p>
<p>virtual AAX_CTempoBreakpoint const&#8727; AAX_ISessionDocument::TempoMap::Data ( ) const [pure virtual]<br/></p>
<p>Implemented in AAX_VSessionDocument::VTempoMap.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_ISessionDocument.h<br/></p>
<p><b>14.174 AAX_VSessionDocument::VTempoMap Class Reference<br/></b></p>
<p>#include &lt;AAX_VSessionDocument.h&gt;<br/></p>
<p>Inheritance diagram for AAX_VSessionDocument::VTempoMap:<br/></p>
<p>Collaboration diagram for AAX_VSessionDocument::VTempoMap:<br/></p>
<p><b>Public Member Functions<br/></b></p>
<p>&#8226; &#8764;VTempoMap () AAX_OVERRIDE<br/>&#8226; VTempoMap (IACFUnknown &amp;inDataBuffer)<br/>&#8226; int32_t Size () const AAX_OVERRIDE<br/>&#8226; AAX_CTempoBreakpoint const &#8727; Data () const AAX_OVERRIDE<br/></p>
<p><b>14.174.1 Constructor &amp; Destructor Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>14.174 AAX_VSessionDocument::VTempoMap Class Reference 1101<br/></b></p>
<p><b>14.174.1.1 </b>&#8764;<b>VTempoMap()<br/></b></p>
<p>AAX_VSessionDocument::VTempoMap::&#8764;VTempoMap ( )<br/></p>
<p><b>14.174.1.2 VTempoMap()<br/></b></p>
<p>AAX_VSessionDocument::VTempoMap::VTempoMap (<br/>IACFUnknown &amp; inDataBuffer ) [explicit]<br/></p>
<p><b>14.174.2 Member Function Documentation<br/></b></p>
<p><b>14.174.2.1 Size()<br/></b></p>
<p>int32_t AAX_VSessionDocument::VTempoMap::Size ( ) const [virtual]<br/></p>
<p>Implements AAX_ISessionDocument::TempoMap.<br/></p>
<p><b>14.174.2.2 Data()<br/></b></p>
<p>AAX_CTempoBreakpoint const&#8727; AAX_VSessionDocument::VTempoMap::Data ( ) const [virtual]<br/></p>
<p>Implements AAX_ISessionDocument::TempoMap.<br/></p>
<p>The documentation for this class was generated from the following file:<br/></p>
<p>&#8226; AAX_VSessionDocument.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1102 Class Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Chapter 15<br/></b></p>
<p><b>File Documentation<br/></b></p>
<p><b>15.1 AAX.h File Reference<br/></b></p>
<p>#include &lt;stdint.h&gt;<br/>#include &lt;stddef.h&gt;<br/>#include &quot;AAX_PreStructAlignmentHelper.h&quot;<br/>#include &quot;AAX_Push2ByteStructAlignment.h&quot;<br/>#include &quot;AAX_PostStructAlignmentHelper.h&quot;<br/>#include &quot;AAX_PopStructAlignment.h&quot;<br/>#include &quot;AAX_Version.h&quot;<br/>#include &quot;AAX_Enums.h&quot;<br/>#include &quot;AAX_Errors.h&quot;<br/>#include &quot;AAX_Properties.h&quot;<br/></p>
<p><b>15.1.1 Description<br/></b></p>
<p>Various utility definitions for AAX.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; struct AAX_SPlugInChunkHeader<br/>Plug-in chunk header.<br/></p>
<p>&#8226; struct AAX_SPlugInChunk<br/>Plug-in chunk header + data.<br/></p>
<p>&#8226; struct AAX_SPlugInIdentifierTriad<br/>Plug-in Identifier Triad.<br/></p>
<p>&#8226; struct AAX_CMidiPacket<br/>Packet structure for MIDI data.<br/></p>
<p>&#8226; struct AAX_CMidiStream<br/>MIDI stream data structure used by AAX_IMIDINode.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1104 File Documentation<br/></b></p>
<p><b>Macros<br/></b></p>
<p><b>C++ compiler macros<br/></b></p>
<p>&#8226; #define TI_VERSION 0<br/>Preprocessor flag indicating compilation for TI.<br/></p>
<p>&#8226; #define AAX_CPP11_SUPPORT 1<br/>Preprocessor toggle for code which requires C++11 compiler support.<br/></p>
<p><b>C++ keyword macros<br/></b>Use these macros for keywords which may not be supported on all compilers<br/><b>Warning<br/></b></p>
<p>Be careful when using these macros; they are a workaround and the fallback versions of the macros are<br/>not guaranteed to provide identical behavior to the fully-supported versions. Always consider the code<br/>which will be generated in each case!<br/>If your code is protected with PACE Fusion and you are using a PACE SDK prior to v4 then you must<br/>explicitly define AAX_CPP11_SUPPORT 0 in your project's preprocessor settings to avoid encountering<br/>source failover caused by AAX header includes with exotic syntax.<br/></p>
<p>&#8226; #define AAX_OVERRIDE override<br/>override keyword macro<br/></p>
<p>&#8226; #define AAX_FINAL final<br/>final keyword macro<br/></p>
<p>&#8226; #define AAX_DEFAULT_DTOR(X) &#8764;X() = default<br/>&#8226; #define AAX_DEFAULT_DTOR_OVERRIDE(X) &#8764;X() override = default<br/>&#8226; #define AAX_DEFAULT_CTOR(X) X() = default<br/></p>
<p>default keyword macro for a class default constructor<br/>&#8226; #define AAX_DEFAULT_COPY_CTOR(X) X(const X&amp;) = default<br/></p>
<p>default keyword macro for a class copy constructor<br/>&#8226; #define AAX_DEFAULT_ASGN_OPER(X) X&amp; operator=(const X&amp;) = default<br/></p>
<p>default keyword macro for a class assignment operator<br/>&#8226; #define AAX_DELETE(X) X = delete<br/></p>
<p>delete keyword macro<br/>&#8226; #define AAX_DEFAULT_MOVE_CTOR(X) X(X&amp;&amp;) = default<br/></p>
<p>default keyword macro for a class move constructor<br/>&#8226; #define AAX_DEFAULT_MOVE_OPER(X) X&amp; operator=(X&amp;&amp;) = default<br/></p>
<p>default keyword macro for a class move-assignment operator<br/>&#8226; #define AAX_CONSTEXPR constexpr<br/></p>
<p>constexpr keyword macro<br/>&#8226; #define AAX_UNIQUE_PTR(X) std::unique_ptr&lt;X&gt;<br/></p>
<p><b>Pointer definitions<br/></b></p>
<p>&#8226; #define AAXPointer_32bit 1<br/>When AAX_PointerSize == AAXPointer_32bit this is a 32-bit build.<br/></p>
<p>&#8226; #define AAXPointer_64bit 2<br/>When AAX_PointerSize == AAXPointer_64bit this is a 64-bit build.<br/></p>
<p>&#8226; #define AAX_PointerSize AAXPointer_32bit<br/>Use this definition to check the pointer size in the current build.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.1 AAX.h File Reference 1105<br/></b></p>
<p><b>Alignment macros<br/></b></p>
<p>Use these macros to define struct packing alignment for data structures that will be sent across binary or platform<br/>boundaries.<br/>#include AAX_ALIGN_FILE_BEGIN<br/>#include AAX_ALIGN_FILE_HOST<br/>#include AAX_ALIGN_FILE_END<br/></p>
<p>// Structure definition<br/>#include AAX_ALIGN_FILE_BEGIN<br/>#include AAX_ALIGN_FILE_RESET<br/>#include AAX_ALIGN_FILE_END<br/></p>
<p>See the documentation for each macro for individual usage notes and warnings<br/></p>
<p>&#8226; #define AAX_ALIGN_FILE_HOST &quot;AAX_Push2ByteStructAlignment.h&quot;<br/>Macro to set alignment for data structures that are shared with the host.<br/></p>
<p>&#8226; #define AAX_ALIGN_FILE_ALG &quot;AAX_Push8ByteStructAlignment.h&quot;<br/>Macro to set alignment for data structures that are used in the alg.<br/></p>
<p>&#8226; #define AAX_ALIGN_FILE_RESET &quot;AAX_PopStructAlignment.h&quot;<br/>Macro to reset alignment back to default.<br/></p>
<p>&#8226; #define AAX_ALIGN_FILE_BEGIN &quot;AAX_PreStructAlignmentHelper.h&quot;<br/>Wrapper macro used for warning suppression.<br/></p>
<p>&#8226; #define AAX_ALIGN_FILE_END &quot;AAX_PostStructAlignmentHelper.h&quot;<br/>Wrapper macro used for warning suppression.<br/></p>
<p>&#8226; #define AAX_CALLBACK<br/>&#8226; #define AAX_PREPROCESSOR_CONCAT_HELPER(X, Y) X ## Y<br/>&#8226; #define AAX_PREPROCESSOR_CONCAT(X, Y) AAX_PREPROCESSOR_CONCAT_HELPER(X,Y)<br/>&#8226; #define AAX_FIELD_INDEX(aContextType, aMember) ((AAX_CFieldIndex) (offsetof (aContextType, a&#8592;&#8617;<br/></p>
<p>Member) / sizeof (void &#8727;)))<br/>Compute the index used to address a context field.<br/></p>
<p>&#8226; typedef int32_t AAX_CIndex<br/>&#8226; typedef AAX_CIndex AAX_CCount<br/>&#8226; typedef uint8_t AAX_CBoolean<br/></p>
<p>Cross-compiler boolean type used by AAX interfaces.<br/>&#8226; typedef uint32_t AAX_CSelector<br/>&#8226; typedef int64_t AAX_CTimestamp<br/></p>
<p>Time stamp value. Measured against the DAE clock (see AAX_IComponentDescriptor::AddClock() )<br/>&#8226; typedef int64_t AAX_CTimeOfDay<br/></p>
<p>Hardware running clock value. MIDI packet time stamps are measured against this clock. This is actually the same<br/>as TransportCounter, but kept for compatibility.<br/></p>
<p>&#8226; typedef int64_t AAX_CTransportCounter<br/>Offset of samples from transport start. Same as TimeOfDay, but added for new interfaces as TimeOfDay is a confusing<br/>name.<br/></p>
<p>&#8226; typedef float AAX_CSampleRate<br/>Literal sample rate value used by the sample rate field. For AAX_eProperty_SampleRate, use a mask of<br/>AAX_ESampleRateMask.<br/></p>
<p>&#8226; typedef uint32_t AAX_CTypeID<br/>Matches type of OSType used in classic plugins.<br/></p>
<p>&#8226; typedef int32_t AAX_Result<br/>&#8226; typedef int32_t AAX_CPropertyValue<br/></p>
<p>32-bit property values<br/>&#8226; typedef int64_t AAX_CPropertyValue64<br/></p>
<p>64-bit property values<br/>&#8226; typedef AAX_CPropertyValue AAX_CPointerPropertyValue<br/></p>
<p>Pointer-sized property values.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1106 File Documentation<br/></b></p>
<p>&#8226; typedef int32_t AAX_CTargetPlatform<br/>Matches type of target platform.<br/></p>
<p>&#8226; typedef AAX_CIndex AAX_CFieldIndex<br/>Not used by AAX plug-ins (except in AAX_FIELD_INDEX macro)<br/></p>
<p>&#8226; typedef AAX_CSelector AAX_CComponentID<br/>&#8226; typedef AAX_CSelector AAX_CMeterID<br/>&#8226; typedef const char &#8727; AAX_CParamID<br/></p>
<p>Parameter identifier.<br/>&#8226; typedef AAX_CParamID AAX_CPageTableParamID<br/></p>
<p>Parameter identifier used in a page table.<br/>&#8226; typedef const char &#8727; AAX_CEffectID<br/></p>
<p>URL-style Effect identifier. Must be unique among all registered effects in the collection.<br/>&#8226; typedef _acfUID acfUID<br/>&#8226; typedef acfUID AAX_Feature_UID<br/>&#8226; typedef const float &#8727;const &#8727; AAX_CAudioInPort<br/></p>
<p>A cross-platform alignment macro to ensure a data type is aligned properly.<br/>&#8226; typedef float &#8727;const &#8727; AAX_CAudioOutPort<br/></p>
<p>AAX algorithm audio output port data type<br/>&#8226; typedef float &#8727;const AAX_CMeterPort<br/></p>
<p>AAX algorithm meter port data type<br/>&#8226; typedef struct AAX_SPlugInChunkHeader AAX_SPlugInChunkHeader<br/>&#8226; typedef struct AAX_SPlugInChunk AAX_SPlugInChunk<br/>&#8226; typedef struct AAX_SPlugInChunk &#8727; AAX_SPlugInChunkPtr<br/>&#8226; typedef struct AAX_SPlugInIdentifierTriad AAX_SPlugInIdentifierTriad<br/>&#8226; typedef struct AAX_SPlugInIdentifierTriad &#8727; AAX_SPlugInIdentifierTriadPtr<br/>&#8226; AAX_CONSTEXPR size_t kAAX_ParameterIdentifierMaxSize = 32<br/></p>
<p><b>15.1.2 Macro Definition Documentation<br/></b></p>
<p><b>15.1.2.1 TI_VERSION<br/></b></p>
<p>#define TI_VERSION 0<br/></p>
<p>Preprocessor flag indicating compilation for TI.<br/></p>
<p><b>15.1.2.2 AAX_CPP11_SUPPORT<br/></b></p>
<p>#define AAX_CPP11_SUPPORT 1<br/></p>
<p>Preprocessor toggle for code which requires C++11 compiler support.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.1 AAX.h File Reference 1107<br/></b></p>
<p><b>15.1.2.3 AAX_OVERRIDE<br/></b></p>
<p>#define AAX_OVERRIDE override<br/></p>
<p>override keyword macro<br/></p>
<p><b>15.1.2.4 AAX_FINAL<br/></b></p>
<p>#define AAX_FINAL final<br/></p>
<p>final keyword macro<br/></p>
<p><b>15.1.2.5 AAX_DEFAULT_DTOR<br/></b></p>
<p>#define AAX_DEFAULT_DTOR(<br/>X ) &#8764;X() = default<br/></p>
<p><b>15.1.2.6 AAX_DEFAULT_DTOR_OVERRIDE<br/></b></p>
<p>#define AAX_DEFAULT_DTOR_OVERRIDE(<br/>X ) &#8764;X() override = default<br/></p>
<p><b>15.1.2.7 AAX_DEFAULT_CTOR<br/></b></p>
<p>#define AAX_DEFAULT_CTOR(<br/>X ) X() = default<br/></p>
<p>default keyword macro for a class default constructor<br/></p>
<p><b>15.1.2.8 AAX_DEFAULT_COPY_CTOR<br/></b></p>
<p>#define AAX_DEFAULT_COPY_CTOR(<br/>X ) X(const X&amp;) = default<br/></p>
<p>default keyword macro for a class copy constructor<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1108 File Documentation<br/></b></p>
<p><b>15.1.2.9 AAX_DEFAULT_ASGN_OPER<br/></b></p>
<p>#define AAX_DEFAULT_ASGN_OPER(<br/>X ) X&amp; operator=(const X&amp;) = default<br/></p>
<p>default keyword macro for a class assignment operator<br/></p>
<p><b>15.1.2.10 AAX_DELETE<br/></b></p>
<p>#define AAX_DELETE(<br/>X ) X = delete<br/></p>
<p>delete keyword macro<br/></p>
<p><b>Warning<br/></b>The non-C++11 version of this macro assumes public declaration access<br/></p>
<p><b>15.1.2.11 AAX_DEFAULT_MOVE_CTOR<br/></b></p>
<p>#define AAX_DEFAULT_MOVE_CTOR(<br/>X ) X(X&amp;&amp;) = default<br/></p>
<p>default keyword macro for a class move constructor<br/></p>
<p><b>15.1.2.12 AAX_DEFAULT_MOVE_OPER<br/></b></p>
<p>#define AAX_DEFAULT_MOVE_OPER(<br/>X ) X&amp; operator=(X&amp;&amp;) = default<br/></p>
<p>default keyword macro for a class move-assignment operator<br/></p>
<p><b>15.1.2.13 AAX_CONSTEXPR<br/></b></p>
<p>#define AAX_CONSTEXPR constexpr<br/></p>
<p>constexpr keyword macro<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.1 AAX.h File Reference 1109<br/></b></p>
<p><b>15.1.2.14 AAX_UNIQUE_PTR<br/></b></p>
<p>#define AAX_UNIQUE_PTR(<br/>X ) std::unique_ptr&lt;X&gt;<br/></p>
<p><b>15.1.2.15 AAXPointer_32bit<br/></b></p>
<p>#define AAXPointer_32bit 1<br/></p>
<p>When AAX_PointerSize == AAXPointer_32bit this is a 32-bit build.<br/></p>
<p><b>15.1.2.16 AAXPointer_64bit<br/></b></p>
<p>#define AAXPointer_64bit 2<br/></p>
<p>When AAX_PointerSize == AAXPointer_64bit this is a 64-bit build.<br/></p>
<p><b>15.1.2.17 AAX_PointerSize<br/></b></p>
<p>#define AAX_PointerSize AAXPointer_32bit<br/></p>
<p>Use this definition to check the pointer size in the current build.<br/></p>
<p><b>See also<br/></b>AAXPointer_32bit<br/>AAXPointer_64bit<br/></p>
<p><b>15.1.2.18 AAX_ALIGN_FILE_HOST<br/></b></p>
<p>#define AAX_ALIGN_FILE_HOST &quot;AAX_Push2ByteStructAlignment.h&quot;<br/></p>
<p>Macro to set alignment for data structures that are shared with the host.<br/></p>
<p>This macro is used to set alignment for data structures that are part of the AAX ABI. You should not need to use<br/>this macro for any custom data structures in your plug-in.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1110 File Documentation<br/></b></p>
<p><b>15.1.2.19 AAX_ALIGN_FILE_ALG<br/></b></p>
<p>#define AAX_ALIGN_FILE_ALG &quot;AAX_Push8ByteStructAlignment.h&quot;<br/></p>
<p>Macro to set alignment for data structures that are used in the alg.<br/></p>
<p>IMPORTANT: Be very careful to maintain correct data alignment when sending data structures between platforms.<br/></p>
<p><b>Warning<br/></b>&#8226; This macro does not guarantee data alignment compatibility for data structures which include base<br/></p>
<p>classes/structs or virtual functions. The MSVC, GCC and LLVM/clang, and CCS (TI) compilers do not<br/>support data structure cross-compatibility for these types of structures. clang will now present a warning<br/>when these macros are used on any such structures: #pragma ms_struct can not be used<br/>with dynamic classes or structures<br/></p>
<p>&#8226; Struct Member Alignment (/Zp) on Microsoft compilers must be set to a minimum of 8-byte packing in<br/>order for this macro to function properly. For more information, see this MSDN article:<br/></p>
<p>http://msdn.microsoft.com/en-us/library/ms253935.aspx<br/></p>
<p><b>15.1.2.20 AAX_ALIGN_FILE_RESET<br/></b></p>
<p>#define AAX_ALIGN_FILE_RESET &quot;AAX_PopStructAlignment.h&quot;<br/></p>
<p>Macro to reset alignment back to default.<br/></p>
<p><b>15.1.2.21 AAX_ALIGN_FILE_BEGIN<br/></b></p>
<p>#define AAX_ALIGN_FILE_BEGIN &quot;AAX_PreStructAlignmentHelper.h&quot;<br/></p>
<p>Wrapper macro used for warning suppression.<br/></p>
<p>This wrapper is required in llvm 10.0 and later due to the addition of the -Wpragma-pack warning. This is a<br/>useful compiler warning but it is awkward to properly suppress in cases where we are intentionally including only<br/>part of the push/pop sequence in a single file, as with the AAX_ALIGN_FILE_XXX macros.<br/></p>
<p><b>15.1.2.22 AAX_ALIGN_FILE_END<br/></b></p>
<p>#define AAX_ALIGN_FILE_END &quot;AAX_PostStructAlignmentHelper.h&quot;<br/></p>
<p>Wrapper macro used for warning suppression.<br/></p>
<p>This wrapper is required in llvm 10.0 and later due to the addition of the -Wpragma-pack warning. This is a<br/>useful compiler warning but it is awkward to properly suppress in cases where we are intentionally including only<br/>part of the push/pop sequence in a single file, as with the AAX_ALIGN_FILE_XXX macros.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.1 AAX.h File Reference 1111<br/></b></p>
<p><b>15.1.2.23 AAX_CALLBACK<br/></b></p>
<p>#define AAX_CALLBACK<br/></p>
<p><b>15.1.2.24 AAX_PREPROCESSOR_CONCAT_HELPER<br/></b></p>
<p>#define AAX_PREPROCESSOR_CONCAT_HELPER(<br/>X,<br/>Y ) X ## Y<br/></p>
<p><b>15.1.2.25 AAX_PREPROCESSOR_CONCAT<br/></b></p>
<p>#define AAX_PREPROCESSOR_CONCAT(<br/>X,<br/>Y ) AAX_PREPROCESSOR_CONCAT_HELPER(X,Y)<br/></p>
<p><b>15.1.2.26 AAX_FIELD_INDEX<br/></b></p>
<p>#define AAX_FIELD_INDEX(<br/>aContextType,<br/>aMember ) ((AAX_CFieldIndex) (offsetof (aContextType, aMember) / sizeof (void<br/></p>
<p>&#8727;)))<br/></p>
<p>Compute the index used to address a context field.<br/></p>
<p>This macro expands to a constant expression suitable for use in enumerator definitions and case labels so int32_t<br/>as aMember is a constant specifier.<br/></p>
<p><b>Parameters<br/></b>in aContextType The name of context type<br/>in aMember The name or other specifier of a field of that context type<br/></p>
<p><b>15.1.3 Typedef Documentation<br/></b></p>
<p><b>15.1.3.1 AAX_CIndex<br/></b></p>
<p>typedef int32_t AAX_CIndex<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1112 File Documentation<br/></b></p>
<p><b>Todo </b>Not used by AAX plug-ins (except as AAX_CFieldIndex)<br/></p>
<p><b>15.1.3.2 AAX_CCount<br/></b></p>
<p>typedef AAX_CIndex AAX_CCount<br/></p>
<p><b>Todo </b>Not used by AAX plug-ins<br/></p>
<p><b>15.1.3.3 AAX_CBoolean<br/></b></p>
<p>typedef uint8_t AAX_CBoolean<br/></p>
<p>Cross-compiler boolean type used by AAX interfaces.<br/></p>
<p><b>15.1.3.4 AAX_CSelector<br/></b></p>
<p>typedef uint32_t AAX_CSelector<br/></p>
<p><b>Todo </b>Clean up usage; currently used for a variety of ID-related values<br/></p>
<p><b>15.1.3.5 AAX_CTimestamp<br/></b></p>
<p>typedef int64_t AAX_CTimestamp<br/></p>
<p>Time stamp value. Measured against the DAE clock (see AAX_IComponentDescriptor::AddClock() )<br/></p>
<p><b>15.1.3.6 AAX_CTimeOfDay<br/></b></p>
<p>typedef int64_t AAX_CTimeOfDay<br/></p>
<p>Hardware running clock value. MIDI packet time stamps are measured against this clock. This is actually the same<br/>as TransportCounter, but kept for compatibility.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.1 AAX.h File Reference 1113<br/></b></p>
<p><b>15.1.3.7 AAX_CTransportCounter<br/></b></p>
<p>typedef int64_t AAX_CTransportCounter<br/></p>
<p>Offset of samples from transport start. Same as TimeOfDay, but added for new interfaces as TimeOfDay is a<br/>confusing name.<br/></p>
<p><b>15.1.3.8 AAX_CSampleRate<br/></b></p>
<p>typedef float AAX_CSampleRate<br/></p>
<p>Literal sample rate value used by the sample rate field. For AAX_eProperty_SampleRate, use a mask of<br/>AAX_ESampleRateMask.<br/></p>
<p><b>See also<br/></b>sampleRateInMask<br/></p>
<p><b>15.1.3.9 AAX_CTypeID<br/></b></p>
<p>typedef uint32_t AAX_CTypeID<br/></p>
<p>Matches type of OSType used in classic plugins.<br/></p>
<p><b>15.1.3.10 AAX_Result<br/></b></p>
<p>typedef int32_t AAX_Result<br/></p>
<p><b>15.1.3.11 AAX_CPropertyValue<br/></b></p>
<p>typedef int32_t AAX_CPropertyValue<br/></p>
<p>32-bit property values<br/></p>
<p>Use this property value type for all properties unless otherwise specified by the property documentation<br/></p>
<p><b>15.1.3.12 AAX_CPropertyValue64<br/></b></p>
<p>typedef int64_t AAX_CPropertyValue64<br/></p>
<p>64-bit property values<br/></p>
<p>Do not use this value type unless specified explicitly in the property documentation<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1114 File Documentation<br/></b></p>
<p><b>15.1.3.13 AAX_CPointerPropertyValue<br/></b></p>
<p>typedef AAX_CPropertyValue AAX_CPointerPropertyValue<br/></p>
<p>Pointer-sized property values.<br/></p>
<p>Do not use this value type unless specified explicitly in the property documentation<br/></p>
<p><b>15.1.3.14 AAX_CTargetPlatform<br/></b></p>
<p>typedef int32_t AAX_CTargetPlatform<br/></p>
<p>Matches type of target platform.<br/></p>
<p><b>15.1.3.15 AAX_CFieldIndex<br/></b></p>
<p>typedef AAX_CIndex AAX_CFieldIndex<br/></p>
<p>Not used by AAX plug-ins (except in AAX_FIELD_INDEX macro)<br/></p>
<p><b>15.1.3.16 AAX_CComponentID<br/></b></p>
<p>typedef AAX_CSelector AAX_CComponentID<br/></p>
<p><b>Todo </b>Not used by AAX plug-ins<br/></p>
<p><b>15.1.3.17 AAX_CMeterID<br/></b></p>
<p>typedef AAX_CSelector AAX_CMeterID<br/></p>
<p><b>Todo </b>Not used by AAX plug-ins<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.1 AAX.h File Reference 1115<br/></b></p>
<p><b>15.1.3.18 AAX_CParamID<br/></b></p>
<p>typedef const char&#8727; AAX_CParamID<br/></p>
<p>Parameter identifier.<br/></p>
<p><b>Note<br/></b>While this is a string, it must be less than 32 characters in length. (strlen of 31 or less)<br/></p>
<p><b>See also<br/></b>kAAX_ParameterIdentifierMaxSize<br/></p>
<p><b>15.1.3.19 AAX_CPageTableParamID<br/></b></p>
<p>typedef AAX_CParamID AAX_CPageTableParamID<br/></p>
<p>Parameter identifier used in a page table.<br/></p>
<p>May be a parameter ID or a parameter name string depending on the page table formatting. Must be less than 32<br/>characters in length (strlen of 31 or less.)<br/></p>
<p><b>See also<br/></b>Parameter identifiers in the Page Table Guide<br/></p>
<p><b>15.1.3.20 AAX_CEffectID<br/></b></p>
<p>typedef const char&#8727; AAX_CEffectID<br/></p>
<p>URL-style Effect identifier. Must be unique among all registered effects in the collection.<br/></p>
<p><b>15.1.3.21 acfUID<br/></b></p>
<p>typedef _acfUID acfUID<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1116 File Documentation<br/></b></p>
<p><b>15.1.3.22 AAX_Feature_UID<br/></b></p>
<p>typedef acfUID AAX_Feature_UID<br/></p>
<p>Identifier for AAX features<br/></p>
<p>See AAX_IDescriptionHost::AcquireFeatureProperties() and AAX_IFeatureInfo<br/></p>
<p><b>15.1.3.23 AAX_CAudioInPort<br/></b></p>
<p>typedef const float&#8727; const&#8727; AAX_CAudioInPort<br/></p>
<p>A cross-platform alignment macro to ensure a data type is aligned properly.<br/></p>
<p>AAX algorithm audio input port data type<br/></p>
<p>Audio input ports are provided with a pointer to an array of const audio buffers, with one buffer provided per input or<br/>side chain channel.<br/></p>
<p><b>Todo </b>Not used directly by AAX plug-ins<br/></p>
<p><b>15.1.3.24 AAX_CAudioOutPort<br/></b></p>
<p>typedef float&#8727; const&#8727; AAX_CAudioOutPort<br/></p>
<p>AAX algorithm audio output port data type<br/></p>
<p>Audio output ports are provided with a pointer to an array of audio buffers, with one buffer provided per output or<br/>auxiliary output channel.<br/></p>
<p><b>Todo </b>Not used directly by AAX plug-ins<br/></p>
<p><b>15.1.3.25 AAX_CMeterPort<br/></b></p>
<p>typedef float&#8727; const AAX_CMeterPort<br/></p>
<p>AAX algorithm meter port data type<br/></p>
<p>Meter output ports are provided with a pointer to an array of floats, with one float provided per meter tap. The<br/>algorithm is responsible for setting these to the corresponding per-buffer peak sample values.<br/></p>
<p><b>Todo </b>Not used directly by AAX plug-ins<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.2 AAX_ACFInterface.doxygen File Reference 1117<br/></b></p>
<p><b>15.1.3.26 AAX_SPlugInChunkHeader<br/></b></p>
<p>typedef struct AAX_SPlugInChunkHeader AAX_SPlugInChunkHeader<br/></p>
<p><b>15.1.3.27 AAX_SPlugInChunk<br/></b></p>
<p>typedef struct AAX_SPlugInChunk AAX_SPlugInChunk<br/></p>
<p><b>15.1.3.28 AAX_SPlugInChunkPtr<br/></b></p>
<p>typedef struct AAX_SPlugInChunk &#8727; AAX_SPlugInChunkPtr<br/></p>
<p><b>15.1.3.29 AAX_SPlugInIdentifierTriad<br/></b></p>
<p>typedef struct AAX_SPlugInIdentifierTriad AAX_SPlugInIdentifierTriad<br/></p>
<p><b>15.1.3.30 AAX_SPlugInIdentifierTriadPtr<br/></b></p>
<p>typedef struct AAX_SPlugInIdentifierTriad &#8727; AAX_SPlugInIdentifierTriadPtr<br/></p>
<p><b>15.1.4 Variable Documentation<br/></b></p>
<p><b>15.1.4.1 kAAX_ParameterIdentifierMaxSize<br/></b></p>
<p>AAX_CONSTEXPR size_t kAAX_ParameterIdentifierMaxSize = 32<br/></p>
<p>Maximum size for a AAX_CParamID including the null-terminating character<br/></p>
<p><b>15.2 AAX_ACFInterface.doxygen File Reference<br/></b></p>
<p><b>Classes<br/></b>&#8226; struct _acfUID<br/>&#8226; interface IACFUnknown<br/></p>
<p>COM compatible IUnknown C++ interface.<br/>&#8226; interface IACFDefinition<br/></p>
<p>Publicly inherits from IACFUnknown.This abstract interface is used to indentify all of the plug-in components in the<br/>host.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1118 File Documentation<br/></b></p>
<p><b>Typedefs<br/></b>&#8226; typedef struct _acfUID acfUID<br/></p>
<p>GUID compatible structure for ACF.<br/>&#8226; typedef acfUID acfIID<br/></p>
<p>IID compatible structure for ACF.<br/></p>
<p><b>15.2.1 Typedef Documentation<br/></b></p>
<p><b>15.2.1.1 acfUID<br/></b></p>
<p>acfUID<br/></p>
<p>GUID compatible structure for ACF.<br/></p>
<p><b>15.2.1.2 acfIID<br/></b></p>
<p>acfIID<br/></p>
<p>IID compatible structure for ACF.<br/></p>
<p><b>15.3 AAX_AdditionalFeatures_Algorithm.doxygen File Reference<br/></b></p>
<p><b>15.4 AAX_AdditionalFeatures_AOSandSidechain.doxygen File<br/>Reference<br/></b></p>
<p><b>15.5 AAX_AdditionalFeatures_CurveDisplays.doxygen File Reference<br/></b></p>
<p><b>15.6 AAX_AdditionalFeatures_Hybrid.doxygen File Reference<br/></b></p>
<p><b>15.7 AAX_AdditionalFeatures_Meters.doxygen File Reference<br/></b></p>
<p><b>15.8 AAX_AdditionalFeatures_MIDI.doxygen File Reference<br/></b></p>
<p><b>15.9 AAX_AdditionalFeatures_PropertiesFile.doxygen File Reference<br/></b></p>
<p><b>15.10 AAX_Alignment.h File Reference<br/></b></p>
<p>#include &lt;stddef.h&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.11 AAX_Assert.h File Reference 1119<br/></b></p>
<p><b>15.10.1 Description<br/></b></p>
<p>Alignment malloc and free methods for optimization.<br/></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; AAX<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; void AAX::alignFree (void &#8727;p)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T &#8727; AAX::alignMalloc (int iArraySize, int iAlignment)<br/></p>
<p><b>15.11 AAX_Assert.h File Reference<br/></b></p>
<p>#include &quot;AAX_Enums.h&quot;<br/>#include &quot;AAX_CHostServices.h&quot;<br/></p>
<p><b>15.11.1 Description<br/></b></p>
<p>Declarations for cross-platform AAX_ASSERT, AAX_TRACE and related facilities.<br/></p>
<p>&#8226; AAX_ASSERT( condition ) - If the condition is false triggers some manner of warning, e.g. a dialog in a<br/>developer build or a DigiTrace log in a shipping build. May be used on host or TI.<br/></p>
<p>&#8226; AAX_DEBUGASSERT( condition ) - Variant of AAX_ASSERT which is only active in debug builds of the plug-<br/>in.<br/></p>
<p>&#8226; AAX_TRACE_RELEASE( iPriority, iMessageStr [,params...] ) - Traces a printf- style message to the DigiTrace<br/>log file. Enabled using the DTF_AAXPLUGINS DigiTrace facility.<br/></p>
<p>&#8226; AAX_TRACE( iPriority, iMessageStr [, params...] ) - Variant of AAX_TRACE_RELEASE which only emits logs<br/>in debug builds of the plug-in.<br/></p>
<p>&#8226; AAX_STACKTRACE_RELEASE( iPriority, iMessageStr [,params...] ) - Similar to AAX_TRACE_RELEASE<br/>but prints a stack trace as well as a log message<br/></p>
<p>&#8226; AAX_STACKTRACE( iPriority, iMessageStr [,params...] ) - Variant of AAX_STACKTRACE_RELEASE which<br/>only emits logs in debug builds of the plug-in.<br/></p>
<p>&#8226; AAX_TRACEORSTACKTRACE_RELEASE( iTracePriority, iStackTracePriority, iMessageStr [,params...] ) -<br/>Combination of AAX_TRACE_RELEASE and AAX_STACKTRACE_RELEASE; a stack trace is emitted if<br/>logging is enabled at iStackTracePriority. Otherwise, if logging is enabled at iTracePriority<br/>then emits a log.<br/></p>
<p>For all trace macros:<br/></p>
<p>inPriority is one of<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1120 File Documentation<br/></b></p>
<p>&#8226; kAAX_Trace_Priority_Low<br/></p>
<p>&#8226; kAAX_Trace_Priority_Normal<br/></p>
<p>&#8226; kAAX_Trace_Priority_High<br/></p>
<p>&#8226; kAAX_Trace_Priority_Critical<br/></p>
<p>These correspond to how the trace messages are filtered using DigiTrace.<br/></p>
<p><b>Note<br/></b>Disabling the DTF_AAXPLUGINS facility will slightly reduce the overhead of trace statements and chip com-<br/>munication on HDX systems.<br/></p>
<p>==============================================================================<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define kAAX_Trace_Priority_None AAX_eTracePriorityHost_None<br/>&#8226; #define kAAX_Trace_Priority_Critical AAX_eTracePriorityHost_Critical<br/>&#8226; #define kAAX_Trace_Priority_High AAX_eTracePriorityHost_High<br/>&#8226; #define kAAX_Trace_Priority_Normal AAX_eTracePriorityHost_Normal<br/>&#8226; #define kAAX_Trace_Priority_Low AAX_eTracePriorityHost_Low<br/>&#8226; #define kAAX_Trace_Priority_Lowest AAX_eTracePriorityHost_Lowest<br/>&#8226; #define AAX_TRACE_RELEASE(iPriority, ...)<br/></p>
<p>Print a trace statement to the log.<br/>&#8226; #define AAX_STACKTRACE_RELEASE(iPriority, ...)<br/></p>
<p>Print a stack trace statement to the log.<br/>&#8226; #define AAX_TRACEORSTACKTRACE_RELEASE(iTracePriority, iStackTracePriority, ...)<br/></p>
<p>Print a trace statement with an optional stack trace to the log.<br/>&#8226; #define AAX_ASSERT(condition)<br/></p>
<p>Asserts that a condition is true and logs an error if the condition is false.<br/>&#8226; #define AAX_DEBUGASSERT(condition) do { ; } while (0)<br/></p>
<p>Asserts that a condition is true and logs an error if the condition is false (debug plug-in builds only)<br/>&#8226; #define AAX_TRACE(iPriority, ...) do { ; } while (0)<br/></p>
<p>Print a trace statement to the log (debug plug-in builds only)<br/>&#8226; #define AAX_STACKTRACE(iPriority, ...) do { ; } while (0)<br/></p>
<p>Print a stack trace statement to the log (debug builds only)<br/>&#8226; #define AAX_TRACEORSTACKTRACE(iTracePriority, iStackTracePriority, ...) do { ; } while (0)<br/></p>
<p>Print a trace statement with an optional stack trace to the log (debug builds only)<br/></p>
<p><b>Typedefs<br/></b></p>
<p>&#8226; typedef AAX_ETracePriorityHost AAX_ETracePriority<br/></p>
<p><b>15.11.2 Macro Definition Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.11 AAX_Assert.h File Reference 1121<br/></b></p>
<p><b>15.11.2.1 kAAX_Trace_Priority_None<br/></b></p>
<p>#define kAAX_Trace_Priority_None AAX_eTracePriorityHost_None<br/></p>
<p><b>15.11.2.2 kAAX_Trace_Priority_Critical<br/></b></p>
<p>#define kAAX_Trace_Priority_Critical AAX_eTracePriorityHost_Critical<br/></p>
<p><b>15.11.2.3 kAAX_Trace_Priority_High<br/></b></p>
<p>#define kAAX_Trace_Priority_High AAX_eTracePriorityHost_High<br/></p>
<p><b>15.11.2.4 kAAX_Trace_Priority_Normal<br/></b></p>
<p>#define kAAX_Trace_Priority_Normal AAX_eTracePriorityHost_Normal<br/></p>
<p><b>15.11.2.5 kAAX_Trace_Priority_Low<br/></b></p>
<p>#define kAAX_Trace_Priority_Low AAX_eTracePriorityHost_Low<br/></p>
<p><b>15.11.2.6 kAAX_Trace_Priority_Lowest<br/></b></p>
<p>#define kAAX_Trace_Priority_Lowest AAX_eTracePriorityHost_Lowest<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1122 File Documentation<br/></b></p>
<p><b>15.11.2.7 AAX_TRACE_RELEASE<br/></b></p>
<p>#define AAX_TRACE_RELEASE(<br/>iPriority,<br/>... )<br/></p>
<p><b>Value:<br/></b>{ \<br/></p>
<p>AAX_CHostServices::Trace ( iPriority, __VA_ARGS__ ); \<br/>};<br/></p>
<p>Print a trace statement to the log.<br/></p>
<p>Use this macro to print a trace statement to the log file. This macro will be included in all builds of the plug-in.<br/></p>
<p><b>Notes<br/></b></p>
<p>&#8226; This macro is compatible with bost host and embedded (AAX DSP) environments<br/></p>
<p>&#8226; Subject to a total line limit of 256 chars<br/></p>
<p><b>Usage </b>Each invocation of this macro takes a trace priority and a printf-style logging string.<br/></p>
<p>Because output from this macro will be enabled on end users' systems under certain tracing configurations, logs<br/>should always be formatted with some standard information to avoid confusion between logs from different plug-ins.<br/>This is the recommended formatting for AAX_TRACE_RELEASE logs:<br/></p>
<p>[Manufacturer name] [Plug-in name] [Plug-in version][logging text (indented)]<br/></p>
<p>For example:<br/>AAX_TRACE_RELEASE(kAAX_Trace_Priority_Normal, &quot;%s %s %s;\tMy float: %f, My C-string: %s&quot;,<br/></p>
<p>&quot;MyCompany&quot;, &quot;MyPlugIn&quot;, &quot;1.0.2&quot;, myFloat, myCString);<br/></p>
<p><b>See also<br/></b>DigiTrace Guide<br/></p>
<p><b>15.11.2.8 AAX_STACKTRACE_RELEASE<br/></b></p>
<p>#define AAX_STACKTRACE_RELEASE(<br/>iPriority,<br/>... )<br/></p>
<p><b>Value:<br/></b>{ \<br/></p>
<p>AAX_CHostServices::StackTrace ( iPriority, iPriority, __VA_ARGS__ ); \<br/>};<br/></p>
<p>Print a stack trace statement to the log.<br/></p>
<p><b>See also<br/></b>AAX_TRACE_RELEASE<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.11 AAX_Assert.h File Reference 1123<br/></b></p>
<p><b>15.11.2.9 AAX_TRACEORSTACKTRACE_RELEASE<br/></b></p>
<p>#define AAX_TRACEORSTACKTRACE_RELEASE(<br/>iTracePriority,<br/>iStackTracePriority,<br/>... )<br/></p>
<p><b>Value:<br/></b>{ \<br/></p>
<p>AAX_CHostServices::StackTrace ( iTracePriority, iStackTracePriority, __VA_ARGS__ ); \<br/>};<br/></p>
<p>Print a trace statement with an optional stack trace to the log.<br/></p>
<p><b>Parameters<br/></b>in iTracePriority The log priority at which the trace statement will be printed<br/>in iStackTracePriority The log priority at which the stack trace will be printed<br/></p>
<p><b>See also<br/></b>AAX_TRACE_RELEASE<br/></p>
<p><b>15.11.2.10 AAX_ASSERT<br/></b></p>
<p>#define AAX_ASSERT(<br/>condition )<br/></p>
<p><b>Value:<br/></b>{ \<br/></p>
<p>if( ! ( condition ) ) { \<br/>AAX_CHostServices::HandleAssertFailure( __FILE__, __LINE__, #condition,<br/></p>
<p>(int32_t)AAX_eAssertFlags_Log ); \<br/>} \<br/></p>
<p>};<br/></p>
<p>Asserts that a condition is true and logs an error if the condition is false.<br/></p>
<p><b>Notes<br/></b></p>
<p>&#8226; This macro will be compiled out of release builds.<br/></p>
<p>&#8226; This macro is compatible with bost host and embedded (AAX DSP) environments.<br/></p>
<p><b>Usage </b>Each invocation of this macro takes a single argument, which is interpreted as a bool.<br/>AAX_ASSERT(desiredValue == variableUnderTest);<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1124 File Documentation<br/></b></p>
<p><b>15.11.2.11 AAX_DEBUGASSERT<br/></b></p>
<p>#define AAX_DEBUGASSERT(<br/>condition ) do { ; } while (0)<br/></p>
<p>Asserts that a condition is true and logs an error if the condition is false (debug plug-in builds only)<br/></p>
<p><b>See also<br/></b>AAX_ASSERT<br/></p>
<p><b>15.11.2.12 AAX_TRACE<br/></b></p>
<p>#define AAX_TRACE(<br/>iPriority,<br/>... ) do { ; } while (0)<br/></p>
<p>Print a trace statement to the log (debug plug-in builds only)<br/>Use this macro to print a trace statement to the log file from debug builds of a plug-in.<br/><b>Notes<br/></b></p>
<p>&#8226; This macro will be compiled out of release builds<br/>&#8226; This macro is compatible with bost host and embedded (AAX DSP) environments<br/>&#8226; Subject to a total line limit of 256 chars<br/></p>
<p><b>Usage </b>Each invocation of this macro takes a trace priority and a printf-style logging string. For example:<br/>AAX_TRACE(kAAX_Trace_Priority_Normal, &quot;My float: %f, My C-string: %s&quot;, myFloat, myCString);<br/></p>
<p><b>See also<br/></b>DigiTrace Guide<br/></p>
<p><b>15.11.2.13 AAX_STACKTRACE<br/></b></p>
<p>#define AAX_STACKTRACE(<br/>iPriority,<br/>... ) do { ; } while (0)<br/></p>
<p>Print a stack trace statement to the log (debug builds only)<br/></p>
<p><b>See also<br/></b>AAX_TRACE<br/></p>
<p><b>15.11.2.14 AAX_TRACEORSTACKTRACE<br/></b></p>
<p>#define AAX_TRACEORSTACKTRACE(<br/>iTracePriority,<br/>iStackTracePriority,<br/>... ) do { ; } while (0)<br/></p>
<p>Print a trace statement with an optional stack trace to the log (debug builds only)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.12 AAX_Atomic.h File Reference 1125<br/></b></p>
<p><b>Parameters<br/></b>in iTracePriority The log priority at which the trace statement will be printed<br/>in iStackTracePriority The log priority at which the stack trace will be printed<br/></p>
<p><b>See also<br/></b>AAX_TRACE<br/></p>
<p><b>15.11.3 Typedef Documentation<br/></b></p>
<p><b>15.11.3.1 AAX_ETracePriority<br/></b></p>
<p>typedef AAX_ETracePriorityHost AAX_ETracePriority<br/></p>
<p><b>15.12 AAX_Atomic.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &lt;stdint.h&gt;<br/></p>
<p><b>15.12.1 Description<br/></b></p>
<p>Atomic operation utilities.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_ATOMIC_H_<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; uint32_t AAX_CALLBACK AAX_Atomic_IncThenGet_32 (uint32_t &amp;ioData)<br/>Increments a 32-bit value and returns the result.<br/></p>
<p>&#8226; uint32_t AAX_CALLBACK AAX_Atomic_DecThenGet_32 (uint32_t &amp;ioData)<br/>Decrements a 32-bit value and returns the result.<br/></p>
<p>&#8226; uint32_t AAX_CALLBACK AAX_Atomic_Exchange_32 (volatile uint32_t &amp;ioValue, uint32_t inExchange&#8592;&#8617;<br/>Value)<br/></p>
<p>Return the original value of ioValue and then set it to inExchangeValue.<br/>&#8226; uint64_t AAX_CALLBACK AAX_Atomic_Exchange_64 (volatile uint64_t &amp;ioValue, uint64_t inExchange&#8592;&#8617;<br/></p>
<p>Value)<br/>Return the original value of ioValue and then set it to inExchangeValue.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1126 File Documentation<br/></b></p>
<p>&#8226; template&lt;typename TPointer &gt;<br/>TPointer &#8727;AAX_CALLBACK AAX_Atomic_Exchange_Pointer (TPointer &#8727;&amp;ioValue, TPointer &#8727;inExchange&#8592;&#8617;<br/>Value)<br/></p>
<p>Perform an exchange operation on a pointer value.<br/>&#8226; bool AAX_CALLBACK AAX_Atomic_CompareAndExchange_32 (volatile uint32_t &amp;ioValue, uint32_t in&#8592;&#8617;<br/></p>
<p>CompareValue, uint32_t inExchangeValue)<br/>Perform a compare and exchange operation on a 32-bit value.<br/></p>
<p>&#8226; bool AAX_CALLBACK AAX_Atomic_CompareAndExchange_64 (volatile uint64_t &amp;ioValue, uint64_t in&#8592;&#8617;<br/>CompareValue, uint64_t inExchangeValue)<br/></p>
<p>Perform a compare and exchange operation on a 64-bit value.<br/>&#8226; template&lt;typename TPointer &gt;<br/></p>
<p>bool AAX_CALLBACK AAX_Atomic_CompareAndExchange_Pointer (TPointer &#8727;&amp;ioValue, TPointer &#8727;in&#8592;&#8617;<br/>CompareValue, TPointer &#8727;inExchangeValue)<br/></p>
<p>Perform a compare and exchange operation on a pointer value.<br/>&#8226; template&lt;typename TPointer &gt;<br/></p>
<p>TPointer &#8727;AAX_CALLBACK AAX_Atomic_Load_Pointer (TPointer const &#8727;const volatile &#8727;inValue)<br/>Atomically loads a pointer value.<br/></p>
<p><b>15.12.2 Macro Definition Documentation<br/></b></p>
<p><b>15.12.2.1 AAX_ATOMIC_H_<br/></b></p>
<p>#define AAX_ATOMIC_H_<br/></p>
<p><b>15.12.3 Function Documentation<br/></b></p>
<p><b>15.12.3.1 AAX_Atomic_IncThenGet_32()<br/></b></p>
<p>uint32_t AAX_CALLBACK AAX_Atomic_IncThenGet_32 (<br/>uint32_t &amp; ioData )<br/></p>
<p>Increments a 32-bit value and returns the result.<br/></p>
<p><b>15.12.3.2 AAX_Atomic_DecThenGet_32()<br/></b></p>
<p>uint32_t AAX_CALLBACK AAX_Atomic_DecThenGet_32 (<br/>uint32_t &amp; ioData )<br/></p>
<p>Decrements a 32-bit value and returns the result.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.13 AAX_AuxInterface_DirectData.doxygen File Reference 1127<br/></b></p>
<p><b>15.12.3.3 AAX_Atomic_Exchange_32()<br/></b></p>
<p>uint32_t AAX_CALLBACK AAX_Atomic_Exchange_32 (<br/>volatile uint32_t &amp; ioValue,<br/>uint32_t inExchangeValue )<br/></p>
<p>Return the original value of ioValue and then set it to inExchangeValue.<br/></p>
<p>Referenced by AAX_Atomic_Exchange_Pointer().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>15.13 AAX_AuxInterface_DirectData.doxygen File Reference<br/></b></p>
<p><b>15.14 AAX_AuxInterface_HostProcessor.doxygen File Reference<br/></b></p>
<p><b>15.15 AAX_AuxInterface_TaskAgent.doxygen File Reference<br/></b></p>
<p><b>15.16 AAX_BugList.doxygen File Reference<br/></b></p>
<p><b>15.17 AAX_Callbacks.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.17.1 Description<br/></b></p>
<p>AAX callback prototypes and ProcPtr definitions<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_Component&lt; aContextType &gt;<br/></p>
<p>Empty class containing type declarations for the AAX algorithm and associated callbacks.<br/></p>
<p><b>Typedefs<br/></b>&#8226; typedef IACFUnknown &#8727;AAX_CALLBACK &#8727; AAXCreateObjectProc(void)<br/>&#8226; typedef AAX_Component&lt; void &gt;::CProcessProc AAX_CProcessProc<br/></p>
<p>A user-defined callback that AAX calls to process data packets and/or audio.<br/>&#8226; typedef AAX_Component&lt; void &gt;::CPacketAllocator AAX_CPacketAllocator<br/></p>
<p>Used by AAX_SchedulePacket()<br/>&#8226; typedef AAX_Component&lt; void &gt;::CInstanceInitProc AAX_CInstanceInitProc<br/></p>
<p>A user-defined callback that AAX calls to notify the component that an instance is being added or removed.<br/>&#8226; typedef AAX_Component&lt; void &gt;::CBackgroundProc AAX_CBackgroundProc<br/></p>
<p>A user-defined callback that AAX calls in the AAX Idle time.<br/>&#8226; typedef AAX_Component&lt; void &gt;::CInitPrivateDataProc AAX_CInitPrivateDataProc<br/></p>
<p>A user-defined callback to initialize a private data block.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1128 File Documentation<br/></b></p>
<p><b>Enumerations<br/></b>&#8226; enum AAX_CProcPtrID {<br/></p>
<p>kAAX_ProcPtrID_Create_EffectParameters = 0 ,<br/>kAAX_ProcPtrID_Create_EffectGUI = 1 ,<br/>kAAX_ProcPtrID_Create_HostProcessor = 3 ,<br/>kAAX_ProcPtrID_Create_EffectDirectData = 5 ,<br/>kAAX_ProcPtrID_Create_TaskAgent = 6 ,<br/>kAAX_ProcPtrID_Create_SessionDocumentClient = 7 }<br/></p>
<p><b>15.17.2 Typedef Documentation<br/></b></p>
<p><b>15.17.2.1 AAXCreateObjectProc<br/></b></p>
<p>typedef IACFUnknown&#8727; AAX_CALLBACK&#8727; AAXCreateObjectProc(void)<br/></p>
<p><b>15.17.2.2 AAX_CProcessProc<br/></b></p>
<p>typedef AAX_Component&lt;void&gt;::CProcessProc AAX_CProcessProc<br/></p>
<p>A user-defined callback that AAX calls to process data packets and/or audio.<br/></p>
<p><b>iContextPtrsBegin<br/></b>A vector of context pointers. Each element points to the context for one instance of this component. i&#8592;&#8617;<br/>ContextPtrsEnd gives the upper bound of the vector and (inContextPtrsEnd - inContext&#8592;&#8617;<br/>PtrsBegin) gives the count.<br/></p>
<p><b>iContextPtrsEnd<br/></b>The upper bound of the vector at iContextPtrsBegin. (inContextPtrsEnd - iContext&#8592;&#8617;<br/>PtrsBegin) gives the count of this vector.<br/></p>
<p>The instance vector was originally NULL-terminated in earlier versions of this API. However, the STL-style begin/end<br/>pattern was suggested as a more general representation that could, for instance, allow a vector to be split for parallel<br/>processing.<br/></p>
<p><b>15.17.2.3 AAX_CPacketAllocator<br/></b></p>
<p>typedef AAX_Component&lt;void&gt;::CPacketAllocator AAX_CPacketAllocator<br/></p>
<p>Used by AAX_SchedulePacket()<br/></p>
<p><b>Deprecated<br/></b></p>
<p>A AAX_CProcessProc that calls AAX_SchedulePacket() must include a AAX_CPacketAllocator field in its context<br/>and register that field with AAX. AAX will then populate that field with a AAX_CPacketAllocator to pass to AAX_&#8592;&#8617;<br/>SchedulePacket().<br/></p>
<p><b>See also<br/></b>AAX_SchedulePacket()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.17 AAX_Callbacks.h File Reference 1129<br/></b></p>
<p><b>15.17.2.4 AAX_CInstanceInitProc<br/></b></p>
<p>typedef AAX_Component&lt;void&gt;::CInstanceInitProc AAX_CInstanceInitProc<br/></p>
<p>A user-defined callback that AAX calls to notify the component that an instance is being added or removed.<br/></p>
<p>This optional callback allows the component to keep per-instance data. It's called before the instance appears in<br/>the list supplied to CProcessProc, and then after the instance is removed from the list.<br/></p>
<p><b>iInstanceContextPtr<br/></b>A pointer to the context data structure of the instance being added or removed from the processing list.<br/></p>
<p><b>iAction<br/></b>Indicates the action that triggered the init callback, e.g. whether the instance is being added or removed.<br/></p>
<p><b>Return values<br/></b>Should return 0 on success, anything else on failure. Failure will prevent the instance from being created.<br/></p>
<p><b>15.17.2.5 AAX_CBackgroundProc<br/></b></p>
<p>typedef AAX_Component&lt;void&gt;::CBackgroundProc AAX_CBackgroundProc<br/></p>
<p>A user-defined callback that AAX calls in the AAX Idle time.<br/></p>
<p>This optional callback allows the component to do background processing in whatever manner the plug-in developer<br/>desires<br/></p>
<p><b>Return values<br/></b>Should return 0 on success, anything else on failure. Failure will cause the AAX host to signal an error up the<br/></p>
<p>callchain.<br/></p>
<p><b>15.17.2.6 AAX_CInitPrivateDataProc<br/></b></p>
<p>typedef AAX_Component&lt;void&gt;::CInitPrivateDataProc AAX_CInitPrivateDataProc<br/></p>
<p>A user-defined callback to initialize a private data block.<br/></p>
<p><b>Deprecated<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1130 File Documentation<br/></b></p>
<p>A component that requires private data supplies AAX_CInitPrivateDataProc callbacks to set its private data to the<br/>state it should be in at the start of audio. The component first declares one or more pointers to private data in<br/>its context. It then registers each such field with AAX along with its data size, various other attributes, and a<br/>AAX_CInitPrivateDataProc. The AAX_CInitPrivateDataProc always runs on the host system, not the DSP. AAX<br/>allocates storage for each private data block and calls its associated AAX_CInitPrivateDataProc to initialize it. If the<br/>component's AAX_CProcessProc runs on external hardware, AAX initializes private data blocks on the host system<br/>and copies them to the remote system.<br/></p>
<p><b>See also<br/></b>alg_pd_init<br/></p>
<p><b>inFieldIndex<br/></b>The port ID of the block to be initialized, as generated by AAX_FIELD_INDEX(). A component can register<br/>a separate AAX_CInitPrivateDataProc for each of its private data blocks, or it can use fewer functions that<br/>switch on inFieldIndex.<br/></p>
<p><b>inNewBlock<br/></b>A pointer to the block to be initialized. If the component runs externally, AAX will copy this block to the remote<br/>system after it is initialized.<br/></p>
<p><b>inSize<br/></b>The size of the block to be initialized. If a component has multiple private blocks that only need to be zeroed<br/>out, say, it can use a single AAX_CInitPrivateDataProc for all of these blocks that zeroes them out according<br/>to inSize.<br/></p>
<p><b>inController<br/></b>A pointer to the current Effect instance's AAX_IController.<br/></p>
<p><b>Note<br/></b>Do not directly reference data from this interface when populating iNewBlock. The data in this block must<br/>be fully self-contained to ensure portability to a new device or memory space.<br/></p>
<p><b>Deprecated<br/></b></p>
<p><b>15.17.3 Enumeration Type Documentation<br/></b></p>
<p><b>15.17.3.1 AAX_CProcPtrID<br/></b></p>
<p>enum AAX_CProcPtrID<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.18 AAX_CArrayDataBuffer.h File Reference 1131<br/></b></p>
<p><b>Enumerator<br/></b>kAAX_ProcPtrID_Create_EffectParameters AAX_IEffectParameters creation procedure<br/></p>
<p>kAAX_ProcPtrID_Create_EffectGUI AAX_IEffectGUI creation procedure<br/>kAAX_ProcPtrID_Create_HostProcessor AAX_IHostProcessor creation procedure<br/></p>
<p>kAAX_ProcPtrID_Create_EffectDirectData AAX_IEffectDirectData creation procedure, used by<br/>plug-ins that want direct access to their alg memory<br/></p>
<p>kAAX_ProcPtrID_Create_TaskAgent AAX_ITaskAgent creation procedure, used by plug-ins<br/>that want to process task requests made by the host.<br/></p>
<p>kAAX_ProcPtrID_Create_SessionDocumentClient AAX_ISessionDocumentClient creation procedure<br/></p>
<p><b>15.18 AAX_CArrayDataBuffer.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDataBuffer.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;string&gt;<br/>#include &lt;limits&gt;<br/>#include &lt;type_traits&gt;<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CArrayDataBufferOfType&lt; T, D &gt;<br/></p>
<p>A convenience class for array data buffers.<br/>&#8226; class AAX_CArrayDataBuffer&lt; D &gt;<br/></p>
<p>A convenience class for array data buffers.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_CArrayDataBuffer_H<br/></p>
<p><b>15.18.1 Macro Definition Documentation<br/></b></p>
<p><b>15.18.1.1 AAX_CArrayDataBuffer_H<br/></b></p>
<p>#define AAX_CArrayDataBuffer_H<br/></p>
<p><b>15.19 AAX_CAtomicQueue.h File Reference<br/></b></p>
<p>#include &quot;AAX_IPointerQueue.h&quot;<br/>#include &quot;AAX_Atomic.h&quot;<br/>#include &quot;AAX_CMutex.h&quot;<br/>#include &lt;cstring&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1132 File Documentation<br/></b></p>
<p><b>15.19.1 Description<br/></b></p>
<p>Atomic, non-blocking queue.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CAtomicQueue&lt; T, S &gt;<br/></p>
<p><b>15.20 AAX_CAutoreleasePool.h File Reference<br/></b></p>
<p><b>15.20.1 Description<br/></b></p>
<p>Autorelease pool helper utility.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CAutoreleasePool<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define _AAX_CAUTORELEASEPOOL_H_<br/></p>
<p><b>15.20.2 Macro Definition Documentation<br/></b></p>
<p><b>15.20.2.1 _AAX_CAUTORELEASEPOOL_H_<br/></b></p>
<p>#define _AAX_CAUTORELEASEPOOL_H_<br/></p>
<p><b>15.21 AAX_CBinaryDisplayDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDisplayDelegate.h&quot;<br/>#include &quot;AAX_CString.h&quot;<br/>#include &lt;vector&gt;<br/>#include &lt;algorithm&gt;<br/></p>
<p><b>15.21.1 Description<br/></b></p>
<p>A binary display delegate.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.22 AAX_CBinaryTaperDelegate.h File Reference 1133<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_CBinaryDisplayDelegate&lt; T &gt;<br/></p>
<p>A binary display format conforming to AAX_IDisplayDelegate.<br/></p>
<p><b>15.22 AAX_CBinaryTaperDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_ITaperDelegate.h&quot;<br/></p>
<p><b>15.22.1 Description<br/></b></p>
<p>A binary taper delegate.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CBinaryTaperDelegate&lt; T &gt;<br/></p>
<p>A binary taper conforming to AAX_ITaperDelegate.<br/></p>
<p><b>15.23 AAX_CChunkDataParser.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_CString.h&quot;<br/>#include &lt;vector&gt;<br/></p>
<p><b>15.23.1 Description<br/></b></p>
<p>Parser utility for plugin chunks.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CChunkDataParser<br/></p>
<p>Parser utility for plugin chunks.<br/>&#8226; struct AAX_CChunkDataParser::DataValue<br/></p>
<p><b>Namespaces<br/></b>&#8226; AAX_ChunkDataParserDefs<br/></p>
<p>Constants used by ChunkDataParser class.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_CHUNKDATAPARSER_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1134 File Documentation<br/></b></p>
<p><b>Variables<br/></b>&#8226; const int32_t AAX_ChunkDataParserDefs::FLOAT_TYPE = 1<br/>&#8226; const char AAX_ChunkDataParserDefs::FLOAT_STRING_IDENTIFIER [ ] = &quot;f_&quot;<br/>&#8226; const int32_t AAX_ChunkDataParserDefs::LONG_TYPE = 2<br/>&#8226; const char AAX_ChunkDataParserDefs::LONG_STRING_IDENTIFIER [ ] = &quot;l_&quot;<br/>&#8226; const int32_t AAX_ChunkDataParserDefs::DOUBLE_TYPE = 3<br/>&#8226; const char AAX_ChunkDataParserDefs::DOUBLE_STRING_IDENTIFIER [ ] = &quot;d_&quot;<br/>&#8226; const size_t AAX_ChunkDataParserDefs::DOUBLE_TYPE_SIZE = 8<br/>&#8226; const size_t AAX_ChunkDataParserDefs::DOUBLE_TYPE_INCR = 8<br/>&#8226; const int32_t AAX_ChunkDataParserDefs::SHORT_TYPE = 4<br/>&#8226; const char AAX_ChunkDataParserDefs::SHORT_STRING_IDENTIFIER [ ] = &quot;s_&quot;<br/>&#8226; const size_t AAX_ChunkDataParserDefs::SHORT_TYPE_SIZE = 2<br/>&#8226; const size_t AAX_ChunkDataParserDefs::SHORT_TYPE_INCR = 4<br/>&#8226; const int32_t AAX_ChunkDataParserDefs::STRING_TYPE = 5<br/>&#8226; const char AAX_ChunkDataParserDefs::STRING_STRING_IDENTIFIER [ ] = &quot;r_&quot;<br/>&#8226; const size_t AAX_ChunkDataParserDefs::MAX_STRINGDATA_LENGTH = 255<br/>&#8226; const size_t AAX_ChunkDataParserDefs::DEFAULT32BIT_TYPE_SIZE = 4<br/>&#8226; const size_t AAX_ChunkDataParserDefs::DEFAULT32BIT_TYPE_INCR = 4<br/>&#8226; const size_t AAX_ChunkDataParserDefs::STRING_IDENTIFIER_SIZE = 2<br/>&#8226; const int32_t AAX_ChunkDataParserDefs::NAME_NOT_FOUND = -1<br/>&#8226; const size_t AAX_ChunkDataParserDefs::MAX_NAME_LENGTH = 255<br/>&#8226; const int32_t AAX_ChunkDataParserDefs::BUILD_DATA_FAILED = -333<br/>&#8226; const int32_t AAX_ChunkDataParserDefs::HEADER_SIZE = 4<br/>&#8226; const int32_t AAX_ChunkDataParserDefs::VERSION_ID_1 = 0x01010101<br/></p>
<p><b>15.23.2 Macro Definition Documentation<br/></b></p>
<p><b>15.23.2.1 AAX_CHUNKDATAPARSER_H<br/></b></p>
<p>#define AAX_CHUNKDATAPARSER_H<br/></p>
<p><b>15.24 AAX_CDecibelDisplayDelegateDecorator.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDisplayDelegateDecorator.h&quot;<br/>#include &lt;cmath&gt;<br/></p>
<p><b>15.24.1 Description<br/></b></p>
<p>A decibel display delegate.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>A percent decorator conforming to AAX_IDisplayDelegateDecorator.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.25 AAX_CEffectDirectData.h File Reference 1135<br/></b></p>
<p><b>15.25 AAX_CEffectDirectData.h File Reference<br/></b></p>
<p>#include &quot;AAX_IEffectDirectData.h&quot;<br/></p>
<p><b>15.25.1 Description<br/></b></p>
<p>A default implementation of the AAX_IEffectDirectData interface.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CEffectDirectData<br/></p>
<p>Default implementation of the AAX_IEffectDirectData interface.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_CEFFECTDIRECTDATA_H<br/></p>
<p><b>15.25.2 Macro Definition Documentation<br/></b></p>
<p><b>15.25.2.1 AAX_CEFFECTDIRECTDATA_H<br/></b></p>
<p>#define AAX_CEFFECTDIRECTDATA_H<br/></p>
<p><b>15.26 AAX_CEffectGUI.h File Reference<br/></b></p>
<p>#include &quot;AAX_IEffectGUI.h&quot;<br/>#include &quot;AAX_IACFEffectParameters.h&quot;<br/>#include &lt;string&gt;<br/>#include &lt;vector&gt;<br/>#include &lt;map&gt;<br/>#include &lt;memory&gt;<br/></p>
<p><b>15.26.1 Description<br/></b></p>
<p>A default implementation of the AAX_IEffectGUI interface.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CEffectGUI<br/></p>
<p>Default implementation of the AAX_IEffectGUI interface.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1136 File Documentation<br/></b></p>
<p><b>15.27 AAX_CEffectParameters.h File Reference<br/></b></p>
<p>#include &quot;AAX_IEffectParameters.h&quot;<br/>#include &quot;AAX_IPageTable.h&quot;<br/>#include &quot;AAX_CString.h&quot;<br/>#include &quot;AAX_CChunkDataParser.h&quot;<br/>#include &quot;AAX_CParameterManager.h&quot;<br/>#include &quot;AAX_CPacketDispatcher.h&quot;<br/>#include &lt;set&gt;<br/>#include &lt;string&gt;<br/>#include &lt;vector&gt;<br/></p>
<p><b>15.27.1 Description<br/></b></p>
<p>A default implementation of the AAX_IeffectParameters interface.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CEffectParameters<br/>Default implementation of the AAX_IEffectParameters interface.<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; int32_t NormalizedToInt32 (double normalizedValue)<br/>&#8226; double Int32ToNormalized (int32_t value)<br/>&#8226; double BoolToNormalized (bool value)<br/></p>
<p><b>Variables<br/></b></p>
<p>&#8226; AAX_CParamID cPreviewID<br/>&#8226; AAX_CParamID cDefaultMasterBypassID<br/></p>
<p><b>15.27.2 Function Documentation<br/></b></p>
<p><b>15.27.2.1 NormalizedToInt32()<br/></b></p>
<p>int32_t NormalizedToInt32 (<br/>double normalizedValue )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.28 AAX_CHostProcessor.h File Reference 1137<br/></b></p>
<p><b>15.27.2.2 Int32ToNormalized()<br/></b></p>
<p>double Int32ToNormalized (<br/>int32_t value )<br/></p>
<p><b>15.27.2.3 BoolToNormalized()<br/></b></p>
<p>double BoolToNormalized (<br/>bool value )<br/></p>
<p><b>15.27.3 Variable Documentation<br/></b></p>
<p><b>15.27.3.1 cPreviewID<br/></b></p>
<p>AAX_CParamID cPreviewID<br/></p>
<p><b>15.27.3.2 cDefaultMasterBypassID<br/></b></p>
<p>AAX_CParamID cDefaultMasterBypassID<br/></p>
<p><b>15.28 AAX_CHostProcessor.h File Reference<br/></b></p>
<p>#include &quot;AAX_IEffectParameters.h&quot;<br/>#include &quot;AAX_IHostProcessor.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>15.28.1 Description<br/></b></p>
<p>Concrete implementation of the AAX_IHostProcessor interface for non-real-time processing.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CHostProcessor<br/>Concrete implementation of the AAX_IHostProcessor interface for non-real-time processing.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1138 File Documentation<br/></b></p>
<p><b>15.29 AAX_CHostServices.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_Enums.h&quot;<br/></p>
<p><b>15.29.1 Description<br/></b></p>
<p>Concrete implementation of the AAX_IHostServices interface.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CHostServices<br/>Method access to a singleton implementation of the AAX_IHostServices interface.<br/></p>
<p><b>15.30 AAX_CLinearTaperDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_ITaperDelegate.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;cmath&gt;<br/></p>
<p><b>15.30.1 Description<br/></b></p>
<p>A linear taper delegate.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;<br/>A linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p><b>15.31 AAX_CLogTaperDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_ITaperDelegate.h&quot;<br/>#include &quot;AAX_UtilsNative.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;cmath&gt;<br/></p>
<p><b>15.31.1 Description<br/></b></p>
<p>A log taper delegate.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.32 AAX_CMonolithicParameters.cpp File Reference 1139<br/></b></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;<br/>A logarithmic taper conforming to AAX_ITaperDelegate.<br/></p>
<p><b>15.32 AAX_CMonolithicParameters.cpp File Reference<br/></b></p>
<p>#include &quot;AAX_CMonolithicParameters.h&quot;<br/>#include &quot;AAX_Exception.h&quot;<br/></p>
<p><b>15.33 AAX_CMonolithicParameters.h File Reference<br/></b></p>
<p>#include &quot;AAX_CEffectParameters.h&quot;<br/>#include &quot;AAX_IEffectDescriptor.h&quot;<br/>#include &quot;AAX_IComponentDescriptor.h&quot;<br/>#include &quot;AAX_IPropertyMap.h&quot;<br/>#include &quot;AAX_CAtomicQueue.h&quot;<br/>#include &quot;AAX_IParameter.h&quot;<br/>#include &quot;AAX_IMIDINode.h&quot;<br/>#include &quot;AAX_IString.h&quot;<br/>#include &lt;set&gt;<br/>#include &lt;list&gt;<br/>#include &lt;utility&gt;<br/></p>
<p><b>15.33.1 Description<br/></b></p>
<p>A convenience class extending AAX_CEffectParameters for monolithic instruments.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; struct AAX_SInstrumentSetupInfo<br/>Information used to describe the instrument.<br/></p>
<p>&#8226; struct AAX_SInstrumentPrivateData<br/>Utility struct for AAX_CMonolithicParameters.<br/></p>
<p>&#8226; struct AAX_SInstrumentRenderInfo<br/>Information used to parameterize AAX_CMonolithicParameters::RenderAudio()<br/></p>
<p>&#8226; class AAX_CMonolithicParameters<br/>Extension of the AAX_CEffectParameters class for monolithic VIs and effects.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define kMaxAdditionalMIDINodes 15<br/>&#8226; #define kMaxAuxOutputStems 32<br/>&#8226; #define kSynchronizedParameterQueueSize 32<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1140 File Documentation<br/></b></p>
<p><b>15.33.2 Macro Definition Documentation<br/></b></p>
<p><b>15.33.2.1 kMaxAdditionalMIDINodes<br/></b></p>
<p>#define kMaxAdditionalMIDINodes 15<br/></p>
<p><b>15.33.2.2 kMaxAuxOutputStems<br/></b></p>
<p>#define kMaxAuxOutputStems 32<br/></p>
<p><b>15.33.2.3 kSynchronizedParameterQueueSize<br/></b></p>
<p>#define kSynchronizedParameterQueueSize 32<br/></p>
<p><b>15.34 AAX_CMutex.h File Reference<br/></b></p>
<p><b>15.34.1 Description<br/></b></p>
<p>Mutex.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CMutex<br/>Mutex with try lock functionality.<br/></p>
<p>&#8226; class AAX_StLock_Guard<br/>Helper class for working with mutex.<br/></p>
<p><b>15.35 AAX_CNumberDisplayDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDisplayDelegate.h&quot;<br/>#include &quot;AAX_CString.h&quot;<br/></p>
<p><b>15.35.1 Description<br/></b></p>
<p>A number display delegate.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.36 AAX_CommonConversions.h File Reference 1141<br/></b></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter &gt;<br/>A numeric display format conforming to AAX_IDisplayDelegate.<br/></p>
<p><b>15.36 AAX_CommonConversions.h File Reference<br/></b></p>
<p>#include &lt;math.h&gt;<br/>#include &quot;AAX.h&quot;<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; double GainToDB (double aGain)<br/>Convert Gain to dB.<br/></p>
<p>&#8226; double DBToGain (double dB)<br/>Convert dB to Gain.<br/></p>
<p>&#8226; double LongToDouble (int32_t aLong)<br/>Convert Long to Double.<br/></p>
<p>&#8226; int32_t DoubleToLong (double aDouble)<br/>convert floating point equivalent back to int32_t<br/></p>
<p>&#8226; int32_t DoubleToDSPCoef (double d, double max=k56kFloatPosMax, double min=k56kFloatNegMax)<br/>Convert Double to DSPCoef.<br/></p>
<p>&#8226; double DSPCoefToDouble (int32_t c, int32_t max=k56kFracPosMax, int32_t min=k56kFracNegMax)<br/>Convert DSPCoef to Double.<br/></p>
<p>&#8226; double ThirtyTwoBitDSPCoefToDouble (int32_t c)<br/>ThirtyTwoBitDSPCoefToDouble.<br/></p>
<p>&#8226; int32_t DoubleTo32BitDSPCoefRnd (double d)<br/>DoubleTo32BitDSPCoefRnd.<br/></p>
<p>&#8226; int32_t DoubleTo32BitDSPCoef (double d)<br/>&#8226; int32_t DoubleToDSPCoefRnd (double d, double max, double min)<br/></p>
<p><b>Variables<br/></b></p>
<p>&#8226; const int32_t k32BitPosMax = 0x7FFFFFFF<br/>&#8226; const int32_t k32BitAbsMax = 0x80000000<br/>&#8226; const int32_t k32BitNegMax = 0x80000000<br/>&#8226; const int32_t k56kFracPosMax = 0x007FFFFF<br/>&#8226; const int32_t k56kFracAbsMax = 0x00800000<br/>&#8226; const int32_t k56kFracHalf = 0x00400000<br/>&#8226; const int32_t k56kFracNegOne = 0xFF800000<br/>&#8226; const int32_t k56kFracNegMax = k56kFracNegOne<br/>&#8226; const int32_t k56kFracZero = 0x00000000<br/>&#8226; const double kOneOver56kFracAbsMax = 1.0/double(k56kFracAbsMax)<br/>&#8226; const double k56kFloatPosMax = double(k56kFracPosMax)/double(k56kFracAbsMax)<br/>&#8226; const double k56kFloatNegMax = -1.0<br/>&#8226; const double kNeg144DB = -144.0<br/>&#8226; const double kNeg144Gain = 6.3095734448019324943436013662234e-8<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1142 File Documentation<br/></b></p>
<p><b>15.36.1 Function Documentation<br/></b></p>
<p><b>15.36.1.1 GainToDB()<br/></b></p>
<p>double GainToDB (<br/>double aGain ) [inline]<br/></p>
<p>Convert Gain to dB.<br/></p>
<p><b>Todo </b>This should be incorporated into parameters' tapers and not called separately<br/></p>
<p>References kNeg144DB.<br/></p>
<p><b>15.36.1.2 DBToGain()<br/></b></p>
<p>double DBToGain (<br/>double dB ) [inline]<br/></p>
<p>Convert dB to Gain.<br/></p>
<p><b>Todo </b>This should be incorporated into parameters' tapers and not called separately<br/></p>
<p><b>15.36.1.3 LongToDouble()<br/></b></p>
<p>double LongToDouble (<br/>int32_t aLong ) [inline]<br/></p>
<p>Convert Long to Double.<br/></p>
<p>LongToDouble: convert 24 bit fixed point in a int32_t to floating point equivalent<br/></p>
<p>References k56kFracNegMax, k56kFracPosMax, and kOneOver56kFracAbsMax.<br/></p>
<p><b>15.36.1.4 DoubleToLong()<br/></b></p>
<p>int32_t DoubleToLong (<br/>double aDouble )<br/></p>
<p>convert floating point equivalent back to int32_t<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.36 AAX_CommonConversions.h File Reference 1143<br/></b></p>
<p><b>15.36.1.5 DoubleToDSPCoef()<br/></b></p>
<p>int32_t DoubleToDSPCoef (<br/>double d,<br/>double max = k56kFloatPosMax,<br/>double min = k56kFloatNegMax ) [inline]<br/></p>
<p>Convert Double to DSPCoef.<br/></p>
<p>References k56kFracAbsMax, k56kFracNegMax, and k56kFracPosMax.<br/></p>
<p>Referenced by DoubleTo32BitDSPCoefRnd().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>15.36.1.6 DSPCoefToDouble()<br/></b></p>
<p>double DSPCoefToDouble (<br/>int32_t c,<br/>int32_t max = k56kFracPosMax,<br/>int32_t min = k56kFracNegMax ) [inline]<br/></p>
<p>Convert DSPCoef to Double.<br/></p>
<p>References k56kFracNegMax, k56kFracPosMax, and kOneOver56kFracAbsMax.<br/></p>
<p>Referenced by ThirtyTwoBitDSPCoefToDouble().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>15.36.1.7 ThirtyTwoBitDSPCoefToDouble()<br/></b></p>
<p>double ThirtyTwoBitDSPCoefToDouble (<br/>int32_t c ) [inline]<br/></p>
<p>ThirtyTwoBitDSPCoefToDouble.<br/></p>
<p>References DSPCoefToDouble(), k32BitNegMax, and k32BitPosMax.<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.36.1.8 DoubleTo32BitDSPCoefRnd()<br/></b></p>
<p>int32_t DoubleTo32BitDSPCoefRnd (<br/>double d ) [inline]<br/></p>
<p>DoubleTo32BitDSPCoefRnd.<br/></p>
<p>References DoubleToDSPCoef(), k32BitNegMax, and k32BitPosMax.<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1144 File Documentation<br/></b></p>
<p><b>15.36.1.9 DoubleTo32BitDSPCoef()<br/></b></p>
<p>int32_t DoubleTo32BitDSPCoef (<br/>double d )<br/></p>
<p><b>15.36.1.10 DoubleToDSPCoefRnd()<br/></b></p>
<p>int32_t DoubleToDSPCoefRnd (<br/>double d,<br/>double max,<br/>double min )<br/></p>
<p><b>15.36.2 Variable Documentation<br/></b></p>
<p><b>15.36.2.1 k32BitPosMax<br/></b></p>
<p>const int32_t k32BitPosMax = 0x7FFFFFFF<br/></p>
<p>Referenced by DoubleTo32BitDSPCoefRnd(), and ThirtyTwoBitDSPCoefToDouble().<br/></p>
<p><b>15.36.2.2 k32BitAbsMax<br/></b></p>
<p>const int32_t k32BitAbsMax = 0x80000000<br/></p>
<p><b>15.36.2.3 k32BitNegMax<br/></b></p>
<p>const int32_t k32BitNegMax = 0x80000000<br/></p>
<p>Referenced by DoubleTo32BitDSPCoefRnd(), and ThirtyTwoBitDSPCoefToDouble().<br/></p>
<p><b>15.36.2.4 k56kFracPosMax<br/></b></p>
<p>const int32_t k56kFracPosMax = 0x007FFFFF<br/></p>
<p>Referenced by DoubleToDSPCoef(), DSPCoefToDouble(), and LongToDouble().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.36 AAX_CommonConversions.h File Reference 1145<br/></b></p>
<p><b>15.36.2.5 k56kFracAbsMax<br/></b></p>
<p>const int32_t k56kFracAbsMax = 0x00800000<br/></p>
<p>Referenced by DoubleToDSPCoef().<br/></p>
<p><b>15.36.2.6 k56kFracHalf<br/></b></p>
<p>const int32_t k56kFracHalf = 0x00400000<br/></p>
<p><b>15.36.2.7 k56kFracNegOne<br/></b></p>
<p>const int32_t k56kFracNegOne = 0xFF800000<br/></p>
<p><b>15.36.2.8 k56kFracNegMax<br/></b></p>
<p>const int32_t k56kFracNegMax = k56kFracNegOne<br/></p>
<p>Referenced by DoubleToDSPCoef(), DSPCoefToDouble(), and LongToDouble().<br/></p>
<p><b>15.36.2.9 k56kFracZero<br/></b></p>
<p>const int32_t k56kFracZero = 0x00000000<br/></p>
<p><b>15.36.2.10 kOneOver56kFracAbsMax<br/></b></p>
<p>const double kOneOver56kFracAbsMax = 1.0/double(k56kFracAbsMax)<br/></p>
<p>Referenced by DSPCoefToDouble(), and LongToDouble().<br/></p>
<p><b>15.36.2.11 k56kFloatPosMax<br/></b></p>
<p>const double k56kFloatPosMax = double(k56kFracPosMax)/double(k56kFracAbsMax)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1146 File Documentation<br/></b></p>
<p><b>15.36.2.12 k56kFloatNegMax<br/></b></p>
<p>const double k56kFloatNegMax = -1.0<br/></p>
<p><b>15.36.2.13 kNeg144DB<br/></b></p>
<p>const double kNeg144DB = -144.0<br/></p>
<p>Referenced by GainToDB().<br/></p>
<p><b>15.36.2.14 kNeg144Gain<br/></b></p>
<p>const double kNeg144Gain = 6.3095734448019324943436013662234e-8<br/></p>
<p><b>15.37 AAX_CommonInterface_Algorithm.doxygen File Reference<br/></b></p>
<p><b>15.38 AAX_CommonInterface_Communication.doxygen File Reference<br/></b></p>
<p><b>15.39 AAX_CommonInterface_DataModel.doxygen File Reference<br/></b></p>
<p><b>15.40 AAX_CommonInterface_Describe.doxygen File Reference<br/></b></p>
<p><b>Functions<br/></b></p>
<p>&#8226; AAX_Result GetEffectDescriptions (AAX_ICollection &#8727;inCollection)<br/>The plug-in's static Description entrypoint.<br/></p>
<p><b>15.41 AAX_CommonInterface_FormatSpecification.doxygen File<br/>Reference<br/></b></p>
<p><b>15.42 AAX_CommonInterface_GUI.doxygen File Reference<br/></b></p>
<p><b>15.43 AAX_Constants.h File Reference<br/></b></p>
<p>#include &lt;cmath&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.43 AAX_Constants.h File Reference 1147<br/></b></p>
<p><b>15.43.1 Description<br/></b></p>
<p>Signal processing constants.<br/></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; AAX<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_CONSTANTS_H<br/></p>
<p><b>Enumerations<br/></b></p>
<p>&#8226; enum AAX::ESampleRates {<br/>AAX::e44100SampleRate = 44100 ,<br/>AAX::e48000SampleRate = 48000 ,<br/>AAX::e88200SampleRate = 88200 ,<br/>AAX::e96000SampleRate = 96000 ,<br/>AAX::e176400SampleRate = 176400 ,<br/>AAX::e192000SampleRate = 192000 }<br/></p>
<p><b>Variables<br/></b></p>
<p>&#8226; const int AAX::cBigEndian =0<br/>&#8226; const int AAX::cLittleEndian =1<br/>&#8226; const double AAX::cPi = 3.1415926535897932384626433832795<br/>&#8226; const double AAX::cTwoPi = 6.2831853071795862319959269370884<br/>&#8226; const double AAX::cHalfPi = 1.5707963267948965579989817342721<br/>&#8226; const double AAX::cQuarterPi = 0.78539816339744827899949086713605<br/>&#8226; const double AAX::cRootTwo = 1.4142135623730950488016887242097<br/>&#8226; const double AAX::cOneOverRootTwo = 0.70710678118654752440084436210485<br/>&#8226; const double AAX::cPos3dB =1.4142135623730950488016887242097<br/>&#8226; const double AAX::cNeg3dB =0.70710678118654752440084436210485<br/>&#8226; const double AAX::cPos6dB =2.0<br/>&#8226; const double AAX::cNeg6dB =0.5<br/>&#8226; const double AAX::cNormalizeLongToAmplitudeOneHalf = 0.00000000023283064365386962890625<br/>&#8226; const double AAX::cNormalizeLongToAmplitudeOne = 1.0/double(1&lt;&lt;31)<br/>&#8226; const double AAX::cMilli =0.001<br/>&#8226; const double AAX::cMicro =0.001&#8727;0.001<br/>&#8226; const double AAX::cNano =0.001&#8727;0.001&#8727;0.001<br/>&#8226; const double AAX::cPico =0.001&#8727;0.001&#8727;0.001&#8727;0.001<br/>&#8226; const double AAX::cKilo =1000.0<br/>&#8226; const double AAX::cMega =1000.0&#8727;1000.0<br/>&#8226; const double AAX::cGiga =1000.0&#8727;1000.0&#8727;1000.0<br/></p>
<p><b>15.43.2 Macro Definition Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1148 File Documentation<br/></b></p>
<p><b>15.43.2.1 AAX_CONSTANTS_H<br/></b></p>
<p>#define AAX_CONSTANTS_H<br/></p>
<p><b>15.44 AAX_CPacketDispatcher.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_IController.h&quot;<br/>#include &quot;AAX_CMutex.h&quot;<br/>#include &lt;string&gt;<br/>#include &lt;map&gt;<br/></p>
<p><b>15.44.1 Description<br/></b></p>
<p>Helper classes related to posting AAX packets and handling parameter update events.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CPacket<br/>Container for packet-related data.<br/></p>
<p>&#8226; struct AAX_IPacketHandler<br/>Callback container used by AAX_CPacketDispatcher.<br/></p>
<p>&#8226; class AAX_CPacketHandler&lt; TWorker &gt;<br/>Callback container used by AAX_CPacketDispatcher.<br/></p>
<p>&#8226; class AAX_CPacketDispatcher<br/>Helper class for managing AAX packet posting.<br/></p>
<p><b>15.45 AAX_CParameter.h File Reference<br/></b></p>
<p>#include &quot;AAX_Assert.h&quot;<br/>#include &quot;AAX_IParameter.h&quot;<br/>#include &quot;AAX_ITaperDelegate.h&quot;<br/>#include &quot;AAX_IDisplayDelegate.h&quot;<br/>#include &quot;AAX_IAutomationDelegate.h&quot;<br/>#include &quot;AAX_CString.h&quot;<br/>#include &lt;cstring&gt;<br/>#include &lt;list&gt;<br/>#include &lt;map&gt;<br/></p>
<p><b>15.45.1 Description<br/></b></p>
<p>Generic implementation of an AAX_IParameter.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.46 AAX_CParameterManager.h File Reference 1149<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_CParameterValue&lt; T &gt;<br/></p>
<p>Concrete implementation of AAX_IParameterValue.<br/>&#8226; class AAX_CParameter&lt; T &gt;<br/></p>
<p>Generic implementation of an AAX_IParameter.<br/>&#8226; class AAX_CStatelessParameter<br/></p>
<p>A stateless parameter implementation.<br/></p>
<p><b>15.46 AAX_CParameterManager.h File Reference<br/></b></p>
<p>#include &quot;AAX_CParameter.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;vector&gt;<br/>#include &lt;map&gt;<br/></p>
<p><b>15.46.1 Description<br/></b></p>
<p>A container object for plug-in parameters.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CParameterManager<br/></p>
<p>A container object for plug-in parameters.<br/></p>
<p><b>15.47 AAX_CPercentDisplayDelegateDecorator.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDisplayDelegateDecorator.h&quot;<br/>#include &lt;cmath&gt;<br/></p>
<p><b>15.47.1 Description<br/></b></p>
<p>A percent display delegate decorator.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CPercentDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>A percent decorator conforming to AAX_IDisplayDelegateDecorator.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_CPERCENTDISPLAYDELEGATEDECORATOR_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1150 File Documentation<br/></b></p>
<p><b>15.47.2 Macro Definition Documentation<br/></b></p>
<p><b>15.47.2.1 AAX_CPERCENTDISPLAYDELEGATEDECORATOR_H<br/></b></p>
<p>#define AAX_CPERCENTDISPLAYDELEGATEDECORATOR_H<br/></p>
<p><b>15.48 AAX_CPieceWiseLinearTaperDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_ITaperDelegate.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;cmath&gt;<br/></p>
<p><b>15.48.1 Description<br/></b></p>
<p>A piece-wise linear taper delegate.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPrecision &gt;<br/>A piece-wise linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p><b>15.49 AAX_CRangeTaperDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_ITaperDelegate.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;cmath&gt;<br/>#include &lt;vector&gt;<br/></p>
<p><b>15.49.1 Description<br/></b></p>
<p>A range taper delegate decorator.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;<br/>A piecewise-linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.50 AAX_CSessionDocumentClient.h File Reference 1151<br/></b></p>
<p><b>15.50 AAX_CSessionDocumentClient.h File Reference<br/></b></p>
<p>#include &quot;AAX_ISessionDocumentClient.h&quot;<br/>#include &lt;memory&gt;<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CSessionDocumentClient<br/></p>
<p>Default implementation of the AAX_ISessionDocumentClient interface.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_CSessionDocumentClient_H<br/></p>
<p><b>15.50.1 Macro Definition Documentation<br/></b></p>
<p><b>15.50.1.1 AAX_CSessionDocumentClient_H<br/></b></p>
<p>#define AAX_CSessionDocumentClient_H<br/></p>
<p><b>15.51 AAX_CStateDisplayDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDisplayDelegate.h&quot;<br/>#include &quot;AAX_CString.h&quot;<br/>#include &lt;vector&gt;<br/></p>
<p><b>15.51.1 Description<br/></b></p>
<p>A state display delegate.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CStateDisplayDelegate&lt; T &gt;<br/></p>
<p>A generic display format conforming to AAX_IDisplayDelegate.<br/></p>
<p><b>15.52 AAX_CStateTaperDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_ITaperDelegate.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;cmath&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1152 File Documentation<br/></b></p>
<p><b>15.52.1 Description<br/></b></p>
<p>A state taper delegate (similar to a linear taper delegate.)<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CStateTaperDelegate&lt; T &gt;<br/>A linear taper conforming to AAX_ITaperDelegate.<br/></p>
<p><b>15.53 AAX_CString.h File Reference<br/></b></p>
<p>#include &quot;AAX_IString.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;string&gt;<br/>#include &lt;map&gt;<br/></p>
<p><b>15.53.1 Description<br/></b></p>
<p>A generic AAX string class with similar functionality to std::string.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CString<br/>A generic AAX string class with similar functionality to std::string<br/></p>
<p>&#8226; class AAX_CStringAbbreviations<br/>Helper class to store a collection of name abbreviations.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_CSTRING_H<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; AAX_CString operator+ (AAX_CString lhs, const AAX_CString &amp;rhs)<br/>&#8226; AAX_CString operator+ (AAX_CString lhs, const char &#8727;rhs)<br/>&#8226; AAX_CString operator+ (const char &#8727;lhs, const AAX_CString &amp;rhs)<br/></p>
<p><b>15.53.2 Macro Definition Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.54 AAX_CStringDataBuffer.h File Reference 1153<br/></b></p>
<p><b>15.53.2.1 AAX_CSTRING_H<br/></b></p>
<p>#define AAX_CSTRING_H<br/></p>
<p><b>15.53.3 Function Documentation<br/></b></p>
<p><b>15.53.3.1 operator+() [1/3]<br/></b></p>
<p>AAX_CString operator+ (<br/>AAX_CString lhs,<br/>const AAX_CString &amp; rhs ) [inline]<br/></p>
<p><b>15.53.3.2 operator+() [2/3]<br/></b></p>
<p>AAX_CString operator+ (<br/>AAX_CString lhs,<br/>const char &#8727; rhs ) [inline]<br/></p>
<p><b>15.53.3.3 operator+() [3/3]<br/></b></p>
<p>AAX_CString operator+ (<br/>const char &#8727; lhs,<br/>const AAX_CString &amp; rhs ) [inline]<br/></p>
<p><b>15.54 AAX_CStringDataBuffer.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDataBuffer.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;string&gt;<br/>#include &lt;limits&gt;<br/>#include &lt;type_traits&gt;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CStringDataBufferOfType&lt; T &gt;<br/>A convenience class for string data buffers.<br/></p>
<p>&#8226; class AAX_CStringDataBuffer<br/>A convenience class for string data buffers.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1154 File Documentation<br/></b></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_CStringDataBuffer_H<br/></p>
<p><b>15.54.1 Macro Definition Documentation<br/></b></p>
<p><b>15.54.1.1 AAX_CStringDataBuffer_H<br/></b></p>
<p>#define AAX_CStringDataBuffer_H<br/></p>
<p><b>15.55 AAX_CStringDisplayDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDisplayDelegate.h&quot;<br/>#include &lt;sstream&gt;<br/>#include &lt;map&gt;<br/></p>
<p><b>15.55.1 Description<br/></b></p>
<p>A string display delegate.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CStringDisplayDelegate&lt; T &gt;<br/>A string, or list, display format conforming to AAX_IDisplayDelegate.<br/></p>
<p><b>15.56 AAX_CTask.h File Reference<br/></b></p>
<p>#include &quot;AAX_IACFTask.h&quot;<br/>#include &quot;CACFUnknown.h&quot;<br/></p>
<p><b>15.56.1 Description<br/></b></p>
<p>A default implementation of the AAX_IACFTask interface.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CTask<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.57 AAX_CTaskAgent.h File Reference 1155<br/></b></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_CTask_H<br/></p>
<p><b>15.56.2 Macro Definition Documentation<br/></b></p>
<p><b>15.56.2.1 AAX_CTask_H<br/></b></p>
<p>#define AAX_CTask_H<br/></p>
<p><b>15.57 AAX_CTaskAgent.h File Reference<br/></b></p>
<p>#include &quot;AAX_ITaskAgent.h&quot;<br/>#include &lt;memory&gt;<br/></p>
<p><b>15.57.1 Description<br/></b></p>
<p>A default implementation of the AAX_ITaskAgent interface.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CTaskAgent<br/>Default implementation of the AAX_ITaskAgent interface.<br/></p>
<p><b>15.58 AAX_CUnitDisplayDelegateDecorator.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDisplayDelegateDecorator.h&quot;<br/></p>
<p><b>15.58.1 Description<br/></b></p>
<p>A unit display delgate decorator.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_CUnitDisplayDelegateDecorator&lt; T &gt;<br/>A unit type decorator conforming to AAX_IDisplayDelegateDecorator.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1156 File Documentation<br/></b></p>
<p><b>15.59 AAX_CUnitPrefixDisplayDelegateDecorator.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDisplayDelegateDecorator.h&quot;<br/></p>
<p><b>15.59.1 Description<br/></b></p>
<p>A unit prefix display delegate decorator.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>A unit prefix decorator conforming to AAX_IDisplayDelegateDecorator.<br/></p>
<p><b>15.60 AAX_Denormal.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_PlatformOptimizationConstants.h&quot;<br/>#include &lt;limits&gt;<br/>#include &lt;math.h&gt;<br/></p>
<p><b>15.60.1 Description<br/></b></p>
<p>Signal processing utilities for denormal/subnormal floating point numbers.<br/></p>
<p><b>Namespaces<br/></b>&#8226; AAX<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_DENORMAL_H<br/>&#8226; #define AAX_SCOPE_COMPUTE_DENORMALS() do {} while(0)<br/></p>
<p>Sets the run-time environment to handle denormal floats within the scope of this macro.<br/>&#8226; #define AAX_SCOPE_DENORMALS_AS_ZERO() do {} while(0)<br/></p>
<p>Sets the run-time environment to treat denormal floats as zero within the scope of this macro.<br/></p>
<p><b>Functions<br/></b>&#8226; void AAX::DeDenormal (double &amp;iValue)<br/></p>
<p>Clamps very small floating point values to zero.<br/>&#8226; void AAX::DeDenormal (float &amp;iValue)<br/></p>
<p>Clamps very small floating point values to zero.<br/>&#8226; void AAX::DeDenormalFine (float &amp;iValue)<br/>&#8226; void AAX::FilterDenormals (float &#8727;inSamples, int32_t inLength)<br/></p>
<p>Round all denormal/subnormal samples in a buffer to zero.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.61 AAX_DigiTrace_Guide.doxygen File Reference 1157<br/></b></p>
<p><b>Variables<br/></b></p>
<p>&#8226; const double AAX::cDenormalAvoidanceOffset =3.0e-34<br/>&#8226; const float AAX::cFloatDenormalAvoidanceOffset =3.0e-20f<br/></p>
<p><b>15.60.2 Macro Definition Documentation<br/></b></p>
<p><b>15.60.2.1 AAX_DENORMAL_H<br/></b></p>
<p>#define AAX_DENORMAL_H<br/></p>
<p><b>15.60.2.2 AAX_SCOPE_COMPUTE_DENORMALS<br/></b></p>
<p>#define AAX_SCOPE_COMPUTE_DENORMALS( ) do {} while(0)<br/></p>
<p>Sets the run-time environment to handle denormal floats within the scope of this macro.<br/></p>
<p>The host sets the denormal policy for all AAX threads and may use settings which treat denormal float values as<br/>zero (DAZ+FZ). This macro forces non-DAZ behavior.<br/></p>
<p><b>15.60.2.3 AAX_SCOPE_DENORMALS_AS_ZERO<br/></b></p>
<p>#define AAX_SCOPE_DENORMALS_AS_ZERO( ) do {} while(0)<br/></p>
<p>Sets the run-time environment to treat denormal floats as zero within the scope of this macro.<br/></p>
<p>The host sets the denormal policy for all AAX threads and may already use settings which treat denormal float<br/>values as zero (DAZ+FZ). This macro forces DAZ behavior.<br/></p>
<p><b>15.61 AAX_DigiTrace_Guide.doxygen File Reference<br/></b></p>
<p><b>15.62 AAX_DistributingYourPlugIn.doxygen File Reference<br/></b></p>
<p><b>15.63 AAX_DocsDirectory.doxygen File Reference<br/></b></p>
<p><b>15.64 AAX_EndianSwap.h File Reference<br/></b></p>
<p>#include &lt;algorithm&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1158 File Documentation<br/></b></p>
<p><b>15.64.1 Description<br/></b></p>
<p>Utility functions for byte-swapping. Used by AAX_CChunkDataParser.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define ENDIANSWAP_H<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; template&lt;class T &gt;<br/>void AAX_EndianSwapInPlace (T &#8727;theDataP)<br/></p>
<p>Byte swap data in-place.<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T AAX_EndianSwap (T theData)<br/>Make a byte-swapped copy of data.<br/></p>
<p>&#8226; template&lt;class T &gt;<br/>void AAX_BigEndianNativeSwapInPlace (T &#8727;theDataP)<br/></p>
<p>Convert data in-place between Big Endian and native byte ordering.<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T AAX_BigEndianNativeSwap (T theData)<br/>Copy and convert data between Big Endian and native byte ordering.<br/></p>
<p>&#8226; template&lt;class T &gt;<br/>void AAX_LittleEndianNativeSwapInPlace (T &#8727;theDataP)<br/></p>
<p>Convert data in-place from the native byte ordering to Little Endian byte ordering.<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T AAX_LittleEndianNativeSwap (T theData)<br/>Copy and convert data from the native byte ordering to Little Endian byte ordering.<br/></p>
<p>&#8226; template&lt;class Iter &gt;<br/>void AAX_EndianSwapSequenceInPlace (Iter beginI, Iter endI)<br/></p>
<p>Byte swap a sequence of data in-place.<br/>&#8226; template&lt;class Iter &gt;<br/></p>
<p>void AAX_BigEndianNativeSwapSequenceInPlace (Iter beginI, Iter endI)<br/>Convert an sequence of data in-place between Big Endian and native byte ordering.<br/></p>
<p>&#8226; template&lt;class Iter &gt;<br/>void AAX_LittleEndianNativeSwapSequenceInPlace (Iter beginI, Iter endI)<br/></p>
<p>Convert an sequence of data in-place from the native byte ordering to Little Endian byte ordering.<br/></p>
<p><b>15.64.2 Macro Definition Documentation<br/></b></p>
<p><b>15.64.2.1 ENDIANSWAP_H<br/></b></p>
<p>#define ENDIANSWAP_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.64 AAX_EndianSwap.h File Reference 1159<br/></b></p>
<p><b>15.64.3 Function Documentation<br/></b></p>
<p><b>15.64.3.1 AAX_EndianSwapInPlace()<br/></b></p>
<p>template&lt;class T &gt;<br/>void AAX_EndianSwapInPlace (<br/></p>
<p>T &#8727; theDataP ) [inline]<br/></p>
<p>Byte swap data in-place.<br/></p>
<p>Referenced by AAX_BigEndianNativeSwapInPlace(), AAX_EndianSwap(), AAX_EndianSwapSequenceInPlace(),<br/>and AAX_LittleEndianNativeSwapInPlace().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>15.64.3.2 AAX_EndianSwap()<br/></b></p>
<p>template&lt;class T &gt;<br/>T AAX_EndianSwap (<br/></p>
<p>T theData ) [inline]<br/></p>
<p>Make a byte-swapped copy of data.<br/></p>
<p>References AAX_EndianSwapInPlace().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.64.3.3 AAX_BigEndianNativeSwapInPlace()<br/></b></p>
<p>template&lt;class T &gt;<br/>void AAX_BigEndianNativeSwapInPlace (<br/></p>
<p>T &#8727; theDataP ) [inline]<br/></p>
<p>Convert data in-place between Big Endian and native byte ordering.<br/></p>
<p>References AAX_EndianSwapInPlace().<br/></p>
<p>Referenced by AAX_BigEndianNativeSwap().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>15.64.3.4 AAX_BigEndianNativeSwap()<br/></b></p>
<p>template&lt;class T &gt;<br/>T AAX_BigEndianNativeSwap (<br/></p>
<p>T theData ) [inline]<br/></p>
<p>Copy and convert data between Big Endian and native byte ordering.<br/></p>
<p>References AAX_BigEndianNativeSwapInPlace().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1160 File Documentation<br/></b></p>
<p><b>15.64.3.5 AAX_LittleEndianNativeSwapInPlace()<br/></b></p>
<p>template&lt;class T &gt;<br/>void AAX_LittleEndianNativeSwapInPlace (<br/></p>
<p>T &#8727; theDataP ) [inline]<br/></p>
<p>Convert data in-place from the native byte ordering to Little Endian byte ordering.<br/></p>
<p>References AAX_EndianSwapInPlace().<br/></p>
<p>Referenced by AAX_LittleEndianNativeSwap().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>15.64.3.6 AAX_LittleEndianNativeSwap()<br/></b></p>
<p>template&lt;class T &gt;<br/>T AAX_LittleEndianNativeSwap (<br/></p>
<p>T theData ) [inline]<br/></p>
<p>Copy and convert data from the native byte ordering to Little Endian byte ordering.<br/></p>
<p>References AAX_LittleEndianNativeSwapInPlace().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.64.3.7 AAX_EndianSwapSequenceInPlace()<br/></b></p>
<p>template&lt;class Iter &gt;<br/>void AAX_EndianSwapSequenceInPlace (<br/></p>
<p>Iter beginI,<br/>Iter endI ) [inline]<br/></p>
<p>Byte swap a sequence of data in-place.<br/></p>
<p>References AAX_EndianSwapInPlace().<br/></p>
<p>Referenced by AAX_BigEndianNativeSwapSequenceInPlace(), and AAX_LittleEndianNativeSwapSequenceIn&#8592;&#8617;<br/>Place().<br/></p>
<p>Here is the call graph for this function: Here is the caller graph for this function:<br/></p>
<p><b>15.64.3.8 AAX_BigEndianNativeSwapSequenceInPlace()<br/></b></p>
<p>template&lt;class Iter &gt;<br/>void AAX_BigEndianNativeSwapSequenceInPlace (<br/></p>
<p>Iter beginI,<br/>Iter endI ) [inline]<br/></p>
<p>Convert an sequence of data in-place between Big Endian and native byte ordering.<br/></p>
<p>References AAX_EndianSwapSequenceInPlace().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1161<br/></b></p>
<p><b>15.64.3.9 AAX_LittleEndianNativeSwapSequenceInPlace()<br/></b></p>
<p>template&lt;class Iter &gt;<br/>void AAX_LittleEndianNativeSwapSequenceInPlace (<br/></p>
<p>Iter beginI,<br/>Iter endI ) [inline]<br/></p>
<p>Convert an sequence of data in-place from the native byte ordering to Little Endian byte ordering.<br/></p>
<p>References AAX_EndianSwapSequenceInPlace().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.65 AAX_Enums.h File Reference<br/></b></p>
<p>#include &lt;stdint.h&gt;<br/></p>
<p><b>15.65.1 Description<br/></b></p>
<p>Utility functions for byte-swapping. Used by AAX_CChunkDataParser.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_INT32_MIN (-2147483647 - 1) /&#8727;&#8727; minimum signed 32 bit value &#8727;/<br/>&#8226; #define AAX_INT32_MAX 2147483647 /&#8727;&#8727; maximum signed 32 bit value &#8727;/<br/>&#8226; #define AAX_UINT32_MIN 0U /&#8727;&#8727; minimum unsigned 32 bit value &#8727;/<br/>&#8226; #define AAX_UINT32_MAX 4294967295U /&#8727;&#8727; maximum unsigned 32 bit value &#8727;/<br/>&#8226; #define AAX_INT16_MIN (-32767 - 1) /&#8727;&#8727; minimum signed 16 bit value &#8727;/<br/>&#8226; #define AAX_INT16_MAX 32767 /&#8727;&#8727; maximum signed 16 bit value &#8727;/<br/>&#8226; #define AAX_UINT16_MIN 0U /&#8727;&#8727; minimum unsigned 16 bit value &#8727;/<br/>&#8226; #define AAX_UINT16_MAX 65535U /&#8727;&#8727; maximum unsigned 16 bit value &#8727;/<br/>&#8226; #define AAX_ENUM_SIZE_CHECK(x) extern int __enumSizeCheck[ 2&#8727;(sizeof(uint32_t)==sizeof(x)) - 1]<br/></p>
<p>Macro to ensure enum type consistency across binaries.<br/>&#8226; #define AAX_STEM_FORMAT(aIndex, aChannelCount) ( static_cast&lt;uint32_t&gt;( ( static_cast&lt;uint16_&#8592;&#8617;<br/></p>
<p>t&gt;(aIndex) &lt;&lt; 16 ) | ( (aChannelCount &gt;= AAX_UINT16_MIN) &amp;&amp; (aChannelCount &lt;= 0xFFFF) ? a&#8592;&#8617;<br/>ChannelCount &amp; 0xFFFF : 0x0000 ) ) )<br/></p>
<p>&#8226; #define AAX_STEM_FORMAT_CHANNEL_COUNT(aStemFormat) ( static_cast&lt;uint16_t&gt;( aStemFormat<br/>&amp; 0xFFFF ) )<br/></p>
<p>&#8226; #define AAX_STEM_FORMAT_INDEX(aStemFormat) ( static_cast&lt;int16_t&gt;( ( aStemFormat &gt;&gt; 16 ) &amp;<br/>0xFFFF ) )<br/></p>
<p><b>Typedefs<br/></b></p>
<p>&#8226; typedef enum AAX_EParameterType AAX_EParameterType<br/>FIC stuff that I can't include without DAE library dependence.<br/></p>
<p>&#8226; typedef int32_t AAX_EParameterOrientation<br/>Typedef for a bitfield of AAX_EParameterOrientationBits values.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1162 File Documentation<br/></b></p>
<p><b>Enumerations<br/></b></p>
<p>&#8226; enum AAX_EHighlightColor {<br/>AAX_eHighlightColor_Red = 0 ,<br/>AAX_eHighlightColor_Blue = 1 ,<br/>AAX_eHighlightColor_Green = 2 ,<br/>AAX_eHighlightColor_Yellow = 3 ,<br/>AAX_eHighlightColor_Num }<br/></p>
<p>Highlight color selector.<br/>&#8226; enum AAX_ETracePriorityHost {<br/></p>
<p>AAX_eTracePriorityHost_None = 0 ,<br/>AAX_eTracePriorityHost_Critical = 0x10000000 ,<br/>AAX_eTracePriorityHost_High = 0x08000000 ,<br/>AAX_eTracePriorityHost_Normal = 0x04000000 ,<br/>AAX_eTracePriorityHost_Low = 0x02000000 ,<br/>AAX_eTracePriorityHost_Lowest = 0x01000000 }<br/></p>
<p>Platform-specific tracing priorities.<br/>&#8226; enum AAX_ETracePriorityDSP {<br/></p>
<p>AAX_eTracePriorityDSP_None = 0 ,<br/>AAX_eTracePriorityDSP_Assert = 1 ,<br/>AAX_eTracePriorityDSP_High = 2 ,<br/>AAX_eTracePriorityDSP_Normal = 3 ,<br/>AAX_eTracePriorityDSP_Low = 4 }<br/></p>
<p>Platform-specific tracing priorities.<br/>&#8226; enum AAX_EModifiers {<br/></p>
<p>AAX_eModifiers_None = 0 ,<br/>AAX_eModifiers_Shift = ( 1 &lt;&lt; 0 ) ,<br/>AAX_eModifiers_Control = ( 1 &lt;&lt; 1 ) ,<br/>AAX_eModifiers_Option = ( 1 &lt;&lt; 2 ) ,<br/>AAX_eModifiers_Command = ( 1 &lt;&lt; 3 ) ,<br/>AAX_eModifiers_SecondaryButton = ( 1 &lt;&lt; 4 ) ,<br/>AAX_eModifiers_Alt = AAX_eModifiers_Option ,<br/>AAX_eModifiers_Cntl = AAX_eModifiers_Command ,<br/>AAX_eModifiers_WINKEY = AAX_eModifiers_Control }<br/></p>
<p>Modifier key definitions used by AAX API.<br/>&#8226; enum AAX_EAudioBufferLength {<br/></p>
<p>AAX_eAudioBufferLength_Undefined = -1 ,<br/>AAX_eAudioBufferLength_1 = 0 ,<br/>AAX_eAudioBufferLength_2 = 1 ,<br/>AAX_eAudioBufferLength_4 = 2 ,<br/>AAX_eAudioBufferLength_8 = 3 ,<br/>AAX_eAudioBufferLength_16 = 4 ,<br/>AAX_eAudioBufferLength_32 = 5 ,<br/>AAX_eAudioBufferLength_64 = 6 ,<br/>AAX_eAudioBufferLength_128 = 7 ,<br/>AAX_eAudioBufferLength_256 = 8 ,<br/>AAX_eAudioBufferLength_512 = 9 ,<br/>AAX_eAudioBufferLength_1024 = 10 ,<br/>AAX_eAudioBufferLength_Max = AAX_eAudioBufferLength_1024 }<br/></p>
<p>Generic buffer length definitions.<br/>&#8226; enum AAX_EAudioBufferLengthDSP {<br/></p>
<p>AAX_eAudioBufferLengthDSP_Default = AAX_eAudioBufferLength_4 ,<br/>AAX_eAudioBufferLengthDSP_4 = AAX_eAudioBufferLength_4 ,<br/>AAX_eAudioBufferLengthDSP_16 = AAX_eAudioBufferLength_16 ,<br/>AAX_eAudioBufferLengthDSP_32 = AAX_eAudioBufferLength_32 ,<br/>AAX_eAudioBufferLengthDSP_64 = AAX_eAudioBufferLength_64 ,<br/>AAX_eAudioBufferLengthDSP_Max = AAX_eAudioBufferLengthDSP_64 }<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1163<br/></b></p>
<p>Currently supported processing buffer length definitions for AAX DSP hosts.<br/>&#8226; enum AAE_EAudioBufferLengthNative {<br/></p>
<p>AAX_eAudioBufferLengthNative_Min = AAX_eAudioBufferLength_32 ,<br/>AAX_eAudioBufferLengthNative_Max = AAX_eAudioBufferLength_Max }<br/></p>
<p>Processing buffer length definitions for Native AAX hosts.<br/>&#8226; enum AAX_EMaxAudioSuiteTracks { AAX_eMaxAudioSuiteTracks = 48 }<br/></p>
<p>The maximum number of tracks that an AAX host will process in a non-real-time context.<br/>&#8226; enum AAX_EStemFormat {<br/></p>
<p>AAX_eStemFormat_Mono = AAX_STEM_FORMAT ( 0, 1 ) ,<br/>AAX_eStemFormat_Stereo = AAX_STEM_FORMAT ( 1, 2 ) ,<br/>AAX_eStemFormat_LCR = AAX_STEM_FORMAT ( 2, 3 ) ,<br/>AAX_eStemFormat_LCRS = AAX_STEM_FORMAT ( 3, 4 ) ,<br/>AAX_eStemFormat_Quad = AAX_STEM_FORMAT ( 4, 4 ) ,<br/>AAX_eStemFormat_5_0 = AAX_STEM_FORMAT ( 5, 5 ) ,<br/>AAX_eStemFormat_5_1 = AAX_STEM_FORMAT ( 6, 6 ) ,<br/>AAX_eStemFormat_6_0 = AAX_STEM_FORMAT ( 7, 6 ) ,<br/>AAX_eStemFormat_6_1 = AAX_STEM_FORMAT ( 8, 7 ) ,<br/>AAX_eStemFormat_7_0_SDDS = AAX_STEM_FORMAT ( 9, 7 ) ,<br/>AAX_eStemFormat_7_1_SDDS = AAX_STEM_FORMAT ( 10, 8 ) ,<br/>AAX_eStemFormat_7_0_DTS = AAX_STEM_FORMAT ( 11, 7 ) ,<br/>AAX_eStemFormat_7_1_DTS = AAX_STEM_FORMAT ( 12, 8 ) ,<br/>AAX_eStemFormat_7_0_2 = AAX_STEM_FORMAT ( 20, 9 ) ,<br/>AAX_eStemFormat_7_1_2 = AAX_STEM_FORMAT ( 13, 10 ) ,<br/>AAX_eStemFormat_5_0_2 = AAX_STEM_FORMAT ( 21, 7 ) ,<br/>AAX_eStemFormat_5_1_2 = AAX_STEM_FORMAT ( 22, 8 ) ,<br/>AAX_eStemFormat_5_0_4 = AAX_STEM_FORMAT ( 23, 9 ) ,<br/>AAX_eStemFormat_5_1_4 = AAX_STEM_FORMAT ( 24, 10 ) ,<br/>AAX_eStemFormat_7_0_4 = AAX_STEM_FORMAT ( 25, 11 ) ,<br/>AAX_eStemFormat_7_1_4 = AAX_STEM_FORMAT ( 26, 12 ) ,<br/>AAX_eStemFormat_7_0_6 = AAX_STEM_FORMAT ( 35, 13 ) ,<br/>AAX_eStemFormat_7_1_6 = AAX_STEM_FORMAT ( 36, 14 ) ,<br/>AAX_eStemFormat_9_0_4 = AAX_STEM_FORMAT ( 27, 13 ) ,<br/>AAX_eStemFormat_9_1_4 = AAX_STEM_FORMAT ( 28, 14 ) ,<br/>AAX_eStemFormat_9_0_6 = AAX_STEM_FORMAT ( 29, 15 ) ,<br/>AAX_eStemFormat_9_1_6 = AAX_STEM_FORMAT ( 30, 16 ) ,<br/>AAX_eStemFormat_Ambi_1_ACN = AAX_STEM_FORMAT ( 14, 4 ) ,<br/>AAX_eStemFormat_Ambi_2_ACN = AAX_STEM_FORMAT ( 18, 9 ) ,<br/>AAX_eStemFormat_Ambi_3_ACN = AAX_STEM_FORMAT ( 19, 16 ) ,<br/>AAX_eStemFormat_Ambi_4_ACN = AAX_STEM_FORMAT ( 31, 25 ) ,<br/>AAX_eStemFormat_Ambi_5_ACN = AAX_STEM_FORMAT ( 32, 36 ) ,<br/>AAX_eStemFormat_Ambi_6_ACN = AAX_STEM_FORMAT ( 33, 49 ) ,<br/>AAX_eStemFormat_Ambi_7_ACN = AAX_STEM_FORMAT ( 34, 64 ) ,<br/>AAX_eStemFormatNum = 37 ,<br/>AAX_eStemFormat_None = AAX_STEM_FORMAT ( -100, 0 ) ,<br/>AAX_eStemFormat_Any = AAX_STEM_FORMAT ( -1, 0 ) ,<br/>AAX_eStemFormat_INT32_MAX = AAX_INT32_MAX }<br/></p>
<p>Stem format definitions.<br/>&#8226; enum AAX_EPlugInCategory {<br/></p>
<p>AAX_ePlugInCategory_None = 0x00000000 ,<br/>AAX_ePlugInCategory_EQ = 0x00000001 ,<br/>AAX_ePlugInCategory_Dynamics = 0x00000002 ,<br/>AAX_ePlugInCategory_PitchShift = 0x00000004 ,<br/>AAX_ePlugInCategory_Reverb = 0x00000008 ,<br/>AAX_ePlugInCategory_Delay = 0x00000010 ,<br/>AAX_ePlugInCategory_Modulation = 0x00000020 ,<br/>AAX_ePlugInCategory_Harmonic = 0x00000040 ,<br/>AAX_ePlugInCategory_NoiseReduction = 0x00000080 ,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1164 File Documentation<br/></b></p>
<p>AAX_ePlugInCategory_Dither = 0x00000100 ,<br/>AAX_ePlugInCategory_SoundField = 0x00000200 ,<br/>AAX_ePlugInCategory_HWGenerators = 0x00000400 ,<br/>AAX_ePlugInCategory_SWGenerators = 0x00000800 ,<br/>AAX_ePlugInCategory_WrappedPlugin = 0x00001000 ,<br/>AAX_EPlugInCategory_Effect = 0x00002000 ,<br/>AAX_ePlugInCategory_Example = AAX_EPlugInCategory_Effect ,<br/>AAX_EPlugInCategory_MIDIEffect = 0x00010000 ,<br/>AAX_ePlugInCategory_INT32_MAX = AAX_INT32_MAX }<br/></p>
<p>Effect category definitions.<br/>&#8226; enum AAX_EPlugInStrings {<br/></p>
<p>AAX_ePlugInStrings_Analysis = 0 ,<br/>AAX_ePlugInStrings_MonoMode = 1 ,<br/>AAX_ePlugInStrings_MultiInputMode = 2 ,<br/>AAX_ePlugInStrings_RegionByRegionAnalysis = 3 ,<br/>AAX_ePlugInStrings_AllSelectedRegionsAnalysis = 4 ,<br/>AAX_ePlugInStrings_RegionName = 5 ,<br/>AAX_ePlugInStrings_ClipName = 5 ,<br/>AAX_ePlugInStrings_Progress = 6 ,<br/>AAX_ePlugInStrings_PlugInFileName = 7 ,<br/>AAX_ePlugInStrings_Preview = 8 ,<br/>AAX_ePlugInStrings_Process = 9 ,<br/>AAX_ePlugInStrings_Bypass = 10 ,<br/>AAX_ePlugInStrings_ClipNameSuffix = 11 ,<br/>AAX_ePlugInStrings_INT32_MAX = AAX_INT32_MAX }<br/></p>
<p>Effect string identifiers.<br/>&#8226; enum AAX_EMeterOrientation {<br/></p>
<p>AAX_eMeterOrientation_Default = 0 ,<br/>AAX_eMeterOrientation_BottomLeft = AAX_eMeterOrientation_Default ,<br/>AAX_eMeterOrientation_TopRight = 1 ,<br/>AAX_eMeterOrientation_Center = 2 ,<br/>AAX_eMeterOrientation_PhaseDot = 3 }<br/></p>
<p>Meter orientation.<br/>&#8226; enum AAX_EMeterBallisticType {<br/></p>
<p>AAX_eMeterBallisticType_Host = 0 ,<br/>AAX_eMeterBallisticType_NoDecay = 1 }<br/></p>
<p>Meter ballistics type.<br/>&#8226; enum AAX_EMeterType {<br/></p>
<p>AAX_eMeterType_Input = 0 ,<br/>AAX_eMeterType_Output = 1 ,<br/>AAX_eMeterType_CLGain = 2 ,<br/>AAX_eMeterType_EGGain = 3 ,<br/>AAX_eMeterType_Analysis = 4 ,<br/>AAX_eMeterType_Other = 5 ,<br/>AAX_eMeterType_None = 31 }<br/></p>
<p>Meter type.<br/>&#8226; enum AAX_ECurveType {<br/></p>
<p>AAX_eCurveType_None = 0 ,<br/>AAX_eCurveType_EQ = 'AXeq' ,<br/>AAX_eCurveType_Dynamics = 'AXdy' ,<br/>AAX_eCurveType_Reduction = 'AXdr' }<br/></p>
<p>Different Curve Types that can be queried from the Host.<br/>&#8226; enum AAX_EResourceType {<br/></p>
<p>AAX_eResourceType_None = 0 ,<br/>AAX_eResourceType_PageTable ,<br/>AAX_eResourceType_PageTableDir }<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1165<br/></b></p>
<p>Types of resources that can be added to an Effect's description.<br/>&#8226; enum AAX_ENotificationEvent {<br/></p>
<p>AAX_eNotificationEvent_InsertPositionChanged = 'AXip' ,<br/>AAX_eNotificationEvent_TrackNameChanged = 'AXtn' ,<br/>AAX_eNotificationEvent_TrackUIDChanged = 'AXtu' ,<br/>AAX_eNotificationEvent_TrackPositionChanged = 'AXtp' ,<br/>AAX_eNotificationEvent_AlgorithmMoved = 'AXam' ,<br/>AAX_eNotificationEvent_GUIOpened = 'AXgo' ,<br/>AAX_eNotificationEvent_GUIClosed = 'AXgc' ,<br/>AAX_eNotificationEvent_ASProcessingState = 'AXPr' ,<br/>AAX_eNotificationEvent_ASPreviewState = 'ASPv' ,<br/>AAX_eNotificationEvent_SessionBeingOpened = 'AXso' ,<br/>AAX_eNotificationEvent_PresetOpened = 'AXpo' ,<br/>AAX_eNotificationEvent_EnteringOfflineMode = 'AXof' ,<br/>AAX_eNotificationEvent_ExitingOfflineMode = 'AXox' ,<br/>AAX_eNotificationEvent_SessionPathChanged = 'AXsp' ,<br/>AAX_eNotificationEvent_SignalLatencyChanged = 'AXsl' ,<br/>AAX_eNotificationEvent_DelayCompensationState = 'AXdc' ,<br/>AAX_eNotificationEvent_CycleCountChanged = 'AXcc' ,<br/>AAX_eNotificationEvent_MaxViewSizeChanged = 'AXws' ,<br/>AAX_eNotificationEvent_SideChainBeingConnected = 'AXsc' ,<br/>AAX_eNotificationEvent_SideChainBeingDisconnected = 'AXsd' ,<br/>AAX_eNotificationEvent_NoiseFloorChanged = 'AXnf' ,<br/>AAX_eNotificationEvent_ParameterMappingChanged = 'AXpm' ,<br/>AAX_eNotificationEvent_ParameterNameChanged = 'AXpn' ,<br/>AAX_eNotificationEvent_HostModeChanged = 'AXHm' ,<br/>AAX_eNotificationEvent_PriorSettingsInvalid = 'AXps' ,<br/>AAX_eNotificationEvent_LogState = 'AXls' ,<br/>AAX_eNotificationEvent_TransportStateChanged = 'AXts' ,<br/>AAX_eNotificationEvent_HostLocale = 'AXLc' }<br/></p>
<p>Events IDs for AAX notifications.<br/>&#8226; enum AAX_EHostModeBits {<br/></p>
<p>AAX_eHostModeBits_None = 0 ,<br/>AAX_eHostModeBits_Live = (1 &lt;&lt; 0) }<br/></p>
<p>Host mode.<br/>&#8226; enum AAX_EHostMode {<br/></p>
<p>AAX_eHostMode_Show = AAX_eHostModeBits_Live ,<br/>AAX_eHostMode_Config = AAX_eHostModeBits_None }<br/></p>
<p>DEPRECATED.<br/>&#8226; enum AAX_EPrivateDataOptions {<br/></p>
<p>AAX_ePrivateDataOptions_DefaultOptions = 0 ,<br/>AAX_ePrivateDataOptions_KeepOnReset = (1 &lt;&lt; 0) ,<br/>AAX_ePrivateDataOptions_External = (1 &lt;&lt; 1) ,<br/>AAX_ePrivateDataOptions_Align8 = (1 &lt;&lt; 2) ,<br/>AAX_ePrivateDataOptions_INT32_MAX = AAX_INT32_MAX }<br/></p>
<p>Options for algorithm private data fields.<br/>&#8226; enum AAX_EConstraintLocationMask {<br/></p>
<p>AAX_eConstraintLocationMask_None = 0 ,<br/>AAX_eConstraintLocationMask_DataModel = (1 &lt;&lt; 0) ,<br/>AAX_eConstraintLocationMask_DLLChipAffinity = (1 &lt;&lt; 1) }<br/></p>
<p>Property values to describe location constraints placed on the plug-in's algorithm component (ProcessProc)<br/>&#8226; enum AAX_EConstraintTopology {<br/></p>
<p>AAX_eConstraintTopology_None = 0 ,<br/>AAX_eConstraintTopology_Monolithic = 1 }<br/></p>
<p>Property values to describe the topology of the plug-in's modules (e.g. data model, GUI.)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1166 File Documentation<br/></b></p>
<p>&#8226; enum AAX_EComponentInstanceInitAction {<br/>AAX_eComponentInstanceInitAction_AddingNewInstance = 0 ,<br/>AAX_eComponentInstanceInitAction_RemovingInstance = 1 ,<br/>AAX_eComponentInstanceInitAction_ResetInstance = 2 }<br/></p>
<p>Selector indicating the action that occurred to prompt a component initialization callback.<br/>&#8226; enum AAX_ESampleRateMask {<br/></p>
<p>AAX_eSampleRateMask_No = 0 ,<br/>AAX_eSampleRateMask_44100 = (1 &lt;&lt; 0) ,<br/>AAX_eSampleRateMask_48000 = (1 &lt;&lt; 1) ,<br/>AAX_eSampleRateMask_88200 = (1 &lt;&lt; 2) ,<br/>AAX_eSampleRateMask_96000 = (1 &lt;&lt; 3) ,<br/>AAX_eSampleRateMask_176400 = (1 &lt;&lt; 4) ,<br/>AAX_eSampleRateMask_192000 = (1 &lt;&lt; 5) ,<br/>AAX_eSampleRateMask_All = AAX_INT32_MAX }<br/></p>
<p>Property values to describe various sample rates.<br/>&#8226; enum AAX_EParameterType {<br/></p>
<p>AAX_eParameterType_Discrete ,<br/>AAX_eParameterType_Continuous }<br/></p>
<p>FIC stuff that I can't include without DAE library dependence.<br/>&#8226; enum AAX_EParameterOrientationBits {<br/></p>
<p>AAX_eParameterOrientation_Default = 0 ,<br/>AAX_eParameterOrientation_BottomMinTopMax = 0 ,<br/>AAX_eParameterOrientation_TopMinBottomMax = 1 ,<br/>AAX_eParameterOrientation_LeftMinRightMax = 0 ,<br/>AAX_eParameterOrientation_RightMinLeftMax = 2 ,<br/>AAX_eParameterOrientation_RotarySingleDotMode = 0 ,<br/>AAX_eParameterOrientation_RotaryBoostCutMode = 4 ,<br/>AAX_eParameterOrientation_RotaryWrapMode = 8 ,<br/>AAX_eParameterOrientation_RotarySpreadMode = 12 ,<br/>AAX_eParameterOrientation_RotaryLeftMinRightMax = 0 ,<br/>AAX_eParameterOrientation_RotaryRightMinLeftMax = 16 }<br/></p>
<p>Visual Orientation of a parameter.<br/>&#8226; enum AAX_EParameterValueInfoSelector {<br/></p>
<p>AAX_ePageTable_EQ_Band_Type = 0 ,<br/>AAX_ePageTable_EQ_InCircuitPolarity = 1 ,<br/>AAX_ePageTable_UseAlternateControl = 2 }<br/></p>
<p>Query type selectors for use with AAX_IEffectParameters::GetParameterValueInfo()<br/>&#8226; enum AAX_EEQBandTypes {<br/></p>
<p>AAX_eEQBandType_HighPass = 0 ,<br/>AAX_eEQBandType_LowShelf = 1 ,<br/>AAX_eEQBandType_Parametric = 2 ,<br/>AAX_eEQBandType_HighShelf = 3 ,<br/>AAX_eEQBandType_LowPass = 4 ,<br/>AAX_eEQBandType_Notch = 5 }<br/></p>
<p>Definitions of band types for EQ page table.<br/>&#8226; enum AAX_EEQInCircuitPolarity {<br/></p>
<p>AAX_eEQInCircuitPolarity_Enabled = 0 ,<br/>AAX_eEQInCircuitPolarity_Bypassed = 1 ,<br/>AAX_eEQInCircuitPolarity_Disabled = 2 }<br/></p>
<p>Definitions for band in/out for EQ page table.<br/>&#8226; enum AAX_EUseAlternateControl {<br/></p>
<p>AAX_eUseAlternateControl_No = 0 ,<br/>AAX_eUseAlternateControl_Yes = 1 }<br/></p>
<p>Definitions for Use Alternate Control parameter.<br/>&#8226; enum AAX_EMIDINodeType {<br/></p>
<p>AAX_eMIDINodeType_LocalInput = 0 ,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1167<br/></b></p>
<p>AAX_eMIDINodeType_LocalOutput = 1 ,<br/>AAX_eMIDINodeType_Global = 2 ,<br/>AAX_eMIDINodeType_Transport = 3 }<br/></p>
<p>MIDI node types.<br/>&#8226; enum AAX_EUpdateSource {<br/></p>
<p>AAX_eUpdateSource_Unspecified = 0 ,<br/>AAX_eUpdateSource_Parameter = 1 ,<br/>AAX_eUpdateSource_Chunk = 2 ,<br/>AAX_eUpdateSource_Delay = 3 }<br/></p>
<p>Source for values passed into UpdateParameterNormalizedValue().<br/>&#8226; enum AAX_EDataInPortType {<br/></p>
<p>AAX_eDataInPortType_Unbuffered = 0 ,<br/>AAX_eDataInPortType_Buffered = 1 ,<br/>AAX_eDataInPortType_Incremental = 2 }<br/></p>
<p>Property value for whether a data in port should be buffered or not.<br/>&#8226; enum AAX_EFrameRate {<br/></p>
<p>AAX_eFrameRate_Undeclared = 0 ,<br/>AAX_eFrameRate_24Frame = 1 ,<br/>AAX_eFrameRate_25Frame = 2 ,<br/>AAX_eFrameRate_2997NonDrop = 3 ,<br/>AAX_eFrameRate_2997DropFrame = 4 ,<br/>AAX_eFrameRate_30NonDrop = 5 ,<br/>AAX_eFrameRate_30DropFrame = 6 ,<br/>AAX_eFrameRate_23976 = 7 ,<br/>AAX_eFrameRate_47952 = 8 ,<br/>AAX_eFrameRate_48Frame = 9 ,<br/>AAX_eFrameRate_50Frame = 10 ,<br/>AAX_eFrameRate_5994NonDrop = 11 ,<br/>AAX_eFrameRate_5994DropFrame = 12 ,<br/>AAX_eFrameRate_60NonDrop = 13 ,<br/>AAX_eFrameRate_60DropFrame = 14 ,<br/>AAX_eFrameRate_100Frame = 15 ,<br/>AAX_eFrameRate_11988NonDrop = 16 ,<br/>AAX_eFrameRate_11988DropFrame = 17 ,<br/>AAX_eFrameRate_120NonDrop = 18 ,<br/>AAX_eFrameRate_120DropFrame = 19 }<br/></p>
<p>FrameRate types.<br/>&#8226; enum AAX_EFeetFramesRate {<br/></p>
<p>AAX_eFeetFramesRate_23976 = 0 ,<br/>AAX_eFeetFramesRate_24 = 1 ,<br/>AAX_eFeetFramesRate_25 = 2 }<br/></p>
<p>FeetFramesRate types.<br/>&#8226; enum AAX_EMidiGlobalNodeSelectors {<br/></p>
<p>AAX_eMIDIClick = 1 &lt;&lt; 0 ,<br/>AAX_eMIDIMtc = 1 &lt;&lt; 1 ,<br/>AAX_eMIDIBeatClock = 1 &lt;&lt; 2 }<br/></p>
<p>The Global MIDI Node Selectors.<br/>&#8226; enum AAX_EPreviewState {<br/></p>
<p>AAX_ePreviewState_Stop = 0 ,<br/>AAX_ePreviewState_Start = 1 }<br/></p>
<p>Offline preview states for use with AAX_eNotificationEvent_ASPreviewState.<br/>&#8226; enum AAX_EProcessingState {<br/></p>
<p>AAX_eProcessingState_StopPass = 2 ,<br/>AAX_eProcessingState_StartPass = 3 ,<br/>AAX_eProcessingState_EndPassGroup = 4 ,<br/>AAX_eProcessingState_BeginPassGroup = 5 ,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1168 File Documentation<br/></b></p>
<p>AAX_eProcessingState_Stop = AAX_eProcessingState_StopPass ,<br/>AAX_eProcessingState_Start = AAX_eProcessingState_StartPass }<br/></p>
<p>Offline preview states for use with AAX_eNotificationEvent_ASProcessingState.<br/>&#8226; enum AAX_ETargetPlatform {<br/></p>
<p>kAAX_eTargetPlatform_None = 0 ,<br/>kAAX_eTargetPlatform_Native = 1 ,<br/>kAAX_eTargetPlatform_TI = 2 ,<br/>kAAX_eTargetPlatform_External = 3 ,<br/>kAAX_eTargetPlatform_Count = 5 }<br/></p>
<p>Describes what platform the component runs on.<br/>&#8226; enum AAX_ESupportLevel {<br/></p>
<p>AAX_eSupportLevel_Uninitialized = 0 ,<br/>AAX_eSupportLevel_Unsupported = 1 ,<br/>AAX_eSupportLevel_Supported = 2 ,<br/>AAX_eSupportLevel_Disabled = 3 ,<br/>AAX_eSupportLevel_ByProperty = 4 }<br/></p>
<p>&#8226; enum AAX_EHostLevel {<br/>AAX_eHostLevel_Unknown = 0 ,<br/>AAX_eHostLevel_Standard = 1 ,<br/>AAX_eHostLevel_Entry = 2 ,<br/>AAX_eHostLevel_Intermediate = 3 }<br/></p>
<p>Host levels.<br/>&#8226; enum AAX_ETextEncoding {<br/></p>
<p>AAX_eTextEncoding_Undefined = -1 ,<br/>AAX_eTextEncoding_UTF8 = 0 ,<br/>AAX_eTextEncoding_Num }<br/></p>
<p>Describes possible string encodings.<br/>&#8226; enum AAX_EAssertFlags {<br/></p>
<p>AAX_eAssertFlags_Default = 0 ,<br/>AAX_eAssertFlags_Log = 1 &lt;&lt; 0 ,<br/>AAX_eAssertFlags_Dialog = 1 &lt;&lt; 1 }<br/></p>
<p>Flags for use with AAX_IHostServices::HandleAssertFailure()<br/>&#8226; enum AAX_ETransportState {<br/></p>
<p>AAX_eTransportState_Unknown = 0 ,<br/>AAX_eTransportState_Stopping = 1 ,<br/>AAX_eTransportState_Stop = 2 ,<br/>AAX_eTransportState_Paused = 3 ,<br/>AAX_eTransportState_Play = 4 ,<br/>AAX_eTransportState_FastForward = 5 ,<br/>AAX_eTransportState_Rewind = 6 ,<br/>AAX_eTransportState_Scrub = 11 ,<br/>AAX_eTransportState_Shuttle = 12 ,<br/>AAX_eTransportState_Num }<br/></p>
<p>Used to indicate the current transport state of the host. This is the global transport state; it does not indicate a<br/>track-specific state.<br/></p>
<p>&#8226; enum AAX_ERecordMode {<br/>AAX_eRecordMode_Unknown = 0 ,<br/>AAX_eRecordMode_None = 1 ,<br/>AAX_eRecordMode_Normal = 2 ,<br/>AAX_eRecordMode_Destructive = 3 ,<br/>AAX_eRecordMode_QuickPunch = 4 ,<br/>AAX_eRecordMode_TrackPunch = 5 ,<br/>AAX_eRecordMode_Num }<br/></p>
<p>Used to indicate the current record mode of the host. This is the global record mode; it does not indicate a track-<br/>specific state.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1169<br/></b></p>
<p><b>Functions<br/></b></p>
<p>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EHighlightColor)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_ETracePriorityHost)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_ETracePriorityDSP)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EModifiers)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EAudioBufferLength)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EAudioBufferLengthDSP)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAE_EAudioBufferLengthNative)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EMaxAudioSuiteTracks)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EStemFormat)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EPlugInCategory)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EPlugInStrings)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EMeterOrientation)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EMeterBallisticType)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EMeterType)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_ECurveType)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EResourceType)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_ENotificationEvent)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EHostModeBits)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EHostMode)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EPrivateDataOptions)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EConstraintLocationMask)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EConstraintTopology)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EComponentInstanceInitAction)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_ESampleRateMask)<br/>&#8226; uint8_t sampleRateInMask (float inSR, uint32_t iMask)<br/></p>
<p>Determines whether a particular AAX_CSampleRate is present in a given mask of AAX_ESampleRateMask.<br/>&#8226; float getLowestSampleRateInMask (uint32_t iMask)<br/></p>
<p>Converts from a mask of AAX_ESampleRateMask to the lowest supported AAX_CSampleRate value in Hz.<br/>&#8226; uint32_t getMaskForSampleRate (float inSR)<br/></p>
<p>Returns the AAX_ESampleRateMask selector for a literal sample rate.<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EParameterType)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EParameterOrientationBits)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EParameterValueInfoSelector)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EEQBandTypes)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EEQInCircuitPolarity)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EUseAlternateControl)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EMIDINodeType)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EUpdateSource)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EDataInPortType)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EFrameRate)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EFeetFramesRate)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EMidiGlobalNodeSelectors)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EPreviewState)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EProcessingState)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_ETargetPlatform)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_ESupportLevel)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EHostLevel)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_ETextEncoding)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EAssertFlags)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_ETransportState)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_ERecordMode)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1170 File Documentation<br/></b></p>
<p><b>15.65.2 Macro Definition Documentation<br/></b></p>
<p><b>15.65.2.1 AAX_INT32_MIN<br/></b></p>
<p>#define AAX_INT32_MIN (-2147483647 - 1) /&#8727;&#8727; minimum signed 32 bit value &#8727;/<br/></p>
<p><b>15.65.2.2 AAX_INT32_MAX<br/></b></p>
<p>#define AAX_INT32_MAX 2147483647 /&#8727;&#8727; maximum signed 32 bit value &#8727;/<br/></p>
<p><b>15.65.2.3 AAX_UINT32_MIN<br/></b></p>
<p>#define AAX_UINT32_MIN 0U /&#8727;&#8727; minimum unsigned 32 bit value &#8727;/<br/></p>
<p><b>15.65.2.4 AAX_UINT32_MAX<br/></b></p>
<p>#define AAX_UINT32_MAX 4294967295U /&#8727;&#8727; maximum unsigned 32 bit value &#8727;/<br/></p>
<p><b>15.65.2.5 AAX_INT16_MIN<br/></b></p>
<p>#define AAX_INT16_MIN (-32767 - 1) /&#8727;&#8727; minimum signed 16 bit value &#8727;/<br/></p>
<p><b>15.65.2.6 AAX_INT16_MAX<br/></b></p>
<p>#define AAX_INT16_MAX 32767 /&#8727;&#8727; maximum signed 16 bit value &#8727;/<br/></p>
<p><b>15.65.2.7 AAX_UINT16_MIN<br/></b></p>
<p>#define AAX_UINT16_MIN 0U /&#8727;&#8727; minimum unsigned 16 bit value &#8727;/<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1171<br/></b></p>
<p><b>15.65.2.8 AAX_UINT16_MAX<br/></b></p>
<p>#define AAX_UINT16_MAX 65535U /&#8727;&#8727; maximum unsigned 16 bit value &#8727;/<br/></p>
<p><b>15.65.2.9 AAX_ENUM_SIZE_CHECK<br/></b></p>
<p>#define AAX_ENUM_SIZE_CHECK(<br/>x ) extern int __enumSizeCheck[ 2&#8727;(sizeof(uint32_t)==sizeof(x)) - 1]<br/></p>
<p>Macro to ensure enum type consistency across binaries.<br/></p>
<p><b>15.65.2.10 AAX_STEM_FORMAT<br/></b></p>
<p>#define AAX_STEM_FORMAT(<br/>aIndex,<br/>aChannelCount ) ( static_cast&lt;uint32_t&gt;( ( static_cast&lt;uint16_t&gt;(aIndex) &lt;&lt; 16<br/></p>
<p>) | ( (aChannelCount &gt;= AAX_UINT16_MIN) &amp;&amp; (aChannelCount &lt;= 0xFFFF) ? aChannelCount &amp; 0xFFFF<br/>: 0x0000 ) ) )<br/></p>
<p><b>15.65.2.11 AAX_STEM_FORMAT_CHANNEL_COUNT<br/></b></p>
<p>#define AAX_STEM_FORMAT_CHANNEL_COUNT(<br/>aStemFormat ) ( static_cast&lt;uint16_t&gt;( aStemFormat &amp; 0xFFFF ) )<br/></p>
<p><b>15.65.2.12 AAX_STEM_FORMAT_INDEX<br/></b></p>
<p>#define AAX_STEM_FORMAT_INDEX(<br/>aStemFormat ) ( static_cast&lt;int16_t&gt;( ( aStemFormat &gt;&gt; 16 ) &amp; 0xFFFF ) )<br/></p>
<p><b>15.65.3 Typedef Documentation<br/></b></p>
<p><b>15.65.3.1 AAX_EParameterType<br/></b></p>
<p>typedef enum AAX_EParameterType AAX_EParameterType<br/></p>
<p>FIC stuff that I can't include without DAE library dependence.<br/></p>
<p><b>Legacy Porting Notes </b>Values must match unnamed type enum in FicTDMControl.h<br/></p>
<p><b>Todo </b>FLAGGED FOR REMOVAL<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1172 File Documentation<br/></b></p>
<p><b>15.65.3.2 AAX_EParameterOrientation<br/></b></p>
<p>typedef int32_t AAX_EParameterOrientation<br/></p>
<p>Typedef for a bitfield of AAX_EParameterOrientationBits values.<br/></p>
<p><b>15.65.4 Enumeration Type Documentation<br/></b></p>
<p><b>15.65.4.1 AAX_EHighlightColor<br/></b></p>
<p>enum AAX_EHighlightColor<br/></p>
<p>Highlight color selector.<br/></p>
<p><b>See also<br/></b>AAX_IEffectGUI::SetControlHighlightInfo()<br/></p>
<p><b>Enumerator<br/></b>AAX_eHighlightColor_Red<br/>AAX_eHighlightColor_Blue<br/></p>
<p>AAX_eHighlightColor_Green<br/>AAX_eHighlightColor_Yellow<br/></p>
<p>AAX_eHighlightColor_Num<br/></p>
<p><b>15.65.4.2 AAX_ETracePriorityHost<br/></b></p>
<p>enum AAX_ETracePriorityHost<br/></p>
<p>Platform-specific tracing priorities.<br/></p>
<p>Use the generic EAAX_Trace_Priority in plug-ins for cross-platform tracing (see AAX_Assert.h)<br/></p>
<p><b>Enumerator<br/></b>AAX_eTracePriorityHost_None<br/></p>
<p>AAX_eTracePriorityHost_Critical<br/>AAX_eTracePriorityHost_High<br/></p>
<p>AAX_eTracePriorityHost_Normal<br/>AAX_eTracePriorityHost_Low<br/></p>
<p>AAX_eTracePriorityHost_Lowest<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1173<br/></b></p>
<p><b>15.65.4.3 AAX_ETracePriorityDSP<br/></b></p>
<p>enum AAX_ETracePriorityDSP<br/></p>
<p>Platform-specific tracing priorities.<br/></p>
<p>Use the generic EAAX_Trace_Priority in plug-ins for cross-platform tracing (see AAX_Assert.h)<br/></p>
<p><b>Enumerator<br/></b>AAX_eTracePriorityDSP_None<br/></p>
<p>AAX_eTracePriorityDSP_Assert<br/>AAX_eTracePriorityDSP_High<br/></p>
<p>AAX_eTracePriorityDSP_Normal<br/>AAX_eTracePriorityDSP_Low<br/></p>
<p><b>15.65.4.4 AAX_EModifiers<br/></b></p>
<p>enum AAX_EModifiers<br/></p>
<p>Modifier key definitions used by AAX API.<br/></p>
<p><b>Enumerator<br/></b>AAX_eModifiers_None<br/>AAX_eModifiers_Shift Shift.<br/></p>
<p>AAX_eModifiers_Control Control on Mac, Winkey/Start on PC.<br/>AAX_eModifiers_Option Option on Mac, Alt on PC.<br/></p>
<p>AAX_eModifiers_Command Command on Mac, Ctrl on PC.<br/>AAX_eModifiers_SecondaryButton Secondary mouse button.<br/></p>
<p>AAX_eModifiers_Alt Option on Mac, Alt on PC.<br/>AAX_eModifiers_Cntl Command on Mac, Cntl on PC.<br/></p>
<p>AAX_eModifiers_WINKEY Control on Mac, WINKEY on PC.<br/></p>
<p><b>15.65.4.5 AAX_EAudioBufferLength<br/></b></p>
<p>enum AAX_EAudioBufferLength<br/></p>
<p>Generic buffer length definitions.<br/></p>
<p>These enum values can be used to calculate literal values as powers of two:<br/>(1 &#171; AAX_eAudioBufferLength_16) == 16;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1174 File Documentation<br/></b></p>
<p><b>See also<br/></b>AAX_EAudioBufferLengthDSP<br/>AAE_EAudioBufferLengthNative<br/></p>
<p><b>Enumerator<br/></b>AAX_eAudioBufferLength_Undefined<br/></p>
<p>AAX_eAudioBufferLength_1<br/>AAX_eAudioBufferLength_2<br/>AAX_eAudioBufferLength_4<br/>AAX_eAudioBufferLength_8<br/></p>
<p>AAX_eAudioBufferLength_16<br/>AAX_eAudioBufferLength_32<br/>AAX_eAudioBufferLength_64<br/></p>
<p>AAX_eAudioBufferLength_128<br/>AAX_eAudioBufferLength_256<br/>AAX_eAudioBufferLength_512<br/></p>
<p>AAX_eAudioBufferLength_1024<br/>AAX_eAudioBufferLength_Max Maximum buffer length for ProcessProc processing buffers. Audio<br/></p>
<p>buffers for other methods, such as the high-latency render callback for<br/>AAX Hybrid or the offline render callback for Host Processor effects,<br/>may contain more samples than AAX_eAudioBufferLength_Max.<br/></p>
<p><b>15.65.4.6 AAX_EAudioBufferLengthDSP<br/></b></p>
<p>enum AAX_EAudioBufferLengthDSP<br/></p>
<p>Currently supported processing buffer length definitions for AAX DSP hosts.<br/></p>
<p>AAX DSP decks must support at least these buffer lengths. All AAX DSP algorithm ProcessProcs must support<br/>exactly one of these buffer lengths.<br/></p>
<p><b>See also<br/></b>AAX_eProperty_DSP_AudioBufferLength<br/></p>
<p><b>Enumerator<br/></b>AAX_eAudioBufferLengthDSP_Default<br/></p>
<p>AAX_eAudioBufferLengthDSP_4<br/>AAX_eAudioBufferLengthDSP_16<br/>AAX_eAudioBufferLengthDSP_32<br/>AAX_eAudioBufferLengthDSP_64<br/></p>
<p>AAX_eAudioBufferLengthDSP_Max<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1175<br/></b></p>
<p><b>15.65.4.7 AAE_EAudioBufferLengthNative<br/></b></p>
<p>enum AAE_EAudioBufferLengthNative<br/></p>
<p>Processing buffer length definitions for Native AAX hosts.<br/></p>
<p>All AAX Native plug-ins must support variable buffer lengths. The buffer lengths that a host will use are constrained<br/>by the values in this enum. All Native buffer lengths will be powers of two, as per AAX_EAudioBufferLength<br/></p>
<p><b>See also<br/></b>AAX_eProperty_DSP_AudioBufferLength<br/></p>
<p><b>Enumerator<br/></b>AAX_eAudioBufferLengthNative_Min Minimum Native buffer length.<br/>AAX_eAudioBufferLengthNative_Max Maximum Native buffer length.<br/></p>
<p><b>15.65.4.8 AAX_EMaxAudioSuiteTracks<br/></b></p>
<p>enum AAX_EMaxAudioSuiteTracks<br/></p>
<p>The maximum number of tracks that an AAX host will process in a non-real-time context.<br/></p>
<p><b>See also<br/></b>AAX_eProperty_NumberOfInputs and AAX_eProperty_NumberOfOutputs<br/></p>
<p><b>Enumerator<br/></b>AAX_eMaxAudioSuiteTracks<br/></p>
<p><b>15.65.4.9 AAX_EStemFormat<br/></b></p>
<p>enum AAX_EStemFormat<br/></p>
<p>Stem format definitions.<br/></p>
<p>A stem format combines a channel count with a semantic meaning for each channel. Usually this is the speaker or<br/>speaker position associated with the data in the channel. The meanings of each channel in each stem format (i.e.<br/>channel orders) are listed below.<br/></p>
<p>Not all stem formats are supported by all AAX plug-in hosts. An effect may describe support for any stem format<br/>combination which it supports and the host will ignore any configurations which it cannot support.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1176 File Documentation<br/></b></p>
<p><b>Note<br/></b>When defining stem format support in AAX_IHostProcessor effects do not use stem format properties or<br/>values. Instead, use AAX_eProperty_NumberOfInputs and AAX_eProperty_NumberOfOutputs with integer<br/>channel count values.<br/></p>
<p><b>See also<br/></b>- AAX_eProperty_InputStemFormat<br/>- AAX_eProperty_OutputStemFormat<br/>- AAX_eProperty_HybridInputStemFormat<br/>- AAX_eProperty_HybridOutputStemFormat<br/>- AAX_eProperty_SideChainStemFormat<br/></p>
<p><b>Enumerator<br/></b>AAX_eStemFormat_Mono M.<br/></p>
<p>AAX_eStemFormat_Stereo L R.<br/>AAX_eStemFormat_LCR L C R.<br/></p>
<p>AAX_eStemFormat_LCRS L C R S.<br/>AAX_eStemFormat_Quad L R Ls Rs.<br/></p>
<p>AAX_eStemFormat_5_0 L C R Ls Rs.<br/>AAX_eStemFormat_5_1 L C R Ls Rs LFE.<br/>AAX_eStemFormat_6_0 L C R Ls Cs Rs.<br/>AAX_eStemFormat_6_1 L C R Ls Cs Rs LFE.<br/></p>
<p>AAX_eStemFormat_7_0_SDDS L Lc C Rc R Ls Rs.<br/>AAX_eStemFormat_7_1_SDDS L Lc C Rc R Ls Rs LFE.<br/></p>
<p>AAX_eStemFormat_7_0_DTS L C R Lss Rss Lsr Rsr.<br/>AAX_eStemFormat_7_1_DTS L C R Lss Rss Lsr Rsr LFE.<br/></p>
<p>AAX_eStemFormat_7_0_2 L C R Lss Rss Lsr Rsr Lts Rts.<br/>AAX_eStemFormat_7_1_2 L C R Lss Rss Lsr Rsr LFE Lts Rts.<br/>AAX_eStemFormat_5_0_2 L C R Ls Rs Ltm Rtm.<br/>AAX_eStemFormat_5_1_2 L C R Ls Rs LFE Ltm Rtm.<br/>AAX_eStemFormat_5_0_4 L C R Ls Rs Ltf Rtf Ltr Rtr.<br/>AAX_eStemFormat_5_1_4 L C R Ls Rs LFE Ltf Rtf Ltr Rtr.<br/>AAX_eStemFormat_7_0_4 L C R Lss Rss Lsr Rsr Ltf Rtf Ltr Rtr.<br/>AAX_eStemFormat_7_1_4 L C R Lss Rss Lsr Rsr LFE Ltf Rtf Ltr Rtr.<br/>AAX_eStemFormat_7_0_6 L C R Lss Rss Lsr Rsr Ltf Rtf Ltm Rtm Ltr Rtr.<br/>AAX_eStemFormat_7_1_6 L C R Lss Rss Lsr Rsr LFE Ltf Rtf Ltm Rtm Ltr Rtr.<br/>AAX_eStemFormat_9_0_4 L C R Lw Rw Lss Rss Lsr Rsr Ltf Rtf Ltr Rtr.<br/>AAX_eStemFormat_9_1_4 L C R Lw Rw Lss Rss Lsr Rsr LFE Ltf Rtf Ltr Rtr.<br/>AAX_eStemFormat_9_0_6 L C R Lw Rw Lss Rss Lsr Rsr Ltf Rtf Ltm Rtm Ltr Rtr.<br/>AAX_eStemFormat_9_1_6 L C R Lw Rw Lss Rss Lsr Rsr LFE Ltf Rtf Ltm Rtm Ltr Rtr.<br/></p>
<p>AAX_eStemFormat_Ambi_1_ACN Ambisonics: first-order with ACN channel order and SN3D (AmbiX)<br/>normalization.<br/></p>
<p>AAX_eStemFormat_Ambi_2_ACN Ambisonics: second-order with ACN channel order and SN3D (AmbiX)<br/>normalization.<br/></p>
<p>AAX_eStemFormat_Ambi_3_ACN Ambisonics: third-order with ACN channel order and SN3D (AmbiX)<br/>normalization.<br/></p>
<p>AAX_eStemFormat_Ambi_4_ACN Ambisonics: fourth-order with ACN channel order and SN3D (AmbiX)<br/>normalization.<br/></p>
<p>AAX_eStemFormat_Ambi_5_ACN Ambisonics: fifth-order with ACN channel order and SN3D (AmbiX)<br/>normalization.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1177<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eStemFormat_Ambi_6_ACN Ambisonics: sixth-order with ACN channel order and SN3D (AmbiX)<br/></p>
<p>normalization.<br/>AAX_eStemFormat_Ambi_7_ACN Ambisonics: seventh-order with ACN channel order and SN3D (AmbiX)<br/></p>
<p>normalization.<br/>AAX_eStemFormatNum<br/></p>
<p>AAX_eStemFormat_None<br/>AAX_eStemFormat_Any<br/></p>
<p>AAX_eStemFormat_INT32_MAX<br/></p>
<p><b>15.65.4.10 AAX_EPlugInCategory<br/></b></p>
<p>enum AAX_EPlugInCategory<br/></p>
<p>Effect category definitions.<br/></p>
<p>Used with AAX_IEffectDescriptor::AddCategory() to categorize an Effect.<br/></p>
<p>These values are bitwise-exclusive and may be used in a bitmask to define multiple categories:<br/>myCategory = AAX_ePlugInCategory_EQ | AAX_ePlugInCategory_Dynamics;<br/></p>
<p><b>Note<br/></b>The host may handle plug-ins with different categories in different manners, e.g. replacing &quot;analyze&quot; with<br/>&quot;reverse&quot; for offline processing of delays and reverbs.<br/></p>
<p><b>Enumerator<br/></b>AAX_ePlugInCategory_None<br/></p>
<p>AAX_ePlugInCategory_EQ Equalization.<br/>AAX_ePlugInCategory_Dynamics Compressor, expander, limiter, etc.<br/>AAX_ePlugInCategory_PitchShift Pitch processing.<br/></p>
<p>AAX_ePlugInCategory_Reverb Reverberation and room/space simulation.<br/>AAX_ePlugInCategory_Delay Delay and echo.<br/></p>
<p>AAX_ePlugInCategory_Modulation Phasing, flanging, chorus, etc.<br/>AAX_ePlugInCategory_Harmonic Distortion, saturation, and harmonic enhancement.<br/></p>
<p>AAX_ePlugInCategory_NoiseReduction Noise reduction.<br/>AAX_ePlugInCategory_Dither Dither, noise shaping, etc.<br/></p>
<p>AAX_ePlugInCategory_SoundField Pan, auto-pan, upmix and downmix, and surround handling.<br/>AAX_ePlugInCategory_HWGenerators Fixed hardware audio sources such as SampleCell.<br/>AAX_ePlugInCategory_SWGenerators Virtual instruments, metronomes, and other software audio sources.<br/>AAX_ePlugInCategory_WrappedPlugin All plug-ins wrapped by a thrid party wrapper (i.e. VST to RTAS<br/></p>
<p>wrapper), except for VI plug-ins which should be mapped to<br/>AAX_PlugInCategory_SWGenerators.<br/></p>
<p>AAX_EPlugInCategory_Effect Special effects.<br/>AAX_ePlugInCategory_Example<br/></p>
<p>AAX_EPlugInCategory_MIDIEffect MIDI effects.<br/>AAX_ePlugInCategory_INT32_MAX<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1178 File Documentation<br/></b></p>
<p><b>15.65.4.11 AAX_EPlugInStrings<br/></b></p>
<p>enum AAX_EPlugInStrings<br/></p>
<p>Effect string identifiers.<br/></p>
<p>The AAX host may associate certain plug-in display strings with these identifiers.<br/></p>
<p><b>See also<br/></b>AAX_IEffectGUI::GetCustomLabel()<br/></p>
<p><b>Enumerator<br/></b>AAX_ePlugInStrings_Analysis &quot;Analyze&quot; button label (AudioSuite)<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginStrings_Analysis<br/>in the RTAS/TDM SDK<br/></p>
<p>AAX_ePlugInStrings_MonoMode &quot;Mono Mode&quot; selector label (AudioSuite)<br/></p>
<p><b>Legacy Porting Notes </b>Was<br/>pluginStrings_MonoMode in<br/>the RTAS/TDM SDK<br/></p>
<p>AAX_ePlugInStrings_MultiInputMode &quot;Multi-Input Mode&quot; selector label (AudioSuite)<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginStrings_Multi&#8592;&#8617;<br/>InputMode in the RTAS/TDM<br/>SDK<br/></p>
<p>AAX_ePlugInStrings_RegionByRegionAnalysis &quot;Clip-by-Clip Analysis&quot; selector label (AudioSuite)<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginStrings_Region&#8592;&#8617;<br/>ByRegionAnalysis in the<br/>RTAS/TDM SDK<br/></p>
<p>AAX_ePlugInStrings_AllSelectedRegionsAnalysis &quot;Whole File Analysis&quot; selector label (AudioSuite)<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginStrings_All&#8592;&#8617;<br/>SelectedRegionsAnalysis in<br/>the RTAS/TDM SDK<br/></p>
<p>AAX_ePlugInStrings_RegionName<br/><b>Deprecated<br/></b></p>
<p>AAX_ePlugInStrings_ClipName Clip name label (AudioSuite). This value will replace<br/>the clip's name.<br/><b>See also<br/></b></p>
<p>AAX_ePlugInStrings_ClipNameSuffix<br/></p>
<p><b>Legacy Porting Notes </b>Was<br/>pluginStrings_RegionName<br/>in the RTAS/TDM SDK<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1179<br/></b></p>
<p><b>Enumerator<br/></b>AAX_ePlugInStrings_Progress Progress bar label (AudioSuite)<br/></p>
<p><b>Host Compatibility Notes </b>Not currently supported<br/>by Pro Tools<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginStrings_Progress<br/>in the RTAS/TDM SDK<br/></p>
<p>AAX_ePlugInStrings_PlugInFileName<br/><b>Deprecated<br/></b></p>
<p>AAX_ePlugInStrings_Preview<br/><b>Deprecated<br/></b></p>
<p>AAX_ePlugInStrings_Process &quot;Render&quot; button label (AudioSuite)<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginStrings_Process<br/>in the RTAS/TDM SDK<br/></p>
<p>AAX_ePlugInStrings_Bypass &quot;Bypass&quot; button label (AudioSuite)<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginStrings_Bypass in<br/>the RTAS/TDM SDK<br/></p>
<p>AAX_ePlugInStrings_ClipNameSuffix Clip name label suffix (AudioSuite). This value will be<br/>appended to the clip's name, vs<br/>AAX_ePlugInStrings_ClipName which will replace the<br/>clip's name completely.<br/></p>
<p>AAX_ePlugInStrings_INT32_MAX<br/></p>
<p><b>15.65.4.12 AAX_EMeterOrientation<br/></b></p>
<p>enum AAX_EMeterOrientation<br/></p>
<p>Meter orientation.<br/></p>
<p>Use this enum in conjunction with the AAX_eProperty_Meter_Orientation property<br/></p>
<p>For more information about meters in AAX, see Plug-in meters<br/></p>
<p><b>Enumerator<br/></b>AAX_eMeterOrientation_Default<br/></p>
<p>AAX_eMeterOrientation_BottomLeft the default orientation<br/>AAX_eMeterOrientation_TopRight Some dynamics plug-in orient their gain reduction like so.<br/></p>
<p>AAX_eMeterOrientation_Center A plug-in that does gain increase and decrease may want this. meter<br/>values less than 0x40000000 would display downward from the<br/>mid-point. meter values greater than 0x40000000 would display<br/>upward from the mid-point.<br/></p>
<p>AAX_eMeterOrientation_PhaseDot linear scale, displays 2 dots around the value ( currently D-Control only<br/>)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1180 File Documentation<br/></b></p>
<p><b>15.65.4.13 AAX_EMeterBallisticType<br/></b></p>
<p>enum AAX_EMeterBallisticType<br/></p>
<p>Meter ballistics type.<br/></p>
<p>Use this enum in conjunction with the AAX_eProperty_Meter_Ballistics property<br/></p>
<p>For more information about meters in AAX, see Plug-in meters<br/></p>
<p><b>Enumerator<br/></b>AAX_eMeterBallisticType_Host The ballistics follow the host settings.<br/></p>
<p>AAX_eMeterBallisticType_NoDecay No decay ballistics.<br/></p>
<p><b>15.65.4.14 AAX_EMeterType<br/></b></p>
<p>enum AAX_EMeterType<br/></p>
<p>Meter type.<br/></p>
<p>Use this enum in conjunction with the AAX_eProperty_Meter_Type property<br/></p>
<p>For more information about meters in AAX, see Plug-in meters<br/></p>
<p><b>Enumerator<br/></b>AAX_eMeterType_Input e.g. Your typical input meter (possibly after an input gain stage)<br/></p>
<p>AAX_eMeterType_Output e.g. Your typical output meter (possibly after an output gain stage)<br/>AAX_eMeterType_CLGain e.g. Compressor/Limiter gain reduction<br/>AAX_eMeterType_EGGain e.g. Expander/Gate gain reduction<br/>AAX_eMeterType_Analysis e.g. multi-band amplitude from a Spectrum analyzer<br/></p>
<p>AAX_eMeterType_Other e.g. a meter that does not fit in any of the above categories<br/>AAX_eMeterType_None For internal host use only.<br/></p>
<p><b>15.65.4.15 AAX_EResourceType<br/></b></p>
<p>enum AAX_EResourceType<br/></p>
<p>Types of resources that can be added to an Effect's description.<br/></p>
<p><b>See also<br/></b>AAX_IEffectDescriptor::AddResourceInfo()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1181<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eResourceType_None<br/></p>
<p>AAX_eResourceType_PageTable The file name of the page table xml file<br/>AAX_eResourceType_PageTableDir The absolute path to the directory containing the plug-in's page table<br/></p>
<p>xml file(s)<br/>Defaults to &#8727;.aaxplugin/Contents/Resources<br/></p>
<p><b>15.65.4.16 AAX_ENotificationEvent<br/></b></p>
<p>enum AAX_ENotificationEvent<br/></p>
<p>Events IDs for AAX notifications.<br/></p>
<p>&#8226; Notifications listed with Sent by: Host are dispatched by the AAX host and may be received in one or more of<br/></p>
<p>&#8226; AAX_IEffectParameters::NotificationReceived()<br/></p>
<p>&#8226; AAX_IEffectGUI::NotificationReceived()<br/></p>
<p>&#8226; AAX_IEffectDirectData::NotificationReceived()<br/></p>
<p>The host will choose which components are registered to receive each event type. See the documentation for each<br/>event type for more information.<br/></p>
<p><b>Note<br/></b>All 'AX__' four-char IDs are reserved for the AAX specification<br/></p>
<p><b>Enumerator<br/></b>AAX_eNotificationEvent_InsertPositionChanged (not currently sent) The zero-indexed insert position of<br/></p>
<p>this plug-in instance within its track Data: int32_t<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_TrackNameChanged (const AAX_IString) The current name of this plug-in<br/>instance's track<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11.2 and higher<br/>Not supported by Media<br/>Composer<br/></p>
<p>Data: const AAX_IString<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_TrackUIDChanged (not currently sent) The current UID of this plug-in<br/>instance's track Data: const uint8_t[16]<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_TrackPositionChanged (not currently sent) The current position index of this<br/>plug-in instance's track Data: int32_t<br/>Sent by: Host<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1182 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eNotificationEvent_AlgorithmMoved Not currently sent. Data: none<br/></p>
<p>Sent by: Host<br/>AAX_eNotificationEvent_GUIOpened Not currently sent. Data: none<br/></p>
<p>Sent by: Host<br/>AAX_eNotificationEvent_GUIClosed Not currently sent. Data: none<br/></p>
<p>Sent by: Host<br/>AAX_eNotificationEvent_ASProcessingState AudioSuite processing state change notification. One<br/></p>
<p>of AAX_EProcessingState.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11 and higher<br/>Not supported by Media<br/>Composer<br/></p>
<p>Data: int32_t<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_ASPreviewState AudioSuite preview state change notification. One of<br/>AAX_EPreviewState.<br/></p>
<p><b>Legacy Porting Notes </b>Replacement for<br/>SetPreviewState()<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11 and higher<br/>Not supported by Media<br/>Composer<br/></p>
<p>Data: int32_t<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_SessionBeingOpened Tell the plug-in that chunk data is coming from a PTX.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11 and higher<br/>Not supported by Media<br/>Composer<br/></p>
<p>Data: none<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_PresetOpened Tell the plug-in that chunk data is coming from a TFX.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11 and higher<br/></p>
<p>Data: none<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_EnteringOfflineMode Entering offline processing mode (i.e. offline bounce)<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11 and higher<br/></p>
<p>Data: none<br/>Sent by: Host<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1183<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eNotificationEvent_ExitingOfflineMode Exiting offline processing mode (i.e. offline bounce)<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11 and higher<br/></p>
<p>Data: none<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_SessionPathChanged A string representing the path of the current session.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11.1 and higher<br/></p>
<p>Data: const AAX_IString<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_SignalLatencyChanged The host has changed its latency compensation for<br/>this plug-in instance.<br/><b>Note<br/></b></p>
<p>This notification may be sent redundantly just<br/>after plug-in instantiation when the<br/>AAX_eProperty_LatencyContribution property is<br/>described.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11.1 and higher<br/></p>
<p>Data: none<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_DelayCompensationState The host's delay compensation state has changed.<br/>This notification refers to the host's delay<br/>compensation feature as a whole, rather than the<br/>specific delay compensation state for the plug-in.<br/>Possible values: 0 (disabled), 1 (enabled)<br/>Plug-ins may need to monitor the host's delay<br/>compensation state because, while delay<br/>compensation is disabled, the host will never change<br/>the plug-in's accounted latency and, therefore, will<br/>never dispatch<br/>AAX_eNotificationEvent_SignalLatencyChanged to<br/>the plug-in following a call to<br/>AAX_IController::SetSignalLatency().<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>12.6 and higher<br/></p>
<p>Data: int32_t<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_CycleCountChanged (not currently sent) The host has changed its DSP<br/>cycle allocation for this plug-in instance Data: none<br/>Sent by: Host<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1184 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eNotificationEvent_MaxViewSizeChanged Tell the plug-in the maximum allowed GUI<br/></p>
<p>dimensions. Delivered to the plugin's<br/>AAX_IEffectGUI::NotificationReceived()<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11.1 and higher<br/></p>
<p>Data: const AAX_Point<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_SideChainBeingConnected Tell the plug-in about connection of the sidechain<br/>input.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11.1 and higher<br/></p>
<p>Data: none<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_SideChainBeing&#8592;&#8617;<br/>Disconnected<br/></p>
<p>Tell the plug-in about disconnection of the sidechain<br/>input.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>11.1 and higher<br/></p>
<p>Data: none<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_NoiseFloorChanged The plug-in's noise floor level. The notification data is<br/>the new absolute noise floor level generated by the<br/>plug-in, as amplitude. For example, a plug-in<br/>generating a noise floor at -80 dB (amplitude) would<br/>provide 0.0001 in the notification data.<br/>Signal below the level of the plug-in's noise floor may<br/>be ignored by host features such as Dynamic Plug-In<br/>Processing, which detect whether or not there is any<br/>signal being generated by the plug-in<br/>Data: double<br/>Sent by: Plug-in<br/></p>
<p>AAX_eNotificationEvent_ParameterMappingChanged<br/>Notify the host that some aspect of the parameters'<br/>mapping has changed. To respond to this notification,<br/>the host will call<br/>AAX_IEffectParameters::UpdatePageTable() to<br/>update its cached page tables.<br/>Data: none<br/>Sent by: Plug-in<br/></p>
<p>AAX_eNotificationEvent_ParameterNameChanged Notify the host that one or more parameters' display<br/>names have changed. The payload is the parameter's<br/>ID. The payload size must be at least as large as the<br/>ID string, including the null termination character, and<br/>no larger than the size of the buffer containing the<br/>AAX_CParamID .<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>2023.3 and higher<br/></p>
<p>Data: const AAX_CParamID<br/>Sent by: Plug-in<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1185<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eNotificationEvent_HostModeChanged Notify the plug-in about Host mode changing.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Venue 5.6<br/>and higher<br/></p>
<p>Data: AAX_EHostModeBits<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_PriorSettingsInvalid Previously-saved settings may no longer restore the<br/>captured state. Use this notification when a change<br/>occurs which may cause a different state to be<br/>restored by saved settings, and in particular by a<br/>saved setting representing the plug-in's state just prior<br/>to the change.<br/>For example, a plug-in which restricts certain types of<br/>state changes when the host is in<br/>AAX_eHostModeBits_Live mode should post an<br/>AAX_eNotificationEvent_PriorSettingsInvalid<br/>notification when this part of the plug-in state is<br/>changed manually by the user; if plug-in settings<br/>captured prior to this manual change are later set on<br/>the plug-in while the host is in live mode then some<br/>part of the settings change will be blocked and the<br/>captured state will not be perfectly restored.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Venue 5.6<br/>and higher<br/></p>
<p>Data: none<br/>Sent by: Plug-in<br/></p>
<p>AAX_eNotificationEvent_LogState Notify plug-in to log current state. Plug-in<br/>implementation specific<br/></p>
<p><b>Host Compatibility Notes </b>Pro Tools currently only<br/>sends this notification to<br/>the Direct Data object in<br/>the plug-in<br/></p>
<p>Data: none<br/>Sent by: Host<br/></p>
<p>AAX_eNotificationEvent_TransportStateChanged Notify plug-in that the TransportState was changed.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>2021.10 and higher<br/></p>
<p>Data: AAX_TransportStateInfo_V1<br/>Sent by: Host<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1186 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eNotificationEvent_HostLocale Tell the plug-in the current host language setting.<br/></p>
<p>Data is sent as a string. The format is a two-part code<br/>based on RFC 4646. The values follow Microsoft's<br/>formatting for CultureInfo culture names as described<br/>in http://msdn.microsoft.&#8592;&#8617;<br/>com/en-us/library/system.&#8592;&#8617;<br/>globalization.cultureinfo%28VS.&#8592;&#8617;<br/>80%29.aspx<br/>Examples:<br/></p>
<p>&#8226; en-US: English (US)<br/></p>
<p>&#8226; ja-JP: Japanese<br/></p>
<p>&#8226; ko-KR: Korean<br/></p>
<p>&#8226; fr-FR: French<br/></p>
<p>&#8226; it-IT: Italian<br/></p>
<p>&#8226; de-DE: German<br/></p>
<p>&#8226; es-ES: Spanish<br/></p>
<p>These exceptions to the specification are used by Pro<br/>Tools:<br/></p>
<p>&#8226; zh-CHS: Simplified Chinese<br/></p>
<p>&#8226; zh-CN: Traditional Chinese<br/></p>
<p><b>Note<br/></b>Currently in Pro Tools the language setting will<br/>remain consistent throughout the lifetime of the<br/>plugin instance.<br/></p>
<p>Delivered to the plugin's<br/>AAX_IEffectGUI::NotificationReceived() and<br/>AAX_IEffectParameters::NotificationReceived()<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools<br/>2024.3 and higher<br/></p>
<p>Data: const AAX_IString<br/>Sent by: Host<br/></p>
<p><b>15.65.4.17 AAX_EHostModeBits<br/></b></p>
<p>enum AAX_EHostModeBits<br/></p>
<p>Host mode.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Venue 5.6 and higher<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1187<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eHostModeBits_None No special host mode, e.g. Pro Tools normal operation, Venue Config mode.<br/></p>
<p>AAX_eHostModeBits_Live The host is in a live playback mode, e.g. Venue Show mode - inserts are live<br/>and must not allow state changes which interrupt audio processing.<br/></p>
<p><b>15.65.4.18 AAX_EHostMode<br/></b></p>
<p>enum AAX_EHostMode<br/></p>
<p>DEPRECATED.<br/></p>
<p>Use AAX_EHostModeBits<br/></p>
<p><b>Warning<br/></b>The values of these modes have changed as of AAX SDK 2.3.1 from the definitions originally published in<br/>AAX SDK 2.3.0<br/></p>
<p><b>Deprecated </b>This enum is deprecated and will be removed in a future release.<br/></p>
<p><b>Enumerator<br/></b>AAX_eHostMode_Show<br/></p>
<p><b>Deprecated </b>Use AAX_eHostModeBits_Live<br/></p>
<p>AAX_eHostMode_Config<br/><b>Deprecated </b>Use AAX_eHostModeBits_None<br/></p>
<p><b>15.65.4.19 AAX_EPrivateDataOptions<br/></b></p>
<p>enum AAX_EPrivateDataOptions<br/></p>
<p>Options for algorithm private data fields.<br/></p>
<p><b>Enumerator<br/></b>AAX_ePrivateDataOptions_DefaultOptions<br/>AAX_ePrivateDataOptions_KeepOnReset Retain data upon plug-in reset.<br/></p>
<p><b>Warning<br/></b>Not currently implemented. If this functionality is desired,<br/>the recommended workaround is to cache the desired<br/>private data to be set during<br/>AAX_IEffectParameters::ResetFieldData().<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1188 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_ePrivateDataOptions_External Place the block in external memory (internal by default)<br/></p>
<p>AAX_ePrivateDataOptions_Align8 Place the block in mem aligned by 64 bits.<br/>AAX_ePrivateDataOptions_INT32_MAX<br/></p>
<p><b>15.65.4.20 AAX_EConstraintLocationMask<br/></b></p>
<p>enum AAX_EConstraintLocationMask<br/></p>
<p>Property values to describe location constraints placed on the plug-in's algorithm component (ProcessProc)<br/></p>
<p><b>See also<br/></b>AAX_eProperty_Constraint_Location<br/></p>
<p><b>Enumerator<br/></b>AAX_eConstraintLocationMask_None No constraint placed on component's location.<br/></p>
<p>AAX_eConstraintLocationMask_DataModel This ProcessProc must be co-located with the plug-in's<br/>data model object.<br/></p>
<p>AAX_eConstraintLocationMask_DLLChipAffinity This ProcessProc should be instantiated on the same<br/>chip as other effects that use the same DLL.<br/></p>
<p>&#8226; This constraint is only applicable to DSP algorithms<br/></p>
<p>This property should only be used when absolutely<br/>required, as it will constrain the DSP manager and reduce<br/>overall DSP plug-in instance counts on the system.<br/></p>
<p><b>Host Compatibility Notes </b>This constraint is supported in<br/>Pro Tools 10.2 and higher<br/></p>
<p><b>15.65.4.21 AAX_EConstraintTopology<br/></b></p>
<p>enum AAX_EConstraintTopology<br/></p>
<p>Property values to describe the topology of the plug-in's modules (e.g. data model, GUI.)<br/></p>
<p><b>See also<br/></b>AAX_eProperty_Constraint_Topology<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1189<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eConstraintTopology_None No constraint placed on plug-in's topology.<br/></p>
<p>AAX_eConstraintTopology_Monolithic All plug-in modules (e.g. data model, GUI) must be co-located and<br/>non-relocatable.<br/></p>
<p><b>15.65.4.22 AAX_EComponentInstanceInitAction<br/></b></p>
<p>enum AAX_EComponentInstanceInitAction<br/></p>
<p>Selector indicating the action that occurred to prompt a component initialization callback.<br/></p>
<p><b>See also<br/></b>AAX_CInstanceInitProc<br/></p>
<p><b>Enumerator<br/></b>AAX_eComponentInstanceInitAction_AddingNewInstance<br/></p>
<p>AAX_eComponentInstanceInitAction_RemovingInstance<br/>AAX_eComponentInstanceInitAction_ResetInstance<br/></p>
<p><b>15.65.4.23 AAX_ESampleRateMask<br/></b></p>
<p>enum AAX_ESampleRateMask<br/></p>
<p>Property values to describe various sample rates.<br/></p>
<p>These values may be used as a bitmask, so e.g. a particular Effect may declare compatibility with AAX_e&#8592;&#8617;<br/>SampleRateMask_44100 | AAX_eSampleRateMask_48000<br/></p>
<p><b>See also<br/></b>AAX_eProperty_SampleRate<br/></p>
<p><b>Enumerator<br/></b>AAX_eSampleRateMask_No<br/></p>
<p>AAX_eSampleRateMask_44100<br/>AAX_eSampleRateMask_48000<br/>AAX_eSampleRateMask_88200<br/>AAX_eSampleRateMask_96000<br/></p>
<p>AAX_eSampleRateMask_176400<br/>AAX_eSampleRateMask_192000<br/></p>
<p>AAX_eSampleRateMask_All<br/><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1190 File Documentation<br/></b></p>
<p><b>15.65.4.24 AAX_EParameterType<br/></b></p>
<p>enum AAX_EParameterType<br/></p>
<p>FIC stuff that I can't include without DAE library dependence.<br/></p>
<p><b>Legacy Porting Notes </b>Values must match unnamed type enum in FicTDMControl.h<br/></p>
<p><b>Todo </b>FLAGGED FOR REMOVAL<br/></p>
<p><b>Enumerator<br/></b>AAX_eParameterType_Discrete<br/></p>
<p><b>Legacy Porting Notes </b>Matches kDAE_DiscreteValues<br/></p>
<p>AAX_eParameterType_Continuous<br/><b>Legacy Porting Notes </b>Matches kDAE_ContinuousValues<br/></p>
<p><b>15.65.4.25 AAX_EParameterOrientationBits<br/></b></p>
<p>enum AAX_EParameterOrientationBits<br/></p>
<p>Visual Orientation of a parameter.<br/></p>
<p><b>Todo </b>FLAGGED FOR REVISION<br/></p>
<p><b>Enumerator<br/></b>AAX_eParameterOrientation_Default<br/></p>
<p>AAX_eParameterOrientation_BottomMinTopMax<br/>AAX_eParameterOrientation_TopMinBottomMax<br/></p>
<p>AAX_eParameterOrientation_LeftMinRightMax<br/>AAX_eParameterOrientation_RightMinLeftMax<br/></p>
<p>AAX_eParameterOrientation_RotarySingleDotMode<br/>AAX_eParameterOrientation_RotaryBoostCutMode<br/></p>
<p>AAX_eParameterOrientation_RotaryWrapMode<br/>AAX_eParameterOrientation_RotarySpreadMode<br/></p>
<p>AAX_eParameterOrientation_RotaryLeftMinRightMax<br/>AAX_eParameterOrientation_RotaryRightMinLeftMax<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1191<br/></b></p>
<p><b>15.65.4.26 AAX_EParameterValueInfoSelector<br/></b></p>
<p>enum AAX_EParameterValueInfoSelector<br/></p>
<p>Query type selectors for use with AAX_IEffectParameters::GetParameterValueInfo()<br/></p>
<p><b>See also<br/></b>AAX_EEQBandTypes<br/>AAX_EEQInCircuitPolarity<br/>AAX_EUseAlternateControl<br/></p>
<p><b>Legacy Porting Notes </b>converted from EControlValueInfo in the legacy SDK<br/></p>
<p><b>Enumerator<br/></b>AAX_ePageTable_EQ_Band_Type EQ filter band type. Possible response values are listed in<br/></p>
<p>AAX_EEQBandTypes<br/></p>
<p><b>Legacy Porting Notes </b>converted from<br/>eDigi_PageTable_EQ_Band_Type<br/>in the legacy SDK<br/></p>
<p>AAX_ePageTable_EQ_InCircuitPolarity Description of whether a particular EQ band is active. Possible<br/>response values are listed in AAX_EEQInCircuitPolarity<br/></p>
<p><b>Legacy Porting Notes </b>converted from eDigi_PageTable_&#8592;&#8617;<br/>EQ_InCircuitPolarity in the legacy<br/>SDK<br/></p>
<p>AAX_ePageTable_UseAlternateControl Description of whether an alternate parameter should be used for a<br/>given slot. For example, some control surfaces support Q/Slope<br/>encoders. Using an alternate control mechanism, plug-ins mapped<br/>to these devices can assign a different slope control to the alternate<br/>slot and have it coexist with a Q control for each band. This is only<br/>applicable when mapping separate parameters to the same<br/>encoder; if the Q and Slope controls are implemented as the same<br/>parameter object in the plug-in then customization is not needed.<br/>Possible response values are listed in AAX_EUseAlternateControl<br/></p>
<p><b>Legacy Porting Notes </b>converted from eDigi_PageTable_&#8592;&#8617;<br/>UseAlternateControl in the legacy<br/>SDK<br/></p>
<p><b>15.65.4.27 AAX_EEQBandTypes<br/></b></p>
<p>enum AAX_EEQBandTypes<br/></p>
<p>Definitions of band types for EQ page table.<br/></p>
<p>For the AAX_ePageTable_EQ_Band_Type parameter value info selector<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1192 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eEQBandType_HighPass Freq, Slope<br/>AAX_eEQBandType_LowShelf Freq, Gain, Slope<br/></p>
<p>AAX_eEQBandType_Parametric Freq, Gain, Q<br/>AAX_eEQBandType_HighShelf Freq, Gain, Slope<br/>AAX_eEQBandType_LowPass Freq, Slope<br/></p>
<p>AAX_eEQBandType_Notch Freq, Q<br/></p>
<p><b>15.65.4.28 AAX_EEQInCircuitPolarity<br/></b></p>
<p>enum AAX_EEQInCircuitPolarity<br/></p>
<p>Definitions for band in/out for EQ page table.<br/></p>
<p>For the AAX_ePageTable_EQ_InCircuitPolarity parameter value selector<br/></p>
<p><b>Enumerator<br/></b>AAX_eEQInCircuitPolarity_Enabled EQ band is in the signal path and enabled<br/></p>
<p>AAX_eEQInCircuitPolarity_Bypassed EQ band is in the signal path but bypassed/off<br/>AAX_eEQInCircuitPolarity_Disabled EQ band is completely removed from signal path<br/></p>
<p><b>15.65.4.29 AAX_EUseAlternateControl<br/></b></p>
<p>enum AAX_EUseAlternateControl<br/></p>
<p>Definitions for Use Alternate Control parameter.<br/></p>
<p>For the AAX_ePageTable_UseAlternateControl parameter value info selector<br/></p>
<p><b>Enumerator<br/></b>AAX_eUseAlternateControl_No<br/></p>
<p>AAX_eUseAlternateControl_Yes<br/></p>
<p><b>15.65.4.30 AAX_EMIDINodeType<br/></b></p>
<p>enum AAX_EMIDINodeType<br/></p>
<p>MIDI node types.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1193<br/></b></p>
<p><b>See also<br/></b>AAX_IComponentDescriptor::AddMIDINode()<br/></p>
<p><b>Enumerator<br/></b>AAX_eMIDINodeType_LocalInput Local MIDI input. Local MIDI input nodes receive MIDI by accessing<br/></p>
<p>AAX_CMidiStream buffers filled with MIDI messages. These buffers of<br/>MIDI data are available within the algorithm context with data<br/>corresponding to the current audio buffer being computed. The Effect<br/>can step through this buffer like a &quot;script&quot; to respond to MIDI events<br/>within the audio callback.<br/></p>
<p><b>Legacy Porting Notes </b>Corresponds to RTAS Buffered MIDI input<br/>nodes in the legacy SDK<br/></p>
<p>AAX_eMIDINodeType_LocalOutput Local MIDI output. Local MIDI output nodes send MIDI by filling buffers<br/>with MIDI messages. Messages posted to MIDI output nodes will be<br/>available in the host as MIDI streams, routable to MIDI track inputs and<br/>elsewhere.<br/>Data posted to a MIDI output buffer will be timed to correspond with the<br/>current audio buffer being processed. MIDI outputs support custom<br/>timestamping relative to the first sample of the audio buffer.<br/>The delivery of variable length SysEx messages is also supported.<br/>There are no buffer size limitations for output of SysEx messages.<br/>To post a MIDI output buffer, an Effect must construct a series of<br/>AAX_CMidiPacket objects and place them in the output buffer provided<br/>in the port's AAX_CMidiStream<br/></p>
<p><b>Legacy Porting Notes </b>Corresponds to RTAS Buffered MIDI output<br/>nodes in the legacy SDK<br/></p>
<p>AAX_eMIDINodeType_Global Global MIDI node. Global MIDI nodes allow an Effect to receive<br/>streaming global MIDI data like MIDI Time Code, MIDI Beat Clock, and<br/>host-specific message formats such as the Click messages used in Pro<br/>Tools.<br/>The specific kind of data that will be received by a Global MIDI node is<br/>specified using a mask of AAX_EMidiGlobalNodeSelectors values.<br/>Global MIDI nodes are like local MIDI nodes, except they do not show up<br/>as assignable outputs in the host. Instead the MIDI data is automatically<br/>routed to the plug-in, without the user making any connections.<br/>The buffer of data provided via a Global MIDI node may be shared<br/>between all currently active Effect instances, and this node may include<br/>both explicitly requested data and data not requested by the current<br/>Effect. For example, if one plug-in requests MTC and another plug-in<br/>requests Click, all plug-ins connected to this global node will get both<br/>MTC and Click messages in the shared buffer.<br/></p>
<p><b>Legacy Porting Notes </b>Corresponds to RTAS Shared Buffer global<br/>nodes in the legacy SDK<br/></p>
<p>AAX_eMIDINodeType_Transport Transport node. Call AAX_IMIDINode::GetTransport() on this node to<br/>access the AAX_ITransport interface.<br/><b>Warning<br/></b></p>
<p>See warning at AAX_IMIDINode::GetTransport() regarding use of<br/>this interface<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1194 File Documentation<br/></b></p>
<p><b>15.65.4.31 AAX_EUpdateSource<br/></b></p>
<p>enum AAX_EUpdateSource<br/></p>
<p>Source for values passed into UpdateParameterNormalizedValue().<br/></p>
<p><b>Enumerator<br/></b>AAX_eUpdateSource_Unspecified Parameter updates of unknown / unspecified origin, currently including<br/></p>
<p>all updates from control surfaces, GUI edit events, and edits originating<br/>in the plug-in outside of the context of<br/>UpdateParameterNormalizedValue() or SetChunk().<br/></p>
<p>AAX_eUpdateSource_Parameter Parameter updates originating (via<br/>AAX_IAutomationDelegate::PostSetValueRequest() ) within the scope of<br/>UpdateParameterNormalizedValue().<br/></p>
<p>AAX_eUpdateSource_Chunk Parameter updates originating (via<br/>AAX_IAutomationDelegate::PostSetValueRequest() ) within the scope of<br/>SetChunk().<br/></p>
<p>AAX_eUpdateSource_Delay<br/><b>:Not Used by AAX Plug-Ins<br/></b></p>
<p><b>15.65.4.32 AAX_EDataInPortType<br/></b></p>
<p>enum AAX_EDataInPortType<br/></p>
<p>Property value for whether a data in port should be buffered or not.<br/></p>
<p><b>See also<br/></b>AAX_IComponentDescriptor::AddDataInPort()<br/></p>
<p><b>Enumerator<br/></b>AAX_eDataInPortType_Unbuffered Data port is unbuffered; the most recently posted packet is always<br/></p>
<p>delivered to the alg proc<br/>AAX_eDataInPortType_Buffered Data port is buffered both on the host and DSP and packets are<br/></p>
<p>updated to the current timestamp with every alg proc call<br/>Data delivered to alg proc always reflects the latest posted packet that<br/>has a timestamp at or before the current processing buffer<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1195<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eDataInPortType_Incremental Data port is buffered both on the host and DSP and packets are<br/></p>
<p>updated only once per alg proc call<br/>Since only one packet is delivered at a time, all packets will be delivered<br/>to the alg proc unless an internal buffer overflow occurs<br/><b>Note<br/></b></p>
<p>If multiple packets are posted to this port before the initial call to<br/>the alg proc, only the latest packet will be delivered to the first call<br/>to the alg proc. Thereafter, all packets will be delivered<br/>incrementally.<br/></p>
<p><b>Host Compatibility Notes </b>Supported in Pro Tools 12.5 and higher;<br/>when AAX_eDataInPortType_Incremental<br/>is not supported the port will be treated as<br/>AAX_eDataInPortType_Unbuffered<br/></p>
<p><b>15.65.4.33 AAX_EFrameRate<br/></b></p>
<p>enum AAX_EFrameRate<br/></p>
<p>FrameRate types.<br/></p>
<p><b>See also<br/></b>AAX_ITransport::GetTimeCodeInfo()<br/>AAX_ITransport::GetHDTimeCodeInfo()<br/></p>
<p><b>Enumerator<br/></b>AAX_eFrameRate_Undeclared<br/></p>
<p>AAX_eFrameRate_24Frame<br/>AAX_eFrameRate_25Frame<br/></p>
<p>AAX_eFrameRate_2997NonDrop<br/>AAX_eFrameRate_2997DropFrame<br/></p>
<p>AAX_eFrameRate_30NonDrop<br/>AAX_eFrameRate_30DropFrame<br/></p>
<p>AAX_eFrameRate_23976<br/>AAX_eFrameRate_47952<br/></p>
<p>AAX_eFrameRate_48Frame<br/>AAX_eFrameRate_50Frame<br/></p>
<p>AAX_eFrameRate_5994NonDrop<br/>AAX_eFrameRate_5994DropFrame<br/></p>
<p>AAX_eFrameRate_60NonDrop<br/>AAX_eFrameRate_60DropFrame<br/></p>
<p>AAX_eFrameRate_100Frame<br/>AAX_eFrameRate_11988NonDrop<br/></p>
<p>AAX_eFrameRate_11988DropFrame<br/>AAX_eFrameRate_120NonDrop<br/></p>
<p>AAX_eFrameRate_120DropFrame<b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1196 File Documentation<br/></b></p>
<p><b>15.65.4.34 AAX_EFeetFramesRate<br/></b></p>
<p>enum AAX_EFeetFramesRate<br/></p>
<p>FeetFramesRate types.<br/></p>
<p><b>See also<br/></b>AAX_ITransport::GetFeetFramesInfo()<br/></p>
<p><b>Enumerator<br/></b>AAX_eFeetFramesRate_23976<br/></p>
<p>AAX_eFeetFramesRate_24<br/>AAX_eFeetFramesRate_25<br/></p>
<p><b>15.65.4.35 AAX_EMidiGlobalNodeSelectors<br/></b></p>
<p>enum AAX_EMidiGlobalNodeSelectors<br/></p>
<p>The Global MIDI Node Selectors.<br/></p>
<p>These selectors are used in the channelMask argument of AAX_IComponentDescriptor::AddMIDINode() and<br/>AAX_IEffectDescriptor::AddControlMIDINode() to request one or more kinds of global data.<br/></p>
<p><b>Enumerator<br/></b>AAX_eMIDIClick Selector to request click messages. The click messages are special 2-byte messages<br/></p>
<p>encoded as follows:<br/></p>
<p>&#8226; Accented click: Note on pitch 0 (0x90 0x00)<br/></p>
<p>&#8226; Unaccented click: Note on pitch 1 (0x90 0x01)<br/><b>Note<br/></b></p>
<p>No Note Off messages are ever sent. This isn't up-to-spec MIDI data,<br/>just a way of encoding click events.<br/></p>
<p>AAX_eMIDIMtc Selector to request MIDI Time Code (MTC) data. The Standard MIDI Time Code<br/>format.<br/></p>
<p>AAX_eMIDIBeatClock Selector to request MIDI Beat Clock (MBC) messages. This includes Song Position<br/>Pointer, Start/Stop/Continue, and Midi Clock (F8).<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1197<br/></b></p>
<p><b>15.65.4.36 AAX_EPreviewState<br/></b></p>
<p>enum AAX_EPreviewState<br/></p>
<p>Offline preview states for use with AAX_eNotificationEvent_ASPreviewState.<br/></p>
<p><b>Note<br/></b>Do not perform any non-trivial processing within the notification handler. Instead, use the processing state<br/>notification to inform the processing that is performed in methods such as PreRender().<br/></p>
<p><b>Enumerator<br/></b>AAX_ePreviewState_Stop Offline preview has ended. For Host Processor plug-ins, this notification is sent<br/></p>
<p>just before the final call to PostRender(), or after analysis is complete for plug-ins<br/>with analysis-only preview.<br/></p>
<p>AAX_ePreviewState_Start Offline preview is beginning. For Host Processor plug-ins, this notification is sent<br/>before any calls to PreAnalyze() or to PreRender().<br/></p>
<p><b>15.65.4.37 AAX_EProcessingState<br/></b></p>
<p>enum AAX_EProcessingState<br/></p>
<p>Offline preview states for use with AAX_eNotificationEvent_ASProcessingState.<br/></p>
<p><b>Note<br/></b>Do not perform any non-trivial processing within the notification handler. Instead, use the processing state<br/>notification to inform the processing that is performed in methods such as PreRender().<br/></p>
<p><b>Enumerator<br/></b>AAX_eProcessingState_StopPass A single offline processing pass has ended. A single offline<br/></p>
<p>processing pass is an analysis and/or render applied to a set of<br/>channels in parallel.<br/>For Host Processor plug-ins, this notification is sent just before<br/>the final call to PostRender(), or after analysis is complete for<br/>analysis-only offline plug-ins.<br/></p>
<p>AAX_eProcessingState_StartPass A single offline processing pass is beginning. A single offline<br/>processing pass is an analysis and/or render applied to a set of<br/>channels in parallel.<br/>For Host Processor plug-ins, this notification is sent before any<br/>calls to PreAnalyze(), PreRender(), or InitOutputBounds() for<br/>each processing pass.<br/></p>
<p>AAX_eProcessingState_EndPassGroup An offline processing pass group has completed. An offline<br/>processing pass group is a full set of analysis and/or render<br/>passes applied to the complete set of input channels.<br/></p>
<p><b>Host Compatibility Notes </b>AudioSuite pass group notifications<br/>are supported starting in Pro Tools<br/>12.0<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1198 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProcessingState_BeginPassGroup An offline processing pass group is beginning. An offline<br/></p>
<p>processing pass group is a full set of analysis and/or render<br/>passes applied to the complete set of input channels.<br/></p>
<p><b>Host Compatibility Notes </b>AudioSuite pass group notifications<br/>are supported starting in Pro Tools<br/>12.0<br/></p>
<p>AAX_eProcessingState_Stop<br/><b>Deprecated<br/></b></p>
<p>AAX_eProcessingState_Start<br/><b>Deprecated<br/></b></p>
<p><b>15.65.4.38 AAX_ETargetPlatform<br/></b></p>
<p>enum AAX_ETargetPlatform<br/></p>
<p>Describes what platform the component runs on.<br/></p>
<p><b>Enumerator<br/></b>kAAX_eTargetPlatform_None<br/></p>
<p>kAAX_eTargetPlatform_Native<br/>kAAX_eTargetPlatform_TI<br/></p>
<p>kAAX_eTargetPlatform_External<br/>kAAX_eTargetPlatform_Count<br/></p>
<p><b>15.65.4.39 AAX_ESupportLevel<br/></b></p>
<p>enum AAX_ESupportLevel<br/></p>
<p>Feature support indicators<br/></p>
<p><b>See also<br/></b>AAX_IDescriptionHost::AcquireFeatureProperties()<br/></p>
<p><b>Note<br/></b>: There is no value defined for unknown features. Intead, unknown features are indicated by<br/>AcquireFeatureProperties() providing a null AAX_IFeatureInfo in response to a request using the unknown<br/>feature UID<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1199<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eSupportLevel_Uninitialized An uninitialized AAX_ESupportLevel<br/></p>
<p>AAX_eSupportLevel_Unsupported The feature is known but explicitly not supported<br/>AAX_eSupportLevel_Supported<br/></p>
<p>AAX_eSupportLevel_Disabled<br/>AAX_eSupportLevel_ByProperty<br/></p>
<p><b>15.65.4.40 AAX_EHostLevel<br/></b></p>
<p>enum AAX_EHostLevel<br/></p>
<p>Host levels.<br/></p>
<p>Some AAX software hosts support different levels which are sold as separate products. For example, there may be<br/>an entry-level version of a product as well as a full version.<br/></p>
<p>The level of a host may impact the user experience, workflows, or the availability of certain plug-ins. For example,<br/>some entry-level hosts are restricted to loading only specific plug-ins.<br/></p>
<p>Typically an AAX plug-in should not need to query this information or change its behavior based on the level of the<br/>host.<br/></p>
<p><b>Warning<br/></b>AAX plugin description details are cached and are not re-scanned if the host level changes. Be careful to<br/>avoid changing any cacheable information based on this data.<br/></p>
<p><b>See also<br/></b>AAXATTR_Client_Level<br/></p>
<p><b>Enumerator<br/></b>AAX_eHostLevel_Unknown<br/>AAX_eHostLevel_Standard Standard host level.<br/></p>
<p>AAX_eHostLevel_Entry Entry-level host.<br/>AAX_eHostLevel_Intermediate Intermediate-level host.<br/></p>
<p><b>15.65.4.41 AAX_ETextEncoding<br/></b></p>
<p>enum AAX_ETextEncoding<br/></p>
<p>Describes possible string encodings.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1200 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eTextEncoding_Undefined<br/></p>
<p>AAX_eTextEncoding_UTF8 UTF-8 string encoding.<br/>AAX_eTextEncoding_Num<br/></p>
<p><b>15.65.4.42 AAX_EAssertFlags<br/></b></p>
<p>enum AAX_EAssertFlags<br/></p>
<p>Flags for use with AAX_IHostServices::HandleAssertFailure()<br/></p>
<p><b>Enumerator<br/></b>AAX_eAssertFlags_Default No special handler requested.<br/></p>
<p>AAX_eAssertFlags_Log Logging requested.<br/>AAX_eAssertFlags_Dialog User-visible modal alert dialog requested.<br/></p>
<p><b>15.65.4.43 AAX_ETransportState<br/></b></p>
<p>enum AAX_ETransportState<br/></p>
<p>Used to indicate the current transport state of the host. This is the global transport state; it does not indicate a<br/>track-specific state.<br/></p>
<p><b>Enumerator<br/></b>AAX_eTransportState_Unknown<br/>AAX_eTransportState_Stopping<br/></p>
<p>AAX_eTransportState_Stop<br/>AAX_eTransportState_Paused<br/></p>
<p>AAX_eTransportState_Play<br/>AAX_eTransportState_FastForward<br/></p>
<p>AAX_eTransportState_Rewind<br/>AAX_eTransportState_Scrub<br/></p>
<p>AAX_eTransportState_Shuttle<br/>AAX_eTransportState_Num<br/></p>
<p><b>15.65.4.44 AAX_ERecordMode<br/></b></p>
<p>enum AAX_ERecordMode<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1201<br/></b></p>
<p>Used to indicate the current record mode of the host. This is the global record mode; it does not indicate a track-<br/>specific state.<br/></p>
<p><b>Enumerator<br/></b>AAX_eRecordMode_Unknown<br/></p>
<p>AAX_eRecordMode_None<br/>AAX_eRecordMode_Normal<br/></p>
<p>AAX_eRecordMode_Destructive<br/>AAX_eRecordMode_QuickPunch<br/>AAX_eRecordMode_TrackPunch<br/></p>
<p>AAX_eRecordMode_Num<br/></p>
<p><b>15.65.5 Function Documentation<br/></b></p>
<p><b>15.65.5.1 AAX_ENUM_SIZE_CHECK() [1/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EHighlightColor )<br/></p>
<p><b>15.65.5.2 AAX_ENUM_SIZE_CHECK() [2/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_ETracePriorityHost )<br/></p>
<p><b>15.65.5.3 AAX_ENUM_SIZE_CHECK() [3/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_ETracePriorityDSP )<br/></p>
<p><b>15.65.5.4 AAX_ENUM_SIZE_CHECK() [4/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EModifiers )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1202 File Documentation<br/></b></p>
<p><b>15.65.5.5 AAX_ENUM_SIZE_CHECK() [5/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EAudioBufferLength )<br/></p>
<p><b>15.65.5.6 AAX_ENUM_SIZE_CHECK() [6/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EAudioBufferLengthDSP )<br/></p>
<p><b>15.65.5.7 AAX_ENUM_SIZE_CHECK() [7/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAE_EAudioBufferLengthNative )<br/></p>
<p><b>15.65.5.8 AAX_ENUM_SIZE_CHECK() [8/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EMaxAudioSuiteTracks )<br/></p>
<p><b>15.65.5.9 AAX_ENUM_SIZE_CHECK() [9/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EStemFormat )<br/></p>
<p><b>15.65.5.10 AAX_ENUM_SIZE_CHECK() [10/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EPlugInCategory )<br/></p>
<p><b>15.65.5.11 AAX_ENUM_SIZE_CHECK() [11/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EPlugInStrings )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1203<br/></b></p>
<p><b>15.65.5.12 AAX_ENUM_SIZE_CHECK() [12/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EMeterOrientation )<br/></p>
<p><b>15.65.5.13 AAX_ENUM_SIZE_CHECK() [13/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EMeterBallisticType )<br/></p>
<p><b>15.65.5.14 AAX_ENUM_SIZE_CHECK() [14/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EMeterType )<br/></p>
<p><b>15.65.5.15 AAX_ENUM_SIZE_CHECK() [15/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_ECurveType )<br/></p>
<p><b>15.65.5.16 AAX_ENUM_SIZE_CHECK() [16/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EResourceType )<br/></p>
<p><b>15.65.5.17 AAX_ENUM_SIZE_CHECK() [17/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_ENotificationEvent )<br/></p>
<p><b>15.65.5.18 AAX_ENUM_SIZE_CHECK() [18/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EHostModeBits )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1204 File Documentation<br/></b></p>
<p><b>15.65.5.19 AAX_ENUM_SIZE_CHECK() [19/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EHostMode )<br/></p>
<p><b>15.65.5.20 AAX_ENUM_SIZE_CHECK() [20/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EPrivateDataOptions )<br/></p>
<p><b>15.65.5.21 AAX_ENUM_SIZE_CHECK() [21/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EConstraintLocationMask )<br/></p>
<p><b>15.65.5.22 AAX_ENUM_SIZE_CHECK() [22/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EConstraintTopology )<br/></p>
<p><b>15.65.5.23 AAX_ENUM_SIZE_CHECK() [23/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EComponentInstanceInitAction )<br/></p>
<p><b>15.65.5.24 AAX_ENUM_SIZE_CHECK() [24/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_ESampleRateMask )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1205<br/></b></p>
<p><b>15.65.5.25 sampleRateInMask()<br/></b></p>
<p>uint8_t sampleRateInMask (<br/>float inSR,<br/>uint32_t iMask ) [inline]<br/></p>
<p>Determines whether a particular AAX_CSampleRate is present in a given mask of AAX_ESampleRateMask.<br/></p>
<p><b>See also<br/></b>kAAX_Property_SampleRate<br/></p>
<p>References AAX_eSampleRateMask_176400, AAX_eSampleRateMask_192000, AAX_eSampleRateMask_&#8592;&#8617;<br/>44100, AAX_eSampleRateMask_48000, AAX_eSampleRateMask_88200, and AAX_eSampleRateMask_96000.<br/></p>
<p><b>15.65.5.26 getLowestSampleRateInMask()<br/></b></p>
<p>float getLowestSampleRateInMask (<br/>uint32_t iMask ) [inline]<br/></p>
<p>Converts from a mask of AAX_ESampleRateMask to the lowest supported AAX_CSampleRate value in Hz.<br/></p>
<p>References AAX_eSampleRateMask_176400, AAX_eSampleRateMask_192000, AAX_eSampleRateMask_&#8592;&#8617;<br/>44100, AAX_eSampleRateMask_48000, AAX_eSampleRateMask_88200, and AAX_eSampleRateMask_96000.<br/></p>
<p><b>15.65.5.27 getMaskForSampleRate()<br/></b></p>
<p>uint32_t getMaskForSampleRate (<br/>float inSR ) [inline]<br/></p>
<p>Returns the AAX_ESampleRateMask selector for a literal sample rate.<br/></p>
<p>The given rate must be an exact match with one of the available selectors. If no exact match is found then<br/>AAX_eSampleRateMask_No is returned.<br/></p>
<p>References AAX_eSampleRateMask_176400, AAX_eSampleRateMask_192000, AAX_eSampleRateMask_&#8592;&#8617;<br/>44100, AAX_eSampleRateMask_48000, AAX_eSampleRateMask_88200, AAX_eSampleRateMask_96000, and<br/>AAX_eSampleRateMask_No.<br/></p>
<p><b>15.65.5.28 AAX_ENUM_SIZE_CHECK() [25/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EParameterType )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1206 File Documentation<br/></b></p>
<p><b>15.65.5.29 AAX_ENUM_SIZE_CHECK() [26/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EParameterOrientationBits )<br/></p>
<p><b>15.65.5.30 AAX_ENUM_SIZE_CHECK() [27/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EParameterValueInfoSelector )<br/></p>
<p><b>15.65.5.31 AAX_ENUM_SIZE_CHECK() [28/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EEQBandTypes )<br/></p>
<p><b>15.65.5.32 AAX_ENUM_SIZE_CHECK() [29/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EEQInCircuitPolarity )<br/></p>
<p><b>15.65.5.33 AAX_ENUM_SIZE_CHECK() [30/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EUseAlternateControl )<br/></p>
<p><b>15.65.5.34 AAX_ENUM_SIZE_CHECK() [31/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EMIDINodeType )<br/></p>
<p><b>15.65.5.35 AAX_ENUM_SIZE_CHECK() [32/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EUpdateSource )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.65 AAX_Enums.h File Reference 1207<br/></b></p>
<p><b>15.65.5.36 AAX_ENUM_SIZE_CHECK() [33/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EDataInPortType )<br/></p>
<p><b>15.65.5.37 AAX_ENUM_SIZE_CHECK() [34/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EFrameRate )<br/></p>
<p><b>15.65.5.38 AAX_ENUM_SIZE_CHECK() [35/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EFeetFramesRate )<br/></p>
<p><b>15.65.5.39 AAX_ENUM_SIZE_CHECK() [36/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EMidiGlobalNodeSelectors )<br/></p>
<p><b>15.65.5.40 AAX_ENUM_SIZE_CHECK() [37/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EPreviewState )<br/></p>
<p><b>15.65.5.41 AAX_ENUM_SIZE_CHECK() [38/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EProcessingState )<br/></p>
<p><b>15.65.5.42 AAX_ENUM_SIZE_CHECK() [39/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_ETargetPlatform )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1208 File Documentation<br/></b></p>
<p><b>15.65.5.43 AAX_ENUM_SIZE_CHECK() [40/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_ESupportLevel )<br/></p>
<p><b>15.65.5.44 AAX_ENUM_SIZE_CHECK() [41/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EHostLevel )<br/></p>
<p><b>15.65.5.45 AAX_ENUM_SIZE_CHECK() [42/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_ETextEncoding )<br/></p>
<p><b>15.65.5.46 AAX_ENUM_SIZE_CHECK() [43/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EAssertFlags )<br/></p>
<p><b>15.65.5.47 AAX_ENUM_SIZE_CHECK() [44/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_ETransportState )<br/></p>
<p><b>15.65.5.48 AAX_ENUM_SIZE_CHECK() [45/45]<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_ERecordMode )<br/></p>
<p><b>15.66 AAX_EnvironmentUtilities.h File Reference<br/></b></p>
<p>#include &lt;cstdlib&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.67 AAX_Errors.h File Reference 1209<br/></b></p>
<p><b>15.66.1 Description<br/></b></p>
<p>Useful environment definitions for AAX.<br/></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; AAX<br/></p>
<p><b>15.67 AAX_Errors.h File Reference<br/></b></p>
<p>#include &quot;AAX_Enums.h&quot;<br/></p>
<p><b>15.67.1 Description<br/></b></p>
<p>Definitions of error codes used by AAX plug-ins.<br/></p>
<p><b>Enumerations<br/></b></p>
<p>&#8226; enum AAX_EError {<br/>AAX_SUCCESS = 0 ,<br/>AAX_ERROR_INVALID_PARAMETER_ID = -20001 ,<br/>AAX_ERROR_INVALID_STRING_CONVERSION = -20002 ,<br/>AAX_ERROR_INVALID_METER_INDEX = -20003 ,<br/>AAX_ERROR_NULL_OBJECT = -20004 ,<br/>AAX_ERROR_OLDER_VERSION = -20005 ,<br/>AAX_ERROR_INVALID_CHUNK_INDEX = -20006 ,<br/>AAX_ERROR_INVALID_CHUNK_ID = -20007 ,<br/>AAX_ERROR_INCORRECT_CHUNK_SIZE = -20008 ,<br/>AAX_ERROR_UNIMPLEMENTED = -20009 ,<br/>AAX_ERROR_INVALID_PARAMETER_INDEX = -20010 ,<br/>AAX_ERROR_NOT_INITIALIZED = -20011 ,<br/>AAX_ERROR_ACF_ERROR = -20012 ,<br/>AAX_ERROR_INVALID_METER_TYPE = -20013 ,<br/>AAX_ERROR_CONTEXT_ALREADY_HAS_METERS = -20014 ,<br/>AAX_ERROR_NULL_COMPONENT = -20015 ,<br/>AAX_ERROR_PORT_ID_OUT_OF_RANGE = -20016 ,<br/>AAX_ERROR_FIELD_TYPE_DOES_NOT_SUPPORT_DIRECT_ACCESS = -20017 ,<br/>AAX_ERROR_DIRECT_ACCESS_OUT_OF_BOUNDS = -20018 ,<br/>AAX_ERROR_FIFO_FULL = -20019 ,<br/>AAX_ERROR_INITIALIZING_PACKET_STREAM_THREAD = -20020 ,<br/>AAX_ERROR_POST_PACKET_FAILED = -20021 ,<br/>AAX_RESULT_PACKET_STREAM_NOT_EMPTY = -20022 ,<br/>AAX_RESULT_ADD_FIELD_UNSUPPORTED_FIELD_TYPE = -20023 ,<br/>AAX_ERROR_MIXER_THREAD_FALLING_BEHIND = -20024 ,<br/>AAX_ERROR_INVALID_FIELD_INDEX = -20025 ,<br/>AAX_ERROR_MALFORMED_CHUNK = -20026 ,<br/>AAX_ERROR_TOD_BEHIND = -20027 ,<br/>AAX_RESULT_NEW_PACKET_POSTED = -20028 ,<br/>AAX_ERROR_PLUGIN_NOT_AUTHORIZED = -20029 ,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1210 File Documentation<br/></b></p>
<p>AAX_ERROR_PLUGIN_NULL_PARAMETER = -20030 ,<br/>AAX_ERROR_NOTIFICATION_FAILED = -20031 ,<br/>AAX_ERROR_INVALID_VIEW_SIZE = -20032 ,<br/>AAX_ERROR_SIGNED_INT_OVERFLOW = -20033 ,<br/>AAX_ERROR_NO_COMPONENTS = -20034 ,<br/>AAX_ERROR_DUPLICATE_EFFECT_ID = -20035 ,<br/>AAX_ERROR_DUPLICATE_TYPE_ID = -20036 ,<br/>AAX_ERROR_EMPTY_EFFECT_NAME = -20037 ,<br/>AAX_ERROR_UNKNOWN_PLUGIN = -20038 ,<br/>AAX_ERROR_PROPERTY_UNDEFINED = -20039 ,<br/>AAX_ERROR_INVALID_PATH = -20040 ,<br/>AAX_ERROR_UNKNOWN_ID = -20041 ,<br/>AAX_ERROR_UNKNOWN_EXCEPTION = -20042 ,<br/>AAX_ERROR_INVALID_ARGUMENT = -20043 ,<br/>AAX_ERROR_NULL_ARGUMENT = -20044 ,<br/>AAX_ERROR_INVALID_INTERNAL_DATA = -20045 ,<br/>AAX_ERROR_ARGUMENT_BUFFER_OVERFLOW = -20046 ,<br/>AAX_ERROR_UNSUPPORTED_ENCODING = -20047 ,<br/>AAX_ERROR_UNEXPECTED_EFFECT_ID = -20048 ,<br/>AAX_ERROR_NO_ABBREVIATED_PARAMETER_NAME = -20049 ,<br/>AAX_ERROR_ARGUMENT_OUT_OF_RANGE = -20050 ,<br/>AAX_ERROR_PRINT_FAILURE = -20051 ,<br/>AAX_ERROR_PLUGIN_BEGIN = -20600 ,<br/>AAX_ERROR_PLUGIN_END = -21000 }<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EError)<br/></p>
<p><b>15.67.2 Enumeration Type Documentation<br/></b></p>
<p><b>15.67.2.1 AAX_EError<br/></b></p>
<p>enum AAX_EError<br/></p>
<p>AAX result codes<br/></p>
<p><b>Enumerator<br/></b>AAX_SUCCESS<br/></p>
<p>AAX_ERROR_INVALID_PARAMETER_ID<br/>AAX_ERROR_INVALID_STRING_CONVERSION<br/></p>
<p>AAX_ERROR_INVALID_METER_INDEX<br/>AAX_ERROR_NULL_OBJECT<br/></p>
<p>AAX_ERROR_OLDER_VERSION<br/>AAX_ERROR_INVALID_CHUNK_INDEX<br/></p>
<p>AAX_ERROR_INVALID_CHUNK_ID<br/>AAX_ERROR_INCORRECT_CHUNK_SIZE<br/></p>
<p>AAX_ERROR_UNIMPLEMENTED<br/>AAX_ERROR_INVALID_PARAMETER_INDEX<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.67 AAX_Errors.h File Reference 1211<br/></b></p>
<p><b>Enumerator<br/></b>AAX_ERROR_NOT_INITIALIZED<br/></p>
<p>AAX_ERROR_ACF_ERROR<br/>AAX_ERROR_INVALID_METER_TYPE<br/></p>
<p>AAX_ERROR_CONTEXT_ALREADY_HAS_&#8592;&#8617;<br/>METERS<br/></p>
<p>AAX_ERROR_NULL_COMPONENT<br/>AAX_ERROR_PORT_ID_OUT_OF_RANGE<br/></p>
<p>AAX_ERROR_FIELD_TYPE_DOES_NOT_&#8592;&#8617;<br/>SUPPORT_DIRECT_ACCESS<br/></p>
<p>AAX_ERROR_DIRECT_ACCESS_OUT_OF_&#8592;&#8617;<br/>BOUNDS<br/></p>
<p>AAX_ERROR_FIFO_FULL<br/>AAX_ERROR_INITIALIZING_PACKET_STREAM_&#8592;&#8617;<br/></p>
<p>THREAD<br/>AAX_ERROR_POST_PACKET_FAILED<br/></p>
<p>AAX_RESULT_PACKET_STREAM_NOT_EMPTY<br/>AAX_RESULT_ADD_FIELD_UNSUPPORTED_&#8592;&#8617;<br/></p>
<p>FIELD_TYPE<br/>AAX_ERROR_MIXER_THREAD_FALLING_BEHIND<br/></p>
<p>AAX_ERROR_INVALID_FIELD_INDEX<br/>AAX_ERROR_MALFORMED_CHUNK<br/></p>
<p>AAX_ERROR_TOD_BEHIND<br/>AAX_RESULT_NEW_PACKET_POSTED<br/></p>
<p>AAX_ERROR_PLUGIN_NOT_AUTHORIZED<br/>AAX_ERROR_PLUGIN_NULL_PARAMETER<br/></p>
<p>AAX_ERROR_NOTIFICATION_FAILED<br/>AAX_ERROR_INVALID_VIEW_SIZE<br/></p>
<p>AAX_ERROR_SIGNED_INT_OVERFLOW<br/>AAX_ERROR_NO_COMPONENTS<br/></p>
<p>AAX_ERROR_DUPLICATE_EFFECT_ID<br/>AAX_ERROR_DUPLICATE_TYPE_ID<br/></p>
<p>AAX_ERROR_EMPTY_EFFECT_NAME<br/>AAX_ERROR_UNKNOWN_PLUGIN<br/></p>
<p>AAX_ERROR_PROPERTY_UNDEFINED The plugin does not explicitly define a value for a<br/>queried property.<br/></p>
<p>AAX_ERROR_INVALID_PATH<br/>AAX_ERROR_UNKNOWN_ID<br/></p>
<p>AAX_ERROR_UNKNOWN_EXCEPTION An AAX plug-in should return this to the host if an<br/>unknown exception is caught. Exceptions should<br/>never be passed to the host.<br/></p>
<p>AAX_ERROR_INVALID_ARGUMENT One or more input parameters are invalid; all output<br/>parameters are left unchanged.<br/></p>
<p>AAX_ERROR_NULL_ARGUMENT One or more required pointer arguments are null.<br/>AAX_ERROR_INVALID_INTERNAL_DATA Some part of the internal data required by the method<br/></p>
<p>is invalid.<br/><b>See also<br/></b></p>
<p>AAX_ERROR_NOT_INITIALIZED<br/></p>
<p>AAX_ERROR_ARGUMENT_BUFFER_OVERFLOW A buffer argument was not large enough to hold the<br/>data which must be placed within it.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1212 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_ERROR_UNSUPPORTED_ENCODING Unsupported input argument text encoding.<br/></p>
<p>AAX_ERROR_UNEXPECTED_EFFECT_ID Encountered an effect ID with a different value from<br/>what was expected.<br/></p>
<p>AAX_ERROR_NO_ABBREVIATED_PARAMETER&#8592;&#8617;<br/>_NAME<br/></p>
<p>No parameter name abbreviation with the requested<br/>properties has been defined.<br/></p>
<p>AAX_ERROR_ARGUMENT_OUT_OF_RANGE One or more input parameters are out of the expected<br/>range, e.g. an index argument that is negative or<br/>exceeds the number of elements.<br/></p>
<p>AAX_ERROR_PRINT_FAILURE A failure occurred in a &quot;print&quot; library call such as<br/>printf.<br/></p>
<p>AAX_ERROR_PLUGIN_BEGIN Custom plug-in error codes may be placed in the<br/>range ( AAX_ERROR_PLUGIN_END,<br/>AAX_ERROR_PLUGIN_BEGIN ].<br/></p>
<p>AAX_ERROR_PLUGIN_END Custom plug-in error codes may be placed in the<br/>range ( AAX_ERROR_PLUGIN_END,<br/>AAX_ERROR_PLUGIN_BEGIN ].<br/></p>
<p><b>15.67.3 Function Documentation<br/></b></p>
<p><b>15.67.3.1 AAX_ENUM_SIZE_CHECK()<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EError )<br/></p>
<p><b>15.68 AAX_Exception.h File Reference<br/></b></p>
<p>#include &quot;AAX_Assert.h&quot;<br/>#include &quot;AAX_StringUtilities.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;exception&gt;<br/>#include &lt;string&gt;<br/>#include &lt;set&gt;<br/></p>
<p><b>15.68.1 Description<br/></b></p>
<p>AAX SDK exception classes and utilities<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX::Exception::Any<br/>&#8226; class AAX::Exception::ResultError<br/>&#8226; class AAX_CheckedResult<br/>&#8226; class AAX_AggregateResult<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.68 AAX_Exception.h File Reference 1213<br/></b></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; AAX<br/>&#8226; AAX::Exception<br/></p>
<p>AAX exception classes<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_SWALLOW(...)<br/>Executes X in a try/catch block that catches AAX_CheckedResult exceptions.<br/></p>
<p>&#8226; #define AAX_SWALLOW_MULT(...)<br/>Executes X in a try/catch block that catches AAX_CheckedResult exceptions.<br/></p>
<p>&#8226; #define AAX_CAPTURE(X, ...)<br/>Executes Y in a try/catch block that catches AAX::Exception::ResultError exceptions and captures the result.<br/></p>
<p>&#8226; #define AAX_CAPTURE_MULT(X, ...)<br/>Executes Y in a try/catch block that catches AAX::Exception::ResultError exceptions and captures the result.<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; std::string AAX::AsString (const char &#8727;inStr)<br/>&#8226; const std::string &amp; AAX::AsString (const std::string &amp;inStr)<br/>&#8226; const std::string &amp; AAX::AsString (const Exception::Any &amp;inStr)<br/></p>
<p><b>15.68.2 Macro Definition Documentation<br/></b></p>
<p><b>15.68.2.1 AAX_SWALLOW<br/></b></p>
<p>#define AAX_SWALLOW(<br/>... )<br/></p>
<p><b>Value:<br/></b>try { if(true) { ( __VA_ARGS__ ); } } \<br/>catch (const AAX_CheckedResult::Exception&amp; AAX_PREPROCESSOR_CONCAT(ex,__LINE__)) { \<br/>AAX_TRACE_RELEASE(kAAX_Trace_Priority_High, &quot;%s line %d (%s) exception caught: %s (swallowed)&quot;,<br/></p>
<p>__FILE__, __LINE__, __FUNCTION__, AAX_PREPROCESSOR_CONCAT(ex,__LINE__).What().c_str()); \<br/>} do {} while (false)<br/></p>
<p>Executes X in a try/catch block that catches AAX_CheckedResult exceptions.<br/></p>
<p>Catches exceptions thrown from AAX_CheckedResult only - other exceptions require an explicit catch.<br/>AAX_CheckedResult cr;<br/>cr = NecessaryFunc1();<br/>AAX_SWALLOW(cr = FailableFunc());<br/>cr = NecessaryFunc2();<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1214 File Documentation<br/></b></p>
<p><b>15.68.2.2 AAX_SWALLOW_MULT<br/></b></p>
<p>#define AAX_SWALLOW_MULT(<br/>... )<br/></p>
<p><b>Value:<br/></b>try { if(true) { __VA_ARGS__ } } \<br/>catch (const AAX_CheckedResult::Exception&amp; AAX_PREPROCESSOR_CONCAT(ex,__LINE__)) { \<br/>AAX_TRACE_RELEASE(kAAX_Trace_Priority_High, &quot;%s line %d (%s) exception caught: %s (swallowed)&quot;, __FILE__,<br/></p>
<p>__LINE__, __FUNCTION__, AAX_PREPROCESSOR_CONCAT(ex,__LINE__).What().c_str()); \<br/>} do {} while (false)<br/></p>
<p>Executes X in a try/catch block that catches AAX_CheckedResult exceptions.<br/></p>
<p>Version of AAX_SWALLOW for multi-line input.<br/></p>
<p>Catches exceptions thrown from AAX_CheckedResult only - other exceptions require an explicit catch.<br/>AAX_CheckedResult cr;<br/>cr = NecessaryFunc();<br/>AAX_SWALLOW_MULT(<br/></p>
<p>cr = FailableFunc1();<br/>cr = FailableFunc2(); // may not execute<br/>cr = FailableFunc3(); // may not execute<br/></p>
<p>);<br/>cr = NecessaryFunc2();<br/></p>
<p><b>15.68.2.3 AAX_CAPTURE<br/></b></p>
<p>#define AAX_CAPTURE(<br/>X,<br/>... )<br/></p>
<p><b>Value:<br/></b>try { if(true) { ( __VA_ARGS__ ); } } \<br/>catch (const AAX::Exception::ResultError&amp; AAX_PREPROCESSOR_CONCAT(ex,__LINE__)) { \<br/>AAX_TRACE_RELEASE(kAAX_Trace_Priority_High, &quot;%s line %d (%s) exception caught: %s (captured)&quot;, __FILE__,<br/></p>
<p>__LINE__, __FUNCTION__, AAX_PREPROCESSOR_CONCAT(ex,__LINE__).What().c_str()); \<br/>(X) = AAX_PREPROCESSOR_CONCAT(ex,__LINE__).Result(); \<br/>} do {} while (false)<br/></p>
<p>Executes Y in a try/catch block that catches AAX::Exception::ResultError exceptions and captures the result.<br/></p>
<p>Catches exceptions thrown from AAX_CheckedResult and other AAX::Exception::ResultError exceptions.<br/></p>
<p>X must be an AAX_Result<br/>AAX_Result result = AAX_SUCCESS;<br/>AAX_CAPTURE(result, ResultErrorThrowingFunc());<br/>// result now holds the error code thrown by ThrowingFunc()<br/>AAX_CheckedResult cr;<br/>AAX_CAPTURE(result, cr = FailableFunc());<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.69 AAX_Exports.cpp File Reference 1215<br/></b></p>
<p><b>15.68.2.4 AAX_CAPTURE_MULT<br/></b></p>
<p>#define AAX_CAPTURE_MULT(<br/>X,<br/>... )<br/></p>
<p><b>Value:<br/></b>try { if(true) { __VA_ARGS__ } } \<br/>catch (const AAX_CheckedResult::Exception&amp; AAX_PREPROCESSOR_CONCAT(ex,__LINE__)) { \<br/>AAX_TRACE_RELEASE(kAAX_Trace_Priority_High, &quot;%s line %d (%s) exception caught: %s (captured)&quot;, __FILE__,<br/></p>
<p>__LINE__, __FUNCTION__, AAX_PREPROCESSOR_CONCAT(ex,__LINE__).What().c_str()); \<br/>(X) = AAX_PREPROCESSOR_CONCAT(ex,__LINE__).Result(); \<br/>} do {} while (false)<br/></p>
<p>Executes Y in a try/catch block that catches AAX::Exception::ResultError exceptions and captures the result.<br/></p>
<p>Version of AAX_CAPTURE for multi-line input.<br/></p>
<p>Catches exceptions thrown from AAX_CheckedResult and other AAX::Exception::ResultError exceptions.<br/></p>
<p>X must be an AAX_Result or an implicitly convertable type<br/>AAX_Result result = AAX_SUCCESS;<br/>AAX_CAPTURE_MULT(result,<br/></p>
<p>MaybeThrowingFunc1();<br/>MaybeThrowingFunc2();<br/></p>
<p>// can use AAX_CheckedResult within AAX_CAPTURE_MULT<br/>AAX_CheckedResult cr;<br/>cr = FailableFunc1();<br/>cr = FailableFunc2();<br/>cr = FailableFunc3();<br/></p>
<p>);<br/>// result now holds the value of the last thrown error<br/>return result;<br/></p>
<p><b>15.69 AAX_Exports.cpp File Reference<br/></b></p>
<p>#include &quot;AAX_Init.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/>#include &quot;acfresult.h&quot;<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_EXPORT extern &quot;C&quot; __declspec(dllexport) ACFRESULT __stdcall<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; AAX_EXPORT ACFRegisterPlugin (IACFUnknown &#8727;pUnkHostVoid, IACFPluginDefinition &#8727;&#8727;ppPlugin&#8592;&#8617;<br/>DefinitionVoid)<br/></p>
<p>The main plug-in registration method.<br/>&#8226; AAX_EXPORT ACFRegisterComponent (IACFUnknown &#8727;pUnkHost, acfUInt32 index, IACFComponent&#8592;&#8617;<br/></p>
<p>Definition &#8727;&#8727;ppComponentDefinition)<br/>Registers a specific component in the DLL.<br/></p>
<p>&#8226; AAX_EXPORT ACFGetClassFactory (IACFUnknown &#8727;pUnkHost, const acfCLSID &amp;clsid, const acfIID &amp;iid,<br/>void &#8727;&#8727;ppOut)<br/></p>
<p>Gets the factory for a given class ID.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1216 File Documentation<br/></b></p>
<p>&#8226; AAX_EXPORT ACFCanUnloadNow (IACFUnknown &#8727;pUnkHost)<br/>Determines whether or not the host may unload the DLL.<br/></p>
<p>&#8226; AAX_EXPORT ACFStartup (IACFUnknown &#8727;pUnkHost)<br/>DLL initialization routine.<br/></p>
<p>&#8226; AAX_EXPORT ACFShutdown (IACFUnknown &#8727;pUnkHost)<br/>DLL shutdown routine.<br/></p>
<p>&#8226; AAX_EXPORT ACFGetSDKVersion (acfUInt64 &#8727;oSDKVersion)<br/>Returns the DLL's SDK version.<br/></p>
<p><b>15.69.1 Macro Definition Documentation<br/></b></p>
<p><b>15.69.1.1 AAX_EXPORT<br/></b></p>
<p>#define AAX_EXPORT extern &quot;C&quot; __declspec(dllexport) ACFRESULT __stdcall<br/></p>
<p><b>15.69.2 Function Documentation<br/></b></p>
<p><b>15.69.2.1 ACFRegisterPlugin()<br/></b></p>
<p>ACFAPI ACFRegisterPlugin (<br/>IACFUnknown &#8727; pUnkHost,<br/>IACFPluginDefinition &#8727;&#8727; ppPluginDefinition )<br/></p>
<p>The main plug-in registration method.<br/></p>
<p>References AAXRegisterPlugin().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.69.2.2 ACFRegisterComponent()<br/></b></p>
<p>ACFAPI ACFRegisterComponent (<br/>IACFUnknown &#8727; pUnkHost,<br/>acfUInt32 index,<br/>IACFComponentDefinition &#8727;&#8727; ppComponentDefinition )<br/></p>
<p>Registers a specific component in the DLL.<br/></p>
<p>References AAXRegisterComponent().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.69 AAX_Exports.cpp File Reference 1217<br/></b></p>
<p><b>15.69.2.3 ACFGetClassFactory()<br/></b></p>
<p>ACFAPI ACFGetClassFactory (<br/>IACFUnknown &#8727; pUnkHost,<br/>const acfCLSID &amp; clsid,<br/>const acfIID &amp; iid,<br/>void &#8727;&#8727; ppOut )<br/></p>
<p>Gets the factory for a given class ID.<br/></p>
<p>References AAXGetClassFactory().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.69.2.4 ACFCanUnloadNow()<br/></b></p>
<p>ACFAPI ACFCanUnloadNow (<br/>IACFUnknown &#8727; pUnkHost )<br/></p>
<p>Determines whether or not the host may unload the DLL.<br/></p>
<p>References AAXCanUnloadNow().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.69.2.5 ACFStartup()<br/></b></p>
<p>ACFAPI ACFStartup (<br/>IACFUnknown &#8727; pUnkHost )<br/></p>
<p>DLL initialization routine.<br/></p>
<p>References AAXStartup().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.69.2.6 ACFShutdown()<br/></b></p>
<p>ACFAPI ACFShutdown (<br/>IACFUnknown &#8727; pUnkHost )<br/></p>
<p>DLL shutdown routine.<br/></p>
<p>References AAXShutdown().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1218 File Documentation<br/></b></p>
<p><b>15.69.2.7 ACFGetSDKVersion()<br/></b></p>
<p>ACFAPI ACFGetSDKVersion (<br/>acfUInt64 &#8727; oSDKVersion )<br/></p>
<p>Returns the DLL's SDK version.<br/></p>
<p>References AAXGetSDKVersion().<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.70 AAX_FastInterpolatedTableLookup.h File Reference<br/></b></p>
<p>#include &quot;AAX_Quantize.h&quot;<br/>#include &lt;AAX_ALIGN_FILE_BEGIN&gt;<br/>#include &lt;AAX_ALIGN_FILE_ALG&gt;<br/>#include &lt;AAX_ALIGN_FILE_END&gt;<br/>#include &lt;AAX_ALIGN_FILE_RESET&gt;<br/>#include &quot;AAX_FastInterpolatedTableLookup.hpp&quot;<br/></p>
<p><b>15.70.1 Description<br/></b></p>
<p>A set of functions that provide lookup table functionality. Not necessarily optimized for TI, but used internally.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT &gt;<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_FASTINTERPOLATEDTABLELOOKUP_H<br/></p>
<p><b>15.70.2 Macro Definition Documentation<br/></b></p>
<p><b>15.70.2.1 AAX_FASTINTERPOLATEDTABLELOOKUP_H<br/></b></p>
<p>#define AAX_FASTINTERPOLATEDTABLELOOKUP_H<br/></p>
<p><b>15.71 AAX_FastInterpolatedTableLookup.hpp File Reference<br/></b></p>
<p>#include &quot;AAX_Quantize.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.72 AAX_FastPow.h File Reference 1219<br/></b></p>
<p><b>15.72 AAX_FastPow.h File Reference<br/></b></p>
<p>#include &lt;cmath&gt;<br/>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.72.1 Description<br/></b></p>
<p>Set of functions to optimize pow.<br/></p>
<p>To use:<br/>const int kPowTableExtent = 9; // Lower values are less precise. 9 is the maximum<br/>float powTableH[kPowTableSize];<br/>float powTableL[kPowTableSize];<br/>int radix = 2; // This should be whatever radix you want. Ie: radix ^ exp<br/>PowFastSetTable( powTableH, kPowExtent, kPowExtent, false ); // Set the high table<br/>PowFastSetTable( powTableL, kPowExtent*2, kPowExtent, true );// Set the low table<br/>..<br/>result = powFastLookup(exp, log(2) / log(radix), powTableH, powTableL);<br/></p>
<p><b>Namespaces<br/></b>&#8226; AAX<br/></p>
<p><b>Macros<br/></b>&#8226; #define _AAX_FASTPOW_H_<br/></p>
<p><b>Variables<br/></b>&#8226; const unsigned int AAX::kPowExtent = 9<br/>&#8226; const unsigned int AAX::kPowTableSize = 1 &lt;&lt; kPowExtent<br/></p>
<p><b>15.72.2 Macro Definition Documentation<br/></b></p>
<p><b>15.72.2.1 _AAX_FASTPOW_H_<br/></b></p>
<p>#define _AAX_FASTPOW_H_<br/></p>
<p><b>15.73 AAX_Getting_Started_Guide.doxygen File Reference<br/></b></p>
<p><b>15.74 AAX_GUITypes.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_PreStructAlignmentHelper.h&quot;<br/>#include &quot;AAX_Push2ByteStructAlignment.h&quot;<br/>#include &quot;AAX_PostStructAlignmentHelper.h&quot;<br/>#include &quot;AAX_PopStructAlignment.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1220 File Documentation<br/></b></p>
<p><b>15.74.1 Description<br/></b></p>
<p>Constants and other definitions used by AAX plug-in GUIs.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; struct AAX_Point<br/>Data structure representing a two-dimensional coordinate point.<br/></p>
<p>&#8226; struct AAX_Rect<br/>Data structure representing a rectangle in a two-dimensional coordinate plane.<br/></p>
<p><b>Typedefs<br/></b></p>
<p>&#8226; typedef struct AAX_Point AAX_Point<br/>Data structure representing a two-dimensional coordinate point.<br/></p>
<p>&#8226; typedef struct AAX_Rect AAX_Rect<br/>Data structure representing a rectangle in a two-dimensional coordinate plane.<br/></p>
<p>&#8226; typedef enum AAX_EViewContainer_Type AAX_EViewContainer_Type<br/>Type of view container.<br/></p>
<p><b>Enumerations<br/></b></p>
<p>&#8226; enum AAX_EViewContainer_Type {<br/>AAX_eViewContainer_Type_NULL = 0 ,<br/>AAX_eViewContainer_Type_NSView = 1 ,<br/>AAX_eViewContainer_Type_UIView = 2 ,<br/>AAX_eViewContainer_Type_HWND = 3 }<br/></p>
<p>Type of view container.<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; bool operator== (const AAX_Point &amp;p1, const AAX_Point &amp;p2)<br/>&#8226; bool operator!= (const AAX_Point &amp;p1, const AAX_Point &amp;p2)<br/>&#8226; bool operator&lt; (const AAX_Point &amp;p1, const AAX_Point &amp;p2)<br/>&#8226; bool operator&lt;= (const AAX_Point &amp;p1, const AAX_Point &amp;p2)<br/>&#8226; bool operator&gt; (const AAX_Point &amp;p1, const AAX_Point &amp;p2)<br/>&#8226; bool operator&gt;= (const AAX_Point &amp;p1, const AAX_Point &amp;p2)<br/>&#8226; bool operator== (const AAX_Rect &amp;r1, const AAX_Rect &amp;r2)<br/>&#8226; bool operator!= (const AAX_Rect &amp;r1, const AAX_Rect &amp;r2)<br/>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EViewContainer_Type)<br/></p>
<p><b>15.74.2 Typedef Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.74 AAX_GUITypes.h File Reference 1221<br/></b></p>
<p><b>15.74.2.1 AAX_Point<br/></b></p>
<p>typedef struct AAX_Point AAX_Point<br/></p>
<p>Data structure representing a two-dimensional coordinate point.<br/></p>
<p>Comparison operators give preference to vert<br/></p>
<p><b>15.74.2.2 AAX_Rect<br/></b></p>
<p>typedef struct AAX_Rect AAX_Rect<br/></p>
<p>Data structure representing a rectangle in a two-dimensional coordinate plane.<br/></p>
<p><b>15.74.2.3 AAX_EViewContainer_Type<br/></b></p>
<p>typedef enum AAX_EViewContainer_Type AAX_EViewContainer_Type<br/></p>
<p>Type of view container.<br/></p>
<p><b>See also<br/></b>AAX_IViewContainer::GetType()<br/></p>
<p><b>15.74.3 Enumeration Type Documentation<br/></b></p>
<p><b>15.74.3.1 AAX_EViewContainer_Type<br/></b></p>
<p>enum AAX_EViewContainer_Type<br/></p>
<p>Type of view container.<br/></p>
<p><b>See also<br/></b>AAX_IViewContainer::GetType()<br/></p>
<p><b>Enumerator<br/></b>AAX_eViewContainer_Type_NULL<br/></p>
<p>AAX_eViewContainer_Type_NSView<br/>AAX_eViewContainer_Type_UIView<br/>AAX_eViewContainer_Type_HWND<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1222 File Documentation<br/></b></p>
<p><b>15.74.4 Function Documentation<br/></b></p>
<p><b>15.74.4.1 operator==() [1/2]<br/></b></p>
<p>bool operator== (<br/>const AAX_Point &amp; p1,<br/>const AAX_Point &amp; p2 ) [inline]<br/></p>
<p>References AAX_Point::horz, and AAX_Point::vert.<br/></p>
<p><b>15.74.4.2 operator&quot;!=() [1/2]<br/></b></p>
<p>bool operator!= (<br/>const AAX_Point &amp; p1,<br/>const AAX_Point &amp; p2 ) [inline]<br/></p>
<p><b>15.74.4.3 operator</b>&lt;<b>()<br/></b></p>
<p>bool operator&lt; (<br/>const AAX_Point &amp; p1,<br/>const AAX_Point &amp; p2 ) [inline]<br/></p>
<p>References AAX_Point::horz, and AAX_Point::vert.<br/></p>
<p><b>15.74.4.4 operator</b>&lt;<b>=()<br/></b></p>
<p>bool operator&lt;= (<br/>const AAX_Point &amp; p1,<br/>const AAX_Point &amp; p2 ) [inline]<br/></p>
<p>References AAX_Point::horz, and AAX_Point::vert.<br/></p>
<p><b>15.74.4.5 operator</b>&gt;<b>()<br/></b></p>
<p>bool operator&gt; (<br/>const AAX_Point &amp; p1,<br/>const AAX_Point &amp; p2 ) [inline]<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.75 AAX_HostSupport.doxygen File Reference 1223<br/></b></p>
<p><b>15.74.4.6 operator</b>&gt;<b>=()<br/></b></p>
<p>bool operator&gt;= (<br/>const AAX_Point &amp; p1,<br/>const AAX_Point &amp; p2 ) [inline]<br/></p>
<p><b>15.74.4.7 operator==() [2/2]<br/></b></p>
<p>bool operator== (<br/>const AAX_Rect &amp; r1,<br/>const AAX_Rect &amp; r2 ) [inline]<br/></p>
<p>References AAX_Rect::height, AAX_Rect::left, AAX_Rect::top, and AAX_Rect::width.<br/></p>
<p><b>15.74.4.8 operator&quot;!=() [2/2]<br/></b></p>
<p>bool operator!= (<br/>const AAX_Rect &amp; r1,<br/>const AAX_Rect &amp; r2 ) [inline]<br/></p>
<p><b>15.74.4.9 AAX_ENUM_SIZE_CHECK()<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EViewContainer_Type )<br/></p>
<p><b>15.75 AAX_HostSupport.doxygen File Reference<br/></b></p>
<p><b>15.76 AAX_IACFAutomationDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.76.1 Description<br/></b></p>
<p>Versioned interface allowing an AAX plug-in to interact with the host's automation system.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1224 File Documentation<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFAutomationDelegate<br/></p>
<p>Versioned interface allowing an AAX plug-in to interact with the host's automation system.<br/></p>
<p><b>15.77 AAX_IACFCollection.h File Reference<br/></b></p>
<p>#include &quot;acfbaseapi.h&quot;<br/></p>
<p><b>15.77.1 Description<br/></b></p>
<p>Versioned interface to represent a plug-in binary's static description.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFCollection<br/></p>
<p>Versioned interface to represent a plug-in binary's static description.<br/></p>
<p><b>15.78 AAX_IACFComponentDescriptor.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_Callbacks.h&quot;<br/>#include &quot;AAX_IDma.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.78.1 Description<br/></b></p>
<p>Versioned description interface for an AAX plug-in algorithm callback.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFComponentDescriptor<br/></p>
<p>Versioned description interface for an AAX plug-in algorithm callback.<br/>&#8226; class AAX_IACFComponentDescriptor_V2<br/></p>
<p>Versioned description interface for an AAX plug-in algorithm callback.<br/>&#8226; class AAX_IACFComponentDescriptor_V3<br/></p>
<p>Versioned description interface for an AAX plug-in algorithm callback.<br/></p>
<p><b>15.79 AAX_IACFController.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.80 AAX_IACFDataBuffer.h File Reference 1225<br/></b></p>
<p><b>15.79.1 Description<br/></b></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the AAXHost and by effect<br/>components.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFController<br/></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the AAXHost and by effect<br/>components.<br/></p>
<p>&#8226; class AAX_IACFController_V2<br/>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the AAXHost and by effect<br/>components.<br/></p>
<p>&#8226; class AAX_IACFController_V3<br/>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the AAXHost and by effect<br/>components.<br/></p>
<p><b>15.80 AAX_IACFDataBuffer.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFDataBuffer<br/></p>
<p>Versioned interface for reference counted data buffers.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_IACFDataBuffer_H<br/></p>
<p><b>15.80.1 Macro Definition Documentation<br/></b></p>
<p><b>15.80.1.1 AAX_IACFDataBuffer_H<br/></b></p>
<p>#define AAX_IACFDataBuffer_H<br/></p>
<p><b>15.81 AAX_IACFDescriptionHost.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfbaseapi.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1226 File Documentation<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFDescriptionHost<br/></p>
<p><b>15.82 AAX_IACFEffectDescriptor.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_Callbacks.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.82.1 Description<br/></b></p>
<p>Versioned interface for an AAX_IEffectDescriptor.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFEffectDescriptor<br/></p>
<p>Versioned interface for an AAX_IEffectDescriptor.<br/>&#8226; class AAX_IACFEffectDescriptor_V2<br/></p>
<p>Versioned interface for an AAX_IEffectDescriptor.<br/></p>
<p><b>15.83 AAX_IACFEffectDirectData.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.83.1 Description<br/></b></p>
<p>The direct data access interface that gets exposed to the host application.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFEffectDirectData<br/></p>
<p>Optional interface for direct access to a plug-in's alg memory.<br/>&#8226; class AAX_IACFEffectDirectData_V2<br/></p>
<p><b>15.84 AAX_IACFEffectGUI.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_GUITypes.h&quot;<br/>#include &quot;AAX_IString.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.85 AAX_IACFEffectParameters.h File Reference 1227<br/></b></p>
<p><b>15.84.1 Description<br/></b></p>
<p>The GUI interface that gets exposed to the host application.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFEffectGUI<br/>The interface for a AAX Plug-in's GUI (graphical user interface).<br/></p>
<p><b>15.85 AAX_IACFEffectParameters.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.85.1 Description<br/></b></p>
<p>The data model interface that is exposed to the host application.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFEffectParameters<br/>The interface for an AAX Plug-in's data model.<br/></p>
<p>&#8226; struct AAX_SHybridRenderInfo<br/>Hybrid render processing context.<br/></p>
<p>&#8226; class AAX_IACFEffectParameters_V2<br/>Supplemental interface for an AAX Plug-in's data model.<br/></p>
<p>&#8226; class AAX_IACFEffectParameters_V3<br/>Supplemental interface for an AAX Plug-in's data model.<br/></p>
<p>&#8226; class AAX_IACFEffectParameters_V4<br/>Supplemental interface for an AAX Plug-in's data model.<br/></p>
<p><b>15.86 AAX_IACFFeatureInfo.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFFeatureInfo<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1228 File Documentation<br/></b></p>
<p><b>15.87 AAX_IACFHostProcessor.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.87.1 Description<br/></b></p>
<p>The host processor interface that is exposed to the host application.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFHostProcessor<br/></p>
<p>Versioned interface for an AAX host processing component.<br/>&#8226; class AAX_IACFHostProcessor_V2<br/></p>
<p>Supplemental interface for an AAX host processing component.<br/></p>
<p><b>15.88 AAX_IACFHostProcessorDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFHostProcessorDelegate<br/></p>
<p>Versioned interface for host methods specific to offline processing.<br/>&#8226; class AAX_IACFHostProcessorDelegate_V2<br/></p>
<p>Versioned interface for host methods specific to offline processing.<br/>&#8226; class AAX_IACFHostProcessorDelegate_V3<br/></p>
<p>Versioned interface for host methods specific to offline processing.<br/></p>
<p><b>15.89 AAX_IACFHostServices.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFHostServices<br/></p>
<p>Versioned interface to diagnostic and debugging services provided by the AAX host.<br/>&#8226; class AAX_IACFHostServices_V2<br/></p>
<p>V2 of versioned interface to diagnostic and debugging services provided by the AAX host.<br/>&#8226; class AAX_IACFHostServices_V3<br/></p>
<p>V3 of versioned interface to diagnostic and debugging services provided by the AAX host.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.90 AAX_IACFPageTable.h File Reference 1229<br/></b></p>
<p><b>15.90 AAX_IACFPageTable.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFPageTable<br/>Versioned interface to the host's representation of a plug-in instance's page table.<br/></p>
<p>&#8226; class AAX_IACFPageTable_V2<br/>Versioned interface to the host's representation of a plug-in instance's page table.<br/></p>
<p><b>15.91 AAX_IACFPageTableController.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFPageTableController<br/>Interface for host operations related to the page tables for this plug-in.<br/></p>
<p>&#8226; class AAX_IACFPageTableController_V2<br/>Interface for host operations related to the page tables for this plug-in.<br/></p>
<p><b>15.92 AAX_IACFPrivateDataAccess.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.92.1 Description<br/></b></p>
<p>Interface for the AAX host's data access functionality.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFPrivateDataAccess<br/>Interface for the AAX host's data access functionality.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1230 File Documentation<br/></b></p>
<p><b>15.93 AAX_IACFPropertyMap.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.93.1 Description<br/></b></p>
<p>Versioned interface for an AAX_IPropertyMap.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFPropertyMap<br/>Versioned interface for an AAX_IPropertyMap.<br/></p>
<p>&#8226; class AAX_IACFPropertyMap_V2<br/>Versioned interface for an AAX_IPropertyMap.<br/></p>
<p>&#8226; class AAX_IACFPropertyMap_V3<br/>Versioned interface for an AAX_IPropertyMap.<br/></p>
<p><b>15.94 AAX_IACFSessionDocument.h File Reference<br/></b></p>
<p>#include &quot;AAX_UIDs.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFSessionDocument<br/>Interface representing information in a host session document.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_IACFSessionDocument_H<br/></p>
<p><b>15.94.1 Macro Definition Documentation<br/></b></p>
<p><b>15.94.1.1 AAX_IACFSessionDocument_H<br/></b></p>
<p>#define AAX_IACFSessionDocument_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.95 AAX_IACFSessionDocumentClient.h File Reference 1231<br/></b></p>
<p><b>15.95 AAX_IACFSessionDocumentClient.h File Reference<br/></b></p>
<p>#include &quot;AAX_UIDs.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFSessionDocumentClient<br/>Interface representing a client of the session document interface.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_IACFSessionDocumentClient_H<br/></p>
<p><b>15.95.1 Macro Definition Documentation<br/></b></p>
<p><b>15.95.1.1 AAX_IACFSessionDocumentClient_H<br/></b></p>
<p>#define AAX_IACFSessionDocumentClient_H<br/></p>
<p><b>15.96 AAX_IACFTask.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.96.1 Description<br/></b></p>
<p>Defines the interface representing an asynchronous task.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFTask<br/>Versioned interface for an asynchronous task.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_IACFTask_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1232 File Documentation<br/></b></p>
<p><b>Enumerations<br/></b>&#8226; enum class AAX_TaskCompletionStatus : int32_t {<br/></p>
<p>None = 0 ,<br/>Done = 1 ,<br/>Canceled = 2 ,<br/>Error = 3 }<br/></p>
<p><b>15.96.2 Macro Definition Documentation<br/></b></p>
<p><b>15.96.2.1 AAX_IACFTask_H<br/></b></p>
<p>#define AAX_IACFTask_H<br/></p>
<p><b>15.97 AAX_IACFTaskAgent.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFTaskAgent<br/></p>
<p>Versioned interface for a component that accepts task requests.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_IACFTaskAgent_H<br/></p>
<p><b>15.97.1 Macro Definition Documentation<br/></b></p>
<p><b>15.97.1.1 AAX_IACFTaskAgent_H<br/></b></p>
<p>#define AAX_IACFTaskAgent_H<br/></p>
<p><b>15.98 AAX_IACFTransport.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_Enums.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.99 AAX_IACFTransportControl.h File Reference 1233<br/></b></p>
<p><b>15.98.1 Description<br/></b></p>
<p>Interface for accessing the host's transport state.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFTransport<br/>Versioned interface to get information about the host's transport state.<br/></p>
<p>&#8226; class AAX_IACFTransport_V2<br/>Versioned interface to get information about the host's transport state.<br/></p>
<p>&#8226; class AAX_IACFTransport_V3<br/>Versioned interface to get information about the host's transport state.<br/></p>
<p>&#8226; class AAX_IACFTransport_V4<br/>Versioned interface to get information about the host's transport state.<br/></p>
<p>&#8226; class AAX_IACFTransport_V5<br/>Versioned interface to get information about the host's transport state.<br/></p>
<p><b>15.99 AAX_IACFTransportControl.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_Enums.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.99.1 Description<br/></b></p>
<p>Interface for control over the host's transport state.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IACFTransportControl<br/>Versioned interface to control the host's transport state.<br/></p>
<p><b>15.100 AAX_IACFViewContainer.h File Reference<br/></b></p>
<p>#include &quot;AAX_GUITypes.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/></p>
<p><b>15.100.1 Description<br/></b></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the AAXHost and by effect<br/>components.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1234 File Documentation<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_IACFViewContainer<br/></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the host app and by effect<br/>components.<br/></p>
<p>&#8226; class AAX_IACFViewContainer_V2<br/>Supplemental interface for the AAX host's view of a single instance of an effect. Used by both clients of the host app<br/>and by effect components.<br/></p>
<p>&#8226; class AAX_IACFViewContainer_V3<br/>Additional methods to track mouse as it moves over controls.<br/></p>
<p><b>15.101 AAX_IAutomationDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.101.1 Description<br/></b></p>
<p>Interface allowing an AAX plug-in to interact with the host's automation system.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IAutomationDelegate<br/></p>
<p>Interface allowing an AAX plug-in to interact with the host's event system.<br/></p>
<p><b>15.102 AAX_ICollection.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.102.1 Description<br/></b></p>
<p>Interface to represent a plug-in binary's static description.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_ICollection<br/></p>
<p>Interface to represent a plug-in binary's static description.<br/></p>
<p><b>15.103 AAX_IComponentDescriptor.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_IDma.h&quot;<br/>#include &quot;AAX_Callbacks.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.104 AAX_IContainer.h File Reference 1235<br/></b></p>
<p><b>15.103.1 Description<br/></b></p>
<p>Description interface for an AAX plug-in algorithm.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IComponentDescriptor<br/></p>
<p>Description interface for an AAX plug-in component.<br/></p>
<p><b>15.104 AAX_IContainer.h File Reference<br/></b></p>
<p><b>15.104.1 Description<br/></b></p>
<p>Abstract container interface.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IContainer<br/></p>
<p><b>15.105 AAX_IController.h File Reference<br/></b></p>
<p>#include &quot;AAX_Properties.h&quot;<br/>#include &quot;AAX_IString.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;memory&gt;<br/></p>
<p><b>15.105.1 Description<br/></b></p>
<p>Interface for the AAX host's view of a single instance of an effect.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IController<br/></p>
<p>Interface for the AAX host's view of a single instance of an effect. Used by both clients of the AAX host and by effect<br/>components.<br/></p>
<p><b>15.106 AAX_IDataBuffer.h File Reference<br/></b></p>
<p>#include &quot;AAX_IACFDataBuffer.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;CACFUnknown.h&quot;<br/>#include &quot;AAX_UIDs.h&quot;<br/>#include &quot;acfextras.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1236 File Documentation<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_IDataBuffer<br/></p>
<p>Interface for reference counted data buffers.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_IDataBuffer_H<br/></p>
<p><b>15.106.1 Macro Definition Documentation<br/></b></p>
<p><b>15.106.1.1 AAX_IDataBuffer_H<br/></b></p>
<p>#define AAX_IDataBuffer_H<br/></p>
<p><b>15.107 AAX_IDataBufferWrapper.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IDataBufferWrapper<br/></p>
<p>Wrapper for an AAX_IDataBuffer.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_IDATABUFFERWRAPPER_H<br/></p>
<p><b>15.107.1 Macro Definition Documentation<br/></b></p>
<p><b>15.107.1.1 AAX_IDATABUFFERWRAPPER_H<br/></b></p>
<p>#define AAX_IDATABUFFERWRAPPER_H<br/></p>
<p><b>15.108 AAX_IDescriptionHost.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.109 AAX_IDisplayDelegate.h File Reference 1237<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_IDescriptionHost<br/></p>
<p><b>15.109 AAX_IDisplayDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.109.1 Description<br/></b></p>
<p>Defines the display behavior for a parameter.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IDisplayDelegateBase<br/></p>
<p>Defines the display behavior for a parameter.<br/>&#8226; class AAX_IDisplayDelegate&lt; T &gt;<br/></p>
<p>Classes for parameter value string conversion.<br/></p>
<p><b>15.110 AAX_IDisplayDelegateDecorator.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDisplayDelegate.h&quot;<br/></p>
<p><b>15.110.1 Description<br/></b></p>
<p>The base class for all concrete display delegate decorators.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IDisplayDelegateDecorator&lt; T &gt;<br/></p>
<p>The base class for all concrete display delegate decorators.<br/></p>
<p><b>15.111 AAX_IDma.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.111.1 Description<br/></b></p>
<p>Cross-platform interface for access to the host's direct memory access (DMA) facilities.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1238 File Documentation<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_IDma<br/></p>
<p>Cross-platform interface for access to the host's direct memory access (DMA) facilities.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_IDMA_H<br/>&#8226; #define AAX_DMA_API<br/></p>
<p><b>15.111.2 Macro Definition Documentation<br/></b></p>
<p><b>15.111.2.1 AAX_IDMA_H<br/></b></p>
<p>#define AAX_IDMA_H<br/></p>
<p><b>15.111.2.2 AAX_DMA_API<br/></b></p>
<p>#define AAX_DMA_API<br/></p>
<p><b>15.112 AAX_IEffectDescriptor.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_Callbacks.h&quot;<br/></p>
<p><b>15.112.1 Description<br/></b></p>
<p>Description interface for an effect's (plug-in type's) components.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IEffectDescriptor<br/></p>
<p>Description interface for an effect's (plug-in type's) components.<br/></p>
<p><b>15.113 AAX_IEffectDirectData.h File Reference<br/></b></p>
<p>#include &quot;AAX_IACFEffectDirectData.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;CACFUnknown.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.114 AAX_IEffectGUI.h File Reference 1239<br/></b></p>
<p><b>15.113.1 Description<br/></b></p>
<p>Optional interface for direct access to alg memory.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IEffectDirectData<br/>The interface for a AAX Plug-in's direct data interface.<br/></p>
<p><b>15.114 AAX_IEffectGUI.h File Reference<br/></b></p>
<p>#include &quot;AAX_IACFEffectGUI.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;CACFUnknown.h&quot;<br/></p>
<p><b>15.114.1 Description<br/></b></p>
<p>The interface for a AAX Plug-in's user interface.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IEffectGUI<br/>The interface for a AAX Plug-in's user interface.<br/></p>
<p><b>15.115 AAX_IEffectParameters.h File Reference<br/></b></p>
<p>#include &quot;AAX_IACFEffectParameters.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;CACFUnknown.h&quot;<br/></p>
<p><b>15.115.1 Description<br/></b></p>
<p>The interface for an AAX Plug-in's data model.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IEffectParameters<br/>The interface for an AAX Plug-in's data model.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1240 File Documentation<br/></b></p>
<p><b>15.116 AAX_IFeatureInfo.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IFeatureInfo<br/></p>
<p><b>15.117 AAX_IHostProcessor.h File Reference<br/></b></p>
<p>#include &quot;AAX_IACFHostProcessor.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;CACFUnknown.h&quot;<br/></p>
<p><b>15.117.1 Description<br/></b></p>
<p>Base class for the host processor interface which is extended by plugin code.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IHostProcessor<br/></p>
<p>Base class for the host processor interface.<br/></p>
<p><b>15.118 AAX_IHostProcessorDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.118.1 Description<br/></b></p>
<p>Interface allowing plug-in's HostProcessor to interact with the host's side.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IHostProcessorDelegate<br/></p>
<p>Versioned interface for host methods specific to offline processing.<br/></p>
<p><b>15.119 AAX_IHostServices.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.120 AAX_IHostTaskAgent.h File Reference 1241<br/></b></p>
<p><b>15.119.1 Description<br/></b></p>
<p>Various host services.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IHostServices<br/></p>
<p>Interface to diagnostic and debugging services provided by the AAX host.<br/></p>
<p><b>15.120 AAX_IHostTaskAgent.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;CACFUnknown.h&quot;<br/></p>
<p><b>15.120.1 Description<br/></b></p>
<p>Interface to access an AAX_IACFTaskAgent object implemented by the host.<br/></p>
<p>Version-managed concrete HostTaskAgent class.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_IHostTaskAgent<br/></p>
<p>Interface to access an AAX_IACFTaskAgent object implemented by the host.<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_IHostTaskAgent_H<br/></p>
<p><b>15.120.2 Macro Definition Documentation<br/></b></p>
<p><b>15.120.2.1 AAX_IHostTaskAgent_H<br/></b></p>
<p>#define AAX_IHostTaskAgent_H<br/></p>
<p><b>15.121 AAX_IMIDINode.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_ITransport.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1242 File Documentation<br/></b></p>
<p><b>15.121.1 Description<br/></b></p>
<p>Declaration of the base MIDI Node interface.<br/></p>
<p><b>Author<br/></b>by Andriy Goshko<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IMIDINode<br/>Interface for accessing information in a MIDI node.<br/></p>
<p><b>15.122 AAX_Init.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;acfbasetypes.h&quot;<br/></p>
<p><b>15.122.1 Description<br/></b></p>
<p>AAX library implementations of required plug-in initialization, registration, and tear-down methods.<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; AAX_Result AAXRegisterPlugin (IACFUnknown &#8727;pUnkHost, IACFPluginDefinition &#8727;&#8727;ppPluginDefinition)<br/>The main plug-in registration method.<br/></p>
<p>&#8226; AAX_Result AAXRegisterComponent (IACFUnknown &#8727;pUnkHost, acfUInt32 index, IACFComponent&#8592;&#8617;<br/>Definition &#8727;&#8727;ppComponentDefinition)<br/></p>
<p>Registers a specific component in the DLL.<br/>&#8226; AAX_Result AAXGetClassFactory (IACFUnknown &#8727;pUnkHost, const acfCLSID &amp;clsid, const acfIID &amp;iid, void<br/>&#8727;&#8727;ppOut)<br/></p>
<p>Gets the factory for a given class ID.<br/>&#8226; AAX_Result AAXCanUnloadNow (IACFUnknown &#8727;pUnkHost)<br/></p>
<p>Determines whether or not the host may unload the DLL.<br/>&#8226; AAX_Result AAXStartup (IACFUnknown &#8727;pUnkHost)<br/></p>
<p>DLL initialization routine.<br/>&#8226; AAX_Result AAXShutdown (IACFUnknown &#8727;pUnkHost)<br/></p>
<p>DLL shutdown routine.<br/>&#8226; AAX_Result AAXGetSDKVersion (acfUInt64 &#8727;oSDKVersion)<br/></p>
<p>Returns the DLL's SDK version.<br/></p>
<p><b>15.122.2 Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.122 AAX_Init.h File Reference 1243<br/></b></p>
<p><b>15.122.2.1 AAXRegisterComponent()<br/></b></p>
<p>AAX_Result AAXRegisterComponent (<br/>IACFUnknown &#8727; pUnkHost,<br/>acfUInt32 index,<br/>IACFComponentDefinition &#8727;&#8727; ppComponentDefinition )<br/></p>
<p>Registers a specific component in the DLL.<br/></p>
<p>The implementation of this method in the AAX library simply sets &#8727;ppComponentDefinition to NULL and<br/>returns AAX_SUCCESS.<br/></p>
<p>Wrapped by ACFRegisterComponent()<br/></p>
<p>Referenced by ACFRegisterComponent().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>15.122.2.2 AAXGetClassFactory()<br/></b></p>
<p>AAX_Result AAXGetClassFactory (<br/>IACFUnknown &#8727; pUnkHost,<br/>const acfCLSID &amp; clsid,<br/>const acfIID &amp; iid,<br/>void &#8727;&#8727; ppOut )<br/></p>
<p>Gets the factory for a given class ID.<br/></p>
<p>This method is required by ACF but is not supported by AAX. Therefore the implementation of this method in the<br/>AAX library simply sets &#8727;ppOut to NULL and returns AAX_ERROR_UNIMPLEMENTED.<br/></p>
<p>Wrapped by ACFGetClassFactory()<br/></p>
<p>Referenced by ACFGetClassFactory().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>15.122.2.3 AAXCanUnloadNow()<br/></b></p>
<p>AAX_Result AAXCanUnloadNow (<br/>IACFUnknown &#8727; pUnkHost )<br/></p>
<p>Determines whether or not the host may unload the DLL.<br/></p>
<p>The implementation of this method in the AAX library returns the result of GetActiveObjectCount() as an<br/>AAX_Result, with zero active objects interpreted as AAX_SUCCESS (see CACFUnknown.h)<br/></p>
<p>Wrapped by ACFCanUnloadNow()<br/></p>
<p>Referenced by ACFCanUnloadNow().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1244 File Documentation<br/></b></p>
<p><b>15.122.2.4 AAXStartup()<br/></b></p>
<p>AAX_Result AAXStartup (<br/>IACFUnknown &#8727; pUnkHost )<br/></p>
<p>DLL initialization routine.<br/></p>
<p>Called once at init time. The implementation of this method in the AAX library uses pUnkHost as an<br/>IACFComponentFactory to initialize global services (see acfbaseapi.h)<br/></p>
<p>Wrapped by ACFStartup()<br/></p>
<p>Referenced by ACFStartup().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>15.122.2.5 AAXShutdown()<br/></b></p>
<p>AAX_Result AAXShutdown (<br/>IACFUnknown &#8727; pUnkHost )<br/></p>
<p>DLL shutdown routine.<br/></p>
<p>Called once before unloading the DLL. The implementation of this method in the AAX library tears down any globally<br/>initialized state and releases any globally retained resources.<br/></p>
<p>Wrapped by ACFShutdown()<br/></p>
<p>Referenced by ACFShutdown().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>15.122.2.6 AAXGetSDKVersion()<br/></b></p>
<p>AAX_Result AAXGetSDKVersion (<br/>acfUInt64 &#8727; oSDKVersion )<br/></p>
<p>Returns the DLL's SDK version.<br/></p>
<p>The implementation of this method in the AAX library provides a 64-bit value in which the upper 32 bits represent<br/>the SDK version and the lower 32 bits represent the revision number of the SDK. See AAX_Version.h<br/></p>
<p>Wrapped by ACFGetSDKVersion()<br/></p>
<p>Referenced by ACFGetSDKVersion().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.123 AAX_InstrumentParameters.doxygen File Reference 1245<br/></b></p>
<p><b>15.123 AAX_InstrumentParameters.doxygen File Reference<br/></b></p>
<p><b>15.124 AAX_InterfaceList.doxygen File Reference<br/></b></p>
<p><b>15.125 AAX_IPageTable.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_IString.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IPageTable<br/>Interface to the host's representation of a plug-in instance's page table.<br/></p>
<p><b>15.126 AAX_IParameter.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.126.1 Description<br/></b></p>
<p>The base interface for all normalizable plug-in parameters.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IParameterValue<br/>An abstract interface representing a parameter value of arbitrary type.<br/></p>
<p>&#8226; class AAX_IParameter<br/>The base interface for all normalizable plug-in parameters.<br/></p>
<p><b>15.127 AAX_IPointerQueue.h File Reference<br/></b></p>
<p>#include &quot;AAX_IContainer.h&quot;<br/></p>
<p><b>15.127.1 Description<br/></b></p>
<p>Abstract interface for a basic FIFO queue of pointers-to-objects.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1246 File Documentation<br/></b></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IPointerQueue&lt; T &gt;<br/></p>
<p><b>15.128 AAX_IPrivateDataAccess.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.128.1 Description<br/></b></p>
<p>Interface to data access provided by host to plug-in.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IPrivateDataAccess<br/>Interface to data access provided by host to plug-in.<br/></p>
<p><b>15.129 AAX_IPropertyMap.h File Reference<br/></b></p>
<p>#include &quot;AAX_Properties.h&quot;<br/>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.129.1 Description<br/></b></p>
<p>Generic plug-in description property map.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IPropertyMap<br/>Generic plug-in description property map.<br/></p>
<p><b>15.130 AAX_ISessionDocument.h File Reference<br/></b></p>
<p>#include &quot;AAX_SessionDocumentTypes.h&quot;<br/>#include &quot;AAX_UIDs.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;memory&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.131 AAX_ISessionDocumentClient.h File Reference 1247<br/></b></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_ISessionDocument<br/>Interface representing information in a host session document.<br/></p>
<p>&#8226; class AAX_ISessionDocument::TempoMap<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_ISessionDocument_H<br/></p>
<p><b>15.130.1 Macro Definition Documentation<br/></b></p>
<p><b>15.130.1.1 AAX_ISessionDocument_H<br/></b></p>
<p>#define AAX_ISessionDocument_H<br/></p>
<p><b>15.131 AAX_ISessionDocumentClient.h File Reference<br/></b></p>
<p>#include &quot;AAX_IACFSessionDocumentClient.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;CACFUnknown.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_ISessionDocumentClient<br/>Interface representing a client of the session document interface.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_ISessionDocumentClient_H<br/></p>
<p><b>15.131.1 Macro Definition Documentation<br/></b></p>
<p><b>15.131.1.1 AAX_ISessionDocumentClient_H<br/></b></p>
<p>#define AAX_ISessionDocumentClient_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1248 File Documentation<br/></b></p>
<p><b>15.132 AAX_IString.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.132.1 Description<br/></b></p>
<p>An AAX string interface.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IString<br/>A simple string container that can be passed across a binary boundary. This class, for simplicity, is not versioned and<br/>thus can never change.<br/></p>
<p><b>15.133 AAX_ITaperDelegate.h File Reference<br/></b></p>
<p><b>15.133.1 Description<br/></b></p>
<p>Defines the taper conversion behavior for a parameter.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_ITaperDelegateBase<br/>Defines the taper conversion behavior for a parameter.<br/></p>
<p>&#8226; class AAX_ITaperDelegate&lt; T &gt;<br/>Classes for conversion to and from normalized parameter values.<br/></p>
<p><b>15.134 AAX_ITask.h File Reference<br/></b></p>
<p>#include &quot;AAX_IACFTask.h&quot;<br/>#include &quot;AAX.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_ITask<br/>Interface representing a request to perform a task.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_ITask_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.135 AAX_ITaskAgent.h File Reference 1249<br/></b></p>
<p><b>15.134.1 Macro Definition Documentation<br/></b></p>
<p><b>15.134.1.1 AAX_ITask_H<br/></b></p>
<p>#define AAX_ITask_H<br/></p>
<p><b>15.135 AAX_ITaskAgent.h File Reference<br/></b></p>
<p>#include &quot;AAX_IACFTaskAgent.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;CACFUnknown.h&quot;<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_ITaskAgent<br/></p>
<p>Interface for a component that accepts task requests.<br/></p>
<p><b>15.136 AAX_ITransport.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_Enums.h&quot;<br/></p>
<p><b>15.136.1 Description<br/></b></p>
<p>The interface for query ProTools transport information.<br/></p>
<p><b>Note<br/></b>To use this interface plug-in must describe AAX_eProperty_UsesMIDI property<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_ITransport<br/></p>
<p>Interface to information about the host's transport state.<br/></p>
<p><b>15.137 AAX_IViewContainer.h File Reference<br/></b></p>
<p>#include &quot;AAX_GUITypes.h&quot;<br/>#include &quot;AAX.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1250 File Documentation<br/></b></p>
<p><b>15.137.1 Description<br/></b></p>
<p>Interface for the AAX host's view of a single instance of an effect.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_IViewContainer<br/>Interface for the AAX host's view of a single instance of an effect. Used both by clients of the AAX host and by effect<br/>components.<br/></p>
<p><b>15.138 AAX_LinkedParameters.doxygen File Reference<br/></b></p>
<p><b>15.139 AAX_Map.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &lt;AAX_ALIGN_FILE_BEGIN&gt;<br/>#include &lt;AAX_ALIGN_FILE_ALG&gt;<br/>#include &lt;AAX_ALIGN_FILE_END&gt;<br/>#include &lt;AAX_ALIGN_FILE_RESET&gt;<br/></p>
<p><b>15.139.1 Description<br/></b></p>
<p><b>Author<br/></b>Mykola Kryvonos<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_Map<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_MAP_H<br/></p>
<p><b>15.139.2 Macro Definition Documentation<br/></b></p>
<p><b>15.139.2.1 AAX_MAP_H<br/></b></p>
<p>#define AAX_MAP_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.140 AAX_Media_Composer_Guide.doxygen File Reference 1251<br/></b></p>
<p><b>15.140 AAX_Media_Composer_Guide.doxygen File Reference<br/></b></p>
<p><b>15.141 AAX_MIDILogging.cpp File Reference<br/></b></p>
<p>#include &quot;AAX_MIDILogging.h&quot;<br/>#include &quot;AAX_CString.h&quot;<br/>#include &quot;AAX_Assert.h&quot;<br/>#include &lt;map&gt;<br/>#include &lt;vector&gt;<br/>#include &lt;algorithm&gt;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; struct SAutoArray&lt; T &gt;<br/>&#8226; class AAX_IMIDIMessageInfoDelegate<br/></p>
<p><b>15.142 AAX_MIDILogging.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.142.1 Description<br/></b></p>
<p>Utilities for logging MIDI data.<br/></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; AAX<br/></p>
<p><b>Functions<br/></b></p>
<p><b>MIDI logging utilities<br/></b></p>
<p>&#8226; void AAX::AsStringMIDIStream_Debug (const AAX_CMidiStream &amp;inStream, char &#8727;outBuffer, int32_t in&#8592;&#8617;<br/>BufferSize)<br/></p>
<p><b>15.143 AAX_MIDIUtilities.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1252 File Documentation<br/></b></p>
<p><b>15.143.1 Description<br/></b></p>
<p>Utilities for managing MIDI data.<br/></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; AAX<br/></p>
<p><b>Enumerations<br/></b></p>
<p>&#8226; enum AAX::EStatusNibble {<br/>AAX::eStatusNibble_NoteOff = 0x80 ,<br/>AAX::eStatusNibble_NoteOn = 0x90 ,<br/>AAX::eStatusNibble_KeyPressure = 0xA0 ,<br/>AAX::eStatusNibble_ControlChange = 0xB0 ,<br/>AAX::eStatusNibble_ChannelMode = 0xB0 ,<br/>AAX::eStatusNibble_ProgramChange = 0xC0 ,<br/>AAX::eStatusNibble_ChannelPressure = 0xD0 ,<br/>AAX::eStatusNibble_PitchBend = 0xE0 ,<br/>AAX::eStatusNibble_SystemCommon = 0xF0 ,<br/>AAX::eStatusNibble_SystemRealTime = 0xF0 }<br/></p>
<p>Values for the status nibble in a MIDI packet.<br/>&#8226; enum AAX::EStatusByte {<br/></p>
<p>AAX::eStatusByte_SysExBegin = 0xF0 ,<br/>AAX::eStatusByte_MTCQuarterFrame = 0xF1 ,<br/>AAX::eStatusByte_SongPosition = 0xF2 ,<br/>AAX::eStatusByte_SongSelect = 0xF3 ,<br/>AAX::eStatusByte_TuneRequest = 0xF6 ,<br/>AAX::eStatusByte_SysExEnd = 0xF7 ,<br/>AAX::eStatusByte_TimingClock = 0xF8 ,<br/>AAX::eStatusByte_Start = 0xFA ,<br/>AAX::eStatusByte_Continue = 0xFB ,<br/>AAX::eStatusByte_Stop = 0xFC ,<br/>AAX::eStatusByte_ActiveSensing = 0xFE ,<br/>AAX::eStatusByte_Reset = 0xFF }<br/></p>
<p>Values for the status byte in a MIDI packet.<br/>&#8226; enum AAX::EChannelModeData {<br/></p>
<p>AAX::eChannelModeData_AllSoundOff = 120 ,<br/>AAX::eChannelModeData_ResetControllers = 121 ,<br/>AAX::eChannelModeData_LocalControl = 122 ,<br/>AAX::eChannelModeData_AllNotesOff = 123 ,<br/>AAX::eChannelModeData_OmniOff = 124 ,<br/>AAX::eChannelModeData_OmniOn = 125 ,<br/>AAX::eChannelModeData_PolyOff = 126 ,<br/>AAX::eChannelModeData_PolyOn = 127 }<br/></p>
<p>Values for the first data byte in a Channel Mode Message MIDI packet.<br/>&#8226; enum AAX::ESpecialData {<br/></p>
<p>AAX::eSpecialData_AccentedClick = 0x00 ,<br/>AAX::eSpecialData_UnaccentedClick = 0x01 }<br/></p>
<p>Special message data for the first data byte in a message.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.144 AAX_MiscUtils.h File Reference 1253<br/></b></p>
<p><b>Functions<br/></b></p>
<p>&#8226; bool AAX::IsNoteOn (const AAX_CMidiPacket &#8727;inPacket)<br/>Returns true if inPacket is a Note On message.<br/></p>
<p>&#8226; bool AAX::IsNoteOff (const AAX_CMidiPacket &#8727;inPacket)<br/>Returns true if inPacket is a Note Off message, or a Note On message with velocity zero.<br/></p>
<p>&#8226; bool AAX::IsAllNotesOff (const AAX_CMidiPacket &#8727;inPacket)<br/>Returns true if inPacket is an All Sound Off or All Notes Off message.<br/></p>
<p>&#8226; bool AAX::IsAccentedClick (const AAX_CMidiPacket &#8727;inPacket)<br/>Returns true if inPacket is a special Pro Tools accented click message.<br/></p>
<p>&#8226; bool AAX::IsUnaccentedClick (const AAX_CMidiPacket &#8727;inPacket)<br/>Returns true if inPacket is a special Pro Tools unaccented click message.<br/></p>
<p>&#8226; bool AAX::IsClick (const AAX_CMidiPacket &#8727;inPacket)<br/>Returns true if inPacket is a special Pro Tools click message.<br/></p>
<p><b>15.144 AAX_MiscUtils.h File Reference<br/></b></p>
<p>#include &quot;AAX_PlatformOptimizationConstants.h&quot;<br/>#include &quot;AAX_Constants.h&quot;<br/>#include &quot;AAX_Denormal.h&quot;<br/></p>
<p><b>15.144.1 Description<br/></b></p>
<p>Miscellaneous signal processing utilities.<br/></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; AAX<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_MISCUTILS_H<br/>&#8226; #define AAX_ALIGNMENT_HINT(a, b)<br/></p>
<p>Currently only functional on TI, these word alignments will provide better performance on TI.<br/>&#8226; #define AAX_WORD_ALIGNED_HINT(a)<br/>&#8226; #define AAX_DWORD_ALIGNED_HINT(a)<br/>&#8226; #define AAX_LO(x) x<br/></p>
<p>These macros are used on TI to convert 2 single words accesses to one double word access to provide additional<br/>optimization.<br/></p>
<p>&#8226; #define AAX_HI(x) &#8727;((const_cast&lt;float&#8727;&gt;(&amp;x))+1)<br/>&#8226; #define AAX_INT_LO(x) x<br/>&#8226; #define AAX_INT_HI(x) &#8727;((const_cast&lt;int32_t&#8727;&gt;(reinterpret_cast&lt;const int32_t&#8727;&gt;(&amp;x)))+1)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1254 File Documentation<br/></b></p>
<p><b>Functions<br/></b></p>
<p>&#8226; template&lt;class GFLOAT &gt;<br/>GFLOAT AAX::ClampToZero (GFLOAT iValue, GFLOAT iClampThreshold)<br/></p>
<p>&#8226; void AAX::ZeroMemorySW (void &#8727;iPointer, int iNumBytes)<br/>&#8226; void AAX::ZeroMemoryDW (void &#8727;iPointer, int iNumBytes)<br/>&#8226; template&lt;typename T , int N&gt;<br/></p>
<p>void AAX::Fill (T &#8727;iArray, const T &#8727;iVal)<br/>&#8226; template&lt;typename T , int M, int N&gt;<br/></p>
<p>void AAX::Fill (T &#8727;iArray, const T &#8727;iVal)<br/>&#8226; template&lt;typename T , int L, int M, int N&gt;<br/></p>
<p>void AAX::Fill (T &#8727;iArray, const T &#8727;iVal)<br/>&#8226; double AAX::fabs (double iVal)<br/>&#8226; float AAX::fabs (float iVal)<br/>&#8226; float AAX::fabsf (float iVal)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T AAX::AbsMax (const T &amp;iValue, const T &amp;iMax)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T AAX::MinMax (const T &amp;iValue, const T &amp;iMin, const T &amp;iMax)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T AAX::Max (const T &amp;iValue1, const T &amp;iValue2)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T AAX::Min (const T &amp;iValue1, const T &amp;iValue2)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>T AAX::Sign (const T &amp;iValue)<br/>&#8226; double AAX::PolyEval (double x, const double &#8727;coefs, int numCoefs)<br/>&#8226; double AAX::CeilLog2 (double iValue)<br/>&#8226; void AAX::SinCosMix (float aLinearMix, float &amp;aSinMix, float &amp;aCosMix)<br/></p>
<p><b>15.144.2 Macro Definition Documentation<br/></b></p>
<p><b>15.144.2.1 AAX_MISCUTILS_H<br/></b></p>
<p>#define AAX_MISCUTILS_H<br/></p>
<p><b>15.144.2.2 AAX_ALIGNMENT_HINT<br/></b></p>
<p>#define AAX_ALIGNMENT_HINT(<br/>a,<br/>b )<br/></p>
<p>Currently only functional on TI, these word alignments will provide better performance on TI.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.144 AAX_MiscUtils.h File Reference 1255<br/></b></p>
<p><b>15.144.2.3 AAX_WORD_ALIGNED_HINT<br/></b></p>
<p>#define AAX_WORD_ALIGNED_HINT(<br/>a )<br/></p>
<p><b>15.144.2.4 AAX_DWORD_ALIGNED_HINT<br/></b></p>
<p>#define AAX_DWORD_ALIGNED_HINT(<br/>a )<br/></p>
<p><b>15.144.2.5 AAX_LO<br/></b></p>
<p>#define AAX_LO(<br/>x ) x<br/></p>
<p>These macros are used on TI to convert 2 single words accesses to one double word access to provide additional<br/>optimization.<br/></p>
<p><b>15.144.2.6 AAX_HI<br/></b></p>
<p>#define AAX_HI(<br/>x ) &#8727;((const_cast&lt;float&#8727;&gt;(&amp;x))+1)<br/></p>
<p><b>15.144.2.7 AAX_INT_LO<br/></b></p>
<p>#define AAX_INT_LO(<br/>x ) x<br/></p>
<p><b>15.144.2.8 AAX_INT_HI<br/></b></p>
<p>#define AAX_INT_HI(<br/>x ) &#8727;((const_cast&lt;int32_t&#8727;&gt;(reinterpret_cast&lt;const int32_t&#8727;&gt;(&amp;x)))+1)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1256 File Documentation<br/></b></p>
<p><b>15.145 AAX_OtherExtensions.doxygen File Reference<br/></b></p>
<p><b>15.146 AAX_Page_Table_Guide.doxygen File Reference<br/></b></p>
<p><b>15.147 AAX_PageTableUtilities.h File Reference<br/></b></p>
<p>#include &quot;AAX_CString.h&quot;<br/>#include &quot;AAX.h&quot;<br/></p>
<p><b>Namespaces<br/></b>&#8226; AAX<br/></p>
<p><b>Functions<br/></b>&#8226; template&lt;class T1 , class T2 &gt;<br/></p>
<p>bool AAX::PageTableParameterMappingsAreEqual (const T1 &amp;inL, const T2 &amp;inR)<br/>&#8226; template&lt;class T1 , class T2 &gt;<br/></p>
<p>bool AAX::PageTableParameterNameVariationsAreEqual (const T1 &amp;inL, const T2 &amp;inR)<br/>&#8226; template&lt;class T1 , class T2 &gt;<br/></p>
<p>bool AAX::PageTablesAreEqual (const T1 &amp;inL, const T2 &amp;inR)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>void AAX::CopyPageTable (T &amp;to, const T &amp;from)<br/>&#8226; template&lt;class T &gt;<br/></p>
<p>std::vector&lt; std::pair&lt; int32_t, int32_t &gt; &gt; AAX::FindParameterMappingsInPageTable (const T &amp;inTable,<br/>AAX_CParamID inParameterID)<br/></p>
<p>&#8226; template&lt;class T &gt;<br/>void AAX::ClearMappedParameterByID (T &amp;ioTable, AAX_CParamID inParameterID)<br/></p>
<p><b>15.148 AAX_ParameterAutomation.doxygen File Reference<br/></b></p>
<p><b>15.149 AAX_ParameterManager.doxygen File Reference<br/></b></p>
<p><b>15.150 AAX_ParameterUpdateProtocol.doxygen File Reference<br/></b></p>
<p><b>15.151 AAX_ParameterUpdateTiming.doxygen File Reference<br/></b></p>
<p><b>15.152 AAX_PlatformOptimizationConstants.h File Reference<br/></b></p>
<p><b>15.152.1 Description<br/></b></p>
<p>Constants descriptor...<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.153 AAX_PlugInBundleLocation.h File Reference 1257<br/></b></p>
<p><b>Macros<br/></b>&#8226; #define AAX_PLATFORMOPTIMIZATIONCONSTANTS_H<br/></p>
<p><b>15.152.2 Macro Definition Documentation<br/></b></p>
<p><b>15.152.2.1 AAX_PLATFORMOPTIMIZATIONCONSTANTS_H<br/></b></p>
<p>#define AAX_PLATFORMOPTIMIZATIONCONSTANTS_H<br/></p>
<p><b>15.153 AAX_PlugInBundleLocation.h File Reference<br/></b></p>
<p><b>15.153.1 Description<br/></b></p>
<p>Utilities for interacting with the host OS.<br/></p>
<p><b>Namespaces<br/></b>&#8226; AAX<br/></p>
<p><b>Functions<br/>Filesystem utilities<br/></b></p>
<p>&#8226; bool AAX::GetPathToPlugInBundle (const char &#8727;iBundleName, int iMaxLength, char &#8727;oModuleName)<br/>Retrieve the file path of the .aaxplugin bundle.<br/></p>
<p><b>15.154 AAX_PopStructAlignment.h File Reference<br/></b></p>
<p><b>15.154.1 Description<br/></b></p>
<p>Resets (pops) the struct alignment to its previous value.<br/></p>
<p><b>See also<br/></b>AAX_ALIGN_HOST<br/>AAX_ALIGN_ALG<br/>AAX_ALIGN_RESET<br/></p>
<p><b>Note<br/></b>Inclusion of this file is mandatory after any 'push' inclusion.<br/>Some compilers do not properly &quot;pop&quot; alignment, so nesting push/pop inclusions is not allowed.<br/></p>
<p><b>See also<br/></b>AAX_Push2ByteStructAlignment.h<br/>AAX_Push4ByteStructAlignment.h<br/>AAX_Push8ByteStructAlignment.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1258 File Documentation<br/></b></p>
<p><b>15.155 AAX_PostStructAlignmentHelper.h File Reference<br/></b></p>
<p><b>15.155.1 Description<br/></b></p>
<p>Helper file for data alignment macros.<br/></p>
<p><b>15.156 AAX_PreStructAlignmentHelper.h File Reference<br/></b></p>
<p><b>15.156.1 Description<br/></b></p>
<p>Helper file for data alignment macros.<br/></p>
<p><b>15.157 AAX_Pro_Tools_Guide.doxygen File Reference<br/></b></p>
<p><b>15.158 AAX_Properties.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/></p>
<p><b>15.158.1 Description<br/></b></p>
<p>Contains IDs for properties that can be added to an AAX_IPropertyMap.<br/></p>
<p><b>Enumerations<br/></b></p>
<p>&#8226; enum AAX_EProperty : int32_t {<br/>AAX_eProperty_NoID = 0 ,<br/>AAX_eProperty_MinProp = 10 ,<br/>AAX_eProperty_PlugInSpecPropsBase = 10 ,<br/>AAX_eProperty_ManufacturerID = 11 ,<br/>AAX_eProperty_ProductID = 12 ,<br/>AAX_eProperty_PlugInID_Native = 13 ,<br/>AAX_eProperty_PlugInID_RTAS = AAX_eProperty_PlugInID_Native ,<br/>AAX_eProperty_PlugInID_AudioSuite = 14 ,<br/>AAX_eProperty_PlugInID_TI = 15 ,<br/>AAX_eProperty_PlugInID_NoProcessing = 16 ,<br/>AAX_eProperty_PlugInID_Deprecated = 18 ,<br/>AAX_eProperty_Deprecated_Plugin_List = 21 ,<br/>AAX_eProperty_Related_DSP_Plugin_List = 22 ,<br/>AAX_eProperty_Related_Native_Plugin_List = 23 ,<br/>AAX_eProperty_Deprecated_DSP_Plugin_List = 24 ,<br/>AAX_eProperty_Deprecated_Native_Plugin_List = AAX_eProperty_Deprecated_Plugin_List ,<br/>AAX_eProperty_PlugInID_ExternalProcessor = 25 ,<br/>AAX_eProperty_ExternalProcessorTypeID = 26 ,<br/>AAX_eProperty_ProcessProcPropsBase = 35 ,<br/>AAX_eProperty_NativeProcessProc = 36 ,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.158 AAX_Properties.h File Reference 1259<br/></b></p>
<p>AAX_eProperty_NativeInstanceInitProc = 37 ,<br/>AAX_eProperty_NativeBackgroundProc = 38 ,<br/>AAX_eProperty_TIDLLFileName = 39 ,<br/>AAX_eProperty_TIProcessProc = 40 ,<br/>AAX_eProperty_TIInstanceInitProc = 41 ,<br/>AAX_eProperty_TIBackgroundProc = 42 ,<br/>AAX_eProperty_GeneralPropsBase = 50 ,<br/>AAX_eProperty_InputStemFormat = 51 ,<br/>AAX_eProperty_OutputStemFormat = 52 ,<br/>AAX_eProperty_DSP_AudioBufferLength = 54 ,<br/>AAX_eProperty_AudioBufferLength = AAX_eProperty_DSP_AudioBufferLength ,<br/>AAX_eProperty_LatencyContribution = 56 ,<br/>AAX_eProperty_SampleRate = 58 ,<br/>AAX_eProperty_CanBypass = 60 ,<br/>AAX_eProperty_SideChainStemFormat = 61 ,<br/>AAX_eProperty_TI_SharedCycleCount = 62 ,<br/>AAX_eProperty_TI_InstanceCycleCount = 63 ,<br/>AAX_eProperty_TI_MaxInstancesPerChip = 64 ,<br/>AAX_eProperty_TI_ForceAllowChipSharing = 65 ,<br/>AAX_eProperty_AlwaysBypass = 75 ,<br/>AAX_eProperty_ShowInMenus = 76 ,<br/>AAX_eProperty_HybridOutputStemFormat = 90 ,<br/>AAX_eProperty_HybridInputStemFormat = 91 ,<br/>AAX_eProperty_AudiosuitePropsBase = 100 ,<br/>AAX_eProperty_UsesRandomAccess = 101 ,<br/>AAX_eProperty_RequiresAnalysis = 102 ,<br/>AAX_eProperty_OptionalAnalysis = 103 ,<br/>AAX_eProperty_AllowPreviewWithoutAnalysis = 104 ,<br/>AAX_eProperty_DestinationTrack = 105 ,<br/>AAX_eProperty_RequestsAllTrackData = 106 ,<br/>AAX_eProperty_ContinuousOnly = 107 ,<br/>AAX_eProperty_MultiInputModeOnly = 108 ,<br/>AAX_eProperty_DisablePreview = 110 ,<br/>AAX_eProperty_DoesntIncrOutputSample = 112 ,<br/>AAX_eProperty_NumberOfInputs = 113 ,<br/>AAX_eProperty_NumberOfOutputs = 114 ,<br/>AAX_eProperty_DisableHandles = 115 ,<br/>AAX_eProperty_SupportsSideChainInput = 116 ,<br/>AAX_eProperty_NeedsOutputDithered = 117 ,<br/>AAX_eProperty_DisableAudioSuiteReverse = 118 ,<br/>AAX_eProperty_MaxASProp ,<br/>AAX_eProperty_GUIBase = 150 ,<br/>AAX_eProperty_UsesClientGUI = 151 ,<br/>AAX_eProperty_MaxGUIProp ,<br/>AAX_eProperty_MeterBase = 199 ,<br/>AAX_eProperty_Meter_Type = 200 ,<br/>AAX_eProperty_Meter_Orientation = 201 ,<br/>AAX_eProperty_Meter_Ballistics = 202 ,<br/>AAX_eProperty_MaxMeterProp ,<br/>AAX_eProperty_ConstraintBase = 299 ,<br/>AAX_eProperty_Constraint_Location = 300 ,<br/>AAX_eProperty_Constraint_Topology = 301 ,<br/>AAX_eProperty_Constraint_NeverUnload = 302 ,<br/>AAX_eProperty_Constraint_NeverCache = 303 ,<br/>AAX_eProperty_Constraint_MultiMonoSupport = 304 ,<br/>AAX_eProperty_MaxConstraintProp ,<br/>AAX_eProperty_FeaturesBase = 305 ,<br/>AAX_eProperty_SupportsSaveRestore = 305 ,<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1260 File Documentation<br/></b></p>
<p>AAX_eProperty_UsesTransport = 306 ,<br/>AAX_eProperty_StoreXMLPageTablesByEffect = 307 ,<br/>AAX_eProperty_StoreXMLPageTablesByType = AAX_eProperty_StoreXMLPageTablesByEffect ,<br/>AAX_eProperty_RequiresChunkCallsOnMainThread = 308 ,<br/>AAX_eProperty_ObservesTransportState = 309 ,<br/>AAX_eProperty_UsesTransportControl = 311 ,<br/>AAX_eProperty_MaxFeaturesProp ,<br/>AAX_eProperty_ConstraintBase_2 = 350 ,<br/>AAX_eProperty_Constraint_AlwaysProcess = 351 ,<br/>AAX_eProperty_Constraint_DoNotApplyDefaultSettings = 352 ,<br/>AAX_eProperty_MaxConstraintProp_2 ,<br/>AAX_eProperty_DebugPropertiesBase = 400 ,<br/>AAX_eProperty_EnableHostDebugLogs = 401 ,<br/>AAX_eProperty_MaxProp ,<br/>AAX_eProperty_MaxCap = 10000 }<br/></p>
<p>The list of properties that can be added to an AAX_IPropertyMap.<br/></p>
<p><b>Functions<br/></b>&#8226; AAX_ENUM_SIZE_CHECK (AAX_EProperty)<br/></p>
<p><b>15.158.2 Enumeration Type Documentation<br/></b></p>
<p><b>15.158.2.1 AAX_EProperty<br/></b></p>
<p>enum AAX_EProperty : int32_t<br/></p>
<p>The list of properties that can be added to an AAX_IPropertyMap.<br/>See AAX_IPropertyMap::AddProperty() for more information<br/></p>
<p><b>Sections<br/></b>&#8226; Plug-In spec properties<br/>&#8226; ProcessProc properties<br/>&#8226; General properties<br/>&#8226; TI-specific properties<br/>&#8226; Offline (AudioSuite) properties<br/>&#8226; GUI properties<br/>&#8226; Meter properties<br/>&#8226; Plug-in management constraints<br/></p>
<p><b>Legacy Porting Notes </b>These property IDs are somewhat analogous to the pluginGestalt system in the<br/>legacy SDK, and several AAX_EProperty values correlate directly with a correspond-<br/>ing legacy plug-in gestalt.<br/></p>
<p><b>Legacy Porting Notes </b>To ensure session interchange compatibility, make sure the 4 character IDs for<br/>AAX_eProperty_ManufacturerID, AAX_eProperty_ProductID, AAX_eProperty_PlugInID_Native,<br/>and AAX_eProperty_PlugInID_AudioSuite are identical to the legacy SDK's coun-<br/>terpart.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.158 AAX_Properties.h File Reference 1261<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_NoID<br/></p>
<p>AAX_eProperty_MinProp<br/>AAX_eProperty_PlugInSpecPropsBase<br/></p>
<p>AAX_eProperty_ManufacturerID Four-character osid-style manufacturer identifier.<br/>Should be registered with Avid, and must be identical<br/>for all plug-ins from the same manufacturer.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level for<br/>plug-ins that support audio processing using a<br/><b>ProcessProc </b>callback, or at the <b>Effect </b>level for<br/>all other plug-ins.<br/></p>
<p><b>Legacy Porting Notes </b>For legacy plug-in session<br/>compatibility, this ID should<br/>match the Manufacturer ID<br/>used in the corresponding<br/>legacy plug-ins.<br/></p>
<p>AAX_eProperty_ProductID Four-character osid-style Effect identifier. Must be<br/>identical for all <b>ProcessProcs </b>within a single Effect.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level for<br/>plug-ins that support audio processing using a<br/><b>ProcessProc </b>callback, or at the <b>Effect </b>level for<br/>all other plug-ins.<br/></p>
<p><b>Legacy Porting Notes </b>For legacy plug-in session<br/>compatibility, this ID should<br/>match the Product ID used in<br/>the corresponding legacy<br/>plug-in.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1262 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_PlugInID_Native Four-character osid-style plug-in type identifier for<br/></p>
<p>real-time native audio Effects. All registered plug-in<br/>type IDs (AAX_eProperty_PlugInID_Native,<br/>AAX_eProperty_PlugInID_AudioSuite,<br/>AAX_eProperty_PlugInID_TI, etc.) must be unique<br/>across all ProcessProcs registered within a single<br/>Effect.<br/><b>Warning<br/></b></p>
<p>As with all plug-in ID properties, this value must<br/>remain constant across all releases of the<br/>plug-in which support this Effect configuration.<br/>The value of this property should be stored in a<br/>constant rather than being calculated at<br/>run-time in order to avoid unresolvable<br/>compatibility issues with saved sessions which<br/>can occur of an ID value is accidentally changed<br/>between two plug-in version releases.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p><b>Legacy Porting Notes </b>For legacy plug-in session<br/>compatibility, this ID should<br/>match the Type ID used in<br/>the corresponding legacy<br/>RTAS plug-in Types.<br/></p>
<p>AAX_eProperty_PlugInID_RTAS<br/><b>Deprecated </b>Use AAX_eProperty_PlugInID_Native<br/></p>
<p>AAX_eProperty_PlugInID_AudioSuite Four-character osid-style plug-in type identifier for<br/>offline native audio Effects. All registered plug-in type<br/>IDs (AAX_eProperty_PlugInID_Native,<br/>AAX_eProperty_PlugInID_AudioSuite,<br/>AAX_eProperty_PlugInID_TI, etc.) must be unique<br/>across all ProcessProcs registered within a single<br/>Effect.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level for<br/>plug-ins that support audio processing using a<br/><b>ProcessProc </b>callback, or at the <b>Effect </b>level for<br/>all other AudioSuite plug-ins (e.g. those that<br/>use the AAX_IHostProcessor interface.)<br/></p>
<p><b>Legacy Porting Notes </b>For legacy plug-in session<br/>compatibility, this ID should<br/>match the Type ID used in<br/>the corresponding legacy<br/>AudioSuite plug-in Types.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.158 AAX_Properties.h File Reference 1263<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_PlugInID_TI Four-character osid-style plug-in type identifier for<br/></p>
<p>real-time TI-accelerated audio Effect types. All<br/>registered plug-in type IDs<br/>(AAX_eProperty_PlugInID_Native,<br/>AAX_eProperty_PlugInID_AudioSuite,<br/>AAX_eProperty_PlugInID_TI, etc.) must be unique<br/>across all ProcessProcs registered within a single<br/>Effect.<br/><b>Warning<br/></b></p>
<p>As with all plug-in ID properties, this value must<br/>remain constant across all releases of the<br/>plug-in which support this Effect configuration.<br/>The value of this property should be stored in a<br/>constant rather than being calculated at<br/>run-time in order to avoid unresolvable<br/>compatibility issues with saved sessions which<br/>can occur of an ID value is accidentally changed<br/>between two plug-in version releases.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p><b>Legacy Porting Notes </b>For legacy plug-in session<br/>compatibility, this ID should<br/>match the Type ID used in<br/>the corresponding legacy<br/>TDM plug-in Types.<br/></p>
<p>AAX_eProperty_PlugInID_NoProcessing Four-character osid-style plug-in type identifier for<br/>Effect types that do not process audio. All registered<br/>plug-in type IDs (AAX_eProperty_PlugInID_Native,<br/>AAX_eProperty_PlugInID_AudioSuite,<br/>AAX_eProperty_PlugInID_TI, etc.) must be unique<br/>across all ProcessProcs registered within a single<br/>Effect.<br/><b>Warning<br/></b></p>
<p>As with all plug-in ID properties, this value must<br/>remain constant across all releases of the<br/>plug-in which support this Effect configuration.<br/>The value of this property should be stored in a<br/>constant rather than being calculated at<br/>run-time in order to avoid unresolvable<br/>compatibility issues with saved sessions which<br/>can occur of an ID value is accidentally changed<br/>between two plug-in version releases.<br/></p>
<p>&#8226; Apply this property at the <b>Effect </b>level<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1264 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_PlugInID_Deprecated Four-character osid-style plug-in type identifier for a<br/></p>
<p>corresponding deprecated type. Only one deprecated<br/>effect ID may correspond to each valid<br/>(non-deprecated) effect ID. To associate a plug-in type<br/>with more than one deprecated type, use the following<br/>properties instead:<br/></p>
<p>&#8226; AAX_eProperty_Deprecated_DSP_Plugin_List<br/></p>
<p>&#8226;<br/>AAX_eProperty_Deprecated_Native_Plugin_List<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>AAX_eProperty_Deprecated_Plugin_List<br/><b>Deprecated </b>Use<br/></p>
<p>AAX_eProperty_Deprecated_Native_Plugin_List<br/>and<br/>AAX_eProperty_Deprecated_DSP_Plugin_List<br/>See AAX_eProperty_PlugInID_RTAS for<br/>an example.<br/></p>
<p>AAX_eProperty_Related_DSP_Plugin_List Specify a list of DSP plug-ins that are related to a<br/>plug-in type.<br/></p>
<p>&#8226; For example, use this property inside a Native<br/>process to tell the host that this plug-in can be<br/>used in place of a DSP version.<br/></p>
<p>&#8226; This property must be applied at the<br/>ProcessProc level and used with the<br/>AAX_IPropertyMap::AddPropertyWithIDArray<br/>method, which takes a list of full plug-in<br/>identifier specification triads (ManufacturerID,<br/>ProductID, PluginID)<br/></p>
<p>AAX_eProperty_Related_Native_Plugin_List Specify a list of Native plug-ins that are related to a<br/>plug-in type.<br/></p>
<p>&#8226; This property must be applied at the<br/>ProcessProc level and used with the<br/>AAX_IPropertyMap::AddPropertyWithIDArray<br/>method, which takes a list of full plug-in<br/>identifier specification triads (ManufacturerID,<br/>ProductID, PluginID)<br/></p>
<p>AAX_eProperty_Deprecated_DSP_Plugin_List Specify a list of DSP plug-ins that are deprecated by a<br/>new plug-in type.<br/></p>
<p>&#8226; This property must be applied at the<br/>ProcessProc level and used with the<br/>AddPropertyWithIDArray, which is a list of full<br/>plug-in specs (ManufacturerID, ProductID,<br/>PluginID)<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.158 AAX_Properties.h File Reference 1265<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_Deprecated_Native_Plugin_List Specify a list of Native plug-ins that are deprecated by<br/></p>
<p>a new plug-in type.<br/></p>
<p>&#8226; This property must be applied at the<br/>ProcessProc level and used with the<br/>AddPropertyWithIDArray, which is a list of full<br/>plug-in specs (ManufacturerID, ProductID,<br/>PluginID)<br/></p>
<p>AAX_eProperty_PlugInID_ExternalProcessor Four-character osid-style plug-in type identifier for<br/>audio effects rendered on external hardware.<br/><b>Note<br/></b></p>
<p>This property is not currently used by any AAX<br/>plug-in host software<br/></p>
<p>All registered plug-in type IDs must be unique across<br/>all ProcessProcs registered within a single Effect.<br/></p>
<p><b>Warning<br/></b>As with all plug-in ID properties, this value must<br/>remain constant across all releases of the<br/>plug-in which support this Effect configuration.<br/>The value of this property should be stored in a<br/>constant rather than being calculated at<br/>run-time in order to avoid unresolvable<br/>compatibility issues with saved sessions which<br/>can occur of an ID value is accidentally changed<br/>between two plug-in version releases.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>AAX_eProperty_ExternalProcessorTypeID Identifier for the type of the external processor<br/>hardware.<br/><b>See also<br/></b></p>
<p>AAX_eProperty_PlugInID_ExternalProcessor<br/></p>
<p>The value of this property will be specific to the<br/>external processor hardware. Currently there are no<br/>public external processor hardware type IDs.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>AAX_eProperty_ProcessProcPropsBase<br/>AAX_eProperty_NativeProcessProc Address of a native effect's ProcessProc callback<br/></p>
<p>Data type: AAX_CProcessProc<br/>For use with<br/>AAX_IComponentDescriptor::AddProcessProc()<br/></p>
<p>AAX_eProperty_NativeInstanceInitProc Address of a native effect's instance initialization<br/>callback<br/>Data type: AAX_CInstanceInitProc<br/>For use with<br/>AAX_IComponentDescriptor::AddProcessProc()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1266 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_NativeBackgroundProc Address of a native effect's background callback<br/></p>
<p>Data type: AAX_CBackgroundProc<br/>For use with<br/>AAX_IComponentDescriptor::AddProcessProc()<br/></p>
<p>AAX_eProperty_TIDLLFileName Name of the DLL for a TI effect<br/>Data type: UTF-8 C-string<br/>For use with<br/>AAX_IComponentDescriptor::AddProcessProc()<br/></p>
<p>AAX_eProperty_TIProcessProc Name of a TI effect's ProcessProc callback<br/>Data type: C-string<br/>For use with<br/>AAX_IComponentDescriptor::AddProcessProc()<br/></p>
<p>AAX_eProperty_TIInstanceInitProc Name of a TI effect's instance initialization callback<br/>Data type: C-string<br/>For use with<br/>AAX_IComponentDescriptor::AddProcessProc()<br/></p>
<p>AAX_eProperty_TIBackgroundProc Name of a TI effect's background callback<br/>Data type: C-string<br/>For use with<br/>AAX_IComponentDescriptor::AddProcessProc()<br/></p>
<p>AAX_eProperty_GeneralPropsBase<br/>AAX_eProperty_InputStemFormat Input stem format. One of AAX_EStemFormat.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>For offline processing, use<br/>AAX_eProperty_NumberOfInputs<br/></p>
<p>AAX_eProperty_OutputStemFormat Output stem format. One of AAX_EStemFormat.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>For offline processing, use<br/>AAX_eProperty_NumberOfOutputs<br/></p>
<p>AAX_eProperty_DSP_AudioBufferLength Audio buffer length for DSP processing callbacks.<br/>One of AAX_EAudioBufferLengthDSP.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>&#8226; This property is only applicable to DSP<br/>algorithms<br/></p>
<p>AAX_eProperty_AudioBufferLength<br/><b>Deprecated </b>Use<br/></p>
<p>AAX_eProperty_DSP_AudioBufferLength<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.158 AAX_Properties.h File Reference 1267<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_LatencyContribution Default latency contribution of a given processing<br/></p>
<p>callback, in samples.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>Unlike most properties, an Effect's latency<br/>contribution may also be changed dynamically at<br/>runtime. This is done via<br/>AAX_IController::SetSignalLatency(). Dynamic<br/>latency reporting may not be recognized by the host<br/>application in all circumstances, however, so Effects<br/>should always define any nonzero initial latency value<br/>using AAX_eProperty_LatencyContribution<br/></p>
<p><b>Host Compatibility Notes </b>Maximum delay<br/>compensation limits will<br/>vary from host to host. If<br/>your plug-in exceeds the<br/>delay compensation<br/>sample limit for a given<br/>AAX host then you should<br/>note this limitation in your<br/>user documentation.<br/>Example limits:<br/></p>
<p>&#8226; Pro Tools 9 and<br/>higher: 16,383<br/>samples at 44.1/48<br/>kHz, 32,767<br/>samples at 88.2/96<br/>kHz, or 65,534<br/>samples at<br/>176.4/192 kHz<br/></p>
<p>&#8226; Media Composer<br/>8.1 and higher:<br/>16,383 samples at<br/>44.1/48 kHz, 32,767<br/>samples at 88.2/96<br/>kHz<br/></p>
<p>AAX_eProperty_SampleRate Specifies which sample rates the Effect supports. A<br/>mask of AAX_ESampleRateMask.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p><b>See also<br/></b>AAX_IComponentDescriptor::AddSampleRate()<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1268 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_CanBypass The plug-in supports a Master Bypass control.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>Nearly all AAX plug-ins should set this property to<br/>true<br/>Set this property to false (0) to disable Master<br/>Bypass for plug-ins that cannot be bypassed, such as<br/>fold-down plug-ins that convert to a narrower channel<br/>format.<br/></p>
<p><b>Legacy Porting Notes </b>Was<br/>pluginGestalt_CanBypass.<br/></p>
<p>AAX_eProperty_SideChainStemFormat Side chain stem format. One of AAX_EStemFormat.<br/></p>
<p><b>Host Compatibility Notes </b>Currently Pro Tools<br/>supports only<br/>AAX_eStemFormat_Mono<br/>side chain inputs<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p><b>Host Compatibility Notes </b>AAX_eProperty_Side&#8592;&#8617;<br/>ChainStemFormat is not<br/>currently implemented in<br/>DAE or AAE<br/></p>
<p>AAX_eProperty_TI_SharedCycleCount Shared cycle count (outer, per clump, loop overhead)<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>&#8226; This property is only applicable to DSP<br/>algorithms<br/></p>
<p>AAX_eProperty_TI_InstanceCycleCount Instance cycle count (inner, per instance, loop<br/>overhead)<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>&#8226; This property is only applicable to DSP<br/>algorithms<br/></p>
<p>AAX_eProperty_TI_MaxInstancesPerChip Maximum number of instances of this plug-in that can<br/>be loaded on a chip. This property is only used for<br/>DMA and background thread-enabled plug-ins.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>&#8226; This property is only applicable to DSP<br/>algorithms<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.158 AAX_Properties.h File Reference 1269<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_TI_ForceAllowChipSharing Allow different plug-in types to share the same DSP<br/></p>
<p>even if AAX_eProperty_TI_MaxInstancesPerChip is<br/>declared. In general, this is not desired behavior.<br/>However, this can be useful if your plug-in instance<br/>counts are bound by a system constraint other than<br/>CPU usage and you require chip-sharing between<br/>instances of different types of the plug-in.<br/><b>Note<br/></b></p>
<p>In addition to defining this property, the types<br/>which will share allocations on the same DSP<br/>chip must be compiled into the same ELF DLL<br/>file.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>&#8226; This property is only applicable to DSP<br/>algorithms<br/></p>
<p>AAX_eProperty_AlwaysBypass The plug-in never alters its audio signal, audio output<br/>is always equal to audio input.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>Setting this property allows host to optimize audio<br/>routing and reduce audio latency.<br/></p>
<p>AAX_eProperty_ShowInMenus Indicates whether or not the plug-in should be shown<br/>in insert menus.<br/></p>
<p>&#8226; Apply this property to show or hide the plug-in<br/>from the Pro Tools insert menus.<br/></p>
<p>&#8226; This property value is true by default.<br/></p>
<p>AAX_eProperty_HybridOutputStemFormat Hybrid Output stem format. One of<br/>AAX_EStemFormat. This property represents the<br/>stem format for the audio channels that are sent from<br/>the ProcessProc callback to the<br/>AAX_IEffectParameters::RenderAudio_Hybrid()<br/>method<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>&#8226; Normally plugins will set this to the same thing<br/>as AAX_eProperty_InputStemFormat<br/></p>
<p>AAX_eProperty_HybridInputStemFormat Hybrid Input stem format. One of AAX_EStemFormat.<br/>This property represents the stem format for the audio<br/>channels that are sent from the<br/>AAX_IEffectParameters::RenderAudio_Hybrid()<br/>method to the ProcessProc callback<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>&#8226; Normally plugins will set this to the same thing<br/>as AAX_eProperty_OutputStemFormat<br/></p>
<p>AAX_eProperty_AudiosuitePropsBase<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1270 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_UsesRandomAccess The Effect requires random access to audio data.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to<br/>Host Processor algorithms<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_Uses&#8592;&#8617;<br/>RandomAccess<br/></p>
<p>AAX_eProperty_RequiresAnalysis The Effect requires an analysis pass.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_&#8592;&#8617;<br/>RequiresAnalysis<br/></p>
<p>AAX_eProperty_OptionalAnalysis The Effect supports an analysis pass, but does not<br/>require it.<br/></p>
<p><b>Host Compatibility Notes </b>In Media Composer,<br/>optional analysis will also<br/>be performed<br/>automatically before each<br/>channel is rendered. See<br/>MCDEV-2904<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_&#8592;&#8617;<br/>OptionalAnalysis<br/></p>
<p>AAX_eProperty_AllowPreviewWithoutAnalysis The Effect requires analysis, but is also allowed to<br/>preview.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_&#8592;&#8617;<br/>AnalyzeOnTheFly<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.158 AAX_Properties.h File Reference 1271<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_DestinationTrack Informs the host application to reassign output to a<br/></p>
<p>different track.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p><b>Host Compatibility Notes </b>This property is not<br/>supported on Media<br/>Composer<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_&#8592;&#8617;<br/>DestinationTrack<br/></p>
<p>AAX_eProperty_RequestsAllTrackData The host should make all of the processed track's<br/>data available to the Effect.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to<br/>Host Processor algorithms<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_&#8592;&#8617;<br/>RequestsAllTrackData<br/></p>
<p>AAX_eProperty_ContinuousOnly The Effect only processes on continuous data and<br/>does not support 'clip by clip' rendering.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_&#8592;&#8617;<br/>ContinuousOnly<br/></p>
<p>AAX_eProperty_MultiInputModeOnly The Effect wants multi-input mode only (no mono<br/>mode option)<br/><b>Note<br/></b></p>
<p>See bug PT-258560 / PT-256919<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_Multi&#8592;&#8617;<br/>InputModeOnly<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1272 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_DisablePreview The Effect does not support preview.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_Disable&#8592;&#8617;<br/>Preview<br/></p>
<p>AAX_eProperty_DoesntIncrOutputSample The Effect may not increment its output sample during<br/>some rendering calls.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to<br/>Host Processor algorithms<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_Doesnt&#8592;&#8617;<br/>IncrOutputSample<br/></p>
<p>AAX_eProperty_NumberOfInputs The number of input channels that the plug-in<br/>supports.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to<br/>Host Processor algorithms<br/></p>
<p>For real-time processing, use<br/>AAX_eProperty_InputStemFormat<br/></p>
<p>AAX_eProperty_NumberOfOutputs The number of output channels that the plug-in<br/>supports.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to<br/>Host Processor algorithms<br/></p>
<p>For real-time processing, use<br/>AAX_eProperty_OutputStemFormat<br/></p>
<p>AAX_eProperty_DisableHandles Prevents the application of rendered region handles<br/>by the host.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.158 AAX_Properties.h File Reference 1273<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_SupportsSideChainInput Tells the host that the plug-in supports side chain<br/></p>
<p>inputs.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p>AAX_eProperty_NeedsOutputDithered Requests that the host apply dithering to the Effect's<br/>output.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_Needs&#8592;&#8617;<br/>OutputDithered<br/></p>
<p>AAX_eProperty_DisableAudioSuiteReverse The plug-in supports audiosuite reverse. By default,<br/>all reverb and delay plug-ins support this feature. If a<br/>plug-in needs to opt out of this feature, they can set<br/>this property to true.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>&#8226; This property is only applicable to offline<br/>processing<br/></p>
<p>AAX_eProperty_MaxASProp<br/>AAX_eProperty_GUIBase<br/></p>
<p>AAX_eProperty_UsesClientGUI Requests a host-generated GUI based on the Effect's<br/>parameters. Use this property while your plug-in is in<br/>development to test the plug-in's data model and<br/>algorithm before its GUI has been created, or when<br/>troubleshooting problems to isolate the data model<br/>and algorithm operation from the plug-in's GUI.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p><b>Host Compatibility Notes </b>Currently supported by<br/>Pro Tools only<br/></p>
<p><b>Note<br/></b>See PTSW-189725 / PT-218397<br/></p>
<p>AAX_eProperty_MaxGUIProp<br/>AAX_eProperty_MeterBase<br/></p>
<p>AAX_eProperty_Meter_Type Indicates meter type as one of AAX_EMeterType.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor::AddMeterDescription()<br/>level<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1274 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_Meter_Orientation Indicates meter orientation as one of<br/></p>
<p>AAX_EMeterOrientation.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor::AddMeterDescription()<br/>level<br/></p>
<p>AAX_eProperty_Meter_Ballistics Indicates meter ballistics preference as one of<br/>AAX_EMeterBallisticType.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor::AddMeterDescription()<br/>level<br/></p>
<p>AAX_eProperty_MaxMeterProp<br/>AAX_eProperty_ConstraintBase<br/></p>
<p>AAX_eProperty_Constraint_Location Constraint on the algorithm's location, as a mask of<br/>AAX_EConstraintLocationMask.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>AAX_eProperty_Constraint_Topology Constraint on the topology of the Effect's modules, as<br/>one of AAX_EConstraintTopology.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>AAX_eProperty_Constraint_NeverUnload Tells the host that it should never unload the plug-in<br/>binary.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p><b>Host Compatibility Notes </b>AAX_eProperty_&#8592;&#8617;<br/>Constraint_NeverUnload<br/>is not currently<br/>implemented in DAE or<br/>AAE<br/></p>
<p>AAX_eProperty_Constraint_NeverCache Tells the host that it should never cache the plug-in<br/>binary. Only use this if required as there is a<br/>performance penalty on launch to not use the Cache.<br/>Set this property to 1, if you really need to not cache.<br/>Default is 0. The most common reason for a plug-in to<br/>require this constraint is if the plug-in's configuration<br/>can change based on external conditions. Most of the<br/>data contained in the plug-in's description routine is<br/>cached, so if the plug-in description can change<br/>between launches of the host application then the<br/>plug-in should apply this constraint to prevent the host<br/>from using stale description information.<br/></p>
<p>&#8226; Apply this property at the AAX_ICollection level<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.158 AAX_Properties.h File Reference 1275<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_Constraint_MultiMonoSupport Indicates whether or not the plug-in supports<br/></p>
<p>multi-mono configurations (true/false)<br/><b>Note<br/></b></p>
<p>Multi-mono mode may not work as expected for<br/>VIs and other plug-ins which rely on non-global<br/>MIDI input. Depending on the host, multi-mono<br/>instances may not all be automatically<br/>connected to the same MIDI port upon<br/>instantiation. Therefore it is recommended to set<br/>this property to 0 for any plug-ins if this lack of<br/>automatic connection may confuse users.<br/></p>
<p>&#8226; Apply this property at the <b>ProcessProc </b>level<br/></p>
<p>AAX_eProperty_MaxConstraintProp<br/>AAX_eProperty_FeaturesBase<br/></p>
<p>AAX_eProperty_SupportsSaveRestore Indicates whether or not the plug-in supports<br/>Save/Restore features. (true/false)<br/></p>
<p>&#8226; Apply this property to show or hide the Settings<br/>section in the plug-in window.<br/></p>
<p>&#8226; This property value is true by default.<br/></p>
<p><b>Legacy Porting Notes </b>Was pluginGestalt_&#8592;&#8617;<br/>SupportsSaveRestore<br/></p>
<p>AAX_eProperty_UsesTransport Indicates whether or not the plug-in uses transport<br/>requests. (true/false)<br/></p>
<p>&#8226; Apply this property if your plug-in uses<br/>AAX_ITransport class.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>AAX_eProperty_StoreXMLPageTablesByEffect This property specifies whether the plug-in bundle<br/>contains an XML file per plug-in type. AAX plug-ins<br/>always provide XML page table data via external files<br/>referenced by AAX_eResourceType_PageTable. If<br/>AAX_eProperty_StoreXMLPageTablesByEffect is not<br/>defined or is set to 0 (the default) then the host may<br/>assume that all Effects in the collection use the same<br/>XML page table file. If this property is set to a<br/>non-zero value, the plug-in may describe a different<br/>AAX_eResourceType_PageTable for each separate<br/>Effect.<br/></p>
<p>&#8226; Apply this property at the AAX_ICollection level<br/></p>
<p>AAX_eProperty_StoreXMLPageTablesByType<br/><b>Deprecated </b>Use<br/></p>
<p>AAX_eProperty_StoreXMLPageTablesByEffect<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1276 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_RequiresChunkCallsOnMainThread Indicates whether the plug-in supports SetChunk and<br/></p>
<p>GetChunk calls on threads other than the main<br/>thread. It is actually important for plug-ins to support<br/>these calls on non-main threads, so that is the default.<br/>However, in response to a few companies having<br/>issues with this, we have decided to support this<br/>constraint for now. property value should be set to<br/>true if you need Chunk calls on the main thread.<br/>Values: 0 (off, default), 1 (on)<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>AAX_eProperty_ObservesTransportState Indicates whether the plug-in subscribes to the<br/>TransportStateChanged notification to receive<br/>transport info. property value should be set to true if<br/>you need subscribe to the TransportStateNotification.<br/>Values: 0 (off, default), 1 (on)<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>AAX_eProperty_UsesTransportControl Indicates whether or not the plug-in uses transport<br/>control requests. (true/false)<br/></p>
<p>&#8226; Apply this property if your plug-in uses<br/>AAX_IACFTransportControl methods in the<br/>AAX_ITransport class.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>AAX_eProperty_MaxFeaturesProp<br/>AAX_eProperty_ConstraintBase_2<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.158 AAX_Properties.h File Reference 1277<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_Constraint_AlwaysProcess Indicates that the plug-in's processing should never<br/></p>
<p>be disabled by the host (true/false) Some hosts<br/>will disable processing for plug-in chains in certain<br/>circumstances to conserve system resources, e.g.<br/>when the chains' output drops to silence for an<br/>extended period.<br/><b>Note<br/></b></p>
<p>This property may impact performance of other<br/>plug-ins. For example, the Dynamic Plug-In<br/>Processing feature in Pro Tools operates over<br/>chains of plug-ins rather than single instances;<br/>any plug-in that defines<br/>AAX_eProperty_Constraint_AlwaysProcess will<br/>force its entire signal chain to continue<br/>processing. Therefore it is important to avoid<br/>using this property unless features such as<br/>Dynamic Plug-In Processing are actually<br/>interfering in some way with the operation of the<br/>plug-in.<br/></p>
<p>&#8226; This property value is false by default.<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>AAX_eProperty_Constraint_DoNotApplyDefault&#8592;&#8617;<br/>Settings<br/></p>
<p>Requests that the host does not send default settings<br/>chunks to the plug-in after instantiation<br/>(true/false) Some hosts will apply the plug-in's<br/>default settings via chunks after creating a new<br/>plug-in instance as a way to ensure that the all new<br/>plug-in instances are initialized to the same state.<br/>If a plug-in can make this guarantee itself and does<br/>not wish to receive any default settings chunks from<br/>the host after instantiation then it may set this<br/>property.<br/>Support for this property is not guaranteed; the<br/>plug-in must be able to handle default settings chunk<br/>application even if this property is set, or clearly<br/>document the plug-in's host compatibility.<br/><b>Note<br/></b></p>
<p>See bug PT-284916<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level #<br/></p>
<p>AAX_eProperty_MaxConstraintProp_2<br/>AAX_eProperty_DebugPropertiesBase<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1278 File Documentation<br/></b></p>
<p><b>Enumerator<br/></b>AAX_eProperty_EnableHostDebugLogs Enables host debug logging for this plug-in. This<br/></p>
<p>logging is made via DigiTrace using the<br/>DTF_AAXHOST facility, generally at DTP_LOW<br/>priority<br/></p>
<p>&#8226; It is recommended to set this property to 1 for<br/>debug builds and to 0 for release builds of a<br/>plug-in<br/></p>
<p>&#8226; Apply this property at the<br/>AAX_IEffectDescriptor level<br/></p>
<p>AAX_eProperty_MaxProp<br/>AAX_eProperty_MaxCap<br/></p>
<p><b>15.158.3 Function Documentation<br/></b></p>
<p><b>15.158.3.1 AAX_ENUM_SIZE_CHECK()<br/></b></p>
<p>AAX_ENUM_SIZE_CHECK (<br/>AAX_EProperty )<br/></p>
<p><b>15.159 AAX_Push2ByteStructAlignment.h File Reference<br/></b></p>
<p><b>15.159.1 Description<br/></b></p>
<p>Set the struct alignment to 2-byte. This file will throw an error on platforms that do not support 2-byte alignment (i.e.<br/>TI DSPs)<br/></p>
<p>When setting the alignment for a struct in order to match a particular environment (e.g. host/plug-in binary compat-<br/>ibility) the following macros are recommended:<br/></p>
<p>&#8226; AAX_ALIGN_FILE_HOST<br/></p>
<p>&#8226; AAX_ALIGN_FILE_ALG<br/></p>
<p>&#8226; AAX_ALIGN_FILE_RESET<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.160 AAX_Push4ByteStructAlignment.h File Reference 1279<br/></b></p>
<p><b>15.159.2 Usage notes<br/></b></p>
<p>&#8226; Always follow an inclusion of this file with a matching inclusion of AAX_PopStructAlignment.h<br/></p>
<p>&#8226; Do not place other file #include after this file. For example:<br/>// HeaderFile1.h<br/></p>
<p>#include AAX_Push2ByteStructAlignment.h<br/>#include HeaderFile2.h // this file now has 2-byte alignment also!!<br/>// HeaderFile1.h definitions...<br/>#include AAX_PopStructAlignment.h<br/></p>
<p>// end HeaderFile1.h<br/></p>
<p>This will cause problems if HeaderFile2.h is included elsewhere without the 2-byte alignment which will man-<br/>ifest as hard to find run-time bugs. The proper usage is:<br/>// HeaderFile1.h<br/></p>
<p>#include HeaderFile2.h<br/>#include AAX_Push2ByteStructAlignment.h<br/></p>
<p>// HeaderFile1.h definitions...<br/>#include AAX_PopStructAlignment.h<br/></p>
<p>// end HeaderFile1.h<br/></p>
<p><b>See also<br/></b>AAX_Push4ByteStructAlignment.h<br/>AAX_Push8ByteStructAlignment.h<br/>AAX_PopStructAlignment.h<br/></p>
<p><b>15.160 AAX_Push4ByteStructAlignment.h File Reference<br/></b></p>
<p><b>15.160.1 Description<br/></b></p>
<p>Set the struct alignment to 4-byte.<br/>When setting the alignment for a struct in order to match a particular environment (e.g. host/plug-in binary compat-<br/>ibility) the following macros are recommended:<br/></p>
<p>&#8226; AAX_ALIGN_FILE_HOST<br/>&#8226; AAX_ALIGN_FILE_ALG<br/>&#8226; AAX_ALIGN_FILE_RESET<br/></p>
<p><b>15.160.2 Usage notes<br/></b></p>
<p>&#8226; Always follow an inclusion of this file with a matching inclusion of AAX_PopStructAlignment.h<br/></p>
<p>&#8226; Do not place other file #include after this file. For example:<br/>// HeaderFile1.h<br/></p>
<p>#include AAX_Push4ByteStructAlignment.h<br/>#include HeaderFile2.h // this file now has 4-byte alignment also!!<br/>// HeaderFile1.h definitions...<br/>#include AAX_PopStructAlignment.h<br/></p>
<p>// end HeaderFile1.h<br/></p>
<p>This will cause problems if HeaderFile2.h is included elsewhere without the 4-byte alignment which will man-<br/>ifest as hard to find run-time bugs. The proper usage is:<br/>// HeaderFile1.h<br/></p>
<p>#include HeaderFile2.h<br/>#include AAX_Push4ByteStructAlignment.h<br/></p>
<p>// HeaderFile1.h definitions...<br/>#include AAX_PopStructAlignment.h<br/></p>
<p>// end HeaderFile1.h<br/></p>
<p><b>See also<br/></b>AAX_Push2ByteStructAlignment.h<br/>AAX_Push8ByteStructAlignment.h<br/>AAX_PopStructAlignment.h<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1280 File Documentation<br/></b></p>
<p><b>15.161 AAX_Push8ByteStructAlignment.h File Reference<br/></b></p>
<p><b>15.161.1 Description<br/></b></p>
<p>Set the struct alignment to 8-byte.<br/></p>
<p>When setting the alignment for a struct in order to match a particular environment (e.g. host/plug-in binary compat-<br/>ibility) the following macros are recommended:<br/></p>
<p>&#8226; AAX_ALIGN_FILE_HOST<br/></p>
<p>&#8226; AAX_ALIGN_FILE_ALG<br/></p>
<p>&#8226; AAX_ALIGN_FILE_RESET<br/></p>
<p><b>15.161.2 Usage notes<br/></b></p>
<p>&#8226; Always follow an inclusion of this file with a matching inclusion of AAX_PopStructAlignment.h<br/></p>
<p>&#8226; Do not place other file #include after this file. For example:<br/>// HeaderFile1.h<br/></p>
<p>#include AAX_Push8ByteStructAlignment.h<br/>#include HeaderFile2.h // this file now has 8-byte alignment also!!<br/>// HeaderFile1.h definitions...<br/>#include AAX_PopStructAlignment.h<br/></p>
<p>// end HeaderFile1.h<br/></p>
<p>This will cause problems if HeaderFile2.h is included elsewhere without the 8-byte alignment which will man-<br/>ifest as hard to find run-time bugs. The proper usage is:<br/>// HeaderFile1.h<br/></p>
<p>#include HeaderFile2.h<br/>#include AAX_Push8ByteStructAlignment.h<br/></p>
<p>// HeaderFile1.h definitions...<br/>#include AAX_PopStructAlignment.h<br/></p>
<p>// end HeaderFile1.h<br/></p>
<p><b>See also<br/></b>AAX_Push2ByteStructAlignment.h<br/>AAX_Push4ByteStructAlignment.h<br/>AAX_PopStructAlignment.h<br/></p>
<p><b>15.162 AAX_Quantize.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_PlatformOptimizationConstants.h&quot;<br/>#include &quot;AAX_Constants.h&quot;<br/>#include &lt;xmmintrin.h&gt;<br/>#include &lt;pmmintrin.h&gt;<br/>#include &lt;tmmintrin.h&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.163 AAX_RandomGen.h File Reference 1281<br/></b></p>
<p><b>15.162.1 Description<br/></b></p>
<p>Quantization utilities.<br/></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; AAX<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_QUANTIZE_H<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; int32_t AAX::FastRound2Int32 (double iVal)<br/>Round to Int32.<br/></p>
<p>&#8226; int32_t AAX::FastRound2Int32 (float iVal)<br/>Round to Int32.<br/></p>
<p>&#8226; int32_t AAX::FastRndDbl2Int32 (double iVal)<br/>&#8226; int32_t AAX::FastTrunc2Int32 (double iVal)<br/></p>
<p>Float to Int conversion with truncation.<br/>&#8226; int32_t AAX::FastTrunc2Int32 (float iVal)<br/></p>
<p>Float to Int conversion with truncation.<br/>&#8226; int64_t AAX::FastRound2Int64 (double iVal)<br/></p>
<p>Round to Int64.<br/></p>
<p><b>15.162.2 Macro Definition Documentation<br/></b></p>
<p><b>15.162.2.1 AAX_QUANTIZE_H<br/></b></p>
<p>#define AAX_QUANTIZE_H<br/></p>
<p><b>15.163 AAX_RandomGen.h File Reference<br/></b></p>
<p>#include &lt;stdlib.h&gt;<br/>#include &lt;time.h&gt;<br/>#include &lt;stdint.h&gt;<br/>#include &quot;AAX_PlatformOptimizationConstants.h&quot;<br/>#include &quot;AAX_Constants.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1282 File Documentation<br/></b></p>
<p><b>15.163.1 Description<br/></b></p>
<p>Functions for calculating pseudo-random numbers.<br/></p>
<p><b>Namespaces<br/></b>&#8226; AAX<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_RANDOMGEN_H<br/></p>
<p><b>Functions<br/></b>&#8226; int32_t AAX::GetInt32RPDF (int32_t &#8727;iSeed)<br/>&#8226; int32_t AAX::GetFastInt32RPDF (int32_t &#8727;iSeed)<br/></p>
<p>CALL: Calculate pseudo-random 32 bit number based on linear congruential method.<br/>&#8226; float AAX::GetRPDFWithAmplitudeOneHalf (int32_t &#8727;iSeed)<br/>&#8226; float AAX::GetRPDFWithAmplitudeOne (int32_t &#8727;iSeed)<br/>&#8226; float AAX::GetFastRPDFWithAmplitudeOne (int32_t &#8727;iSeed)<br/>&#8226; float AAX::GetTPDFWithAmplitudeOne (int32_t &#8727;iSeed)<br/></p>
<p><b>Variables<br/></b>&#8226; const float AAX::cSeedDivisor = 1/127773.0f<br/>&#8226; const int32_t AAX::cInitialSeedValue =0x00F54321<br/></p>
<p><b>15.163.2 Macro Definition Documentation<br/></b></p>
<p><b>15.163.2.1 AAX_RANDOMGEN_H<br/></b></p>
<p>#define AAX_RANDOMGEN_H<br/></p>
<p><b>15.164 AAX_RealTimePerformance.doxygen File Reference<br/></b></p>
<p><b>15.165 AAX_RelatedTypes.doxygen File Reference<br/></b></p>
<p><b>15.166 AAX_SampleRateUtils.h File Reference<br/></b></p>
<p><b>15.166.1 Description<br/></b></p>
<p>Description.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.166 AAX_SampleRateUtils.h File Reference 1283<br/></b></p>
<p><b>Enumerations<br/></b></p>
<p>&#8226; enum ESRUtils {<br/>eSRUtils_48kRangeCoarse = 48000 ,<br/>eSRUtils_96kRangeCoarse = 96000 ,<br/>eSRUtils_192kRangeCoarse = 192000 ,<br/>eSRUtils_48kRangeMin = 0 ,<br/>eSRUtils_48kRangeMax = 51000 ,<br/>eSRUtils_96kRangeMin = eSRUtils_48kRangeMax+1 ,<br/>eSRUtils_96kRangeMax = 102000 ,<br/>eSRUtils_192kRangeMin = eSRUtils_96kRangeMax+1 ,<br/>eSRUtils_192kRangeMax = 204000 ,<br/>eSRUtils_48kIndex = 0 ,<br/>eSRUtils_96kIndex = 1 ,<br/>eSRUtils_192kIndex = 2 }<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; int CoarseSampleRate (int iRate)<br/>&#8226; int CoarseSampleRateFactor (int iRate)<br/>&#8226; int CoarseSampleRateIndex (int iRate)<br/></p>
<p><b>15.166.2 Enumeration Type Documentation<br/></b></p>
<p><b>15.166.2.1 ESRUtils<br/></b></p>
<p>enum ESRUtils<br/></p>
<p><b>Enumerator<br/></b>eSRUtils_48kRangeCoarse<br/>eSRUtils_96kRangeCoarse<br/></p>
<p>eSRUtils_192kRangeCoarse<br/>eSRUtils_48kRangeMin<br/></p>
<p>eSRUtils_48kRangeMax<br/>eSRUtils_96kRangeMin<br/></p>
<p>eSRUtils_96kRangeMax<br/>eSRUtils_192kRangeMin<br/>eSRUtils_192kRangeMax<br/></p>
<p>eSRUtils_48kIndex<br/>eSRUtils_96kIndex<br/></p>
<p>eSRUtils_192kIndex<br/></p>
<p><b>15.166.3 Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1284 File Documentation<br/></b></p>
<p><b>15.166.3.1 CoarseSampleRate()<br/></b></p>
<p>int CoarseSampleRate (<br/>int iRate ) [inline]<br/></p>
<p>References eSRUtils_192kRangeCoarse, eSRUtils_192kRangeMax, eSRUtils_192kRangeMin, eSRUtils_48k&#8592;&#8617;<br/>RangeCoarse, eSRUtils_48kRangeMax, eSRUtils_48kRangeMin, eSRUtils_96kRangeCoarse, eSRUtils_96k&#8592;&#8617;<br/>RangeMax, and eSRUtils_96kRangeMin.<br/></p>
<p>Referenced by CoarseSampleRateFactor(), and CoarseSampleRateIndex().<br/></p>
<p>Here is the caller graph for this function:<br/></p>
<p><b>15.166.3.2 CoarseSampleRateFactor()<br/></b></p>
<p>int CoarseSampleRateFactor (<br/>int iRate ) [inline]<br/></p>
<p>References CoarseSampleRate(), and eSRUtils_48kRangeCoarse.<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.166.3.3 CoarseSampleRateIndex()<br/></b></p>
<p>int CoarseSampleRateIndex (<br/>int iRate ) [inline]<br/></p>
<p>References CoarseSampleRate(), eSRUtils_192kRangeCoarse, eSRUtils_48kRangeCoarse, and eSRUtils_96k&#8592;&#8617;<br/>RangeCoarse.<br/></p>
<p>Here is the call graph for this function:<br/></p>
<p><b>15.167 AAX_SDK_ChangeLog.doxygen File Reference<br/></b></p>
<p><b>15.168 AAX_SDK_ExamplePlugIns.doxygen File Reference<br/></b></p>
<p><b>15.169 AAX_SDK_GUIExtensions.doxygen File Reference<br/></b></p>
<p><b>15.170 AAX_SessionDocumentTypes.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &lt;stdint.h&gt;<br/>#include &quot;AAX_PreStructAlignmentHelper.h&quot;<br/>#include &quot;AAX_Push2ByteStructAlignment.h&quot;<br/>#include &quot;AAX_PostStructAlignmentHelper.h&quot;<br/>#include &quot;AAX_PopStructAlignment.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.171 AAX_SliderConversions.h File Reference 1285<br/></b></p>
<p><b>Classes<br/></b>&#8226; struct AAX_CTempoBreakpoint<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_SessionDocumentTypes_H<br/></p>
<p><b>Variables<br/></b>&#8226; AAX_CONSTEXPR AAX_CTypeID kAAX_DataBufferType_TempoBreakpointArray = 'AXtB'<br/></p>
<p><b>15.170.1 Macro Definition Documentation<br/></b></p>
<p><b>15.170.1.1 AAX_SessionDocumentTypes_H<br/></b></p>
<p>#define AAX_SessionDocumentTypes_H<br/></p>
<p><b>15.170.2 Variable Documentation<br/></b></p>
<p><b>15.170.2.1 kAAX_DataBufferType_TempoBreakpointArray<br/></b></p>
<p>AAX_CONSTEXPR AAX_CTypeID kAAX_DataBufferType_TempoBreakpointArray = 'AXtB'<br/></p>
<p><b>15.171 AAX_SliderConversions.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &lt;algorithm&gt;<br/>#include &lt;stdint.h&gt;<br/></p>
<p><b>15.171.1 Description<br/></b></p>
<p>Legacy utilities for converting parameter values to and from the normalized full-scale 32-bit fixed domain that was<br/>used for RTAS/TDM plug-ins.<br/></p>
<p><b>Legacy Porting Notes </b>These utilities may be required in order to maintain settings chunk compatibility with plug-<br/>ins that were ported from the legacy RTAS/TDM format.<br/></p>
<p><b>Note<br/></b>AAX does not provide facilities for converting to and from extended80 data types. If you use these types in<br/>your plug-in settings then you must provide your own chunk data parsing routines.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1286 File Documentation<br/></b></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_SLIDERCONVERSIONS_H<br/>&#8226; #define AAX_LIMIT(v1, firstVal, secondVal) ( (secondVal &gt; firstVal) ? (std::max)((std::min)(v1,second&#8592;&#8617;<br/></p>
<p>Val),firstVal) : (std::min)((std::max)(v1,secondVal),firstVal) )<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; int32_t LongControlToNewRange (int32_t aValue, int32_t rangeMin, int32_t rangeMax)<br/>&#8226; int32_t LongToLongControl (int32_t aValue, int32_t rangeMin, int32_t rangeMax)<br/></p>
<p>Convert from int32_t control value 0x80000000...0x7FFFFFFF to a int32_t ranging from rangeMin to rangeMax (linear)<br/>&#8226; double LongControlToDouble (int32_t aValue, double firstVal, double secondVal)<br/></p>
<p>Convert from int32_t control value 0x80000000...0x7FFFFFFF to an double ranging from firstVal to secondVal (linear)<br/>&#8226; int32_t DoubleToLongControl (double aValue, double firstVal, double secondVal)<br/></p>
<p>Convert from an double ranging from firstVal to secondVal (linear) to int32_t control value 0x80000000...0x7FFFFFFF.<br/>&#8226; int32_t DoubleToLongControlNonlinear (double aValue, double &#8727;minVal, double &#8727;rangePercent, int32_&#8592;&#8617;<br/></p>
<p>t numRanges)<br/>&#8226; double LongControlToDoubleNonlinear (int32_t aValue, double &#8727;minVal, double &#8727;rangePercent, int32_&#8592;&#8617;<br/></p>
<p>t numRanges)<br/>&#8226; double LongControlToLogDouble (int32_t aValue, double minVal, double maxVal)<br/></p>
<p>Convert from int32_t control value 0x80000000...0x7FFFFFFF to an double ranging from minVal to maxVal (logarith-<br/>mic)<br/></p>
<p>&#8226; int32_t LogDoubleToLongControl (double aValue, double minVal, double maxVal)<br/>Convert from an double ranging from minVal to maxVal (logarithmic) to int32_t control value 0x80000000...0x7&#8592;&#8617;<br/>FFFFFFF.<br/></p>
<p><b>15.171.2 Macro Definition Documentation<br/></b></p>
<p><b>15.171.2.1 AAX_SLIDERCONVERSIONS_H<br/></b></p>
<p>#define AAX_SLIDERCONVERSIONS_H<br/></p>
<p><b>15.171.2.2 AAX_LIMIT<br/></b></p>
<p>#define AAX_LIMIT(<br/>v1,<br/>firstVal,<br/>secondVal ) ( (secondVal &gt; firstVal) ? (std::max)((std::min)(v1,secondVal),first&#8592;&#8617;<br/></p>
<p>Val) : (std::min)((std::max)(v1,secondVal),firstVal) )<br/></p>
<p><b>15.171.3 Function Documentation<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.171 AAX_SliderConversions.h File Reference 1287<br/></b></p>
<p><b>15.171.3.1 LongControlToNewRange()<br/></b></p>
<p>int32_t LongControlToNewRange (<br/>int32_t aValue,<br/>int32_t rangeMin,<br/>int32_t rangeMax )<br/></p>
<p><b>15.171.3.2 LongToLongControl()<br/></b></p>
<p>int32_t LongToLongControl (<br/>int32_t aValue,<br/>int32_t rangeMin,<br/>int32_t rangeMax )<br/></p>
<p>Convert from int32_t control value 0x80000000...0x7FFFFFFF to a int32_t ranging from rangeMin to rangeMax<br/>(linear)<br/></p>
<p><b>15.171.3.3 LongControlToDouble()<br/></b></p>
<p>double LongControlToDouble (<br/>int32_t aValue,<br/>double firstVal,<br/>double secondVal )<br/></p>
<p>Convert from int32_t control value 0x80000000...0x7FFFFFFF to an double ranging from firstVal to secondVal (lin-<br/>ear)<br/></p>
<p><b>15.171.3.4 DoubleToLongControl()<br/></b></p>
<p>int32_t DoubleToLongControl (<br/>double aValue,<br/>double firstVal,<br/>double secondVal )<br/></p>
<p>Convert from an double ranging from firstVal to secondVal (linear) to int32_t control value 0x80000000...0x7&#8592;&#8617;<br/>FFFFFFF.<br/></p>
<p><b>15.171.3.5 DoubleToLongControlNonlinear()<br/></b></p>
<p>int32_t DoubleToLongControlNonlinear (<br/>double aValue,<br/>double &#8727; minVal,<br/>double &#8727; rangePercent,<br/>int32_t numRanges )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1288 File Documentation<br/></b></p>
<p><b>15.171.3.6 LongControlToDoubleNonlinear()<br/></b></p>
<p>double LongControlToDoubleNonlinear (<br/>int32_t aValue,<br/>double &#8727; minVal,<br/>double &#8727; rangePercent,<br/>int32_t numRanges )<br/></p>
<p><b>15.171.3.7 LongControlToLogDouble()<br/></b></p>
<p>double LongControlToLogDouble (<br/>int32_t aValue,<br/>double minVal,<br/>double maxVal )<br/></p>
<p>Convert from int32_t control value 0x80000000...0x7FFFFFFF to an double ranging from minVal to maxVal (loga-<br/>rithmic)<br/></p>
<p><b>Note<br/></b>This is LOGARITHMIC, so minVal &amp; maxVal have to be &gt; zero!<br/></p>
<p><b>15.171.3.8 LogDoubleToLongControl()<br/></b></p>
<p>int32_t LogDoubleToLongControl (<br/>double aValue,<br/>double minVal,<br/>double maxVal )<br/></p>
<p>Convert from an double ranging from minVal to maxVal (logarithmic) to int32_t control value 0x80000000...0x7&#8592;&#8617;<br/>FFFFFFF.<br/></p>
<p><b>Note<br/></b>This is LOGARITHMIC, so minVal &amp; maxVal have to be &gt; zero!<br/></p>
<p><b>15.172 AAX_StringUtilities.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_Enums.h&quot;<br/>#include &lt;string&gt;<br/>#include &quot;AAX_StringUtilities.hpp&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.173 AAX_StringUtilities.hpp File Reference 1289<br/></b></p>
<p><b>15.172.1 Description<br/></b></p>
<p>Various string utility definitions for AAX Native.<br/></p>
<p><b>Namespaces<br/></b>&#8226; AAX<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAXLibrary_AAX_StringUtilities_h<br/></p>
<p><b>Functions<br/></b>&#8226; void AAX::GetCStringOfLength (char &#8727;stringOut, const char &#8727;stringIn, int32_t aMaxChars)<br/></p>
<p>==============================================================<br/>&#8226; int32_t AAX::Caseless_strcmp (const char &#8727;cs, const char &#8727;ct)<br/>&#8226; std::string AAX::Binary2String (uint32_t binaryValue, int32_t numBits)<br/>&#8226; uint32_t AAX::String2Binary (const AAX_IString &amp;s)<br/>&#8226; bool AAX::IsASCII (char inChar)<br/>&#8226; bool AAX::IsFourCharASCII (uint32_t inFourChar)<br/>&#8226; std::string AAX::AsStringFourChar (uint32_t inFourChar)<br/>&#8226; std::string AAX::AsStringPropertyValue (AAX_EProperty inProperty, AAX_CPropertyValue inPropertyValue)<br/>&#8226; std::string AAX::AsStringInt32 (int32_t inInt32)<br/>&#8226; std::string AAX::AsStringUInt32 (uint32_t inUInt32)<br/>&#8226; std::string AAX::AsStringIDTriad (const AAX_SPlugInIdentifierTriad &amp;inIDTriad)<br/>&#8226; std::string AAX::AsStringStemFormat (AAX_EStemFormat inStemFormat, bool inAbbreviate=false)<br/>&#8226; std::string AAX::AsStringStemChannel (AAX_EStemFormat inStemFormat, uint32_t inChannelIndex, bool<br/></p>
<p>inAbbreviate)<br/>&#8226; std::string AAX::AsStringResult (AAX_Result inResult)<br/>&#8226; std::string AAX::AsStringSupportLevel (AAX_ESupportLevel inSupportLevel)<br/></p>
<p><b>15.172.2 Macro Definition Documentation<br/></b></p>
<p><b>15.172.2.1 AAXLibrary_AAX_StringUtilities_h<br/></b></p>
<p>#define AAXLibrary_AAX_StringUtilities_h<br/></p>
<p><b>15.173 AAX_StringUtilities.hpp File Reference<br/></b></p>
<p>#include &quot;AAX_IString.h&quot;<br/>#include &quot;AAX_Errors.h&quot;<br/>#include &quot;AAX_Assert.h&quot;<br/>#include &lt;cstdlib&gt;<br/>#include &lt;cstring&gt;<br/>#include &lt;algorithm&gt;<br/>#include &lt;sstream&gt;<br/>#include &lt;string&gt;<br/>#include &lt;vector&gt;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1290 File Documentation<br/></b></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; AAX<br/>&#8226; AAX::internal<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define DEFINE_AAX_ERROR_STRING(X) if (X == inResult) { return std::string(#X); }<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; template&lt;typename T &gt;<br/>std::string AAX::internal::ToHexadecimal (T inValue, bool inLeadingZeros=false)<br/></p>
<p><b>15.173.1 Macro Definition Documentation<br/></b></p>
<p><b>15.173.1.1 DEFINE_AAX_ERROR_STRING<br/></b></p>
<p>#define DEFINE_AAX_ERROR_STRING(<br/>X ) if (X == inResult) { return std::string(#X); }<br/></p>
<p><b>15.174 AAX_TI_Guide.doxygen File Reference<br/></b></p>
<p><b>15.175 AAX_TransportTypes.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &lt;string&gt;<br/>#include &lt;sstream&gt;<br/>#include &quot;AAX_PreStructAlignmentHelper.h&quot;<br/>#include &quot;AAX_Push2ByteStructAlignment.h&quot;<br/>#include &quot;AAX_PostStructAlignmentHelper.h&quot;<br/>#include &quot;AAX_PopStructAlignment.h&quot;<br/></p>
<p><b>15.175.1 Description<br/></b></p>
<p>Structures, enums and other definitions used in transport.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; struct AAX_TransportStateInfo_V1<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.176 AAX_Troubleshooting.doxygen File Reference 1291<br/></b></p>
<p><b>Functions<br/></b></p>
<p>&#8226; bool operator== (const AAX_TransportStateInfo_V1 &amp;state1, const AAX_TransportStateInfo_V1 &amp;state2)<br/>&#8226; bool operator!= (const AAX_TransportStateInfo_V1 &amp;state1, const AAX_TransportStateInfo_V1 &amp;state2)<br/></p>
<p><b>15.175.2 Function Documentation<br/></b></p>
<p><b>15.175.2.1 operator==()<br/></b></p>
<p>bool operator== (<br/>const AAX_TransportStateInfo_V1 &amp; state1,<br/>const AAX_TransportStateInfo_V1 &amp; state2 ) [inline]<br/></p>
<p>References AAX_TransportStateInfo_V1::mIsLoopEnabled, AAX_TransportStateInfo_V1::mIsRecordEnabled,<br/>AAX_TransportStateInfo_V1::mIsRecording, AAX_TransportStateInfo_V1::mRecordMode, and AAX_Transport&#8592;&#8617;<br/>StateInfo_V1::mTransportState.<br/></p>
<p><b>15.175.2.2 operator&quot;!=()<br/></b></p>
<p>bool operator!= (<br/>const AAX_TransportStateInfo_V1 &amp; state1,<br/>const AAX_TransportStateInfo_V1 &amp; state2 ) [inline]<br/></p>
<p><b>15.176 AAX_Troubleshooting.doxygen File Reference<br/></b></p>
<p><b>15.177 AAX_UIDs.h File Reference<br/></b></p>
<p>#include &quot;acfbasetypes.h&quot;<br/>#include &quot;defineacfuid.h&quot;<br/>#include &quot;acfuids.h&quot;<br/></p>
<p><b>15.177.1 Description<br/></b></p>
<p>Unique identifiers for AAX/ACF interfaces.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1292 File Documentation<br/></b></p>
<p><b>Variables<br/></b></p>
<p><b>AAX Host interface IDs<br/></b></p>
<p>&#8226; const acfIID AAXCompID_HostServices<br/>ACF component ID for AAX_IHostServices components.<br/></p>
<p>&#8226; const acfIID IID_IAAXHostServicesV1<br/>ACF interface ID for AAX_IACFHostServices.<br/></p>
<p>&#8226; const acfIID IID_IAAXHostServicesV2<br/>ACF interface ID for AAX_IACFHostServices_V2.<br/></p>
<p>&#8226; const acfIID IID_IAAXHostServicesV3<br/>ACF interface ID for AAX_IACFHostServices_V3.<br/></p>
<p>&#8226; const acfIID AAXCompID_AAXCollection<br/>ACF component ID for AAX_ICollection components.<br/></p>
<p>&#8226; const acfIID IID_IAAXCollectionV1<br/>ACF interface ID for AAX_IACFCollection.<br/></p>
<p>&#8226; const acfIID AAXCompID_AAXEffectDescriptor<br/>ACF component ID for AAX_IEffectDescriptor components.<br/></p>
<p>&#8226; const acfIID IID_IAAXEffectDescriptorV1<br/>ACF interface ID for AAX_IACFEffectDescriptor.<br/></p>
<p>&#8226; const acfIID IID_IAAXEffectDescriptorV2<br/>ACF interface ID for AAX_IACFEffectDescriptor_V2.<br/></p>
<p>&#8226; const acfIID AAXCompID_AAXComponentDescriptor<br/>ACF component ID for AAX_IComponentDescriptor components.<br/></p>
<p>&#8226; const acfIID IID_IAAXComponentDescriptorV1<br/>ACF interface ID for AAX_IACFComponentDescriptor.<br/></p>
<p>&#8226; const acfIID IID_IAAXComponentDescriptorV2<br/>ACF interface ID for AAX_IACFComponentDescriptor_V2.<br/></p>
<p>&#8226; const acfIID IID_IAAXComponentDescriptorV3<br/>ACF interface ID for AAX_IACFComponentDescriptor_V3.<br/></p>
<p>&#8226; const acfIID AAXCompID_AAXPropertyMap<br/>ACF component ID for AAX_IPropertyMap components.<br/></p>
<p>&#8226; const acfIID IID_IAAXPropertyMapV1<br/>ACF interface ID for AAX_IACFPropertyMap.<br/></p>
<p>&#8226; const acfIID IID_IAAXPropertyMapV2<br/>ACF interface ID for AAX_IACFPropertyMap_V2.<br/></p>
<p>&#8226; const acfIID IID_IAAXPropertyMapV3<br/>ACF interface ID for AAX_IACFPropertyMap_V3.<br/></p>
<p>&#8226; const acfIID AAXCompID_HostProcessorDelegate<br/>ACF component ID for AAX_IHostProcessorDelegate components.<br/></p>
<p>&#8226; const acfIID IID_IAAXHostProcessorDelegateV1<br/>ACF interface ID for AAX_IACFHostProcessorDelegate.<br/></p>
<p>&#8226; const acfIID IID_IAAXHostProcessorDelegateV2<br/>ACF interface ID for AAX_IACFHostProcessorDelegate_V2.<br/></p>
<p>&#8226; const acfIID IID_IAAXHostProcessorDelegateV3<br/>ACF interface ID for AAX_IACFHostProcessorDelegate_V3.<br/></p>
<p>&#8226; const acfIID AAXCompID_AutomationDelegate<br/>ACF component ID for AAX_IAutomationDelegate components.<br/></p>
<p>&#8226; const acfIID IID_IAAXAutomationDelegateV1<br/>ACF interface ID for AAX_IACFAutomationDelegate.<br/></p>
<p>&#8226; const acfIID AAXCompID_Controller<br/>ACF component ID for AAX_IController components.<br/></p>
<p>&#8226; const acfIID IID_IAAXControllerV1<br/>ACF interface ID for AAX_IACFController.<br/></p>
<p>&#8226; const acfIID IID_IAAXControllerV2<br/>ACF interface ID for AAX_IACFController_V2.<br/></p>
<p>&#8226; const acfIID IID_IAAXControllerV3<br/>ACF interface ID for AAX_IACFController_V3.<br/></p>
<p>&#8226; const acfIID AAXCompID_PageTableController<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.177 AAX_UIDs.h File Reference 1293<br/></b></p>
<p>ACF component ID for AAX page table controller components.<br/>&#8226; const acfIID IID_IAAXPageTableController<br/></p>
<p>ACF interface ID for AAX_IACFPageTableController.<br/>&#8226; const acfIID IID_IAAXPageTableControllerV2<br/></p>
<p>ACF interface ID for AAX_IACFPageTableController_V2.<br/>&#8226; const acfIID AAXCompID_PrivateDataAccess<br/></p>
<p>ACF component ID for AAX_IPrivateDataAccess components.<br/>&#8226; const acfIID IID_IAAXPrivateDataAccessV1<br/></p>
<p>ACF interface ID for AAX_IACFPrivateDataAccess.<br/>&#8226; const acfIID AAXCompID_ViewContainer<br/></p>
<p>ACF component ID for AAX_IViewContainer components.<br/>&#8226; const acfIID IID_IAAXViewContainerV1<br/></p>
<p>ACF interface ID for AAX_IACFViewContainer.<br/>&#8226; const acfIID IID_IAAXViewContainerV2<br/></p>
<p>ACF interface ID for AAX_IACFViewContainer_V2.<br/>&#8226; const acfIID IID_IAAXViewContainerV3<br/></p>
<p>ACF interface ID for AAX_IACFViewContainer_V3.<br/>&#8226; const acfIID AAXCompID_Transport<br/></p>
<p>ACF component ID for AAX_ITransport components.<br/>&#8226; const acfIID IID_IAAXTransportV1<br/></p>
<p>ACF interface ID for AAX_IACFTransport.<br/>&#8226; const acfIID IID_IAAXTransportV2<br/></p>
<p>ACF interface ID for AAX_IACFTransport_V2.<br/>&#8226; const acfIID IID_IAAXTransportV3<br/></p>
<p>ACF interface ID for AAX_IACFTransport_V3.<br/>&#8226; const acfIID IID_IAAXTransportV4<br/></p>
<p>ACF interface ID for AAX_IACFTransport_V4.<br/>&#8226; const acfIID IID_IAAXTransportV5<br/></p>
<p>ACF interface ID for AAX_IACFTransport_V5.<br/>&#8226; const acfIID AAXCompID_TransportControl<br/></p>
<p>ACF component ID for AAX_ITransportControl components (accessed via AAX_ITransport)<br/>&#8226; const acfIID IID_IAAXTransportControlV1<br/></p>
<p>ACF interface ID for AAX_IACFTransportControl.<br/>&#8226; const acfIID AAXCompID_PageTable<br/></p>
<p>ACF component ID for AAX_IPageTable components.<br/>&#8226; const acfIID IID_IAAXPageTableV1<br/></p>
<p>ACF interface ID for AAX_IACFPageTable.<br/>&#8226; const acfIID IID_IAAXPageTableV2<br/></p>
<p>ACF interface ID for AAX_IACFPageTable_V2.<br/>&#8226; const acfIID AAX_CompID_DescriptionHost<br/></p>
<p>ACF component ID for AAX_IDescriptionHost components.<br/>&#8226; const acfIID IID_IAAXDescriptionHostV1<br/></p>
<p>ACF interface ID for AAX_IACFDescriptionHost.<br/>&#8226; const acfIID AAX_CompID_FeatureInfo<br/></p>
<p>ACF component ID for AAX_IFeatureInfo components.<br/>&#8226; const acfIID IID_IAAXFeatureInfoV1<br/></p>
<p>ACF interface ID for AAX_IACFFeatureInfo.<br/>&#8226; const acfIID AAXCompID_Task<br/></p>
<p>ACF component ID for AAX_ITask components.<br/>&#8226; const acfIID IID_IAAXTaskV1<br/></p>
<p>ACF interface ID for AAX_IACFTask.<br/>&#8226; const acfIID AAXCompID_SessionDocument<br/></p>
<p>ACF component ID for AAX_ISessionDocument components.<br/>&#8226; const acfIID IID_IAAXSessionDocumentV1<br/></p>
<p>ACF interface ID for AAX_IACFSessionDocument.<br/></p>
<p><b>AAX plug-in interface IDs<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1294 File Documentation<br/></b></p>
<p>&#8226; const acfIID AAXCompID_EffectParameters<br/>ACF component ID for AAX_IEffectParameters components.<br/></p>
<p>&#8226; const acfIID IID_IAAXEffectParametersV1<br/>ACF interface ID for AAX_IACFEffectParameters.<br/></p>
<p>&#8226; const acfIID IID_IAAXEffectParametersV2<br/>ACF interface ID for AAX_IACFEffectParameters_V2.<br/></p>
<p>&#8226; const acfIID IID_IAAXEffectParametersV3<br/>ACF interface ID for AAX_IACFEffectParameters_V3.<br/></p>
<p>&#8226; const acfIID IID_IAAXEffectParametersV4<br/>ACF interface ID for AAX_IACFEffectParameters_V4.<br/></p>
<p>&#8226; const acfIID AAXCompID_HostProcessor<br/>ACF component ID for AAX_IHostProcessor components.<br/></p>
<p>&#8226; const acfIID IID_IAAXHostProcessorV1<br/>ACF interface ID for AAX_IACFHostProcessor.<br/></p>
<p>&#8226; const acfIID IID_IAAXHostProcessorV2<br/>ACF interface ID for AAX_IACFHostProcessor_V2.<br/></p>
<p>&#8226; const acfIID AAXCompID_EffectGUI<br/>ACF component ID for AAX_IEffectGUI components.<br/></p>
<p>&#8226; const acfIID IID_IAAXEffectGUIV1<br/>ACF interface ID for AAX_IACFEffectGUI.<br/></p>
<p>&#8226; const acfIID AAXCompID_EffectDirectData<br/>ACF component ID for AAX_IEffectDirectData components.<br/></p>
<p>&#8226; const acfIID IID_IAAXEffectDirectDataV1<br/>ACF interface ID for AAX_IACFEffectDirectData.<br/></p>
<p>&#8226; const acfIID IID_IAAXEffectDirectDataV2<br/>&#8226; const acfIID AAXCompID_TaskAgent<br/></p>
<p>ACF component ID for AAX_ITaskAgent components.<br/>&#8226; const acfIID IID_IAAXTaskAgentV1<br/></p>
<p>ACF interface ID for AAX_IACFTaskAgent.<br/>&#8226; const acfIID AAXCompID_SessionDocumentClient<br/></p>
<p>ACF component ID for AAX_ISessionDocumentClient components.<br/>&#8226; const acfIID IID_IAAXSessionDocumentClientV1<br/></p>
<p>ACF interface ID for AAX_IACFSessionDocumentClient.<br/></p>
<p><b>Other AAX interface IDs<br/></b></p>
<p>&#8226; const acfIID AAXCompID_DataBuffer<br/>ACF component ID for AAX_IDataBuffer components.<br/></p>
<p>&#8226; const acfIID IID_IAAXDataBufferV1<br/>ACF interface ID for AAX_IACFDataBuffer.<br/></p>
<p><b>AAX host attributes<br/></b></p>
<p>&#8226; const acfUID AAXATTR_Client_Level<br/>Client application level.<br/></p>
<p>&#8226; const acfUID AAXATTR_Client_Version<br/>Client application version.<br/></p>
<p><b>AAX Feature UIDs<br/></b>&#8226; using AAX_Feature_UID = acfUID<br/>&#8226; const AAX_Feature_UID AAXATTR_ClientFeature_StemFormat<br/></p>
<p>Client stem format feature support.<br/>&#8226; const AAX_Feature_UID AAXATTR_ClientFeature_AuxOutputStem<br/></p>
<p>Client Auxiliary Output Stem feature support.<br/>&#8226; const AAX_Feature_UID AAXATTR_ClientFeature_SideChainInput<br/>&#8226; const AAX_Feature_UID AAXATTR_ClientFeature_MIDI<br/></p>
<p>Client MIDI feature support.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.177 AAX_UIDs.h File Reference 1295<br/></b></p>
<p><b>AAX document data type UIDs<br/></b></p>
<p>&#8226; using AAX_DocumentData_UID = acfUID<br/>&#8226; const AAX_DocumentData_UID AAX_DocumentDataType_TempoMap<br/></p>
<p><b>15.177.2 Typedef Documentation<br/></b></p>
<p><b>15.177.2.1 AAX_Feature_UID<br/></b></p>
<p>using AAX_Feature_UID = acfUID<br/></p>
<p>Identifier for AAX features<br/></p>
<p>See AAX_IDescriptionHost::AcquireFeatureProperties() and AAX_IFeatureInfo<br/></p>
<p><b>15.177.2.2 AAX_DocumentData_UID<br/></b></p>
<p>using AAX_DocumentData_UID = acfUID<br/></p>
<p>Identifier for AAX document data types<br/></p>
<p><b>See also<br/></b>AAX_IACFSessionDocument<br/></p>
<p><b>15.177.3 Variable Documentation<br/></b></p>
<p><b>15.177.3.1 AAXCompID_HostServices<br/></b></p>
<p>const acfIID AAXCompID_HostServices<br/></p>
<p>ACF component ID for AAX_IHostServices components.<br/></p>
<p><b>15.177.3.2 IID_IAAXHostServicesV1<br/></b></p>
<p>const acfIID IID_IAAXHostServicesV1<br/></p>
<p>ACF interface ID for AAX_IACFHostServices.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1296 File Documentation<br/></b></p>
<p><b>15.177.3.3 IID_IAAXHostServicesV2<br/></b></p>
<p>const acfIID IID_IAAXHostServicesV2<br/></p>
<p>ACF interface ID for AAX_IACFHostServices_V2.<br/></p>
<p><b>15.177.3.4 IID_IAAXHostServicesV3<br/></b></p>
<p>const acfIID IID_IAAXHostServicesV3<br/></p>
<p>ACF interface ID for AAX_IACFHostServices_V3.<br/></p>
<p><b>15.177.3.5 AAXCompID_AAXCollection<br/></b></p>
<p>const acfIID AAXCompID_AAXCollection<br/></p>
<p>ACF component ID for AAX_ICollection components.<br/></p>
<p><b>15.177.3.6 IID_IAAXCollectionV1<br/></b></p>
<p>const acfIID IID_IAAXCollectionV1<br/></p>
<p>ACF interface ID for AAX_IACFCollection.<br/></p>
<p><b>15.177.3.7 AAXCompID_AAXEffectDescriptor<br/></b></p>
<p>const acfIID AAXCompID_AAXEffectDescriptor<br/></p>
<p>ACF component ID for AAX_IEffectDescriptor components.<br/></p>
<p><b>15.177.3.8 IID_IAAXEffectDescriptorV1<br/></b></p>
<p>const acfIID IID_IAAXEffectDescriptorV1<br/></p>
<p>ACF interface ID for AAX_IACFEffectDescriptor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.177 AAX_UIDs.h File Reference 1297<br/></b></p>
<p><b>15.177.3.9 IID_IAAXEffectDescriptorV2<br/></b></p>
<p>const acfIID IID_IAAXEffectDescriptorV2<br/></p>
<p>ACF interface ID for AAX_IACFEffectDescriptor_V2.<br/></p>
<p><b>15.177.3.10 AAXCompID_AAXComponentDescriptor<br/></b></p>
<p>const acfIID AAXCompID_AAXComponentDescriptor<br/></p>
<p>ACF component ID for AAX_IComponentDescriptor components.<br/></p>
<p><b>15.177.3.11 IID_IAAXComponentDescriptorV1<br/></b></p>
<p>const acfIID IID_IAAXComponentDescriptorV1<br/></p>
<p>ACF interface ID for AAX_IACFComponentDescriptor.<br/></p>
<p><b>15.177.3.12 IID_IAAXComponentDescriptorV2<br/></b></p>
<p>const acfIID IID_IAAXComponentDescriptorV2<br/></p>
<p>ACF interface ID for AAX_IACFComponentDescriptor_V2.<br/></p>
<p><b>15.177.3.13 IID_IAAXComponentDescriptorV3<br/></b></p>
<p>const acfIID IID_IAAXComponentDescriptorV3<br/></p>
<p>ACF interface ID for AAX_IACFComponentDescriptor_V3.<br/></p>
<p><b>15.177.3.14 AAXCompID_AAXPropertyMap<br/></b></p>
<p>const acfIID AAXCompID_AAXPropertyMap<br/></p>
<p>ACF component ID for AAX_IPropertyMap components.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1298 File Documentation<br/></b></p>
<p><b>15.177.3.15 IID_IAAXPropertyMapV1<br/></b></p>
<p>const acfIID IID_IAAXPropertyMapV1<br/></p>
<p>ACF interface ID for AAX_IACFPropertyMap.<br/></p>
<p><b>15.177.3.16 IID_IAAXPropertyMapV2<br/></b></p>
<p>const acfIID IID_IAAXPropertyMapV2<br/></p>
<p>ACF interface ID for AAX_IACFPropertyMap_V2.<br/></p>
<p><b>15.177.3.17 IID_IAAXPropertyMapV3<br/></b></p>
<p>const acfIID IID_IAAXPropertyMapV3<br/></p>
<p>ACF interface ID for AAX_IACFPropertyMap_V3.<br/></p>
<p><b>15.177.3.18 AAXCompID_HostProcessorDelegate<br/></b></p>
<p>const acfIID AAXCompID_HostProcessorDelegate<br/></p>
<p>ACF component ID for AAX_IHostProcessorDelegate components.<br/></p>
<p><b>15.177.3.19 IID_IAAXHostProcessorDelegateV1<br/></b></p>
<p>const acfIID IID_IAAXHostProcessorDelegateV1<br/></p>
<p>ACF interface ID for AAX_IACFHostProcessorDelegate.<br/></p>
<p><b>15.177.3.20 IID_IAAXHostProcessorDelegateV2<br/></b></p>
<p>const acfIID IID_IAAXHostProcessorDelegateV2<br/></p>
<p>ACF interface ID for AAX_IACFHostProcessorDelegate_V2.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.177 AAX_UIDs.h File Reference 1299<br/></b></p>
<p><b>15.177.3.21 IID_IAAXHostProcessorDelegateV3<br/></b></p>
<p>const acfIID IID_IAAXHostProcessorDelegateV3<br/></p>
<p>ACF interface ID for AAX_IACFHostProcessorDelegate_V3.<br/></p>
<p><b>15.177.3.22 AAXCompID_AutomationDelegate<br/></b></p>
<p>const acfIID AAXCompID_AutomationDelegate<br/></p>
<p>ACF component ID for AAX_IAutomationDelegate components.<br/></p>
<p><b>15.177.3.23 IID_IAAXAutomationDelegateV1<br/></b></p>
<p>const acfIID IID_IAAXAutomationDelegateV1<br/></p>
<p>ACF interface ID for AAX_IACFAutomationDelegate.<br/></p>
<p><b>15.177.3.24 AAXCompID_Controller<br/></b></p>
<p>const acfIID AAXCompID_Controller<br/></p>
<p>ACF component ID for AAX_IController components.<br/></p>
<p><b>15.177.3.25 IID_IAAXControllerV1<br/></b></p>
<p>const acfIID IID_IAAXControllerV1<br/></p>
<p>ACF interface ID for AAX_IACFController.<br/></p>
<p><b>15.177.3.26 IID_IAAXControllerV2<br/></b></p>
<p>const acfIID IID_IAAXControllerV2<br/></p>
<p>ACF interface ID for AAX_IACFController_V2.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1300 File Documentation<br/></b></p>
<p><b>15.177.3.27 IID_IAAXControllerV3<br/></b></p>
<p>const acfIID IID_IAAXControllerV3<br/></p>
<p>ACF interface ID for AAX_IACFController_V3.<br/></p>
<p><b>15.177.3.28 AAXCompID_PageTableController<br/></b></p>
<p>const acfIID AAXCompID_PageTableController<br/></p>
<p>ACF component ID for AAX page table controller components.<br/></p>
<p><b>15.177.3.29 IID_IAAXPageTableController<br/></b></p>
<p>const acfIID IID_IAAXPageTableController<br/></p>
<p>ACF interface ID for AAX_IACFPageTableController.<br/></p>
<p><b>15.177.3.30 IID_IAAXPageTableControllerV2<br/></b></p>
<p>const acfIID IID_IAAXPageTableControllerV2<br/></p>
<p>ACF interface ID for AAX_IACFPageTableController_V2.<br/></p>
<p><b>15.177.3.31 AAXCompID_PrivateDataAccess<br/></b></p>
<p>const acfIID AAXCompID_PrivateDataAccess<br/></p>
<p>ACF component ID for AAX_IPrivateDataAccess components.<br/></p>
<p><b>15.177.3.32 IID_IAAXPrivateDataAccessV1<br/></b></p>
<p>const acfIID IID_IAAXPrivateDataAccessV1<br/></p>
<p>ACF interface ID for AAX_IACFPrivateDataAccess.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.177 AAX_UIDs.h File Reference 1301<br/></b></p>
<p><b>15.177.3.33 AAXCompID_ViewContainer<br/></b></p>
<p>const acfIID AAXCompID_ViewContainer<br/></p>
<p>ACF component ID for AAX_IViewContainer components.<br/></p>
<p><b>15.177.3.34 IID_IAAXViewContainerV1<br/></b></p>
<p>const acfIID IID_IAAXViewContainerV1<br/></p>
<p>ACF interface ID for AAX_IACFViewContainer.<br/></p>
<p><b>15.177.3.35 IID_IAAXViewContainerV2<br/></b></p>
<p>const acfIID IID_IAAXViewContainerV2<br/></p>
<p>ACF interface ID for AAX_IACFViewContainer_V2.<br/></p>
<p><b>15.177.3.36 IID_IAAXViewContainerV3<br/></b></p>
<p>const acfIID IID_IAAXViewContainerV3<br/></p>
<p>ACF interface ID for AAX_IACFViewContainer_V3.<br/></p>
<p><b>15.177.3.37 AAXCompID_Transport<br/></b></p>
<p>const acfIID AAXCompID_Transport<br/></p>
<p>ACF component ID for AAX_ITransport components.<br/></p>
<p><b>15.177.3.38 IID_IAAXTransportV1<br/></b></p>
<p>const acfIID IID_IAAXTransportV1<br/></p>
<p>ACF interface ID for AAX_IACFTransport.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1302 File Documentation<br/></b></p>
<p><b>15.177.3.39 IID_IAAXTransportV2<br/></b></p>
<p>const acfIID IID_IAAXTransportV2<br/></p>
<p>ACF interface ID for AAX_IACFTransport_V2.<br/></p>
<p><b>15.177.3.40 IID_IAAXTransportV3<br/></b></p>
<p>const acfIID IID_IAAXTransportV3<br/></p>
<p>ACF interface ID for AAX_IACFTransport_V3.<br/></p>
<p><b>15.177.3.41 IID_IAAXTransportV4<br/></b></p>
<p>const acfIID IID_IAAXTransportV4<br/></p>
<p>ACF interface ID for AAX_IACFTransport_V4.<br/></p>
<p><b>15.177.3.42 IID_IAAXTransportV5<br/></b></p>
<p>const acfIID IID_IAAXTransportV5<br/></p>
<p>ACF interface ID for AAX_IACFTransport_V5.<br/></p>
<p><b>15.177.3.43 AAXCompID_TransportControl<br/></b></p>
<p>const acfIID AAXCompID_TransportControl<br/></p>
<p>ACF component ID for AAX_ITransportControl components (accessed via AAX_ITransport)<br/></p>
<p><b>15.177.3.44 IID_IAAXTransportControlV1<br/></b></p>
<p>const acfIID IID_IAAXTransportControlV1<br/></p>
<p>ACF interface ID for AAX_IACFTransportControl.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.177 AAX_UIDs.h File Reference 1303<br/></b></p>
<p><b>15.177.3.45 AAXCompID_PageTable<br/></b></p>
<p>const acfIID AAXCompID_PageTable<br/></p>
<p>ACF component ID for AAX_IPageTable components.<br/></p>
<p><b>15.177.3.46 IID_IAAXPageTableV1<br/></b></p>
<p>const acfIID IID_IAAXPageTableV1<br/></p>
<p>ACF interface ID for AAX_IACFPageTable.<br/></p>
<p><b>15.177.3.47 IID_IAAXPageTableV2<br/></b></p>
<p>const acfIID IID_IAAXPageTableV2<br/></p>
<p>ACF interface ID for AAX_IACFPageTable_V2.<br/></p>
<p><b>15.177.3.48 AAX_CompID_DescriptionHost<br/></b></p>
<p>const acfIID AAX_CompID_DescriptionHost<br/></p>
<p>ACF component ID for AAX_IDescriptionHost components.<br/></p>
<p><b>15.177.3.49 IID_IAAXDescriptionHostV1<br/></b></p>
<p>const acfIID IID_IAAXDescriptionHostV1<br/></p>
<p>ACF interface ID for AAX_IACFDescriptionHost.<br/></p>
<p><b>15.177.3.50 AAX_CompID_FeatureInfo<br/></b></p>
<p>const acfIID AAX_CompID_FeatureInfo<br/></p>
<p>ACF component ID for AAX_IFeatureInfo components.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1304 File Documentation<br/></b></p>
<p><b>15.177.3.51 IID_IAAXFeatureInfoV1<br/></b></p>
<p>const acfIID IID_IAAXFeatureInfoV1<br/></p>
<p>ACF interface ID for AAX_IACFFeatureInfo.<br/></p>
<p><b>15.177.3.52 AAXCompID_Task<br/></b></p>
<p>const acfIID AAXCompID_Task<br/></p>
<p>ACF component ID for AAX_ITask components.<br/></p>
<p><b>15.177.3.53 IID_IAAXTaskV1<br/></b></p>
<p>const acfIID IID_IAAXTaskV1<br/></p>
<p>ACF interface ID for AAX_IACFTask.<br/></p>
<p><b>15.177.3.54 AAXCompID_SessionDocument<br/></b></p>
<p>const acfIID AAXCompID_SessionDocument<br/></p>
<p>ACF component ID for AAX_ISessionDocument components.<br/></p>
<p><b>15.177.3.55 IID_IAAXSessionDocumentV1<br/></b></p>
<p>const acfIID IID_IAAXSessionDocumentV1<br/></p>
<p>ACF interface ID for AAX_IACFSessionDocument.<br/></p>
<p><b>15.177.3.56 AAXCompID_EffectParameters<br/></b></p>
<p>const acfIID AAXCompID_EffectParameters<br/></p>
<p>ACF component ID for AAX_IEffectParameters components.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.177 AAX_UIDs.h File Reference 1305<br/></b></p>
<p><b>15.177.3.57 IID_IAAXEffectParametersV1<br/></b></p>
<p>const acfIID IID_IAAXEffectParametersV1<br/></p>
<p>ACF interface ID for AAX_IACFEffectParameters.<br/></p>
<p><b>15.177.3.58 IID_IAAXEffectParametersV2<br/></b></p>
<p>const acfIID IID_IAAXEffectParametersV2<br/></p>
<p>ACF interface ID for AAX_IACFEffectParameters_V2.<br/></p>
<p><b>15.177.3.59 IID_IAAXEffectParametersV3<br/></b></p>
<p>const acfIID IID_IAAXEffectParametersV3<br/></p>
<p>ACF interface ID for AAX_IACFEffectParameters_V3.<br/></p>
<p><b>15.177.3.60 IID_IAAXEffectParametersV4<br/></b></p>
<p>const acfIID IID_IAAXEffectParametersV4<br/></p>
<p>ACF interface ID for AAX_IACFEffectParameters_V4.<br/></p>
<p><b>15.177.3.61 AAXCompID_HostProcessor<br/></b></p>
<p>const acfIID AAXCompID_HostProcessor<br/></p>
<p>ACF component ID for AAX_IHostProcessor components.<br/></p>
<p><b>15.177.3.62 IID_IAAXHostProcessorV1<br/></b></p>
<p>const acfIID IID_IAAXHostProcessorV1<br/></p>
<p>ACF interface ID for AAX_IACFHostProcessor.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1306 File Documentation<br/></b></p>
<p><b>15.177.3.63 IID_IAAXHostProcessorV2<br/></b></p>
<p>const acfIID IID_IAAXHostProcessorV2<br/></p>
<p>ACF interface ID for AAX_IACFHostProcessor_V2.<br/></p>
<p><b>15.177.3.64 AAXCompID_EffectGUI<br/></b></p>
<p>const acfIID AAXCompID_EffectGUI<br/></p>
<p>ACF component ID for AAX_IEffectGUI components.<br/></p>
<p><b>15.177.3.65 IID_IAAXEffectGUIV1<br/></b></p>
<p>const acfIID IID_IAAXEffectGUIV1<br/></p>
<p>ACF interface ID for AAX_IACFEffectGUI.<br/></p>
<p><b>15.177.3.66 AAXCompID_EffectDirectData<br/></b></p>
<p>const acfIID AAXCompID_EffectDirectData<br/></p>
<p>ACF component ID for AAX_IEffectDirectData components.<br/></p>
<p><b>15.177.3.67 IID_IAAXEffectDirectDataV1<br/></b></p>
<p>const acfIID IID_IAAXEffectDirectDataV1<br/></p>
<p>ACF interface ID for AAX_IACFEffectDirectData.<br/></p>
<p><b>15.177.3.68 IID_IAAXEffectDirectDataV2<br/></b></p>
<p>const acfIID IID_IAAXEffectDirectDataV2<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.177 AAX_UIDs.h File Reference 1307<br/></b></p>
<p><b>15.177.3.69 AAXCompID_TaskAgent<br/></b></p>
<p>const acfIID AAXCompID_TaskAgent<br/></p>
<p>ACF component ID for AAX_ITaskAgent components.<br/></p>
<p><b>15.177.3.70 IID_IAAXTaskAgentV1<br/></b></p>
<p>const acfIID IID_IAAXTaskAgentV1<br/></p>
<p>ACF interface ID for AAX_IACFTaskAgent.<br/></p>
<p><b>15.177.3.71 AAXCompID_SessionDocumentClient<br/></b></p>
<p>const acfIID AAXCompID_SessionDocumentClient<br/></p>
<p>ACF component ID for AAX_ISessionDocumentClient components.<br/></p>
<p><b>15.177.3.72 IID_IAAXSessionDocumentClientV1<br/></b></p>
<p>const acfIID IID_IAAXSessionDocumentClientV1<br/></p>
<p>ACF interface ID for AAX_IACFSessionDocumentClient.<br/></p>
<p><b>15.177.3.73 AAXCompID_DataBuffer<br/></b></p>
<p>const acfIID AAXCompID_DataBuffer<br/></p>
<p>ACF component ID for AAX_IDataBuffer components.<br/></p>
<p><b>15.177.3.74 IID_IAAXDataBufferV1<br/></b></p>
<p>const acfIID IID_IAAXDataBufferV1<br/></p>
<p>ACF interface ID for AAX_IACFDataBuffer.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1308 File Documentation<br/></b></p>
<p><b>15.177.3.75 AAXATTR_ClientFeature_StemFormat<br/></b></p>
<p>AAXATTR_ClientFeature_StemFormat<br/></p>
<p>Client stem format feature support.<br/></p>
<p>To determine the client's support for specific stem formats, use the property map<br/></p>
<p><b>Property map contents </b>Key: AAX_EStemFormat values Value: AAX_ESupportLevel value; if undefined then no<br/>information is available<br/></p>
<p><b>15.177.3.76 AAXATTR_ClientFeature_AuxOutputStem<br/></b></p>
<p>AAXATTR_ClientFeature_AuxOutputStem<br/></p>
<p>Client Auxiliary Output Stem feature support.<br/></p>
<p>Client Side Chain feature support.<br/></p>
<p>Plug-ins must detect when a host does not support AOS in order to avoid running off the end of the output audio<br/>buffer list in the audio algorithm.<br/></p>
<p>AddAuxOutputStem() will return an error for hosts that do not support this feature, so typically a feature support<br/>query using this AAX_Feature_UID is not required.<br/></p>
<p><b>15.177.3.77 AAXATTR_ClientFeature_SideChainInput<br/></b></p>
<p>const AAX_Feature_UID AAXATTR_ClientFeature_SideChainInput<br/></p>
<p><b>15.177.3.78 AAXATTR_ClientFeature_MIDI<br/></b></p>
<p>AAXATTR_ClientFeature_MIDI<br/></p>
<p>Client MIDI feature support.<br/></p>
<p><b>15.177.3.79 AAXATTR_Client_Level<br/></b></p>
<p>AAXATTR_Client_Level<br/></p>
<p>Client application level.<br/></p>
<p>Type: uint32_t (ACFTypeID_UInt32) Value: one of AAX_EHostLevel<br/></p>
<p>Query using the host's IACFDefinition<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.178 AAX_UtilsNative.h File Reference 1309<br/></b></p>
<p><b>15.177.3.80 AAXATTR_Client_Version<br/></b></p>
<p>AAXATTR_Client_Version<br/></p>
<p>Client application version.<br/></p>
<p>Type: uint32_t (ACFTypeID_UInt32)<br/></p>
<p>The value contains the host version in 3 sections:<br/></p>
<p>&#8226; First section - 16 bits - major version<br/></p>
<p>&#8226; Second section - 8 bits - minor version<br/></p>
<p>&#8226; Third section - 8 bits - revision version.<br/></p>
<p>e.g. for 2023.3.1 (major.minor.revision):<br/></p>
<p>major - 0000011111100111<br/>minor - 00000011<br/>revision - 00000001<br/></p>
<p>in a result value this would be represented as : 00000111111001110000001100000001, or in decimal:<br/>132580097<br/></p>
<p>Query using the host's IACFDefinition<br/></p>
<p><b>15.177.3.81 AAX_DocumentDataType_TempoMap<br/></b></p>
<p>AAX_DocumentDataType_TempoMap<br/></p>
<p>The session tempo map<br/></p>
<p>Provides an AAX_IACFDataBuffer containing a list of AAX_CTempoBreakpoint elements.<br/></p>
<p><b>15.178 AAX_UtilsNative.h File Reference<br/></b></p>
<p>#include &quot;AAX_CString.h&quot;<br/>#include &quot;AAX_IString.h&quot;<br/>#include &quot;AAX_Assert.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &lt;cmath&gt;<br/>#include &lt;string.h&gt;<br/></p>
<p><b>15.178.1 Description<br/></b></p>
<p>Various utility definitions for AAX Native.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1310 File Documentation<br/></b></p>
<p><b>Namespaces<br/></b></p>
<p>&#8226; AAX<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define _AAX_UTILSNATIVE_H_<br/></p>
<p><b>Functions<br/></b></p>
<p>&#8226; double AAX::SafeLog (double aValue)<br/>Double-precision safe log function. Returns zero for input values that are &lt;= 0.0.<br/></p>
<p>&#8226; float AAX::SafeLogf (float aValue)<br/>Single-precision safe log function. Returns zero for input values that are &lt;= 0.0.<br/></p>
<p>&#8226; AAX_CBoolean AAX::IsParameterIDEqual (AAX_CParamID iParam1, AAX_CParamID iParam2)<br/>Helper function to check if two parameter IDs are equivalent.<br/></p>
<p>&#8226; AAX_CBoolean AAX::IsEffectIDEqual (const AAX_IString &#8727;iEffectID1, const AAX_IString &#8727;iEffectID2)<br/>Helper function to check if two Effect IDs are equivalent.<br/></p>
<p>&#8226; AAX_CBoolean AAX::IsAvidNotification (AAX_CTypeID inNotificationID)<br/>Helper function to check if a notification ID is reserved for host notifications.<br/></p>
<p><b>15.178.2 Macro Definition Documentation<br/></b></p>
<p><b>15.178.2.1 _AAX_UTILSNATIVE_H_<br/></b></p>
<p>#define _AAX_UTILSNATIVE_H_<br/></p>
<p><b>15.179 AAX_VAutomationDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_IAutomationDelegate.h&quot;<br/>#include &quot;AAX_IACFAutomationDelegate.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>15.179.1 Description<br/></b></p>
<p>Version-managed concrete AutomationDelegate class.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VAutomationDelegate<br/>Version-managed concrete automation delegate class.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.180 AAX_VCollection.h File Reference 1311<br/></b></p>
<p><b>15.180 AAX_VCollection.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_ICollection.h&quot;<br/>#include &quot;AAX_IACFCollection.h&quot;<br/>#include &quot;AAX_VDescriptionHost.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/>#include &lt;set&gt;<br/></p>
<p><b>15.180.1 Description<br/></b></p>
<p>Version-managed concrete Collection class.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VCollection<br/>Version-managed concrete AAX_ICollection class.<br/></p>
<p><b>15.181 AAX_VComponentDescriptor.h File Reference<br/></b></p>
<p>#include &quot;AAX_IComponentDescriptor.h&quot;<br/>#include &quot;AAX_IDma.h&quot;<br/>#include &quot;AAX_IACFComponentDescriptor.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/>#include &lt;set&gt;<br/></p>
<p><b>15.181.1 Description<br/></b></p>
<p>Version-managed concrete ComponentDescriptor class.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VComponentDescriptor<br/>Version-managed concrete AAX_IComponentDescriptor class.<br/></p>
<p><b>15.182 AAX_VController.h File Reference<br/></b></p>
<p>#include &quot;AAX_IController.h&quot;<br/>#include &quot;AAX_IACFController.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1312 File Documentation<br/></b></p>
<p><b>15.182.1 Description<br/></b></p>
<p>Version-managed concrete Controller class.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VController<br/>Version-managed concrete Controller class.<br/></p>
<p><b>15.183 AAX_VDataBufferWrapper.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDataBufferWrapper.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VDataBufferWrapper<br/>Wrapper for an AAX_IDataBuffer.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_VDATABUFFERWRAPPER_H<br/></p>
<p><b>15.183.1 Macro Definition Documentation<br/></b></p>
<p><b>15.183.1.1 AAX_VDATABUFFERWRAPPER_H<br/></b></p>
<p>#define AAX_VDATABUFFERWRAPPER_H<br/></p>
<p><b>15.184 AAX_VDescriptionHost.h File Reference<br/></b></p>
<p>#include &quot;AAX_IDescriptionHost.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VDescriptionHost<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.185 AAX_VEffectDescriptor.h File Reference 1313<br/></b></p>
<p><b>15.185 AAX_VEffectDescriptor.h File Reference<br/></b></p>
<p>#include &quot;AAX.h&quot;<br/>#include &quot;AAX_IEffectDescriptor.h&quot;<br/>#include &quot;AAX_IACFEffectDescriptor.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/>#include &lt;set&gt;<br/>#include &lt;map&gt;<br/></p>
<p><b>15.185.1 Description<br/></b></p>
<p>Version-managed concrete EffectDescriptor class.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_VEffectDescriptor<br/></p>
<p>Version-managed concrete AAX_IEffectDescriptor class.<br/></p>
<p><b>15.186 AAX_VENUE_Guide.doxygen File Reference<br/></b></p>
<p><b>15.187 AAX_Version.h File Reference<br/></b></p>
<p><b>15.187.1 Description<br/></b></p>
<p>Version stamp header for the AAX SDK.<br/></p>
<p>This file defines a unique number that can be used to identify the version of the AAX SDK<br/></p>
<p><b>Macros<br/></b>&#8226; #define _AAX_VERSION_H_<br/>&#8226; #define AAX_SDK_VERSION ( 0x0208 )<br/></p>
<p>The SDK's version number.<br/>&#8226; #define AAX_SDK_CURRENT_REVISION ( 20208001 )<br/></p>
<p>An atomic revision number for the source included in this SDK.<br/>&#8226; #define AAX_SDK_1p0p1_REVISION ( 3712639 )<br/>&#8226; #define AAX_SDK_1p0p2_REVISION ( 3780585 )<br/>&#8226; #define AAX_SDK_1p0p3_REVISION ( 3895859 )<br/>&#8226; #define AAX_SDK_1p0p4_REVISION ( 4333589 )<br/>&#8226; #define AAX_SDK_1p0p5_REVISION ( 4598560 )<br/>&#8226; #define AAX_SDK_1p0p6_REVISION ( 5051497 )<br/>&#8226; #define AAX_SDK_1p5p0_REVISION ( 5740047 )<br/>&#8226; #define AAX_SDK_2p0b1_REVISION ( 6169787 )<br/>&#8226; #define AAX_SDK_2p0p0_REVISION ( 6307708 )<br/>&#8226; #define AAX_SDK_2p0p1_REVISION ( 6361692 )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1314 File Documentation<br/></b></p>
<p>&#8226; #define AAX_SDK_2p1p0_REVISION ( 7820991 )<br/>&#8226; #define AAX_SDK_2p1p1_REVISION ( 8086416 )<br/>&#8226; #define AAX_SDK_2p2p0_REVISION ( 9967334 )<br/>&#8226; #define AAX_SDK_2p2p1_REVISION ( 10693954 )<br/>&#8226; #define AAX_SDK_2p2p2_REVISION ( 11819832 )<br/>&#8226; #define AAX_SDK_2p3p0_REVISION ( 12546840 )<br/>&#8226; #define AAX_SDK_2p3p1_REVISION ( 13200373 )<br/>&#8226; #define AAX_SDK_2p3p2_REVISION ( 14017972 )<br/>&#8226; #define AAX_SDK_2p4p0_REVISION ( 20204000 )<br/>&#8226; #define AAX_SDK_2p4p1_REVISION ( 20204010 )<br/>&#8226; #define AAX_SDK_2p5p0_REVISION ( 20205000 )<br/>&#8226; #define AAX_SDK_2p6p0_REVISION ( 20206000 )<br/>&#8226; #define AAX_SDK_2p6p1_REVISION ( 20206001 )<br/>&#8226; #define AAX_SDK_2p7p0_REVISION ( 20207000 )<br/>&#8226; #define AAX_SDK_2p8p0_REVISION ( 20208000 )<br/>&#8226; #define AAX_SDK_2p8p1_REVISION ( 20208001 )<br/></p>
<p><b>15.187.2 Macro Definition Documentation<br/></b></p>
<p><b>15.187.2.1 _AAX_VERSION_H_<br/></b></p>
<p>#define _AAX_VERSION_H_<br/></p>
<p><b>15.187.2.2 AAX_SDK_VERSION<br/></b></p>
<p>#define AAX_SDK_VERSION ( 0x0208 )<br/></p>
<p>The SDK's version number.<br/></p>
<p>This version number is generally updated only when changes have been made to the AAX binary interface<br/></p>
<p>&#8226; The first byte is the major version number<br/></p>
<p>&#8226; The second byte is the minor version number<br/></p>
<p>For example:<br/></p>
<p>&#8226; SDK 1.0.5 &gt; 0x0100<br/></p>
<p>&#8226; SDK 10.2.1 &gt; 0x0A02<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.187 AAX_Version.h File Reference 1315<br/></b></p>
<p><b>15.187.2.3 AAX_SDK_CURRENT_REVISION<br/></b></p>
<p>#define AAX_SDK_CURRENT_REVISION ( 20208001 )<br/></p>
<p>An atomic revision number for the source included in this SDK.<br/></p>
<p><b>15.187.2.4 AAX_SDK_1p0p1_REVISION<br/></b></p>
<p>#define AAX_SDK_1p0p1_REVISION ( 3712639 )<br/></p>
<p><b>15.187.2.5 AAX_SDK_1p0p2_REVISION<br/></b></p>
<p>#define AAX_SDK_1p0p2_REVISION ( 3780585 )<br/></p>
<p><b>15.187.2.6 AAX_SDK_1p0p3_REVISION<br/></b></p>
<p>#define AAX_SDK_1p0p3_REVISION ( 3895859 )<br/></p>
<p><b>15.187.2.7 AAX_SDK_1p0p4_REVISION<br/></b></p>
<p>#define AAX_SDK_1p0p4_REVISION ( 4333589 )<br/></p>
<p><b>15.187.2.8 AAX_SDK_1p0p5_REVISION<br/></b></p>
<p>#define AAX_SDK_1p0p5_REVISION ( 4598560 )<br/></p>
<p><b>15.187.2.9 AAX_SDK_1p0p6_REVISION<br/></b></p>
<p>#define AAX_SDK_1p0p6_REVISION ( 5051497 )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1316 File Documentation<br/></b></p>
<p><b>15.187.2.10 AAX_SDK_1p5p0_REVISION<br/></b></p>
<p>#define AAX_SDK_1p5p0_REVISION ( 5740047 )<br/></p>
<p><b>15.187.2.11 AAX_SDK_2p0b1_REVISION<br/></b></p>
<p>#define AAX_SDK_2p0b1_REVISION ( 6169787 )<br/></p>
<p><b>15.187.2.12 AAX_SDK_2p0p0_REVISION<br/></b></p>
<p>#define AAX_SDK_2p0p0_REVISION ( 6307708 )<br/></p>
<p><b>15.187.2.13 AAX_SDK_2p0p1_REVISION<br/></b></p>
<p>#define AAX_SDK_2p0p1_REVISION ( 6361692 )<br/></p>
<p><b>15.187.2.14 AAX_SDK_2p1p0_REVISION<br/></b></p>
<p>#define AAX_SDK_2p1p0_REVISION ( 7820991 )<br/></p>
<p><b>15.187.2.15 AAX_SDK_2p1p1_REVISION<br/></b></p>
<p>#define AAX_SDK_2p1p1_REVISION ( 8086416 )<br/></p>
<p><b>15.187.2.16 AAX_SDK_2p2p0_REVISION<br/></b></p>
<p>#define AAX_SDK_2p2p0_REVISION ( 9967334 )<br/></p>
<p><b>15.187.2.17 AAX_SDK_2p2p1_REVISION<br/></b></p>
<p>#define AAX_SDK_2p2p1_REVISION ( 10693954 )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.187 AAX_Version.h File Reference 1317<br/></b></p>
<p><b>15.187.2.18 AAX_SDK_2p2p2_REVISION<br/></b></p>
<p>#define AAX_SDK_2p2p2_REVISION ( 11819832 )<br/></p>
<p><b>15.187.2.19 AAX_SDK_2p3p0_REVISION<br/></b></p>
<p>#define AAX_SDK_2p3p0_REVISION ( 12546840 )<br/></p>
<p><b>15.187.2.20 AAX_SDK_2p3p1_REVISION<br/></b></p>
<p>#define AAX_SDK_2p3p1_REVISION ( 13200373 )<br/></p>
<p><b>15.187.2.21 AAX_SDK_2p3p2_REVISION<br/></b></p>
<p>#define AAX_SDK_2p3p2_REVISION ( 14017972 )<br/></p>
<p><b>15.187.2.22 AAX_SDK_2p4p0_REVISION<br/></b></p>
<p>#define AAX_SDK_2p4p0_REVISION ( 20204000 )<br/></p>
<p><b>15.187.2.23 AAX_SDK_2p4p1_REVISION<br/></b></p>
<p>#define AAX_SDK_2p4p1_REVISION ( 20204010 )<br/></p>
<p><b>15.187.2.24 AAX_SDK_2p5p0_REVISION<br/></b></p>
<p>#define AAX_SDK_2p5p0_REVISION ( 20205000 )<br/></p>
<p><b>15.187.2.25 AAX_SDK_2p6p0_REVISION<br/></b></p>
<p>#define AAX_SDK_2p6p0_REVISION ( 20206000 )<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1318 File Documentation<br/></b></p>
<p><b>15.187.2.26 AAX_SDK_2p6p1_REVISION<br/></b></p>
<p>#define AAX_SDK_2p6p1_REVISION ( 20206001 )<br/></p>
<p><b>15.187.2.27 AAX_SDK_2p7p0_REVISION<br/></b></p>
<p>#define AAX_SDK_2p7p0_REVISION ( 20207000 )<br/></p>
<p><b>15.187.2.28 AAX_SDK_2p8p0_REVISION<br/></b></p>
<p>#define AAX_SDK_2p8p0_REVISION ( 20208000 )<br/></p>
<p><b>15.187.2.29 AAX_SDK_2p8p1_REVISION<br/></b></p>
<p>#define AAX_SDK_2p8p1_REVISION ( 20208001 )<br/></p>
<p><b>15.188 AAX_VFeatureInfo.h File Reference<br/></b></p>
<p>#include &quot;AAX_IFeatureInfo.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/>#include &quot;acfbasetypes.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VFeatureInfo<br/></p>
<p><b>15.189 AAX_VHostProcessorDelegate.h File Reference<br/></b></p>
<p>#include &quot;AAX_IHostProcessorDelegate.h&quot;<br/>#include &quot;AAX_IACFHostProcessorDelegate.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>15.189.1 Description<br/></b></p>
<p>Version-managed concrete HostProcessorDelegate class.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.190 AAX_VHostServices.h File Reference 1319<br/></b></p>
<p><b>Classes<br/></b>&#8226; class AAX_VHostProcessorDelegate<br/></p>
<p>Version-managed concrete Host Processor delegate class.<br/></p>
<p><b>15.190 AAX_VHostServices.h File Reference<br/></b></p>
<p>#include &quot;AAX_IHostServices.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/>#include &quot;AAX_IACFHostServices.h&quot;<br/></p>
<p><b>15.190.1 Description<br/></b></p>
<p>Version-managed concrete HostServices class.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_VHostServices<br/></p>
<p>Version-managed concrete AAX_IHostServices class.<br/></p>
<p><b>15.191 AAX_VHostTaskAgent.h File Reference<br/></b></p>
<p>#include &quot;AAX_IHostTaskAgent.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_VHostTaskAgent<br/></p>
<p><b>Macros<br/></b>&#8226; #define AAX_VHostTaskAgent_H<br/></p>
<p><b>15.191.1 Macro Definition Documentation<br/></b></p>
<p><b>15.191.1.1 AAX_VHostTaskAgent_H<br/></b></p>
<p>#define AAX_VHostTaskAgent_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1320 File Documentation<br/></b></p>
<p><b>15.192 AAX_VPageTable.h File Reference<br/></b></p>
<p>#include &quot;AAX_IPageTable.h&quot;<br/>#include &quot;AAX_IACFPageTable.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VPageTable<br/>Version-managed concrete AAX_IPageTable class.<br/></p>
<p><b>15.193 AAX_VPrivateDataAccess.h File Reference<br/></b></p>
<p>#include &quot;AAX_IPrivateDataAccess.h&quot;<br/>#include &quot;AAX_IACFPrivateDataAccess.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>15.193.1 Description<br/></b></p>
<p>Version-managed concrete PrivateDataAccess class.<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VPrivateDataAccess<br/>Version-managed concrete AAX_IPrivateDataAccess class.<br/></p>
<p><b>15.194 AAX_VPropertyMap.h File Reference<br/></b></p>
<p>#include &quot;AAX_IPropertyMap.h&quot;<br/>#include &quot;AAX_IACFPropertyMap.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;acfunknown.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/>#include &lt;map&gt;<br/></p>
<p><b>15.194.1 Description<br/></b></p>
<p>Version-managed concrete PropertyMap class.<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>15.195 AAX_VSessionDocument.h File Reference 1321<br/></b></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VPropertyMap<br/>Version-managed concrete AAX_IPropertyMap class.<br/></p>
<p><b>15.195 AAX_VSessionDocument.h File Reference<br/></b></p>
<p>#include &quot;AAX_ISessionDocument.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VSessionDocument<br/>&#8226; class AAX_VSessionDocument::VTempoMap<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_VSessionDocument_H<br/></p>
<p><b>15.195.1 Macro Definition Documentation<br/></b></p>
<p><b>15.195.1.1 AAX_VSessionDocument_H<br/></b></p>
<p>#define AAX_VSessionDocument_H<br/></p>
<p><b>15.196 AAX_VTask.h File Reference<br/></b></p>
<p>#include &quot;AAX_ITask.h&quot;<br/>#include &quot;AAX.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>Classes<br/></b></p>
<p>&#8226; class AAX_VTask<br/>Version-managed concrete AAX_ITask.<br/></p>
<p><b>Macros<br/></b></p>
<p>&#8226; #define AAX_VTask_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1322 File Documentation<br/></b></p>
<p><b>15.196.1 Macro Definition Documentation<br/></b></p>
<p><b>15.196.1.1 AAX_VTask_H<br/></b></p>
<p>#define AAX_VTask_H<br/></p>
<p><b>15.197 AAX_VTransport.h File Reference<br/></b></p>
<p>#include &quot;AAX_ITransport.h&quot;<br/>#include &quot;AAX_IACFTransport.h&quot;<br/>#include &quot;AAX_IACFTransportControl.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>15.197.1 Description<br/></b></p>
<p>Version-managed concrete Transport class.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_VTransport<br/></p>
<p>Version-managed concrete AAX_ITransport class.<br/></p>
<p><b>15.198 AAX_VViewContainer.h File Reference<br/></b></p>
<p>#include &quot;AAX_IViewContainer.h&quot;<br/>#include &quot;AAX_IACFViewContainer.h&quot;<br/>#include &quot;ACFPtr.h&quot;<br/></p>
<p><b>15.198.1 Description<br/></b></p>
<p>Version-managed concrete ViewContainer class.<br/></p>
<p><b>Classes<br/></b>&#8226; class AAX_VViewContainer<br/></p>
<p>Version-managed concrete AAX_IViewContainer class.<br/></p>
<p><b>15.199 DSH_Guide.doxygen File Reference<br/></b></p>
<p><b>15.200 DTT_Guide.doxygen File Reference<br/></b></p>
<p><b>15.201 ReadMe.doxygen File Reference<br/></b></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>Index<br/></b></p>
<p>_AAX_CAUTORELEASEPOOL_H_<br/>AAX_CAutoreleasePool.h, 1132<br/></p>
<p>_AAX_FASTPOW_H_<br/>AAX_FastPow.h, 1219<br/></p>
<p>_AAX_UTILSNATIVE_H_<br/>AAX_UtilsNative.h, 1310<br/></p>
<p>_AAX_VERSION_H_<br/>AAX_Version.h, 1314<br/></p>
<p>_acfUID, 403<br/>Data1, 403<br/>Data2, 403<br/>Data3, 403<br/>Data4, 403<br/></p>
<p>&#8764;AAX_AggregateResult<br/>AAX_AggregateResult, 405<br/></p>
<p>&#8764;AAX_CArrayDataBuffer<br/>AAX_CArrayDataBuffer&lt; D &gt;, 408<br/></p>
<p>&#8764;AAX_CArrayDataBufferOfType<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;, 411<br/></p>
<p>&#8764;AAX_CAtomicQueue<br/>AAX_CAtomicQueue&lt; T, S &gt;, 414<br/></p>
<p>&#8764;AAX_CAutoreleasePool<br/>AAX_CAutoreleasePool, 416<br/></p>
<p>&#8764;AAX_CChunkDataParser<br/>AAX_CChunkDataParser, 426<br/></p>
<p>&#8764;AAX_CEffectDirectData<br/>AAX_CEffectDirectData, 435<br/></p>
<p>&#8764;AAX_CEffectGUI<br/>AAX_CEffectGUI, 440<br/></p>
<p>&#8764;AAX_CEffectParameters<br/>AAX_CEffectParameters, 453<br/></p>
<p>&#8764;AAX_CHostProcessor<br/>AAX_CHostProcessor, 488<br/></p>
<p>&#8764;AAX_CMonolithicParameters<br/>AAX_CMonolithicParameters, 511<br/></p>
<p>&#8764;AAX_CMutex<br/>AAX_CMutex, 517<br/></p>
<p>&#8764;AAX_CPacket<br/>AAX_CPacket, 523<br/></p>
<p>&#8764;AAX_CPacketDispatcher<br/>AAX_CPacketDispatcher, 525<br/></p>
<p>&#8764;AAX_CParameter<br/>AAX_CParameter&lt; T &gt;, 537<br/></p>
<p>&#8764;AAX_CParameterManager<br/>AAX_CParameterManager, 567<br/></p>
<p>&#8764;AAX_CPieceWiseLinearTaperDelegate<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, Real-<br/></p>
<p>Precision &gt;, 586<br/>&#8764;AAX_CSessionDocumentClient<br/></p>
<p>AAX_CSessionDocumentClient, 594<br/>&#8764;AAX_CStringDataBuffer<br/></p>
<p>AAX_CStringDataBuffer, 644<br/>&#8764;AAX_CStringDataBufferOfType<br/></p>
<p>AAX_CStringDataBufferOfType&lt; T &gt;, 647<br/>&#8764;AAX_CTaskAgent<br/></p>
<p>AAX_CTaskAgent, 657<br/>&#8764;AAX_CheckedResult<br/></p>
<p>AAX_CheckedResult, 484<br/>&#8764;AAX_IAutomationDelegate<br/></p>
<p>AAX_IAutomationDelegate, 799<br/>&#8764;AAX_ICollection<br/></p>
<p>AAX_ICollection, 804<br/>&#8764;AAX_IComponentDescriptor<br/></p>
<p>AAX_IComponentDescriptor, 810<br/>&#8764;AAX_IContainer<br/></p>
<p>AAX_IContainer, 823<br/>&#8764;AAX_IController<br/></p>
<p>AAX_IController, 826<br/>&#8764;AAX_IDataBufferWrapper<br/></p>
<p>AAX_IDataBufferWrapper, 842<br/>&#8764;AAX_IDescriptionHost<br/></p>
<p>AAX_IDescriptionHost, 843<br/>&#8764;AAX_IDisplayDelegateBase<br/></p>
<p>AAX_IDisplayDelegateBase, 849<br/>&#8764;AAX_IDisplayDelegateDecorator<br/></p>
<p>AAX_IDisplayDelegateDecorator&lt; T &gt;, 851<br/>&#8764;AAX_IDma<br/></p>
<p>AAX_IDma, 856<br/>&#8764;AAX_IEffectDescriptor<br/></p>
<p>AAX_IEffectDescriptor, 865<br/>&#8764;AAX_IFeatureInfo<br/></p>
<p>AAX_IFeatureInfo, 874<br/>&#8764;AAX_IHostProcessorDelegate<br/></p>
<p>AAX_IHostProcessorDelegate, 878<br/>&#8764;AAX_IHostServices<br/></p>
<p>AAX_IHostServices, 880<br/>&#8764;AAX_IHostTaskAgent<br/></p>
<p>AAX_IHostTaskAgent, 883<br/>&#8764;AAX_IMIDIMessageInfoDelegate<br/></p>
<p>AAX_IMIDIMessageInfoDelegate, 884<br/>&#8764;AAX_IMIDINode<br/></p>
<p>AAX_IMIDINode, 887<br/>&#8764;AAX_IPacketHandler<br/></p>
<p>AAX_IPacketHandler, 889<br/>&#8764;AAX_IPageTable<br/></p>
<p>AAX_IPageTable, 891<br/>&#8764;AAX_IParameter<br/></p>
<p>AAX_IParameter, 902<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1324 INDEX<br/></b></p>
<p>&#8764;AAX_IParameterValue<br/>AAX_IParameterValue, 922<br/></p>
<p>&#8764;AAX_IPointerQueue<br/>AAX_IPointerQueue&lt; T &gt;, 926<br/></p>
<p>&#8764;AAX_IPrivateDataAccess<br/>AAX_IPrivateDataAccess, 928<br/></p>
<p>&#8764;AAX_IPropertyMap<br/>AAX_IPropertyMap, 930<br/></p>
<p>&#8764;AAX_ISessionDocument<br/>AAX_ISessionDocument, 935<br/></p>
<p>&#8764;AAX_IString<br/>AAX_IString, 938<br/></p>
<p>&#8764;AAX_ITaperDelegateBase<br/>AAX_ITaperDelegateBase, 943<br/></p>
<p>&#8764;AAX_ITask<br/>AAX_ITask, 945<br/></p>
<p>&#8764;AAX_ITransport<br/>AAX_ITransport, 949<br/></p>
<p>&#8764;AAX_IViewContainer<br/>AAX_IViewContainer, 959<br/></p>
<p>&#8764;AAX_Map<br/>AAX_Map, 964<br/></p>
<p>&#8764;AAX_StLock_Guard<br/>AAX_StLock_Guard, 988<br/></p>
<p>&#8764;AAX_VAutomationDelegate<br/>AAX_VAutomationDelegate, 991<br/></p>
<p>&#8764;AAX_VCollection<br/>AAX_VCollection, 996<br/></p>
<p>&#8764;AAX_VComponentDescriptor<br/>AAX_VComponentDescriptor, 1002<br/></p>
<p>&#8764;AAX_VController<br/>AAX_VController, 1016<br/></p>
<p>&#8764;AAX_VDataBufferWrapper<br/>AAX_VDataBufferWrapper, 1030<br/></p>
<p>&#8764;AAX_VDescriptionHost<br/>AAX_VDescriptionHost, 1031<br/></p>
<p>&#8764;AAX_VEffectDescriptor<br/>AAX_VEffectDescriptor, 1034<br/></p>
<p>&#8764;AAX_VFeatureInfo<br/>AAX_VFeatureInfo, 1039<br/></p>
<p>&#8764;AAX_VHostServices<br/>AAX_VHostServices, 1044<br/></p>
<p>&#8764;AAX_VHostTaskAgent<br/>AAX_VHostTaskAgent, 1046<br/></p>
<p>&#8764;AAX_VPageTable<br/>AAX_VPageTable, 1048<br/></p>
<p>&#8764;AAX_VPrivateDataAccess<br/>AAX_VPrivateDataAccess, 1058<br/></p>
<p>&#8764;AAX_VPropertyMap<br/>AAX_VPropertyMap, 1061<br/></p>
<p>&#8764;AAX_VSessionDocument<br/>AAX_VSessionDocument, 1066<br/></p>
<p>&#8764;AAX_VTask<br/>AAX_VTask, 1069<br/></p>
<p>&#8764;AAX_VTransport<br/>AAX_VTransport, 1072<br/></p>
<p>&#8764;AAX_VViewContainer<br/>AAX_VViewContainer, 1082<br/></p>
<p>&#8764;Any<br/>AAX::Exception::Any, 1089<br/></p>
<p>&#8764;SAutoArray<br/>SAutoArray&lt; T &gt;, 1098<br/></p>
<p>&#8764;TempoMap<br/>AAX_ISessionDocument::TempoMap, 1099<br/></p>
<p>&#8764;VTempoMap<br/>AAX_VSessionDocument::VTempoMap, 1100<br/></p>
<p>AAE_EAudioBufferLengthNative<br/>AAX_Enums.h, 1174<br/></p>
<p>AAX, 371<br/>AbsMax, 388<br/>alignFree, 385<br/>alignMalloc, 385<br/>AsString, 377<br/>AsStringFourChar, 382<br/>AsStringIDTriad, 383<br/>AsStringInt32, 382<br/>AsStringPropertyValue, 382<br/>AsStringResult, 383<br/>AsStringStemChannel, 383<br/>AsStringStemFormat, 383<br/>AsStringSupportLevel, 384<br/>AsStringUInt32, 382<br/>Binary2String, 381<br/>Caseless_strcmp, 381<br/>cBigEndian, 393<br/>cDenormalAvoidanceOffset, 396<br/>CeilLog2, 390<br/>cFloatDenormalAvoidanceOffset, 396<br/>cGiga, 396<br/>cHalfPi, 394<br/>cInitialSeedValue, 397<br/>cKilo, 396<br/>ClampToZero, 387<br/>ClearMappedParameterByID, 380<br/>cLittleEndian, 393<br/>cMega, 396<br/>cMicro, 395<br/>cMilli, 395<br/>cNano, 396<br/>cNeg3dB, 395<br/>cNeg6dB, 395<br/>cNormalizeLongToAmplitudeOne, 395<br/>cNormalizeLongToAmplitudeOneHalf, 395<br/>cOneOverRootTwo, 394<br/>CopyPageTable, 380<br/>cPi, 394<br/>cPico, 396<br/>cPos3dB, 394<br/>cPos6dB, 395<br/>cQuarterPi, 394<br/>cRootTwo, 394<br/>cSeedDivisor, 397<br/>cTwoPi, 394<br/>DeDenormal, 386<br/>DeDenormalFine, 386<br/>e176400SampleRate, 377<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1325<br/></b></p>
<p>e192000SampleRate, 377<br/>e44100SampleRate, 377<br/>e48000SampleRate, 377<br/>e88200SampleRate, 377<br/>e96000SampleRate, 377<br/>EChannelModeData, 376<br/>eChannelModeData_AllNotesOff, 376<br/>eChannelModeData_AllSoundOff, 376<br/>eChannelModeData_LocalControl, 376<br/>eChannelModeData_OmniOff, 376<br/>eChannelModeData_OmniOn, 376<br/>eChannelModeData_PolyOff, 376<br/>eChannelModeData_PolyOn, 376<br/>eChannelModeData_ResetControllers, 376<br/>ESampleRates, 377<br/>ESpecialData, 376<br/>eSpecialData_AccentedClick, 376<br/>eSpecialData_UnaccentedClick, 376<br/>EStatusByte, 375<br/>eStatusByte_ActiveSensing, 376<br/>eStatusByte_Continue, 376<br/>eStatusByte_MTCQuarterFrame, 376<br/>eStatusByte_Reset, 376<br/>eStatusByte_SongPosition, 376<br/>eStatusByte_SongSelect, 376<br/>eStatusByte_Start, 376<br/>eStatusByte_Stop, 376<br/>eStatusByte_SysExBegin, 375<br/>eStatusByte_SysExEnd, 376<br/>eStatusByte_TimingClock, 376<br/>eStatusByte_TuneRequest, 376<br/>EStatusNibble, 375<br/>eStatusNibble_ChannelMode, 375<br/>eStatusNibble_ChannelPressure, 375<br/>eStatusNibble_ControlChange, 375<br/>eStatusNibble_KeyPressure, 375<br/>eStatusNibble_NoteOff, 375<br/>eStatusNibble_NoteOn, 375<br/>eStatusNibble_PitchBend, 375<br/>eStatusNibble_ProgramChange, 375<br/>eStatusNibble_SystemCommon, 375<br/>eStatusNibble_SystemRealTime, 375<br/>fabs, 388<br/>fabsf, 388<br/>FastRndDbl2Int32, 391<br/>FastRound2Int32, 390<br/>FastRound2Int64, 392<br/>FastTrunc2Int32, 391<br/>Fill, 387, 388<br/>FilterDenormals, 386<br/>FindParameterMappingsInPageTable, 380<br/>GetCStringOfLength, 381<br/>GetFastInt32RPDF, 392<br/>GetFastRPDFWithAmplitudeOne, 393<br/>GetInt32RPDF, 392<br/>GetRPDFWithAmplitudeOne, 393<br/>GetRPDFWithAmplitudeOneHalf, 393<br/>GetTPDFWithAmplitudeOne, 393<br/></p>
<p>IsAccentedClick, 378<br/>IsAllNotesOff, 378<br/>IsASCII, 381<br/>IsAvidNotification, 385<br/>IsClick, 379<br/>IsEffectIDEqual, 385<br/>IsFourCharASCII, 382<br/>IsNoteOff, 378<br/>IsNoteOn, 377<br/>IsParameterIDEqual, 385<br/>IsUnaccentedClick, 378<br/>kPowExtent, 397<br/>kPowTableSize, 397<br/>Max, 389<br/>Min, 389<br/>MinMax, 389<br/>PageTableParameterMappingsAreEqual, 379<br/>PageTableParameterNameVariationsAreEqual,<br/></p>
<p>379<br/>PageTablesAreEqual, 379<br/>PolyEval, 389<br/>SafeLog, 384<br/>SafeLogf, 384<br/>Sign, 389<br/>SinCosMix, 390<br/>String2Binary, 381<br/>ZeroMemoryDW, 387<br/>ZeroMemorySW, 387<br/></p>
<p>AAX communication protocols, 79<br/>AAX Format Specification, 81<br/>AAX Host Guides, 150<br/>AAX Interfaces, 289<br/>AAX Library features, 106<br/>AAX SDK Manual, 47<br/>AAX.h, 1103<br/></p>
<p>AAX_ALIGN_FILE_ALG, 1109<br/>AAX_ALIGN_FILE_BEGIN, 1110<br/>AAX_ALIGN_FILE_END, 1110<br/>AAX_ALIGN_FILE_HOST, 1109<br/>AAX_ALIGN_FILE_RESET, 1110<br/>AAX_CALLBACK, 1110<br/>AAX_CAudioInPort, 1116<br/>AAX_CAudioOutPort, 1116<br/>AAX_CBoolean, 1112<br/>AAX_CComponentID, 1114<br/>AAX_CCount, 1112<br/>AAX_CEffectID, 1115<br/>AAX_CFieldIndex, 1114<br/>AAX_CIndex, 1111<br/>AAX_CMeterID, 1114<br/>AAX_CMeterPort, 1116<br/>AAX_CONSTEXPR, 1108<br/>AAX_CPageTableParamID, 1115<br/>AAX_CParamID, 1114<br/>AAX_CPointerPropertyValue, 1113<br/>AAX_CPP11_SUPPORT, 1106<br/>AAX_CPropertyValue, 1113<br/>AAX_CPropertyValue64, 1113<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1326 INDEX<br/></b></p>
<p>AAX_CSampleRate, 1113<br/>AAX_CSelector, 1112<br/>AAX_CTargetPlatform, 1114<br/>AAX_CTimeOfDay, 1112<br/>AAX_CTimestamp, 1112<br/>AAX_CTransportCounter, 1112<br/>AAX_CTypeID, 1113<br/>AAX_DEFAULT_ASGN_OPER, 1107<br/>AAX_DEFAULT_COPY_CTOR, 1107<br/>AAX_DEFAULT_CTOR, 1107<br/>AAX_DEFAULT_DTOR, 1107<br/>AAX_DEFAULT_DTOR_OVERRIDE, 1107<br/>AAX_DEFAULT_MOVE_CTOR, 1108<br/>AAX_DEFAULT_MOVE_OPER, 1108<br/>AAX_DELETE, 1108<br/>AAX_Feature_UID, 1115<br/>AAX_FIELD_INDEX, 1111<br/>AAX_FINAL, 1107<br/>AAX_OVERRIDE, 1106<br/>AAX_PointerSize, 1109<br/>AAX_PREPROCESSOR_CONCAT, 1111<br/>AAX_PREPROCESSOR_CONCAT_HELPER,<br/></p>
<p>1111<br/>AAX_Result, 1113<br/>AAX_SPlugInChunk, 1117<br/>AAX_SPlugInChunkHeader, 1116<br/>AAX_SPlugInChunkPtr, 1117<br/>AAX_SPlugInIdentifierTriad, 1117<br/>AAX_SPlugInIdentifierTriadPtr, 1117<br/>AAX_UNIQUE_PTR, 1108<br/>AAXPointer_32bit, 1109<br/>AAXPointer_64bit, 1109<br/>acfUID, 1115<br/>kAAX_ParameterIdentifierMaxSize, 1117<br/>TI_VERSION, 1106<br/></p>
<p>AAX::Exception, 397<br/>AAX::Exception::Any, 1088<br/></p>
<p>&#8764;Any, 1089<br/>AAX_DEFAULT_MOVE_CTOR, 1090<br/>AAX_DEFAULT_MOVE_OPER, 1090<br/>Any, 1089, 1090<br/>Desc, 1090<br/>Function, 1091<br/>Line, 1091<br/>operator=, 1090<br/>What, 1090<br/></p>
<p>AAX::Exception::ResultError, 1096<br/>FormatResult, 1098<br/>Result, 1098<br/>ResultError, 1097<br/></p>
<p>AAX::internal, 398<br/>ToHexadecimal, 398<br/></p>
<p>AAX_ACFInterface.doxygen, 1117<br/>acfIID, 1118<br/>acfUID, 1118<br/></p>
<p>AAX_AdditionalFeatures_Algorithm.doxygen, 1118<br/>AAX_AdditionalFeatures_AOSandSidechain.doxygen,<br/></p>
<p>1118<br/></p>
<p>AAX_AdditionalFeatures_CurveDisplays.doxygen, 1118<br/>AAX_AdditionalFeatures_Hybrid.doxygen, 1118<br/>AAX_AdditionalFeatures_Meters.doxygen, 1118<br/>AAX_AdditionalFeatures_MIDI.doxygen, 1118<br/>AAX_AdditionalFeatures_PropertiesFile.doxygen, 1118<br/>AAX_AggregateResult, 404<br/>&#8764;AAX_AggregateResult, 405<br/>AAX_AggregateResult, 405<br/>Check, 405<br/>Clear, 405<br/>LastFailure, 406<br/>NumAttempted, 406<br/>NumFailed, 406<br/>NumSucceeded, 406<br/>operator AAX_Result, 405<br/>operator=, 405<br/></p>
<p>AAX_ALIGN_FILE_ALG<br/>AAX.h, 1109<br/></p>
<p>AAX_ALIGN_FILE_BEGIN<br/>AAX.h, 1110<br/></p>
<p>AAX_ALIGN_FILE_END<br/>AAX.h, 1110<br/></p>
<p>AAX_ALIGN_FILE_HOST<br/>AAX.h, 1109<br/></p>
<p>AAX_ALIGN_FILE_RESET<br/>AAX.h, 1110<br/></p>
<p>AAX_Alignment.h, 1118<br/>AAX_ALIGNMENT_HINT<br/></p>
<p>AAX_MiscUtils.h, 1254<br/>AAX_ASSERT<br/></p>
<p>AAX_Assert.h, 1123<br/>AAX_Assert.h, 1119<br/></p>
<p>AAX_ASSERT, 1123<br/>AAX_DEBUGASSERT, 1123<br/>AAX_ETracePriority, 1125<br/>AAX_STACKTRACE, 1124<br/>AAX_STACKTRACE_RELEASE, 1122<br/>AAX_TRACE, 1124<br/>AAX_TRACE_RELEASE, 1121<br/>AAX_TRACEORSTACKTRACE, 1124<br/>AAX_TRACEORSTACKTRACE_RELEASE, 1122<br/>kAAX_Trace_Priority_Critical, 1121<br/>kAAX_Trace_Priority_High, 1121<br/>kAAX_Trace_Priority_Low, 1121<br/>kAAX_Trace_Priority_Lowest, 1121<br/>kAAX_Trace_Priority_None, 1120<br/>kAAX_Trace_Priority_Normal, 1121<br/></p>
<p>AAX_Atomic.h, 1125<br/>AAX_Atomic_DecThenGet_32, 1126<br/>AAX_Atomic_Exchange_32, 1126<br/>AAX_ATOMIC_H_, 1126<br/>AAX_Atomic_IncThenGet_32, 1126<br/></p>
<p>AAX_Atomic_DecThenGet_32<br/>AAX_Atomic.h, 1126<br/></p>
<p>AAX_Atomic_Exchange_32<br/>AAX_Atomic.h, 1126<br/></p>
<p>AAX_ATOMIC_H_<br/>AAX_Atomic.h, 1126<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1327<br/></b></p>
<p>AAX_Atomic_IncThenGet_32<br/>AAX_Atomic.h, 1126<br/></p>
<p>AAX_AuxInterface_DirectData.doxygen, 1127<br/>AAX_AuxInterface_HostProcessor.doxygen, 1127<br/>AAX_AuxInterface_TaskAgent.doxygen, 1127<br/>AAX_BigEndianNativeSwap<br/></p>
<p>AAX_EndianSwap.h, 1159<br/>AAX_BigEndianNativeSwapInPlace<br/></p>
<p>AAX_EndianSwap.h, 1159<br/>AAX_BigEndianNativeSwapSequenceInPlace<br/></p>
<p>AAX_EndianSwap.h, 1160<br/>AAX_BugList.doxygen, 1127<br/>AAX_CALLBACK<br/></p>
<p>AAX.h, 1110<br/>AAX_Callbacks.h, 1127<br/></p>
<p>AAX_CBackgroundProc, 1129<br/>AAX_CInitPrivateDataProc, 1129<br/>AAX_CInstanceInitProc, 1128<br/>AAX_CPacketAllocator, 1128<br/>AAX_CProcessProc, 1128<br/>AAX_CProcPtrID, 1130<br/>AAXCreateObjectProc, 1128<br/>kAAX_ProcPtrID_Create_EffectDirectData, 1131<br/>kAAX_ProcPtrID_Create_EffectGUI, 1131<br/>kAAX_ProcPtrID_Create_EffectParameters, 1131<br/>kAAX_ProcPtrID_Create_HostProcessor, 1131<br/>kAAX_ProcPtrID_Create_SessionDocumentClient,<br/></p>
<p>1131<br/>kAAX_ProcPtrID_Create_TaskAgent, 1131<br/></p>
<p>AAX_CAPTURE<br/>AAX_Exception.h, 1214<br/></p>
<p>AAX_CAPTURE_MULT<br/>AAX_Exception.h, 1214<br/></p>
<p>AAX_CArrayDataBuffer<br/>AAX_CArrayDataBuffer&lt; D &gt;, 407, 408<br/></p>
<p>AAX_CArrayDataBuffer&lt; D &gt;, 406<br/>&#8764;AAX_CArrayDataBuffer, 408<br/>AAX_CArrayDataBuffer, 407, 408<br/>Data, 409<br/>operator=, 408<br/>Size, 409<br/>Type, 408<br/></p>
<p>AAX_CArrayDataBuffer.h, 1131<br/>AAX_CArrayDataBuffer_H, 1131<br/></p>
<p>AAX_CArrayDataBuffer_H<br/>AAX_CArrayDataBuffer.h, 1131<br/></p>
<p>AAX_CArrayDataBufferOfType<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;, 410, 411<br/></p>
<p>AAX_CArrayDataBufferOfType&lt; T, D &gt;, 409<br/>&#8764;AAX_CArrayDataBufferOfType, 411<br/>AAX_CArrayDataBufferOfType, 410, 411<br/>Data, 412<br/>operator=, 411<br/>Size, 412<br/>Type, 411<br/></p>
<p>AAX_CAtomicQueue<br/>AAX_CAtomicQueue&lt; T, S &gt;, 414<br/></p>
<p>AAX_CAtomicQueue&lt; T, S &gt;, 412<br/></p>
<p>&#8764;AAX_CAtomicQueue, 414<br/>AAX_CAtomicQueue, 414<br/>Clear, 414<br/>Peek, 415<br/>Pop, 415<br/>Push, 414<br/>template_size, 416<br/>template_type, 413<br/>value_type, 414<br/></p>
<p>AAX_CAtomicQueue.h, 1131<br/>AAX_CAudioInPort<br/></p>
<p>AAX.h, 1116<br/>AAX_CAudioOutPort<br/></p>
<p>AAX.h, 1116<br/>AAX_CAutoreleasePool, 416<br/>&#8764;AAX_CAutoreleasePool, 416<br/>AAX_CAutoreleasePool, 416<br/></p>
<p>AAX_CAutoreleasePool.h, 1132<br/>_AAX_CAUTORELEASEPOOL_H_, 1132<br/></p>
<p>AAX_CBackgroundProc<br/>AAX_Callbacks.h, 1129<br/></p>
<p>AAX_CBinaryDisplayDelegate<br/>AAX_CBinaryDisplayDelegate&lt; T &gt;, 417, 418<br/></p>
<p>AAX_CBinaryDisplayDelegate&lt; T &gt;, 417<br/>AAX_CBinaryDisplayDelegate, 417, 418<br/>AddShortenedStrings, 420<br/>Clone, 418<br/>StringToValue, 419<br/>ValueToString, 418, 419<br/></p>
<p>AAX_CBinaryDisplayDelegate.h, 1132<br/>AAX_CBinaryTaperDelegate<br/></p>
<p>AAX_CBinaryTaperDelegate&lt; T &gt;, 421<br/>AAX_CBinaryTaperDelegate&lt; T &gt;, 420<br/></p>
<p>AAX_CBinaryTaperDelegate, 421<br/>Clone, 421<br/>ConstrainRealValue, 422<br/>GetMaximumValue, 421<br/>GetMinimumValue, 422<br/>NormalizedToReal, 422<br/>RealToNormalized, 423<br/></p>
<p>AAX_CBinaryTaperDelegate.h, 1133<br/>AAX_CBoolean<br/></p>
<p>AAX.h, 1112<br/>AAX_CChunkDataParser, 423<br/>&#8764;AAX_CChunkDataParser, 426<br/>AAX_CChunkDataParser, 425<br/>AddDouble, 426<br/>AddFloat, 426<br/>AddInt16, 426<br/>AddInt32, 426<br/>AddString, 427<br/>Clear, 429<br/>FindDouble, 427<br/>FindFloat, 427<br/>FindInt16, 427<br/>FindInt32, 427<br/>FindName, 429<br/>FindString, 428<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1328 INDEX<br/></b></p>
<p>GetChunkData, 428<br/>GetChunkDataSize, 428<br/>GetChunkVersion, 428<br/>IsEmpty, 428<br/>LoadChunk, 429<br/>mChunkData, 430<br/>mChunkVersion, 430<br/>mDataValues, 430<br/>mLastFoundIndex, 430<br/>ReplaceDouble, 428<br/>WordAlign, 429<br/></p>
<p>AAX_CChunkDataParser.h, 1133<br/>AAX_CHUNKDATAPARSER_H, 1134<br/></p>
<p>AAX_CChunkDataParser::DataValue, 1091<br/>DataValue, 1091<br/>mDataName, 1092<br/>mDataType, 1092<br/>mIntValue, 1092<br/>mStringValue, 1092<br/></p>
<p>AAX_CComponentID<br/>AAX.h, 1114<br/></p>
<p>AAX_CCount<br/>AAX.h, 1112<br/></p>
<p>AAX_CDecibelDisplayDelegateDecorator<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p>431<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;, 430<br/></p>
<p>AAX_CDecibelDisplayDelegateDecorator, 431<br/>Clone, 431<br/>StringToValue, 433<br/>ValueToString, 432<br/></p>
<p>AAX_CDecibelDisplayDelegateDecorator.h, 1134<br/>AAX_CEffectDirectData, 434<br/></p>
<p>&#8764;AAX_CEffectDirectData, 435<br/>AAX_CEffectDirectData, 435<br/>Controller, 437<br/>EffectParameters, 437<br/>Initialize, 435<br/>Initialize_PrivateDataAccess, 437<br/>NotificationReceived, 436<br/>TimerWakeup, 436<br/>TimerWakeup_PrivateDataAccess, 437<br/>Uninitialize, 435<br/></p>
<p>AAX_CEffectDirectData.h, 1135<br/>AAX_CEFFECTDIRECTDATA_H, 1135<br/></p>
<p>AAX_CEFFECTDIRECTDATA_H<br/>AAX_CEffectDirectData.h, 1135<br/></p>
<p>AAX_CEffectGUI, 438<br/>&#8764;AAX_CEffectGUI, 440<br/>AAX_CEffectGUI, 440<br/>CreateViewContainer, 444<br/>CreateViewContents, 444<br/>DeleteViewContainer, 444<br/>Draw, 442<br/>GetController, 445<br/>GetCustomLabel, 443<br/>GetEffectParameters, 445<br/>GetViewContainer, 446<br/></p>
<p>GetViewContainerPtr, 446<br/>GetViewContainerType, 446<br/>GetViewSize, 442<br/>Initialize, 440<br/>NotificationReceived, 440<br/>ParameterUpdated, 443<br/>SetControlHighlightInfo, 444<br/>SetViewContainer, 441<br/>TimerWakeup, 442<br/>Transport, 446<br/>Uninitialize, 440<br/>UpdateAllParameters, 445<br/></p>
<p>AAX_CEffectGUI.h, 1135<br/>AAX_CEffectID<br/></p>
<p>AAX.h, 1115<br/>AAX_CEffectParameters, 447<br/>&#8764;AAX_CEffectParameters, 453<br/>AAX_CEffectParameters, 453<br/>AutomationDelegate, 478<br/>BuildChunkData, 480<br/>CompareActiveChunk, 470<br/>Controller, 477<br/>DoMIDITransfers, 476<br/>EffectInit, 479<br/>FilterParameterIDOnSave, 480<br/>GenerateCoefficients, 467<br/>GetChunk, 469<br/>GetChunkIDFromIndex, 469<br/>GetChunkSize, 469<br/>GetCurveData, 472<br/>GetCurveDataDisplayRange, 473<br/>GetCurveDataMeterIds, 473<br/>GetCustomData, 475<br/>GetMasterBypassParameter, 455<br/>GetNumberOfChanges, 471<br/>GetNumberOfChunks, 468<br/>GetNumberOfParameters, 455<br/>GetParameter, 459<br/>GetParameterDefaultNormalizedValue, 457<br/>GetParameterIDFromIndex, 461<br/>GetParameterIndex, 459<br/>GetParameterIsAutomatable, 455<br/>GetParameterName, 456<br/>GetParameterNameOfLength, 456<br/>GetParameterNormalizedValue, 463<br/>GetParameterNumberOfSteps, 456<br/>GetParameterOrientation, 458<br/>GetParameterStringFromValue, 462<br/>GetParameterType, 458<br/>GetParameterValueFromString, 462<br/>GetParameterValueInfo, 461<br/>GetParameterValueString, 463<br/>Initialize, 453<br/>IsParameterLinkReady, 479<br/>IsParameterTouched, 479<br/>mChunkParser, 481<br/>mChunkSize, 481<br/>mFilteredParameters, 481<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1329<br/></b></p>
<p>mNumChunkedParameters, 481<br/>mNumPlugInChanges, 480<br/>mPacketDispatcher, 481<br/>mParameterManager, 481<br/>NotificationReceived, 454<br/>operator=, 453<br/>ReleaseParameter, 465<br/>RenderAudio_Hybrid, 477<br/>ResetFieldData, 467<br/>SetChunk, 470<br/>SetCustomData, 475<br/>SetDisplayDelegate, 478<br/>SetParameterDefaultNormalizedValue, 457<br/>SetParameterNormalizedRelative, 464<br/>SetParameterNormalizedValue, 463<br/>SetTaperDelegate, 478<br/>TimerWakeup, 471<br/>TouchParameter, 464<br/>Transport, 478<br/>Uninitialize, 454<br/>UpdateControlMIDINodes, 476<br/>UpdateMIDINodes, 476<br/>UpdatePageTable, 474, 479<br/>UpdateParameterNormalizedRelative, 466<br/>UpdateParameterNormalizedValue, 466<br/>UpdateParameterTouch, 465<br/></p>
<p>AAX_CEffectParameters.h, 1136<br/>BoolToNormalized, 1137<br/>cDefaultMasterBypassID, 1137<br/>cPreviewID, 1137<br/>Int32ToNormalized, 1136<br/>NormalizedToInt32, 1136<br/></p>
<p>AAX_CFieldIndex<br/>AAX.h, 1114<br/></p>
<p>AAX_CheckedResult, 482<br/>&#8764;AAX_CheckedResult, 484<br/>AAX_CheckedResult, 484<br/>AddAcceptedResult, 484<br/>Clear, 485<br/>Exception, 484<br/>LastError, 485<br/>operator AAX_Result, 485<br/>operator=, 485<br/>operator|=, 485<br/>ResetAcceptedResults, 484<br/></p>
<p>AAX_CHostProcessor, 486<br/>&#8764;AAX_CHostProcessor, 488<br/>AAX_CHostProcessor, 488<br/>AnalyzeAudio, 491<br/>Controller, 496<br/>EffectParameters, 497<br/>GetAudio, 496<br/>GetClipNameSuffix, 493<br/>GetDstEnd, 495<br/>GetDstStart, 495<br/>GetEffectParameters, 493<br/>GetHostProcessorDelegate, 493, 494<br/>GetInputRange, 494<br/></p>
<p>GetLocation, 494<br/>GetOutputRange, 494<br/>GetSideChainInputNum, 496<br/>GetSrcEnd, 494<br/>GetSrcStart, 494<br/>HostProcessorDelegate, 496, 497<br/>Initialize, 488<br/>InitOutputBounds, 489<br/>PostAnalyze, 492<br/>PostRender, 491<br/>PreAnalyze, 492<br/>PreRender, 491<br/>RenderAudio, 490<br/>SetLocation, 490<br/>TranslateOutputBounds, 495<br/>Uninitialize, 488<br/></p>
<p>AAX_CHostProcessor.h, 1137<br/>AAX_CHostServices, 497<br/></p>
<p>HandleAssertFailure, 498<br/>Set, 498<br/>StackTrace, 499<br/>Trace, 498<br/></p>
<p>AAX_CHostServices.h, 1138<br/>AAX_CHUNKDATAPARSER_H<br/></p>
<p>AAX_CChunkDataParser.h, 1134<br/>AAX_ChunkDataParserDefs, 398<br/></p>
<p>BUILD_DATA_FAILED, 401<br/>DEFAULT32BIT_TYPE_INCR, 401<br/>DEFAULT32BIT_TYPE_SIZE, 400<br/>DOUBLE_STRING_IDENTIFIER, 399<br/>DOUBLE_TYPE, 399<br/>DOUBLE_TYPE_INCR, 399<br/>DOUBLE_TYPE_SIZE, 399<br/>FLOAT_STRING_IDENTIFIER, 399<br/>FLOAT_TYPE, 399<br/>HEADER_SIZE, 401<br/>LONG_STRING_IDENTIFIER, 399<br/>LONG_TYPE, 399<br/>MAX_NAME_LENGTH, 401<br/>MAX_STRINGDATA_LENGTH, 400<br/>NAME_NOT_FOUND, 401<br/>SHORT_STRING_IDENTIFIER, 400<br/>SHORT_TYPE, 400<br/>SHORT_TYPE_INCR, 400<br/>SHORT_TYPE_SIZE, 400<br/>STRING_IDENTIFIER_SIZE, 401<br/>STRING_STRING_IDENTIFIER, 400<br/>STRING_TYPE, 400<br/>VERSION_ID_1, 401<br/></p>
<p>AAX_CIndex<br/>AAX.h, 1111<br/></p>
<p>AAX_CInitPrivateDataProc<br/>AAX_Callbacks.h, 1129<br/></p>
<p>AAX_CInstanceInitProc<br/>AAX_Callbacks.h, 1128<br/></p>
<p>AAX_CLinearTaperDelegate<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>500<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1330 INDEX<br/></b></p>
<p>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;, 499<br/>AAX_CLinearTaperDelegate, 500<br/>Clone, 501<br/>ConstrainRealValue, 501<br/>GetMaximumValue, 501<br/>GetMinimumValue, 501<br/>NormalizedToReal, 502<br/>RealToNormalized, 502<br/>Round, 502<br/></p>
<p>AAX_CLinearTaperDelegate.h, 1138<br/>AAX_CLogTaperDelegate<br/></p>
<p>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;,<br/>504<br/></p>
<p>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;, 503<br/>AAX_CLogTaperDelegate, 504<br/>Clone, 504<br/>ConstrainRealValue, 505<br/>GetMaximumValue, 505<br/>GetMinimumValue, 505<br/>NormalizedToReal, 506<br/>RealToNormalized, 506<br/>Round, 507<br/></p>
<p>AAX_CLogTaperDelegate.h, 1138<br/>AAX_CMeterID<br/></p>
<p>AAX.h, 1114<br/>AAX_CMeterPort<br/></p>
<p>AAX.h, 1116<br/>AAX_CMidiPacket, 507<br/></p>
<p>mData, 508<br/>mIsImmediate, 508<br/>mLength, 507<br/>mTimestamp, 507<br/></p>
<p>AAX_CMidiStream, 508<br/>mBuffer, 509<br/>mBufferSize, 509<br/></p>
<p>AAX_CMonolithicParameters, 509<br/>&#8764;AAX_CMonolithicParameters, 511<br/>AAX_CMonolithicParameters, 511<br/>AddSynchronizedParameter, 512<br/>GenerateCoefficients, 513<br/>RenderAudio, 512<br/>ResetFieldData, 514<br/>StaticDescribe, 515<br/>StaticRenderAudio, 516<br/>TimerWakeup, 514<br/>TParamValPair, 511<br/>UpdateParameterNormalizedValue, 513<br/></p>
<p>AAX_CMonolithicParameters.cpp, 1139<br/>AAX_CMonolithicParameters.h, 1139<br/></p>
<p>kMaxAdditionalMIDINodes, 1140<br/>kMaxAuxOutputStems, 1140<br/>kSynchronizedParameterQueueSize, 1140<br/></p>
<p>AAX_CMutex, 516<br/>&#8764;AAX_CMutex, 517<br/>AAX_CMutex, 517<br/>Lock, 517<br/>Try_Lock, 517<br/>Unlock, 517<br/></p>
<p>AAX_CMutex.h, 1140<br/>AAX_CNumberDisplayDelegate&lt; T, Precision, SpaceAfter<br/></p>
<p>&gt;, 518<br/>Clone, 518<br/>StringToValue, 520<br/>ValueToString, 518, 520<br/></p>
<p>AAX_CNumberDisplayDelegate.h, 1140<br/>AAX_CommonConversions.h, 1141<br/></p>
<p>DBToGain, 1142<br/>DoubleTo32BitDSPCoef, 1143<br/>DoubleTo32BitDSPCoefRnd, 1143<br/>DoubleToDSPCoef, 1142<br/>DoubleToDSPCoefRnd, 1144<br/>DoubleToLong, 1142<br/>DSPCoefToDouble, 1143<br/>GainToDB, 1142<br/>k32BitAbsMax, 1144<br/>k32BitNegMax, 1144<br/>k32BitPosMax, 1144<br/>k56kFloatNegMax, 1145<br/>k56kFloatPosMax, 1145<br/>k56kFracAbsMax, 1144<br/>k56kFracHalf, 1145<br/>k56kFracNegMax, 1145<br/>k56kFracNegOne, 1145<br/>k56kFracPosMax, 1144<br/>k56kFracZero, 1145<br/>kNeg144DB, 1146<br/>kNeg144Gain, 1146<br/>kOneOver56kFracAbsMax, 1145<br/>LongToDouble, 1142<br/>ThirtyTwoBitDSPCoefToDouble, 1143<br/></p>
<p>AAX_CommonInterface_Algorithm.doxygen, 1146<br/>AAX_CommonInterface_Communication.doxygen, 1146<br/>AAX_CommonInterface_DataModel.doxygen, 1146<br/>AAX_CommonInterface_Describe.doxygen, 1146<br/>AAX_CommonInterface_FormatSpecification.doxygen,<br/></p>
<p>1146<br/>AAX_CommonInterface_GUI.doxygen, 1146<br/>AAX_CompID_DescriptionHost<br/></p>
<p>AAX_UIDs.h, 1303<br/>AAX_CompID_FeatureInfo<br/></p>
<p>AAX_UIDs.h, 1303<br/>AAX_Component&lt; aContextType &gt;, 521<br/></p>
<p>CBackgroundProc, 522<br/>CInitPrivateDataProc, 522<br/>CInstanceInitProc, 522<br/>CPacketAllocator, 522<br/>CProcessProc, 522<br/></p>
<p>AAX_Constants.h, 1146<br/>AAX_CONSTANTS_H, 1147<br/></p>
<p>AAX_CONSTANTS_H<br/>AAX_Constants.h, 1147<br/></p>
<p>AAX_CONSTEXPR<br/>AAX.h, 1108<br/></p>
<p>AAX_CPacket, 523<br/>&#8764;AAX_CPacket, 523<br/>AAX_CPacket, 523<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1331<br/></b></p>
<p>GetID, 524<br/>GetPtr, 523, 524<br/>GetSize, 524<br/>IsDirty, 524<br/>SetDirty, 524<br/></p>
<p>AAX_CPacketAllocator<br/>AAX_Callbacks.h, 1128<br/></p>
<p>AAX_CPacketDispatcher, 524<br/>&#8764;AAX_CPacketDispatcher, 525<br/>AAX_CPacketDispatcher, 525<br/>Dispatch, 526<br/>GenerateSingleValuePacket, 527<br/>Initialize, 525<br/>RegisterPacket, 526<br/>SetDirty, 526<br/></p>
<p>AAX_CPacketDispatcher.h, 1148<br/>AAX_CPacketHandler<br/></p>
<p>AAX_CPacketHandler&lt; TWorker &gt;, 528<br/>AAX_CPacketHandler&lt; TWorker &gt;, 527<br/></p>
<p>AAX_CPacketHandler, 528<br/>Call, 528<br/>Clone, 528<br/>fpt, 529<br/>fptEx, 529<br/>pt2Object, 529<br/></p>
<p>AAX_CPageTableParamID<br/>AAX.h, 1115<br/></p>
<p>AAX_CParameter<br/>AAX_CParameter&lt; T &gt;, 535, 536<br/></p>
<p>AAX_CParameter&lt; T &gt;, 529<br/>&#8764;AAX_CParameter, 537<br/>AAX_CParameter, 535, 536<br/>AAX_DEFAULT_MOVE_CTOR, 537<br/>AAX_DEFAULT_MOVE_OPER, 537<br/>AAX_DELETE, 537, 538<br/>AddShortenedName, 539<br/>Automatable, 552<br/>ClearShortenedNames, 540<br/>CloneValue, 538<br/>Defaults, 534<br/>DisplayDelegate, 558<br/>eParameterDefaultNumStepsContinuous, 535<br/>eParameterDefaultNumStepsDiscrete, 535<br/>eParameterTypeBool, 534<br/>eParameterTypeCustom, 534<br/>eParameterTypeFloat, 534<br/>eParameterTypeInt32, 534<br/>eParameterTypeUndefined, 534<br/>GetBoolFromNormalizedValue, 548, 563<br/>GetDefaultValue, 558<br/>GetDoubleFromNormalizedValue, 549, 564<br/>GetFloatFromNormalizedValue, 549, 563<br/>GetInt32FromNormalizedValue, 548, 563<br/>GetNormalizedDefaultValue, 540<br/>GetNormalizedValue, 541<br/>GetNormalizedValueFromBool, 546, 561<br/>GetNormalizedValueFromDouble, 547, 562<br/>GetNormalizedValueFromFloat, 547, 562<br/></p>
<p>GetNormalizedValueFromInt32, 546, 561<br/>GetNormalizedValueFromStep, 542<br/>GetNormalizedValueFromString, 548<br/>GetNumberOfSteps, 541<br/>GetOrientation, 544<br/>GetStepValue, 542<br/>GetStepValueFromNormalizedValue, 542<br/>GetStringFromNormalizedValue, 550<br/>GetType, 543<br/>GetValue, 557<br/>GetValueAsBool, 552<br/>GetValueAsDouble, 554<br/>GetValueAsFloat, 553<br/>GetValueAsInt32, 553<br/>GetValueAsString, 554, 558<br/>GetValueString, 545<br/>Identifier, 538<br/>mAutomatable, 565<br/>mAutomationDelegate, 565<br/>mControlType, 565<br/>mDefaultValue, 566<br/>mDisplayDelegate, 565<br/>mNames, 564<br/>mNeedNotify, 566<br/>mNumSteps, 565<br/>mOrientation, 565<br/>mTaperDelegate, 565<br/>mValue, 566<br/>Name, 539<br/>Release, 552<br/>SetAutomationDelegate, 551<br/>SetDefaultValue, 558<br/>SetDisplayDelegate, 544<br/>SetName, 538<br/>SetNormalizedDefaultValue, 540<br/>SetNormalizedValue, 540<br/>SetNumberOfSteps, 541<br/>SetOrientation, 543<br/>SetStepValue, 542<br/>SetTaperDelegate, 544<br/>SetToDefaultValue, 540<br/>SetType, 543<br/>SetValue, 557<br/>SetValueFromString, 551<br/>SetValueWithBool, 555, 559<br/>SetValueWithDouble, 556, 560<br/>SetValueWithFloat, 555, 560<br/>SetValueWithInt32, 555, 559<br/>SetValueWithString, 556, 560<br/>ShortenedName, 539<br/>TaperDelegate, 558<br/>Touch, 552<br/>Type, 534<br/>UpdateNormalizedValue, 557<br/></p>
<p>AAX_CParameter.h, 1148<br/>AAX_CParameterManager, 566<br/>&#8764;AAX_CParameterManager, 567<br/>AAX_CParameterManager, 567<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1332 INDEX<br/></b></p>
<p>AddParameter, 571<br/>GetParameter, 570<br/>GetParameterByID, 569<br/>GetParameterByName, 569, 570<br/>GetParameterIndex, 571<br/>Initialize, 568<br/>mAutomationDelegate, 572<br/>mParameters, 572<br/>mParametersMap, 572<br/>NumParameters, 568<br/>RemoveAllParameters, 568<br/>RemoveParameter, 571<br/>RemoveParameterByID, 568<br/></p>
<p>AAX_CParameterManager.h, 1149<br/>AAX_CParameterValue<br/></p>
<p>AAX_CParameterValue&lt; T &gt;, 574, 575<br/>AAX_CParameterValue&lt; T &gt;, 572<br/></p>
<p>AAX_CParameterValue, 574, 575<br/>AAX_DEFAULT_DTOR_OVERRIDE, 575<br/>AAX_DEFAULT_MOVE_CTOR, 575<br/>AAX_DEFAULT_MOVE_OPER, 575<br/>AAX_DELETE, 575<br/>Clone, 576<br/>Defaults, 574<br/>eParameterDefaultMaxIdentifierLength, 574<br/>eParameterDefaultMaxIdentifierSize, 574<br/>Get, 576<br/>GetValueAsBool, 576, 579<br/>GetValueAsDouble, 578, 580<br/>GetValueAsFloat, 577, 579<br/>GetValueAsInt32, 577, 579<br/>GetValueAsString, 578, 580<br/>Identifier, 576<br/>Set, 576<br/></p>
<p>AAX_CParamID<br/>AAX.h, 1114<br/></p>
<p>AAX_CPercentDisplayDelegateDecorator<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p>582<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;, 581<br/></p>
<p>AAX_CPercentDisplayDelegateDecorator, 582<br/>Clone, 582<br/>StringToValue, 583<br/>ValueToString, 582, 583<br/></p>
<p>AAX_CPercentDisplayDelegateDecorator.h, 1149<br/>AAX_CPERCENTDISPLAYDELEGATEDECORATOR_H,<br/></p>
<p>1150<br/>AAX_CPERCENTDISPLAYDELEGATEDECORATOR_H<br/></p>
<p>AAX_CPercentDisplayDelegateDecorator.h, 1150<br/>AAX_CPieceWiseLinearTaperDelegate<br/></p>
<p>AAX_CPieceWiseLinearTaperDelegate&lt; T, Real-<br/>Precision &gt;, 585, 586<br/></p>
<p>AAX_CPieceWiseLinearTaperDelegate&lt; T, RealPreci-<br/>sion &gt;, 584<br/></p>
<p>&#8764;AAX_CPieceWiseLinearTaperDelegate, 586<br/>AAX_CPieceWiseLinearTaperDelegate, 585, 586<br/>Clone, 586<br/>ConstrainRealValue, 587<br/></p>
<p>GetMaximumValue, 586<br/>GetMinimumValue, 586<br/>NormalizedToReal, 587<br/>RealToNormalized, 588<br/>Round, 588<br/></p>
<p>AAX_CPieceWiseLinearTaperDelegate.h, 1150<br/>AAX_CPointerPropertyValue<br/></p>
<p>AAX.h, 1113<br/>AAX_CPP11_SUPPORT<br/></p>
<p>AAX.h, 1106<br/>AAX_CProcessProc<br/></p>
<p>AAX_Callbacks.h, 1128<br/>AAX_CProcPtrID<br/></p>
<p>AAX_Callbacks.h, 1130<br/>AAX_CPropertyValue<br/></p>
<p>AAX.h, 1113<br/>AAX_CPropertyValue64<br/></p>
<p>AAX.h, 1113<br/>AAX_CRangeTaperDelegate<br/></p>
<p>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;,<br/>590<br/></p>
<p>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;, 588<br/>AAX_CRangeTaperDelegate, 590<br/>Clone, 591<br/>ConstrainRealValue, 591<br/>GetMaximumValue, 591<br/>GetMinimumValue, 591<br/>NormalizedToReal, 592<br/>operator=, 590<br/>RealToNormalized, 592<br/>Round, 592<br/>SmartRound, 593<br/></p>
<p>AAX_CRangeTaperDelegate.h, 1150<br/>AAX_CSampleRate<br/></p>
<p>AAX.h, 1113<br/>AAX_CSelector<br/></p>
<p>AAX.h, 1112<br/>AAX_CSessionDocumentClient, 593<br/>&#8764;AAX_CSessionDocumentClient, 594<br/>AAX_CSessionDocumentClient, 594<br/>GetController, 596, 597<br/>GetEffectParameters, 597<br/>GetSessionDocument, 597<br/>Initialize, 594<br/>NotificationReceived, 595<br/>SessionDocumentChanged, 596<br/>SessionDocumentWillChange, 596<br/>SetSessionDocument, 595<br/>Uninitialize, 595<br/></p>
<p>AAX_CSessionDocumentClient.h, 1151<br/>AAX_CSessionDocumentClient_H, 1151<br/></p>
<p>AAX_CSessionDocumentClient_H<br/>AAX_CSessionDocumentClient.h, 1151<br/></p>
<p>AAX_CStateDisplayDelegate<br/>AAX_CStateDisplayDelegate&lt; T &gt;, 599<br/></p>
<p>AAX_CStateDisplayDelegate&lt; T &gt;, 598<br/>AAX_CStateDisplayDelegate, 599<br/>AddShortenedStrings, 601<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1333<br/></b></p>
<p>Clone, 600<br/>Compare, 602<br/>StringToValue, 601<br/>ValueToString, 600<br/></p>
<p>AAX_CStateDisplayDelegate.h, 1151<br/>AAX_CStatelessParameter, 602<br/></p>
<p>AAX_CStatelessParameter, 605<br/>AAX_DEFAULT_DTOR_OVERRIDE, 605<br/>AddShortenedName, 606<br/>Automatable, 607<br/>ClearShortenedNames, 607<br/>CloneValue, 605<br/>GetBoolFromNormalizedValue, 615<br/>GetDoubleFromNormalizedValue, 616<br/>GetFloatFromNormalizedValue, 615<br/>GetInt32FromNormalizedValue, 615<br/>GetNormalizedDefaultValue, 609<br/>GetNormalizedValue, 609<br/>GetNormalizedValueFromBool, 612<br/>GetNormalizedValueFromDouble, 614<br/>GetNormalizedValueFromFloat, 613<br/>GetNormalizedValueFromInt32, 613<br/>GetNormalizedValueFromStep, 611<br/>GetNormalizedValueFromString, 614<br/>GetNumberOfSteps, 610<br/>GetOrientation, 623<br/>GetStepValue, 610<br/>GetStepValueFromNormalizedValue, 611<br/>GetStringFromNormalizedValue, 616, 617<br/>GetType, 622<br/>GetValueAsBool, 618<br/>GetValueAsDouble, 619<br/>GetValueAsFloat, 619<br/>GetValueAsInt32, 618<br/>GetValueAsString, 619<br/>GetValueString, 611, 612<br/>Identifier, 605<br/>mAutomationDelegate, 625<br/>mID, 624<br/>mNames, 624<br/>mValueString, 625<br/>Name, 606<br/>Release, 608<br/>SetAutomationDelegate, 608<br/>SetDisplayDelegate, 624<br/>SetName, 606<br/>SetNormalizedDefaultValue, 609<br/>SetNormalizedValue, 609<br/>SetNumberOfSteps, 610<br/>SetOrientation, 623<br/>SetStepValue, 611<br/>SetTaperDelegate, 623<br/>SetToDefaultValue, 610<br/>SetType, 622<br/>SetValueFromString, 617<br/>SetValueWithBool, 620<br/>SetValueWithDouble, 621<br/>SetValueWithFloat, 621<br/></p>
<p>SetValueWithInt32, 620<br/>SetValueWithString, 622<br/>ShortenedName, 607<br/>Touch, 608<br/>UpdateNormalizedValue, 624<br/></p>
<p>AAX_CStateTaperDelegate<br/>AAX_CStateTaperDelegate&lt; T &gt;, 626<br/></p>
<p>AAX_CStateTaperDelegate&lt; T &gt;, 625<br/>AAX_CStateTaperDelegate, 626<br/>Clone, 626<br/>ConstrainRealValue, 627<br/>GetMaximumValue, 627<br/>GetMinimumValue, 627<br/>NormalizedToReal, 628<br/>RealToNormalized, 628<br/></p>
<p>AAX_CStateTaperDelegate.h, 1151<br/>AAX_CString, 629<br/></p>
<p>AAX_CString, 630, 631<br/>AAX_DEFAULT_MOVE_CTOR, 632<br/>Append, 634<br/>AppendHex, 634<br/>AppendNumber, 634<br/>Clear, 633<br/>CString, 637<br/>Empty, 633<br/>Equals, 637, 638<br/>Erase, 634<br/>FindFirst, 636<br/>FindLast, 636, 637<br/>Get, 632<br/>Insert, 635<br/>InsertHex, 635<br/>InsertNumber, 635<br/>kInvalidIndex, 640<br/>kMaxStringLength, 641<br/>Length, 631<br/>MaxLength, 631<br/>mString, 641<br/>operator!=, 638, 639<br/>operator&lt;, 639<br/>operator&lt;&lt;, 640<br/>operator&gt;, 639<br/>operator&gt;&gt;, 640<br/>operator+=, 639, 640<br/>operator=, 632, 633<br/>operator==, 638<br/>operator[], 639<br/>Replace, 635, 636<br/>Set, 632<br/>StdString, 633<br/>SubString, 637<br/>ToDouble, 637<br/>ToInteger, 637<br/></p>
<p>AAX_CString.h, 1152<br/>AAX_CSTRING_H, 1152<br/>operator+, 1153<br/></p>
<p>AAX_CSTRING_H<br/>AAX_CString.h, 1152<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1334 INDEX<br/></b></p>
<p>AAX_CStringAbbreviations, 641<br/>AAX_CStringAbbreviations, 641<br/>Add, 642<br/>Clear, 642<br/>Get, 642<br/>Primary, 642<br/>SetPrimary, 642<br/></p>
<p>AAX_CStringDataBuffer, 643<br/>&#8764;AAX_CStringDataBuffer, 644<br/>AAX_CStringDataBuffer, 643, 644<br/>Data, 645<br/>operator=, 644<br/>Size, 645<br/>Type, 644<br/></p>
<p>AAX_CStringDataBuffer.h, 1153<br/>AAX_CStringDataBuffer_H, 1154<br/></p>
<p>AAX_CStringDataBuffer_H<br/>AAX_CStringDataBuffer.h, 1154<br/></p>
<p>AAX_CStringDataBufferOfType<br/>AAX_CStringDataBufferOfType&lt; T &gt;, 646, 647<br/></p>
<p>AAX_CStringDataBufferOfType&lt; T &gt;, 645<br/>&#8764;AAX_CStringDataBufferOfType, 647<br/>AAX_CStringDataBufferOfType, 646, 647<br/>Data, 648<br/>operator=, 647<br/>Size, 648<br/>Type, 647<br/></p>
<p>AAX_CStringDisplayDelegate<br/>AAX_CStringDisplayDelegate&lt; T &gt;, 649<br/></p>
<p>AAX_CStringDisplayDelegate&lt; T &gt;, 648<br/>AAX_CStringDisplayDelegate, 649<br/>Clone, 650<br/>mInverseStringMap, 652<br/>mStringMap, 652<br/>StringToValue, 651<br/>ValueToString, 650, 651<br/></p>
<p>AAX_CStringDisplayDelegate.h, 1154<br/>AAX_CTargetPlatform<br/></p>
<p>AAX.h, 1114<br/>AAX_CTask, 652<br/></p>
<p>AAX_CTask, 653<br/>AAX_DEFAULT_DTOR_OVERRIDE, 653<br/>AAX_DELETE, 653<br/>AAX_OVERRIDE, 656<br/>ACF_DECLARE_STANDARD_UNKNOWN, 653<br/>AddResult, 655<br/>GetArgumentOfType, 654<br/>GetProgress, 654<br/>GetType, 653<br/>SetDone, 655<br/>SetProgress, 654<br/>Status, 655<br/></p>
<p>AAX_CTask.h, 1154<br/>AAX_CTask_H, 1155<br/></p>
<p>AAX_CTask_H<br/>AAX_CTask.h, 1155<br/></p>
<p>AAX_CTaskAgent, 656<br/>&#8764;AAX_CTaskAgent, 657<br/></p>
<p>AAX_CTaskAgent, 657<br/>AddTask, 658<br/>CancelAllTasks, 658<br/>GetController, 659<br/>GetEffectParameters, 659<br/>Initialize, 657<br/>ReceiveTask, 658<br/>Uninitialize, 658<br/></p>
<p>AAX_CTaskAgent.h, 1155<br/>AAX_CTempoBreakpoint, 659<br/></p>
<p>mSampleLocation, 659<br/>mValue, 659<br/></p>
<p>AAX_CTimeOfDay<br/>AAX.h, 1112<br/></p>
<p>AAX_CTimestamp<br/>AAX.h, 1112<br/></p>
<p>AAX_CTransportCounter<br/>AAX.h, 1112<br/></p>
<p>AAX_CTypeID<br/>AAX.h, 1113<br/></p>
<p>AAX_CUnitDisplayDelegateDecorator<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;, 661<br/></p>
<p>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;, 660<br/>AAX_CUnitDisplayDelegateDecorator, 661<br/>Clone, 661<br/>mUnitString, 663<br/>StringToValue, 662<br/>ValueToString, 661, 662<br/></p>
<p>AAX_CUnitDisplayDelegateDecorator.h, 1155<br/>AAX_CUnitPrefixDisplayDelegateDecorator<br/></p>
<p>AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;,<br/>664<br/></p>
<p>AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;, 663<br/>AAX_CUnitPrefixDisplayDelegateDecorator, 664<br/>Clone, 665<br/>StringToValue, 666<br/>ValueToString, 665, 666<br/></p>
<p>AAX_CUnitPrefixDisplayDelegateDecorator.h, 1156<br/>AAX_DEBUGASSERT<br/></p>
<p>AAX_Assert.h, 1123<br/>AAX_DEFAULT_ASGN_OPER<br/></p>
<p>AAX.h, 1107<br/>AAX_DEFAULT_COPY_CTOR<br/></p>
<p>AAX.h, 1107<br/>AAX_DEFAULT_CTOR<br/></p>
<p>AAX.h, 1107<br/>AAX_DEFAULT_DTOR<br/></p>
<p>AAX.h, 1107<br/>AAX_DEFAULT_DTOR_OVERRIDE<br/></p>
<p>AAX.h, 1107<br/>AAX_CParameterValue&lt; T &gt;, 575<br/>AAX_CStatelessParameter, 605<br/>AAX_CTask, 653<br/></p>
<p>AAX_DEFAULT_MOVE_CTOR<br/>AAX.h, 1108<br/>AAX::Exception::Any, 1090<br/>AAX_CParameter&lt; T &gt;, 537<br/>AAX_CParameterValue&lt; T &gt;, 575<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1335<br/></b></p>
<p>AAX_CString, 632<br/>AAX_DEFAULT_MOVE_OPER<br/></p>
<p>AAX.h, 1108<br/>AAX::Exception::Any, 1090<br/>AAX_CParameter&lt; T &gt;, 537<br/>AAX_CParameterValue&lt; T &gt;, 575<br/></p>
<p>AAX_DELETE<br/>AAX.h, 1108<br/>AAX_CParameter&lt; T &gt;, 537, 538<br/>AAX_CParameterValue&lt; T &gt;, 575<br/>AAX_CTask, 653<br/>AAX_IDataBuffer, 841<br/>AAX_IEffectDirectData, 870<br/>AAX_IEffectGUI, 871<br/>AAX_IEffectParameters, 874<br/>AAX_IHostProcessor, 877<br/>AAX_ISessionDocumentClient, 937<br/>AAX_ITaskAgent, 948<br/></p>
<p>AAX_Denormal.h, 1156<br/>AAX_DENORMAL_H, 1157<br/>AAX_SCOPE_COMPUTE_DENORMALS, 1157<br/>AAX_SCOPE_DENORMALS_AS_ZERO, 1157<br/></p>
<p>AAX_DENORMAL_H<br/>AAX_Denormal.h, 1157<br/></p>
<p>AAX_DigiTrace_Guide.doxygen, 1157<br/>AAX_DistributingYourPlugIn.doxygen, 1157<br/>AAX_DMA_API<br/></p>
<p>AAX_IDma.h, 1238<br/>AAX_DocsDirectory.doxygen, 1157<br/>AAX_DocumentData_UID<br/></p>
<p>AAX_UIDs.h, 1295<br/>AAX_DocumentDataType_TempoMap<br/></p>
<p>AAX_UIDs.h, 1309<br/>AAX_DWORD_ALIGNED_HINT<br/></p>
<p>AAX_MiscUtils.h, 1255<br/>AAX_EAssertFlags<br/></p>
<p>AAX_Enums.h, 1200<br/>AAX_eAssertFlags_Default<br/></p>
<p>AAX_Enums.h, 1200<br/>AAX_eAssertFlags_Dialog<br/></p>
<p>AAX_Enums.h, 1200<br/>AAX_eAssertFlags_Log<br/></p>
<p>AAX_Enums.h, 1200<br/>AAX_EAudioBufferLength<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_eAudioBufferLength_1<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_1024<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_128<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_16<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_2<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_256<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_32<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_4<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_512<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_64<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_8<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_Max<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLength_Undefined<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_EAudioBufferLengthDSP<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLengthDSP_16<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLengthDSP_32<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLengthDSP_4<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLengthDSP_64<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLengthDSP_Default<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLengthDSP_Max<br/></p>
<p>AAX_Enums.h, 1174<br/>AAX_eAudioBufferLengthNative_Max<br/></p>
<p>AAX_Enums.h, 1175<br/>AAX_eAudioBufferLengthNative_Min<br/></p>
<p>AAX_Enums.h, 1175<br/>AAX_EComponentInstanceInitAction<br/></p>
<p>AAX_Enums.h, 1189<br/>AAX_eComponentInstanceInitAction_AddingNewInstance<br/></p>
<p>AAX_Enums.h, 1189<br/>AAX_eComponentInstanceInitAction_RemovingInstance<br/></p>
<p>AAX_Enums.h, 1189<br/>AAX_eComponentInstanceInitAction_ResetInstance<br/></p>
<p>AAX_Enums.h, 1189<br/>AAX_EConstraintLocationMask<br/></p>
<p>AAX_Enums.h, 1188<br/>AAX_eConstraintLocationMask_DataModel<br/></p>
<p>AAX_Enums.h, 1188<br/>AAX_eConstraintLocationMask_DLLChipAffinity<br/></p>
<p>AAX_Enums.h, 1188<br/>AAX_eConstraintLocationMask_None<br/></p>
<p>AAX_Enums.h, 1188<br/>AAX_EConstraintTopology<br/></p>
<p>AAX_Enums.h, 1188<br/>AAX_eConstraintTopology_Monolithic<br/></p>
<p>AAX_Enums.h, 1189<br/>AAX_eConstraintTopology_None<br/></p>
<p>AAX_Enums.h, 1189<br/>AAX_ECurveType<br/></p>
<p>EQ and Dynamics Curve Displays, 91<br/>AAX_eCurveType_Dynamics<br/></p>
<p>EQ and Dynamics Curve Displays, 92<br/>AAX_eCurveType_EQ<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1336 INDEX<br/></b></p>
<p>EQ and Dynamics Curve Displays, 92<br/>AAX_eCurveType_None<br/></p>
<p>EQ and Dynamics Curve Displays, 92<br/>AAX_eCurveType_Reduction<br/></p>
<p>EQ and Dynamics Curve Displays, 92<br/>AAX_EDataInPortType<br/></p>
<p>AAX_Enums.h, 1194<br/>AAX_eDataInPortType_Buffered<br/></p>
<p>AAX_Enums.h, 1194<br/>AAX_eDataInPortType_Incremental<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eDataInPortType_Unbuffered<br/></p>
<p>AAX_Enums.h, 1194<br/>AAX_eEQBandType_HighPass<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_eEQBandType_HighShelf<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_eEQBandType_LowPass<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_eEQBandType_LowShelf<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_eEQBandType_Notch<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_eEQBandType_Parametric<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_EEQBandTypes<br/></p>
<p>AAX_Enums.h, 1191<br/>AAX_EEQInCircuitPolarity<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_eEQInCircuitPolarity_Bypassed<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_eEQInCircuitPolarity_Disabled<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_eEQInCircuitPolarity_Enabled<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_EError<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_EFeetFramesRate<br/></p>
<p>AAX_Enums.h, 1196<br/>AAX_eFeetFramesRate_23976<br/></p>
<p>AAX_Enums.h, 1196<br/>AAX_eFeetFramesRate_24<br/></p>
<p>AAX_Enums.h, 1196<br/>AAX_eFeetFramesRate_25<br/></p>
<p>AAX_Enums.h, 1196<br/>AAX_EFrameRate<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_100Frame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_11988DropFrame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_11988NonDrop<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_120DropFrame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_120NonDrop<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_23976<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_24Frame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_25Frame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_2997DropFrame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_2997NonDrop<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_30DropFrame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_30NonDrop<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_47952<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_48Frame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_50Frame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_5994DropFrame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_5994NonDrop<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_60DropFrame<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_60NonDrop<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_eFrameRate_Undeclared<br/></p>
<p>AAX_Enums.h, 1195<br/>AAX_EHighlightColor<br/></p>
<p>AAX_Enums.h, 1172<br/>AAX_eHighlightColor_Blue<br/></p>
<p>AAX_Enums.h, 1172<br/>AAX_eHighlightColor_Green<br/></p>
<p>AAX_Enums.h, 1172<br/>AAX_eHighlightColor_Num<br/></p>
<p>AAX_Enums.h, 1172<br/>AAX_eHighlightColor_Red<br/></p>
<p>AAX_Enums.h, 1172<br/>AAX_eHighlightColor_Yellow<br/></p>
<p>AAX_Enums.h, 1172<br/>AAX_EHostLevel<br/></p>
<p>AAX_Enums.h, 1199<br/>AAX_eHostLevel_Entry<br/></p>
<p>AAX_Enums.h, 1199<br/>AAX_eHostLevel_Intermediate<br/></p>
<p>AAX_Enums.h, 1199<br/>AAX_eHostLevel_Standard<br/></p>
<p>AAX_Enums.h, 1199<br/>AAX_eHostLevel_Unknown<br/></p>
<p>AAX_Enums.h, 1199<br/>AAX_EHostMode<br/></p>
<p>AAX_Enums.h, 1187<br/>AAX_eHostMode_Config<br/></p>
<p>AAX_Enums.h, 1187<br/>AAX_eHostMode_Show<br/></p>
<p>AAX_Enums.h, 1187<br/>AAX_EHostModeBits<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1337<br/></b></p>
<p>AAX_Enums.h, 1186<br/>AAX_eHostModeBits_Live<br/></p>
<p>AAX_Enums.h, 1187<br/>AAX_eHostModeBits_None<br/></p>
<p>AAX_Enums.h, 1187<br/>AAX_EMaxAudioSuiteTracks<br/></p>
<p>AAX_Enums.h, 1175<br/>AAX_eMaxAudioSuiteTracks<br/></p>
<p>AAX_Enums.h, 1175<br/>AAX_EMeterBallisticType<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eMeterBallisticType_Host<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eMeterBallisticType_NoDecay<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_EMeterOrientation<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_eMeterOrientation_BottomLeft<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_eMeterOrientation_Center<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_eMeterOrientation_Default<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_eMeterOrientation_PhaseDot<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_eMeterOrientation_TopRight<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_EMeterType<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eMeterType_Analysis<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eMeterType_CLGain<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eMeterType_EGGain<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eMeterType_Input<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eMeterType_None<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eMeterType_Other<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eMeterType_Output<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eMIDIBeatClock<br/></p>
<p>AAX_Enums.h, 1196<br/>AAX_eMIDIClick<br/></p>
<p>AAX_Enums.h, 1196<br/>AAX_EMidiGlobalNodeSelectors<br/></p>
<p>AAX_Enums.h, 1196<br/>AAX_eMIDIMtc<br/></p>
<p>AAX_Enums.h, 1196<br/>AAX_EMIDINodeType<br/></p>
<p>AAX_Enums.h, 1192<br/>AAX_eMIDINodeType_Global<br/></p>
<p>AAX_Enums.h, 1193<br/>AAX_eMIDINodeType_LocalInput<br/></p>
<p>AAX_Enums.h, 1193<br/>AAX_eMIDINodeType_LocalOutput<br/></p>
<p>AAX_Enums.h, 1193<br/>AAX_eMIDINodeType_Transport<br/></p>
<p>AAX_Enums.h, 1193<br/>AAX_EModifiers<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_eModifiers_Alt<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_eModifiers_Cntl<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_eModifiers_Command<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_eModifiers_Control<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_eModifiers_None<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_eModifiers_Option<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_eModifiers_SecondaryButton<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_eModifiers_Shift<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_eModifiers_WINKEY<br/></p>
<p>AAX_Enums.h, 1173<br/>AAX_EndianSwap<br/></p>
<p>AAX_EndianSwap.h, 1159<br/>AAX_EndianSwap.h, 1157<br/></p>
<p>AAX_BigEndianNativeSwap, 1159<br/>AAX_BigEndianNativeSwapInPlace, 1159<br/>AAX_BigEndianNativeSwapSequenceInPlace,<br/></p>
<p>1160<br/>AAX_EndianSwap, 1159<br/>AAX_EndianSwapInPlace, 1159<br/>AAX_EndianSwapSequenceInPlace, 1160<br/>AAX_LittleEndianNativeSwap, 1160<br/>AAX_LittleEndianNativeSwapInPlace, 1159<br/>AAX_LittleEndianNativeSwapSequenceInPlace,<br/></p>
<p>1160<br/>ENDIANSWAP_H, 1158<br/></p>
<p>AAX_EndianSwapInPlace<br/>AAX_EndianSwap.h, 1159<br/></p>
<p>AAX_EndianSwapSequenceInPlace<br/>AAX_EndianSwap.h, 1160<br/></p>
<p>AAX_ENotificationEvent<br/>AAX_Enums.h, 1181<br/></p>
<p>AAX_eNotificationEvent_AlgorithmMoved<br/>AAX_Enums.h, 1182<br/></p>
<p>AAX_eNotificationEvent_ASPreviewState<br/>AAX_Enums.h, 1182<br/></p>
<p>AAX_eNotificationEvent_ASProcessingState<br/>AAX_Enums.h, 1182<br/></p>
<p>AAX_eNotificationEvent_CycleCountChanged<br/>AAX_Enums.h, 1183<br/></p>
<p>AAX_eNotificationEvent_DelayCompensationState<br/>AAX_Enums.h, 1183<br/></p>
<p>AAX_eNotificationEvent_EnteringOfflineMode<br/>AAX_Enums.h, 1182<br/></p>
<p>AAX_eNotificationEvent_ExitingOfflineMode<br/>AAX_Enums.h, 1183<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1338 INDEX<br/></b></p>
<p>AAX_eNotificationEvent_GUIClosed<br/>AAX_Enums.h, 1182<br/></p>
<p>AAX_eNotificationEvent_GUIOpened<br/>AAX_Enums.h, 1182<br/></p>
<p>AAX_eNotificationEvent_HostLocale<br/>AAX_Enums.h, 1186<br/></p>
<p>AAX_eNotificationEvent_HostModeChanged<br/>AAX_Enums.h, 1185<br/></p>
<p>AAX_eNotificationEvent_InsertPositionChanged<br/>AAX_Enums.h, 1181<br/></p>
<p>AAX_eNotificationEvent_LogState<br/>AAX_Enums.h, 1185<br/></p>
<p>AAX_eNotificationEvent_MaxViewSizeChanged<br/>AAX_Enums.h, 1184<br/></p>
<p>AAX_eNotificationEvent_NoiseFloorChanged<br/>AAX_Enums.h, 1184<br/></p>
<p>AAX_eNotificationEvent_ParameterMappingChanged<br/>AAX_Enums.h, 1184<br/></p>
<p>AAX_eNotificationEvent_ParameterNameChanged<br/>AAX_Enums.h, 1184<br/></p>
<p>AAX_eNotificationEvent_PresetOpened<br/>AAX_Enums.h, 1182<br/></p>
<p>AAX_eNotificationEvent_PriorSettingsInvalid<br/>AAX_Enums.h, 1185<br/></p>
<p>AAX_eNotificationEvent_SessionBeingOpened<br/>AAX_Enums.h, 1182<br/></p>
<p>AAX_eNotificationEvent_SessionPathChanged<br/>AAX_Enums.h, 1183<br/></p>
<p>AAX_eNotificationEvent_SideChainBeingConnected<br/>AAX_Enums.h, 1184<br/></p>
<p>AAX_eNotificationEvent_SideChainBeingDisconnected<br/>AAX_Enums.h, 1184<br/></p>
<p>AAX_eNotificationEvent_SignalLatencyChanged<br/>AAX_Enums.h, 1183<br/></p>
<p>AAX_eNotificationEvent_TrackNameChanged<br/>AAX_Enums.h, 1181<br/></p>
<p>AAX_eNotificationEvent_TrackPositionChanged<br/>AAX_Enums.h, 1181<br/></p>
<p>AAX_eNotificationEvent_TrackUIDChanged<br/>AAX_Enums.h, 1181<br/></p>
<p>AAX_eNotificationEvent_TransportStateChanged<br/>AAX_Enums.h, 1185<br/></p>
<p>AAX_ENUM_SIZE_CHECK<br/>AAX_Enums.h, 1171, 1201&#8211;1208<br/>AAX_Errors.h, 1212<br/>AAX_GUITypes.h, 1223<br/>AAX_Properties.h, 1278<br/></p>
<p>AAX_Enums.h, 1161<br/>AAE_EAudioBufferLengthNative, 1174<br/>AAX_EAssertFlags, 1200<br/>AAX_eAssertFlags_Default, 1200<br/>AAX_eAssertFlags_Dialog, 1200<br/>AAX_eAssertFlags_Log, 1200<br/>AAX_EAudioBufferLength, 1173<br/>AAX_eAudioBufferLength_1, 1174<br/>AAX_eAudioBufferLength_1024, 1174<br/>AAX_eAudioBufferLength_128, 1174<br/>AAX_eAudioBufferLength_16, 1174<br/></p>
<p>AAX_eAudioBufferLength_2, 1174<br/>AAX_eAudioBufferLength_256, 1174<br/>AAX_eAudioBufferLength_32, 1174<br/>AAX_eAudioBufferLength_4, 1174<br/>AAX_eAudioBufferLength_512, 1174<br/>AAX_eAudioBufferLength_64, 1174<br/>AAX_eAudioBufferLength_8, 1174<br/>AAX_eAudioBufferLength_Max, 1174<br/>AAX_eAudioBufferLength_Undefined, 1174<br/>AAX_EAudioBufferLengthDSP, 1174<br/>AAX_eAudioBufferLengthDSP_16, 1174<br/>AAX_eAudioBufferLengthDSP_32, 1174<br/>AAX_eAudioBufferLengthDSP_4, 1174<br/>AAX_eAudioBufferLengthDSP_64, 1174<br/>AAX_eAudioBufferLengthDSP_Default, 1174<br/>AAX_eAudioBufferLengthDSP_Max, 1174<br/>AAX_eAudioBufferLengthNative_Max, 1175<br/>AAX_eAudioBufferLengthNative_Min, 1175<br/>AAX_EComponentInstanceInitAction, 1189<br/>AAX_eComponentInstanceInitAction_AddingNewInstance,<br/></p>
<p>1189<br/>AAX_eComponentInstanceInitAction_RemovingInstance,<br/></p>
<p>1189<br/>AAX_eComponentInstanceInitAction_ResetInstance,<br/></p>
<p>1189<br/>AAX_EConstraintLocationMask, 1188<br/>AAX_eConstraintLocationMask_DataModel, 1188<br/>AAX_eConstraintLocationMask_DLLChipAffinity,<br/></p>
<p>1188<br/>AAX_eConstraintLocationMask_None, 1188<br/>AAX_EConstraintTopology, 1188<br/>AAX_eConstraintTopology_Monolithic, 1189<br/>AAX_eConstraintTopology_None, 1189<br/>AAX_EDataInPortType, 1194<br/>AAX_eDataInPortType_Buffered, 1194<br/>AAX_eDataInPortType_Incremental, 1195<br/>AAX_eDataInPortType_Unbuffered, 1194<br/>AAX_eEQBandType_HighPass, 1192<br/>AAX_eEQBandType_HighShelf, 1192<br/>AAX_eEQBandType_LowPass, 1192<br/>AAX_eEQBandType_LowShelf, 1192<br/>AAX_eEQBandType_Notch, 1192<br/>AAX_eEQBandType_Parametric, 1192<br/>AAX_EEQBandTypes, 1191<br/>AAX_EEQInCircuitPolarity, 1192<br/>AAX_eEQInCircuitPolarity_Bypassed, 1192<br/>AAX_eEQInCircuitPolarity_Disabled, 1192<br/>AAX_eEQInCircuitPolarity_Enabled, 1192<br/>AAX_EFeetFramesRate, 1196<br/>AAX_eFeetFramesRate_23976, 1196<br/>AAX_eFeetFramesRate_24, 1196<br/>AAX_eFeetFramesRate_25, 1196<br/>AAX_EFrameRate, 1195<br/>AAX_eFrameRate_100Frame, 1195<br/>AAX_eFrameRate_11988DropFrame, 1195<br/>AAX_eFrameRate_11988NonDrop, 1195<br/>AAX_eFrameRate_120DropFrame, 1195<br/>AAX_eFrameRate_120NonDrop, 1195<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1339<br/></b></p>
<p>AAX_eFrameRate_23976, 1195<br/>AAX_eFrameRate_24Frame, 1195<br/>AAX_eFrameRate_25Frame, 1195<br/>AAX_eFrameRate_2997DropFrame, 1195<br/>AAX_eFrameRate_2997NonDrop, 1195<br/>AAX_eFrameRate_30DropFrame, 1195<br/>AAX_eFrameRate_30NonDrop, 1195<br/>AAX_eFrameRate_47952, 1195<br/>AAX_eFrameRate_48Frame, 1195<br/>AAX_eFrameRate_50Frame, 1195<br/>AAX_eFrameRate_5994DropFrame, 1195<br/>AAX_eFrameRate_5994NonDrop, 1195<br/>AAX_eFrameRate_60DropFrame, 1195<br/>AAX_eFrameRate_60NonDrop, 1195<br/>AAX_eFrameRate_Undeclared, 1195<br/>AAX_EHighlightColor, 1172<br/>AAX_eHighlightColor_Blue, 1172<br/>AAX_eHighlightColor_Green, 1172<br/>AAX_eHighlightColor_Num, 1172<br/>AAX_eHighlightColor_Red, 1172<br/>AAX_eHighlightColor_Yellow, 1172<br/>AAX_EHostLevel, 1199<br/>AAX_eHostLevel_Entry, 1199<br/>AAX_eHostLevel_Intermediate, 1199<br/>AAX_eHostLevel_Standard, 1199<br/>AAX_eHostLevel_Unknown, 1199<br/>AAX_EHostMode, 1187<br/>AAX_eHostMode_Config, 1187<br/>AAX_eHostMode_Show, 1187<br/>AAX_EHostModeBits, 1186<br/>AAX_eHostModeBits_Live, 1187<br/>AAX_eHostModeBits_None, 1187<br/>AAX_EMaxAudioSuiteTracks, 1175<br/>AAX_eMaxAudioSuiteTracks, 1175<br/>AAX_EMeterBallisticType, 1180<br/>AAX_eMeterBallisticType_Host, 1180<br/>AAX_eMeterBallisticType_NoDecay, 1180<br/>AAX_EMeterOrientation, 1179<br/>AAX_eMeterOrientation_BottomLeft, 1179<br/>AAX_eMeterOrientation_Center, 1179<br/>AAX_eMeterOrientation_Default, 1179<br/>AAX_eMeterOrientation_PhaseDot, 1179<br/>AAX_eMeterOrientation_TopRight, 1179<br/>AAX_EMeterType, 1180<br/>AAX_eMeterType_Analysis, 1180<br/>AAX_eMeterType_CLGain, 1180<br/>AAX_eMeterType_EGGain, 1180<br/>AAX_eMeterType_Input, 1180<br/>AAX_eMeterType_None, 1180<br/>AAX_eMeterType_Other, 1180<br/>AAX_eMeterType_Output, 1180<br/>AAX_eMIDIBeatClock, 1196<br/>AAX_eMIDIClick, 1196<br/>AAX_EMidiGlobalNodeSelectors, 1196<br/>AAX_eMIDIMtc, 1196<br/>AAX_EMIDINodeType, 1192<br/>AAX_eMIDINodeType_Global, 1193<br/>AAX_eMIDINodeType_LocalInput, 1193<br/></p>
<p>AAX_eMIDINodeType_LocalOutput, 1193<br/>AAX_eMIDINodeType_Transport, 1193<br/>AAX_EModifiers, 1173<br/>AAX_eModifiers_Alt, 1173<br/>AAX_eModifiers_Cntl, 1173<br/>AAX_eModifiers_Command, 1173<br/>AAX_eModifiers_Control, 1173<br/>AAX_eModifiers_None, 1173<br/>AAX_eModifiers_Option, 1173<br/>AAX_eModifiers_SecondaryButton, 1173<br/>AAX_eModifiers_Shift, 1173<br/>AAX_eModifiers_WINKEY, 1173<br/>AAX_ENotificationEvent, 1181<br/>AAX_eNotificationEvent_AlgorithmMoved, 1182<br/>AAX_eNotificationEvent_ASPreviewState, 1182<br/>AAX_eNotificationEvent_ASProcessingState, 1182<br/>AAX_eNotificationEvent_CycleCountChanged,<br/></p>
<p>1183<br/>AAX_eNotificationEvent_DelayCompensationState,<br/></p>
<p>1183<br/>AAX_eNotificationEvent_EnteringOfflineMode,<br/></p>
<p>1182<br/>AAX_eNotificationEvent_ExitingOfflineMode, 1183<br/>AAX_eNotificationEvent_GUIClosed, 1182<br/>AAX_eNotificationEvent_GUIOpened, 1182<br/>AAX_eNotificationEvent_HostLocale, 1186<br/>AAX_eNotificationEvent_HostModeChanged, 1185<br/>AAX_eNotificationEvent_InsertPositionChanged,<br/></p>
<p>1181<br/>AAX_eNotificationEvent_LogState, 1185<br/>AAX_eNotificationEvent_MaxViewSizeChanged,<br/></p>
<p>1184<br/>AAX_eNotificationEvent_NoiseFloorChanged,<br/></p>
<p>1184<br/>AAX_eNotificationEvent_ParameterMappingChanged,<br/></p>
<p>1184<br/>AAX_eNotificationEvent_ParameterNameChanged,<br/></p>
<p>1184<br/>AAX_eNotificationEvent_PresetOpened, 1182<br/>AAX_eNotificationEvent_PriorSettingsInvalid, 1185<br/>AAX_eNotificationEvent_SessionBeingOpened,<br/></p>
<p>1182<br/>AAX_eNotificationEvent_SessionPathChanged,<br/></p>
<p>1183<br/>AAX_eNotificationEvent_SideChainBeingConnected,<br/></p>
<p>1184<br/>AAX_eNotificationEvent_SideChainBeingDisconnected,<br/></p>
<p>1184<br/>AAX_eNotificationEvent_SignalLatencyChanged,<br/></p>
<p>1183<br/>AAX_eNotificationEvent_TrackNameChanged,<br/></p>
<p>1181<br/>AAX_eNotificationEvent_TrackPositionChanged,<br/></p>
<p>1181<br/>AAX_eNotificationEvent_TrackUIDChanged, 1181<br/>AAX_eNotificationEvent_TransportStateChanged,<br/></p>
<p>1185<br/>AAX_ENUM_SIZE_CHECK, 1171, 1201&#8211;1208<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1340 INDEX<br/></b></p>
<p>AAX_ePageTable_EQ_Band_Type, 1191<br/>AAX_ePageTable_EQ_InCircuitPolarity, 1191<br/>AAX_ePageTable_UseAlternateControl, 1191<br/>AAX_EParameterOrientation, 1171<br/>AAX_eParameterOrientation_BottomMinTopMax,<br/></p>
<p>1190<br/>AAX_eParameterOrientation_Default, 1190<br/>AAX_eParameterOrientation_LeftMinRightMax,<br/></p>
<p>1190<br/>AAX_eParameterOrientation_RightMinLeftMax,<br/></p>
<p>1190<br/>AAX_eParameterOrientation_RotaryBoostCutMode,<br/></p>
<p>1190<br/>AAX_eParameterOrientation_RotaryLeftMinRightMax,<br/></p>
<p>1190<br/>AAX_eParameterOrientation_RotaryRightMinLeftMax,<br/></p>
<p>1190<br/>AAX_eParameterOrientation_RotarySingleDotMode,<br/></p>
<p>1190<br/>AAX_eParameterOrientation_RotarySpreadMode,<br/></p>
<p>1190<br/>AAX_eParameterOrientation_RotaryWrapMode,<br/></p>
<p>1190<br/>AAX_eParameterOrientation_TopMinBottomMax,<br/></p>
<p>1190<br/>AAX_EParameterOrientationBits, 1190<br/>AAX_EParameterType, 1171, 1190<br/>AAX_eParameterType_Continuous, 1190<br/>AAX_eParameterType_Discrete, 1190<br/>AAX_EParameterValueInfoSelector, 1190<br/>AAX_EPlugInCategory, 1177<br/>AAX_ePlugInCategory_Delay, 1177<br/>AAX_ePlugInCategory_Dither, 1177<br/>AAX_ePlugInCategory_Dynamics, 1177<br/>AAX_EPlugInCategory_Effect, 1177<br/>AAX_ePlugInCategory_EQ, 1177<br/>AAX_ePlugInCategory_Example, 1177<br/>AAX_ePlugInCategory_Harmonic, 1177<br/>AAX_ePlugInCategory_HWGenerators, 1177<br/>AAX_ePlugInCategory_INT32_MAX, 1177<br/>AAX_EPlugInCategory_MIDIEffect, 1177<br/>AAX_ePlugInCategory_Modulation, 1177<br/>AAX_ePlugInCategory_NoiseReduction, 1177<br/>AAX_ePlugInCategory_None, 1177<br/>AAX_ePlugInCategory_PitchShift, 1177<br/>AAX_ePlugInCategory_Reverb, 1177<br/>AAX_ePlugInCategory_SoundField, 1177<br/>AAX_ePlugInCategory_SWGenerators, 1177<br/>AAX_ePlugInCategory_WrappedPlugin, 1177<br/>AAX_EPlugInStrings, 1178<br/>AAX_ePlugInStrings_AllSelectedRegionsAnalysis,<br/></p>
<p>1178<br/>AAX_ePlugInStrings_Analysis, 1178<br/>AAX_ePlugInStrings_Bypass, 1179<br/>AAX_ePlugInStrings_ClipName, 1178<br/>AAX_ePlugInStrings_ClipNameSuffix, 1179<br/>AAX_ePlugInStrings_INT32_MAX, 1179<br/>AAX_ePlugInStrings_MonoMode, 1178<br/></p>
<p>AAX_ePlugInStrings_MultiInputMode, 1178<br/>AAX_ePlugInStrings_PlugInFileName, 1179<br/>AAX_ePlugInStrings_Preview, 1179<br/>AAX_ePlugInStrings_Process, 1179<br/>AAX_ePlugInStrings_Progress, 1179<br/>AAX_ePlugInStrings_RegionByRegionAnalysis,<br/></p>
<p>1178<br/>AAX_ePlugInStrings_RegionName, 1178<br/>AAX_EPreviewState, 1196<br/>AAX_ePreviewState_Start, 1197<br/>AAX_ePreviewState_Stop, 1197<br/>AAX_EPrivateDataOptions, 1187<br/>AAX_ePrivateDataOptions_Align8, 1188<br/>AAX_ePrivateDataOptions_DefaultOptions, 1187<br/>AAX_ePrivateDataOptions_External, 1188<br/>AAX_ePrivateDataOptions_INT32_MAX, 1188<br/>AAX_ePrivateDataOptions_KeepOnReset, 1187<br/>AAX_EProcessingState, 1197<br/>AAX_eProcessingState_BeginPassGroup, 1198<br/>AAX_eProcessingState_EndPassGroup, 1197<br/>AAX_eProcessingState_Start, 1198<br/>AAX_eProcessingState_StartPass, 1197<br/>AAX_eProcessingState_Stop, 1198<br/>AAX_eProcessingState_StopPass, 1197<br/>AAX_ERecordMode, 1200<br/>AAX_eRecordMode_Destructive, 1201<br/>AAX_eRecordMode_None, 1201<br/>AAX_eRecordMode_Normal, 1201<br/>AAX_eRecordMode_Num, 1201<br/>AAX_eRecordMode_QuickPunch, 1201<br/>AAX_eRecordMode_TrackPunch, 1201<br/>AAX_eRecordMode_Unknown, 1201<br/>AAX_EResourceType, 1180<br/>AAX_eResourceType_None, 1181<br/>AAX_eResourceType_PageTable, 1181<br/>AAX_eResourceType_PageTableDir, 1181<br/>AAX_ESampleRateMask, 1189<br/>AAX_eSampleRateMask_176400, 1189<br/>AAX_eSampleRateMask_192000, 1189<br/>AAX_eSampleRateMask_44100, 1189<br/>AAX_eSampleRateMask_48000, 1189<br/>AAX_eSampleRateMask_88200, 1189<br/>AAX_eSampleRateMask_96000, 1189<br/>AAX_eSampleRateMask_All, 1189<br/>AAX_eSampleRateMask_No, 1189<br/>AAX_EStemFormat, 1175<br/>AAX_eStemFormat_5_0, 1176<br/>AAX_eStemFormat_5_0_2, 1176<br/>AAX_eStemFormat_5_0_4, 1176<br/>AAX_eStemFormat_5_1, 1176<br/>AAX_eStemFormat_5_1_2, 1176<br/>AAX_eStemFormat_5_1_4, 1176<br/>AAX_eStemFormat_6_0, 1176<br/>AAX_eStemFormat_6_1, 1176<br/>AAX_eStemFormat_7_0_2, 1176<br/>AAX_eStemFormat_7_0_4, 1176<br/>AAX_eStemFormat_7_0_6, 1176<br/>AAX_eStemFormat_7_0_DTS, 1176<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1341<br/></b></p>
<p>AAX_eStemFormat_7_0_SDDS, 1176<br/>AAX_eStemFormat_7_1_2, 1176<br/>AAX_eStemFormat_7_1_4, 1176<br/>AAX_eStemFormat_7_1_6, 1176<br/>AAX_eStemFormat_7_1_DTS, 1176<br/>AAX_eStemFormat_7_1_SDDS, 1176<br/>AAX_eStemFormat_9_0_4, 1176<br/>AAX_eStemFormat_9_0_6, 1176<br/>AAX_eStemFormat_9_1_4, 1176<br/>AAX_eStemFormat_9_1_6, 1176<br/>AAX_eStemFormat_Ambi_1_ACN, 1176<br/>AAX_eStemFormat_Ambi_2_ACN, 1176<br/>AAX_eStemFormat_Ambi_3_ACN, 1176<br/>AAX_eStemFormat_Ambi_4_ACN, 1176<br/>AAX_eStemFormat_Ambi_5_ACN, 1176<br/>AAX_eStemFormat_Ambi_6_ACN, 1177<br/>AAX_eStemFormat_Ambi_7_ACN, 1177<br/>AAX_eStemFormat_Any, 1177<br/>AAX_eStemFormat_INT32_MAX, 1177<br/>AAX_eStemFormat_LCR, 1176<br/>AAX_eStemFormat_LCRS, 1176<br/>AAX_eStemFormat_Mono, 1176<br/>AAX_eStemFormat_None, 1177<br/>AAX_eStemFormat_Quad, 1176<br/>AAX_eStemFormat_Stereo, 1176<br/>AAX_eStemFormatNum, 1177<br/>AAX_ESupportLevel, 1198<br/>AAX_eSupportLevel_ByProperty, 1199<br/>AAX_eSupportLevel_Disabled, 1199<br/>AAX_eSupportLevel_Supported, 1199<br/>AAX_eSupportLevel_Uninitialized, 1199<br/>AAX_eSupportLevel_Unsupported, 1199<br/>AAX_ETargetPlatform, 1198<br/>AAX_ETextEncoding, 1199<br/>AAX_eTextEncoding_Num, 1200<br/>AAX_eTextEncoding_Undefined, 1200<br/>AAX_eTextEncoding_UTF8, 1200<br/>AAX_ETracePriorityDSP, 1173<br/>AAX_eTracePriorityDSP_Assert, 1173<br/>AAX_eTracePriorityDSP_High, 1173<br/>AAX_eTracePriorityDSP_Low, 1173<br/>AAX_eTracePriorityDSP_None, 1173<br/>AAX_eTracePriorityDSP_Normal, 1173<br/>AAX_ETracePriorityHost, 1172<br/>AAX_eTracePriorityHost_Critical, 1172<br/>AAX_eTracePriorityHost_High, 1172<br/>AAX_eTracePriorityHost_Low, 1172<br/>AAX_eTracePriorityHost_Lowest, 1172<br/>AAX_eTracePriorityHost_None, 1172<br/>AAX_eTracePriorityHost_Normal, 1172<br/>AAX_ETransportState, 1200<br/>AAX_eTransportState_FastForward, 1200<br/>AAX_eTransportState_Num, 1200<br/>AAX_eTransportState_Paused, 1200<br/>AAX_eTransportState_Play, 1200<br/>AAX_eTransportState_Rewind, 1200<br/>AAX_eTransportState_Scrub, 1200<br/>AAX_eTransportState_Shuttle, 1200<br/></p>
<p>AAX_eTransportState_Stop, 1200<br/>AAX_eTransportState_Stopping, 1200<br/>AAX_eTransportState_Unknown, 1200<br/>AAX_EUpdateSource, 1194<br/>AAX_eUpdateSource_Chunk, 1194<br/>AAX_eUpdateSource_Delay, 1194<br/>AAX_eUpdateSource_Parameter, 1194<br/>AAX_eUpdateSource_Unspecified, 1194<br/>AAX_EUseAlternateControl, 1192<br/>AAX_eUseAlternateControl_No, 1192<br/>AAX_eUseAlternateControl_Yes, 1192<br/>AAX_INT16_MAX, 1170<br/>AAX_INT16_MIN, 1170<br/>AAX_INT32_MAX, 1170<br/>AAX_INT32_MIN, 1170<br/>AAX_STEM_FORMAT, 1171<br/>AAX_STEM_FORMAT_CHANNEL_COUNT, 1171<br/>AAX_STEM_FORMAT_INDEX, 1171<br/>AAX_UINT16_MAX, 1170<br/>AAX_UINT16_MIN, 1170<br/>AAX_UINT32_MAX, 1170<br/>AAX_UINT32_MIN, 1170<br/>getLowestSampleRateInMask, 1205<br/>getMaskForSampleRate, 1205<br/>kAAX_eTargetPlatform_Count, 1198<br/>kAAX_eTargetPlatform_External, 1198<br/>kAAX_eTargetPlatform_Native, 1198<br/>kAAX_eTargetPlatform_None, 1198<br/>kAAX_eTargetPlatform_TI, 1198<br/>sampleRateInMask, 1204<br/></p>
<p>AAX_EnvironmentUtilities.h, 1208<br/>AAX_ePageTable_EQ_Band_Type<br/></p>
<p>AAX_Enums.h, 1191<br/>AAX_ePageTable_EQ_InCircuitPolarity<br/></p>
<p>AAX_Enums.h, 1191<br/>AAX_ePageTable_UseAlternateControl<br/></p>
<p>AAX_Enums.h, 1191<br/>AAX_EParameterOrientation<br/></p>
<p>AAX_Enums.h, 1171<br/>AAX_eParameterOrientation_BottomMinTopMax<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterOrientation_Default<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterOrientation_LeftMinRightMax<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterOrientation_RightMinLeftMax<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterOrientation_RotaryBoostCutMode<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterOrientation_RotaryLeftMinRightMax<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterOrientation_RotaryRightMinLeftMax<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterOrientation_RotarySingleDotMode<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterOrientation_RotarySpreadMode<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterOrientation_RotaryWrapMode<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1342 INDEX<br/></b></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterOrientation_TopMinBottomMax<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_EParameterOrientationBits<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_EParameterType<br/></p>
<p>AAX_Enums.h, 1171, 1190<br/>AAX_eParameterType_Continuous<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_eParameterType_Discrete<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_EParameterValueInfoSelector<br/></p>
<p>AAX_Enums.h, 1190<br/>AAX_EPlugInCategory<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_Delay<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_Dither<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_Dynamics<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_EPlugInCategory_Effect<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_EQ<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_Example<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_Harmonic<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_HWGenerators<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_INT32_MAX<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_EPlugInCategory_MIDIEffect<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_Modulation<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_NoiseReduction<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_None<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_PitchShift<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_Reverb<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_SoundField<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_SWGenerators<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_ePlugInCategory_WrappedPlugin<br/></p>
<p>AAX_Enums.h, 1177<br/>AAX_EPlugInStrings<br/></p>
<p>AAX_Enums.h, 1178<br/>AAX_ePlugInStrings_AllSelectedRegionsAnalysis<br/></p>
<p>AAX_Enums.h, 1178<br/>AAX_ePlugInStrings_Analysis<br/></p>
<p>AAX_Enums.h, 1178<br/>AAX_ePlugInStrings_Bypass<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_ePlugInStrings_ClipName<br/></p>
<p>AAX_Enums.h, 1178<br/>AAX_ePlugInStrings_ClipNameSuffix<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_ePlugInStrings_INT32_MAX<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_ePlugInStrings_MonoMode<br/></p>
<p>AAX_Enums.h, 1178<br/>AAX_ePlugInStrings_MultiInputMode<br/></p>
<p>AAX_Enums.h, 1178<br/>AAX_ePlugInStrings_PlugInFileName<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_ePlugInStrings_Preview<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_ePlugInStrings_Process<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_ePlugInStrings_Progress<br/></p>
<p>AAX_Enums.h, 1179<br/>AAX_ePlugInStrings_RegionByRegionAnalysis<br/></p>
<p>AAX_Enums.h, 1178<br/>AAX_ePlugInStrings_RegionName<br/></p>
<p>AAX_Enums.h, 1178<br/>AAX_EPreviewState<br/></p>
<p>AAX_Enums.h, 1196<br/>AAX_ePreviewState_Start<br/></p>
<p>AAX_Enums.h, 1197<br/>AAX_ePreviewState_Stop<br/></p>
<p>AAX_Enums.h, 1197<br/>AAX_EPrivateDataOptions<br/></p>
<p>AAX_Enums.h, 1187<br/>AAX_ePrivateDataOptions_Align8<br/></p>
<p>AAX_Enums.h, 1188<br/>AAX_ePrivateDataOptions_DefaultOptions<br/></p>
<p>AAX_Enums.h, 1187<br/>AAX_ePrivateDataOptions_External<br/></p>
<p>AAX_Enums.h, 1188<br/>AAX_ePrivateDataOptions_INT32_MAX<br/></p>
<p>AAX_Enums.h, 1188<br/>AAX_ePrivateDataOptions_KeepOnReset<br/></p>
<p>AAX_Enums.h, 1187<br/>AAX_EProcessingState<br/></p>
<p>AAX_Enums.h, 1197<br/>AAX_eProcessingState_BeginPassGroup<br/></p>
<p>AAX_Enums.h, 1198<br/>AAX_eProcessingState_EndPassGroup<br/></p>
<p>AAX_Enums.h, 1197<br/>AAX_eProcessingState_Start<br/></p>
<p>AAX_Enums.h, 1198<br/>AAX_eProcessingState_StartPass<br/></p>
<p>AAX_Enums.h, 1197<br/>AAX_eProcessingState_Stop<br/></p>
<p>AAX_Enums.h, 1198<br/>AAX_eProcessingState_StopPass<br/></p>
<p>AAX_Enums.h, 1197<br/>AAX_EProperty<br/></p>
<p>AAX_Properties.h, 1260<br/>AAX_eProperty_AllowPreviewWithoutAnalysis<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1343<br/></b></p>
<p>AAX_Properties.h, 1270<br/>AAX_eProperty_AlwaysBypass<br/></p>
<p>AAX_Properties.h, 1269<br/>AAX_eProperty_AudioBufferLength<br/></p>
<p>AAX_Properties.h, 1266<br/>AAX_eProperty_AudiosuitePropsBase<br/></p>
<p>AAX_Properties.h, 1269<br/>AAX_eProperty_CanBypass<br/></p>
<p>AAX_Properties.h, 1268<br/>AAX_eProperty_Constraint_AlwaysProcess<br/></p>
<p>AAX_Properties.h, 1277<br/>AAX_eProperty_Constraint_DoNotApplyDefaultSettings<br/></p>
<p>AAX_Properties.h, 1277<br/>AAX_eProperty_Constraint_Location<br/></p>
<p>AAX_Properties.h, 1274<br/>AAX_eProperty_Constraint_MultiMonoSupport<br/></p>
<p>AAX_Properties.h, 1275<br/>AAX_eProperty_Constraint_NeverCache<br/></p>
<p>AAX_Properties.h, 1274<br/>AAX_eProperty_Constraint_NeverUnload<br/></p>
<p>AAX_Properties.h, 1274<br/>AAX_eProperty_Constraint_Topology<br/></p>
<p>AAX_Properties.h, 1274<br/>AAX_eProperty_ConstraintBase<br/></p>
<p>AAX_Properties.h, 1274<br/>AAX_eProperty_ConstraintBase_2<br/></p>
<p>AAX_Properties.h, 1276<br/>AAX_eProperty_ContinuousOnly<br/></p>
<p>AAX_Properties.h, 1271<br/>AAX_eProperty_DebugPropertiesBase<br/></p>
<p>AAX_Properties.h, 1277<br/>AAX_eProperty_Deprecated_DSP_Plugin_List<br/></p>
<p>AAX_Properties.h, 1264<br/>AAX_eProperty_Deprecated_Native_Plugin_List<br/></p>
<p>AAX_Properties.h, 1265<br/>AAX_eProperty_Deprecated_Plugin_List<br/></p>
<p>AAX_Properties.h, 1264<br/>AAX_eProperty_DestinationTrack<br/></p>
<p>AAX_Properties.h, 1271<br/>AAX_eProperty_DisableAudioSuiteReverse<br/></p>
<p>AAX_Properties.h, 1273<br/>AAX_eProperty_DisableHandles<br/></p>
<p>AAX_Properties.h, 1272<br/>AAX_eProperty_DisablePreview<br/></p>
<p>AAX_Properties.h, 1272<br/>AAX_eProperty_DoesntIncrOutputSample<br/></p>
<p>AAX_Properties.h, 1272<br/>AAX_eProperty_DSP_AudioBufferLength<br/></p>
<p>AAX_Properties.h, 1266<br/>AAX_eProperty_EnableHostDebugLogs<br/></p>
<p>AAX_Properties.h, 1278<br/>AAX_eProperty_ExternalProcessorTypeID<br/></p>
<p>AAX_Properties.h, 1265<br/>AAX_eProperty_FeaturesBase<br/></p>
<p>AAX_Properties.h, 1275<br/>AAX_eProperty_GeneralPropsBase<br/></p>
<p>AAX_Properties.h, 1266<br/>AAX_eProperty_GUIBase<br/></p>
<p>AAX_Properties.h, 1273<br/>AAX_eProperty_HybridInputStemFormat<br/></p>
<p>AAX_Properties.h, 1269<br/>AAX_eProperty_HybridOutputStemFormat<br/></p>
<p>AAX_Properties.h, 1269<br/>AAX_eProperty_InputStemFormat<br/></p>
<p>AAX_Properties.h, 1266<br/>AAX_eProperty_LatencyContribution<br/></p>
<p>AAX_Properties.h, 1267<br/>AAX_eProperty_ManufacturerID<br/></p>
<p>AAX_Properties.h, 1261<br/>AAX_eProperty_MaxASProp<br/></p>
<p>AAX_Properties.h, 1273<br/>AAX_eProperty_MaxCap<br/></p>
<p>AAX_Properties.h, 1278<br/>AAX_eProperty_MaxConstraintProp<br/></p>
<p>AAX_Properties.h, 1275<br/>AAX_eProperty_MaxConstraintProp_2<br/></p>
<p>AAX_Properties.h, 1277<br/>AAX_eProperty_MaxFeaturesProp<br/></p>
<p>AAX_Properties.h, 1276<br/>AAX_eProperty_MaxGUIProp<br/></p>
<p>AAX_Properties.h, 1273<br/>AAX_eProperty_MaxMeterProp<br/></p>
<p>AAX_Properties.h, 1274<br/>AAX_eProperty_MaxProp<br/></p>
<p>AAX_Properties.h, 1278<br/>AAX_eProperty_Meter_Ballistics<br/></p>
<p>AAX_Properties.h, 1274<br/>AAX_eProperty_Meter_Orientation<br/></p>
<p>AAX_Properties.h, 1274<br/>AAX_eProperty_Meter_Type<br/></p>
<p>AAX_Properties.h, 1273<br/>AAX_eProperty_MeterBase<br/></p>
<p>AAX_Properties.h, 1273<br/>AAX_eProperty_MinProp<br/></p>
<p>AAX_Properties.h, 1261<br/>AAX_eProperty_MultiInputModeOnly<br/></p>
<p>AAX_Properties.h, 1271<br/>AAX_eProperty_NativeBackgroundProc<br/></p>
<p>AAX_Properties.h, 1266<br/>AAX_eProperty_NativeInstanceInitProc<br/></p>
<p>AAX_Properties.h, 1265<br/>AAX_eProperty_NativeProcessProc<br/></p>
<p>AAX_Properties.h, 1265<br/>AAX_eProperty_NeedsOutputDithered<br/></p>
<p>AAX_Properties.h, 1273<br/>AAX_eProperty_NoID<br/></p>
<p>AAX_Properties.h, 1261<br/>AAX_eProperty_NumberOfInputs<br/></p>
<p>AAX_Properties.h, 1272<br/>AAX_eProperty_NumberOfOutputs<br/></p>
<p>AAX_Properties.h, 1272<br/>AAX_eProperty_ObservesTransportState<br/></p>
<p>AAX_Properties.h, 1276<br/>AAX_eProperty_OptionalAnalysis<br/></p>
<p>AAX_Properties.h, 1270<br/>AAX_eProperty_OutputStemFormat<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1344 INDEX<br/></b></p>
<p>AAX_Properties.h, 1266<br/>AAX_eProperty_PlugInID_AudioSuite<br/></p>
<p>AAX_Properties.h, 1262<br/>AAX_eProperty_PlugInID_Deprecated<br/></p>
<p>AAX_Properties.h, 1264<br/>AAX_eProperty_PlugInID_ExternalProcessor<br/></p>
<p>AAX_Properties.h, 1265<br/>AAX_eProperty_PlugInID_Native<br/></p>
<p>AAX_Properties.h, 1262<br/>AAX_eProperty_PlugInID_NoProcessing<br/></p>
<p>AAX_Properties.h, 1263<br/>AAX_eProperty_PlugInID_RTAS<br/></p>
<p>AAX_Properties.h, 1262<br/>AAX_eProperty_PlugInID_TI<br/></p>
<p>AAX_Properties.h, 1263<br/>AAX_eProperty_PlugInSpecPropsBase<br/></p>
<p>AAX_Properties.h, 1261<br/>AAX_eProperty_ProcessProcPropsBase<br/></p>
<p>AAX_Properties.h, 1265<br/>AAX_eProperty_ProductID<br/></p>
<p>AAX_Properties.h, 1261<br/>AAX_eProperty_Related_DSP_Plugin_List<br/></p>
<p>AAX_Properties.h, 1264<br/>AAX_eProperty_Related_Native_Plugin_List<br/></p>
<p>AAX_Properties.h, 1264<br/>AAX_eProperty_RequestsAllTrackData<br/></p>
<p>AAX_Properties.h, 1271<br/>AAX_eProperty_RequiresAnalysis<br/></p>
<p>AAX_Properties.h, 1270<br/>AAX_eProperty_RequiresChunkCallsOnMainThread<br/></p>
<p>AAX_Properties.h, 1276<br/>AAX_eProperty_SampleRate<br/></p>
<p>AAX_Properties.h, 1267<br/>AAX_eProperty_ShowInMenus<br/></p>
<p>AAX_Properties.h, 1269<br/>AAX_eProperty_SideChainStemFormat<br/></p>
<p>AAX_Properties.h, 1268<br/>AAX_eProperty_StoreXMLPageTablesByEffect<br/></p>
<p>AAX_Properties.h, 1275<br/>AAX_eProperty_StoreXMLPageTablesByType<br/></p>
<p>AAX_Properties.h, 1275<br/>AAX_eProperty_SupportsSaveRestore<br/></p>
<p>AAX_Properties.h, 1275<br/>AAX_eProperty_SupportsSideChainInput<br/></p>
<p>AAX_Properties.h, 1273<br/>AAX_eProperty_TI_ForceAllowChipSharing<br/></p>
<p>AAX_Properties.h, 1269<br/>AAX_eProperty_TI_InstanceCycleCount<br/></p>
<p>AAX_Properties.h, 1268<br/>AAX_eProperty_TI_MaxInstancesPerChip<br/></p>
<p>AAX_Properties.h, 1268<br/>AAX_eProperty_TI_SharedCycleCount<br/></p>
<p>AAX_Properties.h, 1268<br/>AAX_eProperty_TIBackgroundProc<br/></p>
<p>AAX_Properties.h, 1266<br/>AAX_eProperty_TIDLLFileName<br/></p>
<p>AAX_Properties.h, 1266<br/>AAX_eProperty_TIInstanceInitProc<br/></p>
<p>AAX_Properties.h, 1266<br/>AAX_eProperty_TIProcessProc<br/></p>
<p>AAX_Properties.h, 1266<br/>AAX_eProperty_UsesClientGUI<br/></p>
<p>AAX_Properties.h, 1273<br/>AAX_eProperty_UsesRandomAccess<br/></p>
<p>AAX_Properties.h, 1270<br/>AAX_eProperty_UsesTransport<br/></p>
<p>AAX_Properties.h, 1275<br/>AAX_eProperty_UsesTransportControl<br/></p>
<p>AAX_Properties.h, 1276<br/>AAX_ERecordMode<br/></p>
<p>AAX_Enums.h, 1200<br/>AAX_eRecordMode_Destructive<br/></p>
<p>AAX_Enums.h, 1201<br/>AAX_eRecordMode_None<br/></p>
<p>AAX_Enums.h, 1201<br/>AAX_eRecordMode_Normal<br/></p>
<p>AAX_Enums.h, 1201<br/>AAX_eRecordMode_Num<br/></p>
<p>AAX_Enums.h, 1201<br/>AAX_eRecordMode_QuickPunch<br/></p>
<p>AAX_Enums.h, 1201<br/>AAX_eRecordMode_TrackPunch<br/></p>
<p>AAX_Enums.h, 1201<br/>AAX_eRecordMode_Unknown<br/></p>
<p>AAX_Enums.h, 1201<br/>AAX_EResourceType<br/></p>
<p>AAX_Enums.h, 1180<br/>AAX_eResourceType_None<br/></p>
<p>AAX_Enums.h, 1181<br/>AAX_eResourceType_PageTable<br/></p>
<p>AAX_Enums.h, 1181<br/>AAX_eResourceType_PageTableDir<br/></p>
<p>AAX_Enums.h, 1181<br/>AAX_ERROR_ACF_ERROR<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_ARGUMENT_BUFFER_OVERFLOW<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_ARGUMENT_OUT_OF_RANGE<br/></p>
<p>AAX_Errors.h, 1212<br/>AAX_ERROR_CONTEXT_ALREADY_HAS_METERS<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_DIRECT_ACCESS_OUT_OF_BOUNDS<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_DUPLICATE_EFFECT_ID<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_DUPLICATE_TYPE_ID<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_EMPTY_EFFECT_NAME<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_FIELD_TYPE_DOES_NOT_SUPPORT_DIRECT_ACCESS<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_FIFO_FULL<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_INCORRECT_CHUNK_SIZE<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_ERROR_INITIALIZING_PACKET_STREAM_THREAD<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1345<br/></b></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_INVALID_ARGUMENT<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_INVALID_CHUNK_ID<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_ERROR_INVALID_CHUNK_INDEX<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_ERROR_INVALID_FIELD_INDEX<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_INVALID_INTERNAL_DATA<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_INVALID_METER_INDEX<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_ERROR_INVALID_METER_TYPE<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_INVALID_PARAMETER_ID<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_ERROR_INVALID_PARAMETER_INDEX<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_ERROR_INVALID_PATH<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_INVALID_STRING_CONVERSION<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_ERROR_INVALID_VIEW_SIZE<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_MALFORMED_CHUNK<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_MIXER_THREAD_FALLING_BEHIND<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_NO_ABBREVIATED_PARAMETER_NAME<br/></p>
<p>AAX_Errors.h, 1212<br/>AAX_ERROR_NO_COMPONENTS<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_NOT_INITIALIZED<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_NOTIFICATION_FAILED<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_NULL_ARGUMENT<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_NULL_COMPONENT<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_NULL_OBJECT<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_ERROR_OLDER_VERSION<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_ERROR_PLUGIN_BEGIN<br/></p>
<p>AAX_Errors.h, 1212<br/>AAX_ERROR_PLUGIN_END<br/></p>
<p>AAX_Errors.h, 1212<br/>AAX_ERROR_PLUGIN_NOT_AUTHORIZED<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_PLUGIN_NULL_PARAMETER<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_PORT_ID_OUT_OF_RANGE<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_POST_PACKET_FAILED<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_PRINT_FAILURE<br/></p>
<p>AAX_Errors.h, 1212<br/>AAX_ERROR_PROPERTY_UNDEFINED<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_SIGNED_INT_OVERFLOW<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_TOD_BEHIND<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_UNEXPECTED_EFFECT_ID<br/></p>
<p>AAX_Errors.h, 1212<br/>AAX_ERROR_UNIMPLEMENTED<br/></p>
<p>AAX_Errors.h, 1210<br/>AAX_ERROR_UNKNOWN_EXCEPTION<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_UNKNOWN_ID<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_UNKNOWN_PLUGIN<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_ERROR_UNSUPPORTED_ENCODING<br/></p>
<p>AAX_Errors.h, 1212<br/>AAX_Errors.h, 1209<br/></p>
<p>AAX_EError, 1210<br/>AAX_ENUM_SIZE_CHECK, 1212<br/>AAX_ERROR_ACF_ERROR, 1211<br/>AAX_ERROR_ARGUMENT_BUFFER_OVERFLOW,<br/></p>
<p>1211<br/>AAX_ERROR_ARGUMENT_OUT_OF_RANGE,<br/></p>
<p>1212<br/>AAX_ERROR_CONTEXT_ALREADY_HAS_METERS,<br/></p>
<p>1211<br/>AAX_ERROR_DIRECT_ACCESS_OUT_OF_BOUNDS,<br/></p>
<p>1211<br/>AAX_ERROR_DUPLICATE_EFFECT_ID, 1211<br/>AAX_ERROR_DUPLICATE_TYPE_ID, 1211<br/>AAX_ERROR_EMPTY_EFFECT_NAME, 1211<br/>AAX_ERROR_FIELD_TYPE_DOES_NOT_SUPPORT_DIRECT_ACCESS,<br/></p>
<p>1211<br/>AAX_ERROR_FIFO_FULL, 1211<br/>AAX_ERROR_INCORRECT_CHUNK_SIZE, 1210<br/>AAX_ERROR_INITIALIZING_PACKET_STREAM_THREAD,<br/></p>
<p>1211<br/>AAX_ERROR_INVALID_ARGUMENT, 1211<br/>AAX_ERROR_INVALID_CHUNK_ID, 1210<br/>AAX_ERROR_INVALID_CHUNK_INDEX, 1210<br/>AAX_ERROR_INVALID_FIELD_INDEX, 1211<br/>AAX_ERROR_INVALID_INTERNAL_DATA, 1211<br/>AAX_ERROR_INVALID_METER_INDEX, 1210<br/>AAX_ERROR_INVALID_METER_TYPE, 1211<br/>AAX_ERROR_INVALID_PARAMETER_ID, 1210<br/>AAX_ERROR_INVALID_PARAMETER_INDEX,<br/></p>
<p>1210<br/>AAX_ERROR_INVALID_PATH, 1211<br/>AAX_ERROR_INVALID_STRING_CONVERSION,<br/></p>
<p>1210<br/>AAX_ERROR_INVALID_VIEW_SIZE, 1211<br/>AAX_ERROR_MALFORMED_CHUNK, 1211<br/>AAX_ERROR_MIXER_THREAD_FALLING_BEHIND,<br/></p>
<p>1211<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1346 INDEX<br/></b></p>
<p>AAX_ERROR_NO_ABBREVIATED_PARAMETER_NAME,<br/>1212<br/></p>
<p>AAX_ERROR_NO_COMPONENTS, 1211<br/>AAX_ERROR_NOT_INITIALIZED, 1211<br/>AAX_ERROR_NOTIFICATION_FAILED, 1211<br/>AAX_ERROR_NULL_ARGUMENT, 1211<br/>AAX_ERROR_NULL_COMPONENT, 1211<br/>AAX_ERROR_NULL_OBJECT, 1210<br/>AAX_ERROR_OLDER_VERSION, 1210<br/>AAX_ERROR_PLUGIN_BEGIN, 1212<br/>AAX_ERROR_PLUGIN_END, 1212<br/>AAX_ERROR_PLUGIN_NOT_AUTHORIZED,<br/></p>
<p>1211<br/>AAX_ERROR_PLUGIN_NULL_PARAMETER,<br/></p>
<p>1211<br/>AAX_ERROR_PORT_ID_OUT_OF_RANGE, 1211<br/>AAX_ERROR_POST_PACKET_FAILED, 1211<br/>AAX_ERROR_PRINT_FAILURE, 1212<br/>AAX_ERROR_PROPERTY_UNDEFINED, 1211<br/>AAX_ERROR_SIGNED_INT_OVERFLOW, 1211<br/>AAX_ERROR_TOD_BEHIND, 1211<br/>AAX_ERROR_UNEXPECTED_EFFECT_ID, 1212<br/>AAX_ERROR_UNIMPLEMENTED, 1210<br/>AAX_ERROR_UNKNOWN_EXCEPTION, 1211<br/>AAX_ERROR_UNKNOWN_ID, 1211<br/>AAX_ERROR_UNKNOWN_PLUGIN, 1211<br/>AAX_ERROR_UNSUPPORTED_ENCODING,<br/></p>
<p>1212<br/>AAX_RESULT_ADD_FIELD_UNSUPPORTED_FIELD_TYPE,<br/></p>
<p>1211<br/>AAX_RESULT_NEW_PACKET_POSTED, 1211<br/>AAX_RESULT_PACKET_STREAM_NOT_EMPTY,<br/></p>
<p>1211<br/>AAX_SUCCESS, 1210<br/></p>
<p>AAX_ESampleRateMask<br/>AAX_Enums.h, 1189<br/></p>
<p>AAX_eSampleRateMask_176400<br/>AAX_Enums.h, 1189<br/></p>
<p>AAX_eSampleRateMask_192000<br/>AAX_Enums.h, 1189<br/></p>
<p>AAX_eSampleRateMask_44100<br/>AAX_Enums.h, 1189<br/></p>
<p>AAX_eSampleRateMask_48000<br/>AAX_Enums.h, 1189<br/></p>
<p>AAX_eSampleRateMask_88200<br/>AAX_Enums.h, 1189<br/></p>
<p>AAX_eSampleRateMask_96000<br/>AAX_Enums.h, 1189<br/></p>
<p>AAX_eSampleRateMask_All<br/>AAX_Enums.h, 1189<br/></p>
<p>AAX_eSampleRateMask_No<br/>AAX_Enums.h, 1189<br/></p>
<p>AAX_EStemFormat<br/>AAX_Enums.h, 1175<br/></p>
<p>AAX_eStemFormat_5_0<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_5_0_2<br/>AAX_Enums.h, 1176<br/></p>
<p>AX_eStemFormat_5_0_4<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_5_1<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_5_1_2<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_5_1_4<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_6_0<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_6_1<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_7_0_2<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_7_0_4<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_7_0_6<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_7_0_DTS<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_7_0_SDDS<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_7_1_2<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_7_1_4<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_7_1_6<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_7_1_DTS<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_7_1_SDDS<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_9_0_4<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_9_0_6<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_9_1_4<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_9_1_6<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_Ambi_1_ACN<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_Ambi_2_ACN<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_Ambi_3_ACN<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_Ambi_4_ACN<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_Ambi_5_ACN<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_Ambi_6_ACN<br/>AAX_Enums.h, 1177<br/></p>
<p>AAX_eStemFormat_Ambi_7_ACN<br/>AAX_Enums.h, 1177<br/></p>
<p>AAX_eStemFormat_Any<br/>AAX_Enums.h, 1177<br/></p>
<p>AAX_eStemFormat_INT32_MAX<br/>AAX_Enums.h, 1177<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1347<br/></b></p>
<p>AAX_eStemFormat_LCR<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_LCRS<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_Mono<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_None<br/>AAX_Enums.h, 1177<br/></p>
<p>AAX_eStemFormat_Quad<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormat_Stereo<br/>AAX_Enums.h, 1176<br/></p>
<p>AAX_eStemFormatNum<br/>AAX_Enums.h, 1177<br/></p>
<p>AAX_ESupportLevel<br/>AAX_Enums.h, 1198<br/></p>
<p>AAX_eSupportLevel_ByProperty<br/>AAX_Enums.h, 1199<br/></p>
<p>AAX_eSupportLevel_Disabled<br/>AAX_Enums.h, 1199<br/></p>
<p>AAX_eSupportLevel_Supported<br/>AAX_Enums.h, 1199<br/></p>
<p>AAX_eSupportLevel_Uninitialized<br/>AAX_Enums.h, 1199<br/></p>
<p>AAX_eSupportLevel_Unsupported<br/>AAX_Enums.h, 1199<br/></p>
<p>AAX_ETargetPlatform<br/>AAX_Enums.h, 1198<br/></p>
<p>AAX_ETextEncoding<br/>AAX_Enums.h, 1199<br/></p>
<p>AAX_eTextEncoding_Num<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTextEncoding_Undefined<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTextEncoding_UTF8<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_ETracePriority<br/>AAX_Assert.h, 1125<br/></p>
<p>AAX_ETracePriorityDSP<br/>AAX_Enums.h, 1173<br/></p>
<p>AAX_eTracePriorityDSP_Assert<br/>AAX_Enums.h, 1173<br/></p>
<p>AAX_eTracePriorityDSP_High<br/>AAX_Enums.h, 1173<br/></p>
<p>AAX_eTracePriorityDSP_Low<br/>AAX_Enums.h, 1173<br/></p>
<p>AAX_eTracePriorityDSP_None<br/>AAX_Enums.h, 1173<br/></p>
<p>AAX_eTracePriorityDSP_Normal<br/>AAX_Enums.h, 1173<br/></p>
<p>AAX_ETracePriorityHost<br/>AAX_Enums.h, 1172<br/></p>
<p>AAX_eTracePriorityHost_Critical<br/>AAX_Enums.h, 1172<br/></p>
<p>AAX_eTracePriorityHost_High<br/>AAX_Enums.h, 1172<br/></p>
<p>AAX_eTracePriorityHost_Low<br/>AAX_Enums.h, 1172<br/></p>
<p>AAX_eTracePriorityHost_Lowest<br/>AAX_Enums.h, 1172<br/></p>
<p>AAX_eTracePriorityHost_None<br/>AAX_Enums.h, 1172<br/></p>
<p>AAX_eTracePriorityHost_Normal<br/>AAX_Enums.h, 1172<br/></p>
<p>AAX_ETransportState<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTransportState_FastForward<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTransportState_Num<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTransportState_Paused<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTransportState_Play<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTransportState_Rewind<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTransportState_Scrub<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTransportState_Shuttle<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTransportState_Stop<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTransportState_Stopping<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_eTransportState_Unknown<br/>AAX_Enums.h, 1200<br/></p>
<p>AAX_EUpdateSource<br/>AAX_Enums.h, 1194<br/></p>
<p>AAX_eUpdateSource_Chunk<br/>AAX_Enums.h, 1194<br/></p>
<p>AAX_eUpdateSource_Delay<br/>AAX_Enums.h, 1194<br/></p>
<p>AAX_eUpdateSource_Parameter<br/>AAX_Enums.h, 1194<br/></p>
<p>AAX_eUpdateSource_Unspecified<br/>AAX_Enums.h, 1194<br/></p>
<p>AAX_EUseAlternateControl<br/>AAX_Enums.h, 1192<br/></p>
<p>AAX_eUseAlternateControl_No<br/>AAX_Enums.h, 1192<br/></p>
<p>AAX_eUseAlternateControl_Yes<br/>AAX_Enums.h, 1192<br/></p>
<p>AAX_EViewContainer_Type<br/>AAX_GUITypes.h, 1221<br/></p>
<p>AAX_eViewContainer_Type_HWND<br/>AAX_GUITypes.h, 1221<br/></p>
<p>AAX_eViewContainer_Type_NSView<br/>AAX_GUITypes.h, 1221<br/></p>
<p>AAX_eViewContainer_Type_NULL<br/>AAX_GUITypes.h, 1221<br/></p>
<p>AAX_eViewContainer_Type_UIView<br/>AAX_GUITypes.h, 1221<br/></p>
<p>AAX_Exception.h, 1212<br/>AAX_CAPTURE, 1214<br/>AAX_CAPTURE_MULT, 1214<br/>AAX_SWALLOW, 1213<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1348 INDEX<br/></b></p>
<p>AAX_SWALLOW_MULT, 1213<br/>AAX_EXPORT<br/></p>
<p>AAX_Exports.cpp, 1216<br/>AAX_Exports.cpp, 1215<br/></p>
<p>AAX_EXPORT, 1216<br/>ACFCanUnloadNow, 1217<br/>ACFGetClassFactory, 1216<br/>ACFGetSDKVersion, 1217<br/>ACFRegisterComponent, 1216<br/>ACFRegisterPlugin, 1216<br/>ACFShutdown, 1217<br/>ACFStartup, 1217<br/></p>
<p>AAX_FastInterpolatedTableLookup&lt; TFLOAT, DFLOAT<br/>&gt;, 667<br/></p>
<p>DoTableLookupExtraFast, 668<br/>DoTableLookupExtraFastMulti, 668<br/>GetMaxMinusMin, 669<br/>GetMin, 668<br/>SetParameters, 667<br/></p>
<p>AAX_FastInterpolatedTableLookup.h, 1218<br/>AAX_FASTINTERPOLATEDTABLELOOKUP_H,<br/></p>
<p>1218<br/>AAX_FastInterpolatedTableLookup.hpp, 1218<br/>AAX_FASTINTERPOLATEDTABLELOOKUP_H<br/></p>
<p>AAX_FastInterpolatedTableLookup.h, 1218<br/>AAX_FastPow.h, 1219<br/></p>
<p>_AAX_FASTPOW_H_, 1219<br/>AAX_Feature_UID<br/></p>
<p>AAX.h, 1115<br/>AAX_UIDs.h, 1295<br/></p>
<p>AAX_FIELD_INDEX<br/>AAX.h, 1111<br/></p>
<p>AAX_FINAL<br/>AAX.h, 1107<br/></p>
<p>AAX_Getting_Started_Guide.doxygen, 1219<br/>AAX_GUITypes.h, 1219<br/></p>
<p>AAX_ENUM_SIZE_CHECK, 1223<br/>AAX_EViewContainer_Type, 1221<br/>AAX_eViewContainer_Type_HWND, 1221<br/>AAX_eViewContainer_Type_NSView, 1221<br/>AAX_eViewContainer_Type_NULL, 1221<br/>AAX_eViewContainer_Type_UIView, 1221<br/>AAX_Point, 1220<br/>AAX_Rect, 1221<br/>operator!=, 1222, 1223<br/>operator&lt;, 1222<br/>operator&lt;=, 1222<br/>operator&gt;, 1222<br/>operator&gt;=, 1222<br/>operator==, 1222, 1223<br/></p>
<p>AAX_HI<br/>AAX_MiscUtils.h, 1255<br/></p>
<p>AAX_HostSupport.doxygen, 1223<br/>AAX_IACFAutomationDelegate, 669<br/></p>
<p>GetTouchState, 671<br/>PostCurrentValue, 671<br/>PostReleaseRequest, 671<br/>PostSetValueRequest, 670<br/></p>
<p>PostTouchRequest, 671<br/>RegisterParameter, 669<br/>UnregisterParameter, 670<br/></p>
<p>AAX_IACFAutomationDelegate.h, 1223<br/>AAX_IACFCollection, 672<br/></p>
<p>AddEffect, 672<br/>AddPackageName, 673<br/>SetManufacturerName, 673<br/>SetPackageVersion, 674<br/>SetProperties, 674<br/></p>
<p>AAX_IACFCollection.h, 1224<br/>AAX_IACFComponentDescriptor, 674<br/></p>
<p>AddAudioBufferLength, 677<br/>AddAudioIn, 676<br/>AddAudioOut, 676<br/>AddAuxOutputStem, 679<br/>AddClock, 678<br/>AddDataInPort, 678<br/>AddDmaInstance, 680<br/>AddMeters, 683<br/>AddMIDINode, 681<br/>AddPrivateData, 680<br/>AddProcessProc_Native, 681<br/>AddProcessProc_TI, 682<br/>AddReservedField, 676<br/>AddSampleRate, 677<br/>AddSideChainIn, 678<br/>Clear, 675<br/></p>
<p>AAX_IACFComponentDescriptor.h, 1224<br/>AAX_IACFComponentDescriptor_V2, 683<br/></p>
<p>AddTemporaryData, 684<br/>AAX_IACFComponentDescriptor_V3, 684<br/></p>
<p>AddProcessProc, 685<br/>AAX_IACFController, 686<br/></p>
<p>ClearMeterClipped, 693<br/>ClearMeterPeakValue, 692<br/>GetCurrentMeterValue, 692<br/>GetCycleCount, 689<br/>GetEffectID, 687<br/>GetInputStemFormat, 688<br/>GetMeterClipped, 693<br/>GetMeterCount, 693<br/>GetMeterPeakValue, 692<br/>GetNextMIDIPacket, 693<br/>GetOutputStemFormat, 688<br/>GetSampleRate, 687<br/>GetSignalLatency, 688<br/>GetTODLocation, 689<br/>PostPacket, 691<br/>SetCycleCount, 690<br/>SetSignalLatency, 690<br/></p>
<p>AAX_IACFController.h, 1224<br/>AAX_IACFController_V2, 694<br/></p>
<p>GetCurrentAutomationTimestamp, 695<br/>GetHostName, 696<br/>GetHybridSignalLatency, 695<br/>SendNotification, 694<br/></p>
<p>AAX_IACFController_V3, 696<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1349<br/></b></p>
<p>GetIsAudioSuite, 697<br/>GetPlugInTargetPlatform, 697<br/></p>
<p>AAX_IACFDataBuffer, 698<br/>Data, 698<br/>Size, 698<br/>Type, 698<br/></p>
<p>AAX_IACFDataBuffer.h, 1225<br/>AAX_IACFDataBuffer_H, 1225<br/></p>
<p>AAX_IACFDataBuffer_H<br/>AAX_IACFDataBuffer.h, 1225<br/></p>
<p>AAX_IACFDescriptionHost, 699<br/>AcquireFeatureProperties, 699<br/></p>
<p>AAX_IACFDescriptionHost.h, 1225<br/>AAX_IACFEffectDescriptor, 700<br/></p>
<p>AddCategory, 701<br/>AddCategoryBypassParameter, 701<br/>AddComponent, 700<br/>AddMeterDescription, 703<br/>AddName, 701<br/>AddProcPtr, 702<br/>AddResourceInfo, 702<br/>SetProperties, 702<br/></p>
<p>AAX_IACFEffectDescriptor.h, 1226<br/>AAX_IACFEffectDescriptor_V2, 703<br/></p>
<p>AddControlMIDINode, 703<br/>AAX_IACFEffectDirectData, 704<br/></p>
<p>Initialize, 705<br/>TimerWakeup, 705<br/>Uninitialize, 705<br/></p>
<p>AAX_IACFEffectDirectData.h, 1226<br/>AAX_IACFEffectDirectData_V2, 706<br/></p>
<p>NotificationReceived, 706<br/>AAX_IACFEffectGUI, 707<br/></p>
<p>Draw, 711<br/>GetCustomLabel, 712<br/>GetViewSize, 710<br/>Initialize, 709<br/>NotificationReceived, 709<br/>ParameterUpdated, 711<br/>SetControlHighlightInfo, 712<br/>SetViewContainer, 710<br/>TimerWakeup, 711<br/>Uninitialize, 709<br/></p>
<p>AAX_IACFEffectGUI.h, 1226<br/>AAX_IACFEffectParameters, 713<br/></p>
<p>CompareActiveChunk, 733<br/>DoMIDITransfers, 735<br/>GenerateCoefficients, 730<br/>GetChunk, 732<br/>GetChunkIDFromIndex, 731<br/>GetChunkSize, 731<br/>GetCustomData, 734<br/>GetMasterBypassParameter, 718<br/>GetNumberOfChunks, 731<br/>GetNumberOfParameters, 718<br/>GetParameter, 722<br/>GetParameterDefaultNormalizedValue, 720<br/>GetParameterIDFromIndex, 723<br/></p>
<p>GetParameterIndex, 723<br/>GetParameterIsAutomatable, 719<br/>GetParameterName, 720<br/>GetParameterNameOfLength, 720<br/>GetParameterNormalizedValue, 726<br/>GetParameterNumberOfSteps, 719<br/>GetParameterOrientation, 722<br/>GetParameterStringFromValue, 725<br/>GetParameterType, 721<br/>GetParameterValueFromString, 724<br/>GetParameterValueInfo, 724<br/>GetParameterValueString, 725<br/>Initialize, 717<br/>NotificationReceived, 717<br/>ReleaseParameter, 728<br/>ResetFieldData, 730<br/>SetChunk, 733<br/>SetCustomData, 734<br/>SetParameterDefaultNormalizedValue, 721<br/>SetParameterNormalizedRelative, 726<br/>SetParameterNormalizedValue, 726<br/>TimerWakeup, 733<br/>TouchParameter, 727<br/>Uninitialize, 717<br/>UpdateParameterNormalizedRelative, 729<br/>UpdateParameterNormalizedValue, 729<br/>UpdateParameterTouch, 728<br/></p>
<p>AAX_IACFEffectParameters.h, 1227<br/>AAX_IACFEffectParameters_V2, 735<br/></p>
<p>UpdateControlMIDINodes, 736<br/>UpdateMIDINodes, 736<br/></p>
<p>AAX_IACFEffectParameters_V3, 737<br/>AAX_IACFEffectParameters_V4, 738<br/></p>
<p>UpdatePageTable, 738<br/>AAX_IACFFeatureInfo, 739<br/></p>
<p>AcquireProperties, 740<br/>SupportLevel, 740<br/></p>
<p>AAX_IACFFeatureInfo.h, 1227<br/>AAX_IACFHostProcessor, 741<br/></p>
<p>AnalyzeAudio, 745<br/>Initialize, 742<br/>InitOutputBounds, 742<br/>PostAnalyze, 746<br/>PostRender, 744<br/>PreAnalyze, 745<br/>PreRender, 744<br/>RenderAudio, 743<br/>SetLocation, 743<br/>Uninitialize, 742<br/></p>
<p>AAX_IACFHostProcessor.h, 1228<br/>AAX_IACFHostProcessor_V2, 746<br/></p>
<p>GetClipNameSuffix, 747<br/>AAX_IACFHostProcessorDelegate, 747<br/></p>
<p>GetAudio, 748<br/>GetSideChainInputNum, 749<br/></p>
<p>AAX_IACFHostProcessorDelegate.h, 1228<br/>AAX_IACFHostProcessorDelegate_V2, 749<br/></p>
<p>ForceAnalyze, 749<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1350 INDEX<br/></b></p>
<p>AAX_IACFHostProcessorDelegate_V3, 750<br/>ForceProcess, 750<br/></p>
<p>AAX_IACFHostServices, 750<br/>Assert, 751<br/>Trace, 751<br/></p>
<p>AAX_IACFHostServices.h, 1228<br/>AAX_IACFHostServices_V2, 752<br/></p>
<p>StackTrace, 752<br/>AAX_IACFHostServices_V3, 753<br/></p>
<p>HandleAssertFailure, 753<br/>AAX_IACFPageTable, 754<br/></p>
<p>Clear, 754<br/>ClearMappedParameter, 756<br/>Empty, 754<br/>GetMappedParameterID, 757<br/>GetNumMappedParameterIDs, 756<br/>GetNumPages, 755<br/>InsertPage, 755<br/>MapParameterID, 757<br/>RemovePage, 755<br/></p>
<p>AAX_IACFPageTable.h, 1229<br/>AAX_IACFPageTable_V2, 758<br/></p>
<p>ClearNameVariationsForParameter, 762<br/>ClearParameterNameVariations, 762<br/>GetNameVariationParameterIDAtIndex, 759<br/>GetNumNameVariationsForParameter, 759<br/>GetNumParametersWithNameVariations, 758<br/>GetParameterNameVariationAtIndex, 760<br/>GetParameterNameVariationOfLength, 761<br/>SetParameterNameVariation, 763<br/></p>
<p>AAX_IACFPageTableController, 763<br/>CopyTableForEffect, 764<br/>CopyTableOfLayoutForEffect, 765<br/></p>
<p>AAX_IACFPageTableController.h, 1229<br/>AAX_IACFPageTableController_V2, 766<br/></p>
<p>CopyTableForEffectFromFile, 766<br/>CopyTableOfLayoutFromFile, 767<br/></p>
<p>AAX_IACFPrivateDataAccess, 768<br/>ReadPortDirect, 768<br/>WritePortDirect, 769<br/></p>
<p>AAX_IACFPrivateDataAccess.h, 1229<br/>AAX_IACFPropertyMap, 769<br/></p>
<p>AddProperty, 770<br/>GetProperty, 770<br/>RemoveProperty, 771<br/></p>
<p>AAX_IACFPropertyMap.h, 1230<br/>AAX_IACFPropertyMap_V2, 771<br/></p>
<p>AddPropertyWithIDArray, 771<br/>GetPropertyWithIDArray, 772<br/></p>
<p>AAX_IACFPropertyMap_V3, 772<br/>AddProperty64, 773<br/>GetProperty64, 773<br/></p>
<p>AAX_IACFSessionDocument, 773<br/>GetDocumentData, 774<br/></p>
<p>AAX_IACFSessionDocument.h, 1230<br/>AAX_IACFSessionDocument_H, 1230<br/></p>
<p>AAX_IACFSessionDocument_H<br/>AAX_IACFSessionDocument.h, 1230<br/></p>
<p>AAX_IACFSessionDocumentClient, 775<br/>Initialize, 775<br/>NotificationReceived, 776<br/>SetSessionDocument, 776<br/>Uninitialize, 775<br/></p>
<p>AAX_IACFSessionDocumentClient.h, 1231<br/>AAX_IACFSessionDocumentClient_H, 1231<br/></p>
<p>AAX_IACFSessionDocumentClient_H<br/>AAX_IACFSessionDocumentClient.h, 1231<br/></p>
<p>AAX_IACFTask, 777<br/>AddResult, 779<br/>GetArgumentOfType, 778<br/>GetProgress, 778<br/>GetType, 777<br/>SetDone, 779<br/>SetProgress, 778<br/></p>
<p>AAX_IACFTask.h, 1231<br/>AAX_IACFTask_H, 1232<br/></p>
<p>AAX_IACFTask_H<br/>AAX_IACFTask.h, 1232<br/></p>
<p>AAX_IACFTaskAgent, 780<br/>AddTask, 781<br/>CancelAllTasks, 781<br/>Initialize, 780<br/>Uninitialize, 781<br/></p>
<p>AAX_IACFTaskAgent.h, 1232<br/>AAX_IACFTaskAgent_H, 1232<br/></p>
<p>AAX_IACFTaskAgent_H<br/>AAX_IACFTaskAgent.h, 1232<br/></p>
<p>AAX_IACFTransport, 781<br/>GetBarBeatPosition, 785<br/>GetCurrentLoopPosition, 784<br/>GetCurrentMeter, 783<br/>GetCurrentNativeSampleLocation, 784<br/>GetCurrentTempo, 782<br/>GetCurrentTickPosition, 783<br/>GetCurrentTicksPerBeat, 786<br/>GetCustomTickPosition, 785<br/>GetTicksPerQuarter, 785<br/>IsTransportPlaying, 783<br/></p>
<p>AAX_IACFTransport.h, 1232<br/>AAX_IACFTransport_V2, 786<br/></p>
<p>GetFeetFramesInfo, 787<br/>GetTimeCodeInfo, 787<br/>GetTimelineSelectionStartPosition, 787<br/>IsMetronomeEnabled, 788<br/></p>
<p>AAX_IACFTransport_V3, 788<br/>GetHDTimeCodeInfo, 789<br/></p>
<p>AAX_IACFTransport_V4, 789<br/>GetTimelineSelectionEndPosition, 789<br/></p>
<p>AAX_IACFTransport_V5, 790<br/>GetKeySignature, 790<br/></p>
<p>AAX_IACFTransportControl, 791<br/>RequestTransportStart, 792<br/>RequestTransportStop, 792<br/></p>
<p>AAX_IACFTransportControl.h, 1233<br/>AAX_IACFViewContainer, 792<br/></p>
<p>GetModifiers, 793<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1351<br/></b></p>
<p>GetPtr, 793<br/>GetType, 793<br/>HandleParameterMouseDown, 794<br/>HandleParameterMouseDrag, 794<br/>HandleParameterMouseUp, 795<br/>SetViewSize, 794<br/></p>
<p>AAX_IACFViewContainer.h, 1233<br/>AAX_IACFViewContainer_V2, 795<br/></p>
<p>HandleMultipleParametersMouseDown, 796<br/>HandleMultipleParametersMouseDrag, 796<br/>HandleMultipleParametersMouseUp, 797<br/></p>
<p>AAX_IACFViewContainer_V3, 797<br/>HandleParameterMouseEnter, 798<br/>HandleParameterMouseExit, 798<br/></p>
<p>AAX_IAutomationDelegate, 799<br/>&#8764;AAX_IAutomationDelegate, 799<br/>GetTouchState, 802<br/>ParameterNameChanged, 802<br/>PostCurrentValue, 801<br/>PostReleaseRequest, 801<br/>PostSetValueRequest, 800<br/>PostTouchRequest, 801<br/>RegisterParameter, 799<br/>UnregisterParameter, 800<br/></p>
<p>AAX_IAutomationDelegate.h, 1234<br/>AAX_ICollection, 803<br/></p>
<p>&#8764;AAX_ICollection, 804<br/>AddEffect, 804<br/>AddPackageName, 805<br/>DescriptionHost, 807<br/>GetHostVersion, 806<br/>HostDefinition, 807<br/>NewDescriptor, 804<br/>NewPropertyMap, 806<br/>SetManufacturerName, 804<br/>SetPackageVersion, 805<br/>SetProperties, 806<br/></p>
<p>AAX_ICollection.h, 1234<br/>AAX_IComponentDescriptor, 808<br/></p>
<p>&#8764;AAX_IComponentDescriptor, 810<br/>AddAudioBufferLength, 811<br/>AddAudioIn, 810<br/>AddAudioOut, 811<br/>AddAuxOutputStem, 814<br/>AddClock, 812<br/>AddDataInPort, 813<br/>AddDmaInstance, 815<br/>AddMeters, 816<br/>AddMIDINode, 817<br/>AddPrivateData, 814<br/>AddProcessProc, 821<br/>AddProcessProc_Native, 818, 822<br/>AddProcessProc_TI, 820<br/>AddReservedField, 817<br/>AddSampleRate, 812<br/>AddSideChainIn, 813<br/>AddTemporaryData, 815<br/>Clear, 810<br/></p>
<p>DuplicatePropertyMap, 818<br/>NewPropertyMap, 818<br/></p>
<p>AAX_IComponentDescriptor.h, 1234<br/>AAX_IContainer, 823<br/>&#8764;AAX_IContainer, 823<br/>Clear, 824<br/>EStatus, 823<br/>eStatus_NotInitialized, 823<br/>eStatus_Overflow, 823<br/>eStatus_Success, 823<br/>eStatus_Unavailable, 823<br/>eStatus_Unsupported, 823<br/></p>
<p>AAX_IContainer.h, 1235<br/>AAX_IController, 824<br/>&#8764;AAX_IController, 826<br/>ClearMeterClipped, 834<br/>ClearMeterPeakValue, 833<br/>CreateTableCopyForEffect, 836<br/>CreateTableCopyForEffectFromFile, 839<br/>CreateTableCopyForLayout, 837<br/>CreateTableCopyForLayoutFromFile, 839<br/>GetCurrentAutomationTimestamp, 835<br/>GetCurrentMeterValue, 833<br/>GetCycleCount, 828<br/>GetEffectID, 827<br/>GetHostName, 835<br/>GetInputStemFormat, 827<br/>GetIsAudioSuite, 836<br/>GetMeterClipped, 834<br/>GetMeterCount, 834<br/>GetMeterPeakValue, 833<br/>GetNextMIDIPacket, 835<br/>GetOutputStemFormat, 827<br/>GetPlugInTargetPlatform, 836<br/>GetSampleRate, 827<br/>GetSignalLatency, 828<br/>GetTODLocation, 829<br/>PostPacket, 831<br/>SendNotification, 832<br/>SetCycleCount, 830<br/>SetSignalLatency, 829<br/></p>
<p>AAX_IController.h, 1235<br/>AAX_IDataBuffer, 840<br/></p>
<p>AAX_DELETE, 841<br/>AAX_OVERRIDE, 841<br/>ACF_DECLARE_STANDARD_UNKNOWN, 841<br/></p>
<p>AAX_IDataBuffer.h, 1235<br/>AAX_IDataBuffer_H, 1236<br/></p>
<p>AAX_IDataBuffer_H<br/>AAX_IDataBuffer.h, 1236<br/></p>
<p>AAX_IDataBufferWrapper, 841<br/>&#8764;AAX_IDataBufferWrapper, 842<br/>Data, 842<br/>Size, 842<br/>Type, 842<br/></p>
<p>AAX_IDataBufferWrapper.h, 1236<br/>AAX_IDATABUFFERWRAPPER_H, 1236<br/></p>
<p>AAX_IDATABUFFERWRAPPER_H<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1352 INDEX<br/></b></p>
<p>AAX_IDataBufferWrapper.h, 1236<br/>AAX_IDescriptionHost, 843<br/></p>
<p>&#8764;AAX_IDescriptionHost, 843<br/>AcquireFeatureProperties, 843<br/></p>
<p>AAX_IDescriptionHost.h, 1236<br/>AAX_IDisplayDelegate&lt; T &gt;, 844<br/></p>
<p>Clone, 846<br/>StringToValue, 848<br/>ValueToString, 846, 847<br/></p>
<p>AAX_IDisplayDelegate.h, 1237<br/>AAX_IDisplayDelegateBase, 848<br/></p>
<p>&#8764;AAX_IDisplayDelegateBase, 849<br/>AAX_IDisplayDelegateDecorator<br/></p>
<p>AAX_IDisplayDelegateDecorator&lt; T &gt;, 850<br/>AAX_IDisplayDelegateDecorator&lt; T &gt;, 849<br/></p>
<p>&#8764;AAX_IDisplayDelegateDecorator, 851<br/>AAX_IDisplayDelegateDecorator, 850<br/>Clone, 851<br/>StringToValue, 853<br/>ValueToString, 851, 852<br/></p>
<p>AAX_IDisplayDelegateDecorator.h, 1237<br/>AAX_IDma, 853<br/></p>
<p>&#8764;AAX_IDma, 856<br/>EMode, 856<br/>eMode_Burst, 856<br/>eMode_Error, 856<br/>eMode_Gather, 856<br/>eMode_Scatter, 856<br/>EState, 855<br/>eState_Complete, 856<br/>eState_Error, 856<br/>eState_Init, 856<br/>eState_Pending, 856<br/>eState_Running, 856<br/>GetBaseOffset, 863<br/>GetBurstLength, 859<br/>GetDmaMode, 858<br/>GetDmaState, 857<br/>GetDst, 859<br/>GetFifoBuffer, 861<br/>GetFifoSize, 863<br/>GetLinearBuffer, 861<br/>GetNumBursts, 860<br/>GetNumOffsets, 862<br/>GetOffsetTable, 862<br/>GetSrc, 858<br/>GetTransferSize, 860<br/>IsTransferComplete, 857<br/>PostRequest, 856<br/>SetBaseOffset, 863<br/>SetBurstLength, 859<br/>SetDmaState, 857<br/>SetDst, 858<br/>SetFifoBuffer, 860<br/>SetFifoSize, 863<br/>SetLinearBuffer, 861<br/>SetNumBursts, 859<br/>SetNumOffsets, 862<br/></p>
<p>SetOffsetTable, 861<br/>SetSrc, 858<br/>SetTransferSize, 860<br/></p>
<p>AAX_IDma.h, 1237<br/>AAX_DMA_API, 1238<br/>AAX_IDMA_H, 1238<br/></p>
<p>AAX_IDMA_H<br/>AAX_IDma.h, 1238<br/></p>
<p>AAX_IEffectDescriptor, 864<br/>&#8764;AAX_IEffectDescriptor, 865<br/>AddCategory, 866<br/>AddCategoryBypassParameter, 866<br/>AddComponent, 865<br/>AddControlMIDINode, 868<br/>AddMeterDescription, 868<br/>AddName, 865<br/>AddProcPtr, 867<br/>AddResourceInfo, 867<br/>NewComponentDescriptor, 865<br/>NewPropertyMap, 867<br/>SetProperties, 867<br/></p>
<p>AAX_IEffectDescriptor.h, 1238<br/>AAX_IEffectDirectData, 869<br/></p>
<p>AAX_DELETE, 870<br/>ACF_DECLARE_STANDARD_UNKNOWN, 870<br/>override, 870<br/></p>
<p>AAX_IEffectDirectData.h, 1238<br/>AAX_IEffectGUI, 870<br/></p>
<p>AAX_DELETE, 871<br/>ACF_DECLARE_STANDARD_UNKNOWN, 871<br/>override, 871<br/></p>
<p>AAX_IEffectGUI.h, 1239<br/>AAX_IEffectParameters, 872<br/></p>
<p>AAX_DELETE, 874<br/>ACF_DECLARE_STANDARD_UNKNOWN, 873<br/>override, 874<br/></p>
<p>AAX_IEffectParameters.h, 1239<br/>AAX_IFeatureInfo, 874<br/>&#8764;AAX_IFeatureInfo, 874<br/>AcquireProperties, 875<br/>ID, 875<br/>SupportLevel, 875<br/></p>
<p>AAX_IFeatureInfo.h, 1240<br/>AAX_IHostProcessor, 876<br/></p>
<p>AAX_DELETE, 877<br/>ACF_DECLARE_STANDARD_UNKNOWN, 876<br/>override, 877<br/></p>
<p>AAX_IHostProcessor.h, 1240<br/>AAX_IHostProcessorDelegate, 877<br/>&#8764;AAX_IHostProcessorDelegate, 878<br/>ForceAnalyze, 879<br/>ForceProcess, 879<br/>GetAudio, 878<br/>GetSideChainInputNum, 879<br/></p>
<p>AAX_IHostProcessorDelegate.h, 1240<br/>AAX_IHostServices, 880<br/>&#8764;AAX_IHostServices, 880<br/>HandleAssertFailure, 881<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1353<br/></b></p>
<p>StackTrace, 882<br/>Trace, 881<br/></p>
<p>AAX_IHostServices.h, 1240<br/>AAX_IHostTaskAgent, 882<br/></p>
<p>&#8764;AAX_IHostTaskAgent, 883<br/>AddTask, 883<br/>CancelAllTasks, 883<br/>Initialize, 883<br/>Uninitialize, 883<br/></p>
<p>AAX_IHostTaskAgent.h, 1241<br/>AAX_IHostTaskAgent_H, 1241<br/></p>
<p>AAX_IHostTaskAgent_H<br/>AAX_IHostTaskAgent.h, 1241<br/></p>
<p>AAX_IMIDIMessageInfoDelegate, 884<br/>&#8764;AAX_IMIDIMessageInfoDelegate, 884<br/>Accepts, 885<br/>Accepts_ExactStatus, 885<br/>Length, 885<br/>Mask, 884<br/>ToString, 885<br/>ToString_AppendByteRange, 886<br/>ToString_AppendCStr, 886<br/>ToString_AppendNumber, 885<br/>ToString_AppendValid, 886<br/></p>
<p>AAX_IMIDINode, 887<br/>&#8764;AAX_IMIDINode, 887<br/>GetNodeBuffer, 887<br/>GetTransport, 888<br/>PostMIDIPacket, 887<br/></p>
<p>AAX_IMIDINode.h, 1241<br/>AAX_Init.h, 1242<br/></p>
<p>AAXCanUnloadNow, 1243<br/>AAXGetClassFactory, 1243<br/>AAXGetSDKVersion, 1244<br/>AAXRegisterComponent, 1242<br/>AAXShutdown, 1244<br/>AAXStartup, 1243<br/></p>
<p>AAX_InstrumentParameters.doxygen, 1245<br/>AAX_INT16_MAX<br/></p>
<p>AAX_Enums.h, 1170<br/>AAX_INT16_MIN<br/></p>
<p>AAX_Enums.h, 1170<br/>AAX_INT32_MAX<br/></p>
<p>AAX_Enums.h, 1170<br/>AAX_INT32_MIN<br/></p>
<p>AAX_Enums.h, 1170<br/>AAX_INT_HI<br/></p>
<p>AAX_MiscUtils.h, 1255<br/>AAX_INT_LO<br/></p>
<p>AAX_MiscUtils.h, 1255<br/>AAX_InterfaceList.doxygen, 1245<br/>AAX_IPacketHandler, 888<br/></p>
<p>&#8764;AAX_IPacketHandler, 889<br/>Call, 889<br/>Clone, 889<br/></p>
<p>AAX_IPageTable, 890<br/>&#8764;AAX_IPageTable, 891<br/>Clear, 891<br/></p>
<p>ClearMappedParameter, 893<br/>ClearNameVariationsForParameter, 898<br/>ClearParameterNameVariations, 898<br/>Empty, 891<br/>GetMappedParameterID, 894<br/>GetNameVariationParameterIDAtIndex, 895<br/>GetNumMappedParameterIDs, 893<br/>GetNumNameVariationsForParameter, 896<br/>GetNumPages, 891<br/>GetNumParametersWithNameVariations, 895<br/>GetParameterNameVariationAtIndex, 896<br/>GetParameterNameVariationOfLength, 897<br/>InsertPage, 892<br/>MapParameterID, 894<br/>RemovePage, 892<br/>SetParameterNameVariation, 899<br/></p>
<p>AAX_IPageTable.h, 1245<br/>AAX_IParameter, 900<br/>&#8764;AAX_IParameter, 902<br/>AddShortenedName, 904<br/>Automatable, 905<br/>ClearShortenedNames, 904<br/>CloneValue, 903<br/>GetBoolFromNormalizedValue, 911<br/>GetDoubleFromNormalizedValue, 913<br/>GetFloatFromNormalizedValue, 912<br/>GetInt32FromNormalizedValue, 912<br/>GetNormalizedDefaultValue, 906<br/>GetNormalizedValue, 906<br/>GetNormalizedValueFromBool, 909<br/>GetNormalizedValueFromDouble, 911<br/>GetNormalizedValueFromFloat, 910<br/>GetNormalizedValueFromInt32, 910<br/>GetNormalizedValueFromStep, 908<br/>GetNormalizedValueFromString, 911<br/>GetNumberOfSteps, 907<br/>GetOrientation, 920<br/>GetStepValue, 907<br/>GetStepValueFromNormalizedValue, 908<br/>GetStringFromNormalizedValue, 913, 914<br/>GetType, 919<br/>GetValueAsBool, 915<br/>GetValueAsDouble, 916<br/>GetValueAsFloat, 915<br/>GetValueAsInt32, 915<br/>GetValueAsString, 916<br/>GetValueString, 908, 909<br/>Identifier, 903<br/>Name, 904<br/>Release, 905<br/>SetAutomationDelegate, 905<br/>SetDisplayDelegate, 920<br/>SetName, 903<br/>SetNormalizedDefaultValue, 906<br/>SetNormalizedValue, 906<br/>SetNumberOfSteps, 907<br/>SetOrientation, 919<br/>SetStepValue, 908<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1354 INDEX<br/></b></p>
<p>SetTaperDelegate, 920<br/>SetToDefaultValue, 907<br/>SetType, 919<br/>SetValueFromString, 914<br/>SetValueWithBool, 917<br/>SetValueWithDouble, 918<br/>SetValueWithFloat, 918<br/>SetValueWithInt32, 917<br/>SetValueWithString, 918<br/>ShortenedName, 904<br/>Touch, 905<br/>UpdateNormalizedValue, 921<br/></p>
<p>AAX_IParameter.h, 1245<br/>AAX_IParameterValue, 921<br/></p>
<p>&#8764;AAX_IParameterValue, 922<br/>Clone, 922<br/>GetValueAsBool, 923<br/>GetValueAsDouble, 924<br/>GetValueAsFloat, 924<br/>GetValueAsInt32, 923<br/>GetValueAsString, 924<br/>Identifier, 922<br/></p>
<p>AAX_IPointerQueue&lt; T &gt;, 925<br/>&#8764;AAX_IPointerQueue, 926<br/>Clear, 926<br/>Peek, 927<br/>Pop, 927<br/>Push, 926<br/>template_type, 926<br/>value_type, 926<br/></p>
<p>AAX_IPointerQueue.h, 1245<br/>AAX_IPrivateDataAccess, 928<br/></p>
<p>&#8764;AAX_IPrivateDataAccess, 928<br/>ReadPortDirect, 928<br/>WritePortDirect, 929<br/></p>
<p>AAX_IPrivateDataAccess.h, 1246<br/>AAX_IPropertyMap, 929<br/></p>
<p>&#8764;AAX_IPropertyMap, 930<br/>AddPointerProperty, 932<br/>AddProperty, 931<br/>AddPropertyWithIDArray, 933<br/>GetIUnknown, 934<br/>GetPointerProperty, 931<br/>GetProperty, 931<br/>GetPropertyWithIDArray, 933<br/>RemoveProperty, 933<br/></p>
<p>AAX_IPropertyMap.h, 1246<br/>AAX_ISessionDocument, 934<br/></p>
<p>&#8764;AAX_ISessionDocument, 935<br/>GetDocumentData, 935<br/>GetTempoMap, 935<br/>Valid, 935<br/></p>
<p>AAX_ISessionDocument.h, 1246<br/>AAX_ISessionDocument_H, 1247<br/></p>
<p>AAX_ISessionDocument::TempoMap, 1099<br/>&#8764;TempoMap, 1099<br/>Data, 1100<br/>Size, 1100<br/></p>
<p>AAX_ISessionDocument_H<br/>AAX_ISessionDocument.h, 1247<br/></p>
<p>AAX_ISessionDocumentClient, 936<br/>AAX_DELETE, 937<br/>ACF_DECLARE_STANDARD_UNKNOWN, 937<br/>override, 937<br/></p>
<p>AAX_ISessionDocumentClient.h, 1247<br/>AAX_ISessionDocumentClient_H, 1247<br/></p>
<p>AAX_ISessionDocumentClient_H<br/>AAX_ISessionDocumentClient.h, 1247<br/></p>
<p>AAX_IString, 937<br/>&#8764;AAX_IString, 938<br/>Get, 938<br/>Length, 938<br/>MaxLength, 938<br/>operator=, 939<br/>Set, 939<br/></p>
<p>AAX_IString.h, 1248<br/>AAX_ITaperDelegate&lt; T &gt;, 939<br/></p>
<p>Clone, 940<br/>ConstrainRealValue, 941<br/>GetMaximumValue, 940<br/>GetMinimumValue, 941<br/>NormalizedToReal, 941<br/>RealToNormalized, 942<br/></p>
<p>AAX_ITaperDelegate.h, 1248<br/>AAX_ITaperDelegateBase, 942<br/>&#8764;AAX_ITaperDelegateBase, 943<br/></p>
<p>AAX_ITask, 944<br/>&#8764;AAX_ITask, 945<br/>AddResult, 946<br/>GetArgumentOfType, 945<br/>GetProgress, 946<br/>GetType, 945<br/>SetDone, 946<br/>SetProgress, 945<br/></p>
<p>AAX_ITask.h, 1248<br/>AAX_ITask_H, 1249<br/></p>
<p>AAX_ITask_H<br/>AAX_ITask.h, 1249<br/></p>
<p>AAX_ITaskAgent, 947<br/>AAX_DELETE, 948<br/>AAX_OVERRIDE, 948<br/>ACF_DECLARE_STANDARD_UNKNOWN, 948<br/></p>
<p>AAX_ITaskAgent.h, 1249<br/>AAX_ITransport, 948<br/>&#8764;AAX_ITransport, 949<br/>GetBarBeatPosition, 953<br/>GetCurrentLoopPosition, 951<br/>GetCurrentMeter, 950<br/>GetCurrentNativeSampleLocation, 952<br/>GetCurrentTempo, 950<br/>GetCurrentTickPosition, 951<br/>GetCurrentTicksPerBeat, 954<br/>GetCustomTickPosition, 952<br/>GetFeetFramesInfo, 955<br/>GetHDTimeCodeInfo, 955<br/>GetKeySignature, 957<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1355<br/></b></p>
<p>GetTicksPerQuarter, 953<br/>GetTimeCodeInfo, 954<br/>GetTimelineSelectionEndPosition, 956<br/>GetTimelineSelectionStartPosition, 954<br/>IsMetronomeEnabled, 955<br/>IsTransportPlaying, 951<br/>RequestTransportStart, 956<br/>RequestTransportStop, 956<br/></p>
<p>AAX_ITransport.h, 1249<br/>AAX_IViewContainer, 957<br/></p>
<p>&#8764;AAX_IViewContainer, 959<br/>GetModifiers, 959<br/>GetPtr, 959<br/>GetType, 959<br/>HandleMultipleParametersMouseDown, 962<br/>HandleMultipleParametersMouseDrag, 962<br/>HandleMultipleParametersMouseUp, 963<br/>HandleParameterMouseDown, 960<br/>HandleParameterMouseDrag, 960<br/>HandleParameterMouseEnter, 961<br/>HandleParameterMouseExit, 962<br/>HandleParameterMouseUp, 961<br/>SetViewSize, 960<br/></p>
<p>AAX_IViewContainer.h, 1249<br/>AAX_LIMIT<br/></p>
<p>AAX_SliderConversions.h, 1286<br/>AAX_LinkedParameters.doxygen, 1250<br/>AAX_LittleEndianNativeSwap<br/></p>
<p>AAX_EndianSwap.h, 1160<br/>AAX_LittleEndianNativeSwapInPlace<br/></p>
<p>AAX_EndianSwap.h, 1159<br/>AAX_LittleEndianNativeSwapSequenceInPlace<br/></p>
<p>AAX_EndianSwap.h, 1160<br/>AAX_LO<br/></p>
<p>AAX_MiscUtils.h, 1255<br/>AAX_Map, 964<br/></p>
<p>&#8764;AAX_Map, 964<br/>AAX_Map, 964<br/>GetCoefficient, 964<br/>GetFirstX, 965<br/>GetFirstY, 965<br/>GetLastX, 965<br/>GetLastY, 965<br/>GetSize, 966<br/>GetUpperBoundIndex, 965<br/>GetX, 965<br/>GetY, 965<br/>SetCoefficients, 964<br/></p>
<p>AAX_Map.h, 1250<br/>AAX_MAP_H, 1250<br/></p>
<p>AAX_MAP_H<br/>AAX_Map.h, 1250<br/></p>
<p>AAX_Media_Composer_Guide.doxygen, 1251<br/>AAX_MIDILogging.cpp, 1251<br/>AAX_MIDILogging.h, 1251<br/>AAX_MIDIUtilities.h, 1251<br/>AAX_MiscUtils.h, 1253<br/></p>
<p>AAX_ALIGNMENT_HINT, 1254<br/></p>
<p>AAX_DWORD_ALIGNED_HINT, 1255<br/>AAX_HI, 1255<br/>AAX_INT_HI, 1255<br/>AAX_INT_LO, 1255<br/>AAX_LO, 1255<br/>AAX_MISCUTILS_H, 1254<br/>AAX_WORD_ALIGNED_HINT, 1254<br/></p>
<p>AAX_MISCUTILS_H<br/>AAX_MiscUtils.h, 1254<br/></p>
<p>AAX_OtherExtensions.doxygen, 1256<br/>AAX_OVERRIDE<br/></p>
<p>AAX.h, 1106<br/>AAX_CTask, 656<br/>AAX_IDataBuffer, 841<br/>AAX_ITaskAgent, 948<br/></p>
<p>AAX_Page_Table_Guide.doxygen, 1256<br/>AAX_PageTableUtilities.h, 1256<br/>AAX_ParameterAutomation.doxygen, 1256<br/>AAX_ParameterManager.doxygen, 1256<br/>AAX_ParameterUpdateProtocol.doxygen, 1256<br/>AAX_ParameterUpdateTiming.doxygen, 1256<br/>AAX_PlatformOptimizationConstants.h, 1256<br/></p>
<p>AAX_PLATFORMOPTIMIZATIONCONSTANTS_H,<br/>1257<br/></p>
<p>AAX_PLATFORMOPTIMIZATIONCONSTANTS_H<br/>AAX_PlatformOptimizationConstants.h, 1257<br/></p>
<p>AAX_PlugInBundleLocation.h, 1257<br/>AAX_Point, 966<br/></p>
<p>AAX_GUITypes.h, 1220<br/>AAX_Point, 966<br/>horz, 967<br/>vert, 967<br/></p>
<p>AAX_PointerSize<br/>AAX.h, 1109<br/></p>
<p>AAX_PopStructAlignment.h, 1257<br/>AAX_PostStructAlignmentHelper.h, 1258<br/>AAX_PREPROCESSOR_CONCAT<br/></p>
<p>AAX.h, 1111<br/>AAX_PREPROCESSOR_CONCAT_HELPER<br/></p>
<p>AAX.h, 1111<br/>AAX_PreStructAlignmentHelper.h, 1258<br/>AAX_Pro_Tools_Guide.doxygen, 1258<br/>AAX_Properties.h, 1258<br/></p>
<p>AAX_ENUM_SIZE_CHECK, 1278<br/>AAX_EProperty, 1260<br/>AAX_eProperty_AllowPreviewWithoutAnalysis,<br/></p>
<p>1270<br/>AAX_eProperty_AlwaysBypass, 1269<br/>AAX_eProperty_AudioBufferLength, 1266<br/>AAX_eProperty_AudiosuitePropsBase, 1269<br/>AAX_eProperty_CanBypass, 1268<br/>AAX_eProperty_Constraint_AlwaysProcess, 1277<br/>AAX_eProperty_Constraint_DoNotApplyDefaultSettings,<br/></p>
<p>1277<br/>AAX_eProperty_Constraint_Location, 1274<br/>AAX_eProperty_Constraint_MultiMonoSupport,<br/></p>
<p>1275<br/>AAX_eProperty_Constraint_NeverCache, 1274<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1356 INDEX<br/></b></p>
<p>AAX_eProperty_Constraint_NeverUnload, 1274<br/>AAX_eProperty_Constraint_Topology, 1274<br/>AAX_eProperty_ConstraintBase, 1274<br/>AAX_eProperty_ConstraintBase_2, 1276<br/>AAX_eProperty_ContinuousOnly, 1271<br/>AAX_eProperty_DebugPropertiesBase, 1277<br/>AAX_eProperty_Deprecated_DSP_Plugin_List,<br/></p>
<p>1264<br/>AAX_eProperty_Deprecated_Native_Plugin_List,<br/></p>
<p>1265<br/>AAX_eProperty_Deprecated_Plugin_List, 1264<br/>AAX_eProperty_DestinationTrack, 1271<br/>AAX_eProperty_DisableAudioSuiteReverse, 1273<br/>AAX_eProperty_DisableHandles, 1272<br/>AAX_eProperty_DisablePreview, 1272<br/>AAX_eProperty_DoesntIncrOutputSample, 1272<br/>AAX_eProperty_DSP_AudioBufferLength, 1266<br/>AAX_eProperty_EnableHostDebugLogs, 1278<br/>AAX_eProperty_ExternalProcessorTypeID, 1265<br/>AAX_eProperty_FeaturesBase, 1275<br/>AAX_eProperty_GeneralPropsBase, 1266<br/>AAX_eProperty_GUIBase, 1273<br/>AAX_eProperty_HybridInputStemFormat, 1269<br/>AAX_eProperty_HybridOutputStemFormat, 1269<br/>AAX_eProperty_InputStemFormat, 1266<br/>AAX_eProperty_LatencyContribution, 1267<br/>AAX_eProperty_ManufacturerID, 1261<br/>AAX_eProperty_MaxASProp, 1273<br/>AAX_eProperty_MaxCap, 1278<br/>AAX_eProperty_MaxConstraintProp, 1275<br/>AAX_eProperty_MaxConstraintProp_2, 1277<br/>AAX_eProperty_MaxFeaturesProp, 1276<br/>AAX_eProperty_MaxGUIProp, 1273<br/>AAX_eProperty_MaxMeterProp, 1274<br/>AAX_eProperty_MaxProp, 1278<br/>AAX_eProperty_Meter_Ballistics, 1274<br/>AAX_eProperty_Meter_Orientation, 1274<br/>AAX_eProperty_Meter_Type, 1273<br/>AAX_eProperty_MeterBase, 1273<br/>AAX_eProperty_MinProp, 1261<br/>AAX_eProperty_MultiInputModeOnly, 1271<br/>AAX_eProperty_NativeBackgroundProc, 1266<br/>AAX_eProperty_NativeInstanceInitProc, 1265<br/>AAX_eProperty_NativeProcessProc, 1265<br/>AAX_eProperty_NeedsOutputDithered, 1273<br/>AAX_eProperty_NoID, 1261<br/>AAX_eProperty_NumberOfInputs, 1272<br/>AAX_eProperty_NumberOfOutputs, 1272<br/>AAX_eProperty_ObservesTransportState, 1276<br/>AAX_eProperty_OptionalAnalysis, 1270<br/>AAX_eProperty_OutputStemFormat, 1266<br/>AAX_eProperty_PlugInID_AudioSuite, 1262<br/>AAX_eProperty_PlugInID_Deprecated, 1264<br/>AAX_eProperty_PlugInID_ExternalProcessor,<br/></p>
<p>1265<br/>AAX_eProperty_PlugInID_Native, 1262<br/>AAX_eProperty_PlugInID_NoProcessing, 1263<br/>AAX_eProperty_PlugInID_RTAS, 1262<br/></p>
<p>AAX_eProperty_PlugInID_TI, 1263<br/>AAX_eProperty_PlugInSpecPropsBase, 1261<br/>AAX_eProperty_ProcessProcPropsBase, 1265<br/>AAX_eProperty_ProductID, 1261<br/>AAX_eProperty_Related_DSP_Plugin_List, 1264<br/>AAX_eProperty_Related_Native_Plugin_List, 1264<br/>AAX_eProperty_RequestsAllTrackData, 1271<br/>AAX_eProperty_RequiresAnalysis, 1270<br/>AAX_eProperty_RequiresChunkCallsOnMainThread,<br/></p>
<p>1276<br/>AAX_eProperty_SampleRate, 1267<br/>AAX_eProperty_ShowInMenus, 1269<br/>AAX_eProperty_SideChainStemFormat, 1268<br/>AAX_eProperty_StoreXMLPageTablesByEffect,<br/></p>
<p>1275<br/>AAX_eProperty_StoreXMLPageTablesByType,<br/></p>
<p>1275<br/>AAX_eProperty_SupportsSaveRestore, 1275<br/>AAX_eProperty_SupportsSideChainInput, 1273<br/>AAX_eProperty_TI_ForceAllowChipSharing, 1269<br/>AAX_eProperty_TI_InstanceCycleCount, 1268<br/>AAX_eProperty_TI_MaxInstancesPerChip, 1268<br/>AAX_eProperty_TI_SharedCycleCount, 1268<br/>AAX_eProperty_TIBackgroundProc, 1266<br/>AAX_eProperty_TIDLLFileName, 1266<br/>AAX_eProperty_TIInstanceInitProc, 1266<br/>AAX_eProperty_TIProcessProc, 1266<br/>AAX_eProperty_UsesClientGUI, 1273<br/>AAX_eProperty_UsesRandomAccess, 1270<br/>AAX_eProperty_UsesTransport, 1275<br/>AAX_eProperty_UsesTransportControl, 1276<br/></p>
<p>AAX_Push2ByteStructAlignment.h, 1278<br/>AAX_Push4ByteStructAlignment.h, 1279<br/>AAX_Push8ByteStructAlignment.h, 1280<br/>AAX_Quantize.h, 1280<br/></p>
<p>AAX_QUANTIZE_H, 1281<br/>AAX_QUANTIZE_H<br/></p>
<p>AAX_Quantize.h, 1281<br/>AAX_RandomGen.h, 1281<br/></p>
<p>AAX_RANDOMGEN_H, 1282<br/>AAX_RANDOMGEN_H<br/></p>
<p>AAX_RandomGen.h, 1282<br/>AAX_RealTimePerformance.doxygen, 1282<br/>AAX_Rect, 967<br/></p>
<p>AAX_GUITypes.h, 1221<br/>AAX_Rect, 968<br/>height, 968<br/>left, 968<br/>top, 968<br/>width, 968<br/></p>
<p>AAX_RelatedTypes.doxygen, 1282<br/>AAX_Result<br/></p>
<p>AAX.h, 1113<br/>AAX_RESULT_ADD_FIELD_UNSUPPORTED_FIELD_TYPE<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_RESULT_NEW_PACKET_POSTED<br/></p>
<p>AAX_Errors.h, 1211<br/>AAX_RESULT_PACKET_STREAM_NOT_EMPTY<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1357<br/></b></p>
<p>AAX_Errors.h, 1211<br/>AAX_SampleRateUtils.h, 1282<br/></p>
<p>CoarseSampleRate, 1283<br/>CoarseSampleRateFactor, 1284<br/>CoarseSampleRateIndex, 1284<br/>ESRUtils, 1283<br/>eSRUtils_192kIndex, 1283<br/>eSRUtils_192kRangeCoarse, 1283<br/>eSRUtils_192kRangeMax, 1283<br/>eSRUtils_192kRangeMin, 1283<br/>eSRUtils_48kIndex, 1283<br/>eSRUtils_48kRangeCoarse, 1283<br/>eSRUtils_48kRangeMax, 1283<br/>eSRUtils_48kRangeMin, 1283<br/>eSRUtils_96kIndex, 1283<br/>eSRUtils_96kRangeCoarse, 1283<br/>eSRUtils_96kRangeMax, 1283<br/>eSRUtils_96kRangeMin, 1283<br/></p>
<p>AAX_SCOPE_COMPUTE_DENORMALS<br/>AAX_Denormal.h, 1157<br/></p>
<p>AAX_SCOPE_DENORMALS_AS_ZERO<br/>AAX_Denormal.h, 1157<br/></p>
<p>AAX_SDK_1p0p1_REVISION<br/>AAX_Version.h, 1315<br/></p>
<p>AAX_SDK_1p0p2_REVISION<br/>AAX_Version.h, 1315<br/></p>
<p>AAX_SDK_1p0p3_REVISION<br/>AAX_Version.h, 1315<br/></p>
<p>AAX_SDK_1p0p4_REVISION<br/>AAX_Version.h, 1315<br/></p>
<p>AAX_SDK_1p0p5_REVISION<br/>AAX_Version.h, 1315<br/></p>
<p>AAX_SDK_1p0p6_REVISION<br/>AAX_Version.h, 1315<br/></p>
<p>AAX_SDK_1p5p0_REVISION<br/>AAX_Version.h, 1315<br/></p>
<p>AAX_SDK_2p0b1_REVISION<br/>AAX_Version.h, 1316<br/></p>
<p>AAX_SDK_2p0p0_REVISION<br/>AAX_Version.h, 1316<br/></p>
<p>AAX_SDK_2p0p1_REVISION<br/>AAX_Version.h, 1316<br/></p>
<p>AAX_SDK_2p1p0_REVISION<br/>AAX_Version.h, 1316<br/></p>
<p>AAX_SDK_2p1p1_REVISION<br/>AAX_Version.h, 1316<br/></p>
<p>AAX_SDK_2p2p0_REVISION<br/>AAX_Version.h, 1316<br/></p>
<p>AAX_SDK_2p2p1_REVISION<br/>AAX_Version.h, 1316<br/></p>
<p>AAX_SDK_2p2p2_REVISION<br/>AAX_Version.h, 1316<br/></p>
<p>AAX_SDK_2p3p0_REVISION<br/>AAX_Version.h, 1317<br/></p>
<p>AAX_SDK_2p3p1_REVISION<br/>AAX_Version.h, 1317<br/></p>
<p>AAX_SDK_2p3p2_REVISION<br/>AAX_Version.h, 1317<br/></p>
<p>AAX_SDK_2p4p0_REVISION<br/>AAX_Version.h, 1317<br/></p>
<p>AAX_SDK_2p4p1_REVISION<br/>AAX_Version.h, 1317<br/></p>
<p>AAX_SDK_2p5p0_REVISION<br/>AAX_Version.h, 1317<br/></p>
<p>AAX_SDK_2p6p0_REVISION<br/>AAX_Version.h, 1317<br/></p>
<p>AAX_SDK_2p6p1_REVISION<br/>AAX_Version.h, 1317<br/></p>
<p>AAX_SDK_2p7p0_REVISION<br/>AAX_Version.h, 1318<br/></p>
<p>AAX_SDK_2p8p0_REVISION<br/>AAX_Version.h, 1318<br/></p>
<p>AAX_SDK_2p8p1_REVISION<br/>AAX_Version.h, 1318<br/></p>
<p>AAX_SDK_ChangeLog.doxygen, 1284<br/>AAX_SDK_CURRENT_REVISION<br/></p>
<p>AAX_Version.h, 1314<br/>AAX_SDK_ExamplePlugIns.doxygen, 1284<br/>AAX_SDK_GUIExtensions.doxygen, 1284<br/>AAX_SDK_VERSION<br/></p>
<p>AAX_Version.h, 1314<br/>AAX_SessionDocumentTypes.h, 1284<br/></p>
<p>AAX_SessionDocumentTypes_H, 1285<br/>kAAX_DataBufferType_TempoBreakpointArray,<br/></p>
<p>1285<br/>AAX_SessionDocumentTypes_H<br/></p>
<p>AAX_SessionDocumentTypes.h, 1285<br/>AAX_SHybridRenderInfo, 969<br/></p>
<p>mAudioInputs, 969<br/>mAudioOutputs, 969<br/>mClock, 970<br/>mNumAudioInputs, 969<br/>mNumAudioOutputs, 970<br/>mNumSamples, 970<br/></p>
<p>AAX_SInstrumentPrivateData, 970<br/>mMonolithicParametersPtr, 971<br/></p>
<p>AAX_SInstrumentRenderInfo, 971<br/>mAdditionalInputMIDINodes, 973<br/>mAudioInputs, 972<br/>mAudioOutputs, 972<br/>mClock, 972<br/>mCurrentStateNum, 973<br/>mGlobalNode, 972<br/>mInputNode, 972<br/>mMeters, 973<br/>mNumSamples, 972<br/>mPrivateData, 973<br/>mTransportNode, 973<br/></p>
<p>AAX_SInstrumentSetupInfo, 974<br/>AAX_SInstrumentSetupInfo, 975<br/>mAudiosuiteID, 981<br/>mAuxOutputStemFormats, 979<br/>mAuxOutputStemNames, 978<br/>mCanBypass, 980<br/>mGlobalMIDIEventMask, 976<br/>mGlobalMIDINodeName, 976<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1358 INDEX<br/></b></p>
<p>mHybridInputStemFormat, 979<br/>mHybridOutputStemFormat, 979<br/>mInputMIDIChannelMask, 977<br/>mInputMIDINodeName, 976<br/>mInputStemFormat, 980<br/>mManufacturerID, 981<br/>mMeterIDs, 978<br/>mMultiMonoSupport, 981<br/>mNeedsGlobalMIDI, 975<br/>mNeedsInputMIDI, 976<br/>mNeedsTransport, 977<br/>mNumAdditionalInputMIDINodes, 977<br/>mNumAuxOutputStems, 978<br/>mNumMeters, 978<br/>mOutputStemFormat, 980<br/>mPluginID, 981<br/>mProductID, 981<br/>mTransportMIDINodeName, 977<br/>mUseHostGeneratedGUI, 980<br/></p>
<p>AAX_SliderConversions.h, 1285<br/>AAX_LIMIT, 1286<br/>AAX_SLIDERCONVERSIONS_H, 1286<br/>DoubleToLongControl, 1287<br/>DoubleToLongControlNonlinear, 1287<br/>LogDoubleToLongControl, 1288<br/>LongControlToDouble, 1287<br/>LongControlToDoubleNonlinear, 1287<br/>LongControlToLogDouble, 1288<br/>LongControlToNewRange, 1286<br/>LongToLongControl, 1287<br/></p>
<p>AAX_SLIDERCONVERSIONS_H<br/>AAX_SliderConversions.h, 1286<br/></p>
<p>AAX_SPlugInChunk, 982<br/>AAX.h, 1117<br/>fChunkID, 983<br/>fData, 984<br/>fManufacturerID, 983<br/>fName, 984<br/>fPlugInID, 983<br/>fProductID, 983<br/>fSize, 983<br/>fVersion, 983<br/></p>
<p>AAX_SPlugInChunkHeader, 984<br/>AAX.h, 1116<br/>fChunkID, 986<br/>fManufacturerID, 986<br/>fName, 986<br/>fPlugInID, 986<br/>fProductID, 986<br/>fSize, 985<br/>fVersion, 986<br/></p>
<p>AAX_SPlugInChunkPtr<br/>AAX.h, 1117<br/></p>
<p>AAX_SPlugInIdentifierTriad, 987<br/>AAX.h, 1117<br/>mManufacturerID, 987<br/>mPlugInID, 988<br/>mProductID, 987<br/></p>
<p>AAX_SPlugInIdentifierTriadPtr<br/>AAX.h, 1117<br/></p>
<p>AAX_STACKTRACE<br/>AAX_Assert.h, 1124<br/></p>
<p>AAX_STACKTRACE_RELEASE<br/>AAX_Assert.h, 1122<br/></p>
<p>AAX_STEM_FORMAT<br/>AAX_Enums.h, 1171<br/></p>
<p>AAX_STEM_FORMAT_CHANNEL_COUNT<br/>AAX_Enums.h, 1171<br/></p>
<p>AAX_STEM_FORMAT_INDEX<br/>AAX_Enums.h, 1171<br/></p>
<p>AAX_StLock_Guard, 988<br/>&#8764;AAX_StLock_Guard, 988<br/>AAX_StLock_Guard, 988<br/></p>
<p>AAX_StringUtilities.h, 1288<br/>AAXLibrary_AAX_StringUtilities_h, 1289<br/></p>
<p>AAX_StringUtilities.hpp, 1289<br/>DEFINE_AAX_ERROR_STRING, 1290<br/></p>
<p>AAX_SUCCESS<br/>AAX_Errors.h, 1210<br/></p>
<p>AAX_SWALLOW<br/>AAX_Exception.h, 1213<br/></p>
<p>AAX_SWALLOW_MULT<br/>AAX_Exception.h, 1213<br/></p>
<p>AAX_TaskCompletionStatus<br/>Task agent interface, 105<br/></p>
<p>AAX_TI_Guide.doxygen, 1290<br/>AAX_TRACE<br/></p>
<p>AAX_Assert.h, 1124<br/>AAX_TRACE_RELEASE<br/></p>
<p>AAX_Assert.h, 1121<br/>AAX_TRACEORSTACKTRACE<br/></p>
<p>AAX_Assert.h, 1124<br/>AAX_TRACEORSTACKTRACE_RELEASE<br/></p>
<p>AAX_Assert.h, 1122<br/>AAX_TransportStateInfo_V1, 989<br/></p>
<p>AAX_TransportStateInfo_V1, 989<br/>mIsLoopEnabled, 990<br/>mIsRecordEnabled, 990<br/>mIsRecording, 990<br/>mRecordMode, 990<br/>mTransportState, 990<br/>ToString, 989<br/></p>
<p>AAX_TransportTypes.h, 1290<br/>operator!=, 1291<br/>operator==, 1291<br/></p>
<p>AAX_Troubleshooting.doxygen, 1291<br/>AAX_UIDs.h, 1291<br/></p>
<p>AAX_CompID_DescriptionHost, 1303<br/>AAX_CompID_FeatureInfo, 1303<br/>AAX_DocumentData_UID, 1295<br/>AAX_DocumentDataType_TempoMap, 1309<br/>AAX_Feature_UID, 1295<br/>AAXATTR_Client_Level, 1308<br/>AAXATTR_Client_Version, 1308<br/>AAXATTR_ClientFeature_AuxOutputStem, 1308<br/>AAXATTR_ClientFeature_MIDI, 1308<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1359<br/></b></p>
<p>AAXATTR_ClientFeature_SideChainInput, 1308<br/>AAXATTR_ClientFeature_StemFormat, 1307<br/>AAXCompID_AAXCollection, 1296<br/>AAXCompID_AAXComponentDescriptor, 1297<br/>AAXCompID_AAXEffectDescriptor, 1296<br/>AAXCompID_AAXPropertyMap, 1297<br/>AAXCompID_AutomationDelegate, 1299<br/>AAXCompID_Controller, 1299<br/>AAXCompID_DataBuffer, 1307<br/>AAXCompID_EffectDirectData, 1306<br/>AAXCompID_EffectGUI, 1306<br/>AAXCompID_EffectParameters, 1304<br/>AAXCompID_HostProcessor, 1305<br/>AAXCompID_HostProcessorDelegate, 1298<br/>AAXCompID_HostServices, 1295<br/>AAXCompID_PageTable, 1302<br/>AAXCompID_PageTableController, 1300<br/>AAXCompID_PrivateDataAccess, 1300<br/>AAXCompID_SessionDocument, 1304<br/>AAXCompID_SessionDocumentClient, 1307<br/>AAXCompID_Task, 1304<br/>AAXCompID_TaskAgent, 1306<br/>AAXCompID_Transport, 1301<br/>AAXCompID_TransportControl, 1302<br/>AAXCompID_ViewContainer, 1300<br/>IID_IAAXAutomationDelegateV1, 1299<br/>IID_IAAXCollectionV1, 1296<br/>IID_IAAXComponentDescriptorV1, 1297<br/>IID_IAAXComponentDescriptorV2, 1297<br/>IID_IAAXComponentDescriptorV3, 1297<br/>IID_IAAXControllerV1, 1299<br/>IID_IAAXControllerV2, 1299<br/>IID_IAAXControllerV3, 1299<br/>IID_IAAXDataBufferV1, 1307<br/>IID_IAAXDescriptionHostV1, 1303<br/>IID_IAAXEffectDescriptorV1, 1296<br/>IID_IAAXEffectDescriptorV2, 1296<br/>IID_IAAXEffectDirectDataV1, 1306<br/>IID_IAAXEffectDirectDataV2, 1306<br/>IID_IAAXEffectGUIV1, 1306<br/>IID_IAAXEffectParametersV1, 1304<br/>IID_IAAXEffectParametersV2, 1305<br/>IID_IAAXEffectParametersV3, 1305<br/>IID_IAAXEffectParametersV4, 1305<br/>IID_IAAXFeatureInfoV1, 1303<br/>IID_IAAXHostProcessorDelegateV1, 1298<br/>IID_IAAXHostProcessorDelegateV2, 1298<br/>IID_IAAXHostProcessorDelegateV3, 1298<br/>IID_IAAXHostProcessorV1, 1305<br/>IID_IAAXHostProcessorV2, 1305<br/>IID_IAAXHostServicesV1, 1295<br/>IID_IAAXHostServicesV2, 1295<br/>IID_IAAXHostServicesV3, 1296<br/>IID_IAAXPageTableController, 1300<br/>IID_IAAXPageTableControllerV2, 1300<br/>IID_IAAXPageTableV1, 1303<br/>IID_IAAXPageTableV2, 1303<br/>IID_IAAXPrivateDataAccessV1, 1300<br/></p>
<p>IID_IAAXPropertyMapV1, 1297<br/>IID_IAAXPropertyMapV2, 1298<br/>IID_IAAXPropertyMapV3, 1298<br/>IID_IAAXSessionDocumentClientV1, 1307<br/>IID_IAAXSessionDocumentV1, 1304<br/>IID_IAAXTaskAgentV1, 1307<br/>IID_IAAXTaskV1, 1304<br/>IID_IAAXTransportControlV1, 1302<br/>IID_IAAXTransportV1, 1301<br/>IID_IAAXTransportV2, 1301<br/>IID_IAAXTransportV3, 1302<br/>IID_IAAXTransportV4, 1302<br/>IID_IAAXTransportV5, 1302<br/>IID_IAAXViewContainerV1, 1301<br/>IID_IAAXViewContainerV2, 1301<br/>IID_IAAXViewContainerV3, 1301<br/></p>
<p>AAX_UINT16_MAX<br/>AAX_Enums.h, 1170<br/></p>
<p>AAX_UINT16_MIN<br/>AAX_Enums.h, 1170<br/></p>
<p>AAX_UINT32_MAX<br/>AAX_Enums.h, 1170<br/></p>
<p>AAX_UINT32_MIN<br/>AAX_Enums.h, 1170<br/></p>
<p>AAX_UNIQUE_PTR<br/>AAX.h, 1108<br/></p>
<p>AAX_UtilsNative.h, 1309<br/>_AAX_UTILSNATIVE_H_, 1310<br/></p>
<p>AAX_VAutomationDelegate, 991<br/>&#8764;AAX_VAutomationDelegate, 991<br/>AAX_VAutomationDelegate, 991<br/>GetTouchState, 994<br/>GetUnknown, 991<br/>ParameterNameChanged, 994<br/>PostCurrentValue, 993<br/>PostReleaseRequest, 994<br/>PostSetValueRequest, 993<br/>PostTouchRequest, 993<br/>RegisterParameter, 992<br/>UnregisterParameter, 992<br/></p>
<p>AAX_VAutomationDelegate.h, 1310<br/>AAX_VCollection, 995<br/>&#8764;AAX_VCollection, 996<br/>AAX_VCollection, 995<br/>AddEffect, 996<br/>AddPackageName, 997<br/>DescriptionHost, 999<br/>GetHostVersion, 998<br/>GetIUnknown, 1000<br/>HostDefinition, 999<br/>NewDescriptor, 996<br/>NewPropertyMap, 998<br/>SetManufacturerName, 997<br/>SetPackageVersion, 997<br/>SetProperties, 998<br/></p>
<p>AAX_VCollection.h, 1311<br/>AAX_VComponentDescriptor, 1000<br/>&#8764;AAX_VComponentDescriptor, 1002<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1360 INDEX<br/></b></p>
<p>AAX_VComponentDescriptor, 1002<br/>AAX_VPropertyMap, 1014<br/>AddAudioBufferLength, 1004<br/>AddAudioIn, 1003<br/>AddAudioOut, 1003<br/>AddAuxOutputStem, 1006<br/>AddClock, 1004<br/>AddDataInPort, 1005<br/>AddDmaInstance, 1008<br/>AddMeters, 1008<br/>AddMIDINode, 1010<br/>AddPrivateData, 1007<br/>AddProcessProc, 1012<br/>AddProcessProc_Native, 1011<br/>AddProcessProc_TI, 1012<br/>AddReservedField, 1002<br/>AddSampleRate, 1004<br/>AddSideChainIn, 1005<br/>AddTemporaryData, 1007<br/>Clear, 1002<br/>DuplicatePropertyMap, 1011<br/>GetIUnknown, 1014<br/>NewPropertyMap, 1010<br/></p>
<p>AAX_VComponentDescriptor.h, 1311<br/>AAX_VController, 1014<br/></p>
<p>&#8764;AAX_VController, 1016<br/>AAX_VController, 1016<br/>ClearMeterClipped, 1026<br/>ClearMeterPeakValue, 1025<br/>CreateTableCopyForEffect, 1027<br/>CreateTableCopyForEffectFromFile, 1028<br/>CreateTableCopyForLayout, 1027<br/>CreateTableCopyForLayoutFromFile, 1029<br/>GetCurrentAutomationTimestamp, 1020<br/>GetCurrentMeterValue, 1024<br/>GetCycleCount, 1019<br/>GetEffectID, 1016<br/>GetHostName, 1021<br/>GetHybridSignalLatency, 1018<br/>GetInputStemFormat, 1017<br/>GetIsAudioSuite, 1019<br/>GetMeterClipped, 1025<br/>GetMeterCount, 1026<br/>GetMeterPeakValue, 1025<br/>GetNextMIDIPacket, 1026<br/>GetOutputStemFormat, 1017<br/>GetPlugInTargetPlatform, 1019<br/>GetSampleRate, 1017<br/>GetSignalLatency, 1018<br/>GetTODLocation, 1020<br/>PostPacket, 1022<br/>SendNotification, 1023, 1024<br/>SetCycleCount, 1022<br/>SetSignalLatency, 1021<br/></p>
<p>AAX_VController.h, 1311<br/>AAX_VDataBufferWrapper, 1029<br/></p>
<p>&#8764;AAX_VDataBufferWrapper, 1030<br/>AAX_VDataBufferWrapper, 1030<br/></p>
<p>Data, 1030<br/>Size, 1030<br/>Type, 1030<br/></p>
<p>AAX_VDataBufferWrapper.h, 1312<br/>AAX_VDATABUFFERWRAPPER_H, 1312<br/></p>
<p>AAX_VDATABUFFERWRAPPER_H<br/>AAX_VDataBufferWrapper.h, 1312<br/></p>
<p>AAX_VDescriptionHost, 1031<br/>&#8764;AAX_VDescriptionHost, 1031<br/>AAX_VDescriptionHost, 1031<br/>AcquireFeatureProperties, 1032<br/>DescriptionHost, 1032, 1033<br/>HostDefinition, 1033<br/>Supported, 1032<br/></p>
<p>AAX_VDescriptionHost.h, 1312<br/>AAX_VEffectDescriptor, 1033<br/>&#8764;AAX_VEffectDescriptor, 1034<br/>AAX_VEffectDescriptor, 1034<br/>AddCategory, 1036<br/>AddCategoryBypassParameter, 1036<br/>AddComponent, 1035<br/>AddControlMIDINode, 1038<br/>AddMeterDescription, 1037<br/>AddName, 1035<br/>AddProcPtr, 1036<br/>AddResourceInfo, 1037<br/>GetIUnknown, 1038<br/>NewComponentDescriptor, 1034<br/>NewPropertyMap, 1037<br/>SetProperties, 1037<br/></p>
<p>AAX_VEffectDescriptor.h, 1313<br/>AAX_VENUE_Guide.doxygen, 1313<br/>AAX_Version.h, 1313<br/></p>
<p>_AAX_VERSION_H_, 1314<br/>AAX_SDK_1p0p1_REVISION, 1315<br/>AAX_SDK_1p0p2_REVISION, 1315<br/>AAX_SDK_1p0p3_REVISION, 1315<br/>AAX_SDK_1p0p4_REVISION, 1315<br/>AAX_SDK_1p0p5_REVISION, 1315<br/>AAX_SDK_1p0p6_REVISION, 1315<br/>AAX_SDK_1p5p0_REVISION, 1315<br/>AAX_SDK_2p0b1_REVISION, 1316<br/>AAX_SDK_2p0p0_REVISION, 1316<br/>AAX_SDK_2p0p1_REVISION, 1316<br/>AAX_SDK_2p1p0_REVISION, 1316<br/>AAX_SDK_2p1p1_REVISION, 1316<br/>AAX_SDK_2p2p0_REVISION, 1316<br/>AAX_SDK_2p2p1_REVISION, 1316<br/>AAX_SDK_2p2p2_REVISION, 1316<br/>AAX_SDK_2p3p0_REVISION, 1317<br/>AAX_SDK_2p3p1_REVISION, 1317<br/>AAX_SDK_2p3p2_REVISION, 1317<br/>AAX_SDK_2p4p0_REVISION, 1317<br/>AAX_SDK_2p4p1_REVISION, 1317<br/>AAX_SDK_2p5p0_REVISION, 1317<br/>AAX_SDK_2p6p0_REVISION, 1317<br/>AAX_SDK_2p6p1_REVISION, 1317<br/>AAX_SDK_2p7p0_REVISION, 1318<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1361<br/></b></p>
<p>AAX_SDK_2p8p0_REVISION, 1318<br/>AAX_SDK_2p8p1_REVISION, 1318<br/>AAX_SDK_CURRENT_REVISION, 1314<br/>AAX_SDK_VERSION, 1314<br/></p>
<p>AAX_VFeatureInfo, 1039<br/>&#8764;AAX_VFeatureInfo, 1039<br/>AAX_VFeatureInfo, 1039<br/>AcquireProperties, 1040<br/>ID, 1040<br/>SupportLevel, 1040<br/></p>
<p>AAX_VFeatureInfo.h, 1318<br/>AAX_VHostProcessorDelegate, 1041<br/></p>
<p>AAX_VHostProcessorDelegate, 1041<br/>ForceAnalyze, 1042<br/>ForceProcess, 1043<br/>GetAudio, 1042<br/>GetSideChainInputNum, 1042<br/></p>
<p>AAX_VHostProcessorDelegate.h, 1318<br/>AAX_VHostServices, 1043<br/></p>
<p>&#8764;AAX_VHostServices, 1044<br/>AAX_VHostServices, 1044<br/>HandleAssertFailure, 1044<br/>StackTrace, 1045<br/>Trace, 1044<br/></p>
<p>AAX_VHostServices.h, 1319<br/>AAX_VHostTaskAgent, 1045<br/></p>
<p>&#8764;AAX_VHostTaskAgent, 1046<br/>AAX_VHostTaskAgent, 1046<br/>AddTask, 1046<br/>CancelAllTasks, 1047<br/>Initialize, 1046<br/>Uninitialize, 1046<br/></p>
<p>AAX_VHostTaskAgent.h, 1319<br/>AAX_VHostTaskAgent_H, 1319<br/></p>
<p>AAX_VHostTaskAgent_H<br/>AAX_VHostTaskAgent.h, 1319<br/></p>
<p>AAX_VPageTable, 1047<br/>&#8764;AAX_VPageTable, 1048<br/>AAX_VPageTable, 1048<br/>AsUnknown, 1057<br/>Clear, 1048<br/>ClearMappedParameter, 1051<br/>ClearNameVariationsForParameter, 1056<br/>ClearParameterNameVariations, 1055<br/>Empty, 1049<br/>GetMappedParameterID, 1051<br/>GetNameVariationParameterIDAtIndex, 1053<br/>GetNumMappedParameterIDs, 1050<br/>GetNumNameVariationsForParameter, 1053<br/>GetNumPages, 1049<br/>GetNumParametersWithNameVariations, 1052<br/>GetParameterNameVariationAtIndex, 1054<br/>GetParameterNameVariationOfLength, 1055<br/>InsertPage, 1049<br/>IsSupported, 1058<br/>MapParameterID, 1052<br/>RemovePage, 1050<br/>SetParameterNameVariation, 1057<br/></p>
<p>AAX_VPageTable.h, 1320<br/>AAX_VPrivateDataAccess, 1058<br/>&#8764;AAX_VPrivateDataAccess, 1058<br/>AAX_VPrivateDataAccess, 1058<br/>ReadPortDirect, 1059<br/>WritePortDirect, 1059<br/></p>
<p>AAX_VPrivateDataAccess.h, 1320<br/>AAX_VPropertyMap, 1060<br/>&#8764;AAX_VPropertyMap, 1061<br/>AAX_VComponentDescriptor, 1014<br/>Acquire, 1061<br/>AddPointerProperty, 1062, 1063<br/>AddProperty, 1062<br/>AddPropertyWithIDArray, 1064<br/>Create, 1061<br/>GetIUnknown, 1065<br/>GetPointerProperty, 1062<br/>GetProperty, 1061<br/>GetPropertyWithIDArray, 1064<br/>RemoveProperty, 1063<br/></p>
<p>AAX_VPropertyMap.h, 1320<br/>AAX_VSessionDocument, 1065<br/>&#8764;AAX_VSessionDocument, 1066<br/>AAX_VSessionDocument, 1065<br/>Clear, 1066<br/>GetDocumentData, 1066<br/>GetTempoMap, 1066<br/>Valid, 1066<br/></p>
<p>AAX_VSessionDocument.h, 1321<br/>AAX_VSessionDocument_H, 1321<br/></p>
<p>AAX_VSessionDocument::VTempoMap, 1100<br/>&#8764;VTempoMap, 1100<br/>Data, 1101<br/>Size, 1101<br/>VTempoMap, 1101<br/></p>
<p>AAX_VSessionDocument_H<br/>AAX_VSessionDocument.h, 1321<br/></p>
<p>AAX_VTask, 1068<br/>&#8764;AAX_VTask, 1069<br/>AAX_VTask, 1068<br/>AddResult, 1070<br/>GetArgumentOfType, 1069<br/>GetProgress, 1070<br/>GetType, 1069<br/>SetDone, 1071<br/>SetProgress, 1070<br/></p>
<p>AAX_VTask.h, 1321<br/>AAX_VTask_H, 1322<br/></p>
<p>AAX_VTask_H<br/>AAX_VTask.h, 1322<br/></p>
<p>AAX_VTransport, 1071<br/>&#8764;AAX_VTransport, 1072<br/>AAX_VTransport, 1072<br/>GetBarBeatPosition, 1077<br/>GetCurrentLoopPosition, 1075<br/>GetCurrentMeter, 1073<br/>GetCurrentNativeSampleLocation, 1076<br/>GetCurrentTempo, 1073<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1362 INDEX<br/></b></p>
<p>GetCurrentTickPosition, 1075<br/>GetCurrentTicksPerBeat, 1077<br/>GetCustomTickPosition, 1076<br/>GetFeetFramesInfo, 1078<br/>GetHDTimeCodeInfo, 1079<br/>GetKeySignature, 1080<br/>GetTicksPerQuarter, 1077<br/>GetTimeCodeInfo, 1078<br/>GetTimelineSelectionEndPosition, 1080<br/>GetTimelineSelectionStartPosition, 1078<br/>IsMetronomeEnabled, 1079<br/>IsTransportPlaying, 1073<br/>RequestTransportStart, 1081<br/>RequestTransportStop, 1081<br/></p>
<p>AAX_VTransport.h, 1322<br/>AAX_VViewContainer, 1081<br/></p>
<p>&#8764;AAX_VViewContainer, 1082<br/>AAX_VViewContainer, 1082<br/>GetModifiers, 1083<br/>GetPtr, 1083<br/>GetType, 1083<br/>HandleMultipleParametersMouseDown, 1087<br/>HandleMultipleParametersMouseDrag, 1087<br/>HandleMultipleParametersMouseUp, 1088<br/>HandleParameterMouseDown, 1084<br/>HandleParameterMouseDrag, 1084<br/>HandleParameterMouseEnter, 1086<br/>HandleParameterMouseExit, 1086<br/>HandleParameterMouseUp, 1086<br/>SetViewSize, 1084<br/></p>
<p>AAX_VViewContainer.h, 1322<br/>AAX_WORD_ALIGNED_HINT<br/></p>
<p>AAX_MiscUtils.h, 1254<br/>AAXATTR_Client_Level<br/></p>
<p>AAX_UIDs.h, 1308<br/>AAXATTR_Client_Version<br/></p>
<p>AAX_UIDs.h, 1308<br/>AAXATTR_ClientFeature_AuxOutputStem<br/></p>
<p>AAX_UIDs.h, 1308<br/>AAXATTR_ClientFeature_MIDI<br/></p>
<p>AAX_UIDs.h, 1308<br/>AAXATTR_ClientFeature_SideChainInput<br/></p>
<p>AAX_UIDs.h, 1308<br/>AAXATTR_ClientFeature_StemFormat<br/></p>
<p>AAX_UIDs.h, 1307<br/>AAXCanUnloadNow<br/></p>
<p>AAX_Init.h, 1243<br/>AAXCompID_AAXCollection<br/></p>
<p>AAX_UIDs.h, 1296<br/>AAXCompID_AAXComponentDescriptor<br/></p>
<p>AAX_UIDs.h, 1297<br/>AAXCompID_AAXEffectDescriptor<br/></p>
<p>AAX_UIDs.h, 1296<br/>AAXCompID_AAXPropertyMap<br/></p>
<p>AAX_UIDs.h, 1297<br/>AAXCompID_AutomationDelegate<br/></p>
<p>AAX_UIDs.h, 1299<br/>AAXCompID_Controller<br/></p>
<p>AAX_UIDs.h, 1299<br/>AAXCompID_DataBuffer<br/></p>
<p>AAX_UIDs.h, 1307<br/>AAXCompID_EffectDirectData<br/></p>
<p>AAX_UIDs.h, 1306<br/>AAXCompID_EffectGUI<br/></p>
<p>AAX_UIDs.h, 1306<br/>AAXCompID_EffectParameters<br/></p>
<p>AAX_UIDs.h, 1304<br/>AAXCompID_HostProcessor<br/></p>
<p>AAX_UIDs.h, 1305<br/>AAXCompID_HostProcessorDelegate<br/></p>
<p>AAX_UIDs.h, 1298<br/>AAXCompID_HostServices<br/></p>
<p>AAX_UIDs.h, 1295<br/>AAXCompID_PageTable<br/></p>
<p>AAX_UIDs.h, 1302<br/>AAXCompID_PageTableController<br/></p>
<p>AAX_UIDs.h, 1300<br/>AAXCompID_PrivateDataAccess<br/></p>
<p>AAX_UIDs.h, 1300<br/>AAXCompID_SessionDocument<br/></p>
<p>AAX_UIDs.h, 1304<br/>AAXCompID_SessionDocumentClient<br/></p>
<p>AAX_UIDs.h, 1307<br/>AAXCompID_Task<br/></p>
<p>AAX_UIDs.h, 1304<br/>AAXCompID_TaskAgent<br/></p>
<p>AAX_UIDs.h, 1306<br/>AAXCompID_Transport<br/></p>
<p>AAX_UIDs.h, 1301<br/>AAXCompID_TransportControl<br/></p>
<p>AAX_UIDs.h, 1302<br/>AAXCompID_ViewContainer<br/></p>
<p>AAX_UIDs.h, 1300<br/>AAXCreateObjectProc<br/></p>
<p>AAX_Callbacks.h, 1128<br/>AAXGetClassFactory<br/></p>
<p>AAX_Init.h, 1243<br/>AAXGetSDKVersion<br/></p>
<p>AAX_Init.h, 1244<br/>AAXLibrary_AAX_StringUtilities_h<br/></p>
<p>AAX_StringUtilities.h, 1289<br/>AAXPointer_32bit<br/></p>
<p>AAX.h, 1109<br/>AAXPointer_64bit<br/></p>
<p>AAX.h, 1109<br/>AAXRegisterComponent<br/></p>
<p>AAX_Init.h, 1242<br/>AAXRegisterPlugin<br/></p>
<p>Description callback, 67<br/>AAXShutdown<br/></p>
<p>AAX_Init.h, 1244<br/>AAXStartup<br/></p>
<p>AAX_Init.h, 1243<br/>AbsMax<br/></p>
<p>AAX, 388<br/>Accepts<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1363<br/></b></p>
<p>AAX_IMIDIMessageInfoDelegate, 885<br/>Accepts_ExactStatus<br/></p>
<p>AAX_IMIDIMessageInfoDelegate, 885<br/>ACF Elements, 149<br/>ACF_DECLARE_STANDARD_UNKNOWN<br/></p>
<p>AAX_CTask, 653<br/>AAX_IDataBuffer, 841<br/>AAX_IEffectDirectData, 870<br/>AAX_IEffectGUI, 871<br/>AAX_IEffectParameters, 873<br/>AAX_IHostProcessor, 876<br/>AAX_ISessionDocumentClient, 937<br/>AAX_ITaskAgent, 948<br/></p>
<p>ACFCanUnloadNow<br/>AAX_Exports.cpp, 1217<br/></p>
<p>ACFGetClassFactory<br/>AAX_Exports.cpp, 1216<br/></p>
<p>ACFGetSDKVersion<br/>AAX_Exports.cpp, 1217<br/></p>
<p>acfIID<br/>AAX_ACFInterface.doxygen, 1118<br/></p>
<p>ACFRegisterComponent<br/>AAX_Exports.cpp, 1216<br/></p>
<p>ACFRegisterPlugin<br/>AAX_Exports.cpp, 1216<br/></p>
<p>ACFShutdown<br/>AAX_Exports.cpp, 1217<br/></p>
<p>ACFStartup<br/>AAX_Exports.cpp, 1217<br/></p>
<p>acfUID<br/>AAX.h, 1115<br/>AAX_ACFInterface.doxygen, 1118<br/></p>
<p>Acquire<br/>AAX_VPropertyMap, 1061<br/></p>
<p>AcquireFeatureProperties<br/>AAX_IACFDescriptionHost, 699<br/>AAX_IDescriptionHost, 843<br/>AAX_VDescriptionHost, 1032<br/></p>
<p>AcquireProperties<br/>AAX_IACFFeatureInfo, 740<br/>AAX_IFeatureInfo, 875<br/>AAX_VFeatureInfo, 1040<br/></p>
<p>Add<br/>AAX_CStringAbbreviations, 642<br/></p>
<p>AddAcceptedResult<br/>AAX_CheckedResult, 484<br/></p>
<p>AddAudioBufferLength<br/>AAX_IACFComponentDescriptor, 677<br/>AAX_IComponentDescriptor, 811<br/>AAX_VComponentDescriptor, 1004<br/></p>
<p>AddAudioIn<br/>AAX_IACFComponentDescriptor, 676<br/>AAX_IComponentDescriptor, 810<br/>AAX_VComponentDescriptor, 1003<br/></p>
<p>AddAudioOut<br/>AAX_IACFComponentDescriptor, 676<br/>AAX_IComponentDescriptor, 811<br/>AAX_VComponentDescriptor, 1003<br/></p>
<p>AddAuxOutputStem<br/>AAX_IACFComponentDescriptor, 679<br/>AAX_IComponentDescriptor, 814<br/>AAX_VComponentDescriptor, 1006<br/></p>
<p>AddCategory<br/>AAX_IACFEffectDescriptor, 701<br/>AAX_IEffectDescriptor, 866<br/>AAX_VEffectDescriptor, 1036<br/></p>
<p>AddCategoryBypassParameter<br/>AAX_IACFEffectDescriptor, 701<br/>AAX_IEffectDescriptor, 866<br/>AAX_VEffectDescriptor, 1036<br/></p>
<p>AddClock<br/>AAX_IACFComponentDescriptor, 678<br/>AAX_IComponentDescriptor, 812<br/>AAX_VComponentDescriptor, 1004<br/></p>
<p>AddComponent<br/>AAX_IACFEffectDescriptor, 700<br/>AAX_IEffectDescriptor, 865<br/>AAX_VEffectDescriptor, 1035<br/></p>
<p>AddControlMIDINode<br/>AAX_IACFEffectDescriptor_V2, 703<br/>AAX_IEffectDescriptor, 868<br/>AAX_VEffectDescriptor, 1038<br/></p>
<p>AddDataInPort<br/>AAX_IACFComponentDescriptor, 678<br/>AAX_IComponentDescriptor, 813<br/>AAX_VComponentDescriptor, 1005<br/></p>
<p>AddDmaInstance<br/>AAX_IACFComponentDescriptor, 680<br/>AAX_IComponentDescriptor, 815<br/>AAX_VComponentDescriptor, 1008<br/></p>
<p>AddDouble<br/>AAX_CChunkDataParser, 426<br/></p>
<p>AddEffect<br/>AAX_IACFCollection, 672<br/>AAX_ICollection, 804<br/>AAX_VCollection, 996<br/></p>
<p>AddFloat<br/>AAX_CChunkDataParser, 426<br/></p>
<p>AddInt16<br/>AAX_CChunkDataParser, 426<br/></p>
<p>AddInt32<br/>AAX_CChunkDataParser, 426<br/></p>
<p>Additional AAX features, 82<br/>Additional Topics, 112<br/>AddMeterDescription<br/></p>
<p>AAX_IACFEffectDescriptor, 703<br/>AAX_IEffectDescriptor, 868<br/>AAX_VEffectDescriptor, 1037<br/></p>
<p>AddMeters<br/>AAX_IACFComponentDescriptor, 683<br/>AAX_IComponentDescriptor, 816<br/>AAX_VComponentDescriptor, 1008<br/></p>
<p>AddMIDINode<br/>AAX_IACFComponentDescriptor, 681<br/>AAX_IComponentDescriptor, 817<br/>AAX_VComponentDescriptor, 1010<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1364 INDEX<br/></b></p>
<p>AddName<br/>AAX_IACFEffectDescriptor, 701<br/>AAX_IEffectDescriptor, 865<br/>AAX_VEffectDescriptor, 1035<br/></p>
<p>AddPackageName<br/>AAX_IACFCollection, 673<br/>AAX_ICollection, 805<br/>AAX_VCollection, 997<br/></p>
<p>AddParameter<br/>AAX_CParameterManager, 571<br/></p>
<p>AddPointerProperty<br/>AAX_IPropertyMap, 932<br/>AAX_VPropertyMap, 1062, 1063<br/></p>
<p>AddPrivateData<br/>AAX_IACFComponentDescriptor, 680<br/>AAX_IComponentDescriptor, 814<br/>AAX_VComponentDescriptor, 1007<br/></p>
<p>AddProcessProc<br/>AAX_IACFComponentDescriptor_V3, 685<br/>AAX_IComponentDescriptor, 821<br/>AAX_VComponentDescriptor, 1012<br/></p>
<p>AddProcessProc_Native<br/>AAX_IACFComponentDescriptor, 681<br/>AAX_IComponentDescriptor, 818, 822<br/>AAX_VComponentDescriptor, 1011<br/></p>
<p>AddProcessProc_TI<br/>AAX_IACFComponentDescriptor, 682<br/>AAX_IComponentDescriptor, 820<br/>AAX_VComponentDescriptor, 1012<br/></p>
<p>AddProcPtr<br/>AAX_IACFEffectDescriptor, 702<br/>AAX_IEffectDescriptor, 867<br/>AAX_VEffectDescriptor, 1036<br/></p>
<p>AddProperty<br/>AAX_IACFPropertyMap, 770<br/>AAX_IPropertyMap, 931<br/>AAX_VPropertyMap, 1062<br/></p>
<p>AddProperty64<br/>AAX_IACFPropertyMap_V3, 773<br/></p>
<p>AddPropertyWithIDArray<br/>AAX_IACFPropertyMap_V2, 771<br/>AAX_IPropertyMap, 933<br/>AAX_VPropertyMap, 1064<br/></p>
<p>AddRef<br/>IACFUnknown, 1096<br/></p>
<p>AddReservedField<br/>AAX_IACFComponentDescriptor, 676<br/>AAX_IComponentDescriptor, 817<br/>AAX_VComponentDescriptor, 1002<br/></p>
<p>AddResourceInfo<br/>AAX_IACFEffectDescriptor, 702<br/>AAX_IEffectDescriptor, 867<br/>AAX_VEffectDescriptor, 1037<br/></p>
<p>AddResult<br/>AAX_CTask, 655<br/>AAX_IACFTask, 779<br/>AAX_ITask, 946<br/>AAX_VTask, 1070<br/></p>
<p>AddSampleRate<br/>AAX_IACFComponentDescriptor, 677<br/>AAX_IComponentDescriptor, 812<br/>AAX_VComponentDescriptor, 1004<br/></p>
<p>AddShortenedName<br/>AAX_CParameter&lt; T &gt;, 539<br/>AAX_CStatelessParameter, 606<br/>AAX_IParameter, 904<br/></p>
<p>AddShortenedStrings<br/>AAX_CBinaryDisplayDelegate&lt; T &gt;, 420<br/>AAX_CStateDisplayDelegate&lt; T &gt;, 601<br/></p>
<p>AddSideChainIn<br/>AAX_IACFComponentDescriptor, 678<br/>AAX_IComponentDescriptor, 813<br/>AAX_VComponentDescriptor, 1005<br/></p>
<p>AddString<br/>AAX_CChunkDataParser, 427<br/></p>
<p>AddSynchronizedParameter<br/>AAX_CMonolithicParameters, 512<br/></p>
<p>AddTask<br/>AAX_CTaskAgent, 658<br/>AAX_IACFTaskAgent, 781<br/>AAX_IHostTaskAgent, 883<br/>AAX_VHostTaskAgent, 1046<br/></p>
<p>AddTemporaryData<br/>AAX_IACFComponentDescriptor_V2, 684<br/>AAX_IComponentDescriptor, 815<br/>AAX_VComponentDescriptor, 1007<br/></p>
<p>alignFree<br/>AAX, 385<br/></p>
<p>alignMalloc<br/>AAX, 385<br/></p>
<p>AnalyzeAudio<br/>AAX_CHostProcessor, 491<br/>AAX_IACFHostProcessor, 745<br/></p>
<p>Any<br/>AAX::Exception::Any, 1089, 1090<br/></p>
<p>Append<br/>AAX_CString, 634<br/></p>
<p>AppendHex<br/>AAX_CString, 634<br/></p>
<p>AppendNumber<br/>AAX_CString, 634<br/></p>
<p>Assert<br/>AAX_IACFHostServices, 751<br/></p>
<p>AsString<br/>AAX, 377<br/></p>
<p>AsStringFourChar<br/>AAX, 382<br/></p>
<p>AsStringIDTriad<br/>AAX, 383<br/></p>
<p>AsStringInt32<br/>AAX, 382<br/></p>
<p>AsStringMIDIStream_Debug<br/>Other Extensions, 280<br/></p>
<p>AsStringPropertyValue<br/>AAX, 382<br/></p>
<p>AsStringResult<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1365<br/></b></p>
<p>AAX, 383<br/>AsStringStemChannel<br/></p>
<p>AAX, 383<br/>AsStringStemFormat<br/></p>
<p>AAX, 383<br/>AsStringSupportLevel<br/></p>
<p>AAX, 384<br/>AsStringUInt32<br/></p>
<p>AAX, 382<br/>AsUnknown<br/></p>
<p>AAX_VPageTable, 1057<br/>Automatable<br/></p>
<p>AAX_CParameter&lt; T &gt;, 552<br/>AAX_CStatelessParameter, 607<br/>AAX_IParameter, 905<br/></p>
<p>AutomationDelegate<br/>AAX_CEffectParameters, 478<br/></p>
<p>Auxiliary Output Stems, 83<br/></p>
<p>Background processing callback, 84<br/>Basic parameter update sequences, 127<br/>Binary2String<br/></p>
<p>AAX, 381<br/>BoolToNormalized<br/></p>
<p>AAX_CEffectParameters.h, 1137<br/>BUILD_DATA_FAILED<br/></p>
<p>AAX_ChunkDataParserDefs, 401<br/>BuildChunkData<br/></p>
<p>AAX_CEffectParameters, 480<br/></p>
<p>Call<br/>AAX_CPacketHandler&lt; TWorker &gt;, 528<br/>AAX_IPacketHandler, 889<br/></p>
<p>CancelAllTasks<br/>AAX_CTaskAgent, 658<br/>AAX_IACFTaskAgent, 781<br/>AAX_IHostTaskAgent, 883<br/>AAX_VHostTaskAgent, 1047<br/></p>
<p>Canceled<br/>Task agent interface, 106<br/></p>
<p>Caseless_strcmp<br/>AAX, 381<br/></p>
<p>CBackgroundProc<br/>AAX_Component&lt; aContextType &gt;, 522<br/></p>
<p>cBigEndian<br/>AAX, 393<br/></p>
<p>cDefaultMasterBypassID<br/>AAX_CEffectParameters.h, 1137<br/></p>
<p>cDenormalAvoidanceOffset<br/>AAX, 396<br/></p>
<p>CeilLog2<br/>AAX, 390<br/></p>
<p>cFloatDenormalAvoidanceOffset<br/>AAX, 396<br/></p>
<p>cGiga<br/>AAX, 396<br/></p>
<p>cHalfPi<br/>AAX, 394<br/></p>
<p>Change Log, 331<br/></p>
<p>Check<br/>AAX_AggregateResult, 405<br/></p>
<p>cInitialSeedValue<br/>AAX, 397<br/></p>
<p>CInitPrivateDataProc<br/>AAX_Component&lt; aContextType &gt;, 522<br/></p>
<p>CInstanceInitProc<br/>AAX_Component&lt; aContextType &gt;, 522<br/></p>
<p>cKilo<br/>AAX, 396<br/></p>
<p>ClampToZero<br/>AAX, 387<br/></p>
<p>Clear<br/>AAX_AggregateResult, 405<br/>AAX_CAtomicQueue&lt; T, S &gt;, 414<br/>AAX_CChunkDataParser, 429<br/>AAX_CheckedResult, 485<br/>AAX_CString, 633<br/>AAX_CStringAbbreviations, 642<br/>AAX_IACFComponentDescriptor, 675<br/>AAX_IACFPageTable, 754<br/>AAX_IComponentDescriptor, 810<br/>AAX_IContainer, 824<br/>AAX_IPageTable, 891<br/>AAX_IPointerQueue&lt; T &gt;, 926<br/>AAX_VComponentDescriptor, 1002<br/>AAX_VPageTable, 1048<br/>AAX_VSessionDocument, 1066<br/></p>
<p>ClearMappedParameter<br/>AAX_IACFPageTable, 756<br/>AAX_IPageTable, 893<br/>AAX_VPageTable, 1051<br/></p>
<p>ClearMappedParameterByID<br/>AAX, 380<br/></p>
<p>ClearMeterClipped<br/>AAX_IACFController, 693<br/>AAX_IController, 834<br/>AAX_VController, 1026<br/></p>
<p>ClearMeterPeakValue<br/>AAX_IACFController, 692<br/>AAX_IController, 833<br/>AAX_VController, 1025<br/></p>
<p>ClearNameVariationsForParameter<br/>AAX_IACFPageTable_V2, 762<br/>AAX_IPageTable, 898<br/>AAX_VPageTable, 1056<br/></p>
<p>ClearParameterNameVariations<br/>AAX_IACFPageTable_V2, 762<br/>AAX_IPageTable, 898<br/>AAX_VPageTable, 1055<br/></p>
<p>ClearShortenedNames<br/>AAX_CParameter&lt; T &gt;, 540<br/>AAX_CStatelessParameter, 607<br/>AAX_IParameter, 904<br/></p>
<p>cLittleEndian<br/>AAX, 393<br/></p>
<p>Clone<br/>AAX_CBinaryDisplayDelegate&lt; T &gt;, 418<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1366 INDEX<br/></b></p>
<p>AAX_CBinaryTaperDelegate&lt; T &gt;, 421<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p>431<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>501<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>504<br/>AAX_CNumberDisplayDelegate&lt; T, Precision,<br/></p>
<p>SpaceAfter &gt;, 518<br/>AAX_CPacketHandler&lt; TWorker &gt;, 528<br/>AAX_CParameterValue&lt; T &gt;, 576<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p>582<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, Real-<br/></p>
<p>Precision &gt;, 586<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>591<br/>AAX_CStateDisplayDelegate&lt; T &gt;, 600<br/>AAX_CStateTaperDelegate&lt; T &gt;, 626<br/>AAX_CStringDisplayDelegate&lt; T &gt;, 650<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;, 661<br/>AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p>665<br/>AAX_IDisplayDelegate&lt; T &gt;, 846<br/>AAX_IDisplayDelegateDecorator&lt; T &gt;, 851<br/>AAX_IPacketHandler, 889<br/>AAX_IParameterValue, 922<br/>AAX_ITaperDelegate&lt; T &gt;, 940<br/></p>
<p>CloneValue<br/>AAX_CParameter&lt; T &gt;, 538<br/>AAX_CStatelessParameter, 605<br/>AAX_IParameter, 903<br/></p>
<p>cMega<br/>AAX, 396<br/></p>
<p>cMicro<br/>AAX, 395<br/></p>
<p>cMilli<br/>AAX, 395<br/></p>
<p>cNano<br/>AAX, 396<br/></p>
<p>cNeg3dB<br/>AAX, 395<br/></p>
<p>cNeg6dB<br/>AAX, 395<br/></p>
<p>cNormalizeLongToAmplitudeOne<br/>AAX, 395<br/></p>
<p>cNormalizeLongToAmplitudeOneHalf<br/>AAX, 395<br/></p>
<p>CoarseSampleRate<br/>AAX_SampleRateUtils.h, 1283<br/></p>
<p>CoarseSampleRateFactor<br/>AAX_SampleRateUtils.h, 1284<br/></p>
<p>CoarseSampleRateIndex<br/>AAX_SampleRateUtils.h, 1284<br/></p>
<p>Compare<br/>AAX_CStateDisplayDelegate&lt; T &gt;, 602<br/></p>
<p>CompareActiveChunk<br/>AAX_CEffectParameters, 470<br/></p>
<p>AAX_IACFEffectParameters, 733<br/>cOneOverRootTwo<br/></p>
<p>AAX, 394<br/>ConstrainRealValue<br/></p>
<p>AAX_CBinaryTaperDelegate&lt; T &gt;, 422<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>501<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>505<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, Real-<br/></p>
<p>Precision &gt;, 587<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>591<br/>AAX_CStateTaperDelegate&lt; T &gt;, 627<br/>AAX_ITaperDelegate&lt; T &gt;, 941<br/></p>
<p>Controller<br/>AAX_CEffectDirectData, 437<br/>AAX_CEffectParameters, 477<br/>AAX_CHostProcessor, 496<br/></p>
<p>CopyAttribute<br/>IACFDefinition, 1094<br/></p>
<p>CopyPageTable<br/>AAX, 380<br/></p>
<p>CopyTableForEffect<br/>AAX_IACFPageTableController, 764<br/></p>
<p>CopyTableForEffectFromFile<br/>AAX_IACFPageTableController_V2, 766<br/></p>
<p>CopyTableOfLayoutForEffect<br/>AAX_IACFPageTableController, 765<br/></p>
<p>CopyTableOfLayoutFromFile<br/>AAX_IACFPageTableController_V2, 767<br/></p>
<p>Core AAX Interface, 58<br/>CPacketAllocator<br/></p>
<p>AAX_Component&lt; aContextType &gt;, 522<br/>cPi<br/></p>
<p>AAX, 394<br/>cPico<br/></p>
<p>AAX, 396<br/>cPos3dB<br/></p>
<p>AAX, 394<br/>cPos6dB<br/></p>
<p>AAX, 395<br/>cPreviewID<br/></p>
<p>AAX_CEffectParameters.h, 1137<br/>CProcessProc<br/></p>
<p>AAX_Component&lt; aContextType &gt;, 522<br/>cQuarterPi<br/></p>
<p>AAX, 394<br/>Create<br/></p>
<p>AAX_VPropertyMap, 1061<br/>CreateTableCopyForEffect<br/></p>
<p>AAX_IController, 836<br/>AAX_VController, 1027<br/></p>
<p>CreateTableCopyForEffectFromFile<br/>AAX_IController, 839<br/>AAX_VController, 1028<br/></p>
<p>CreateTableCopyForLayout<br/>AAX_IController, 837<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1367<br/></b></p>
<p>AAX_VController, 1027<br/>CreateTableCopyForLayoutFromFile<br/></p>
<p>AAX_IController, 839<br/>AAX_VController, 1029<br/></p>
<p>CreateViewContainer<br/>AAX_CEffectGUI, 444<br/></p>
<p>CreateViewContents<br/>AAX_CEffectGUI, 444<br/></p>
<p>cRootTwo<br/>AAX, 394<br/></p>
<p>cSeedDivisor<br/>AAX, 397<br/></p>
<p>CString<br/>AAX_CString, 637<br/></p>
<p>cTwoPi<br/>AAX, 394<br/></p>
<p>Data<br/>AAX_CArrayDataBuffer&lt; D &gt;, 409<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;, 412<br/>AAX_CStringDataBuffer, 645<br/>AAX_CStringDataBufferOfType&lt; T &gt;, 648<br/>AAX_IACFDataBuffer, 698<br/>AAX_IDataBufferWrapper, 842<br/>AAX_ISessionDocument::TempoMap, 1100<br/>AAX_VDataBufferWrapper, 1030<br/>AAX_VSessionDocument::VTempoMap, 1101<br/></p>
<p>Data model interface, 75<br/>Data model overrides interface, 77<br/></p>
<p>GetNumberOfChanges, 77<br/>Data1<br/></p>
<p>_acfUID, 403<br/>Data2<br/></p>
<p>_acfUID, 403<br/>Data3<br/></p>
<p>_acfUID, 403<br/>Data4<br/></p>
<p>_acfUID, 403<br/>DataValue<br/></p>
<p>AAX_CChunkDataParser::DataValue, 1091<br/>DBToGain<br/></p>
<p>AAX_CommonConversions.h, 1142<br/>DeDenormal<br/></p>
<p>AAX, 386<br/>DeDenormalFine<br/></p>
<p>AAX, 386<br/>DEFAULT32BIT_TYPE_INCR<br/></p>
<p>AAX_ChunkDataParserDefs, 401<br/>DEFAULT32BIT_TYPE_SIZE<br/></p>
<p>AAX_ChunkDataParserDefs, 400<br/>Defaults<br/></p>
<p>AAX_CParameter&lt; T &gt;, 534<br/>AAX_CParameterValue&lt; T &gt;, 574<br/></p>
<p>DEFINE_AAX_ERROR_STRING<br/>AAX_StringUtilities.hpp, 1290<br/></p>
<p>DefineAttribute<br/>IACFDefinition, 1093<br/></p>
<p>DeleteViewContainer<br/>AAX_CEffectGUI, 444<br/></p>
<p>Desc<br/>AAX::Exception::Any, 1090<br/></p>
<p>Description callback, 59<br/>AAXRegisterPlugin, 67<br/>GetEffectDescriptions, 68<br/></p>
<p>DescriptionHost<br/>AAX_ICollection, 807<br/>AAX_VCollection, 999<br/>AAX_VDescriptionHost, 1032, 1033<br/></p>
<p>DigiTrace Guide, 257<br/>Direct data access interface, 87<br/>Direct Memory Access, 86<br/>Dispatch<br/></p>
<p>AAX_CPacketDispatcher, 526<br/>Display delegate decorators, 111<br/>Display delegates, 109<br/>DisplayDelegate<br/></p>
<p>AAX_CParameter&lt; T &gt;, 558<br/>Distributing Your AAX Plug-In, 285<br/>DoMIDITransfers<br/></p>
<p>AAX_CEffectParameters, 476<br/>AAX_IACFEffectParameters, 735<br/></p>
<p>Done<br/>Task agent interface, 106<br/></p>
<p>DoTableLookupExtraFast<br/>AAX_FastInterpolatedTableLookup&lt; TFLOAT,<br/></p>
<p>DFLOAT &gt;, 668<br/>DoTableLookupExtraFastMulti<br/></p>
<p>AAX_FastInterpolatedTableLookup&lt; TFLOAT,<br/>DFLOAT &gt;, 668<br/></p>
<p>DOUBLE_STRING_IDENTIFIER<br/>AAX_ChunkDataParserDefs, 399<br/></p>
<p>DOUBLE_TYPE<br/>AAX_ChunkDataParserDefs, 399<br/></p>
<p>DOUBLE_TYPE_INCR<br/>AAX_ChunkDataParserDefs, 399<br/></p>
<p>DOUBLE_TYPE_SIZE<br/>AAX_ChunkDataParserDefs, 399<br/></p>
<p>DoubleTo32BitDSPCoef<br/>AAX_CommonConversions.h, 1143<br/></p>
<p>DoubleTo32BitDSPCoefRnd<br/>AAX_CommonConversions.h, 1143<br/></p>
<p>DoubleToDSPCoef<br/>AAX_CommonConversions.h, 1142<br/></p>
<p>DoubleToDSPCoefRnd<br/>AAX_CommonConversions.h, 1144<br/></p>
<p>DoubleToLong<br/>AAX_CommonConversions.h, 1142<br/></p>
<p>DoubleToLongControl<br/>AAX_SliderConversions.h, 1287<br/></p>
<p>DoubleToLongControlNonlinear<br/>AAX_SliderConversions.h, 1287<br/></p>
<p>Draw<br/>AAX_CEffectGUI, 442<br/>AAX_IACFEffectGUI, 711<br/></p>
<p>DSH Guide, 268<br/>DSH_Guide.doxygen, 1322<br/>DSPCoefToDouble<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1368 INDEX<br/></b></p>
<p>AAX_CommonConversions.h, 1143<br/>DTT Guide, 274<br/>DTT_Guide.doxygen, 1322<br/>DuplicatePropertyMap<br/></p>
<p>AAX_IComponentDescriptor, 818<br/>AAX_VComponentDescriptor, 1011<br/></p>
<p>e176400SampleRate<br/>AAX, 377<br/></p>
<p>e192000SampleRate<br/>AAX, 377<br/></p>
<p>e44100SampleRate<br/>AAX, 377<br/></p>
<p>e48000SampleRate<br/>AAX, 377<br/></p>
<p>e88200SampleRate<br/>AAX, 377<br/></p>
<p>e96000SampleRate<br/>AAX, 377<br/></p>
<p>EChannelModeData<br/>AAX, 376<br/></p>
<p>eChannelModeData_AllNotesOff<br/>AAX, 376<br/></p>
<p>eChannelModeData_AllSoundOff<br/>AAX, 376<br/></p>
<p>eChannelModeData_LocalControl<br/>AAX, 376<br/></p>
<p>eChannelModeData_OmniOff<br/>AAX, 376<br/></p>
<p>eChannelModeData_OmniOn<br/>AAX, 376<br/></p>
<p>eChannelModeData_PolyOff<br/>AAX, 376<br/></p>
<p>eChannelModeData_PolyOn<br/>AAX, 376<br/></p>
<p>eChannelModeData_ResetControllers<br/>AAX, 376<br/></p>
<p>EffectInit<br/>AAX_CEffectParameters, 479<br/></p>
<p>EffectParameters<br/>AAX_CEffectDirectData, 437<br/>AAX_CHostProcessor, 497<br/></p>
<p>EMode<br/>AAX_IDma, 856<br/></p>
<p>eMode_Burst<br/>AAX_IDma, 856<br/></p>
<p>eMode_Error<br/>AAX_IDma, 856<br/></p>
<p>eMode_Gather<br/>AAX_IDma, 856<br/></p>
<p>eMode_Scatter<br/>AAX_IDma, 856<br/></p>
<p>Empty<br/>AAX_CString, 633<br/>AAX_IACFPageTable, 754<br/>AAX_IPageTable, 891<br/>AAX_VPageTable, 1049<br/></p>
<p>ENDIANSWAP_H<br/>AAX_EndianSwap.h, 1158<br/></p>
<p>eParameterDefaultMaxIdentifierLength<br/>AAX_CParameterValue&lt; T &gt;, 574<br/></p>
<p>eParameterDefaultMaxIdentifierSize<br/>AAX_CParameterValue&lt; T &gt;, 574<br/></p>
<p>eParameterDefaultNumStepsContinuous<br/>AAX_CParameter&lt; T &gt;, 535<br/></p>
<p>eParameterDefaultNumStepsDiscrete<br/>AAX_CParameter&lt; T &gt;, 535<br/></p>
<p>eParameterTypeBool<br/>AAX_CParameter&lt; T &gt;, 534<br/></p>
<p>eParameterTypeCustom<br/>AAX_CParameter&lt; T &gt;, 534<br/></p>
<p>eParameterTypeFloat<br/>AAX_CParameter&lt; T &gt;, 534<br/></p>
<p>eParameterTypeInt32<br/>AAX_CParameter&lt; T &gt;, 534<br/></p>
<p>eParameterTypeUndefined<br/>AAX_CParameter&lt; T &gt;, 534<br/></p>
<p>EQ and Dynamics Curve Displays, 89<br/>AAX_ECurveType, 91<br/>AAX_eCurveType_Dynamics, 92<br/>AAX_eCurveType_EQ, 92<br/>AAX_eCurveType_None, 92<br/>AAX_eCurveType_Reduction, 92<br/>GetCurveData, 92<br/>GetCurveDataDisplayRange, 93<br/>GetCurveDataMeterIds, 93<br/></p>
<p>Equals<br/>AAX_CString, 637, 638<br/></p>
<p>Erase<br/>AAX_CString, 634<br/></p>
<p>Error<br/>Task agent interface, 106<br/></p>
<p>ESampleRates<br/>AAX, 377<br/></p>
<p>ESpecialData<br/>AAX, 376<br/></p>
<p>eSpecialData_AccentedClick<br/>AAX, 376<br/></p>
<p>eSpecialData_UnaccentedClick<br/>AAX, 376<br/></p>
<p>ESRUtils<br/>AAX_SampleRateUtils.h, 1283<br/></p>
<p>eSRUtils_192kIndex<br/>AAX_SampleRateUtils.h, 1283<br/></p>
<p>eSRUtils_192kRangeCoarse<br/>AAX_SampleRateUtils.h, 1283<br/></p>
<p>eSRUtils_192kRangeMax<br/>AAX_SampleRateUtils.h, 1283<br/></p>
<p>eSRUtils_192kRangeMin<br/>AAX_SampleRateUtils.h, 1283<br/></p>
<p>eSRUtils_48kIndex<br/>AAX_SampleRateUtils.h, 1283<br/></p>
<p>eSRUtils_48kRangeCoarse<br/>AAX_SampleRateUtils.h, 1283<br/></p>
<p>eSRUtils_48kRangeMax<br/>AAX_SampleRateUtils.h, 1283<br/></p>
<p>eSRUtils_48kRangeMin<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1369<br/></b></p>
<p>AAX_SampleRateUtils.h, 1283<br/>eSRUtils_96kIndex<br/></p>
<p>AAX_SampleRateUtils.h, 1283<br/>eSRUtils_96kRangeCoarse<br/></p>
<p>AAX_SampleRateUtils.h, 1283<br/>eSRUtils_96kRangeMax<br/></p>
<p>AAX_SampleRateUtils.h, 1283<br/>eSRUtils_96kRangeMin<br/></p>
<p>AAX_SampleRateUtils.h, 1283<br/>EState<br/></p>
<p>AAX_IDma, 855<br/>eState_Complete<br/></p>
<p>AAX_IDma, 856<br/>eState_Error<br/></p>
<p>AAX_IDma, 856<br/>eState_Init<br/></p>
<p>AAX_IDma, 856<br/>eState_Pending<br/></p>
<p>AAX_IDma, 856<br/>eState_Running<br/></p>
<p>AAX_IDma, 856<br/>EStatus<br/></p>
<p>AAX_IContainer, 823<br/>eStatus_NotInitialized<br/></p>
<p>AAX_IContainer, 823<br/>eStatus_Overflow<br/></p>
<p>AAX_IContainer, 823<br/>eStatus_Success<br/></p>
<p>AAX_IContainer, 823<br/>eStatus_Unavailable<br/></p>
<p>AAX_IContainer, 823<br/>eStatus_Unsupported<br/></p>
<p>AAX_IContainer, 823<br/>EStatusByte<br/></p>
<p>AAX, 375<br/>eStatusByte_ActiveSensing<br/></p>
<p>AAX, 376<br/>eStatusByte_Continue<br/></p>
<p>AAX, 376<br/>eStatusByte_MTCQuarterFrame<br/></p>
<p>AAX, 376<br/>eStatusByte_Reset<br/></p>
<p>AAX, 376<br/>eStatusByte_SongPosition<br/></p>
<p>AAX, 376<br/>eStatusByte_SongSelect<br/></p>
<p>AAX, 376<br/>eStatusByte_Start<br/></p>
<p>AAX, 376<br/>eStatusByte_Stop<br/></p>
<p>AAX, 376<br/>eStatusByte_SysExBegin<br/></p>
<p>AAX, 375<br/>eStatusByte_SysExEnd<br/></p>
<p>AAX, 376<br/>eStatusByte_TimingClock<br/></p>
<p>AAX, 376<br/>eStatusByte_TuneRequest<br/></p>
<p>AAX, 376<br/>EStatusNibble<br/></p>
<p>AAX, 375<br/>eStatusNibble_ChannelMode<br/></p>
<p>AAX, 375<br/>eStatusNibble_ChannelPressure<br/></p>
<p>AAX, 375<br/>eStatusNibble_ControlChange<br/></p>
<p>AAX, 375<br/>eStatusNibble_KeyPressure<br/></p>
<p>AAX, 375<br/>eStatusNibble_NoteOff<br/></p>
<p>AAX, 375<br/>eStatusNibble_NoteOn<br/></p>
<p>AAX, 375<br/>eStatusNibble_PitchBend<br/></p>
<p>AAX, 375<br/>eStatusNibble_ProgramChange<br/></p>
<p>AAX, 375<br/>eStatusNibble_SystemCommon<br/></p>
<p>AAX, 375<br/>eStatusNibble_SystemRealTime<br/></p>
<p>AAX, 375<br/>Example Plug-Ins, 351<br/>Exception<br/></p>
<p>AAX_CheckedResult, 484<br/>Extensions, 279<br/></p>
<p>fabs<br/>AAX, 388<br/></p>
<p>fabsf<br/>AAX, 388<br/></p>
<p>FastRndDbl2Int32<br/>AAX, 391<br/></p>
<p>FastRound2Int32<br/>AAX, 390<br/></p>
<p>FastRound2Int64<br/>AAX, 392<br/></p>
<p>FastTrunc2Int32<br/>AAX, 391<br/></p>
<p>fChunkID<br/>AAX_SPlugInChunk, 983<br/>AAX_SPlugInChunkHeader, 986<br/></p>
<p>fData<br/>AAX_SPlugInChunk, 984<br/></p>
<p>Fill<br/>AAX, 387, 388<br/></p>
<p>FilterDenormals<br/>AAX, 386<br/></p>
<p>FilterParameterIDOnSave<br/>AAX_CEffectParameters, 480<br/></p>
<p>FindDouble<br/>AAX_CChunkDataParser, 427<br/></p>
<p>FindFirst<br/>AAX_CString, 636<br/></p>
<p>FindFloat<br/>AAX_CChunkDataParser, 427<br/></p>
<p>FindInt16<br/>AAX_CChunkDataParser, 427<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1370 INDEX<br/></b></p>
<p>FindInt32<br/>AAX_CChunkDataParser, 427<br/></p>
<p>FindLast<br/>AAX_CString, 636, 637<br/></p>
<p>FindName<br/>AAX_CChunkDataParser, 429<br/></p>
<p>FindParameterMappingsInPageTable<br/>AAX, 380<br/></p>
<p>FindString<br/>AAX_CChunkDataParser, 428<br/></p>
<p>FLOAT_STRING_IDENTIFIER<br/>AAX_ChunkDataParserDefs, 399<br/></p>
<p>FLOAT_TYPE<br/>AAX_ChunkDataParserDefs, 399<br/></p>
<p>fManufacturerID<br/>AAX_SPlugInChunk, 983<br/>AAX_SPlugInChunkHeader, 986<br/></p>
<p>fName<br/>AAX_SPlugInChunk, 984<br/>AAX_SPlugInChunkHeader, 986<br/></p>
<p>ForceAnalyze<br/>AAX_IACFHostProcessorDelegate_V2, 749<br/>AAX_IHostProcessorDelegate, 879<br/>AAX_VHostProcessorDelegate, 1042<br/></p>
<p>ForceProcess<br/>AAX_IACFHostProcessorDelegate_V3, 750<br/>AAX_IHostProcessorDelegate, 879<br/>AAX_VHostProcessorDelegate, 1043<br/></p>
<p>FormatResult<br/>AAX::Exception::ResultError, 1098<br/></p>
<p>fPlugInID<br/>AAX_SPlugInChunk, 983<br/>AAX_SPlugInChunkHeader, 986<br/></p>
<p>fProductID<br/>AAX_SPlugInChunk, 983<br/>AAX_SPlugInChunkHeader, 986<br/></p>
<p>fpt<br/>AAX_CPacketHandler&lt; TWorker &gt;, 529<br/></p>
<p>fptEx<br/>AAX_CPacketHandler&lt; TWorker &gt;, 529<br/></p>
<p>fSize<br/>AAX_SPlugInChunk, 983<br/>AAX_SPlugInChunkHeader, 985<br/></p>
<p>Function<br/>AAX::Exception::Any, 1091<br/></p>
<p>fVersion<br/>AAX_SPlugInChunk, 983<br/>AAX_SPlugInChunkHeader, 986<br/></p>
<p>GainToDB<br/>AAX_CommonConversions.h, 1142<br/></p>
<p>GenerateCoefficients<br/>AAX_CEffectParameters, 467<br/>AAX_CMonolithicParameters, 513<br/>AAX_IACFEffectParameters, 730<br/></p>
<p>GenerateSingleValuePacket<br/>AAX_CPacketDispatcher, 527<br/></p>
<p>Get<br/>AAX_CParameterValue&lt; T &gt;, 576<br/></p>
<p>AAX_CString, 632<br/>AAX_CStringAbbreviations, 642<br/>AAX_IString, 938<br/>SAutoArray&lt; T &gt;, 1099<br/></p>
<p>GetArgumentOfType<br/>AAX_CTask, 654<br/>AAX_IACFTask, 778<br/>AAX_ITask, 945<br/>AAX_VTask, 1069<br/></p>
<p>GetAttributeInfo<br/>IACFDefinition, 1094<br/></p>
<p>GetAudio<br/>AAX_CHostProcessor, 496<br/>AAX_IACFHostProcessorDelegate, 748<br/>AAX_IHostProcessorDelegate, 878<br/>AAX_VHostProcessorDelegate, 1042<br/></p>
<p>GetBarBeatPosition<br/>AAX_IACFTransport, 785<br/>AAX_ITransport, 953<br/>AAX_VTransport, 1077<br/></p>
<p>GetBaseOffset<br/>AAX_IDma, 863<br/></p>
<p>GetBoolFromNormalizedValue<br/>AAX_CParameter&lt; T &gt;, 548, 563<br/>AAX_CStatelessParameter, 615<br/>AAX_IParameter, 911<br/></p>
<p>GetBurstLength<br/>AAX_IDma, 859<br/></p>
<p>GetChunk<br/>AAX_CEffectParameters, 469<br/>AAX_IACFEffectParameters, 732<br/></p>
<p>GetChunkData<br/>AAX_CChunkDataParser, 428<br/></p>
<p>GetChunkDataSize<br/>AAX_CChunkDataParser, 428<br/></p>
<p>GetChunkIDFromIndex<br/>AAX_CEffectParameters, 469<br/>AAX_IACFEffectParameters, 731<br/></p>
<p>GetChunkSize<br/>AAX_CEffectParameters, 469<br/>AAX_IACFEffectParameters, 731<br/></p>
<p>GetChunkVersion<br/>AAX_CChunkDataParser, 428<br/></p>
<p>GetClipNameSuffix<br/>AAX_CHostProcessor, 493<br/>AAX_IACFHostProcessor_V2, 747<br/></p>
<p>GetCoefficient<br/>AAX_Map, 964<br/></p>
<p>GetController<br/>AAX_CEffectGUI, 445<br/>AAX_CSessionDocumentClient, 596, 597<br/>AAX_CTaskAgent, 659<br/></p>
<p>GetCStringOfLength<br/>AAX, 381<br/></p>
<p>GetCurrentAutomationTimestamp<br/>AAX_IACFController_V2, 695<br/>AAX_IController, 835<br/>AAX_VController, 1020<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1371<br/></b></p>
<p>GetCurrentLoopPosition<br/>AAX_IACFTransport, 784<br/>AAX_ITransport, 951<br/>AAX_VTransport, 1075<br/></p>
<p>GetCurrentMeter<br/>AAX_IACFTransport, 783<br/>AAX_ITransport, 950<br/>AAX_VTransport, 1073<br/></p>
<p>GetCurrentMeterValue<br/>AAX_IACFController, 692<br/>AAX_IController, 833<br/>AAX_VController, 1024<br/></p>
<p>GetCurrentNativeSampleLocation<br/>AAX_IACFTransport, 784<br/>AAX_ITransport, 952<br/>AAX_VTransport, 1076<br/></p>
<p>GetCurrentTempo<br/>AAX_IACFTransport, 782<br/>AAX_ITransport, 950<br/>AAX_VTransport, 1073<br/></p>
<p>GetCurrentTickPosition<br/>AAX_IACFTransport, 783<br/>AAX_ITransport, 951<br/>AAX_VTransport, 1075<br/></p>
<p>GetCurrentTicksPerBeat<br/>AAX_IACFTransport, 786<br/>AAX_ITransport, 954<br/>AAX_VTransport, 1077<br/></p>
<p>GetCurveData<br/>AAX_CEffectParameters, 472<br/>EQ and Dynamics Curve Displays, 92<br/></p>
<p>GetCurveDataDisplayRange<br/>AAX_CEffectParameters, 473<br/>EQ and Dynamics Curve Displays, 93<br/></p>
<p>GetCurveDataMeterIds<br/>AAX_CEffectParameters, 473<br/>EQ and Dynamics Curve Displays, 93<br/></p>
<p>GetCustomData<br/>AAX_CEffectParameters, 475<br/>AAX_IACFEffectParameters, 734<br/></p>
<p>GetCustomLabel<br/>AAX_CEffectGUI, 443<br/>AAX_IACFEffectGUI, 712<br/></p>
<p>GetCustomTickPosition<br/>AAX_IACFTransport, 785<br/>AAX_ITransport, 952<br/>AAX_VTransport, 1076<br/></p>
<p>GetCycleCount<br/>AAX_IACFController, 689<br/>AAX_IController, 828<br/>AAX_VController, 1019<br/></p>
<p>GetDefaultValue<br/>AAX_CParameter&lt; T &gt;, 558<br/></p>
<p>GetDmaMode<br/>AAX_IDma, 858<br/></p>
<p>GetDmaState<br/>AAX_IDma, 857<br/></p>
<p>GetDocumentData<br/></p>
<p>AAX_IACFSessionDocument, 774<br/>AAX_ISessionDocument, 935<br/>AAX_VSessionDocument, 1066<br/></p>
<p>GetDoubleFromNormalizedValue<br/>AAX_CParameter&lt; T &gt;, 549, 564<br/>AAX_CStatelessParameter, 616<br/>AAX_IParameter, 913<br/></p>
<p>GetDst<br/>AAX_IDma, 859<br/></p>
<p>GetDstEnd<br/>AAX_CHostProcessor, 495<br/></p>
<p>GetDstStart<br/>AAX_CHostProcessor, 495<br/></p>
<p>GetEffectDescriptions<br/>Description callback, 68<br/></p>
<p>GetEffectID<br/>AAX_IACFController, 687<br/>AAX_IController, 827<br/>AAX_VController, 1016<br/></p>
<p>GetEffectParameters<br/>AAX_CEffectGUI, 445<br/>AAX_CHostProcessor, 493<br/>AAX_CSessionDocumentClient, 597<br/>AAX_CTaskAgent, 659<br/></p>
<p>GetFastInt32RPDF<br/>AAX, 392<br/></p>
<p>GetFastRPDFWithAmplitudeOne<br/>AAX, 393<br/></p>
<p>GetFeetFramesInfo<br/>AAX_IACFTransport_V2, 787<br/>AAX_ITransport, 955<br/>AAX_VTransport, 1078<br/></p>
<p>GetFifoBuffer<br/>AAX_IDma, 861<br/></p>
<p>GetFifoSize<br/>AAX_IDma, 863<br/></p>
<p>GetFirstX<br/>AAX_Map, 965<br/></p>
<p>GetFirstY<br/>AAX_Map, 965<br/></p>
<p>GetFloatFromNormalizedValue<br/>AAX_CParameter&lt; T &gt;, 549, 563<br/>AAX_CStatelessParameter, 615<br/>AAX_IParameter, 912<br/></p>
<p>GetHDTimeCodeInfo<br/>AAX_IACFTransport_V3, 789<br/>AAX_ITransport, 955<br/>AAX_VTransport, 1079<br/></p>
<p>GetHostName<br/>AAX_IACFController_V2, 696<br/>AAX_IController, 835<br/>AAX_VController, 1021<br/></p>
<p>GetHostProcessorDelegate<br/>AAX_CHostProcessor, 493, 494<br/></p>
<p>GetHostVersion<br/>AAX_ICollection, 806<br/>AAX_VCollection, 998<br/></p>
<p>GetHybridSignalLatency<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1372 INDEX<br/></b></p>
<p>AAX_IACFController_V2, 695<br/>AAX_VController, 1018<br/>Hybrid Processing architecture, 96<br/></p>
<p>GetID<br/>AAX_CPacket, 524<br/></p>
<p>GetInputRange<br/>AAX_CHostProcessor, 494<br/></p>
<p>GetInputStemFormat<br/>AAX_IACFController, 688<br/>AAX_IController, 827<br/>AAX_VController, 1017<br/></p>
<p>GetInt32FromNormalizedValue<br/>AAX_CParameter&lt; T &gt;, 548, 563<br/>AAX_CStatelessParameter, 615<br/>AAX_IParameter, 912<br/></p>
<p>GetInt32RPDF<br/>AAX, 392<br/></p>
<p>GetIsAudioSuite<br/>AAX_IACFController_V3, 697<br/>AAX_IController, 836<br/>AAX_VController, 1019<br/></p>
<p>GetIUnknown<br/>AAX_IPropertyMap, 934<br/>AAX_VCollection, 1000<br/>AAX_VComponentDescriptor, 1014<br/>AAX_VEffectDescriptor, 1038<br/>AAX_VPropertyMap, 1065<br/></p>
<p>GetKeySignature<br/>AAX_IACFTransport_V5, 790<br/>AAX_ITransport, 957<br/>AAX_VTransport, 1080<br/></p>
<p>GetLastX<br/>AAX_Map, 965<br/></p>
<p>GetLastY<br/>AAX_Map, 965<br/></p>
<p>GetLinearBuffer<br/>AAX_IDma, 861<br/></p>
<p>GetLocation<br/>AAX_CHostProcessor, 494<br/></p>
<p>getLowestSampleRateInMask<br/>AAX_Enums.h, 1205<br/></p>
<p>GetMappedParameterID<br/>AAX_IACFPageTable, 757<br/>AAX_IPageTable, 894<br/>AAX_VPageTable, 1051<br/></p>
<p>getMaskForSampleRate<br/>AAX_Enums.h, 1205<br/></p>
<p>GetMasterBypassParameter<br/>AAX_CEffectParameters, 455<br/>AAX_IACFEffectParameters, 718<br/></p>
<p>GetMaximumValue<br/>AAX_CBinaryTaperDelegate&lt; T &gt;, 421<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>501<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>505<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, Real-<br/></p>
<p>Precision &gt;, 586<br/></p>
<p>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;,<br/>591<br/></p>
<p>AAX_CStateTaperDelegate&lt; T &gt;, 627<br/>AAX_ITaperDelegate&lt; T &gt;, 940<br/></p>
<p>GetMaxMinusMin<br/>AAX_FastInterpolatedTableLookup&lt; TFLOAT,<br/></p>
<p>DFLOAT &gt;, 669<br/>GetMeterClipped<br/></p>
<p>AAX_IACFController, 693<br/>AAX_IController, 834<br/>AAX_VController, 1025<br/></p>
<p>GetMeterCount<br/>AAX_IACFController, 693<br/>AAX_IController, 834<br/>AAX_VController, 1026<br/></p>
<p>GetMeterPeakValue<br/>AAX_IACFController, 692<br/>AAX_IController, 833<br/>AAX_VController, 1025<br/></p>
<p>GetMin<br/>AAX_FastInterpolatedTableLookup&lt; TFLOAT,<br/></p>
<p>DFLOAT &gt;, 668<br/>GetMinimumValue<br/></p>
<p>AAX_CBinaryTaperDelegate&lt; T &gt;, 422<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>501<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>505<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, Real-<br/></p>
<p>Precision &gt;, 586<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>591<br/>AAX_CStateTaperDelegate&lt; T &gt;, 627<br/>AAX_ITaperDelegate&lt; T &gt;, 941<br/></p>
<p>GetModifiers<br/>AAX_IACFViewContainer, 793<br/>AAX_IViewContainer, 959<br/>AAX_VViewContainer, 1083<br/></p>
<p>GetNameVariationParameterIDAtIndex<br/>AAX_IACFPageTable_V2, 759<br/>AAX_IPageTable, 895<br/>AAX_VPageTable, 1053<br/></p>
<p>GetNextMIDIPacket<br/>AAX_IACFController, 693<br/>AAX_IController, 835<br/>AAX_VController, 1026<br/></p>
<p>GetNodeBuffer<br/>AAX_IMIDINode, 887<br/></p>
<p>GetNormalizedDefaultValue<br/>AAX_CParameter&lt; T &gt;, 540<br/>AAX_CStatelessParameter, 609<br/>AAX_IParameter, 906<br/></p>
<p>GetNormalizedValue<br/>AAX_CParameter&lt; T &gt;, 541<br/>AAX_CStatelessParameter, 609<br/>AAX_IParameter, 906<br/></p>
<p>GetNormalizedValueFromBool<br/>AAX_CParameter&lt; T &gt;, 546, 561<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1373<br/></b></p>
<p>AAX_CStatelessParameter, 612<br/>AAX_IParameter, 909<br/></p>
<p>GetNormalizedValueFromDouble<br/>AAX_CParameter&lt; T &gt;, 547, 562<br/>AAX_CStatelessParameter, 614<br/>AAX_IParameter, 911<br/></p>
<p>GetNormalizedValueFromFloat<br/>AAX_CParameter&lt; T &gt;, 547, 562<br/>AAX_CStatelessParameter, 613<br/>AAX_IParameter, 910<br/></p>
<p>GetNormalizedValueFromInt32<br/>AAX_CParameter&lt; T &gt;, 546, 561<br/>AAX_CStatelessParameter, 613<br/>AAX_IParameter, 910<br/></p>
<p>GetNormalizedValueFromStep<br/>AAX_CParameter&lt; T &gt;, 542<br/>AAX_CStatelessParameter, 611<br/>AAX_IParameter, 908<br/></p>
<p>GetNormalizedValueFromString<br/>AAX_CParameter&lt; T &gt;, 548<br/>AAX_CStatelessParameter, 614<br/>AAX_IParameter, 911<br/></p>
<p>GetNumberOfChanges<br/>AAX_CEffectParameters, 471<br/>Data model overrides interface, 77<br/></p>
<p>GetNumberOfChunks<br/>AAX_CEffectParameters, 468<br/>AAX_IACFEffectParameters, 731<br/></p>
<p>GetNumberOfParameters<br/>AAX_CEffectParameters, 455<br/>AAX_IACFEffectParameters, 718<br/></p>
<p>GetNumberOfSteps<br/>AAX_CParameter&lt; T &gt;, 541<br/>AAX_CStatelessParameter, 610<br/>AAX_IParameter, 907<br/></p>
<p>GetNumBursts<br/>AAX_IDma, 860<br/></p>
<p>GetNumMappedParameterIDs<br/>AAX_IACFPageTable, 756<br/>AAX_IPageTable, 893<br/>AAX_VPageTable, 1050<br/></p>
<p>GetNumNameVariationsForParameter<br/>AAX_IACFPageTable_V2, 759<br/>AAX_IPageTable, 896<br/>AAX_VPageTable, 1053<br/></p>
<p>GetNumOffsets<br/>AAX_IDma, 862<br/></p>
<p>GetNumPages<br/>AAX_IACFPageTable, 755<br/>AAX_IPageTable, 891<br/>AAX_VPageTable, 1049<br/></p>
<p>GetNumParametersWithNameVariations<br/>AAX_IACFPageTable_V2, 758<br/>AAX_IPageTable, 895<br/>AAX_VPageTable, 1052<br/></p>
<p>GetOffsetTable<br/>AAX_IDma, 862<br/></p>
<p>GetOrientation<br/></p>
<p>AAX_CParameter&lt; T &gt;, 544<br/>AAX_CStatelessParameter, 623<br/>AAX_IParameter, 920<br/></p>
<p>GetOutputRange<br/>AAX_CHostProcessor, 494<br/></p>
<p>GetOutputStemFormat<br/>AAX_IACFController, 688<br/>AAX_IController, 827<br/>AAX_VController, 1017<br/></p>
<p>GetParameter<br/>AAX_CEffectParameters, 459<br/>AAX_CParameterManager, 570<br/>AAX_IACFEffectParameters, 722<br/></p>
<p>GetParameterByID<br/>AAX_CParameterManager, 569<br/></p>
<p>GetParameterByName<br/>AAX_CParameterManager, 569, 570<br/></p>
<p>GetParameterDefaultNormalizedValue<br/>AAX_CEffectParameters, 457<br/>AAX_IACFEffectParameters, 720<br/></p>
<p>GetParameterIDFromIndex<br/>AAX_CEffectParameters, 461<br/>AAX_IACFEffectParameters, 723<br/></p>
<p>GetParameterIndex<br/>AAX_CEffectParameters, 459<br/>AAX_CParameterManager, 571<br/>AAX_IACFEffectParameters, 723<br/></p>
<p>GetParameterIsAutomatable<br/>AAX_CEffectParameters, 455<br/>AAX_IACFEffectParameters, 719<br/></p>
<p>GetParameterName<br/>AAX_CEffectParameters, 456<br/>AAX_IACFEffectParameters, 720<br/></p>
<p>GetParameterNameOfLength<br/>AAX_CEffectParameters, 456<br/>AAX_IACFEffectParameters, 720<br/></p>
<p>GetParameterNameVariationAtIndex<br/>AAX_IACFPageTable_V2, 760<br/>AAX_IPageTable, 896<br/>AAX_VPageTable, 1054<br/></p>
<p>GetParameterNameVariationOfLength<br/>AAX_IACFPageTable_V2, 761<br/>AAX_IPageTable, 897<br/>AAX_VPageTable, 1055<br/></p>
<p>GetParameterNormalizedValue<br/>AAX_CEffectParameters, 463<br/>AAX_IACFEffectParameters, 726<br/></p>
<p>GetParameterNumberOfSteps<br/>AAX_CEffectParameters, 456<br/>AAX_IACFEffectParameters, 719<br/></p>
<p>GetParameterOrientation<br/>AAX_CEffectParameters, 458<br/>AAX_IACFEffectParameters, 722<br/></p>
<p>GetParameterStringFromValue<br/>AAX_CEffectParameters, 462<br/>AAX_IACFEffectParameters, 725<br/></p>
<p>GetParameterType<br/>AAX_CEffectParameters, 458<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1374 INDEX<br/></b></p>
<p>AAX_IACFEffectParameters, 721<br/>GetParameterValueFromString<br/></p>
<p>AAX_CEffectParameters, 462<br/>AAX_IACFEffectParameters, 724<br/></p>
<p>GetParameterValueInfo<br/>AAX_CEffectParameters, 461<br/>AAX_IACFEffectParameters, 724<br/></p>
<p>GetParameterValueString<br/>AAX_CEffectParameters, 463<br/>AAX_IACFEffectParameters, 725<br/></p>
<p>GetPathToPlugInBundle<br/>Other Extensions, 281<br/></p>
<p>GetPlugInTargetPlatform<br/>AAX_IACFController_V3, 697<br/>AAX_IController, 836<br/>AAX_VController, 1019<br/></p>
<p>GetPointerProperty<br/>AAX_IPropertyMap, 931<br/>AAX_VPropertyMap, 1062<br/></p>
<p>GetProgress<br/>AAX_CTask, 654<br/>AAX_IACFTask, 778<br/>AAX_ITask, 946<br/>AAX_VTask, 1070<br/></p>
<p>GetProperty<br/>AAX_IACFPropertyMap, 770<br/>AAX_IPropertyMap, 931<br/>AAX_VPropertyMap, 1061<br/></p>
<p>GetProperty64<br/>AAX_IACFPropertyMap_V3, 773<br/></p>
<p>GetPropertyWithIDArray<br/>AAX_IACFPropertyMap_V2, 772<br/>AAX_IPropertyMap, 933<br/>AAX_VPropertyMap, 1064<br/></p>
<p>GetPtr<br/>AAX_CPacket, 523, 524<br/>AAX_IACFViewContainer, 793<br/>AAX_IViewContainer, 959<br/>AAX_VViewContainer, 1083<br/></p>
<p>GetRPDFWithAmplitudeOne<br/>AAX, 393<br/></p>
<p>GetRPDFWithAmplitudeOneHalf<br/>AAX, 393<br/></p>
<p>GetSampleRate<br/>AAX_IACFController, 687<br/>AAX_IController, 827<br/>AAX_VController, 1017<br/></p>
<p>GetSessionDocument<br/>AAX_CSessionDocumentClient, 597<br/></p>
<p>GetSideChainInputNum<br/>AAX_CHostProcessor, 496<br/>AAX_IACFHostProcessorDelegate, 749<br/>AAX_IHostProcessorDelegate, 879<br/>AAX_VHostProcessorDelegate, 1042<br/></p>
<p>GetSignalLatency<br/>AAX_IACFController, 688<br/>AAX_IController, 828<br/>AAX_VController, 1018<br/></p>
<p>GetSize<br/>AAX_CPacket, 524<br/>AAX_Map, 966<br/></p>
<p>GetSrc<br/>AAX_IDma, 858<br/></p>
<p>GetSrcEnd<br/>AAX_CHostProcessor, 494<br/></p>
<p>GetSrcStart<br/>AAX_CHostProcessor, 494<br/></p>
<p>GetStepValue<br/>AAX_CParameter&lt; T &gt;, 542<br/>AAX_CStatelessParameter, 610<br/>AAX_IParameter, 907<br/></p>
<p>GetStepValueFromNormalizedValue<br/>AAX_CParameter&lt; T &gt;, 542<br/>AAX_CStatelessParameter, 611<br/>AAX_IParameter, 908<br/></p>
<p>GetStringFromNormalizedValue<br/>AAX_CParameter&lt; T &gt;, 550<br/>AAX_CStatelessParameter, 616, 617<br/>AAX_IParameter, 913, 914<br/></p>
<p>GetTempoMap<br/>AAX_ISessionDocument, 935<br/>AAX_VSessionDocument, 1066<br/></p>
<p>GetTicksPerQuarter<br/>AAX_IACFTransport, 785<br/>AAX_ITransport, 953<br/>AAX_VTransport, 1077<br/></p>
<p>GetTimeCodeInfo<br/>AAX_IACFTransport_V2, 787<br/>AAX_ITransport, 954<br/>AAX_VTransport, 1078<br/></p>
<p>GetTimelineSelectionEndPosition<br/>AAX_IACFTransport_V4, 789<br/>AAX_ITransport, 956<br/>AAX_VTransport, 1080<br/></p>
<p>GetTimelineSelectionStartPosition<br/>AAX_IACFTransport_V2, 787<br/>AAX_ITransport, 954<br/>AAX_VTransport, 1078<br/></p>
<p>Getting Started with AAX, 50<br/>GetTODLocation<br/></p>
<p>AAX_IACFController, 689<br/>AAX_IController, 829<br/>AAX_VController, 1020<br/></p>
<p>GetTouchState<br/>AAX_IACFAutomationDelegate, 671<br/>AAX_IAutomationDelegate, 802<br/>AAX_VAutomationDelegate, 994<br/></p>
<p>GetTPDFWithAmplitudeOne<br/>AAX, 393<br/></p>
<p>GetTransferSize<br/>AAX_IDma, 860<br/></p>
<p>GetTransport<br/>AAX_IMIDINode, 888<br/></p>
<p>GetType<br/>AAX_CParameter&lt; T &gt;, 543<br/>AAX_CStatelessParameter, 622<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1375<br/></b></p>
<p>AAX_CTask, 653<br/>AAX_IACFTask, 777<br/>AAX_IACFViewContainer, 793<br/>AAX_IParameter, 919<br/>AAX_ITask, 945<br/>AAX_IViewContainer, 959<br/>AAX_VTask, 1069<br/>AAX_VViewContainer, 1083<br/></p>
<p>GetUnknown<br/>AAX_VAutomationDelegate, 991<br/></p>
<p>GetUpperBoundIndex<br/>AAX_Map, 965<br/></p>
<p>GetValue<br/>AAX_CParameter&lt; T &gt;, 557<br/></p>
<p>GetValueAsBool<br/>AAX_CParameter&lt; T &gt;, 552<br/>AAX_CParameterValue&lt; T &gt;, 576, 579<br/>AAX_CStatelessParameter, 618<br/>AAX_IParameter, 915<br/>AAX_IParameterValue, 923<br/></p>
<p>GetValueAsDouble<br/>AAX_CParameter&lt; T &gt;, 554<br/>AAX_CParameterValue&lt; T &gt;, 578, 580<br/>AAX_CStatelessParameter, 619<br/>AAX_IParameter, 916<br/>AAX_IParameterValue, 924<br/></p>
<p>GetValueAsFloat<br/>AAX_CParameter&lt; T &gt;, 553<br/>AAX_CParameterValue&lt; T &gt;, 577, 579<br/>AAX_CStatelessParameter, 619<br/>AAX_IParameter, 915<br/>AAX_IParameterValue, 924<br/></p>
<p>GetValueAsInt32<br/>AAX_CParameter&lt; T &gt;, 553<br/>AAX_CParameterValue&lt; T &gt;, 577, 579<br/>AAX_CStatelessParameter, 618<br/>AAX_IParameter, 915<br/>AAX_IParameterValue, 923<br/></p>
<p>GetValueAsString<br/>AAX_CParameter&lt; T &gt;, 554, 558<br/>AAX_CParameterValue&lt; T &gt;, 578, 580<br/>AAX_CStatelessParameter, 619<br/>AAX_IParameter, 916<br/>AAX_IParameterValue, 924<br/></p>
<p>GetValueString<br/>AAX_CParameter&lt; T &gt;, 545<br/>AAX_CStatelessParameter, 611, 612<br/>AAX_IParameter, 908, 909<br/></p>
<p>GetViewContainer<br/>AAX_CEffectGUI, 446<br/></p>
<p>GetViewContainerPtr<br/>AAX_CEffectGUI, 446<br/></p>
<p>GetViewContainerType<br/>AAX_CEffectGUI, 446<br/></p>
<p>GetViewSize<br/>AAX_CEffectGUI, 442<br/>AAX_IACFEffectGUI, 710<br/></p>
<p>GetX<br/></p>
<p>AAX_Map, 965<br/>GetY<br/></p>
<p>AAX_Map, 965<br/>GUI Extensions, 279<br/>GUI interface, 78<br/></p>
<p>HandleAssertFailure<br/>AAX_CHostServices, 498<br/>AAX_IACFHostServices_V3, 753<br/>AAX_IHostServices, 881<br/>AAX_VHostServices, 1044<br/></p>
<p>HandleMultipleParametersMouseDown<br/>AAX_IACFViewContainer_V2, 796<br/>AAX_IViewContainer, 962<br/>AAX_VViewContainer, 1087<br/></p>
<p>HandleMultipleParametersMouseDrag<br/>AAX_IACFViewContainer_V2, 796<br/>AAX_IViewContainer, 962<br/>AAX_VViewContainer, 1087<br/></p>
<p>HandleMultipleParametersMouseUp<br/>AAX_IACFViewContainer_V2, 797<br/>AAX_IViewContainer, 963<br/>AAX_VViewContainer, 1088<br/></p>
<p>HandleParameterMouseDown<br/>AAX_IACFViewContainer, 794<br/>AAX_IViewContainer, 960<br/>AAX_VViewContainer, 1084<br/></p>
<p>HandleParameterMouseDrag<br/>AAX_IACFViewContainer, 794<br/>AAX_IViewContainer, 960<br/>AAX_VViewContainer, 1084<br/></p>
<p>HandleParameterMouseEnter<br/>AAX_IACFViewContainer_V3, 798<br/>AAX_IViewContainer, 961<br/>AAX_VViewContainer, 1086<br/></p>
<p>HandleParameterMouseExit<br/>AAX_IACFViewContainer_V3, 798<br/>AAX_IViewContainer, 962<br/>AAX_VViewContainer, 1086<br/></p>
<p>HandleParameterMouseUp<br/>AAX_IACFViewContainer, 795<br/>AAX_IViewContainer, 961<br/>AAX_VViewContainer, 1086<br/></p>
<p>HDX DSP Guide, 180<br/>HEADER_SIZE<br/></p>
<p>AAX_ChunkDataParserDefs, 401<br/>height<br/></p>
<p>AAX_Rect, 968<br/>horz<br/></p>
<p>AAX_Point, 967<br/>Host Support, 291<br/>HostDefinition<br/></p>
<p>AAX_ICollection, 807<br/>AAX_VCollection, 999<br/>AAX_VDescriptionHost, 1033<br/></p>
<p>HostProcessorDelegate<br/>AAX_CHostProcessor, 496, 497<br/></p>
<p>Hybrid Processing architecture, 94<br/>GetHybridSignalLatency, 96<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1376 INDEX<br/></b></p>
<p>RenderAudio_Hybrid, 96<br/></p>
<p>IACFDefinition, 1092<br/>CopyAttribute, 1094<br/>DefineAttribute, 1093<br/>GetAttributeInfo, 1094<br/></p>
<p>IACFUnknown, 1095<br/>AddRef, 1096<br/>QueryInterface, 1095<br/>Release, 1096<br/></p>
<p>ID<br/>AAX_IFeatureInfo, 875<br/>AAX_VFeatureInfo, 1040<br/></p>
<p>Identifier<br/>AAX_CParameter&lt; T &gt;, 538<br/>AAX_CParameterValue&lt; T &gt;, 576<br/>AAX_CStatelessParameter, 605<br/>AAX_IParameter, 903<br/>AAX_IParameterValue, 922<br/></p>
<p>IID_IAAXAutomationDelegateV1<br/>AAX_UIDs.h, 1299<br/></p>
<p>IID_IAAXCollectionV1<br/>AAX_UIDs.h, 1296<br/></p>
<p>IID_IAAXComponentDescriptorV1<br/>AAX_UIDs.h, 1297<br/></p>
<p>IID_IAAXComponentDescriptorV2<br/>AAX_UIDs.h, 1297<br/></p>
<p>IID_IAAXComponentDescriptorV3<br/>AAX_UIDs.h, 1297<br/></p>
<p>IID_IAAXControllerV1<br/>AAX_UIDs.h, 1299<br/></p>
<p>IID_IAAXControllerV2<br/>AAX_UIDs.h, 1299<br/></p>
<p>IID_IAAXControllerV3<br/>AAX_UIDs.h, 1299<br/></p>
<p>IID_IAAXDataBufferV1<br/>AAX_UIDs.h, 1307<br/></p>
<p>IID_IAAXDescriptionHostV1<br/>AAX_UIDs.h, 1303<br/></p>
<p>IID_IAAXEffectDescriptorV1<br/>AAX_UIDs.h, 1296<br/></p>
<p>IID_IAAXEffectDescriptorV2<br/>AAX_UIDs.h, 1296<br/></p>
<p>IID_IAAXEffectDirectDataV1<br/>AAX_UIDs.h, 1306<br/></p>
<p>IID_IAAXEffectDirectDataV2<br/>AAX_UIDs.h, 1306<br/></p>
<p>IID_IAAXEffectGUIV1<br/>AAX_UIDs.h, 1306<br/></p>
<p>IID_IAAXEffectParametersV1<br/>AAX_UIDs.h, 1304<br/></p>
<p>IID_IAAXEffectParametersV2<br/>AAX_UIDs.h, 1305<br/></p>
<p>IID_IAAXEffectParametersV3<br/>AAX_UIDs.h, 1305<br/></p>
<p>IID_IAAXEffectParametersV4<br/>AAX_UIDs.h, 1305<br/></p>
<p>IID_IAAXFeatureInfoV1<br/>AAX_UIDs.h, 1303<br/></p>
<p>IID_IAAXHostProcessorDelegateV1<br/>AAX_UIDs.h, 1298<br/></p>
<p>IID_IAAXHostProcessorDelegateV2<br/>AAX_UIDs.h, 1298<br/></p>
<p>IID_IAAXHostProcessorDelegateV3<br/>AAX_UIDs.h, 1298<br/></p>
<p>IID_IAAXHostProcessorV1<br/>AAX_UIDs.h, 1305<br/></p>
<p>IID_IAAXHostProcessorV2<br/>AAX_UIDs.h, 1305<br/></p>
<p>IID_IAAXHostServicesV1<br/>AAX_UIDs.h, 1295<br/></p>
<p>IID_IAAXHostServicesV2<br/>AAX_UIDs.h, 1295<br/></p>
<p>IID_IAAXHostServicesV3<br/>AAX_UIDs.h, 1296<br/></p>
<p>IID_IAAXPageTableController<br/>AAX_UIDs.h, 1300<br/></p>
<p>IID_IAAXPageTableControllerV2<br/>AAX_UIDs.h, 1300<br/></p>
<p>IID_IAAXPageTableV1<br/>AAX_UIDs.h, 1303<br/></p>
<p>IID_IAAXPageTableV2<br/>AAX_UIDs.h, 1303<br/></p>
<p>IID_IAAXPrivateDataAccessV1<br/>AAX_UIDs.h, 1300<br/></p>
<p>IID_IAAXPropertyMapV1<br/>AAX_UIDs.h, 1297<br/></p>
<p>IID_IAAXPropertyMapV2<br/>AAX_UIDs.h, 1298<br/></p>
<p>IID_IAAXPropertyMapV3<br/>AAX_UIDs.h, 1298<br/></p>
<p>IID_IAAXSessionDocumentClientV1<br/>AAX_UIDs.h, 1307<br/></p>
<p>IID_IAAXSessionDocumentV1<br/>AAX_UIDs.h, 1304<br/></p>
<p>IID_IAAXTaskAgentV1<br/>AAX_UIDs.h, 1307<br/></p>
<p>IID_IAAXTaskV1<br/>AAX_UIDs.h, 1304<br/></p>
<p>IID_IAAXTransportControlV1<br/>AAX_UIDs.h, 1302<br/></p>
<p>IID_IAAXTransportV1<br/>AAX_UIDs.h, 1301<br/></p>
<p>IID_IAAXTransportV2<br/>AAX_UIDs.h, 1301<br/></p>
<p>IID_IAAXTransportV3<br/>AAX_UIDs.h, 1302<br/></p>
<p>IID_IAAXTransportV4<br/>AAX_UIDs.h, 1302<br/></p>
<p>IID_IAAXTransportV5<br/>AAX_UIDs.h, 1302<br/></p>
<p>IID_IAAXViewContainerV1<br/>AAX_UIDs.h, 1301<br/></p>
<p>IID_IAAXViewContainerV2<br/>AAX_UIDs.h, 1301<br/></p>
<p>IID_IAAXViewContainerV3<br/>AAX_UIDs.h, 1301<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1377<br/></b></p>
<p>Initialize<br/>AAX_CEffectDirectData, 435<br/>AAX_CEffectGUI, 440<br/>AAX_CEffectParameters, 453<br/>AAX_CHostProcessor, 488<br/>AAX_CPacketDispatcher, 525<br/>AAX_CParameterManager, 568<br/>AAX_CSessionDocumentClient, 594<br/>AAX_CTaskAgent, 657<br/>AAX_IACFEffectDirectData, 705<br/>AAX_IACFEffectGUI, 709<br/>AAX_IACFEffectParameters, 717<br/>AAX_IACFHostProcessor, 742<br/>AAX_IACFSessionDocumentClient, 775<br/>AAX_IACFTaskAgent, 780<br/>AAX_IHostTaskAgent, 883<br/>AAX_VHostTaskAgent, 1046<br/></p>
<p>Initialize_PrivateDataAccess<br/>AAX_CEffectDirectData, 437<br/></p>
<p>InitOutputBounds<br/>AAX_CHostProcessor, 489<br/>AAX_IACFHostProcessor, 742<br/></p>
<p>Insert<br/>AAX_CString, 635<br/></p>
<p>InsertHex<br/>AAX_CString, 635<br/></p>
<p>InsertNumber<br/>AAX_CString, 635<br/></p>
<p>InsertPage<br/>AAX_IACFPageTable, 755<br/>AAX_IPageTable, 892<br/>AAX_VPageTable, 1049<br/></p>
<p>Int32ToNormalized<br/>AAX_CEffectParameters.h, 1136<br/></p>
<p>IsAccentedClick<br/>AAX, 378<br/></p>
<p>IsAllNotesOff<br/>AAX, 378<br/></p>
<p>IsASCII<br/>AAX, 381<br/></p>
<p>IsAvidNotification<br/>AAX, 385<br/></p>
<p>IsClick<br/>AAX, 379<br/></p>
<p>IsDirty<br/>AAX_CPacket, 524<br/></p>
<p>IsEffectIDEqual<br/>AAX, 385<br/></p>
<p>IsEmpty<br/>AAX_CChunkDataParser, 428<br/></p>
<p>IsFourCharASCII<br/>AAX, 382<br/></p>
<p>IsMetronomeEnabled<br/>AAX_IACFTransport_V2, 788<br/>AAX_ITransport, 955<br/>AAX_VTransport, 1079<br/></p>
<p>IsNoteOff<br/>AAX, 378<br/></p>
<p>IsNoteOn<br/>AAX, 377<br/></p>
<p>IsParameterIDEqual<br/>AAX, 385<br/></p>
<p>IsParameterLinkReady<br/>AAX_CEffectParameters, 479<br/></p>
<p>IsParameterTouched<br/>AAX_CEffectParameters, 479<br/></p>
<p>IsSupported<br/>AAX_VPageTable, 1058<br/></p>
<p>IsTransferComplete<br/>AAX_IDma, 857<br/></p>
<p>IsTransportPlaying<br/>AAX_IACFTransport, 783<br/>AAX_ITransport, 951<br/>AAX_VTransport, 1073<br/></p>
<p>IsUnaccentedClick<br/>AAX, 378<br/></p>
<p>k32BitAbsMax<br/>AAX_CommonConversions.h, 1144<br/></p>
<p>k32BitNegMax<br/>AAX_CommonConversions.h, 1144<br/></p>
<p>k32BitPosMax<br/>AAX_CommonConversions.h, 1144<br/></p>
<p>k56kFloatNegMax<br/>AAX_CommonConversions.h, 1145<br/></p>
<p>k56kFloatPosMax<br/>AAX_CommonConversions.h, 1145<br/></p>
<p>k56kFracAbsMax<br/>AAX_CommonConversions.h, 1144<br/></p>
<p>k56kFracHalf<br/>AAX_CommonConversions.h, 1145<br/></p>
<p>k56kFracNegMax<br/>AAX_CommonConversions.h, 1145<br/></p>
<p>k56kFracNegOne<br/>AAX_CommonConversions.h, 1145<br/></p>
<p>k56kFracPosMax<br/>AAX_CommonConversions.h, 1144<br/></p>
<p>k56kFracZero<br/>AAX_CommonConversions.h, 1145<br/></p>
<p>kAAX_DataBufferType_TempoBreakpointArray<br/>AAX_SessionDocumentTypes.h, 1285<br/></p>
<p>kAAX_eTargetPlatform_Count<br/>AAX_Enums.h, 1198<br/></p>
<p>kAAX_eTargetPlatform_External<br/>AAX_Enums.h, 1198<br/></p>
<p>kAAX_eTargetPlatform_Native<br/>AAX_Enums.h, 1198<br/></p>
<p>kAAX_eTargetPlatform_None<br/>AAX_Enums.h, 1198<br/></p>
<p>kAAX_eTargetPlatform_TI<br/>AAX_Enums.h, 1198<br/></p>
<p>kAAX_ParameterIdentifierMaxSize<br/>AAX.h, 1117<br/></p>
<p>kAAX_ProcPtrID_Create_EffectDirectData<br/>AAX_Callbacks.h, 1131<br/></p>
<p>kAAX_ProcPtrID_Create_EffectGUI<br/>AAX_Callbacks.h, 1131<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1378 INDEX<br/></b></p>
<p>kAAX_ProcPtrID_Create_EffectParameters<br/>AAX_Callbacks.h, 1131<br/></p>
<p>kAAX_ProcPtrID_Create_HostProcessor<br/>AAX_Callbacks.h, 1131<br/></p>
<p>kAAX_ProcPtrID_Create_SessionDocumentClient<br/>AAX_Callbacks.h, 1131<br/></p>
<p>kAAX_ProcPtrID_Create_TaskAgent<br/>AAX_Callbacks.h, 1131<br/></p>
<p>kAAX_Trace_Priority_Critical<br/>AAX_Assert.h, 1121<br/></p>
<p>kAAX_Trace_Priority_High<br/>AAX_Assert.h, 1121<br/></p>
<p>kAAX_Trace_Priority_Low<br/>AAX_Assert.h, 1121<br/></p>
<p>kAAX_Trace_Priority_Lowest<br/>AAX_Assert.h, 1121<br/></p>
<p>kAAX_Trace_Priority_None<br/>AAX_Assert.h, 1120<br/></p>
<p>kAAX_Trace_Priority_Normal<br/>AAX_Assert.h, 1121<br/></p>
<p>kInvalidIndex<br/>AAX_CString, 640<br/></p>
<p>kMaxAdditionalMIDINodes<br/>AAX_CMonolithicParameters.h, 1140<br/></p>
<p>kMaxAuxOutputStems<br/>AAX_CMonolithicParameters.h, 1140<br/></p>
<p>kMaxStringLength<br/>AAX_CString, 641<br/></p>
<p>kNeg144DB<br/>AAX_CommonConversions.h, 1146<br/></p>
<p>kNeg144Gain<br/>AAX_CommonConversions.h, 1146<br/></p>
<p>Known Issues, 297<br/>kOneOver56kFracAbsMax<br/></p>
<p>AAX_CommonConversions.h, 1145<br/>kPowExtent<br/></p>
<p>AAX, 397<br/>kPowTableSize<br/></p>
<p>AAX, 397<br/>kSynchronizedParameterQueueSize<br/></p>
<p>AAX_CMonolithicParameters.h, 1140<br/></p>
<p>LastError<br/>AAX_CheckedResult, 485<br/></p>
<p>LastFailure<br/>AAX_AggregateResult, 406<br/></p>
<p>left<br/>AAX_Rect, 968<br/></p>
<p>Length<br/>AAX_CString, 631<br/>AAX_IMIDIMessageInfoDelegate, 885<br/>AAX_IString, 938<br/></p>
<p>Line<br/>AAX::Exception::Any, 1091<br/></p>
<p>Linked parameter update sequences, 136<br/>Linked parameters, 131<br/>LoadChunk<br/></p>
<p>AAX_CChunkDataParser, 429<br/>Lock<br/></p>
<p>AAX_CMutex, 517<br/>LogDoubleToLongControl<br/></p>
<p>AAX_SliderConversions.h, 1288<br/>LONG_STRING_IDENTIFIER<br/></p>
<p>AAX_ChunkDataParserDefs, 399<br/>LONG_TYPE<br/></p>
<p>AAX_ChunkDataParserDefs, 399<br/>LongControlToDouble<br/></p>
<p>AAX_SliderConversions.h, 1287<br/>LongControlToDoubleNonlinear<br/></p>
<p>AAX_SliderConversions.h, 1287<br/>LongControlToLogDouble<br/></p>
<p>AAX_SliderConversions.h, 1288<br/>LongControlToNewRange<br/></p>
<p>AAX_SliderConversions.h, 1286<br/>LongToDouble<br/></p>
<p>AAX_CommonConversions.h, 1142<br/>LongToLongControl<br/></p>
<p>AAX_SliderConversions.h, 1287<br/></p>
<p>mAdditionalInputMIDINodes<br/>AAX_SInstrumentRenderInfo, 973<br/></p>
<p>MapParameterID<br/>AAX_IACFPageTable, 757<br/>AAX_IPageTable, 894<br/>AAX_VPageTable, 1052<br/></p>
<p>Mask<br/>AAX_IMIDIMessageInfoDelegate, 884<br/></p>
<p>mAudioInputs<br/>AAX_SHybridRenderInfo, 969<br/>AAX_SInstrumentRenderInfo, 972<br/></p>
<p>mAudioOutputs<br/>AAX_SHybridRenderInfo, 969<br/>AAX_SInstrumentRenderInfo, 972<br/></p>
<p>mAudiosuiteID<br/>AAX_SInstrumentSetupInfo, 981<br/></p>
<p>mAutomatable<br/>AAX_CParameter&lt; T &gt;, 565<br/></p>
<p>mAutomationDelegate<br/>AAX_CParameter&lt; T &gt;, 565<br/>AAX_CParameterManager, 572<br/>AAX_CStatelessParameter, 625<br/></p>
<p>mAuxOutputStemFormats<br/>AAX_SInstrumentSetupInfo, 979<br/></p>
<p>mAuxOutputStemNames<br/>AAX_SInstrumentSetupInfo, 978<br/></p>
<p>Max<br/>AAX, 389<br/></p>
<p>MAX_NAME_LENGTH<br/>AAX_ChunkDataParserDefs, 401<br/></p>
<p>MAX_STRINGDATA_LENGTH<br/>AAX_ChunkDataParserDefs, 400<br/></p>
<p>MaxLength<br/>AAX_CString, 631<br/>AAX_IString, 938<br/></p>
<p>mBuffer<br/>AAX_CMidiStream, 509<br/></p>
<p>mBufferSize<br/>AAX_CMidiStream, 509<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1379<br/></b></p>
<p>mCanBypass<br/>AAX_SInstrumentSetupInfo, 980<br/></p>
<p>mChunkData<br/>AAX_CChunkDataParser, 430<br/></p>
<p>mChunkParser<br/>AAX_CEffectParameters, 481<br/></p>
<p>mChunkSize<br/>AAX_CEffectParameters, 481<br/></p>
<p>mChunkVersion<br/>AAX_CChunkDataParser, 430<br/></p>
<p>mClock<br/>AAX_SHybridRenderInfo, 970<br/>AAX_SInstrumentRenderInfo, 972<br/></p>
<p>mControlType<br/>AAX_CParameter&lt; T &gt;, 565<br/></p>
<p>mCurrentStateNum<br/>AAX_SInstrumentRenderInfo, 973<br/></p>
<p>mData<br/>AAX_CMidiPacket, 508<br/></p>
<p>mDataName<br/>AAX_CChunkDataParser::DataValue, 1092<br/></p>
<p>mDataType<br/>AAX_CChunkDataParser::DataValue, 1092<br/></p>
<p>mDataValues<br/>AAX_CChunkDataParser, 430<br/></p>
<p>mDefaultValue<br/>AAX_CParameter&lt; T &gt;, 566<br/></p>
<p>mDisplayDelegate<br/>AAX_CParameter&lt; T &gt;, 565<br/></p>
<p>Media Composer Guide, 171<br/>mFilteredParameters<br/></p>
<p>AAX_CEffectParameters, 481<br/>mGlobalMIDIEventMask<br/></p>
<p>AAX_SInstrumentSetupInfo, 976<br/>mGlobalMIDINodeName<br/></p>
<p>AAX_SInstrumentSetupInfo, 976<br/>mGlobalNode<br/></p>
<p>AAX_SInstrumentRenderInfo, 972<br/>mHybridInputStemFormat<br/></p>
<p>AAX_SInstrumentSetupInfo, 979<br/>mHybridOutputStemFormat<br/></p>
<p>AAX_SInstrumentSetupInfo, 979<br/>mID<br/></p>
<p>AAX_CStatelessParameter, 624<br/>MIDI, 99<br/>Min<br/></p>
<p>AAX, 389<br/>MinMax<br/></p>
<p>AAX, 389<br/>mInputMIDIChannelMask<br/></p>
<p>AAX_SInstrumentSetupInfo, 977<br/>mInputMIDINodeName<br/></p>
<p>AAX_SInstrumentSetupInfo, 976<br/>mInputNode<br/></p>
<p>AAX_SInstrumentRenderInfo, 972<br/>mInputStemFormat<br/></p>
<p>AAX_SInstrumentSetupInfo, 980<br/>mIntValue<br/></p>
<p>AAX_CChunkDataParser::DataValue, 1092<br/>mInverseStringMap<br/></p>
<p>AAX_CStringDisplayDelegate&lt; T &gt;, 652<br/>mIsImmediate<br/></p>
<p>AAX_CMidiPacket, 508<br/>mIsLoopEnabled<br/></p>
<p>AAX_TransportStateInfo_V1, 990<br/>mIsRecordEnabled<br/></p>
<p>AAX_TransportStateInfo_V1, 990<br/>mIsRecording<br/></p>
<p>AAX_TransportStateInfo_V1, 990<br/>mLastFoundIndex<br/></p>
<p>AAX_CChunkDataParser, 430<br/>mLength<br/></p>
<p>AAX_CMidiPacket, 507<br/>mManufacturerID<br/></p>
<p>AAX_SInstrumentSetupInfo, 981<br/>AAX_SPlugInIdentifierTriad, 987<br/></p>
<p>mMeterIDs<br/>AAX_SInstrumentSetupInfo, 978<br/></p>
<p>mMeters<br/>AAX_SInstrumentRenderInfo, 973<br/></p>
<p>mMonolithicParametersPtr<br/>AAX_SInstrumentPrivateData, 971<br/></p>
<p>mMultiMonoSupport<br/>AAX_SInstrumentSetupInfo, 981<br/></p>
<p>mNames<br/>AAX_CParameter&lt; T &gt;, 564<br/>AAX_CStatelessParameter, 624<br/></p>
<p>mNeedNotify<br/>AAX_CParameter&lt; T &gt;, 566<br/></p>
<p>mNeedsGlobalMIDI<br/>AAX_SInstrumentSetupInfo, 975<br/></p>
<p>mNeedsInputMIDI<br/>AAX_SInstrumentSetupInfo, 976<br/></p>
<p>mNeedsTransport<br/>AAX_SInstrumentSetupInfo, 977<br/></p>
<p>mNumAdditionalInputMIDINodes<br/>AAX_SInstrumentSetupInfo, 977<br/></p>
<p>mNumAudioInputs<br/>AAX_SHybridRenderInfo, 969<br/></p>
<p>mNumAudioOutputs<br/>AAX_SHybridRenderInfo, 970<br/></p>
<p>mNumAuxOutputStems<br/>AAX_SInstrumentSetupInfo, 978<br/></p>
<p>mNumChunkedParameters<br/>AAX_CEffectParameters, 481<br/></p>
<p>mNumMeters<br/>AAX_SInstrumentSetupInfo, 978<br/></p>
<p>mNumPlugInChanges<br/>AAX_CEffectParameters, 480<br/></p>
<p>mNumSamples<br/>AAX_SHybridRenderInfo, 970<br/>AAX_SInstrumentRenderInfo, 972<br/></p>
<p>mNumSteps<br/>AAX_CParameter&lt; T &gt;, 565<br/></p>
<p>Monolithic parameters, 112<br/>Monolithic VIs and Effects, 280<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1380 INDEX<br/></b></p>
<p>mOrientation<br/>AAX_CParameter&lt; T &gt;, 565<br/></p>
<p>mOutputStemFormat<br/>AAX_SInstrumentSetupInfo, 980<br/></p>
<p>mPacketDispatcher<br/>AAX_CEffectParameters, 481<br/></p>
<p>mParameterManager<br/>AAX_CEffectParameters, 481<br/></p>
<p>mParameters<br/>AAX_CParameterManager, 572<br/></p>
<p>mParametersMap<br/>AAX_CParameterManager, 572<br/></p>
<p>mPlugInID<br/>AAX_SPlugInIdentifierTriad, 988<br/></p>
<p>mPluginID<br/>AAX_SInstrumentSetupInfo, 981<br/></p>
<p>mPrivateData<br/>AAX_SInstrumentRenderInfo, 973<br/></p>
<p>mProductID<br/>AAX_SInstrumentSetupInfo, 981<br/>AAX_SPlugInIdentifierTriad, 987<br/></p>
<p>mRecordMode<br/>AAX_TransportStateInfo_V1, 990<br/></p>
<p>mSampleLocation<br/>AAX_CTempoBreakpoint, 659<br/></p>
<p>mString<br/>AAX_CString, 641<br/></p>
<p>mStringMap<br/>AAX_CStringDisplayDelegate&lt; T &gt;, 652<br/></p>
<p>mStringValue<br/>AAX_CChunkDataParser::DataValue, 1092<br/></p>
<p>mTaperDelegate<br/>AAX_CParameter&lt; T &gt;, 565<br/></p>
<p>mTimestamp<br/>AAX_CMidiPacket, 507<br/></p>
<p>mTransportMIDINodeName<br/>AAX_SInstrumentSetupInfo, 977<br/></p>
<p>mTransportNode<br/>AAX_SInstrumentRenderInfo, 973<br/></p>
<p>mTransportState<br/>AAX_TransportStateInfo_V1, 990<br/></p>
<p>mUnitString<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;, 663<br/></p>
<p>mUseHostGeneratedGUI<br/>AAX_SInstrumentSetupInfo, 980<br/></p>
<p>mValue<br/>AAX_CParameter&lt; T &gt;, 566<br/>AAX_CTempoBreakpoint, 659<br/></p>
<p>mValueString<br/>AAX_CStatelessParameter, 625<br/></p>
<p>Name<br/>AAX_CParameter&lt; T &gt;, 539<br/>AAX_CStatelessParameter, 606<br/>AAX_IParameter, 904<br/></p>
<p>NAME_NOT_FOUND<br/>AAX_ChunkDataParserDefs, 401<br/></p>
<p>NewComponentDescriptor<br/>AAX_IEffectDescriptor, 865<br/></p>
<p>AAX_VEffectDescriptor, 1034<br/>NewDescriptor<br/></p>
<p>AAX_ICollection, 804<br/>AAX_VCollection, 996<br/></p>
<p>NewPropertyMap<br/>AAX_ICollection, 806<br/>AAX_IComponentDescriptor, 818<br/>AAX_IEffectDescriptor, 867<br/>AAX_VCollection, 998<br/>AAX_VComponentDescriptor, 1010<br/>AAX_VEffectDescriptor, 1037<br/></p>
<p>None<br/>Task agent interface, 106<br/></p>
<p>NormalizedToInt32<br/>AAX_CEffectParameters.h, 1136<br/></p>
<p>NormalizedToReal<br/>AAX_CBinaryTaperDelegate&lt; T &gt;, 422<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>502<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>506<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, Real-<br/></p>
<p>Precision &gt;, 587<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>592<br/>AAX_CStateTaperDelegate&lt; T &gt;, 628<br/>AAX_ITaperDelegate&lt; T &gt;, 941<br/></p>
<p>NotificationReceived<br/>AAX_CEffectDirectData, 436<br/>AAX_CEffectGUI, 440<br/>AAX_CEffectParameters, 454<br/>AAX_CSessionDocumentClient, 595<br/>AAX_IACFEffectDirectData_V2, 706<br/>AAX_IACFEffectGUI, 709<br/>AAX_IACFEffectParameters, 717<br/>AAX_IACFSessionDocumentClient, 776<br/></p>
<p>NumAttempted<br/>AAX_AggregateResult, 406<br/></p>
<p>NumFailed<br/>AAX_AggregateResult, 406<br/></p>
<p>NumParameters<br/>AAX_CParameterManager, 568<br/></p>
<p>NumSucceeded<br/>AAX_AggregateResult, 406<br/></p>
<p>Offline processing interface, 102<br/>operator AAX_Result<br/></p>
<p>AAX_AggregateResult, 405<br/>AAX_CheckedResult, 485<br/></p>
<p>operator!=<br/>AAX_CString, 638, 639<br/>AAX_GUITypes.h, 1222, 1223<br/>AAX_TransportTypes.h, 1291<br/></p>
<p>operator&lt;<br/>AAX_CString, 639<br/>AAX_GUITypes.h, 1222<br/></p>
<p>operator&lt;&lt;<br/>AAX_CString, 640<br/></p>
<p>operator&lt;=<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1381<br/></b></p>
<p>AAX_GUITypes.h, 1222<br/>operator&gt;<br/></p>
<p>AAX_CString, 639<br/>AAX_GUITypes.h, 1222<br/></p>
<p>operator&gt;&gt;<br/>AAX_CString, 640<br/></p>
<p>operator&gt;=<br/>AAX_GUITypes.h, 1222<br/></p>
<p>operator+<br/>AAX_CString.h, 1153<br/></p>
<p>operator+=<br/>AAX_CString, 639, 640<br/></p>
<p>operator=<br/>AAX::Exception::Any, 1090<br/>AAX_AggregateResult, 405<br/>AAX_CArrayDataBuffer&lt; D &gt;, 408<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;, 411<br/>AAX_CEffectParameters, 453<br/>AAX_CheckedResult, 485<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>590<br/>AAX_CString, 632, 633<br/>AAX_CStringDataBuffer, 644<br/>AAX_CStringDataBufferOfType&lt; T &gt;, 647<br/>AAX_IString, 939<br/></p>
<p>operator==<br/>AAX_CString, 638<br/>AAX_GUITypes.h, 1222, 1223<br/>AAX_TransportTypes.h, 1291<br/></p>
<p>operator[]<br/>AAX_CString, 639<br/></p>
<p>operator|=<br/>AAX_CheckedResult, 485<br/></p>
<p>Other Extensions, 280<br/>AsStringMIDIStream_Debug, 280<br/>GetPathToPlugInBundle, 281<br/></p>
<p>override<br/>AAX_IEffectDirectData, 870<br/>AAX_IEffectGUI, 871<br/>AAX_IEffectParameters, 874<br/>AAX_IHostProcessor, 877<br/>AAX_ISessionDocumentClient, 937<br/></p>
<p>Page Table Guide, 225<br/>PageTableParameterMappingsAreEqual<br/></p>
<p>AAX, 379<br/>PageTableParameterNameVariationsAreEqual<br/></p>
<p>AAX, 379<br/>PageTablesAreEqual<br/></p>
<p>AAX, 379<br/>Parameter automation, 114<br/>Parameter Manager, 106<br/>Parameter update timing, 116<br/>Parameter updates, 116<br/>ParameterNameChanged<br/></p>
<p>AAX_IAutomationDelegate, 802<br/>AAX_VAutomationDelegate, 994<br/></p>
<p>ParameterUpdated<br/>AAX_CEffectGUI, 443<br/></p>
<p>AAX_IACFEffectGUI, 711<br/>Peek<br/></p>
<p>AAX_CAtomicQueue&lt; T, S &gt;, 415<br/>AAX_IPointerQueue&lt; T &gt;, 927<br/></p>
<p>Plug-in meters, 97<br/>Plug-in type conversion, 140<br/>PolyEval<br/></p>
<p>AAX, 389<br/>Pop<br/></p>
<p>AAX_CAtomicQueue&lt; T, S &gt;, 415<br/>AAX_IPointerQueue&lt; T &gt;, 927<br/></p>
<p>PostAnalyze<br/>AAX_CHostProcessor, 492<br/>AAX_IACFHostProcessor, 746<br/></p>
<p>PostCurrentValue<br/>AAX_IACFAutomationDelegate, 671<br/>AAX_IAutomationDelegate, 801<br/>AAX_VAutomationDelegate, 993<br/></p>
<p>PostMIDIPacket<br/>AAX_IMIDINode, 887<br/></p>
<p>PostPacket<br/>AAX_IACFController, 691<br/>AAX_IController, 831<br/>AAX_VController, 1022<br/></p>
<p>PostReleaseRequest<br/>AAX_IACFAutomationDelegate, 671<br/>AAX_IAutomationDelegate, 801<br/>AAX_VAutomationDelegate, 994<br/></p>
<p>PostRender<br/>AAX_CHostProcessor, 491<br/>AAX_IACFHostProcessor, 744<br/></p>
<p>PostRequest<br/>AAX_IDma, 856<br/></p>
<p>PostSetValueRequest<br/>AAX_IACFAutomationDelegate, 670<br/>AAX_IAutomationDelegate, 800<br/>AAX_VAutomationDelegate, 993<br/></p>
<p>PostTouchRequest<br/>AAX_IACFAutomationDelegate, 671<br/>AAX_IAutomationDelegate, 801<br/>AAX_VAutomationDelegate, 993<br/></p>
<p>PreAnalyze<br/>AAX_CHostProcessor, 492<br/>AAX_IACFHostProcessor, 745<br/></p>
<p>PreRender<br/>AAX_CHostProcessor, 491<br/>AAX_IACFHostProcessor, 744<br/></p>
<p>Primary<br/>AAX_CStringAbbreviations, 642<br/></p>
<p>Pro Tools Guide, 150<br/>Properties File, 102<br/>pt2Object<br/></p>
<p>AAX_CPacketHandler&lt; TWorker &gt;, 529<br/>Push<br/></p>
<p>AAX_CAtomicQueue&lt; T, S &gt;, 414<br/>AAX_IPointerQueue&lt; T &gt;, 926<br/></p>
<p>QueryInterface<br/>IACFUnknown, 1095<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1382 INDEX<br/></b></p>
<p>ReadMe.doxygen, 1322<br/>ReadPortDirect<br/></p>
<p>AAX_IACFPrivateDataAccess, 768<br/>AAX_IPrivateDataAccess, 928<br/>AAX_VPrivateDataAccess, 1059<br/></p>
<p>Real-time algorithm callback, 68<br/>Real-time performance, 112<br/>RealToNormalized<br/></p>
<p>AAX_CBinaryTaperDelegate&lt; T &gt;, 423<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>502<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>506<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, Real-<br/></p>
<p>Precision &gt;, 588<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>592<br/>AAX_CStateTaperDelegate&lt; T &gt;, 628<br/>AAX_ITaperDelegate&lt; T &gt;, 942<br/></p>
<p>ReceiveTask<br/>AAX_CTaskAgent, 658<br/></p>
<p>RegisterPacket<br/>AAX_CPacketDispatcher, 526<br/></p>
<p>RegisterParameter<br/>AAX_IACFAutomationDelegate, 669<br/>AAX_IAutomationDelegate, 799<br/>AAX_VAutomationDelegate, 992<br/></p>
<p>Release<br/>AAX_CParameter&lt; T &gt;, 552<br/>AAX_CStatelessParameter, 608<br/>AAX_IParameter, 905<br/>IACFUnknown, 1096<br/></p>
<p>ReleaseParameter<br/>AAX_CEffectParameters, 465<br/>AAX_IACFEffectParameters, 728<br/></p>
<p>RemoveAllParameters<br/>AAX_CParameterManager, 568<br/></p>
<p>RemovePage<br/>AAX_IACFPageTable, 755<br/>AAX_IPageTable, 892<br/>AAX_VPageTable, 1050<br/></p>
<p>RemoveParameter<br/>AAX_CParameterManager, 571<br/></p>
<p>RemoveParameterByID<br/>AAX_CParameterManager, 568<br/></p>
<p>RemoveProperty<br/>AAX_IACFPropertyMap, 771<br/>AAX_IPropertyMap, 933<br/>AAX_VPropertyMap, 1063<br/></p>
<p>RenderAudio<br/>AAX_CHostProcessor, 490<br/>AAX_CMonolithicParameters, 512<br/>AAX_IACFHostProcessor, 743<br/></p>
<p>RenderAudio_Hybrid<br/>AAX_CEffectParameters, 477<br/>Hybrid Processing architecture, 96<br/></p>
<p>Replace<br/>AAX_CString, 635, 636<br/></p>
<p>ReplaceDouble<br/>AAX_CChunkDataParser, 428<br/></p>
<p>RequestTransportStart<br/>AAX_IACFTransportControl, 792<br/>AAX_ITransport, 956<br/>AAX_VTransport, 1081<br/></p>
<p>RequestTransportStop<br/>AAX_IACFTransportControl, 792<br/>AAX_ITransport, 956<br/>AAX_VTransport, 1081<br/></p>
<p>Reset<br/>SAutoArray&lt; T &gt;, 1099<br/></p>
<p>ResetAcceptedResults<br/>AAX_CheckedResult, 484<br/></p>
<p>ResetFieldData<br/>AAX_CEffectParameters, 467<br/>AAX_CMonolithicParameters, 514<br/>AAX_IACFEffectParameters, 730<br/></p>
<p>Result<br/>AAX::Exception::ResultError, 1098<br/></p>
<p>ResultError<br/>AAX::Exception::ResultError, 1097<br/></p>
<p>Round<br/>AAX_CLinearTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>502<br/>AAX_CLogTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>507<br/>AAX_CPieceWiseLinearTaperDelegate&lt; T, Real-<br/></p>
<p>Precision &gt;, 588<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>592<br/></p>
<p>SafeLog<br/>AAX, 384<br/></p>
<p>SafeLogf<br/>AAX, 384<br/></p>
<p>sampleRateInMask<br/>AAX_Enums.h, 1204<br/></p>
<p>SAutoArray<br/>SAutoArray&lt; T &gt;, 1098<br/></p>
<p>SAutoArray&lt; T &gt;, 1098<br/>&#8764;SAutoArray, 1098<br/>Get, 1099<br/>Reset, 1099<br/>SAutoArray, 1098<br/></p>
<p>SendNotification<br/>AAX_IACFController_V2, 694<br/>AAX_IController, 832<br/>AAX_VController, 1023, 1024<br/></p>
<p>SessionDocumentChanged<br/>AAX_CSessionDocumentClient, 596<br/></p>
<p>SessionDocumentWillChange<br/>AAX_CSessionDocumentClient, 596<br/></p>
<p>Set<br/>AAX_CHostServices, 498<br/>AAX_CParameterValue&lt; T &gt;, 576<br/>AAX_CString, 632<br/>AAX_IString, 939<br/></p>
<p>SetAutomationDelegate<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1383<br/></b></p>
<p>AAX_CParameter&lt; T &gt;, 551<br/>AAX_CStatelessParameter, 608<br/>AAX_IParameter, 905<br/></p>
<p>SetBaseOffset<br/>AAX_IDma, 863<br/></p>
<p>SetBurstLength<br/>AAX_IDma, 859<br/></p>
<p>SetChunk<br/>AAX_CEffectParameters, 470<br/>AAX_IACFEffectParameters, 733<br/></p>
<p>SetCoefficients<br/>AAX_Map, 964<br/></p>
<p>SetControlHighlightInfo<br/>AAX_CEffectGUI, 444<br/>AAX_IACFEffectGUI, 712<br/></p>
<p>SetCustomData<br/>AAX_CEffectParameters, 475<br/>AAX_IACFEffectParameters, 734<br/></p>
<p>SetCycleCount<br/>AAX_IACFController, 690<br/>AAX_IController, 830<br/>AAX_VController, 1022<br/></p>
<p>SetDefaultValue<br/>AAX_CParameter&lt; T &gt;, 558<br/></p>
<p>SetDirty<br/>AAX_CPacket, 524<br/>AAX_CPacketDispatcher, 526<br/></p>
<p>SetDisplayDelegate<br/>AAX_CEffectParameters, 478<br/>AAX_CParameter&lt; T &gt;, 544<br/>AAX_CStatelessParameter, 624<br/>AAX_IParameter, 920<br/></p>
<p>SetDmaState<br/>AAX_IDma, 857<br/></p>
<p>SetDone<br/>AAX_CTask, 655<br/>AAX_IACFTask, 779<br/>AAX_ITask, 946<br/>AAX_VTask, 1071<br/></p>
<p>SetDst<br/>AAX_IDma, 858<br/></p>
<p>SetFifoBuffer<br/>AAX_IDma, 860<br/></p>
<p>SetFifoSize<br/>AAX_IDma, 863<br/></p>
<p>SetLinearBuffer<br/>AAX_IDma, 861<br/></p>
<p>SetLocation<br/>AAX_CHostProcessor, 490<br/>AAX_IACFHostProcessor, 743<br/></p>
<p>SetManufacturerName<br/>AAX_IACFCollection, 673<br/>AAX_ICollection, 804<br/>AAX_VCollection, 997<br/></p>
<p>SetName<br/>AAX_CParameter&lt; T &gt;, 538<br/>AAX_CStatelessParameter, 606<br/>AAX_IParameter, 903<br/></p>
<p>SetNormalizedDefaultValue<br/>AAX_CParameter&lt; T &gt;, 540<br/>AAX_CStatelessParameter, 609<br/>AAX_IParameter, 906<br/></p>
<p>SetNormalizedValue<br/>AAX_CParameter&lt; T &gt;, 540<br/>AAX_CStatelessParameter, 609<br/>AAX_IParameter, 906<br/></p>
<p>SetNumberOfSteps<br/>AAX_CParameter&lt; T &gt;, 541<br/>AAX_CStatelessParameter, 610<br/>AAX_IParameter, 907<br/></p>
<p>SetNumBursts<br/>AAX_IDma, 859<br/></p>
<p>SetNumOffsets<br/>AAX_IDma, 862<br/></p>
<p>SetOffsetTable<br/>AAX_IDma, 861<br/></p>
<p>SetOrientation<br/>AAX_CParameter&lt; T &gt;, 543<br/>AAX_CStatelessParameter, 623<br/>AAX_IParameter, 919<br/></p>
<p>SetPackageVersion<br/>AAX_IACFCollection, 674<br/>AAX_ICollection, 805<br/>AAX_VCollection, 997<br/></p>
<p>SetParameterDefaultNormalizedValue<br/>AAX_CEffectParameters, 457<br/>AAX_IACFEffectParameters, 721<br/></p>
<p>SetParameterNameVariation<br/>AAX_IACFPageTable_V2, 763<br/>AAX_IPageTable, 899<br/>AAX_VPageTable, 1057<br/></p>
<p>SetParameterNormalizedRelative<br/>AAX_CEffectParameters, 464<br/>AAX_IACFEffectParameters, 726<br/></p>
<p>SetParameterNormalizedValue<br/>AAX_CEffectParameters, 463<br/>AAX_IACFEffectParameters, 726<br/></p>
<p>SetParameters<br/>AAX_FastInterpolatedTableLookup&lt; TFLOAT,<br/></p>
<p>DFLOAT &gt;, 667<br/>SetPrimary<br/></p>
<p>AAX_CStringAbbreviations, 642<br/>SetProgress<br/></p>
<p>AAX_CTask, 654<br/>AAX_IACFTask, 778<br/>AAX_ITask, 945<br/>AAX_VTask, 1070<br/></p>
<p>SetProperties<br/>AAX_IACFCollection, 674<br/>AAX_IACFEffectDescriptor, 702<br/>AAX_ICollection, 806<br/>AAX_IEffectDescriptor, 867<br/>AAX_VCollection, 998<br/>AAX_VEffectDescriptor, 1037<br/></p>
<p>SetSessionDocument<br/>AAX_CSessionDocumentClient, 595<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1384 INDEX<br/></b></p>
<p>AAX_IACFSessionDocumentClient, 776<br/>SetSignalLatency<br/></p>
<p>AAX_IACFController, 690<br/>AAX_IController, 829<br/>AAX_VController, 1021<br/></p>
<p>SetSrc<br/>AAX_IDma, 858<br/></p>
<p>SetStepValue<br/>AAX_CParameter&lt; T &gt;, 542<br/>AAX_CStatelessParameter, 611<br/>AAX_IParameter, 908<br/></p>
<p>SetTaperDelegate<br/>AAX_CEffectParameters, 478<br/>AAX_CParameter&lt; T &gt;, 544<br/>AAX_CStatelessParameter, 623<br/>AAX_IParameter, 920<br/></p>
<p>SetToDefaultValue<br/>AAX_CParameter&lt; T &gt;, 540<br/>AAX_CStatelessParameter, 610<br/>AAX_IParameter, 907<br/></p>
<p>SetTransferSize<br/>AAX_IDma, 860<br/></p>
<p>SetType<br/>AAX_CParameter&lt; T &gt;, 543<br/>AAX_CStatelessParameter, 622<br/>AAX_IParameter, 919<br/></p>
<p>SetValue<br/>AAX_CParameter&lt; T &gt;, 557<br/></p>
<p>SetValueFromString<br/>AAX_CParameter&lt; T &gt;, 551<br/>AAX_CStatelessParameter, 617<br/>AAX_IParameter, 914<br/></p>
<p>SetValueWithBool<br/>AAX_CParameter&lt; T &gt;, 555, 559<br/>AAX_CStatelessParameter, 620<br/>AAX_IParameter, 917<br/></p>
<p>SetValueWithDouble<br/>AAX_CParameter&lt; T &gt;, 556, 560<br/>AAX_CStatelessParameter, 621<br/>AAX_IParameter, 918<br/></p>
<p>SetValueWithFloat<br/>AAX_CParameter&lt; T &gt;, 555, 560<br/>AAX_CStatelessParameter, 621<br/>AAX_IParameter, 918<br/></p>
<p>SetValueWithInt32<br/>AAX_CParameter&lt; T &gt;, 555, 559<br/>AAX_CStatelessParameter, 620<br/>AAX_IParameter, 917<br/></p>
<p>SetValueWithString<br/>AAX_CParameter&lt; T &gt;, 556, 560<br/>AAX_CStatelessParameter, 622<br/>AAX_IParameter, 918<br/></p>
<p>SetViewContainer<br/>AAX_CEffectGUI, 441<br/>AAX_IACFEffectGUI, 710<br/></p>
<p>SetViewSize<br/>AAX_IACFViewContainer, 794<br/>AAX_IViewContainer, 960<br/></p>
<p>AAX_VViewContainer, 1084<br/>SHORT_STRING_IDENTIFIER<br/></p>
<p>AAX_ChunkDataParserDefs, 400<br/>SHORT_TYPE<br/></p>
<p>AAX_ChunkDataParserDefs, 400<br/>SHORT_TYPE_INCR<br/></p>
<p>AAX_ChunkDataParserDefs, 400<br/>SHORT_TYPE_SIZE<br/></p>
<p>AAX_ChunkDataParserDefs, 400<br/>ShortenedName<br/></p>
<p>AAX_CParameter&lt; T &gt;, 539<br/>AAX_CStatelessParameter, 607<br/>AAX_IParameter, 904<br/></p>
<p>Sidechain Inputs, 103<br/>Sign<br/></p>
<p>AAX, 389<br/>SinCosMix<br/></p>
<p>AAX, 390<br/>Size<br/></p>
<p>AAX_CArrayDataBuffer&lt; D &gt;, 409<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;, 412<br/>AAX_CStringDataBuffer, 645<br/>AAX_CStringDataBufferOfType&lt; T &gt;, 648<br/>AAX_IACFDataBuffer, 698<br/>AAX_IDataBufferWrapper, 842<br/>AAX_ISessionDocument::TempoMap, 1100<br/>AAX_VDataBufferWrapper, 1030<br/>AAX_VSessionDocument::VTempoMap, 1101<br/></p>
<p>SmartRound<br/>AAX_CRangeTaperDelegate&lt; T, RealPrecision &gt;,<br/></p>
<p>593<br/>StackTrace<br/></p>
<p>AAX_CHostServices, 499<br/>AAX_IACFHostServices_V2, 752<br/>AAX_IHostServices, 882<br/>AAX_VHostServices, 1045<br/></p>
<p>StaticDescribe<br/>AAX_CMonolithicParameters, 515<br/></p>
<p>StaticRenderAudio<br/>AAX_CMonolithicParameters, 516<br/></p>
<p>Status<br/>AAX_CTask, 655<br/></p>
<p>StdString<br/>AAX_CString, 633<br/></p>
<p>String2Binary<br/>AAX, 381<br/></p>
<p>STRING_IDENTIFIER_SIZE<br/>AAX_ChunkDataParserDefs, 401<br/></p>
<p>STRING_STRING_IDENTIFIER<br/>AAX_ChunkDataParserDefs, 400<br/></p>
<p>STRING_TYPE<br/>AAX_ChunkDataParserDefs, 400<br/></p>
<p>StringToValue<br/>AAX_CBinaryDisplayDelegate&lt; T &gt;, 419<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p>433<br/>AAX_CNumberDisplayDelegate&lt; T, Precision,<br/></p>
<p>SpaceAfter &gt;, 520<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>INDEX 1385<br/></b></p>
<p>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;,<br/>583<br/></p>
<p>AAX_CStateDisplayDelegate&lt; T &gt;, 601<br/>AAX_CStringDisplayDelegate&lt; T &gt;, 651<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;, 662<br/>AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p>666<br/>AAX_IDisplayDelegate&lt; T &gt;, 848<br/>AAX_IDisplayDelegateDecorator&lt; T &gt;, 853<br/></p>
<p>SubString<br/>AAX_CString, 637<br/></p>
<p>Supplemental Information, 281<br/>Supported<br/></p>
<p>AAX_VDescriptionHost, 1032<br/>SupportLevel<br/></p>
<p>AAX_IACFFeatureInfo, 740<br/>AAX_IFeatureInfo, 875<br/>AAX_VFeatureInfo, 1040<br/></p>
<p>Taper delegates, 109<br/>TaperDelegate<br/></p>
<p>AAX_CParameter&lt; T &gt;, 558<br/>Task agent interface, 104<br/></p>
<p>AAX_TaskCompletionStatus, 105<br/>Canceled, 106<br/>Done, 106<br/>Error, 106<br/>None, 106<br/></p>
<p>template_size<br/>AAX_CAtomicQueue&lt; T, S &gt;, 416<br/></p>
<p>template_type<br/>AAX_CAtomicQueue&lt; T, S &gt;, 413<br/>AAX_IPointerQueue&lt; T &gt;, 926<br/></p>
<p>The Avid Component Framework (ACF), 144<br/>ThirtyTwoBitDSPCoefToDouble<br/></p>
<p>AAX_CommonConversions.h, 1143<br/>TI_VERSION<br/></p>
<p>AAX.h, 1106<br/>TimerWakeup<br/></p>
<p>AAX_CEffectDirectData, 436<br/>AAX_CEffectGUI, 442<br/>AAX_CEffectParameters, 471<br/>AAX_CMonolithicParameters, 514<br/>AAX_IACFEffectDirectData, 705<br/>AAX_IACFEffectGUI, 711<br/>AAX_IACFEffectParameters, 733<br/></p>
<p>TimerWakeup_PrivateDataAccess<br/>AAX_CEffectDirectData, 437<br/></p>
<p>ToDouble<br/>AAX_CString, 637<br/></p>
<p>ToHexadecimal<br/>AAX::internal, 398<br/></p>
<p>ToInteger<br/>AAX_CString, 637<br/></p>
<p>Token protocol, 123<br/>top<br/></p>
<p>AAX_Rect, 968<br/>ToString<br/></p>
<p>AAX_IMIDIMessageInfoDelegate, 885<br/></p>
<p>AAX_TransportStateInfo_V1, 989<br/>ToString_AppendByteRange<br/></p>
<p>AAX_IMIDIMessageInfoDelegate, 886<br/>ToString_AppendCStr<br/></p>
<p>AAX_IMIDIMessageInfoDelegate, 886<br/>ToString_AppendNumber<br/></p>
<p>AAX_IMIDIMessageInfoDelegate, 885<br/>ToString_AppendValid<br/></p>
<p>AAX_IMIDIMessageInfoDelegate, 886<br/>Touch<br/></p>
<p>AAX_CParameter&lt; T &gt;, 552<br/>AAX_CStatelessParameter, 608<br/>AAX_IParameter, 905<br/></p>
<p>TouchParameter<br/>AAX_CEffectParameters, 464<br/>AAX_IACFEffectParameters, 727<br/></p>
<p>TParamValPair<br/>AAX_CMonolithicParameters, 511<br/></p>
<p>Trace<br/>AAX_CHostServices, 498<br/>AAX_IACFHostServices, 751<br/>AAX_IHostServices, 881<br/>AAX_VHostServices, 1044<br/></p>
<p>TranslateOutputBounds<br/>AAX_CHostProcessor, 495<br/></p>
<p>Transport<br/>AAX_CEffectGUI, 446<br/>AAX_CEffectParameters, 478<br/></p>
<p>Troubleshooting, 282<br/>Try_Lock<br/></p>
<p>AAX_CMutex, 517<br/>Type<br/></p>
<p>AAX_CArrayDataBuffer&lt; D &gt;, 408<br/>AAX_CArrayDataBufferOfType&lt; T, D &gt;, 411<br/>AAX_CParameter&lt; T &gt;, 534<br/>AAX_CStringDataBuffer, 644<br/>AAX_CStringDataBufferOfType&lt; T &gt;, 647<br/>AAX_IACFDataBuffer, 698<br/>AAX_IDataBufferWrapper, 842<br/>AAX_VDataBufferWrapper, 1030<br/></p>
<p>Uninitialize<br/>AAX_CEffectDirectData, 435<br/>AAX_CEffectGUI, 440<br/>AAX_CEffectParameters, 454<br/>AAX_CHostProcessor, 488<br/>AAX_CSessionDocumentClient, 595<br/>AAX_CTaskAgent, 658<br/>AAX_IACFEffectDirectData, 705<br/>AAX_IACFEffectGUI, 709<br/>AAX_IACFEffectParameters, 717<br/>AAX_IACFHostProcessor, 742<br/>AAX_IACFSessionDocumentClient, 775<br/>AAX_IACFTaskAgent, 781<br/>AAX_IHostTaskAgent, 883<br/>AAX_VHostTaskAgent, 1046<br/></p>
<p>Unlock<br/>AAX_CMutex, 517<br/></p>
<p>UnregisterParameter<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
<div style="page-break-before:always; page-break-after:always"><div><p><b>1386 INDEX<br/></b></p>
<p>AAX_IACFAutomationDelegate, 670<br/>AAX_IAutomationDelegate, 800<br/>AAX_VAutomationDelegate, 992<br/></p>
<p>UpdateAllParameters<br/>AAX_CEffectGUI, 445<br/></p>
<p>UpdateControlMIDINodes<br/>AAX_CEffectParameters, 476<br/>AAX_IACFEffectParameters_V2, 736<br/></p>
<p>UpdateMIDINodes<br/>AAX_CEffectParameters, 476<br/>AAX_IACFEffectParameters_V2, 736<br/></p>
<p>UpdateNormalizedValue<br/>AAX_CParameter&lt; T &gt;, 557<br/>AAX_CStatelessParameter, 624<br/>AAX_IParameter, 921<br/></p>
<p>UpdatePageTable<br/>AAX_CEffectParameters, 474, 479<br/>AAX_IACFEffectParameters_V4, 738<br/></p>
<p>UpdateParameterNormalizedRelative<br/>AAX_CEffectParameters, 466<br/>AAX_IACFEffectParameters, 729<br/></p>
<p>UpdateParameterNormalizedValue<br/>AAX_CEffectParameters, 466<br/>AAX_CMonolithicParameters, 513<br/>AAX_IACFEffectParameters, 729<br/></p>
<p>UpdateParameterTouch<br/>AAX_CEffectParameters, 465<br/>AAX_IACFEffectParameters, 728<br/></p>
<p>Valid<br/>AAX_ISessionDocument, 935<br/>AAX_VSessionDocument, 1066<br/></p>
<p>value_type<br/>AAX_CAtomicQueue&lt; T, S &gt;, 414<br/>AAX_IPointerQueue&lt; T &gt;, 926<br/></p>
<p>ValueToString<br/>AAX_CBinaryDisplayDelegate&lt; T &gt;, 418, 419<br/>AAX_CDecibelDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p>432<br/>AAX_CNumberDisplayDelegate&lt; T, Precision,<br/></p>
<p>SpaceAfter &gt;, 518, 520<br/>AAX_CPercentDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p>582, 583<br/>AAX_CStateDisplayDelegate&lt; T &gt;, 600<br/>AAX_CStringDisplayDelegate&lt; T &gt;, 650, 651<br/>AAX_CUnitDisplayDelegateDecorator&lt; T &gt;, 661,<br/></p>
<p>662<br/>AAX_CUnitPrefixDisplayDelegateDecorator&lt; T &gt;,<br/></p>
<p>665, 666<br/>AAX_IDisplayDelegate&lt; T &gt;, 846, 847<br/>AAX_IDisplayDelegateDecorator&lt; T &gt;, 851, 852<br/></p>
<p>VENUE Guide, 354<br/>VERSION_ID_1<br/></p>
<p>AAX_ChunkDataParserDefs, 401<br/>vert<br/></p>
<p>AAX_Point, 967<br/>VTempoMap<br/></p>
<p>AAX_VSessionDocument::VTempoMap, 1101<br/></p>
<p>What<br/>AAX::Exception::Any, 1090<br/></p>
<p>width<br/>AAX_Rect, 968<br/></p>
<p>WordAlign<br/>AAX_CChunkDataParser, 429<br/></p>
<p>WritePortDirect<br/>AAX_IACFPrivateDataAccess, 769<br/>AAX_IPrivateDataAccess, 929<br/>AAX_VPrivateDataAccess, 1059<br/></p>
<p>ZeroMemoryDW<br/>AAX, 387<br/></p>
<p>ZeroMemorySW<br/>AAX, 387<br/></p>
<p><b>Generated by Doxygen</b></p>

</div></div>
</body></html>
